
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000524c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005854  08005854  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800585c  0800585c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005860  08005860  00015860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000088  080058ec  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c6c  080058ec  00021c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc03  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232f  00000000  00000000  0002ccbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e81  00000000  00000000  00030790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f511  00000000  00000000  00048611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093714  00000000  00000000  00057b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000eb288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053d4 	.word	0x080053d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080053d4 	.word	0x080053d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <getRainbowColor>:
 *      Author: dsava
 */

#include "Bitmap_Display.h"

uint32_t getRainbowColor(uint8_t colorOption) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    switch (colorOption) {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d84a      	bhi.n	800063c <getRainbowColor+0xa8>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <getRainbowColor+0x18>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	080005f3 	.word	0x080005f3
 80005b4:	080005f7 	.word	0x080005f7
 80005b8:	080005fb 	.word	0x080005fb
 80005bc:	080005ff 	.word	0x080005ff
 80005c0:	08000605 	.word	0x08000605
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000611 	.word	0x08000611
 80005cc:	08000617 	.word	0x08000617
 80005d0:	0800061b 	.word	0x0800061b
 80005d4:	0800061f 	.word	0x0800061f
 80005d8:	08000625 	.word	0x08000625
 80005dc:	08000629 	.word	0x08000629
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	08000631 	.word	0x08000631
 80005e8:	08000637 	.word	0x08000637
        case 1:
            return 0xFF0000; // Red
 80005ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80005f0:	e026      	b.n	8000640 <getRainbowColor+0xac>
        case 2:
            return 0xFF7F00; // Orange
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <getRainbowColor+0xb8>)
 80005f4:	e024      	b.n	8000640 <getRainbowColor+0xac>
        case 3:
            return 0xFFFF00; // Yellow
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <getRainbowColor+0xbc>)
 80005f8:	e022      	b.n	8000640 <getRainbowColor+0xac>
        case 4:
            return 0x7FFF00; // Yellow-Green
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <getRainbowColor+0xc0>)
 80005fc:	e020      	b.n	8000640 <getRainbowColor+0xac>
        case 5:
            return 0x00FF00; // Green
 80005fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000602:	e01d      	b.n	8000640 <getRainbowColor+0xac>
        case 6:
            return 0x00FF7F; // Spring Green
 8000604:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000608:	e01a      	b.n	8000640 <getRainbowColor+0xac>
        case 7:
            return 0x00FFFF; // Cyan
 800060a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060e:	e017      	b.n	8000640 <getRainbowColor+0xac>
        case 8:
            return 0x007FFF; // Sky Blue
 8000610:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000614:	e014      	b.n	8000640 <getRainbowColor+0xac>
        case 9:
            return 0x0000FF; // Blue
 8000616:	23ff      	movs	r3, #255	; 0xff
 8000618:	e012      	b.n	8000640 <getRainbowColor+0xac>
        case 10:
            return 0x7F00FF; // Violet
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <getRainbowColor+0xc4>)
 800061c:	e010      	b.n	8000640 <getRainbowColor+0xac>
        case 11:
            return 0xFF00FF; // Magenta
 800061e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8000622:	e00d      	b.n	8000640 <getRainbowColor+0xac>
        case 12:
            return 0xFF007F; // Rose
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <getRainbowColor+0xc8>)
 8000626:	e00b      	b.n	8000640 <getRainbowColor+0xac>
        case 13:
            return 0xFF1493; // Deep Pink
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <getRainbowColor+0xcc>)
 800062a:	e009      	b.n	8000640 <getRainbowColor+0xac>
        case 14:
            return 0xC71585; // Medium Violet Red
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <getRainbowColor+0xd0>)
 800062e:	e007      	b.n	8000640 <getRainbowColor+0xac>
        case 15:
            return 0x800080; // Purple
 8000630:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
 8000634:	e004      	b.n	8000640 <getRainbowColor+0xac>
        case 16:
            return 0x8B008B; // Dark Magenta
 8000636:	f04f 138b 	mov.w	r3, #9109643	; 0x8b008b
 800063a:	e001      	b.n	8000640 <getRainbowColor+0xac>
        default:
            return 0xFFFFFF; // Default to White if an unexpected value is provided
 800063c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    }
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	00ff7f00 	.word	0x00ff7f00
 8000650:	00ffff00 	.word	0x00ffff00
 8000654:	007fff00 	.word	0x007fff00
 8000658:	007f00ff 	.word	0x007f00ff
 800065c:	00ff007f 	.word	0x00ff007f
 8000660:	00ff1493 	.word	0x00ff1493
 8000664:	00c71585 	.word	0x00c71585

08000668 <clear_display_buffer>:
    MINUTE_THIRTY
};

unsigned char displayBuffer[12][11] = {0}; // Adjust the buffer to be 12 rows by 11 columns

void clear_display_buffer() {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
    for (int row = 0; row < 12; row++) {
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	e017      	b.n	80006a4 <clear_display_buffer+0x3c>
        for (int col = 0; col < 11; col++) {
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	e00e      	b.n	8000698 <clear_display_buffer+0x30>
            displayBuffer[row][col] = 0; // Clear the bit in the display buffer
 800067a:	490f      	ldr	r1, [pc, #60]	; (80006b8 <clear_display_buffer+0x50>)
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	18ca      	adds	r2, r1, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) {
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	2b0a      	cmp	r3, #10
 800069c:	dded      	ble.n	800067a <clear_display_buffer+0x12>
    for (int row = 0; row < 12; row++) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b0b      	cmp	r3, #11
 80006a8:	dde4      	ble.n	8000674 <clear_display_buffer+0xc>
        }
    }
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	200000a4 	.word	0x200000a4

080006bc <add_bmp>:

void add_bmp(const uint16_t bmp[12]) {
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    for (int row = 0; row < 12; row++) { // Loop over each row
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e032      	b.n	8000730 <add_bmp+0x74>
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e029      	b.n	8000724 <add_bmp+0x68>
            if ((bmp[row] & (1 << col)) != 0) { // Check if the bit is set in bmp at (row, col)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	fa42 f303 	asr.w	r3, r2, r3
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d019      	beq.n	800071e <add_bmp+0x62>
                displayBuffer[row][col] |= 1; // Set the bit in the display buffer
 80006ea:	4916      	ldr	r1, [pc, #88]	; (8000744 <add_bmp+0x88>)
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	18ca      	adds	r2, r1, r3
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	b2d8      	uxtb	r0, r3
 8000706:	490f      	ldr	r1, [pc, #60]	; (8000744 <add_bmp+0x88>)
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	18ca      	adds	r2, r1, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	4602      	mov	r2, r0
 800071c:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3301      	adds	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b0a      	cmp	r3, #10
 8000728:	ddd2      	ble.n	80006d0 <add_bmp+0x14>
    for (int row = 0; row < 12; row++) { // Loop over each row
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b0b      	cmp	r3, #11
 8000734:	ddc9      	ble.n	80006ca <add_bmp+0xe>
            }
        }
    }
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	200000a4 	.word	0x200000a4

08000748 <display_bmp>:

void display_bmp(uint32_t preset) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

	uint32_t color = getRainbowColor(preset);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff1d 	bl	8000594 <getRainbowColor>
 800075a:	60f8      	str	r0, [r7, #12]
    // Extract the red, green, and blue components from the color
    uint8_t red = (color >> 16) & 0xFF;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	72fb      	strb	r3, [r7, #11]
    uint8_t green = (color >> 8) & 0xFF;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	72bb      	strb	r3, [r7, #10]
    uint8_t blue = color & 0xFF;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	727b      	strb	r3, [r7, #9]

    for (int row = 0; row < 12; row++) {
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e035      	b.n	80007de <display_bmp+0x96>
        for (int col = 0; col < 11; col++) {
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	e02c      	b.n	80007d2 <display_bmp+0x8a>
            if (displayBuffer[row][col] & 1) { // Check if the bit is set
 8000778:	491d      	ldr	r1, [pc, #116]	; (80007f0 <display_bmp+0xa8>)
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	18ca      	adds	r2, r1, r3
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00d      	beq.n	80007b2 <display_bmp+0x6a>
                // Set the LED to the specified color
                Set_LED((row * 11) + col, red, green, blue);
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	441a      	add	r2, r3
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	18d0      	adds	r0, r2, r3
 80007a6:	7af9      	ldrb	r1, [r7, #11]
 80007a8:	7aba      	ldrb	r2, [r7, #10]
 80007aa:	7a7b      	ldrb	r3, [r7, #9]
 80007ac:	f004 f894 	bl	80048d8 <Set_LED>
 80007b0:	e00c      	b.n	80007cc <display_bmp+0x84>
            } else {
                // Turn the LED off
                Set_LED((row * 11) + col, 0, 0, 0);
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	441a      	add	r2, r3
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	18d0      	adds	r0, r2, r3
 80007c2:	2300      	movs	r3, #0
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	f004 f886 	bl	80048d8 <Set_LED>
        for (int col = 0; col < 11; col++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b0a      	cmp	r3, #10
 80007d6:	ddcf      	ble.n	8000778 <display_bmp+0x30>
    for (int row = 0; row < 12; row++) {
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	2b0b      	cmp	r3, #11
 80007e2:	ddc6      	ble.n	8000772 <display_bmp+0x2a>
            }
        }
    }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000a4 	.word	0x200000a4

080007f4 <display_time>:



void display_time(int hour, int minute) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	add_bmp(BMP_ITS);
 80007fe:	4859      	ldr	r0, [pc, #356]	; (8000964 <display_time+0x170>)
 8000800:	f7ff ff5c 	bl	80006bc <add_bmp>
    // Round down to the nearest five minutes
    minute = (minute / 5) * 5;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	4a58      	ldr	r2, [pc, #352]	; (8000968 <display_time+0x174>)
 8000808:	fb82 1203 	smull	r1, r2, r2, r3
 800080c:	1052      	asrs	r2, r2, #1
 800080e:	17db      	asrs	r3, r3, #31
 8000810:	1ad2      	subs	r2, r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	603b      	str	r3, [r7, #0]

    // Display minute, accounting for 'past' or 'to'
    if (minute < 5) {
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b04      	cmp	r3, #4
 800081e:	dd10      	ble.n	8000842 <display_time+0x4e>
    	//no past or till
    } else if (minute < 35) {
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	2b22      	cmp	r3, #34	; 0x22
 8000824:	dc03      	bgt.n	800082e <display_time+0x3a>
        add_bmp(BMP_PAST);
 8000826:	4851      	ldr	r0, [pc, #324]	; (800096c <display_time+0x178>)
 8000828:	f7ff ff48 	bl	80006bc <add_bmp>
 800082c:	e009      	b.n	8000842 <display_time+0x4e>
    } else {
        minute = 60 - minute;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000834:	603b      	str	r3, [r7, #0]
        hour++;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3301      	adds	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
        add_bmp(BMP_TILL);
 800083c:	484c      	ldr	r0, [pc, #304]	; (8000970 <display_time+0x17c>)
 800083e:	f7ff ff3d 	bl	80006bc <add_bmp>
    }

    if(hour == 0 || hour == 12);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00c      	beq.n	8000862 <display_time+0x6e>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d009      	beq.n	8000862 <display_time+0x6e>
    else if(hour < 12) add_bmp(BMP_AM);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0b      	cmp	r3, #11
 8000852:	dc03      	bgt.n	800085c <display_time+0x68>
 8000854:	4847      	ldr	r0, [pc, #284]	; (8000974 <display_time+0x180>)
 8000856:	f7ff ff31 	bl	80006bc <add_bmp>
 800085a:	e002      	b.n	8000862 <display_time+0x6e>
    else add_bmp(BMP_PM);
 800085c:	4846      	ldr	r0, [pc, #280]	; (8000978 <display_time+0x184>)
 800085e:	f7ff ff2d 	bl	80006bc <add_bmp>

    // Display hour
    switch(hour) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b17      	cmp	r3, #23
 8000866:	d867      	bhi.n	8000938 <display_time+0x144>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <display_time+0x7c>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	080008d1 	.word	0x080008d1
 8000874:	080008d9 	.word	0x080008d9
 8000878:	080008e1 	.word	0x080008e1
 800087c:	080008e9 	.word	0x080008e9
 8000880:	080008f1 	.word	0x080008f1
 8000884:	080008f9 	.word	0x080008f9
 8000888:	08000901 	.word	0x08000901
 800088c:	08000909 	.word	0x08000909
 8000890:	08000911 	.word	0x08000911
 8000894:	08000919 	.word	0x08000919
 8000898:	08000921 	.word	0x08000921
 800089c:	08000929 	.word	0x08000929
 80008a0:	08000931 	.word	0x08000931
 80008a4:	080008d9 	.word	0x080008d9
 80008a8:	080008e1 	.word	0x080008e1
 80008ac:	080008e9 	.word	0x080008e9
 80008b0:	080008f1 	.word	0x080008f1
 80008b4:	080008f9 	.word	0x080008f9
 80008b8:	08000901 	.word	0x08000901
 80008bc:	08000909 	.word	0x08000909
 80008c0:	08000911 	.word	0x08000911
 80008c4:	08000919 	.word	0x08000919
 80008c8:	08000921 	.word	0x08000921
 80008cc:	08000929 	.word	0x08000929
        case 0:
            add_bmp(HOUR_MIDNIGHT);
 80008d0:	482a      	ldr	r0, [pc, #168]	; (800097c <display_time+0x188>)
 80008d2:	f7ff fef3 	bl	80006bc <add_bmp>
            break;
 80008d6:	e030      	b.n	800093a <display_time+0x146>
        case 1:
        case 13:
            add_bmp(HOUR_ONE);
 80008d8:	4829      	ldr	r0, [pc, #164]	; (8000980 <display_time+0x18c>)
 80008da:	f7ff feef 	bl	80006bc <add_bmp>
            break;
 80008de:	e02c      	b.n	800093a <display_time+0x146>
        case 2:
        case 14:
            add_bmp(HOUR_TWO);
 80008e0:	4828      	ldr	r0, [pc, #160]	; (8000984 <display_time+0x190>)
 80008e2:	f7ff feeb 	bl	80006bc <add_bmp>
            break;
 80008e6:	e028      	b.n	800093a <display_time+0x146>
        case 3:
        case 15:
            add_bmp(HOUR_THREE);
 80008e8:	4827      	ldr	r0, [pc, #156]	; (8000988 <display_time+0x194>)
 80008ea:	f7ff fee7 	bl	80006bc <add_bmp>
            break;
 80008ee:	e024      	b.n	800093a <display_time+0x146>
        case 4:
        case 16:
            add_bmp(HOUR_FOUR);
 80008f0:	4826      	ldr	r0, [pc, #152]	; (800098c <display_time+0x198>)
 80008f2:	f7ff fee3 	bl	80006bc <add_bmp>
            break;
 80008f6:	e020      	b.n	800093a <display_time+0x146>
        case 5:
        case 17:
            add_bmp(HOUR_FIVE);
 80008f8:	4825      	ldr	r0, [pc, #148]	; (8000990 <display_time+0x19c>)
 80008fa:	f7ff fedf 	bl	80006bc <add_bmp>
            break;
 80008fe:	e01c      	b.n	800093a <display_time+0x146>
        case 6:
        case 18:
            add_bmp(HOUR_SIX);
 8000900:	4824      	ldr	r0, [pc, #144]	; (8000994 <display_time+0x1a0>)
 8000902:	f7ff fedb 	bl	80006bc <add_bmp>
            break;
 8000906:	e018      	b.n	800093a <display_time+0x146>
        case 7:
        case 19:
            add_bmp(HOUR_SEVEN);
 8000908:	4823      	ldr	r0, [pc, #140]	; (8000998 <display_time+0x1a4>)
 800090a:	f7ff fed7 	bl	80006bc <add_bmp>
            break;
 800090e:	e014      	b.n	800093a <display_time+0x146>
        case 8:
        case 20:
            add_bmp(HOUR_EIGHT);
 8000910:	4822      	ldr	r0, [pc, #136]	; (800099c <display_time+0x1a8>)
 8000912:	f7ff fed3 	bl	80006bc <add_bmp>
            break;
 8000916:	e010      	b.n	800093a <display_time+0x146>
        case 9:
        case 21:
            add_bmp(HOUR_NINE);
 8000918:	4821      	ldr	r0, [pc, #132]	; (80009a0 <display_time+0x1ac>)
 800091a:	f7ff fecf 	bl	80006bc <add_bmp>
            break;
 800091e:	e00c      	b.n	800093a <display_time+0x146>
        case 10:
        case 22:
            add_bmp(HOUR_TEN);
 8000920:	4820      	ldr	r0, [pc, #128]	; (80009a4 <display_time+0x1b0>)
 8000922:	f7ff fecb 	bl	80006bc <add_bmp>
            break;
 8000926:	e008      	b.n	800093a <display_time+0x146>
        case 11:
        case 23:
            add_bmp(HOUR_ELEVEN);
 8000928:	481f      	ldr	r0, [pc, #124]	; (80009a8 <display_time+0x1b4>)
 800092a:	f7ff fec7 	bl	80006bc <add_bmp>
            break;
 800092e:	e004      	b.n	800093a <display_time+0x146>
        case 12:
            add_bmp(HOUR_NOON);
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <display_time+0x1b8>)
 8000932:	f7ff fec3 	bl	80006bc <add_bmp>
            break;
 8000936:	e000      	b.n	800093a <display_time+0x146>
        default:
            // Handle error or invalid hour
            break;
 8000938:	bf00      	nop
    }

    // Display minute in intervals of five using an array pointing to the bitmaps
    if (minute > 0) {
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	dd0d      	ble.n	800095c <display_time+0x168>
        add_bmp(minuteBitmaps[(minute / 5) - 1]);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <display_time+0x174>)
 8000944:	fb82 1203 	smull	r1, r2, r2, r3
 8000948:	1052      	asrs	r2, r2, #1
 800094a:	17db      	asrs	r3, r3, #31
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	3b01      	subs	r3, #1
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <display_time+0x1bc>)
 8000952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff feb0 	bl	80006bc <add_bmp>
    }
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	080055d4 	.word	0x080055d4
 8000968:	66666667 	.word	0x66666667
 800096c:	080055ec 	.word	0x080055ec
 8000970:	08005604 	.word	0x08005604
 8000974:	0800567c 	.word	0x0800567c
 8000978:	08005694 	.word	0x08005694
 800097c:	0800552c 	.word	0x0800552c
 8000980:	0800540c 	.word	0x0800540c
 8000984:	08005424 	.word	0x08005424
 8000988:	0800543c 	.word	0x0800543c
 800098c:	08005454 	.word	0x08005454
 8000990:	0800546c 	.word	0x0800546c
 8000994:	08005484 	.word	0x08005484
 8000998:	0800549c 	.word	0x0800549c
 800099c:	080054b4 	.word	0x080054b4
 80009a0:	080054cc 	.word	0x080054cc
 80009a4:	080054e4 	.word	0x080054e4
 80009a8:	080054fc 	.word	0x080054fc
 80009ac:	08005514 	.word	0x08005514
 80009b0:	20000000 	.word	0x20000000

080009b4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
    // Delegate to specific driver callbacks
    Encoder_EXTI_Callback(GPIO_Pin);
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 febd 	bl	8001740 <Encoder_EXTI_Callback>
    Button_EXTI_Callback(GPIO_Pin);
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 ff2d 	bl	8001828 <Button_EXTI_Callback>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	b099      	sub	sp, #100	; 0x64
 80009dc:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 ff49 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f96b 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 faed 	bl	8000fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ea:	f000 facb 	bl	8000f84 <MX_DMA_Init>
  MX_TIM1_Init();
 80009ee:	f000 fa29 	bl	8000e44 <MX_TIM1_Init>
  MX_RTC_Init();
 80009f2:	f000 f9cd 	bl	8000d90 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  bool hours_set = false;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bool minutes_set = false;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  bool color_set = false;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t color_preset = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    /* USER CODE BEGIN 3 */


		// Update the RTC structure with the current time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // or RTC_FORMAT_BCD depending on your setting
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	48a1      	ldr	r0, [pc, #644]	; (8000c9c <main+0x2c4>)
 8000a18:	f002 fc58 	bl	80032cc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This line is required to unlock the shadow registers
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	489d      	ldr	r0, [pc, #628]	; (8000c9c <main+0x2c4>)
 8000a26:	f002 fd33 	bl	8003490 <HAL_RTC_GetDate>


	    char displayStr[6]; // Buffer for "00:00" plus null terminator


	    switch (Button_GetCount()) {
 8000a2a:	f000 fe6d 	bl	8001708 <Button_GetCount>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	f200 80fc 	bhi.w	8000c2e <main+0x256>
 8000a36:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <main+0x64>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000a51 	.word	0x08000a51
 8000a40:	08000a6b 	.word	0x08000a6b
 8000a44:	08000b09 	.word	0x08000b09
 8000a48:	08000bb3 	.word	0x08000bb3
 8000a4c:	08000c29 	.word	0x08000c29
	        case 0:
	            // Default state, should not display anything.
	            Segment_Display("STRT");
 8000a50:	4893      	ldr	r0, [pc, #588]	; (8000ca0 <main+0x2c8>)
 8000a52:	f000 fdf3 	bl	800163c <Segment_Display>
	            hours_set = false;  // Reset hours_set flag
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	            minutes_set = false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	            color_set = false;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	            break;
 8000a68:	e0e8      	b.n	8000c3c <main+0x264>
	        case 1:
	        	if(!hours_set) {
 8000a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a6e:	f083 0301 	eor.w	r3, r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <main+0xb8>
	        		Encoder_SetCount(sTime.Hours * 10);
 8000a78:	7c3b      	ldrb	r3, [r7, #16]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fe2f 	bl	80016e8 <Encoder_SetCount>
	        		hours_set = true;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        	}

	        	if(Encoder_GetCount() > 230)
 8000a90:	f000 fe1e 	bl	80016d0 <Encoder_GetCount>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2be6      	cmp	r3, #230	; 0xe6
 8000a98:	dd02      	ble.n	8000aa0 <main+0xc8>
	        		Encoder_SetCount(230); // 23 * 10
 8000a9a:	20e6      	movs	r0, #230	; 0xe6
 8000a9c:	f000 fe24 	bl	80016e8 <Encoder_SetCount>
	        	if(Encoder_GetCount() < 0)
 8000aa0:	f000 fe16 	bl	80016d0 <Encoder_GetCount>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	da02      	bge.n	8000ab0 <main+0xd8>
	        		Encoder_SetCount(0);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fe1c 	bl	80016e8 <Encoder_SetCount>

	        	sTime.Hours = Encoder_GetCount() / 10; // Convert to actual hours by dividing by 10
 8000ab0:	f000 fe0e 	bl	80016d0 <Encoder_GetCount>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a7b      	ldr	r2, [pc, #492]	; (8000ca4 <main+0x2cc>)
 8000ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8000abc:	1092      	asrs	r2, r2, #2
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	743b      	strb	r3, [r7, #16]
	        	sTime.Minutes = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	747b      	strb	r3, [r7, #17]
	        	sTime.Seconds = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	74bb      	strb	r3, [r7, #18]
	        	snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000ace:	7c3b      	ldrb	r3, [r7, #16]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	7c7b      	ldrb	r3, [r7, #17]
 8000ad4:	1d38      	adds	r0, r7, #4
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	4a73      	ldr	r2, [pc, #460]	; (8000ca8 <main+0x2d0>)
 8000adc:	2106      	movs	r1, #6
 8000ade:	f003 ffeb 	bl	8004ab8 <sniprintf>
	        	Segment_Display(displayStr);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fda9 	bl	800163c <Segment_Display>

        		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	486a      	ldr	r0, [pc, #424]	; (8000c9c <main+0x2c4>)
 8000af4:	f002 fb50 	bl	8003198 <HAL_RTC_SetTime>
        		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2200      	movs	r2, #0
 8000afe:	4619      	mov	r1, r3
 8000b00:	4866      	ldr	r0, [pc, #408]	; (8000c9c <main+0x2c4>)
 8000b02:	f002 fc41 	bl	8003388 <HAL_RTC_SetDate>
	            break;
 8000b06:	e099      	b.n	8000c3c <main+0x264>
	        case 2:
	        	if(!minutes_set) {
 8000b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b0c:	f083 0301 	eor.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00b      	beq.n	8000b2e <main+0x156>
	        		Encoder_SetCount(sTime.Minutes * 10);
 8000b16:	7c7b      	ldrb	r3, [r7, #17]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fde0 	bl	80016e8 <Encoder_SetCount>
	        		minutes_set = true;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	        	}
	            sTime.Minutes = Encoder_GetCount();
 8000b2e:	f000 fdcf 	bl	80016d0 <Encoder_GetCount>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	747b      	strb	r3, [r7, #17]
	            sTime.Seconds = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	74bb      	strb	r3, [r7, #18]

	            if(Encoder_GetCount() > 590)
 8000b3c:	f000 fdc8 	bl	80016d0 <Encoder_GetCount>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f240 224e 	movw	r2, #590	; 0x24e
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dd03      	ble.n	8000b52 <main+0x17a>
	            	Encoder_SetCount(590);  // 59 * 10
 8000b4a:	f240 204e 	movw	r0, #590	; 0x24e
 8000b4e:	f000 fdcb 	bl	80016e8 <Encoder_SetCount>
	            if(Encoder_GetCount() < 0)
 8000b52:	f000 fdbd 	bl	80016d0 <Encoder_GetCount>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	da02      	bge.n	8000b62 <main+0x18a>
	            	Encoder_SetCount(0);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 fdc3 	bl	80016e8 <Encoder_SetCount>

	            sTime.Minutes = Encoder_GetCount() / 10;
 8000b62:	f000 fdb5 	bl	80016d0 <Encoder_GetCount>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a4e      	ldr	r2, [pc, #312]	; (8000ca4 <main+0x2cc>)
 8000b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6e:	1092      	asrs	r2, r2, #2
 8000b70:	17db      	asrs	r3, r3, #31
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	747b      	strb	r3, [r7, #17]

	            snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000b78:	7c3b      	ldrb	r3, [r7, #16]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	7c7b      	ldrb	r3, [r7, #17]
 8000b7e:	1d38      	adds	r0, r7, #4
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	4613      	mov	r3, r2
 8000b84:	4a48      	ldr	r2, [pc, #288]	; (8000ca8 <main+0x2d0>)
 8000b86:	2106      	movs	r1, #6
 8000b88:	f003 ff96 	bl	8004ab8 <sniprintf>
	            Segment_Display(displayStr);
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fd54 	bl	800163c <Segment_Display>

        		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	483f      	ldr	r0, [pc, #252]	; (8000c9c <main+0x2c4>)
 8000b9e:	f002 fafb 	bl	8003198 <HAL_RTC_SetTime>
        		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	483c      	ldr	r0, [pc, #240]	; (8000c9c <main+0x2c4>)
 8000bac:	f002 fbec 	bl	8003388 <HAL_RTC_SetDate>
	            break;
 8000bb0:	e044      	b.n	8000c3c <main+0x264>
	        case 3:
	        	if(!color_set) {
 8000bb2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000bb6:	f083 0301 	eor.w	r3, r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d005      	beq.n	8000bcc <main+0x1f4>
	        		Encoder_SetCount(0);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fd91 	bl	80016e8 <Encoder_SetCount>
	        		color_set = true;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	        	}

	            if(Encoder_GetCount() > 160)
 8000bcc:	f000 fd80 	bl	80016d0 <Encoder_GetCount>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2ba0      	cmp	r3, #160	; 0xa0
 8000bd4:	dd02      	ble.n	8000bdc <main+0x204>
	            	Encoder_SetCount(160); // 160 * 10
 8000bd6:	20a0      	movs	r0, #160	; 0xa0
 8000bd8:	f000 fd86 	bl	80016e8 <Encoder_SetCount>
	            if(Encoder_GetCount() < 0)
 8000bdc:	f000 fd78 	bl	80016d0 <Encoder_GetCount>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	da02      	bge.n	8000bec <main+0x214>
	            	Encoder_SetCount(0);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 fd7e 	bl	80016e8 <Encoder_SetCount>

	            color_preset = (Encoder_GetCount() / 10);
 8000bec:	f000 fd70 	bl	80016d0 <Encoder_GetCount>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <main+0x2cc>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1092      	asrs	r2, r2, #2
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	        	snprintf(displayStr, sizeof(displayStr), "%02d", (Encoder_GetCount() / 10));
 8000c02:	f000 fd65 	bl	80016d0 <Encoder_GetCount>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <main+0x2cc>)
 8000c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0e:	1092      	asrs	r2, r2, #2
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	1d38      	adds	r0, r7, #4
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <main+0x2d4>)
 8000c18:	2106      	movs	r1, #6
 8000c1a:	f003 ff4d 	bl	8004ab8 <sniprintf>
	            Segment_Display(displayStr);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fd0b 	bl	800163c <Segment_Display>
	        	break;
 8000c26:	e009      	b.n	8000c3c <main+0x264>
	        case 4:
	            Button_SetCount(0);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 fd79 	bl	8001720 <Button_SetCount>
	        default:
	            Segment_Display("ERR");
 8000c2e:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <main+0x2d8>)
 8000c30:	f000 fd04 	bl	800163c <Segment_Display>
	            Button_SetCount(0);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f000 fd73 	bl	8001720 <Button_SetCount>
	            break;
 8000c3a:	bf00      	nop

	    }



	    HAL_GPIO_WritePin(GPIOA, LED_Pin, 1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c42:	481c      	ldr	r0, [pc, #112]	; (8000cb4 <main+0x2dc>)
 8000c44:	f001 fcec 	bl	8002620 <HAL_GPIO_WritePin>

	    HAL_Delay(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 fe85 	bl	8001958 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <main+0x2dc>)
 8000c56:	f001 fce3 	bl	8002620 <HAL_GPIO_WritePin>




	// Now you can safely use sTime to display the time or perform other operations
	display_time(sTime.Hours, sTime.Minutes);
 8000c5a:	7c3b      	ldrb	r3, [r7, #16]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	7c7b      	ldrb	r3, [r7, #17]
 8000c60:	4619      	mov	r1, r3
 8000c62:	4610      	mov	r0, r2
 8000c64:	f7ff fdc6 	bl	80007f4 <display_time>
	display_bmp(color_preset);
 8000c68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fd6b 	bl	8000748 <display_bmp>
	WS2812B_Send(htim1);
 8000c72:	4e11      	ldr	r6, [pc, #68]	; (8000cb8 <main+0x2e0>)
 8000c74:	466d      	mov	r5, sp
 8000c76:	f106 0410 	add.w	r4, r6, #16
 8000c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c92:	f003 fe51 	bl	8004938 <WS2812B_Send>

	clear_display_buffer();
 8000c96:	f7ff fce7 	bl	8000668 <clear_display_buffer>
  {
 8000c9a:	e6b8      	b.n	8000a0e <main+0x36>
 8000c9c:	20000128 	.word	0x20000128
 8000ca0:	080053ec 	.word	0x080053ec
 8000ca4:	66666667 	.word	0x66666667
 8000ca8:	080053f4 	.word	0x080053f4
 8000cac:	08005400 	.word	0x08005400
 8000cb0:	08005408 	.word	0x08005408
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	20000148 	.word	0x20000148

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	; 0x50
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	2230      	movs	r2, #48	; 0x30
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 feec 	bl	8004aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <SystemClock_Config+0xcc>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <SystemClock_Config+0xcc>)
 8000cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <SystemClock_Config+0xcc>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <SystemClock_Config+0xd0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a21      	ldr	r2, [pc, #132]	; (8000d8c <SystemClock_Config+0xd0>)
 8000d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <SystemClock_Config+0xd0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d18:	230a      	movs	r3, #10
 8000d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d20:	2310      	movs	r3, #16
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d30:	2308      	movs	r3, #8
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d34:	2348      	movs	r3, #72	; 0x48
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 fc9d 	bl	8002684 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d50:	f000 f9c6 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2102      	movs	r1, #2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 feff 	bl	8002b74 <HAL_RCC_ClockConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d7c:	f000 f9b0 	bl	80010e0 <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3750      	adds	r7, #80	; 0x50
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000

08000d90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000da4:	2300      	movs	r3, #0
 8000da6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <MX_RTC_Init+0xac>)
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_RTC_Init+0xb0>)
 8000dac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <MX_RTC_Init+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_RTC_Init+0xac>)
 8000db6:	227f      	movs	r2, #127	; 0x7f
 8000db8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <MX_RTC_Init+0xac>)
 8000dbc:	22ff      	movs	r2, #255	; 0xff
 8000dbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_RTC_Init+0xac>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_RTC_Init+0xac>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_RTC_Init+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dd2:	481a      	ldr	r0, [pc, #104]	; (8000e3c <MX_RTC_Init+0xac>)
 8000dd4:	f002 f96a 	bl	80030ac <HAL_RTC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000dde:	f000 f97f 	bl	80010e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8000de2:	2307      	movs	r3, #7
 8000de4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 8000de6:	230f      	movs	r3, #15
 8000de8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 8000dea:	2332      	movs	r3, #50	; 0x32
 8000dec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <MX_RTC_Init+0xac>)
 8000dfe:	f002 f9cb 	bl	8003198 <HAL_RTC_SetTime>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e08:	f000 f96a 	bl	80010e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e10:	2301      	movs	r3, #1
 8000e12:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 8000e14:	2317      	movs	r3, #23
 8000e16:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8000e18:	2318      	movs	r3, #24
 8000e1a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_RTC_Init+0xac>)
 8000e24:	f002 fab0 	bl	8003388 <HAL_RTC_SetDate>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e2e:	f000 f957 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000128 	.word	0x20000128
 8000e40:	40002800 	.word	0x40002800

08000e44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b096      	sub	sp, #88	; 0x58
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	615a      	str	r2, [r3, #20]
 8000e74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2220      	movs	r2, #32
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fe13 	bl	8004aa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000e84:	4a3e      	ldr	r2, [pc, #248]	; (8000f80 <MX_TIM1_Init+0x13c>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e88:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000e94:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000e96:	2259      	movs	r2, #89	; 0x59
 8000e98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eac:	4833      	ldr	r0, [pc, #204]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000eae:	f002 fbfb 	bl	80036a8 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000eb8:	f000 f912 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	482c      	ldr	r0, [pc, #176]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000eca:	f002 ffcd 	bl	8003e68 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ed4:	f000 f904 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ed8:	4828      	ldr	r0, [pc, #160]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000eda:	f002 fc34 	bl	8003746 <HAL_TIM_PWM_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ee4:	f000 f8fc 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000ef8:	f003 fc2e 	bl	8004758 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000f02:	f000 f8ed 	bl	80010e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f06:	2360      	movs	r3, #96	; 0x60
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4814      	ldr	r0, [pc, #80]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000f2c:	f002 feda 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000f36:	f000 f8d3 	bl	80010e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000f5e:	f003 fc69 	bl	8004834 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000f68:	f000 f8ba 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM1_Init+0x138>)
 8000f6e:	f000 f965 	bl	800123c <HAL_TIM_MspPostInit>

}
 8000f72:	bf00      	nop
 8000f74:	3758      	adds	r7, #88	; 0x58
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000148 	.word	0x20000148
 8000f80:	40010000 	.word	0x40010000

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2039      	movs	r0, #57	; 0x39
 8000fac:	f000 fdd3 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fb0:	2039      	movs	r0, #57	; 0x39
 8000fb2:	f000 fdec 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <MX_GPIO_Init+0x110>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a3c      	ldr	r2, [pc, #240]	; (80010d4 <MX_GPIO_Init+0x110>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <MX_GPIO_Init+0x110>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <MX_GPIO_Init+0x110>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <MX_GPIO_Init+0x110>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <MX_GPIO_Init+0x110>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <MX_GPIO_Init+0x110>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <MX_GPIO_Init+0x110>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_GPIO_Init+0x110>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800102e:	2200      	movs	r2, #0
 8001030:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <MX_GPIO_Init+0x114>)
 8001036:	f001 faf3 	bl	8002620 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 800103a:	2200      	movs	r2, #0
 800103c:	f241 4107 	movw	r1, #5127	; 0x1407
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <MX_GPIO_Init+0x118>)
 8001042:	f001 faed 	bl	8002620 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001046:	f248 03ff 	movw	r3, #33023	; 0x80ff
 800104a:	60fb      	str	r3, [r7, #12]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <MX_GPIO_Init+0x114>)
 8001060:	f001 f942 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001064:	f241 4307 	movw	r3, #5127	; 0x1407
 8001068:	60fb      	str	r3, [r7, #12]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <MX_GPIO_Init+0x118>)
 800107e:	f001 f933 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_CH_A_Pin ENC_CH_B_Pin */
  GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CH_B_Pin;
 8001082:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001088:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800108c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <MX_GPIO_Init+0x118>)
 800109a:	f001 f925 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800109e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <MX_GPIO_Init+0x118>)
 80010b6:	f001 f917 	bl	80022e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2028      	movs	r0, #40	; 0x28
 80010c0:	f000 fd49 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f000 fd62 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_MspInit+0x4c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x4c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_RTC_MspInit+0x50>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d111      	bne.n	8001184 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001160:	2302      	movs	r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001168:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4618      	mov	r0, r3
 8001170:	f001 feac 	bl	8002ecc <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800117a:	f7ff ffb1 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_RTC_MspInit+0x54>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40002800 	.word	0x40002800
 8001190:	42470e3c 	.word	0x42470e3c

08001194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a22      	ldr	r2, [pc, #136]	; (800122c <HAL_TIM_Base_MspInit+0x98>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d13d      	bne.n	8001222 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_TIM_Base_MspInit+0x9c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a20      	ldr	r2, [pc, #128]	; (8001230 <HAL_TIM_Base_MspInit+0x9c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_TIM_Base_MspInit+0x9c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011c4:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <HAL_TIM_Base_MspInit+0xa4>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011ca:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80011ce:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011d2:	2240      	movs	r2, #64	; 0x40
 80011d4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 8001208:	f000 fcdc 	bl	8001bc4 <HAL_DMA_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001212:	f7ff ff65 	bl	80010e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_TIM_Base_MspInit+0xa0>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010000 	.word	0x40010000
 8001230:	40023800 	.word	0x40023800
 8001234:	20000190 	.word	0x20000190
 8001238:	40026428 	.word	0x40026428

0800123c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <HAL_TIM_MspPostInit+0x68>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d11e      	bne.n	800129c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_TIM_MspPostInit+0x6c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_TIM_MspPostInit+0x6c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_TIM_MspPostInit+0x6c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800127a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800127e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4619      	mov	r1, r3
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_TIM_MspPostInit+0x70>)
 8001298:	f001 f826 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 fb0c 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_CH_A_Pin);
 8001308:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800130c:	f001 f9a2 	bl	8002654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_CH_B_Pin);
 8001310:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001314:	f001 f99e 	bl	8002654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001318:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800131c:	f001 f99a 	bl	8002654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA2_Stream1_IRQHandler+0x10>)
 800132a:	f000 fd73 	bl	8001e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000190 	.word	0x20000190

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f003 fb74 	bl	8004a54 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20020000 	.word	0x20020000
 8001398:	00000400 	.word	0x00000400
 800139c:	200001f0 	.word	0x200001f0
 80013a0:	20001c70 	.word	0x20001c70

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ce:	490e      	ldr	r1, [pc, #56]	; (8001408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e4:	4c0b      	ldr	r4, [pc, #44]	; (8001414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f2:	f7ff ffd7 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 fb33 	bl	8004a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff faed 	bl	80009d8 <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800140c:	08005864 	.word	0x08005864
  ldr r2, =_sbss
 8001410:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001414:	20001c6c 	.word	0x20001c6c

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <setSegments>:
		['Y'] = 0x6E, ['Z'] = 0x5B,  // 'Z' uses same as '2'
		[' '] = 0x00, // Blank character
};

// Set the segments for the current digit
void setSegments(uint8_t segments) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	2104      	movs	r1, #4
 800143a:	4830      	ldr	r0, [pc, #192]	; (80014fc <setSegments+0xe0>)
 800143c:	f001 f8f0 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	2101      	movs	r1, #1
 8001454:	4829      	ldr	r0, [pc, #164]	; (80014fc <setSegments+0xe0>)
 8001456:	f001 f8e3 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	2108      	movs	r1, #8
 800146e:	4823      	ldr	r0, [pc, #140]	; (80014fc <setSegments+0xe0>)
 8001470:	f001 f8d6 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	2104      	movs	r1, #4
 8001488:	481d      	ldr	r0, [pc, #116]	; (8001500 <setSegments+0xe4>)
 800148a:	f001 f8c9 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf0c      	ite	eq
 8001498:	2301      	moveq	r3, #1
 800149a:	2300      	movne	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	2101      	movs	r1, #1
 80014a2:	4817      	ldr	r0, [pc, #92]	; (8001500 <setSegments+0xe4>)
 80014a4:	f001 f8bc 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf0c      	ite	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	2300      	movne	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	2110      	movs	r1, #16
 80014bc:	480f      	ldr	r0, [pc, #60]	; (80014fc <setSegments+0xe0>)
 80014be:	f001 f8af 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	2102      	movs	r1, #2
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <setSegments+0xe0>)
 80014d8:	f001 f8a2 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	09db      	lsrs	r3, r3, #7
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	2140      	movs	r1, #64	; 0x40
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <setSegments+0xe0>)
 80014ee:	f001 f897 	bl	8002620 <HAL_GPIO_WritePin>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400

08001504 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b01      	cmp	r3, #1
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001520:	4819      	ldr	r0, [pc, #100]	; (8001588 <activateDigit+0x84>)
 8001522:	f001 f87d 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b02      	cmp	r3, #2
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <activateDigit+0x84>)
 800153a:	f001 f871 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b03      	cmp	r3, #3
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	480f      	ldr	r0, [pc, #60]	; (800158c <activateDigit+0x88>)
 8001550:	f001 f866 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf0c      	ite	eq
 800155a:	2301      	moveq	r3, #1
 800155c:	2300      	movne	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	2120      	movs	r1, #32
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <activateDigit+0x88>)
 8001566:	f001 f85b 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b05      	cmp	r3, #5
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	2102      	movs	r1, #2
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <activateDigit+0x84>)
 800157c:	f001 f850 	bl	8002620 <HAL_GPIO_WritePin>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40020400 	.word	0x40020400
 800158c:	40020000 	.word	0x40020000

08001590 <processInput>:

// Prevent errors by formatting string
void processInput(const char *input) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    size_t inputLength = strlen(input);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7fe fe21 	bl	80001e0 <strlen>
 800159e:	60f8      	str	r0, [r7, #12]

    // We are assuming that outputBuffer is large enough to hold all digits
    memset(outputBuffer, 0, sizeof(outputBuffer)); // Clear the output buffer
 80015a0:	2205      	movs	r2, #5
 80015a2:	2100      	movs	r1, #0
 80015a4:	4822      	ldr	r0, [pc, #136]	; (8001630 <processInput+0xa0>)
 80015a6:	f003 fa7f 	bl	8004aa8 <memset>

    for (size_t i = 0, j = 0; i < inputLength && j < NUM_DIGITS; ++i) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e032      	b.n	800161a <processInput+0x8a>
        // Convert lowercase letters to uppercase
        uint8_t c = (uint8_t)toupper((unsigned char)input[i]); // Cast to avoid potential negative values
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	72fb      	strb	r3, [r7, #11]
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	3301      	adds	r3, #1
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <processInput+0xa4>)
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d102      	bne.n	80015d6 <processInput+0x46>
 80015d0:	7afb      	ldrb	r3, [r7, #11]
 80015d2:	3b20      	subs	r3, #32
 80015d4:	e000      	b.n	80015d8 <processInput+0x48>
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	72bb      	strb	r3, [r7, #10]

        if (c == ':') {
 80015da:	7abb      	ldrb	r3, [r7, #10]
 80015dc:	2b3a      	cmp	r3, #58	; 0x3a
 80015de:	d018      	beq.n	8001612 <processInput+0x82>
            // If colon, handle separately
            continue;
        }
        if (c < ' ' || c > 'Z' || charToSegmentsMap[c] == 0) {
 80015e0:	7abb      	ldrb	r3, [r7, #10]
 80015e2:	2b1f      	cmp	r3, #31
 80015e4:	d907      	bls.n	80015f6 <processInput+0x66>
 80015e6:	7abb      	ldrb	r3, [r7, #10]
 80015e8:	2b5a      	cmp	r3, #90	; 0x5a
 80015ea:	d804      	bhi.n	80015f6 <processInput+0x66>
 80015ec:	7abb      	ldrb	r3, [r7, #10]
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <processInput+0xa8>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <processInput+0x74>
            // Replace invalid character with 'E'
            outputBuffer[j++] = 'E';
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	613a      	str	r2, [r7, #16]
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <processInput+0xa0>)
 80015fe:	2145      	movs	r1, #69	; 0x45
 8001600:	54d1      	strb	r1, [r2, r3]
 8001602:	e007      	b.n	8001614 <processInput+0x84>
        } else {
            // Copy valid character to output buffer
            outputBuffer[j++] = c; // Now 'c' contains the uppercase version, if applicable
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	613a      	str	r2, [r7, #16]
 800160a:	4909      	ldr	r1, [pc, #36]	; (8001630 <processInput+0xa0>)
 800160c:	7aba      	ldrb	r2, [r7, #10]
 800160e:	54ca      	strb	r2, [r1, r3]
 8001610:	e000      	b.n	8001614 <processInput+0x84>
            continue;
 8001612:	bf00      	nop
    for (size_t i = 0, j = 0; i < inputLength && j < NUM_DIGITS; ++i) {
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	429a      	cmp	r2, r3
 8001620:	d202      	bcs.n	8001628 <processInput+0x98>
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d9c5      	bls.n	80015b4 <processInput+0x24>
        }
    }

    // Null-termination is ensured by static buffer initialization to {0}
}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001f4 	.word	0x200001f4
 8001634:	08005720 	.word	0x08005720
 8001638:	080056bc 	.word	0x080056bc

0800163c <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    processInput(input);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffa3 	bl	8001590 <processInput>
    bool hasColon = strchr(input, ':') != NULL; // Check if input contains a colon
 800164a:	213a      	movs	r1, #58	; 0x3a
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f003 fa67 	bl	8004b20 <strchr>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	74fb      	strb	r3, [r7, #19]

    // Clearing all digits can be optimized out if carefully controlling the display digits
    // activateDigit(0); // Assuming the digits are off to begin with

    // Calculate the number of characters to display
    size_t numChars = strlen(outputBuffer);
 800165e:	481a      	ldr	r0, [pc, #104]	; (80016c8 <Segment_Display+0x8c>)
 8001660:	f7fe fdbe 	bl	80001e0 <strlen>
 8001664:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < numChars; i++) {
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e016      	b.n	800169a <Segment_Display+0x5e>
        activateDigit(i + 1); // Activate the correct digit
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3301      	adds	r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff45 	bl	8001504 <activateDigit>
        setSegments(charToSegmentsMap[(uint8_t)outputBuffer[i]]); // Set segments
 800167a:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <Segment_Display+0x8c>)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <Segment_Display+0x90>)
 8001686:	5c9b      	ldrb	r3, [r3, r2]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fec7 	bl	800141c <setSegments>
        HAL_Delay(1); // Delay to allow the segments to light up
 800168e:	2001      	movs	r0, #1
 8001690:	f000 f962 	bl	8001958 <HAL_Delay>
    for (size_t i = 0; i < numChars; i++) {
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d3e4      	bcc.n	800166c <Segment_Display+0x30>
    }

    if (hasColon) {
 80016a2:	7cfb      	ldrb	r3, [r7, #19]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <Segment_Display+0x7e>
        // Handle case for the colon display
        activateDigit(5); // Assuming the fifth "digit" is for the colon
 80016a8:	2005      	movs	r0, #5
 80016aa:	f7ff ff2b 	bl	8001504 <activateDigit>
        setSegments(0b11); // Set segments to display the colon
 80016ae:	2003      	movs	r0, #3
 80016b0:	f7ff feb4 	bl	800141c <setSegments>
        HAL_Delay(1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f000 f94f 	bl	8001958 <HAL_Delay>
    }

    activateDigit(0); // Turn off all digits after showing the sequence
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff ff22 	bl	8001504 <activateDigit>
}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200001f4 	.word	0x200001f4
 80016cc:	080056bc 	.word	0x080056bc

080016d0 <Encoder_GetCount>:
static volatile uint8_t button_count = 0;
static volatile uint32_t last_debounce_time = 0;
const uint32_t debounce_delay = 50; // milliseconds

// Accessor for encoder count
int32_t Encoder_GetCount(void) {
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
    return encoder_count;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <Encoder_GetCount+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	200001fc 	.word	0x200001fc

080016e8 <Encoder_SetCount>:

// Function to reset encoder count
void Encoder_SetCount(uint32_t count) {
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    encoder_count = count;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <Encoder_SetCount+0x1c>)
 80016f4:	6013      	str	r3, [r2, #0]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200001fc 	.word	0x200001fc

08001708 <Button_GetCount>:

// Accessor for button state
uint8_t Button_GetCount(void) {
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
    return button_count;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <Button_GetCount+0x14>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20000201 	.word	0x20000201

08001720 <Button_SetCount>:

// Function to reset button state
void Button_SetCount(uint32_t count) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    button_count = count;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <Button_SetCount+0x1c>)
 800172e:	701a      	strb	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	20000201 	.word	0x20000201

08001740 <Encoder_EXTI_Callback>:

// EXTI callback for the encoder
void Encoder_EXTI_Callback(uint16_t GPIO_Pin) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
	uint8_t currentState;
	uint8_t aState = HAL_GPIO_ReadPin(GPIOB, ENC_CH_A_Pin);
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	4833      	ldr	r0, [pc, #204]	; (800181c <Encoder_EXTI_Callback+0xdc>)
 8001750:	f000 ff4e 	bl	80025f0 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
	uint8_t bState = HAL_GPIO_ReadPin(GPIOB, ENC_CH_B_Pin);
 8001758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175c:	482f      	ldr	r0, [pc, #188]	; (800181c <Encoder_EXTI_Callback+0xdc>)
 800175e:	f000 ff47 	bl	80025f0 <HAL_GPIO_ReadPin>
 8001762:	4603      	mov	r3, r0
 8001764:	73bb      	strb	r3, [r7, #14]
	currentState = (aState << 1) | bState;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	b25a      	sxtb	r2, r3
 800176c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001770:	4313      	orrs	r3, r2
 8001772:	b25b      	sxtb	r3, r3
 8001774:	737b      	strb	r3, [r7, #13]
	// Determine the rotation direction based on the state transition
   if ((lastState == 0x0 && currentState == 0x2) ||
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <Encoder_EXTI_Callback+0x46>
 8001780:	7b7b      	ldrb	r3, [r7, #13]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d017      	beq.n	80017b6 <Encoder_EXTI_Callback+0x76>
	   (lastState == 0x3 && currentState == 0x1) ||
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
   if ((lastState == 0x0 && currentState == 0x2) ||
 800178c:	2b03      	cmp	r3, #3
 800178e:	d102      	bne.n	8001796 <Encoder_EXTI_Callback+0x56>
	   (lastState == 0x3 && currentState == 0x1) ||
 8001790:	7b7b      	ldrb	r3, [r7, #13]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d00f      	beq.n	80017b6 <Encoder_EXTI_Callback+0x76>
	   (lastState == 0x2 && currentState == 0x3) ||
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
	   (lastState == 0x3 && currentState == 0x1) ||
 800179c:	2b02      	cmp	r3, #2
 800179e:	d102      	bne.n	80017a6 <Encoder_EXTI_Callback+0x66>
	   (lastState == 0x2 && currentState == 0x3) ||
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d007      	beq.n	80017b6 <Encoder_EXTI_Callback+0x76>
	   (lastState == 0x1 && currentState == 0x0)) {
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b2db      	uxtb	r3, r3
	   (lastState == 0x2 && currentState == 0x3) ||
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d108      	bne.n	80017c2 <Encoder_EXTI_Callback+0x82>
	   (lastState == 0x1 && currentState == 0x0)) {
 80017b0:	7b7b      	ldrb	r3, [r7, #13]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d105      	bne.n	80017c2 <Encoder_EXTI_Callback+0x82>
	   // Encoder has moved clockwise
	encoder_count++;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <Encoder_EXTI_Callback+0xe4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <Encoder_EXTI_Callback+0xe4>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e024      	b.n	800180c <Encoder_EXTI_Callback+0xcc>
   }
   else if ((lastState == 0x0 && currentState == 0x1) ||
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <Encoder_EXTI_Callback+0x92>
 80017cc:	7b7b      	ldrb	r3, [r7, #13]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d017      	beq.n	8001802 <Encoder_EXTI_Callback+0xc2>
			(lastState == 0x1 && currentState == 0x3) ||
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b2db      	uxtb	r3, r3
   else if ((lastState == 0x0 && currentState == 0x1) ||
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d102      	bne.n	80017e2 <Encoder_EXTI_Callback+0xa2>
			(lastState == 0x1 && currentState == 0x3) ||
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d00f      	beq.n	8001802 <Encoder_EXTI_Callback+0xc2>
			(lastState == 0x3 && currentState == 0x2) ||
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
			(lastState == 0x1 && currentState == 0x3) ||
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d102      	bne.n	80017f2 <Encoder_EXTI_Callback+0xb2>
			(lastState == 0x3 && currentState == 0x2) ||
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d007      	beq.n	8001802 <Encoder_EXTI_Callback+0xc2>
			(lastState == 0x2 && currentState == 0x0)) {
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
			(lastState == 0x3 && currentState == 0x2) ||
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d107      	bne.n	800180c <Encoder_EXTI_Callback+0xcc>
			(lastState == 0x2 && currentState == 0x0)) {
 80017fc:	7b7b      	ldrb	r3, [r7, #13]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d104      	bne.n	800180c <Encoder_EXTI_Callback+0xcc>
	   // Encoder has moved counterclockwise
	   encoder_count--;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <Encoder_EXTI_Callback+0xe4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3b01      	subs	r3, #1
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <Encoder_EXTI_Callback+0xe4>)
 800180a:	6013      	str	r3, [r2, #0]
   }

   // Save the new state
   lastState = currentState;
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <Encoder_EXTI_Callback+0xe0>)
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	7013      	strb	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40020400 	.word	0x40020400
 8001820:	20000200 	.word	0x20000200
 8001824:	200001fc 	.word	0x200001fc

08001828 <Button_EXTI_Callback>:

// EXTI callback for the button
void Button_EXTI_Callback(uint16_t GPIO_Pin) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin != BTN_Pin)
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001838:	d114      	bne.n	8001864 <Button_EXTI_Callback+0x3c>
        return;

    uint32_t current_time = HAL_GetTick();
 800183a:	f000 f881 	bl	8001940 <HAL_GetTick>
 800183e:	60f8      	str	r0, [r7, #12]
    if ((current_time - last_debounce_time) > debounce_delay) {
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <Button_EXTI_Callback+0x44>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2232      	movs	r2, #50	; 0x32
 800184a:	4293      	cmp	r3, r2
 800184c:	d90b      	bls.n	8001866 <Button_EXTI_Callback+0x3e>
        // Enough time has passed since the last button press (debounced)
        button_count++;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <Button_EXTI_Callback+0x48>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	3301      	adds	r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <Button_EXTI_Callback+0x48>)
 800185a:	701a      	strb	r2, [r3, #0]
        last_debounce_time = current_time; // Update last debounce time
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <Button_EXTI_Callback+0x44>)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e000      	b.n	8001866 <Button_EXTI_Callback+0x3e>
        return;
 8001864:	bf00      	nop
    }
}
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000204 	.word	0x20000204
 8001870:	20000201 	.word	0x20000201

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <HAL_Init+0x40>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_Init+0x40>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_Init+0x40>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 f94f 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	200f      	movs	r0, #15
 80018a4:	f000 f808 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7ff fc20 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_InitTick+0x54>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x58>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f967 	bl	8001baa <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00e      	b.n	8001904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d80a      	bhi.n	8001902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	2200      	movs	r2, #0
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f000 f92f 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <HAL_InitTick+0x5c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e000      	b.n	8001904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000018 	.word	0x20000018
 8001910:	20000020 	.word	0x20000020
 8001914:	2000001c 	.word	0x2000001c

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000020 	.word	0x20000020
 800193c:	20000208 	.word	0x20000208

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000208 	.word	0x20000208

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff ffee 	bl	8001940 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d005      	beq.n	800197e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_Delay+0x44>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800197e:	bf00      	nop
 8001980:	f7ff ffde 	bl	8001940 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d8f7      	bhi.n	8001980 <HAL_Delay+0x28>
  {
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000020 	.word	0x20000020

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	; (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff8e 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff29 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff3e 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff8e 	bl	8001a94 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5d 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff31 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff feb6 	bl	8001940 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e099      	b.n	8001d14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c00:	e00f      	b.n	8001c22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c02:	f7ff fe9d 	bl	8001940 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d908      	bls.n	8001c22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e078      	b.n	8001d14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e8      	bne.n	8001c02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_DMA_Init+0x158>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d107      	bne.n	8001c8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	4313      	orrs	r3, r2
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d117      	bne.n	8001ce6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fa91 	bl	80021f0 <DMA_CheckFifoParam>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e016      	b.n	8001d14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa48 	bl	8002184 <DMA_CalcBaseAndBitshift>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	f010803f 	.word	0xf010803f

08001d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_DMA_Start_IT+0x26>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e040      	b.n	8001dc8 <HAL_DMA_Start_IT+0xa8>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d12f      	bne.n	8001dba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f9da 	bl	8002128 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	223f      	movs	r2, #63	; 0x3f
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0216 	orr.w	r2, r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0208 	orr.w	r2, r2, #8
 8001da6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e005      	b.n	8001dc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d004      	beq.n	8001dee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00c      	b.n	8001e08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2205      	movs	r2, #5
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e20:	4b8e      	ldr	r3, [pc, #568]	; (800205c <HAL_DMA_IRQHandler+0x248>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a8e      	ldr	r2, [pc, #568]	; (8002060 <HAL_DMA_IRQHandler+0x24c>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	2208      	movs	r2, #8
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01a      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0204 	bic.w	r2, r2, #4
 8001e66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	2201      	movs	r2, #1
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d012      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f043 0202 	orr.w	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2204      	movs	r2, #4
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2204      	movs	r2, #4
 8001eda:	409a      	lsls	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	f043 0204 	orr.w	r2, r3, #4
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d043      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d03c      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2210      	movs	r2, #16
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d018      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d108      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d024      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
 8001f42:	e01f      	b.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01b      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
 8001f54:	e016      	b.n	8001f84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0208 	bic.w	r2, r2, #8
 8001f72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2220      	movs	r2, #32
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 808f 	beq.w	80020b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8087 	beq.w	80020b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2220      	movs	r2, #32
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d136      	bne.n	800202c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0216 	bic.w	r2, r2, #22
 8001fcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_DMA_IRQHandler+0x1da>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0208 	bic.w	r2, r2, #8
 8001ffc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	223f      	movs	r2, #63	; 0x3f
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201e:	2b00      	cmp	r3, #0
 8002020:	d07e      	beq.n	8002120 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
        }
        return;
 800202a:	e079      	b.n	8002120 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01d      	beq.n	8002076 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	2b00      	cmp	r3, #0
 800204e:	d031      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e02c      	b.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
 800205a:	bf00      	nop
 800205c:	20000018 	.word	0x20000018
 8002060:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d023      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
 8002074:	e01e      	b.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10f      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0210 	bic.w	r2, r2, #16
 8002092:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d032      	beq.n	8002122 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d022      	beq.n	800210e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2205      	movs	r2, #5
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3301      	adds	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d307      	bcc.n	80020fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f2      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x2cc>
 80020fa:	e000      	b.n	80020fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e000      	b.n	8002122 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002120:	bf00      	nop
    }
  }
}
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002144:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d108      	bne.n	8002168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002166:	e007      	b.n	8002178 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3b10      	subs	r3, #16
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800219e:	4a13      	ldr	r2, [pc, #76]	; (80021ec <DMA_CalcBaseAndBitshift+0x68>)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d909      	bls.n	80021c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	1d1a      	adds	r2, r3, #4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	659a      	str	r2, [r3, #88]	; 0x58
 80021c4:	e007      	b.n	80021d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	aaaaaaab 	.word	0xaaaaaaab
 80021ec:	08005718 	.word	0x08005718

080021f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11f      	bne.n	800224a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d856      	bhi.n	80022be <DMA_CheckFifoParam+0xce>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <DMA_CheckFifoParam+0x28>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002229 	.word	0x08002229
 800221c:	0800223b 	.word	0x0800223b
 8002220:	08002229 	.word	0x08002229
 8002224:	080022bf 	.word	0x080022bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d046      	beq.n	80022c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002238:	e043      	b.n	80022c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002242:	d140      	bne.n	80022c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e03d      	b.n	80022c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002252:	d121      	bne.n	8002298 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d837      	bhi.n	80022ca <DMA_CheckFifoParam+0xda>
 800225a:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <DMA_CheckFifoParam+0x70>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002271 	.word	0x08002271
 8002264:	08002277 	.word	0x08002277
 8002268:	08002271 	.word	0x08002271
 800226c:	08002289 	.word	0x08002289
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      break;
 8002274:	e030      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d025      	beq.n	80022ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002286:	e022      	b.n	80022ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002290:	d11f      	bne.n	80022d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002296:	e01c      	b.n	80022d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d903      	bls.n	80022a6 <DMA_CheckFifoParam+0xb6>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d003      	beq.n	80022ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a4:	e018      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
      break;
 80022aa:	e015      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      break;
 80022bc:	e00b      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;
 80022be:	bf00      	nop
 80022c0:	e00a      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e008      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e006      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e004      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e002      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022d2:	bf00      	nop
 80022d4:	e000      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
    }
  } 
  
  return status; 
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e159      	b.n	80025b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8148 	bne.w	80025b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d005      	beq.n	800233a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	2b02      	cmp	r3, #2
 8002338:	d130      	bne.n	800239c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 0201 	and.w	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d017      	beq.n	80023d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a2 	beq.w	80025b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	4a56      	ldr	r2, [pc, #344]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247c:	6453      	str	r3, [r2, #68]	; 0x44
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_GPIO_Init+0x2ec>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d019      	beq.n	80024ea <HAL_GPIO_Init+0x202>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a48      	ldr	r2, [pc, #288]	; (80025dc <HAL_GPIO_Init+0x2f4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0x1fe>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a47      	ldr	r2, [pc, #284]	; (80025e0 <HAL_GPIO_Init+0x2f8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a46      	ldr	r2, [pc, #280]	; (80025e4 <HAL_GPIO_Init+0x2fc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <HAL_GPIO_Init+0x1f6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_GPIO_Init+0x300>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_GPIO_Init+0x1f2>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024da:	2307      	movs	r3, #7
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024ea:	2300      	movs	r3, #0
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fc:	4935      	ldr	r1, [pc, #212]	; (80025d4 <HAL_GPIO_Init+0x2ec>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_GPIO_Init+0x304>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252e:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_GPIO_Init+0x304>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002582:	4a1a      	ldr	r2, [pc, #104]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_GPIO_Init+0x304>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ac:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_GPIO_Init+0x304>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	f67f aea2 	bls.w	8002304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e001      	b.n	8002612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d006      	beq.n	8002678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800266a:	4a05      	ldr	r2, [pc, #20]	; (8002680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe f99e 	bl	80009b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e267      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d075      	beq.n	800278e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d00c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d112      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b82      	ldr	r3, [pc, #520]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	4b7e      	ldr	r3, [pc, #504]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d05b      	beq.n	800278c <HAL_RCC_OscConfig+0x108>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d157      	bne.n	800278c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e242      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x74>
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a75      	ldr	r2, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x98>
 8002702:	4b70      	ldr	r3, [pc, #448]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6f      	ldr	r2, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6c      	ldr	r2, [pc, #432]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 800271c:	4b69      	ldr	r3, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a68      	ldr	r2, [pc, #416]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b66      	ldr	r3, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a65      	ldr	r2, [pc, #404]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff f900 	bl	8001940 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff f8fc 	bl	8001940 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e207      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xc0>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff f8ec 	bl	8001940 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff f8e8 	bl	8001940 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1f3      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0xe8>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1c7      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4937      	ldr	r1, [pc, #220]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x244>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7ff f8a1 	bl	8001940 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7ff f89d 	bl	8001940 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1a8      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4925      	ldr	r1, [pc, #148]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x244>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff f880 	bl	8001940 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002844:	f7ff f87c 	bl	8001940 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e187      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d036      	beq.n	80028dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x248>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7ff f860 	bl	8001940 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002884:	f7ff f85c 	bl	8001940 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e167      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x200>
 80028a2:	e01b      	b.n	80028dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_OscConfig+0x248>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7ff f849 	bl	8001940 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	e00e      	b.n	80028d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7ff f845 	bl	8001940 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d907      	bls.n	80028d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e150      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	42470000 	.word	0x42470000
 80028cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ea      	bne.n	80028b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8097 	beq.w	8002a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	4b7d      	ldr	r3, [pc, #500]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a7c      	ldr	r2, [pc, #496]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b7a      	ldr	r3, [pc, #488]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b77      	ldr	r3, [pc, #476]	; (8002af8 <HAL_RCC_OscConfig+0x474>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b74      	ldr	r3, [pc, #464]	; (8002af8 <HAL_RCC_OscConfig+0x474>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a73      	ldr	r2, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x474>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7ff f805 	bl	8001940 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7ff f801 	bl	8001940 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e10c      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCC_OscConfig+0x474>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x2ea>
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a63      	ldr	r2, [pc, #396]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x324>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x30c>
 8002976:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a5e      	ldr	r2, [pc, #376]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a5b      	ldr	r2, [pc, #364]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x324>
 8002990:	4b58      	ldr	r3, [pc, #352]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
 800299c:	4b55      	ldr	r3, [pc, #340]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a54      	ldr	r2, [pc, #336]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe ffc6 	bl	8001940 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe ffc2 	bl	8001940 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0cb      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCC_OscConfig+0x334>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe ffb0 	bl	8001940 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe ffac 	bl	8001940 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0b5      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ee      	bne.n	80029e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a38      	ldr	r2, [pc, #224]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a1 	beq.w	8002b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a22:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d05c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d141      	bne.n	8002aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_RCC_OscConfig+0x478>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe ff80 	bl	8001940 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe ff7c 	bl	8001940 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e087      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	491b      	ldr	r1, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x478>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe ff55 	bl	8001940 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe ff51 	bl	8001940 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e05c      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x416>
 8002ab8:	e054      	b.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_RCC_OscConfig+0x478>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe ff3e 	bl	8001940 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe ff3a 	bl	8001940 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e045      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x444>
 8002ae6:	e03d      	b.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e038      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000
 8002afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_RCC_OscConfig+0x4ec>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d028      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d121      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d11a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d111      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0cc      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d90c      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d044      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d119      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e067      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4934      	ldr	r1, [pc, #208]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fe6c 	bl	8001940 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7fe fe68 	bl	8001940 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e04f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d20c      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f821 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fdcc 	bl	80018b8 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00
 8002d30:	40023800 	.word	0x40023800
 8002d34:	080056ac 	.word	0x080056ac
 8002d38:	20000018 	.word	0x20000018
 8002d3c:	2000001c 	.word	0x2000001c

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d44:	b090      	sub	sp, #64	; 0x40
 8002d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d50:	2300      	movs	r3, #0
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d00d      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x40>
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	f200 80a1 	bhi.w	8002eac <HAL_RCC_GetSysClockFreq+0x16c>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x34>
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d72:	e09b      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d78:	e09b      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7a:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d7e:	e098      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d028      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	627a      	str	r2, [r7, #36]	; 0x24
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002da8:	2100      	movs	r1, #0
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dac:	fb03 f201 	mul.w	r2, r3, r1
 8002db0:	2300      	movs	r3, #0
 8002db2:	fb00 f303 	mul.w	r3, r0, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dba:	fba0 1202 	umull	r1, r2, r0, r2
 8002dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc6:	4413      	add	r3, r2
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	61fa      	str	r2, [r7, #28]
 8002dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dda:	f7fd fa59 	bl	8000290 <__aeabi_uldivmod>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4613      	mov	r3, r2
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de6:	e053      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	2200      	movs	r2, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	617a      	str	r2, [r7, #20]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dfa:	f04f 0b00 	mov.w	fp, #0
 8002dfe:	4652      	mov	r2, sl
 8002e00:	465b      	mov	r3, fp
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f04f 0100 	mov.w	r1, #0
 8002e0a:	0159      	lsls	r1, r3, #5
 8002e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e10:	0150      	lsls	r0, r2, #5
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	ebb2 080a 	subs.w	r8, r2, sl
 8002e1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e32:	ebb2 0408 	subs.w	r4, r2, r8
 8002e36:	eb63 0509 	sbc.w	r5, r3, r9
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	00eb      	lsls	r3, r5, #3
 8002e44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e48:	00e2      	lsls	r2, r4, #3
 8002e4a:	4614      	mov	r4, r2
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	eb14 030a 	adds.w	r3, r4, sl
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	eb45 030b 	adc.w	r3, r5, fp
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e66:	4629      	mov	r1, r5
 8002e68:	028b      	lsls	r3, r1, #10
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e70:	4621      	mov	r1, r4
 8002e72:	028a      	lsls	r2, r1, #10
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	60fa      	str	r2, [r7, #12]
 8002e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e84:	f7fd fa04 	bl	8000290 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3740      	adds	r7, #64	; 0x40
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	00f42400 	.word	0x00f42400
 8002ec8:	016e3600 	.word	0x016e3600

08002ecc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d038      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ef4:	4b68      	ldr	r3, [pc, #416]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002efa:	f7fe fd21 	bl	8001940 <HAL_GetTick>
 8002efe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f02:	f7fe fd1d 	bl	8001940 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0bd      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f14:	4b61      	ldr	r3, [pc, #388]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	495a      	ldr	r1, [pc, #360]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f3a:	4b57      	ldr	r3, [pc, #348]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f40:	f7fe fcfe 	bl	8001940 <HAL_GetTick>
 8002f44:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f48:	f7fe fcfa 	bl	8001940 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e09a      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f5a:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8083 	beq.w	800307a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	4b48      	ldr	r3, [pc, #288]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	4a47      	ldr	r2, [pc, #284]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f82:	6413      	str	r3, [r2, #64]	; 0x40
 8002f84:	4b45      	ldr	r3, [pc, #276]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f90:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe fcd0 	bl	8001940 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe fccc 	bl	8001940 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e06c      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02f      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d028      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe0:	4b2e      	ldr	r3, [pc, #184]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fea:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ff6:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ffc:	4b27      	ldr	r3, [pc, #156]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d114      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fc9a 	bl	8001940 <HAL_GetTick>
 800300c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe fc96 	bl	8001940 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e034      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ee      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800303e:	d10d      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	4911      	ldr	r1, [pc, #68]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
 800305a:	e005      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003062:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003066:	6093      	str	r3, [r2, #8]
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	4909      	ldr	r1, [pc, #36]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003076:	4313      	orrs	r3, r2
 8003078:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7d1a      	ldrb	r2, [r3, #20]
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800308c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	42470068 	.word	0x42470068
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42470e40 	.word	0x42470e40
 80030a8:	424711e0 	.word	0x424711e0

080030ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e066      	b.n	8003190 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7f5b      	ldrb	r3, [r3, #29]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe f832 	bl	800113c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	22ca      	movs	r2, #202	; 0xca
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2253      	movs	r2, #83	; 0x53
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa45 	bl	800357e <RTC_EnterInitMode>
 80030f4:	4603      	mov	r3, r0
 80030f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d12c      	bne.n	8003158 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800310c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003110:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6899      	ldr	r1, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68d2      	ldr	r2, [r2, #12]
 8003138:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6919      	ldr	r1, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	041a      	lsls	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa4c 	bl	80035ec <RTC_ExitInitMode>
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d113      	bne.n	8003186 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	22ff      	movs	r2, #255	; 0xff
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	7f1b      	ldrb	r3, [r3, #28]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_RTC_SetTime+0x1c>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e087      	b.n	80032c4 <HAL_RTC_SetTime+0x12c>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d126      	bne.n	8003214 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2200      	movs	r2, #0
 80031d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fa29 	bl	8003636 <RTC_ByteToBcd2>
 80031e4:	4603      	mov	r3, r0
 80031e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa22 	bl	8003636 <RTC_ByteToBcd2>
 80031f2:	4603      	mov	r3, r0
 80031f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	789b      	ldrb	r3, [r3, #2]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fa1a 	bl	8003636 <RTC_ByteToBcd2>
 8003202:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003204:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	78db      	ldrb	r3, [r3, #3]
 800320c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e018      	b.n	8003246 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003234:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800323a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	78db      	ldrb	r3, [r3, #3]
 8003240:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	22ca      	movs	r2, #202	; 0xca
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2253      	movs	r2, #83	; 0x53
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f991 	bl	800357e <RTC_EnterInitMode>
 800325c:	4603      	mov	r3, r0
 800325e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d120      	bne.n	80032a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003270:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003274:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003284:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6899      	ldr	r1, [r3, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f9a4 	bl	80035ec <RTC_ExitInitMode>
 80032a4:	4603      	mov	r3, r0
 80032a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	22ff      	movs	r2, #255	; 0xff
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	771a      	strb	r2, [r3, #28]

  return status;
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}

080032cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003302:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	0d9b      	lsrs	r3, r3, #22
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d11a      	bne.n	800337e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f98f 	bl	8003670 <RTC_Bcd2ToByte>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f986 	bl	8003670 <RTC_Bcd2ToByte>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	789b      	ldrb	r3, [r3, #2]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f97d 	bl	8003670 <RTC_Bcd2ToByte>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	7f1b      	ldrb	r3, [r3, #28]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_RTC_SetDate+0x1c>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e071      	b.n	8003488 <HAL_RTC_SetDate+0x100>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2202      	movs	r2, #2
 80033ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10e      	bne.n	80033d4 <HAL_RTC_SetDate+0x4c>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	f023 0310 	bic.w	r3, r3, #16
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	330a      	adds	r3, #10
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11c      	bne.n	8003414 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	78db      	ldrb	r3, [r3, #3]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f929 	bl	8003636 <RTC_ByteToBcd2>
 80033e4:	4603      	mov	r3, r0
 80033e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f922 	bl	8003636 <RTC_ByteToBcd2>
 80033f2:	4603      	mov	r3, r0
 80033f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	789b      	ldrb	r3, [r3, #2]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f91a 	bl	8003636 <RTC_ByteToBcd2>
 8003402:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003404:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e00e      	b.n	8003432 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	78db      	ldrb	r3, [r3, #3]
 8003418:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	785b      	ldrb	r3, [r3, #1]
 800341e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003420:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003426:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	22ca      	movs	r2, #202	; 0xca
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2253      	movs	r2, #83	; 0x53
 8003440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f89b 	bl	800357e <RTC_EnterInitMode>
 8003448:	4603      	mov	r3, r0
 800344a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800345c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003460:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f8c2 	bl	80035ec <RTC_ExitInitMode>
 8003468:	4603      	mov	r3, r0
 800346a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	771a      	strb	r2, [r3, #28]

  return status;
 8003486:	7cfb      	ldrb	r3, [r7, #19]
}
 8003488:	4618      	mov	r0, r3
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd90      	pop	{r4, r7, pc}

08003490 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	0b5b      	lsrs	r3, r3, #13
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11a      	bne.n	8003524 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	78db      	ldrb	r3, [r3, #3]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f8bc 	bl	8003670 <RTC_Bcd2ToByte>
 80034f8:	4603      	mov	r3, r0
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	785b      	ldrb	r3, [r3, #1]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f8b3 	bl	8003670 <RTC_Bcd2ToByte>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	789b      	ldrb	r3, [r3, #2]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f8aa 	bl	8003670 <RTC_Bcd2ToByte>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003548:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354a:	f7fe f9f9 	bl	8001940 <HAL_GetTick>
 800354e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003550:	e009      	b.n	8003566 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003552:	f7fe f9f5 	bl	8001940 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003560:	d901      	bls.n	8003566 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e007      	b.n	8003576 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ee      	beq.n	8003552 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d122      	bne.n	80035e2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035ac:	f7fe f9c8 	bl	8001940 <HAL_GetTick>
 80035b0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035b2:	e00c      	b.n	80035ce <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035b4:	f7fe f9c4 	bl	8001940 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035c2:	d904      	bls.n	80035ce <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2204      	movs	r2, #4
 80035c8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <RTC_EnterInitMode+0x64>
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d1e8      	bne.n	80035b4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003606:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ff89 	bl	800352e <HAL_RTC_WaitForSynchro>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003644:	e005      	b.n	8003652 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	3301      	adds	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	3b0a      	subs	r3, #10
 8003650:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	2b09      	cmp	r3, #9
 8003656:	d8f6      	bhi.n	8003646 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	b2da      	uxtb	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	4313      	orrs	r3, r2
 8003662:	b2db      	uxtb	r3, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	4413      	add	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	b2da      	uxtb	r2, r3
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	4413      	add	r3, r2
 800369a:	b2db      	uxtb	r3, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e041      	b.n	800373e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fd60 	bl	8001194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 fd6a 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e041      	b.n	80037dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f839 	bl	80037e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	4619      	mov	r1, r3
 8003784:	4610      	mov	r0, r2
 8003786:	f000 fd1b 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e022      	b.n	800386a <HAL_TIM_PWM_Start_DMA+0x72>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b04      	cmp	r3, #4
 8003828:	d109      	bne.n	800383e <HAL_TIM_PWM_Start_DMA+0x46>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e015      	b.n	800386a <HAL_TIM_PWM_Start_DMA+0x72>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d109      	bne.n	8003858 <HAL_TIM_PWM_Start_DMA+0x60>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e008      	b.n	800386a <HAL_TIM_PWM_Start_DMA+0x72>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
 8003870:	e15d      	b.n	8003b2e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_TIM_PWM_Start_DMA+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e022      	b.n	80038d2 <HAL_TIM_PWM_Start_DMA+0xda>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b04      	cmp	r3, #4
 8003890:	d109      	bne.n	80038a6 <HAL_TIM_PWM_Start_DMA+0xae>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	e015      	b.n	80038d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d109      	bne.n	80038c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e008      	b.n	80038d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d024      	beq.n	8003920 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Start_DMA+0xee>
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e123      	b.n	8003b2e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f4:	e016      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x12c>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_PWM_Start_DMA+0x10e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003904:	e00e      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d104      	bne.n	8003916 <HAL_TIM_PWM_Start_DMA+0x11e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003914:	e006      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800391e:	e001      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e104      	b.n	8003b2e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	f200 80ae 	bhi.w	8003a88 <HAL_TIM_PWM_Start_DMA+0x290>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003969 	.word	0x08003969
 8003938:	08003a89 	.word	0x08003a89
 800393c:	08003a89 	.word	0x08003a89
 8003940:	08003a89 	.word	0x08003a89
 8003944:	080039b1 	.word	0x080039b1
 8003948:	08003a89 	.word	0x08003a89
 800394c:	08003a89 	.word	0x08003a89
 8003950:	08003a89 	.word	0x08003a89
 8003954:	080039f9 	.word	0x080039f9
 8003958:	08003a89 	.word	0x08003a89
 800395c:	08003a89 	.word	0x08003a89
 8003960:	08003a89 	.word	0x08003a89
 8003964:	08003a41 	.word	0x08003a41
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	4a72      	ldr	r2, [pc, #456]	; (8003b38 <HAL_TIM_PWM_Start_DMA+0x340>)
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	4a71      	ldr	r2, [pc, #452]	; (8003b3c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	4a70      	ldr	r2, [pc, #448]	; (8003b40 <HAL_TIM_PWM_Start_DMA+0x348>)
 800397e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3334      	adds	r3, #52	; 0x34
 800398c:	461a      	mov	r2, r3
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	f7fe f9c6 	bl	8001d20 <HAL_DMA_Start_IT>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0c7      	b.n	8003b2e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ac:	60da      	str	r2, [r3, #12]
      break;
 80039ae:	e06e      	b.n	8003a8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	4a60      	ldr	r2, [pc, #384]	; (8003b38 <HAL_TIM_PWM_Start_DMA+0x340>)
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	4a5f      	ldr	r2, [pc, #380]	; (8003b3c <HAL_TIM_PWM_Start_DMA+0x344>)
 80039be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	4a5e      	ldr	r2, [pc, #376]	; (8003b40 <HAL_TIM_PWM_Start_DMA+0x348>)
 80039c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3338      	adds	r3, #56	; 0x38
 80039d4:	461a      	mov	r2, r3
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	f7fe f9a2 	bl	8001d20 <HAL_DMA_Start_IT>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0a3      	b.n	8003b2e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f4:	60da      	str	r2, [r3, #12]
      break;
 80039f6:	e04a      	b.n	8003a8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a4e      	ldr	r2, [pc, #312]	; (8003b38 <HAL_TIM_PWM_Start_DMA+0x340>)
 80039fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a4d      	ldr	r2, [pc, #308]	; (8003b3c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4a4c      	ldr	r2, [pc, #304]	; (8003b40 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003a0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	333c      	adds	r3, #60	; 0x3c
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	f7fe f97e 	bl	8001d20 <HAL_DMA_Start_IT>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e07f      	b.n	8003b2e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a3c:	60da      	str	r2, [r3, #12]
      break;
 8003a3e:	e026      	b.n	8003a8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	4a3c      	ldr	r2, [pc, #240]	; (8003b38 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003a46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	4a3b      	ldr	r2, [pc, #236]	; (8003b3c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	4a3a      	ldr	r2, [pc, #232]	; (8003b40 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003a56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3340      	adds	r3, #64	; 0x40
 8003a64:	461a      	mov	r2, r3
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	f7fe f95a 	bl	8001d20 <HAL_DMA_Start_IT>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e05b      	b.n	8003b2e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a84:	60da      	str	r2, [r3, #12]
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d14b      	bne.n	8003b2c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fe35 	bl	800470c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x300>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d013      	beq.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x300>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x300>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <HAL_TIM_PWM_Start_DMA+0x354>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x300>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x300>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d010      	beq.n	8003b2c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	e007      	b.n	8003b2c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	080040b1 	.word	0x080040b1
 8003b3c:	08004159 	.word	0x08004159
 8003b40:	0800401f 	.word	0x0800401f
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40014000 	.word	0x40014000

08003b58 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	d855      	bhi.n	8003c18 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003c19 	.word	0x08003c19
 8003b7c:	08003c19 	.word	0x08003c19
 8003b80:	08003c19 	.word	0x08003c19
 8003b84:	08003bc5 	.word	0x08003bc5
 8003b88:	08003c19 	.word	0x08003c19
 8003b8c:	08003c19 	.word	0x08003c19
 8003b90:	08003c19 	.word	0x08003c19
 8003b94:	08003be1 	.word	0x08003be1
 8003b98:	08003c19 	.word	0x08003c19
 8003b9c:	08003c19 	.word	0x08003c19
 8003ba0:	08003c19 	.word	0x08003c19
 8003ba4:	08003bfd 	.word	0x08003bfd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe f907 	bl	8001dd0 <HAL_DMA_Abort_IT>
      break;
 8003bc2:	e02c      	b.n	8003c1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe f8f9 	bl	8001dd0 <HAL_DMA_Abort_IT>
      break;
 8003bde:	e01e      	b.n	8003c1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe f8eb 	bl	8001dd0 <HAL_DMA_Abort_IT>
      break;
 8003bfa:	e010      	b.n	8003c1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe f8dd 	bl	8001dd0 <HAL_DMA_Abort_IT>
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d157      	bne.n	8003cd4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	6839      	ldr	r1, [r7, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fd6d 	bl	800470c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d117      	bne.n	8003c6c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a1a      	ldr	r2, [r3, #32]
 8003c42:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10f      	bne.n	8003c6c <HAL_TIM_PWM_Stop_DMA+0x114>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	f240 4344 	movw	r3, #1092	; 0x444
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_TIM_PWM_Stop_DMA+0x114>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x144>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	f240 4344 	movw	r3, #1092	; 0x444
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x144>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_TIM_PWM_Stop_DMA+0x154>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003caa:	e013      	b.n	8003cd4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d104      	bne.n	8003cbc <HAL_TIM_PWM_Stop_DMA+0x164>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cba:	e00b      	b.n	8003cd4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d104      	bne.n	8003ccc <HAL_TIM_PWM_Stop_DMA+0x174>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cca:	e003      	b.n	8003cd4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000

08003ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0ae      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	f200 809f 	bhi.w	8003e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003e51 	.word	0x08003e51
 8003d20:	08003e51 	.word	0x08003e51
 8003d24:	08003e51 	.word	0x08003e51
 8003d28:	08003d8d 	.word	0x08003d8d
 8003d2c:	08003e51 	.word	0x08003e51
 8003d30:	08003e51 	.word	0x08003e51
 8003d34:	08003e51 	.word	0x08003e51
 8003d38:	08003dcf 	.word	0x08003dcf
 8003d3c:	08003e51 	.word	0x08003e51
 8003d40:	08003e51 	.word	0x08003e51
 8003d44:	08003e51 	.word	0x08003e51
 8003d48:	08003e0f 	.word	0x08003e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fab4 	bl	80042c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0208 	orr.w	r2, r2, #8
 8003d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0204 	bic.w	r2, r2, #4
 8003d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6999      	ldr	r1, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	619a      	str	r2, [r3, #24]
      break;
 8003d8a:	e064      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fafa 	bl	800438c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6999      	ldr	r1, [r3, #24]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	619a      	str	r2, [r3, #24]
      break;
 8003dcc:	e043      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fb45 	bl	8004464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0208 	orr.w	r2, r2, #8
 8003de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0204 	bic.w	r2, r2, #4
 8003df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
      break;
 8003e0c:	e023      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fb8f 	bl	8004538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
      break;
 8003e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0b4      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x186>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebc:	d03e      	beq.n	8003f3c <HAL_TIM_ConfigClockSource+0xd4>
 8003ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec2:	f200 8087 	bhi.w	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eca:	f000 8086 	beq.w	8003fda <HAL_TIM_ConfigClockSource+0x172>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d87f      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b70      	cmp	r3, #112	; 0x70
 8003ed6:	d01a      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0xa6>
 8003ed8:	2b70      	cmp	r3, #112	; 0x70
 8003eda:	d87b      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b60      	cmp	r3, #96	; 0x60
 8003ede:	d050      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ee0:	2b60      	cmp	r3, #96	; 0x60
 8003ee2:	d877      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee4:	2b50      	cmp	r3, #80	; 0x50
 8003ee6:	d03c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ee8:	2b50      	cmp	r3, #80	; 0x50
 8003eea:	d873      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d058      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d86f      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b30      	cmp	r3, #48	; 0x30
 8003ef6:	d064      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ef8:	2b30      	cmp	r3, #48	; 0x30
 8003efa:	d86b      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d060      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d867      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05c      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d05a      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f0c:	e062      	b.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f000 fbd5 	bl	80046cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	609a      	str	r2, [r3, #8]
      break;
 8003f3a:	e04f      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f000 fbbe 	bl	80046cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f5e:	609a      	str	r2, [r3, #8]
      break;
 8003f60:	e03c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 fb32 	bl	80045d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2150      	movs	r1, #80	; 0x50
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fb8b 	bl	8004696 <TIM_ITRx_SetConfig>
      break;
 8003f80:	e02c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 fb51 	bl	8004636 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2160      	movs	r1, #96	; 0x60
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb7b 	bl	8004696 <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e01c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 fb12 	bl	80045d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2140      	movs	r1, #64	; 0x40
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb6b 	bl	8004696 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e00c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f000 fb62 	bl	8004696 <TIM_ITRx_SetConfig>
      break;
 8003fd2:	e003      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd8:	e000      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	429a      	cmp	r2, r3
 8004034:	d107      	bne.n	8004046 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004044:	e02a      	b.n	800409c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d107      	bne.n	8004060 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2202      	movs	r2, #2
 8004054:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405e:	e01d      	b.n	800409c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d107      	bne.n	800407a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2204      	movs	r2, #4
 800406e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004078:	e010      	b.n	800409c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d107      	bne.n	8004094 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2208      	movs	r2, #8
 8004088:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004092:	e003      	b.n	800409c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ffb4 	bl	800400a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d10b      	bne.n	80040e0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d136      	bne.n	8004144 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040de:	e031      	b.n	8004144 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d10b      	bne.n	8004102 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2202      	movs	r2, #2
 80040ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d125      	bne.n	8004144 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004100:	e020      	b.n	8004144 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d10b      	bne.n	8004124 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2204      	movs	r2, #4
 8004110:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d114      	bne.n	8004144 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004122:	e00f      	b.n	8004144 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d10a      	bne.n	8004144 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2208      	movs	r2, #8
 8004132:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fc73 	bl	8004a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d103      	bne.n	8004178 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	771a      	strb	r2, [r3, #28]
 8004176:	e019      	b.n	80041ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	429a      	cmp	r2, r3
 8004180:	d103      	bne.n	800418a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2202      	movs	r2, #2
 8004186:	771a      	strb	r2, [r3, #28]
 8004188:	e010      	b.n	80041ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	429a      	cmp	r2, r3
 8004192:	d103      	bne.n	800419c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2204      	movs	r2, #4
 8004198:	771a      	strb	r2, [r3, #28]
 800419a:	e007      	b.n	80041ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d102      	bne.n	80041ac <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2208      	movs	r2, #8
 80041aa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff ff22 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a34      	ldr	r2, [pc, #208]	; (80042a4 <TIM_Base_SetConfig+0xe4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00f      	beq.n	80041f8 <TIM_Base_SetConfig+0x38>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0x38>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a31      	ldr	r2, [pc, #196]	; (80042a8 <TIM_Base_SetConfig+0xe8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0x38>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a30      	ldr	r2, [pc, #192]	; (80042ac <TIM_Base_SetConfig+0xec>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <TIM_Base_SetConfig+0xf0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <TIM_Base_SetConfig+0xe4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01b      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d017      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <TIM_Base_SetConfig+0xe8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a21      	ldr	r2, [pc, #132]	; (80042ac <TIM_Base_SetConfig+0xec>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00f      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a20      	ldr	r2, [pc, #128]	; (80042b0 <TIM_Base_SetConfig+0xf0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00b      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <TIM_Base_SetConfig+0xf4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d007      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1e      	ldr	r2, [pc, #120]	; (80042b8 <TIM_Base_SetConfig+0xf8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <TIM_Base_SetConfig+0xfc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d108      	bne.n	800425c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <TIM_Base_SetConfig+0xe4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d103      	bne.n	8004290 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	615a      	str	r2, [r3, #20]
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	40014000 	.word	0x40014000
 80042b8:	40014400 	.word	0x40014400
 80042bc:	40014800 	.word	0x40014800

080042c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0201 	bic.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 0302 	bic.w	r3, r3, #2
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <TIM_OC1_SetConfig+0xc8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d10c      	bne.n	8004336 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0308 	bic.w	r3, r3, #8
 8004322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <TIM_OC1_SetConfig+0xc8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d111      	bne.n	8004362 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800434c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	621a      	str	r2, [r3, #32]
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40010000 	.word	0x40010000

0800438c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0210 	bic.w	r2, r3, #16
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0320 	bic.w	r3, r3, #32
 80043d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <TIM_OC2_SetConfig+0xd4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10d      	bne.n	8004408 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004406:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <TIM_OC2_SetConfig+0xd4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d113      	bne.n	8004438 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800441e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000

08004464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <TIM_OC3_SetConfig+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10d      	bne.n	80044de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <TIM_OC3_SetConfig+0xd0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d113      	bne.n	800450e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	621a      	str	r2, [r3, #32]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40010000 	.word	0x40010000

08004538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	031b      	lsls	r3, r3, #12
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <TIM_OC4_SetConfig+0x9c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d109      	bne.n	80045ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000

080045d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f023 030a 	bic.w	r3, r3, #10
 8004614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004636:	b480      	push	{r7}
 8004638:	b087      	sub	sp, #28
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0210 	bic.w	r2, r3, #16
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	031b      	lsls	r3, r3, #12
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004672:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f043 0307 	orr.w	r3, r3, #7
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	021a      	lsls	r2, r3, #8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	2201      	movs	r2, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	43db      	mvns	r3, r3
 800472e:	401a      	ands	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	fa01 f303 	lsl.w	r3, r1, r3
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e050      	b.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047bc:	d013      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a15      	ldr	r2, [pc, #84]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a13      	ldr	r2, [pc, #76]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d10c      	bne.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40014000 	.word	0x40014000

08004834 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800484c:	2302      	movs	r3, #2
 800484e:	e03d      	b.n	80048cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <Set_LED>:
#include "WS2812B.h"

uint8_t LED_Data[NUM_LEDS][3]; // Remove unnecessary LED num
volatile int datasentflag;

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
    LED_Data[LEDnum][0] = Green;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	b2d8      	uxtb	r0, r3
 80048ea:	4912      	ldr	r1, [pc, #72]	; (8004934 <Set_LED+0x5c>)
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	440b      	add	r3, r1
 80048f6:	4602      	mov	r2, r0
 80048f8:	701a      	strb	r2, [r3, #0]
    LED_Data[LEDnum][1] = Red;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	b2d8      	uxtb	r0, r3
 80048fe:	490d      	ldr	r1, [pc, #52]	; (8004934 <Set_LED+0x5c>)
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	440b      	add	r3, r1
 800490a:	3301      	adds	r3, #1
 800490c:	4602      	mov	r2, r0
 800490e:	701a      	strb	r2, [r3, #0]
    LED_Data[LEDnum][2] = Blue;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	b2d8      	uxtb	r0, r3
 8004914:	4907      	ldr	r1, [pc, #28]	; (8004934 <Set_LED+0x5c>)
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4613      	mov	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	440b      	add	r3, r1
 8004920:	3302      	adds	r3, #2
 8004922:	4602      	mov	r2, r0
 8004924:	701a      	strb	r2, [r3, #0]
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	2000020c 	.word	0x2000020c

08004938 <WS2812B_Send>:

uint16_t pwmData[(24 * NUM_LEDS) + RESET_SLOTS]; // Each LED requires 24 bits.



void WS2812B_Send(TIM_HandleTypeDef htim1) {
 8004938:	b084      	sub	sp, #16
 800493a:	b580      	push	{r7, lr}
 800493c:	b086      	sub	sp, #24
 800493e:	af00      	add	r7, sp, #0
 8004940:	f107 0c20 	add.w	ip, r7, #32
 8004944:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t indx = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
    uint32_t data;

    // Shifting colors into 24 bit buffer
    for (int i = 0; i < NUM_LEDS; i++) {
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e03e      	b.n	80049d0 <WS2812B_Send+0x98>

        data = ((LED_Data[i][0] << 16) | (LED_Data[i][1] << 8) | (LED_Data[i][2]));
 8004952:	4934      	ldr	r1, [pc, #208]	; (8004a24 <WS2812B_Send+0xec>)
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4613      	mov	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	4413      	add	r3, r2
 800495c:	440b      	add	r3, r1
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	0419      	lsls	r1, r3, #16
 8004962:	4830      	ldr	r0, [pc, #192]	; (8004a24 <WS2812B_Send+0xec>)
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	4403      	add	r3, r0
 800496e:	3301      	adds	r3, #1
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	4319      	orrs	r1, r3
 8004976:	482b      	ldr	r0, [pc, #172]	; (8004a24 <WS2812B_Send+0xec>)
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	4403      	add	r3, r0
 8004982:	3302      	adds	r3, #2
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	430b      	orrs	r3, r1
 8004988:	607b      	str	r3, [r7, #4]

        for (int j = 23; j >= 0; j--) {
 800498a:	2317      	movs	r3, #23
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e019      	b.n	80049c4 <WS2812B_Send+0x8c>
            if (data & (1 << j))
 8004990:	2201      	movs	r2, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <WS2812B_Send+0x76>
                pwmData[indx] = ONE; // Use defined duty cycle for ONE
 80049a2:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <WS2812B_Send+0xf0>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2136      	movs	r1, #54	; 0x36
 80049a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80049ac:	e004      	b.n	80049b8 <WS2812B_Send+0x80>
            else
                pwmData[indx] = ZERO; // Use defined duty cycle for ZERO
 80049ae:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <WS2812B_Send+0xf0>)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	211b      	movs	r1, #27
 80049b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            indx++;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	3301      	adds	r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
        for (int j = 23; j >= 0; j--) {
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	dae2      	bge.n	8004990 <WS2812B_Send+0x58>
    for (int i = 0; i < NUM_LEDS; i++) {
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3301      	adds	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b81      	cmp	r3, #129	; 0x81
 80049d4:	ddbd      	ble.n	8004952 <WS2812B_Send+0x1a>
        }
    }

    // Create the reset signal by putting low values (0) at the end of pwmData
    for (int j = 0; j < RESET_SLOTS; j++) {
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	e009      	b.n	80049f0 <WS2812B_Send+0xb8>
        pwmData[indx++] = 0;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	617a      	str	r2, [r7, #20]
 80049e2:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <WS2812B_Send+0xf0>)
 80049e4:	2100      	movs	r1, #0
 80049e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int j = 0; j < RESET_SLOTS; j++) {
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b31      	cmp	r3, #49	; 0x31
 80049f4:	ddf2      	ble.n	80049dc <WS2812B_Send+0xa4>
    }

    // Start transmitting PWM data
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData, indx);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4a0b      	ldr	r2, [pc, #44]	; (8004a28 <WS2812B_Send+0xf0>)
 80049fc:	2100      	movs	r1, #0
 80049fe:	f107 0020 	add.w	r0, r7, #32
 8004a02:	f7fe fef9 	bl	80037f8 <HAL_TIM_PWM_Start_DMA>

    // Wait until the data has been sent
    while (!datasentflag) {}
 8004a06:	bf00      	nop
 8004a08:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <WS2812B_Send+0xf4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0fb      	beq.n	8004a08 <WS2812B_Send+0xd0>

    // Reset the data sent flag for the next transmission
    datasentflag = 0;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <WS2812B_Send+0xf4>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a20:	b004      	add	sp, #16
 8004a22:	4770      	bx	lr
 8004a24:	2000020c 	.word	0x2000020c
 8004a28:	20000398 	.word	0x20000398
 8004a2c:	20000394 	.word	0x20000394

08004a30 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff f88c 	bl	8003b58 <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    datasentflag = 1;
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000394 	.word	0x20000394

08004a54 <__errno>:
 8004a54:	4b01      	ldr	r3, [pc, #4]	; (8004a5c <__errno+0x8>)
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000024 	.word	0x20000024

08004a60 <__libc_init_array>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	4d0d      	ldr	r5, [pc, #52]	; (8004a98 <__libc_init_array+0x38>)
 8004a64:	4c0d      	ldr	r4, [pc, #52]	; (8004a9c <__libc_init_array+0x3c>)
 8004a66:	1b64      	subs	r4, r4, r5
 8004a68:	10a4      	asrs	r4, r4, #2
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	42a6      	cmp	r6, r4
 8004a6e:	d109      	bne.n	8004a84 <__libc_init_array+0x24>
 8004a70:	4d0b      	ldr	r5, [pc, #44]	; (8004aa0 <__libc_init_array+0x40>)
 8004a72:	4c0c      	ldr	r4, [pc, #48]	; (8004aa4 <__libc_init_array+0x44>)
 8004a74:	f000 fcae 	bl	80053d4 <_init>
 8004a78:	1b64      	subs	r4, r4, r5
 8004a7a:	10a4      	asrs	r4, r4, #2
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	42a6      	cmp	r6, r4
 8004a80:	d105      	bne.n	8004a8e <__libc_init_array+0x2e>
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
 8004a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a88:	4798      	blx	r3
 8004a8a:	3601      	adds	r6, #1
 8004a8c:	e7ee      	b.n	8004a6c <__libc_init_array+0xc>
 8004a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a92:	4798      	blx	r3
 8004a94:	3601      	adds	r6, #1
 8004a96:	e7f2      	b.n	8004a7e <__libc_init_array+0x1e>
 8004a98:	0800585c 	.word	0x0800585c
 8004a9c:	0800585c 	.word	0x0800585c
 8004aa0:	0800585c 	.word	0x0800585c
 8004aa4:	08005860 	.word	0x08005860

08004aa8 <memset>:
 8004aa8:	4402      	add	r2, r0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d100      	bne.n	8004ab2 <memset+0xa>
 8004ab0:	4770      	bx	lr
 8004ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab6:	e7f9      	b.n	8004aac <memset+0x4>

08004ab8 <sniprintf>:
 8004ab8:	b40c      	push	{r2, r3}
 8004aba:	b530      	push	{r4, r5, lr}
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <sniprintf+0x64>)
 8004abe:	1e0c      	subs	r4, r1, #0
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	b09d      	sub	sp, #116	; 0x74
 8004ac4:	da08      	bge.n	8004ad8 <sniprintf+0x20>
 8004ac6:	238b      	movs	r3, #139	; 0x8b
 8004ac8:	602b      	str	r3, [r5, #0]
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	b01d      	add	sp, #116	; 0x74
 8004ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ad4:	b002      	add	sp, #8
 8004ad6:	4770      	bx	lr
 8004ad8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004adc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ae0:	bf14      	ite	ne
 8004ae2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004ae6:	4623      	moveq	r3, r4
 8004ae8:	9304      	str	r3, [sp, #16]
 8004aea:	9307      	str	r3, [sp, #28]
 8004aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004af0:	9002      	str	r0, [sp, #8]
 8004af2:	9006      	str	r0, [sp, #24]
 8004af4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004af8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004afa:	ab21      	add	r3, sp, #132	; 0x84
 8004afc:	a902      	add	r1, sp, #8
 8004afe:	4628      	mov	r0, r5
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	f000 f875 	bl	8004bf0 <_svfiprintf_r>
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	bfbc      	itt	lt
 8004b0a:	238b      	movlt	r3, #139	; 0x8b
 8004b0c:	602b      	strlt	r3, [r5, #0]
 8004b0e:	2c00      	cmp	r4, #0
 8004b10:	d0dd      	beq.n	8004ace <sniprintf+0x16>
 8004b12:	9b02      	ldr	r3, [sp, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e7d9      	b.n	8004ace <sniprintf+0x16>
 8004b1a:	bf00      	nop
 8004b1c:	20000024 	.word	0x20000024

08004b20 <strchr>:
 8004b20:	b2c9      	uxtb	r1, r1
 8004b22:	4603      	mov	r3, r0
 8004b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b28:	b11a      	cbz	r2, 8004b32 <strchr+0x12>
 8004b2a:	428a      	cmp	r2, r1
 8004b2c:	d1f9      	bne.n	8004b22 <strchr+0x2>
 8004b2e:	4618      	mov	r0, r3
 8004b30:	4770      	bx	lr
 8004b32:	2900      	cmp	r1, #0
 8004b34:	bf18      	it	ne
 8004b36:	2300      	movne	r3, #0
 8004b38:	e7f9      	b.n	8004b2e <strchr+0xe>

08004b3a <__ssputs_r>:
 8004b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3e:	688e      	ldr	r6, [r1, #8]
 8004b40:	429e      	cmp	r6, r3
 8004b42:	4682      	mov	sl, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	4690      	mov	r8, r2
 8004b48:	461f      	mov	r7, r3
 8004b4a:	d838      	bhi.n	8004bbe <__ssputs_r+0x84>
 8004b4c:	898a      	ldrh	r2, [r1, #12]
 8004b4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b52:	d032      	beq.n	8004bba <__ssputs_r+0x80>
 8004b54:	6825      	ldr	r5, [r4, #0]
 8004b56:	6909      	ldr	r1, [r1, #16]
 8004b58:	eba5 0901 	sub.w	r9, r5, r1
 8004b5c:	6965      	ldr	r5, [r4, #20]
 8004b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b66:	3301      	adds	r3, #1
 8004b68:	444b      	add	r3, r9
 8004b6a:	106d      	asrs	r5, r5, #1
 8004b6c:	429d      	cmp	r5, r3
 8004b6e:	bf38      	it	cc
 8004b70:	461d      	movcc	r5, r3
 8004b72:	0553      	lsls	r3, r2, #21
 8004b74:	d531      	bpl.n	8004bda <__ssputs_r+0xa0>
 8004b76:	4629      	mov	r1, r5
 8004b78:	f000 fb62 	bl	8005240 <_malloc_r>
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	b950      	cbnz	r0, 8004b96 <__ssputs_r+0x5c>
 8004b80:	230c      	movs	r3, #12
 8004b82:	f8ca 3000 	str.w	r3, [sl]
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b96:	6921      	ldr	r1, [r4, #16]
 8004b98:	464a      	mov	r2, r9
 8004b9a:	f000 fabd 	bl	8005118 <memcpy>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	6126      	str	r6, [r4, #16]
 8004bac:	6165      	str	r5, [r4, #20]
 8004bae:	444e      	add	r6, r9
 8004bb0:	eba5 0509 	sub.w	r5, r5, r9
 8004bb4:	6026      	str	r6, [r4, #0]
 8004bb6:	60a5      	str	r5, [r4, #8]
 8004bb8:	463e      	mov	r6, r7
 8004bba:	42be      	cmp	r6, r7
 8004bbc:	d900      	bls.n	8004bc0 <__ssputs_r+0x86>
 8004bbe:	463e      	mov	r6, r7
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	f000 fab5 	bl	8005134 <memmove>
 8004bca:	68a3      	ldr	r3, [r4, #8]
 8004bcc:	1b9b      	subs	r3, r3, r6
 8004bce:	60a3      	str	r3, [r4, #8]
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	4433      	add	r3, r6
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	e7db      	b.n	8004b92 <__ssputs_r+0x58>
 8004bda:	462a      	mov	r2, r5
 8004bdc:	f000 fba4 	bl	8005328 <_realloc_r>
 8004be0:	4606      	mov	r6, r0
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d1e1      	bne.n	8004baa <__ssputs_r+0x70>
 8004be6:	6921      	ldr	r1, [r4, #16]
 8004be8:	4650      	mov	r0, sl
 8004bea:	f000 fabd 	bl	8005168 <_free_r>
 8004bee:	e7c7      	b.n	8004b80 <__ssputs_r+0x46>

08004bf0 <_svfiprintf_r>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	4698      	mov	r8, r3
 8004bf6:	898b      	ldrh	r3, [r1, #12]
 8004bf8:	061b      	lsls	r3, r3, #24
 8004bfa:	b09d      	sub	sp, #116	; 0x74
 8004bfc:	4607      	mov	r7, r0
 8004bfe:	460d      	mov	r5, r1
 8004c00:	4614      	mov	r4, r2
 8004c02:	d50e      	bpl.n	8004c22 <_svfiprintf_r+0x32>
 8004c04:	690b      	ldr	r3, [r1, #16]
 8004c06:	b963      	cbnz	r3, 8004c22 <_svfiprintf_r+0x32>
 8004c08:	2140      	movs	r1, #64	; 0x40
 8004c0a:	f000 fb19 	bl	8005240 <_malloc_r>
 8004c0e:	6028      	str	r0, [r5, #0]
 8004c10:	6128      	str	r0, [r5, #16]
 8004c12:	b920      	cbnz	r0, 8004c1e <_svfiprintf_r+0x2e>
 8004c14:	230c      	movs	r3, #12
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e0d1      	b.n	8004dc2 <_svfiprintf_r+0x1d2>
 8004c1e:	2340      	movs	r3, #64	; 0x40
 8004c20:	616b      	str	r3, [r5, #20]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9309      	str	r3, [sp, #36]	; 0x24
 8004c26:	2320      	movs	r3, #32
 8004c28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c30:	2330      	movs	r3, #48	; 0x30
 8004c32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ddc <_svfiprintf_r+0x1ec>
 8004c36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c3a:	f04f 0901 	mov.w	r9, #1
 8004c3e:	4623      	mov	r3, r4
 8004c40:	469a      	mov	sl, r3
 8004c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c46:	b10a      	cbz	r2, 8004c4c <_svfiprintf_r+0x5c>
 8004c48:	2a25      	cmp	r2, #37	; 0x25
 8004c4a:	d1f9      	bne.n	8004c40 <_svfiprintf_r+0x50>
 8004c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c50:	d00b      	beq.n	8004c6a <_svfiprintf_r+0x7a>
 8004c52:	465b      	mov	r3, fp
 8004c54:	4622      	mov	r2, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	4638      	mov	r0, r7
 8004c5a:	f7ff ff6e 	bl	8004b3a <__ssputs_r>
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f000 80aa 	beq.w	8004db8 <_svfiprintf_r+0x1c8>
 8004c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c66:	445a      	add	r2, fp
 8004c68:	9209      	str	r2, [sp, #36]	; 0x24
 8004c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80a2 	beq.w	8004db8 <_svfiprintf_r+0x1c8>
 8004c74:	2300      	movs	r3, #0
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c7e:	f10a 0a01 	add.w	sl, sl, #1
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	9307      	str	r3, [sp, #28]
 8004c86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c8c:	4654      	mov	r4, sl
 8004c8e:	2205      	movs	r2, #5
 8004c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c94:	4851      	ldr	r0, [pc, #324]	; (8004ddc <_svfiprintf_r+0x1ec>)
 8004c96:	f7fb faab 	bl	80001f0 <memchr>
 8004c9a:	9a04      	ldr	r2, [sp, #16]
 8004c9c:	b9d8      	cbnz	r0, 8004cd6 <_svfiprintf_r+0xe6>
 8004c9e:	06d0      	lsls	r0, r2, #27
 8004ca0:	bf44      	itt	mi
 8004ca2:	2320      	movmi	r3, #32
 8004ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca8:	0711      	lsls	r1, r2, #28
 8004caa:	bf44      	itt	mi
 8004cac:	232b      	movmi	r3, #43	; 0x2b
 8004cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb8:	d015      	beq.n	8004ce6 <_svfiprintf_r+0xf6>
 8004cba:	9a07      	ldr	r2, [sp, #28]
 8004cbc:	4654      	mov	r4, sl
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f04f 0c0a 	mov.w	ip, #10
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cca:	3b30      	subs	r3, #48	; 0x30
 8004ccc:	2b09      	cmp	r3, #9
 8004cce:	d94e      	bls.n	8004d6e <_svfiprintf_r+0x17e>
 8004cd0:	b1b0      	cbz	r0, 8004d00 <_svfiprintf_r+0x110>
 8004cd2:	9207      	str	r2, [sp, #28]
 8004cd4:	e014      	b.n	8004d00 <_svfiprintf_r+0x110>
 8004cd6:	eba0 0308 	sub.w	r3, r0, r8
 8004cda:	fa09 f303 	lsl.w	r3, r9, r3
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	46a2      	mov	sl, r4
 8004ce4:	e7d2      	b.n	8004c8c <_svfiprintf_r+0x9c>
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	1d19      	adds	r1, r3, #4
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	9103      	str	r1, [sp, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfbb      	ittet	lt
 8004cf2:	425b      	neglt	r3, r3
 8004cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8004cf8:	9307      	strge	r3, [sp, #28]
 8004cfa:	9307      	strlt	r3, [sp, #28]
 8004cfc:	bfb8      	it	lt
 8004cfe:	9204      	strlt	r2, [sp, #16]
 8004d00:	7823      	ldrb	r3, [r4, #0]
 8004d02:	2b2e      	cmp	r3, #46	; 0x2e
 8004d04:	d10c      	bne.n	8004d20 <_svfiprintf_r+0x130>
 8004d06:	7863      	ldrb	r3, [r4, #1]
 8004d08:	2b2a      	cmp	r3, #42	; 0x2a
 8004d0a:	d135      	bne.n	8004d78 <_svfiprintf_r+0x188>
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	9203      	str	r2, [sp, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bfb8      	it	lt
 8004d18:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d1c:	3402      	adds	r4, #2
 8004d1e:	9305      	str	r3, [sp, #20]
 8004d20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004dec <_svfiprintf_r+0x1fc>
 8004d24:	7821      	ldrb	r1, [r4, #0]
 8004d26:	2203      	movs	r2, #3
 8004d28:	4650      	mov	r0, sl
 8004d2a:	f7fb fa61 	bl	80001f0 <memchr>
 8004d2e:	b140      	cbz	r0, 8004d42 <_svfiprintf_r+0x152>
 8004d30:	2340      	movs	r3, #64	; 0x40
 8004d32:	eba0 000a 	sub.w	r0, r0, sl
 8004d36:	fa03 f000 	lsl.w	r0, r3, r0
 8004d3a:	9b04      	ldr	r3, [sp, #16]
 8004d3c:	4303      	orrs	r3, r0
 8004d3e:	3401      	adds	r4, #1
 8004d40:	9304      	str	r3, [sp, #16]
 8004d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d46:	4826      	ldr	r0, [pc, #152]	; (8004de0 <_svfiprintf_r+0x1f0>)
 8004d48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d4c:	2206      	movs	r2, #6
 8004d4e:	f7fb fa4f 	bl	80001f0 <memchr>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d038      	beq.n	8004dc8 <_svfiprintf_r+0x1d8>
 8004d56:	4b23      	ldr	r3, [pc, #140]	; (8004de4 <_svfiprintf_r+0x1f4>)
 8004d58:	bb1b      	cbnz	r3, 8004da2 <_svfiprintf_r+0x1b2>
 8004d5a:	9b03      	ldr	r3, [sp, #12]
 8004d5c:	3307      	adds	r3, #7
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
 8004d62:	3308      	adds	r3, #8
 8004d64:	9303      	str	r3, [sp, #12]
 8004d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d68:	4433      	add	r3, r6
 8004d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d6c:	e767      	b.n	8004c3e <_svfiprintf_r+0x4e>
 8004d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d72:	460c      	mov	r4, r1
 8004d74:	2001      	movs	r0, #1
 8004d76:	e7a5      	b.n	8004cc4 <_svfiprintf_r+0xd4>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	3401      	adds	r4, #1
 8004d7c:	9305      	str	r3, [sp, #20]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f04f 0c0a 	mov.w	ip, #10
 8004d84:	4620      	mov	r0, r4
 8004d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d8a:	3a30      	subs	r2, #48	; 0x30
 8004d8c:	2a09      	cmp	r2, #9
 8004d8e:	d903      	bls.n	8004d98 <_svfiprintf_r+0x1a8>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0c5      	beq.n	8004d20 <_svfiprintf_r+0x130>
 8004d94:	9105      	str	r1, [sp, #20]
 8004d96:	e7c3      	b.n	8004d20 <_svfiprintf_r+0x130>
 8004d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e7f0      	b.n	8004d84 <_svfiprintf_r+0x194>
 8004da2:	ab03      	add	r3, sp, #12
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	462a      	mov	r2, r5
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <_svfiprintf_r+0x1f8>)
 8004daa:	a904      	add	r1, sp, #16
 8004dac:	4638      	mov	r0, r7
 8004dae:	f3af 8000 	nop.w
 8004db2:	1c42      	adds	r2, r0, #1
 8004db4:	4606      	mov	r6, r0
 8004db6:	d1d6      	bne.n	8004d66 <_svfiprintf_r+0x176>
 8004db8:	89ab      	ldrh	r3, [r5, #12]
 8004dba:	065b      	lsls	r3, r3, #25
 8004dbc:	f53f af2c 	bmi.w	8004c18 <_svfiprintf_r+0x28>
 8004dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dc2:	b01d      	add	sp, #116	; 0x74
 8004dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc8:	ab03      	add	r3, sp, #12
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	462a      	mov	r2, r5
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <_svfiprintf_r+0x1f8>)
 8004dd0:	a904      	add	r1, sp, #16
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	f000 f87a 	bl	8004ecc <_printf_i>
 8004dd8:	e7eb      	b.n	8004db2 <_svfiprintf_r+0x1c2>
 8004dda:	bf00      	nop
 8004ddc:	08005821 	.word	0x08005821
 8004de0:	0800582b 	.word	0x0800582b
 8004de4:	00000000 	.word	0x00000000
 8004de8:	08004b3b 	.word	0x08004b3b
 8004dec:	08005827 	.word	0x08005827

08004df0 <_printf_common>:
 8004df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df4:	4616      	mov	r6, r2
 8004df6:	4699      	mov	r9, r3
 8004df8:	688a      	ldr	r2, [r1, #8]
 8004dfa:	690b      	ldr	r3, [r1, #16]
 8004dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	bfb8      	it	lt
 8004e04:	4613      	movlt	r3, r2
 8004e06:	6033      	str	r3, [r6, #0]
 8004e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	b10a      	cbz	r2, 8004e16 <_printf_common+0x26>
 8004e12:	3301      	adds	r3, #1
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	0699      	lsls	r1, r3, #26
 8004e1a:	bf42      	ittt	mi
 8004e1c:	6833      	ldrmi	r3, [r6, #0]
 8004e1e:	3302      	addmi	r3, #2
 8004e20:	6033      	strmi	r3, [r6, #0]
 8004e22:	6825      	ldr	r5, [r4, #0]
 8004e24:	f015 0506 	ands.w	r5, r5, #6
 8004e28:	d106      	bne.n	8004e38 <_printf_common+0x48>
 8004e2a:	f104 0a19 	add.w	sl, r4, #25
 8004e2e:	68e3      	ldr	r3, [r4, #12]
 8004e30:	6832      	ldr	r2, [r6, #0]
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	dc26      	bgt.n	8004e86 <_printf_common+0x96>
 8004e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e3c:	1e13      	subs	r3, r2, #0
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	bf18      	it	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	0692      	lsls	r2, r2, #26
 8004e46:	d42b      	bmi.n	8004ea0 <_printf_common+0xb0>
 8004e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	4638      	mov	r0, r7
 8004e50:	47c0      	blx	r8
 8004e52:	3001      	adds	r0, #1
 8004e54:	d01e      	beq.n	8004e94 <_printf_common+0xa4>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	68e5      	ldr	r5, [r4, #12]
 8004e5a:	6832      	ldr	r2, [r6, #0]
 8004e5c:	f003 0306 	and.w	r3, r3, #6
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	bf08      	it	eq
 8004e64:	1aad      	subeq	r5, r5, r2
 8004e66:	68a3      	ldr	r3, [r4, #8]
 8004e68:	6922      	ldr	r2, [r4, #16]
 8004e6a:	bf0c      	ite	eq
 8004e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e70:	2500      	movne	r5, #0
 8004e72:	4293      	cmp	r3, r2
 8004e74:	bfc4      	itt	gt
 8004e76:	1a9b      	subgt	r3, r3, r2
 8004e78:	18ed      	addgt	r5, r5, r3
 8004e7a:	2600      	movs	r6, #0
 8004e7c:	341a      	adds	r4, #26
 8004e7e:	42b5      	cmp	r5, r6
 8004e80:	d11a      	bne.n	8004eb8 <_printf_common+0xc8>
 8004e82:	2000      	movs	r0, #0
 8004e84:	e008      	b.n	8004e98 <_printf_common+0xa8>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4652      	mov	r2, sl
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	47c0      	blx	r8
 8004e90:	3001      	adds	r0, #1
 8004e92:	d103      	bne.n	8004e9c <_printf_common+0xac>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	e7c6      	b.n	8004e2e <_printf_common+0x3e>
 8004ea0:	18e1      	adds	r1, r4, r3
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	2030      	movs	r0, #48	; 0x30
 8004ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eaa:	4422      	add	r2, r4
 8004eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	e7c7      	b.n	8004e48 <_printf_common+0x58>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	4622      	mov	r2, r4
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	47c0      	blx	r8
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d0e6      	beq.n	8004e94 <_printf_common+0xa4>
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7d9      	b.n	8004e7e <_printf_common+0x8e>
	...

08004ecc <_printf_i>:
 8004ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	7e0f      	ldrb	r7, [r1, #24]
 8004ed2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ed4:	2f78      	cmp	r7, #120	; 0x78
 8004ed6:	4691      	mov	r9, r2
 8004ed8:	4680      	mov	r8, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	469a      	mov	sl, r3
 8004ede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ee2:	d807      	bhi.n	8004ef4 <_printf_i+0x28>
 8004ee4:	2f62      	cmp	r7, #98	; 0x62
 8004ee6:	d80a      	bhi.n	8004efe <_printf_i+0x32>
 8004ee8:	2f00      	cmp	r7, #0
 8004eea:	f000 80d8 	beq.w	800509e <_printf_i+0x1d2>
 8004eee:	2f58      	cmp	r7, #88	; 0x58
 8004ef0:	f000 80a3 	beq.w	800503a <_printf_i+0x16e>
 8004ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004efc:	e03a      	b.n	8004f74 <_printf_i+0xa8>
 8004efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f02:	2b15      	cmp	r3, #21
 8004f04:	d8f6      	bhi.n	8004ef4 <_printf_i+0x28>
 8004f06:	a101      	add	r1, pc, #4	; (adr r1, 8004f0c <_printf_i+0x40>)
 8004f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f79 	.word	0x08004f79
 8004f14:	08004ef5 	.word	0x08004ef5
 8004f18:	08004ef5 	.word	0x08004ef5
 8004f1c:	08004ef5 	.word	0x08004ef5
 8004f20:	08004ef5 	.word	0x08004ef5
 8004f24:	08004f79 	.word	0x08004f79
 8004f28:	08004ef5 	.word	0x08004ef5
 8004f2c:	08004ef5 	.word	0x08004ef5
 8004f30:	08004ef5 	.word	0x08004ef5
 8004f34:	08004ef5 	.word	0x08004ef5
 8004f38:	08005085 	.word	0x08005085
 8004f3c:	08004fa9 	.word	0x08004fa9
 8004f40:	08005067 	.word	0x08005067
 8004f44:	08004ef5 	.word	0x08004ef5
 8004f48:	08004ef5 	.word	0x08004ef5
 8004f4c:	080050a7 	.word	0x080050a7
 8004f50:	08004ef5 	.word	0x08004ef5
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004ef5 	.word	0x08004ef5
 8004f5c:	08004ef5 	.word	0x08004ef5
 8004f60:	0800506f 	.word	0x0800506f
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	602a      	str	r2, [r5, #0]
 8004f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0a3      	b.n	80050c0 <_printf_i+0x1f4>
 8004f78:	6820      	ldr	r0, [r4, #0]
 8004f7a:	6829      	ldr	r1, [r5, #0]
 8004f7c:	0606      	lsls	r6, r0, #24
 8004f7e:	f101 0304 	add.w	r3, r1, #4
 8004f82:	d50a      	bpl.n	8004f9a <_printf_i+0xce>
 8004f84:	680e      	ldr	r6, [r1, #0]
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	2e00      	cmp	r6, #0
 8004f8a:	da03      	bge.n	8004f94 <_printf_i+0xc8>
 8004f8c:	232d      	movs	r3, #45	; 0x2d
 8004f8e:	4276      	negs	r6, r6
 8004f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f94:	485e      	ldr	r0, [pc, #376]	; (8005110 <_printf_i+0x244>)
 8004f96:	230a      	movs	r3, #10
 8004f98:	e019      	b.n	8004fce <_printf_i+0x102>
 8004f9a:	680e      	ldr	r6, [r1, #0]
 8004f9c:	602b      	str	r3, [r5, #0]
 8004f9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fa2:	bf18      	it	ne
 8004fa4:	b236      	sxthne	r6, r6
 8004fa6:	e7ef      	b.n	8004f88 <_printf_i+0xbc>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	6820      	ldr	r0, [r4, #0]
 8004fac:	1d19      	adds	r1, r3, #4
 8004fae:	6029      	str	r1, [r5, #0]
 8004fb0:	0601      	lsls	r1, r0, #24
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_i+0xec>
 8004fb4:	681e      	ldr	r6, [r3, #0]
 8004fb6:	e002      	b.n	8004fbe <_printf_i+0xf2>
 8004fb8:	0646      	lsls	r6, r0, #25
 8004fba:	d5fb      	bpl.n	8004fb4 <_printf_i+0xe8>
 8004fbc:	881e      	ldrh	r6, [r3, #0]
 8004fbe:	4854      	ldr	r0, [pc, #336]	; (8005110 <_printf_i+0x244>)
 8004fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2308      	moveq	r3, #8
 8004fc6:	230a      	movne	r3, #10
 8004fc8:	2100      	movs	r1, #0
 8004fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fce:	6865      	ldr	r5, [r4, #4]
 8004fd0:	60a5      	str	r5, [r4, #8]
 8004fd2:	2d00      	cmp	r5, #0
 8004fd4:	bfa2      	ittt	ge
 8004fd6:	6821      	ldrge	r1, [r4, #0]
 8004fd8:	f021 0104 	bicge.w	r1, r1, #4
 8004fdc:	6021      	strge	r1, [r4, #0]
 8004fde:	b90e      	cbnz	r6, 8004fe4 <_printf_i+0x118>
 8004fe0:	2d00      	cmp	r5, #0
 8004fe2:	d04d      	beq.n	8005080 <_printf_i+0x1b4>
 8004fe4:	4615      	mov	r5, r2
 8004fe6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fea:	fb03 6711 	mls	r7, r3, r1, r6
 8004fee:	5dc7      	ldrb	r7, [r0, r7]
 8004ff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ff4:	4637      	mov	r7, r6
 8004ff6:	42bb      	cmp	r3, r7
 8004ff8:	460e      	mov	r6, r1
 8004ffa:	d9f4      	bls.n	8004fe6 <_printf_i+0x11a>
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d10b      	bne.n	8005018 <_printf_i+0x14c>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	07de      	lsls	r6, r3, #31
 8005004:	d508      	bpl.n	8005018 <_printf_i+0x14c>
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	6861      	ldr	r1, [r4, #4]
 800500a:	4299      	cmp	r1, r3
 800500c:	bfde      	ittt	le
 800500e:	2330      	movle	r3, #48	; 0x30
 8005010:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005014:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005018:	1b52      	subs	r2, r2, r5
 800501a:	6122      	str	r2, [r4, #16]
 800501c:	f8cd a000 	str.w	sl, [sp]
 8005020:	464b      	mov	r3, r9
 8005022:	aa03      	add	r2, sp, #12
 8005024:	4621      	mov	r1, r4
 8005026:	4640      	mov	r0, r8
 8005028:	f7ff fee2 	bl	8004df0 <_printf_common>
 800502c:	3001      	adds	r0, #1
 800502e:	d14c      	bne.n	80050ca <_printf_i+0x1fe>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	b004      	add	sp, #16
 8005036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503a:	4835      	ldr	r0, [pc, #212]	; (8005110 <_printf_i+0x244>)
 800503c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005040:	6829      	ldr	r1, [r5, #0]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	f851 6b04 	ldr.w	r6, [r1], #4
 8005048:	6029      	str	r1, [r5, #0]
 800504a:	061d      	lsls	r5, r3, #24
 800504c:	d514      	bpl.n	8005078 <_printf_i+0x1ac>
 800504e:	07df      	lsls	r7, r3, #31
 8005050:	bf44      	itt	mi
 8005052:	f043 0320 	orrmi.w	r3, r3, #32
 8005056:	6023      	strmi	r3, [r4, #0]
 8005058:	b91e      	cbnz	r6, 8005062 <_printf_i+0x196>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	f023 0320 	bic.w	r3, r3, #32
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	2310      	movs	r3, #16
 8005064:	e7b0      	b.n	8004fc8 <_printf_i+0xfc>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	f043 0320 	orr.w	r3, r3, #32
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	2378      	movs	r3, #120	; 0x78
 8005070:	4828      	ldr	r0, [pc, #160]	; (8005114 <_printf_i+0x248>)
 8005072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005076:	e7e3      	b.n	8005040 <_printf_i+0x174>
 8005078:	0659      	lsls	r1, r3, #25
 800507a:	bf48      	it	mi
 800507c:	b2b6      	uxthmi	r6, r6
 800507e:	e7e6      	b.n	800504e <_printf_i+0x182>
 8005080:	4615      	mov	r5, r2
 8005082:	e7bb      	b.n	8004ffc <_printf_i+0x130>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	6826      	ldr	r6, [r4, #0]
 8005088:	6961      	ldr	r1, [r4, #20]
 800508a:	1d18      	adds	r0, r3, #4
 800508c:	6028      	str	r0, [r5, #0]
 800508e:	0635      	lsls	r5, r6, #24
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	d501      	bpl.n	8005098 <_printf_i+0x1cc>
 8005094:	6019      	str	r1, [r3, #0]
 8005096:	e002      	b.n	800509e <_printf_i+0x1d2>
 8005098:	0670      	lsls	r0, r6, #25
 800509a:	d5fb      	bpl.n	8005094 <_printf_i+0x1c8>
 800509c:	8019      	strh	r1, [r3, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	6123      	str	r3, [r4, #16]
 80050a2:	4615      	mov	r5, r2
 80050a4:	e7ba      	b.n	800501c <_printf_i+0x150>
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	1d1a      	adds	r2, r3, #4
 80050aa:	602a      	str	r2, [r5, #0]
 80050ac:	681d      	ldr	r5, [r3, #0]
 80050ae:	6862      	ldr	r2, [r4, #4]
 80050b0:	2100      	movs	r1, #0
 80050b2:	4628      	mov	r0, r5
 80050b4:	f7fb f89c 	bl	80001f0 <memchr>
 80050b8:	b108      	cbz	r0, 80050be <_printf_i+0x1f2>
 80050ba:	1b40      	subs	r0, r0, r5
 80050bc:	6060      	str	r0, [r4, #4]
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	6123      	str	r3, [r4, #16]
 80050c2:	2300      	movs	r3, #0
 80050c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c8:	e7a8      	b.n	800501c <_printf_i+0x150>
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	462a      	mov	r2, r5
 80050ce:	4649      	mov	r1, r9
 80050d0:	4640      	mov	r0, r8
 80050d2:	47d0      	blx	sl
 80050d4:	3001      	adds	r0, #1
 80050d6:	d0ab      	beq.n	8005030 <_printf_i+0x164>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	079b      	lsls	r3, r3, #30
 80050dc:	d413      	bmi.n	8005106 <_printf_i+0x23a>
 80050de:	68e0      	ldr	r0, [r4, #12]
 80050e0:	9b03      	ldr	r3, [sp, #12]
 80050e2:	4298      	cmp	r0, r3
 80050e4:	bfb8      	it	lt
 80050e6:	4618      	movlt	r0, r3
 80050e8:	e7a4      	b.n	8005034 <_printf_i+0x168>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4632      	mov	r2, r6
 80050ee:	4649      	mov	r1, r9
 80050f0:	4640      	mov	r0, r8
 80050f2:	47d0      	blx	sl
 80050f4:	3001      	adds	r0, #1
 80050f6:	d09b      	beq.n	8005030 <_printf_i+0x164>
 80050f8:	3501      	adds	r5, #1
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	9903      	ldr	r1, [sp, #12]
 80050fe:	1a5b      	subs	r3, r3, r1
 8005100:	42ab      	cmp	r3, r5
 8005102:	dcf2      	bgt.n	80050ea <_printf_i+0x21e>
 8005104:	e7eb      	b.n	80050de <_printf_i+0x212>
 8005106:	2500      	movs	r5, #0
 8005108:	f104 0619 	add.w	r6, r4, #25
 800510c:	e7f5      	b.n	80050fa <_printf_i+0x22e>
 800510e:	bf00      	nop
 8005110:	08005832 	.word	0x08005832
 8005114:	08005843 	.word	0x08005843

08005118 <memcpy>:
 8005118:	440a      	add	r2, r1
 800511a:	4291      	cmp	r1, r2
 800511c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005120:	d100      	bne.n	8005124 <memcpy+0xc>
 8005122:	4770      	bx	lr
 8005124:	b510      	push	{r4, lr}
 8005126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800512a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800512e:	4291      	cmp	r1, r2
 8005130:	d1f9      	bne.n	8005126 <memcpy+0xe>
 8005132:	bd10      	pop	{r4, pc}

08005134 <memmove>:
 8005134:	4288      	cmp	r0, r1
 8005136:	b510      	push	{r4, lr}
 8005138:	eb01 0402 	add.w	r4, r1, r2
 800513c:	d902      	bls.n	8005144 <memmove+0x10>
 800513e:	4284      	cmp	r4, r0
 8005140:	4623      	mov	r3, r4
 8005142:	d807      	bhi.n	8005154 <memmove+0x20>
 8005144:	1e43      	subs	r3, r0, #1
 8005146:	42a1      	cmp	r1, r4
 8005148:	d008      	beq.n	800515c <memmove+0x28>
 800514a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800514e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005152:	e7f8      	b.n	8005146 <memmove+0x12>
 8005154:	4402      	add	r2, r0
 8005156:	4601      	mov	r1, r0
 8005158:	428a      	cmp	r2, r1
 800515a:	d100      	bne.n	800515e <memmove+0x2a>
 800515c:	bd10      	pop	{r4, pc}
 800515e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005166:	e7f7      	b.n	8005158 <memmove+0x24>

08005168 <_free_r>:
 8005168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800516a:	2900      	cmp	r1, #0
 800516c:	d044      	beq.n	80051f8 <_free_r+0x90>
 800516e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005172:	9001      	str	r0, [sp, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f1a1 0404 	sub.w	r4, r1, #4
 800517a:	bfb8      	it	lt
 800517c:	18e4      	addlt	r4, r4, r3
 800517e:	f000 f913 	bl	80053a8 <__malloc_lock>
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <_free_r+0x94>)
 8005184:	9801      	ldr	r0, [sp, #4]
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	b933      	cbnz	r3, 8005198 <_free_r+0x30>
 800518a:	6063      	str	r3, [r4, #4]
 800518c:	6014      	str	r4, [r2, #0]
 800518e:	b003      	add	sp, #12
 8005190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005194:	f000 b90e 	b.w	80053b4 <__malloc_unlock>
 8005198:	42a3      	cmp	r3, r4
 800519a:	d908      	bls.n	80051ae <_free_r+0x46>
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	428b      	cmp	r3, r1
 80051a2:	bf01      	itttt	eq
 80051a4:	6819      	ldreq	r1, [r3, #0]
 80051a6:	685b      	ldreq	r3, [r3, #4]
 80051a8:	1949      	addeq	r1, r1, r5
 80051aa:	6021      	streq	r1, [r4, #0]
 80051ac:	e7ed      	b.n	800518a <_free_r+0x22>
 80051ae:	461a      	mov	r2, r3
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	b10b      	cbz	r3, 80051b8 <_free_r+0x50>
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	d9fa      	bls.n	80051ae <_free_r+0x46>
 80051b8:	6811      	ldr	r1, [r2, #0]
 80051ba:	1855      	adds	r5, r2, r1
 80051bc:	42a5      	cmp	r5, r4
 80051be:	d10b      	bne.n	80051d8 <_free_r+0x70>
 80051c0:	6824      	ldr	r4, [r4, #0]
 80051c2:	4421      	add	r1, r4
 80051c4:	1854      	adds	r4, r2, r1
 80051c6:	42a3      	cmp	r3, r4
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	d1e0      	bne.n	800518e <_free_r+0x26>
 80051cc:	681c      	ldr	r4, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	6053      	str	r3, [r2, #4]
 80051d2:	4421      	add	r1, r4
 80051d4:	6011      	str	r1, [r2, #0]
 80051d6:	e7da      	b.n	800518e <_free_r+0x26>
 80051d8:	d902      	bls.n	80051e0 <_free_r+0x78>
 80051da:	230c      	movs	r3, #12
 80051dc:	6003      	str	r3, [r0, #0]
 80051de:	e7d6      	b.n	800518e <_free_r+0x26>
 80051e0:	6825      	ldr	r5, [r4, #0]
 80051e2:	1961      	adds	r1, r4, r5
 80051e4:	428b      	cmp	r3, r1
 80051e6:	bf04      	itt	eq
 80051e8:	6819      	ldreq	r1, [r3, #0]
 80051ea:	685b      	ldreq	r3, [r3, #4]
 80051ec:	6063      	str	r3, [r4, #4]
 80051ee:	bf04      	itt	eq
 80051f0:	1949      	addeq	r1, r1, r5
 80051f2:	6021      	streq	r1, [r4, #0]
 80051f4:	6054      	str	r4, [r2, #4]
 80051f6:	e7ca      	b.n	800518e <_free_r+0x26>
 80051f8:	b003      	add	sp, #12
 80051fa:	bd30      	pop	{r4, r5, pc}
 80051fc:	20001c5c 	.word	0x20001c5c

08005200 <sbrk_aligned>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4e0e      	ldr	r6, [pc, #56]	; (800523c <sbrk_aligned+0x3c>)
 8005204:	460c      	mov	r4, r1
 8005206:	6831      	ldr	r1, [r6, #0]
 8005208:	4605      	mov	r5, r0
 800520a:	b911      	cbnz	r1, 8005212 <sbrk_aligned+0x12>
 800520c:	f000 f8bc 	bl	8005388 <_sbrk_r>
 8005210:	6030      	str	r0, [r6, #0]
 8005212:	4621      	mov	r1, r4
 8005214:	4628      	mov	r0, r5
 8005216:	f000 f8b7 	bl	8005388 <_sbrk_r>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d00a      	beq.n	8005234 <sbrk_aligned+0x34>
 800521e:	1cc4      	adds	r4, r0, #3
 8005220:	f024 0403 	bic.w	r4, r4, #3
 8005224:	42a0      	cmp	r0, r4
 8005226:	d007      	beq.n	8005238 <sbrk_aligned+0x38>
 8005228:	1a21      	subs	r1, r4, r0
 800522a:	4628      	mov	r0, r5
 800522c:	f000 f8ac 	bl	8005388 <_sbrk_r>
 8005230:	3001      	adds	r0, #1
 8005232:	d101      	bne.n	8005238 <sbrk_aligned+0x38>
 8005234:	f04f 34ff 	mov.w	r4, #4294967295
 8005238:	4620      	mov	r0, r4
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	20001c60 	.word	0x20001c60

08005240 <_malloc_r>:
 8005240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005244:	1ccd      	adds	r5, r1, #3
 8005246:	f025 0503 	bic.w	r5, r5, #3
 800524a:	3508      	adds	r5, #8
 800524c:	2d0c      	cmp	r5, #12
 800524e:	bf38      	it	cc
 8005250:	250c      	movcc	r5, #12
 8005252:	2d00      	cmp	r5, #0
 8005254:	4607      	mov	r7, r0
 8005256:	db01      	blt.n	800525c <_malloc_r+0x1c>
 8005258:	42a9      	cmp	r1, r5
 800525a:	d905      	bls.n	8005268 <_malloc_r+0x28>
 800525c:	230c      	movs	r3, #12
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	2600      	movs	r6, #0
 8005262:	4630      	mov	r0, r6
 8005264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005268:	4e2e      	ldr	r6, [pc, #184]	; (8005324 <_malloc_r+0xe4>)
 800526a:	f000 f89d 	bl	80053a8 <__malloc_lock>
 800526e:	6833      	ldr	r3, [r6, #0]
 8005270:	461c      	mov	r4, r3
 8005272:	bb34      	cbnz	r4, 80052c2 <_malloc_r+0x82>
 8005274:	4629      	mov	r1, r5
 8005276:	4638      	mov	r0, r7
 8005278:	f7ff ffc2 	bl	8005200 <sbrk_aligned>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	4604      	mov	r4, r0
 8005280:	d14d      	bne.n	800531e <_malloc_r+0xde>
 8005282:	6834      	ldr	r4, [r6, #0]
 8005284:	4626      	mov	r6, r4
 8005286:	2e00      	cmp	r6, #0
 8005288:	d140      	bne.n	800530c <_malloc_r+0xcc>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	4631      	mov	r1, r6
 800528e:	4638      	mov	r0, r7
 8005290:	eb04 0803 	add.w	r8, r4, r3
 8005294:	f000 f878 	bl	8005388 <_sbrk_r>
 8005298:	4580      	cmp	r8, r0
 800529a:	d13a      	bne.n	8005312 <_malloc_r+0xd2>
 800529c:	6821      	ldr	r1, [r4, #0]
 800529e:	3503      	adds	r5, #3
 80052a0:	1a6d      	subs	r5, r5, r1
 80052a2:	f025 0503 	bic.w	r5, r5, #3
 80052a6:	3508      	adds	r5, #8
 80052a8:	2d0c      	cmp	r5, #12
 80052aa:	bf38      	it	cc
 80052ac:	250c      	movcc	r5, #12
 80052ae:	4629      	mov	r1, r5
 80052b0:	4638      	mov	r0, r7
 80052b2:	f7ff ffa5 	bl	8005200 <sbrk_aligned>
 80052b6:	3001      	adds	r0, #1
 80052b8:	d02b      	beq.n	8005312 <_malloc_r+0xd2>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	442b      	add	r3, r5
 80052be:	6023      	str	r3, [r4, #0]
 80052c0:	e00e      	b.n	80052e0 <_malloc_r+0xa0>
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	1b52      	subs	r2, r2, r5
 80052c6:	d41e      	bmi.n	8005306 <_malloc_r+0xc6>
 80052c8:	2a0b      	cmp	r2, #11
 80052ca:	d916      	bls.n	80052fa <_malloc_r+0xba>
 80052cc:	1961      	adds	r1, r4, r5
 80052ce:	42a3      	cmp	r3, r4
 80052d0:	6025      	str	r5, [r4, #0]
 80052d2:	bf18      	it	ne
 80052d4:	6059      	strne	r1, [r3, #4]
 80052d6:	6863      	ldr	r3, [r4, #4]
 80052d8:	bf08      	it	eq
 80052da:	6031      	streq	r1, [r6, #0]
 80052dc:	5162      	str	r2, [r4, r5]
 80052de:	604b      	str	r3, [r1, #4]
 80052e0:	4638      	mov	r0, r7
 80052e2:	f104 060b 	add.w	r6, r4, #11
 80052e6:	f000 f865 	bl	80053b4 <__malloc_unlock>
 80052ea:	f026 0607 	bic.w	r6, r6, #7
 80052ee:	1d23      	adds	r3, r4, #4
 80052f0:	1af2      	subs	r2, r6, r3
 80052f2:	d0b6      	beq.n	8005262 <_malloc_r+0x22>
 80052f4:	1b9b      	subs	r3, r3, r6
 80052f6:	50a3      	str	r3, [r4, r2]
 80052f8:	e7b3      	b.n	8005262 <_malloc_r+0x22>
 80052fa:	6862      	ldr	r2, [r4, #4]
 80052fc:	42a3      	cmp	r3, r4
 80052fe:	bf0c      	ite	eq
 8005300:	6032      	streq	r2, [r6, #0]
 8005302:	605a      	strne	r2, [r3, #4]
 8005304:	e7ec      	b.n	80052e0 <_malloc_r+0xa0>
 8005306:	4623      	mov	r3, r4
 8005308:	6864      	ldr	r4, [r4, #4]
 800530a:	e7b2      	b.n	8005272 <_malloc_r+0x32>
 800530c:	4634      	mov	r4, r6
 800530e:	6876      	ldr	r6, [r6, #4]
 8005310:	e7b9      	b.n	8005286 <_malloc_r+0x46>
 8005312:	230c      	movs	r3, #12
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4638      	mov	r0, r7
 8005318:	f000 f84c 	bl	80053b4 <__malloc_unlock>
 800531c:	e7a1      	b.n	8005262 <_malloc_r+0x22>
 800531e:	6025      	str	r5, [r4, #0]
 8005320:	e7de      	b.n	80052e0 <_malloc_r+0xa0>
 8005322:	bf00      	nop
 8005324:	20001c5c 	.word	0x20001c5c

08005328 <_realloc_r>:
 8005328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800532c:	4680      	mov	r8, r0
 800532e:	4614      	mov	r4, r2
 8005330:	460e      	mov	r6, r1
 8005332:	b921      	cbnz	r1, 800533e <_realloc_r+0x16>
 8005334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005338:	4611      	mov	r1, r2
 800533a:	f7ff bf81 	b.w	8005240 <_malloc_r>
 800533e:	b92a      	cbnz	r2, 800534c <_realloc_r+0x24>
 8005340:	f7ff ff12 	bl	8005168 <_free_r>
 8005344:	4625      	mov	r5, r4
 8005346:	4628      	mov	r0, r5
 8005348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800534c:	f000 f838 	bl	80053c0 <_malloc_usable_size_r>
 8005350:	4284      	cmp	r4, r0
 8005352:	4607      	mov	r7, r0
 8005354:	d802      	bhi.n	800535c <_realloc_r+0x34>
 8005356:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800535a:	d812      	bhi.n	8005382 <_realloc_r+0x5a>
 800535c:	4621      	mov	r1, r4
 800535e:	4640      	mov	r0, r8
 8005360:	f7ff ff6e 	bl	8005240 <_malloc_r>
 8005364:	4605      	mov	r5, r0
 8005366:	2800      	cmp	r0, #0
 8005368:	d0ed      	beq.n	8005346 <_realloc_r+0x1e>
 800536a:	42bc      	cmp	r4, r7
 800536c:	4622      	mov	r2, r4
 800536e:	4631      	mov	r1, r6
 8005370:	bf28      	it	cs
 8005372:	463a      	movcs	r2, r7
 8005374:	f7ff fed0 	bl	8005118 <memcpy>
 8005378:	4631      	mov	r1, r6
 800537a:	4640      	mov	r0, r8
 800537c:	f7ff fef4 	bl	8005168 <_free_r>
 8005380:	e7e1      	b.n	8005346 <_realloc_r+0x1e>
 8005382:	4635      	mov	r5, r6
 8005384:	e7df      	b.n	8005346 <_realloc_r+0x1e>
	...

08005388 <_sbrk_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d06      	ldr	r5, [pc, #24]	; (80053a4 <_sbrk_r+0x1c>)
 800538c:	2300      	movs	r3, #0
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fb ffd0 	bl	8001338 <_sbrk>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_sbrk_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_sbrk_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	20001c64 	.word	0x20001c64

080053a8 <__malloc_lock>:
 80053a8:	4801      	ldr	r0, [pc, #4]	; (80053b0 <__malloc_lock+0x8>)
 80053aa:	f000 b811 	b.w	80053d0 <__retarget_lock_acquire_recursive>
 80053ae:	bf00      	nop
 80053b0:	20001c68 	.word	0x20001c68

080053b4 <__malloc_unlock>:
 80053b4:	4801      	ldr	r0, [pc, #4]	; (80053bc <__malloc_unlock+0x8>)
 80053b6:	f000 b80c 	b.w	80053d2 <__retarget_lock_release_recursive>
 80053ba:	bf00      	nop
 80053bc:	20001c68 	.word	0x20001c68

080053c0 <_malloc_usable_size_r>:
 80053c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c4:	1f18      	subs	r0, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bfbc      	itt	lt
 80053ca:	580b      	ldrlt	r3, [r1, r0]
 80053cc:	18c0      	addlt	r0, r0, r3
 80053ce:	4770      	bx	lr

080053d0 <__retarget_lock_acquire_recursive>:
 80053d0:	4770      	bx	lr

080053d2 <__retarget_lock_release_recursive>:
 80053d2:	4770      	bx	lr

080053d4 <_init>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr

080053e0 <_fini>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr
