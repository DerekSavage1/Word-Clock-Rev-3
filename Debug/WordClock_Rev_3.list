
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a14  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005bb4  08005bb4  00006bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005dac  08005dac  00006dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db4  08005db4  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db4  08005db4  00006db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005dbc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000070  08005e2c  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200005c8  08005e2c  000075c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d32c  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255f  00000000  00000000  000143cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00016930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fd  00000000  00000000  00017640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018235  00000000  00000000  0001803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe21  00000000  00000000  00030272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000943be  00000000  00000000  00040093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e88  00000000  00000000  000d4494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d831c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b9c 	.word	0x08005b9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005b9c 	.word	0x08005b9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 fb9c 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f80e 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f990 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000580:	f000 f96e 	bl	8000860 <MX_DMA_Init>
  MX_TIM1_Init();
 8000584:	f000 f8cc 	bl	8000720 <MX_TIM1_Init>
  MX_RTC_Init();
 8000588:	f000 f870 	bl	800066c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  visInit();
 800058c:	f000 fdbc 	bl	8001108 <visInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  visHandle();
 8000590:	f000 fdfa 	bl	8001188 <visHandle>
 8000594:	e7fc      	b.n	8000590 <main+0x20>
	...

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fc5d 	bl	8004e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005f4:	230a      	movs	r3, #10
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000610:	2348      	movs	r3, #72	@ 0x48
 8000612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fab7 	bl	8002b94 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 f9d4 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2102      	movs	r1, #2
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fd19 	bl	8003084 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000658:	f000 f9be 	bl	80009d8 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	@ 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000684:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_RTC_Init+0xac>)
 8000686:	4a25      	ldr	r2, [pc, #148]	@ (800071c <MX_RTC_Init+0xb0>)
 8000688:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <MX_RTC_Init+0xac>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_RTC_Init+0xac>)
 8000692:	227f      	movs	r2, #127	@ 0x7f
 8000694:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <MX_RTC_Init+0xac>)
 8000698:	22ff      	movs	r2, #255	@ 0xff
 800069a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800069c:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_RTC_Init+0xac>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_RTC_Init+0xac>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_RTC_Init+0xac>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_RTC_Init+0xac>)
 80006b0:	f002 ff84 	bl	80035bc <HAL_RTC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 f98d 	bl	80009d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 80006c2:	230f      	movs	r3, #15
 80006c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 80006c6:	2332      	movs	r3, #50	@ 0x32
 80006c8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	4619      	mov	r1, r3
 80006d8:	480f      	ldr	r0, [pc, #60]	@ (8000718 <MX_RTC_Init+0xac>)
 80006da:	f002 fff2 	bl	80036c2 <HAL_RTC_SetTime>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80006e4:	f000 f978 	bl	80009d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80006e8:	2302      	movs	r3, #2
 80006ea:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006ec:	2301      	movs	r3, #1
 80006ee:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 80006f0:	2317      	movs	r3, #23
 80006f2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 80006f4:	2318      	movs	r3, #24
 80006f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <MX_RTC_Init+0xac>)
 8000700:	f003 f879 	bl	80037f6 <HAL_RTC_SetDate>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800070a:	f000 f965 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000a8 	.word	0x200000a8
 800071c:	40002800 	.word	0x40002800

08000720 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b096      	sub	sp, #88	@ 0x58
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2220      	movs	r2, #32
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f004 fb84 	bl	8004e66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800075e:	4b3e      	ldr	r3, [pc, #248]	@ (8000858 <MX_TIM1_Init+0x138>)
 8000760:	4a3e      	ldr	r2, [pc, #248]	@ (800085c <MX_TIM1_Init+0x13c>)
 8000762:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000764:	4b3c      	ldr	r3, [pc, #240]	@ (8000858 <MX_TIM1_Init+0x138>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b3b      	ldr	r3, [pc, #236]	@ (8000858 <MX_TIM1_Init+0x138>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000770:	4b39      	ldr	r3, [pc, #228]	@ (8000858 <MX_TIM1_Init+0x138>)
 8000772:	2259      	movs	r2, #89	@ 0x59
 8000774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b38      	ldr	r3, [pc, #224]	@ (8000858 <MX_TIM1_Init+0x138>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077c:	4b36      	ldr	r3, [pc, #216]	@ (8000858 <MX_TIM1_Init+0x138>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b35      	ldr	r3, [pc, #212]	@ (8000858 <MX_TIM1_Init+0x138>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000788:	4833      	ldr	r0, [pc, #204]	@ (8000858 <MX_TIM1_Init+0x138>)
 800078a:	f003 f959 	bl	8003a40 <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000794:	f000 f920 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007a2:	4619      	mov	r1, r3
 80007a4:	482c      	ldr	r0, [pc, #176]	@ (8000858 <MX_TIM1_Init+0x138>)
 80007a6:	f003 fd77 	bl	8004298 <HAL_TIM_ConfigClockSource>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007b0:	f000 f912 	bl	80009d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007b4:	4828      	ldr	r0, [pc, #160]	@ (8000858 <MX_TIM1_Init+0x138>)
 80007b6:	f003 f9ed 	bl	8003b94 <HAL_TIM_PWM_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007c0:	f000 f90a 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d0:	4619      	mov	r1, r3
 80007d2:	4821      	ldr	r0, [pc, #132]	@ (8000858 <MX_TIM1_Init+0x138>)
 80007d4:	f004 f91e 	bl	8004a14 <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80007de:	f000 f8fb 	bl	80009d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e2:	2360      	movs	r3, #96	@ 0x60
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	4814      	ldr	r0, [pc, #80]	@ (8000858 <MX_TIM1_Init+0x138>)
 8000808:	f003 fc84 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000812:	f000 f8e1 	bl	80009d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800082a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	@ (8000858 <MX_TIM1_Init+0x138>)
 800083a:	f004 f959 	bl	8004af0 <HAL_TIMEx_ConfigBreakDeadTime>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000844:	f000 f8c8 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <MX_TIM1_Init+0x138>)
 800084a:	f000 f973 	bl	8000b34 <HAL_TIM_MspPostInit>

}
 800084e:	bf00      	nop
 8000850:	3758      	adds	r7, #88	@ 0x58
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000c8 	.word	0x200000c8
 800085c:	40010000 	.word	0x40010000

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_DMA_Init+0x3c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <MX_DMA_Init+0x3c>)
 8000870:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_DMA_Init+0x3c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2039      	movs	r0, #57	@ 0x39
 8000888:	f001 fb5f 	bl	8001f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800088c:	2039      	movs	r0, #57	@ 0x39
 800088e:	f001 fb78 	bl	8001f82 <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b44      	ldr	r3, [pc, #272]	@ (80009cc <MX_GPIO_Init+0x12c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a43      	ldr	r2, [pc, #268]	@ (80009cc <MX_GPIO_Init+0x12c>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b41      	ldr	r3, [pc, #260]	@ (80009cc <MX_GPIO_Init+0x12c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b3d      	ldr	r3, [pc, #244]	@ (80009cc <MX_GPIO_Init+0x12c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a3c      	ldr	r2, [pc, #240]	@ (80009cc <MX_GPIO_Init+0x12c>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b3a      	ldr	r3, [pc, #232]	@ (80009cc <MX_GPIO_Init+0x12c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <MX_GPIO_Init+0x12c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a35      	ldr	r2, [pc, #212]	@ (80009cc <MX_GPIO_Init+0x12c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b33      	ldr	r3, [pc, #204]	@ (80009cc <MX_GPIO_Init+0x12c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b2f      	ldr	r3, [pc, #188]	@ (80009cc <MX_GPIO_Init+0x12c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a2e      	ldr	r2, [pc, #184]	@ (80009cc <MX_GPIO_Init+0x12c>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b2c      	ldr	r3, [pc, #176]	@ (80009cc <MX_GPIO_Init+0x12c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8000926:	2200      	movs	r2, #0
 8000928:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 800092c:	4828      	ldr	r0, [pc, #160]	@ (80009d0 <MX_GPIO_Init+0x130>)
 800092e:	f002 f8f3 	bl	8002b18 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8000932:	2200      	movs	r2, #0
 8000934:	f241 4107 	movw	r1, #5127	@ 0x1407
 8000938:	4826      	ldr	r0, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0x134>)
 800093a:	f002 f8ed 	bl	8002b18 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800093e:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8000942:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	481e      	ldr	r0, [pc, #120]	@ (80009d0 <MX_GPIO_Init+0x130>)
 8000958:	f001 ff5a 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 800095c:	f241 4307 	movw	r3, #5127	@ 0x1407
 8000960:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4817      	ldr	r0, [pc, #92]	@ (80009d4 <MX_GPIO_Init+0x134>)
 8000976:	f001 ff4b 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_CH_A_Pin ENC_CH_B_Pin */
  GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CH_B_Pin;
 800097a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000980:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000986:	2301      	movs	r3, #1
 8000988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4810      	ldr	r0, [pc, #64]	@ (80009d4 <MX_GPIO_Init+0x134>)
 8000992:	f001 ff3d 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80009ae:	f001 ff2f 	bl	8002810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2028      	movs	r0, #40	@ 0x28
 80009b8:	f001 fac7 	bl	8001f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009bc:	2028      	movs	r0, #40	@ 0x28
 80009be:	f001 fae0 	bl	8001f82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	@ 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0c      	ldr	r2, [pc, #48]	@ (8000a84 <HAL_RTC_MspInit+0x50>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d111      	bne.n	8000a7c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a60:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fcb8 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a72:	f7ff ffb1 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a76:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <HAL_RTC_MspInit+0x54>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40002800 	.word	0x40002800
 8000a88:	42470e3c 	.word	0x42470e3c

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a22      	ldr	r2, [pc, #136]	@ (8000b24 <HAL_TIM_Base_MspInit+0x98>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d13d      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <HAL_TIM_Base_MspInit+0x9c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a20      	ldr	r2, [pc, #128]	@ (8000b28 <HAL_TIM_Base_MspInit+0x9c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <HAL_TIM_Base_MspInit+0x9c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000abc:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <HAL_TIM_Base_MspInit+0xa4>)
 8000abe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ac2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000ac6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000aca:	2240      	movs	r2, #64	@ 0x40
 8000acc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ad6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ada:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ae6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000afe:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000b00:	f001 fa5a 	bl	8001fb8 <HAL_DMA_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000b0a:	f7ff ff65 	bl	80009d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000b12:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b14:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010000 	.word	0x40010000
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	20000110 	.word	0x20000110
 8000b30:	40026428 	.word	0x40026428

08000b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <HAL_TIM_MspPostInit+0x68>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d11e      	bne.n	8000b94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_TIM_MspPostInit+0x70>)
 8000b90:	f001 fe3e 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f001 f8a9 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_CH_A_Pin);
 8000c0a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c0e:	f001 ff9d 	bl	8002b4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_CH_B_Pin);
 8000c12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c16:	f001 ff99 	bl	8002b4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000c1a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c1e:	f001 ff95 	bl	8002b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <DMA2_Stream1_IRQHandler+0x10>)
 8000c2e:	f001 fb85 	bl	800233c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000110 	.word	0x20000110

08000c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return 1;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_kill>:

int _kill(int pid, int sig)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c56:	f004 f955 	bl	8004f04 <__errno>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2216      	movs	r2, #22
 8000c5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_exit>:

void _exit (int status)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ffe7 	bl	8000c4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c7e:	bf00      	nop
 8000c80:	e7fd      	b.n	8000c7e <_exit+0x12>

08000c82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e00a      	b.n	8000caa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c94:	f3af 8000 	nop.w
 8000c98:	4601      	mov	r1, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	60ba      	str	r2, [r7, #8]
 8000ca0:	b2ca      	uxtb	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbf0      	blt.n	8000c94 <_read+0x12>
  }

  return len;
 8000cb2:	687b      	ldr	r3, [r7, #4]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e009      	b.n	8000ce2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbf1      	blt.n	8000cce <_write+0x12>
  }
  return len;
 8000cea:	687b      	ldr	r3, [r7, #4]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_close>:

int _close(int file)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d1c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_isatty>:

int _isatty(int file)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d34:	2301      	movs	r3, #1
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b085      	sub	sp, #20
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f004 f8ba 	bl	8004f04 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20020000 	.word	0x20020000
 8000dbc:	00000800 	.word	0x00000800
 8000dc0:	20000170 	.word	0x20000170
 8000dc4:	200005c8 	.word	0x200005c8

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Wheel>:
#define Red(c) ((uint8_t)((c >> 16) & 0xFF))
#define Green(c) ((uint8_t)((c >> 8) & 0xFF))
#define Blue(c) ((uint8_t)(c & 0xFF))


uint32_t Wheel(uint8_t WheelPos) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b54      	cmp	r3, #84	@ 0x54
 8000e00:	d80b      	bhi.n	8000e1a <Wheel+0x2e>
    return newColor(255 - WheelPos * 3, 0, WheelPos * 3);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	461a      	mov	r2, r3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	33ff      	adds	r3, #255	@ 0xff
 8000e0c:	0419      	lsls	r1, r3, #16
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	430b      	orrs	r3, r1
 8000e18:	e020      	b.n	8000e5c <Wheel+0x70>
  }
  if(WheelPos < 170) {
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2ba9      	cmp	r3, #169	@ 0xa9
 8000e1e:	d80e      	bhi.n	8000e3e <Wheel+0x52>
    WheelPos -= 85;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	3b55      	subs	r3, #85	@ 0x55
 8000e24:	71fb      	strb	r3, [r7, #7]
    return newColor(0, WheelPos * 3, 255 - WheelPos * 3);
 8000e26:	79fa      	ldrb	r2, [r7, #7]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	021a      	lsls	r2, r3, #8
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4619      	mov	r1, r3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	33ff      	adds	r3, #255	@ 0xff
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	e00e      	b.n	8000e5c <Wheel+0x70>
  }
  WheelPos -= 170;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	3356      	adds	r3, #86	@ 0x56
 8000e42:	71fb      	strb	r3, [r7, #7]
  return newColor(WheelPos * 3, 255 - WheelPos * 3, 0);
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4619      	mov	r1, r3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	1acb      	subs	r3, r1, r3
 8000e56:	33ff      	adds	r3, #255	@ 0xff
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	4313      	orrs	r3, r2
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <visRainbow>:




void visRainbow(uint8_t *frameBuffer, uint32_t frameBufferSize, uint32_t effectLength)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
	uint32_t i;
	static uint8_t x = 0;

	x += 1;
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <visRainbow+0x98>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <visRainbow+0x98>)
 8000e7e:	701a      	strb	r2, [r3, #0]

	if(x == 256*5)
		x = 0;

	for( i = 0; i < frameBufferSize / 3; i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e02f      	b.n	8000ee6 <visRainbow+0x7e>
	{
		uint32_t color = Wheel(((i * 256) / effectLength + x) & 0xFF);
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	021a      	lsls	r2, r3, #8
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <visRainbow+0x98>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffa6 	bl	8000dec <Wheel>
 8000ea0:	6138      	str	r0, [r7, #16]

		frameBuffer[i*3 + 0] = color & 0xFF;
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = color >> 8 & 0xFF;
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	0a19      	lsrs	r1, r3, #8
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b2ca      	uxtb	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = color >> 16 & 0xFF;
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	0c19      	lsrs	r1, r3, #16
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	b2ca      	uxtb	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < frameBufferSize / 3; i++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <visRainbow+0x9c>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	085b      	lsrs	r3, r3, #1
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d3c7      	bcc.n	8000e86 <visRainbow+0x1e>
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000264 	.word	0x20000264
 8000f04:	aaaaaaab 	.word	0xaaaaaaab

08000f08 <visDots>:


void visDots(uint8_t *frameBuffer, uint32_t frameBufferSize, uint32_t random, uint32_t fadeOutFactor)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
	uint32_t i;

	for( i = 0; i < frameBufferSize / 3; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e0c2      	b.n	80010a2 <visDots+0x19a>
	{

		if(rand() % random == 0)
 8000f1c:	f003 fe60 	bl	8004be0 <rand>
 8000f20:	4603      	mov	r3, r0
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	fb01 f202 	mul.w	r2, r1, r2
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d119      	bne.n	8000f68 <visDots+0x60>
		{
			frameBuffer[i*3 + 0] = 255;
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	22ff      	movs	r2, #255	@ 0xff
 8000f42:	701a      	strb	r2, [r3, #0]
			frameBuffer[i*3 + 1] = 255;
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4413      	add	r3, r2
 8000f52:	22ff      	movs	r2, #255	@ 0xff
 8000f54:	701a      	strb	r2, [r3, #0]
			frameBuffer[i*3 + 2] = 255;
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	22ff      	movs	r2, #255	@ 0xff
 8000f66:	701a      	strb	r2, [r3, #0]
		}


		if(frameBuffer[i*3 + 0] > fadeOutFactor)
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d21c      	bcs.n	8000fb8 <visDots+0xb0>
			frameBuffer[i*3 + 0] -= frameBuffer[i*3 + 0]/fadeOutFactor;
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	7818      	ldrb	r0, [r3, #0]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	b2d9      	uxtb	r1, r3
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	1a42      	subs	r2, r0, r1
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e007      	b.n	8000fc8 <visDots+0xc0>
		else
			frameBuffer[i*3 + 0] = 0;
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

		if(frameBuffer[i*3 + 1] > fadeOutFactor)
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d21f      	bcs.n	8001020 <visDots+0x118>
			frameBuffer[i*3 + 1] -= frameBuffer[i*3 + 1]/fadeOutFactor;
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3301      	adds	r3, #1
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4413      	add	r3, r2
 8000fee:	7818      	ldrb	r0, [r3, #0]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	b2d9      	uxtb	r1, r3
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	3301      	adds	r3, #1
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	1a42      	subs	r2, r0, r1
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e008      	b.n	8001032 <visDots+0x12a>
		else
			frameBuffer[i*3 + 1] = 0;
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	3301      	adds	r3, #1
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4413      	add	r3, r2
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]

		if(frameBuffer[i*3 + 2] > fadeOutFactor)
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	3302      	adds	r3, #2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	4293      	cmp	r3, r2
 8001048:	d21f      	bcs.n	800108a <visDots+0x182>
			frameBuffer[i*3 + 2] -= frameBuffer[i*3 + 2]/fadeOutFactor;
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	3302      	adds	r3, #2
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	7818      	ldrb	r0, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	3302      	adds	r3, #2
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	b2d9      	uxtb	r1, r3
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	3302      	adds	r3, #2
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	1a42      	subs	r2, r0, r1
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e008      	b.n	800109c <visDots+0x194>
		else
			frameBuffer[i*3 + 2] = 0;
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	3302      	adds	r3, #2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < frameBufferSize / 3; i++)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <visDots+0x1b8>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	085b      	lsrs	r3, r3, #1
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	f4ff af34 	bcc.w	8000f1c <visDots+0x14>
	}
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	aaaaaaab 	.word	0xaaaaaaab

080010c4 <visHandle2>:


// Animate effects
void visHandle2()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	static uint32_t timestamp;

	if(HAL_GetTick() - timestamp > 10)
 80010c8:	f000 fe58 	bl	8001d7c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <visHandle2+0x38>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b0a      	cmp	r3, #10
 80010d6:	d90f      	bls.n	80010f8 <visHandle2+0x34>
	{
		timestamp = HAL_GetTick();
 80010d8:	f000 fe50 	bl	8001d7c <HAL_GetTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <visHandle2+0x38>)
 80010e0:	6013      	str	r3, [r2, #0]

		// Animate next frame, each effect into each output RGB framebuffer
		visRainbow(frameBuffer, sizeof(frameBuffer), 15);
 80010e2:	220f      	movs	r2, #15
 80010e4:	21b4      	movs	r1, #180	@ 0xb4
 80010e6:	4806      	ldr	r0, [pc, #24]	@ (8001100 <visHandle2+0x3c>)
 80010e8:	f7ff febe 	bl	8000e68 <visRainbow>
		visDots(frameBuffer2, sizeof(frameBuffer2), 50, 40);
 80010ec:	2328      	movs	r3, #40	@ 0x28
 80010ee:	2232      	movs	r2, #50	@ 0x32
 80010f0:	213c      	movs	r1, #60	@ 0x3c
 80010f2:	4804      	ldr	r0, [pc, #16]	@ (8001104 <visHandle2+0x40>)
 80010f4:	f7ff ff08 	bl	8000f08 <visDots>
	}
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000268 	.word	0x20000268
 8001100:	20000174 	.word	0x20000174
 8001104:	20000228 	.word	0x20000228

08001108 <visInit>:


void visInit()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

	// 4 paralel output LED strips needs 18% overhead during TX
	// 8 paralel output LED strips overhead is 8us of 30us period which is 28% - see the debug output PD15/13

	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e02a      	b.n	800116a <visInit+0x62>
	{

		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[i].channel = i;
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4a19      	ldr	r2, [pc, #100]	@ (800117c <visInit+0x74>)
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	330c      	adds	r3, #12
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	701a      	strb	r2, [r3, #0]

		// Every even output line has second frameBuffer2 with different effect
		if(i % 2 == 0)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10d      	bne.n	800114a <visInit+0x42>
		{
			// Your RGB framebuffer
			ws2812b.item[i].frameBufferPointer = frameBuffer;
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <visInit+0x74>)
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	4413      	add	r3, r2
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <visInit+0x78>)
 8001138:	601a      	str	r2, [r3, #0]
			// RAW size of framebuffer
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <visInit+0x74>)
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	3304      	adds	r3, #4
 8001144:	22b4      	movs	r2, #180	@ 0xb4
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e00c      	b.n	8001164 <visInit+0x5c>
		} else {
			ws2812b.item[i].frameBufferPointer = frameBuffer2;
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <visInit+0x74>)
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <visInit+0x7c>)
 8001154:	601a      	str	r2, [r3, #0]
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer2);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4a08      	ldr	r2, [pc, #32]	@ (800117c <visInit+0x74>)
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	3304      	adds	r3, #4
 8001160:	223c      	movs	r2, #60	@ 0x3c
 8001162:	601a      	str	r2, [r3, #0]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	3301      	adds	r3, #1
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0d1      	beq.n	8001114 <visInit+0xc>
		}

	}


	ws2812b_init();
 8001170:	f000 fd54 	bl	8001c1c <ws2812b_init>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000008c 	.word	0x2000008c
 8001180:	20000174 	.word	0x20000174
 8001184:	20000228 	.word	0x20000228

08001188 <visHandle>:


void visHandle()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0

	if(ws2812b.transferComplete)
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <visHandle+0x20>)
 800118e:	7c1b      	ldrb	r3, [r3, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <visHandle+0x1a>
	{
		// Update your framebuffer here or swap buffers
		visHandle2();
 8001194:	f7ff ff96 	bl	80010c4 <visHandle2>

		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <visHandle+0x20>)
 800119a:	2201      	movs	r2, #1
 800119c:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 800119e:	f000 fd4d 	bl	8001c3c <ws2812b_handle>
	}
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000008c 	.word	0x2000008c

080011ac <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <ws2812b_gpio_init+0x94>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <ws2812b_gpio_init+0x94>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <ws2812b_gpio_init+0x94>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 80011ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	4817      	ldr	r0, [pc, #92]	@ (8001244 <ws2812b_gpio_init+0x98>)
 80011e8:	f001 fb12 	bl	8002810 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <ws2812b_gpio_init+0x94>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f4:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <ws2812b_gpio_init+0x94>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <ws2812b_gpio_init+0x94>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 8001214:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001218:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4619      	mov	r1, r3
 8001220:	4809      	ldr	r0, [pc, #36]	@ (8001248 <ws2812b_gpio_init+0x9c>)
 8001222:	f001 faf5 	bl	8002810 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 8001226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <ws2812b_gpio_init+0x9c>)
 8001234:	f001 faec 	bl	8002810 <HAL_GPIO_Init>
	#endif
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020c00 	.word	0x40020c00

0800124c <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b52      	ldr	r3, [pc, #328]	@ (80013a0 <TIM1_init+0x154>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	4a51      	ldr	r2, [pc, #324]	@ (80013a0 <TIM1_init+0x154>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6453      	str	r3, [r2, #68]	@ 0x44
 8001262:	4b4f      	ldr	r3, [pc, #316]	@ (80013a0 <TIM1_init+0x154>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 800126e:	4b4d      	ldr	r3, [pc, #308]	@ (80013a4 <TIM1_init+0x158>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	4a4c      	ldr	r2, [pc, #304]	@ (80013a8 <TIM1_init+0x15c>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	4a4b      	ldr	r2, [pc, #300]	@ (80013ac <TIM1_init+0x160>)
 800127e:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 8001280:	4b48      	ldr	r3, [pc, #288]	@ (80013a4 <TIM1_init+0x158>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a4a      	ldr	r2, [pc, #296]	@ (80013b0 <TIM1_init+0x164>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0adb      	lsrs	r3, r3, #11
 800128c:	4a49      	ldr	r2, [pc, #292]	@ (80013b4 <TIM1_init+0x168>)
 800128e:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 8001290:	4b46      	ldr	r3, [pc, #280]	@ (80013ac <TIM1_init+0x160>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	461a      	mov	r2, r3
 800129e:	4b46      	ldr	r3, [pc, #280]	@ (80013b8 <TIM1_init+0x16c>)
 80012a0:	fba3 2302 	umull	r2, r3, r3, r2
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 80012a8:	4b40      	ldr	r3, [pc, #256]	@ (80013ac <TIM1_init+0x160>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b41      	ldr	r3, [pc, #260]	@ (80013bc <TIM1_init+0x170>)
 80012b8:	fba3 2302 	umull	r2, r3, r3, r2
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 80012c0:	4b3f      	ldr	r3, [pc, #252]	@ (80013c0 <TIM1_init+0x174>)
 80012c2:	4a40      	ldr	r2, [pc, #256]	@ (80013c4 <TIM1_init+0x178>)
 80012c4:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 80012c6:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <TIM1_init+0x160>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a3d      	ldr	r2, [pc, #244]	@ (80013c0 <TIM1_init+0x174>)
 80012cc:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 80012ce:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <TIM1_init+0x174>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	@ (80013c0 <TIM1_init+0x174>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b39      	ldr	r3, [pc, #228]	@ (80013c0 <TIM1_init+0x174>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80012e0:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <TIM1_init+0x174>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 80012e6:	4836      	ldr	r0, [pc, #216]	@ (80013c0 <TIM1_init+0x174>)
 80012e8:	f002 fc54 	bl	8003b94 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2019      	movs	r0, #25
 80012f2:	f000 fe2a 	bl	8001f4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012f6:	2019      	movs	r0, #25
 80012f8:	f000 fe43 	bl	8001f82 <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <TIM1_init+0x17c>)
 80012fe:	2260      	movs	r2, #96	@ 0x60
 8001300:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <TIM1_init+0x17c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 8001308:	4a2f      	ldr	r2, [pc, #188]	@ (80013c8 <TIM1_init+0x17c>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800130e:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <TIM1_init+0x17c>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 8001314:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <TIM1_init+0x17c>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 800131a:	2200      	movs	r2, #0
 800131c:	492a      	ldr	r1, [pc, #168]	@ (80013c8 <TIM1_init+0x17c>)
 800131e:	4828      	ldr	r0, [pc, #160]	@ (80013c0 <TIM1_init+0x174>)
 8001320:	f002 fef8 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <TIM1_init+0x180>)
 8001326:	2260      	movs	r2, #96	@ 0x60
 8001328:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800132a:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <TIM1_init+0x180>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 8001330:	4a26      	ldr	r2, [pc, #152]	@ (80013cc <TIM1_init+0x180>)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8001336:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <TIM1_init+0x180>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 800133c:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <TIM1_init+0x180>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8001342:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <TIM1_init+0x180>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <TIM1_init+0x180>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 800134e:	2204      	movs	r2, #4
 8001350:	491e      	ldr	r1, [pc, #120]	@ (80013cc <TIM1_init+0x180>)
 8001352:	481b      	ldr	r0, [pc, #108]	@ (80013c0 <TIM1_init+0x174>)
 8001354:	f002 fede 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 8001358:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <TIM1_init+0x174>)
 800135a:	f002 fbc1 	bl	8003ae0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 800135e:	2100      	movs	r1, #0
 8001360:	4817      	ldr	r0, [pc, #92]	@ (80013c0 <TIM1_init+0x174>)
 8001362:	f002 fc71 	bl	8003c48 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <TIM1_init+0x174>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a1a      	ldr	r2, [r3, #32]
 800136c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <TIM1_init+0x14a>
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <TIM1_init+0x174>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	f240 4344 	movw	r3, #1092	@ 0x444
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d107      	bne.n	8001396 <TIM1_init+0x14a>
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <TIM1_init+0x174>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <TIM1_init+0x174>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]

}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	20000000 	.word	0x20000000
 80013a8:	014f8b59 	.word	0x014f8b59
 80013ac:	2000034c 	.word	0x2000034c
 80013b0:	1b4e81b5 	.word	0x1b4e81b5
 80013b4:	20000350 	.word	0x20000350
 80013b8:	38e38e39 	.word	0x38e38e39
 80013bc:	88888889 	.word	0x88888889
 80013c0:	200002cc 	.word	0x200002cc
 80013c4:	40010000 	.word	0x40010000
 80013c8:	20000314 	.word	0x20000314
 80013cc:	20000330 	.word	0x20000330

080013d0 <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b65      	ldr	r3, [pc, #404]	@ (8001570 <DMA2_init+0x1a0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a64      	ldr	r2, [pc, #400]	@ (8001570 <DMA2_init+0x1a0>)
 80013e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b62      	ldr	r3, [pc, #392]	@ (8001570 <DMA2_init+0x1a0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f2:	4b60      	ldr	r3, [pc, #384]	@ (8001574 <DMA2_init+0x1a4>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001574 <DMA2_init+0x1a4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 80013fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001574 <DMA2_init+0x1a4>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001404:	4b5b      	ldr	r3, [pc, #364]	@ (8001574 <DMA2_init+0x1a4>)
 8001406:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800140a:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800140c:	4b59      	ldr	r3, [pc, #356]	@ (8001574 <DMA2_init+0x1a4>)
 800140e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001412:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 8001414:	4b57      	ldr	r3, [pc, #348]	@ (8001574 <DMA2_init+0x1a4>)
 8001416:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800141a:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800141c:	4b55      	ldr	r3, [pc, #340]	@ (8001574 <DMA2_init+0x1a4>)
 800141e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001422:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 8001424:	4b53      	ldr	r3, [pc, #332]	@ (8001574 <DMA2_init+0x1a4>)
 8001426:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800142a:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142c:	4b51      	ldr	r3, [pc, #324]	@ (8001574 <DMA2_init+0x1a4>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001432:	4b50      	ldr	r3, [pc, #320]	@ (8001574 <DMA2_init+0x1a4>)
 8001434:	2203      	movs	r2, #3
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 8001438:	4b4e      	ldr	r3, [pc, #312]	@ (8001574 <DMA2_init+0x1a4>)
 800143a:	2200      	movs	r2, #0
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800143e:	4b4d      	ldr	r3, [pc, #308]	@ (8001574 <DMA2_init+0x1a4>)
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 8001444:	4b4b      	ldr	r3, [pc, #300]	@ (8001574 <DMA2_init+0x1a4>)
 8001446:	4a4c      	ldr	r2, [pc, #304]	@ (8001578 <DMA2_init+0x1a8>)
 8001448:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 800144a:	484a      	ldr	r0, [pc, #296]	@ (8001574 <DMA2_init+0x1a4>)
 800144c:	f000 fe62 	bl	8002114 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 8001450:	4848      	ldr	r0, [pc, #288]	@ (8001574 <DMA2_init+0x1a4>)
 8001452:	f000 fdb1 	bl	8001fb8 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 8001456:	4949      	ldr	r1, [pc, #292]	@ (800157c <DMA2_init+0x1ac>)
 8001458:	2330      	movs	r3, #48	@ 0x30
 800145a:	4a49      	ldr	r2, [pc, #292]	@ (8001580 <DMA2_init+0x1b0>)
 800145c:	4845      	ldr	r0, [pc, #276]	@ (8001574 <DMA2_init+0x1a4>)
 800145e:	f000 feb7 	bl	80021d0 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001462:	4b48      	ldr	r3, [pc, #288]	@ (8001584 <DMA2_init+0x1b4>)
 8001464:	2240      	movs	r2, #64	@ 0x40
 8001466:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b46      	ldr	r3, [pc, #280]	@ (8001584 <DMA2_init+0x1b4>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b45      	ldr	r3, [pc, #276]	@ (8001584 <DMA2_init+0x1b4>)
 8001470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001474:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001476:	4b43      	ldr	r3, [pc, #268]	@ (8001584 <DMA2_init+0x1b4>)
 8001478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800147c:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800147e:	4b41      	ldr	r3, [pc, #260]	@ (8001584 <DMA2_init+0x1b4>)
 8001480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001484:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 8001486:	4b3f      	ldr	r3, [pc, #252]	@ (8001584 <DMA2_init+0x1b4>)
 8001488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800148c:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <DMA2_init+0x1b4>)
 8001490:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001494:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 8001496:	4b3b      	ldr	r3, [pc, #236]	@ (8001584 <DMA2_init+0x1b4>)
 8001498:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800149c:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149e:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <DMA2_init+0x1b4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	@ 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014a4:	4b37      	ldr	r3, [pc, #220]	@ (8001584 <DMA2_init+0x1b4>)
 80014a6:	2203      	movs	r2, #3
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 80014aa:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <DMA2_init+0x1b4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014b0:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <DMA2_init+0x1b4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30

	dmaCC1.Instance = DMA2_Stream1;
 80014b6:	4b33      	ldr	r3, [pc, #204]	@ (8001584 <DMA2_init+0x1b4>)
 80014b8:	4a33      	ldr	r2, [pc, #204]	@ (8001588 <DMA2_init+0x1b8>)
 80014ba:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 80014bc:	4831      	ldr	r0, [pc, #196]	@ (8001584 <DMA2_init+0x1b4>)
 80014be:	f000 fe29 	bl	8002114 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 80014c2:	4830      	ldr	r0, [pc, #192]	@ (8001584 <DMA2_init+0x1b4>)
 80014c4:	f000 fd78 	bl	8001fb8 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 80014c8:	4930      	ldr	r1, [pc, #192]	@ (800158c <DMA2_init+0x1bc>)
 80014ca:	2330      	movs	r3, #48	@ 0x30
 80014cc:	4a30      	ldr	r2, [pc, #192]	@ (8001590 <DMA2_init+0x1c0>)
 80014ce:	482d      	ldr	r0, [pc, #180]	@ (8001584 <DMA2_init+0x1b4>)
 80014d0:	f000 fe7e 	bl	80021d0 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <DMA2_init+0x1c4>)
 80014d6:	2240      	movs	r2, #64	@ 0x40
 80014d8:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <DMA2_init+0x1c4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <DMA2_init+0x1c4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <DMA2_init+0x1c4>)
 80014e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014ec:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <DMA2_init+0x1c4>)
 80014f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014f4:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <DMA2_init+0x1c4>)
 80014f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014fc:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <DMA2_init+0x1c4>)
 8001500:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001504:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <DMA2_init+0x1c4>)
 8001508:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800150c:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <DMA2_init+0x1c4>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001514:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <DMA2_init+0x1c4>)
 8001516:	2203      	movs	r2, #3
 8001518:	629a      	str	r2, [r3, #40]	@ 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 800151a:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <DMA2_init+0x1c4>)
 800151c:	2200      	movs	r2, #0
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001520:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <DMA2_init+0x1c4>)
 8001522:	2200      	movs	r2, #0
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30

	dmaCC2.Instance = DMA2_Stream2;
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <DMA2_init+0x1c4>)
 8001528:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <DMA2_init+0x1c8>)
 800152a:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 800152c:	4819      	ldr	r0, [pc, #100]	@ (8001594 <DMA2_init+0x1c4>)
 800152e:	f000 fdf1 	bl	8002114 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <DMA2_init+0x1c4>)
 8001534:	4a19      	ldr	r2, [pc, #100]	@ (800159c <DMA2_init+0x1cc>)
 8001536:	63da      	str	r2, [r3, #60]	@ 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8001538:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <DMA2_init+0x1c4>)
 800153a:	4a19      	ldr	r2, [pc, #100]	@ (80015a0 <DMA2_init+0x1d0>)
 800153c:	641a      	str	r2, [r3, #64]	@ 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <DMA2_init+0x1c4>)
 8001540:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <DMA2_init+0x1d4>)
 8001542:	64da      	str	r2, [r3, #76]	@ 0x4c

	HAL_DMA_Init(&dmaCC2);
 8001544:	4813      	ldr	r0, [pc, #76]	@ (8001594 <DMA2_init+0x1c4>)
 8001546:	f000 fd37 	bl	8001fb8 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	203a      	movs	r0, #58	@ 0x3a
 8001550:	f000 fcfb 	bl	8001f4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001554:	203a      	movs	r0, #58	@ 0x3a
 8001556:	f000 fd14 	bl	8001f82 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 800155a:	4913      	ldr	r1, [pc, #76]	@ (80015a8 <DMA2_init+0x1d8>)
 800155c:	2330      	movs	r3, #48	@ 0x30
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <DMA2_init+0x1b0>)
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <DMA2_init+0x1c4>)
 8001562:	f000 fe70 	bl	8002246 <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	20000354 	.word	0x20000354
 8001578:	40026488 	.word	0x40026488
 800157c:	20000004 	.word	0x20000004
 8001580:	40020018 	.word	0x40020018
 8001584:	200003b4 	.word	0x200003b4
 8001588:	40026428 	.word	0x40026428
 800158c:	2000026c 	.word	0x2000026c
 8001590:	4002001a 	.word	0x4002001a
 8001594:	20000414 	.word	0x20000414
 8001598:	40026440 	.word	0x40026440
 800159c:	080018a5 	.word	0x080018a5
 80015a0:	08001849 	.word	0x08001849
 80015a4:	08001829 	.word	0x08001829
 80015a8:	20000008 	.word	0x20000008

080015ac <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b089      	sub	sp, #36	@ 0x24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	1c58      	adds	r0, r3, #1
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	6088      	str	r0, [r1, #8]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	1c58      	adds	r0, r3, #1
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	6088      	str	r0, [r1, #8]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	1c58      	adds	r0, r3, #1
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	6088      	str	r0, [r1, #8]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d102      	bne.n	8001604 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7b18      	ldrb	r0, [r3, #12]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b299      	uxth	r1, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	b2dc      	uxtb	r4, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	4623      	mov	r3, r4
 800161c:	f000 fa34 	bl	8001a88 <ws2812b_set_pixel>
}
 8001620:	bf00      	nop
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}

08001628 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 800162e:	4b72      	ldr	r3, [pc, #456]	@ (80017f8 <WS2812_sendbuf+0x1d0>)
 8001630:	2200      	movs	r2, #0
 8001632:	741a      	strb	r2, [r3, #16]

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	e019      	b.n	800166e <WS2812_sendbuf+0x46>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 800163a:	4a6f      	ldr	r2, [pc, #444]	@ (80017f8 <WS2812_sendbuf+0x1d0>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	3308      	adds	r3, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4a6a      	ldr	r2, [pc, #424]	@ (80017f8 <WS2812_sendbuf+0x1d0>)
 800164e:	4413      	add	r3, r2
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ffaa 	bl	80015ac <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4a66      	ldr	r2, [pc, #408]	@ (80017f8 <WS2812_sendbuf+0x1d0>)
 800165e:	4413      	add	r3, r2
 8001660:	2101      	movs	r1, #1
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffa2 	bl	80015ac <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0e2      	beq.n	800163a <WS2812_sendbuf+0x12>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8001674:	4b61      	ldr	r3, [pc, #388]	@ (80017fc <WS2812_sendbuf+0x1d4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b61      	ldr	r3, [pc, #388]	@ (8001800 <WS2812_sendbuf+0x1d8>)
 800167c:	429a      	cmp	r2, r3
 800167e:	d904      	bls.n	800168a <WS2812_sendbuf+0x62>
 8001680:	4b60      	ldr	r3, [pc, #384]	@ (8001804 <WS2812_sendbuf+0x1dc>)
 8001682:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	e019      	b.n	80016be <WS2812_sendbuf+0x96>
 800168a:	4b5c      	ldr	r3, [pc, #368]	@ (80017fc <WS2812_sendbuf+0x1d4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b5d      	ldr	r3, [pc, #372]	@ (8001808 <WS2812_sendbuf+0x1e0>)
 8001692:	429a      	cmp	r2, r3
 8001694:	d904      	bls.n	80016a0 <WS2812_sendbuf+0x78>
 8001696:	4a5b      	ldr	r2, [pc, #364]	@ (8001804 <WS2812_sendbuf+0x1dc>)
 8001698:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800169c:	6093      	str	r3, [r2, #8]
 800169e:	e00e      	b.n	80016be <WS2812_sendbuf+0x96>
 80016a0:	4b56      	ldr	r3, [pc, #344]	@ (80017fc <WS2812_sendbuf+0x1d4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b59      	ldr	r3, [pc, #356]	@ (800180c <WS2812_sendbuf+0x1e4>)
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d904      	bls.n	80016b6 <WS2812_sendbuf+0x8e>
 80016ac:	4a58      	ldr	r2, [pc, #352]	@ (8001810 <WS2812_sendbuf+0x1e8>)
 80016ae:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80016b2:	60d3      	str	r3, [r2, #12]
 80016b4:	e003      	b.n	80016be <WS2812_sendbuf+0x96>
 80016b6:	4a56      	ldr	r2, [pc, #344]	@ (8001810 <WS2812_sendbuf+0x1e8>)
 80016b8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80016bc:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 80016be:	4b55      	ldr	r3, [pc, #340]	@ (8001814 <WS2812_sendbuf+0x1ec>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001800 <WS2812_sendbuf+0x1d8>)
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d904      	bls.n	80016d4 <WS2812_sendbuf+0xac>
 80016ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001804 <WS2812_sendbuf+0x1dc>)
 80016cc:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	e019      	b.n	8001708 <WS2812_sendbuf+0xe0>
 80016d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <WS2812_sendbuf+0x1ec>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b4b      	ldr	r3, [pc, #300]	@ (8001808 <WS2812_sendbuf+0x1e0>)
 80016dc:	429a      	cmp	r2, r3
 80016de:	d904      	bls.n	80016ea <WS2812_sendbuf+0xc2>
 80016e0:	4a48      	ldr	r2, [pc, #288]	@ (8001804 <WS2812_sendbuf+0x1dc>)
 80016e2:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80016e6:	6093      	str	r3, [r2, #8]
 80016e8:	e00e      	b.n	8001708 <WS2812_sendbuf+0xe0>
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <WS2812_sendbuf+0x1ec>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b46      	ldr	r3, [pc, #280]	@ (800180c <WS2812_sendbuf+0x1e4>)
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d904      	bls.n	8001700 <WS2812_sendbuf+0xd8>
 80016f6:	4a46      	ldr	r2, [pc, #280]	@ (8001810 <WS2812_sendbuf+0x1e8>)
 80016f8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80016fc:	60d3      	str	r3, [r2, #12]
 80016fe:	e003      	b.n	8001708 <WS2812_sendbuf+0xe0>
 8001700:	4a43      	ldr	r2, [pc, #268]	@ (8001810 <WS2812_sendbuf+0x1e8>)
 8001702:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001706:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 8001708:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <WS2812_sendbuf+0x1f0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <WS2812_sendbuf+0x1d8>)
 8001710:	429a      	cmp	r2, r3
 8001712:	d904      	bls.n	800171e <WS2812_sendbuf+0xf6>
 8001714:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <WS2812_sendbuf+0x1dc>)
 8001716:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	e019      	b.n	8001752 <WS2812_sendbuf+0x12a>
 800171e:	4b3e      	ldr	r3, [pc, #248]	@ (8001818 <WS2812_sendbuf+0x1f0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	4b38      	ldr	r3, [pc, #224]	@ (8001808 <WS2812_sendbuf+0x1e0>)
 8001726:	429a      	cmp	r2, r3
 8001728:	d904      	bls.n	8001734 <WS2812_sendbuf+0x10c>
 800172a:	4a36      	ldr	r2, [pc, #216]	@ (8001804 <WS2812_sendbuf+0x1dc>)
 800172c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001730:	6093      	str	r3, [r2, #8]
 8001732:	e00e      	b.n	8001752 <WS2812_sendbuf+0x12a>
 8001734:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <WS2812_sendbuf+0x1f0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b34      	ldr	r3, [pc, #208]	@ (800180c <WS2812_sendbuf+0x1e4>)
 800173c:	429a      	cmp	r2, r3
 800173e:	d904      	bls.n	800174a <WS2812_sendbuf+0x122>
 8001740:	4a33      	ldr	r2, [pc, #204]	@ (8001810 <WS2812_sendbuf+0x1e8>)
 8001742:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001746:	60d3      	str	r3, [r2, #12]
 8001748:	e003      	b.n	8001752 <WS2812_sendbuf+0x12a>
 800174a:	4a31      	ldr	r2, [pc, #196]	@ (8001810 <WS2812_sendbuf+0x1e8>)
 800174c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001750:	6093      	str	r3, [r2, #8]



	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <WS2812_sendbuf+0x1d4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2230      	movs	r2, #48	@ 0x30
 8001758:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 800175a:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <WS2812_sendbuf+0x1ec>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2230      	movs	r2, #48	@ 0x30
 8001760:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 8001762:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <WS2812_sendbuf+0x1f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2230      	movs	r2, #48	@ 0x30
 8001768:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <WS2812_sendbuf+0x1f4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f06f 021f 	mvn.w	r2, #31
 8001772:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 8001774:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <WS2812_sendbuf+0x1d4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <WS2812_sendbuf+0x1d4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <WS2812_sendbuf+0x1ec>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <WS2812_sendbuf+0x1ec>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8001794:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <WS2812_sendbuf+0x1f0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <WS2812_sendbuf+0x1f0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 80017a4:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <WS2812_sendbuf+0x1f4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <WS2812_sendbuf+0x1f4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017b2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <WS2812_sendbuf+0x1f4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <WS2812_sendbuf+0x1f4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017c2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <WS2812_sendbuf+0x1f4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <WS2812_sendbuf+0x1f4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017d2:	60da      	str	r2, [r3, #12]

	TIM1->CNT = tim_period-1;
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <WS2812_sendbuf+0x1f8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <WS2812_sendbuf+0x1fc>)
 80017da:	3b01      	subs	r3, #1
 80017dc:	6253      	str	r3, [r2, #36]	@ 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <WS2812_sendbuf+0x1f4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <WS2812_sendbuf+0x1f4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000008c 	.word	0x2000008c
 80017fc:	20000354 	.word	0x20000354
 8001800:	40026458 	.word	0x40026458
 8001804:	40026400 	.word	0x40026400
 8001808:	400260b8 	.word	0x400260b8
 800180c:	40026058 	.word	0x40026058
 8001810:	40026000 	.word	0x40026000
 8001814:	200003b4 	.word	0x200003b4
 8001818:	20000414 	.word	0x20000414
 800181c:	200002cc 	.word	0x200002cc
 8001820:	2000034c 	.word	0x2000034c
 8001824:	40010000 	.word	0x40010000

08001828 <DMA_TransferError>:


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
	i++;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3301      	adds	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <DMA_TransferHalfHandler+0x58>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b3c      	cmp	r3, #60	@ 0x3c
 8001856:	d108      	bne.n	800186a <DMA_TransferHalfHandler+0x22>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2300      	movs	r3, #0
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f910 	bl	8001a88 <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 8001868:	e015      	b.n	8001896 <DMA_TransferHalfHandler+0x4e>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e00a      	b.n	8001886 <DMA_TransferHalfHandler+0x3e>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <DMA_TransferHalfHandler+0x58>)
 8001876:	4413      	add	r3, r2
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fe96 	bl	80015ac <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f1      	beq.n	8001870 <DMA_TransferHalfHandler+0x28>
		ws2812b.repeatCounter++;
 800188c:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <DMA_TransferHalfHandler+0x58>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	3301      	adds	r3, #1
 8001892:	4a03      	ldr	r2, [pc, #12]	@ (80018a0 <DMA_TransferHalfHandler+0x58>)
 8001894:	6193      	str	r3, [r2, #24]
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000008c 	.word	0x2000008c

080018a4 <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80018ac:	4b40      	ldr	r3, [pc, #256]	@ (80019b0 <DMA_TransferCompleteHandler+0x10c>)
 80018ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b2:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 80018b4:	4b3f      	ldr	r3, [pc, #252]	@ (80019b4 <DMA_TransferCompleteHandler+0x110>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b3c      	cmp	r3, #60	@ 0x3c
 80018ba:	d15a      	bne.n	8001972 <DMA_TransferCompleteHandler+0xce>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 80018bc:	4b3d      	ldr	r3, [pc, #244]	@ (80019b4 <DMA_TransferCompleteHandler+0x110>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <DMA_TransferCompleteHandler+0x114>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a3c      	ldr	r2, [pc, #240]	@ (80019b8 <DMA_TransferCompleteHandler+0x114>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 80018ce:	4b3b      	ldr	r3, [pc, #236]	@ (80019bc <DMA_TransferCompleteHandler+0x118>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <DMA_TransferCompleteHandler+0x118>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 80018de:	4b38      	ldr	r3, [pc, #224]	@ (80019c0 <DMA_TransferCompleteHandler+0x11c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <DMA_TransferCompleteHandler+0x11c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 80018ee:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <DMA_TransferCompleteHandler+0x120>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b33      	ldr	r3, [pc, #204]	@ (80019c4 <DMA_TransferCompleteHandler+0x120>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 80018fe:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800190c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 800190e:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800191c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 800191e:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4b28      	ldr	r3, [pc, #160]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800192c:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 800192e:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <DMA_TransferCompleteHandler+0x114>)
 8001930:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <DMA_TransferCompleteHandler+0x128>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	62d3      	str	r3, [r2, #44]	@ 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <DMA_TransferCompleteHandler+0x114>)
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <DMA_TransferCompleteHandler+0x114>)
 800193e:	2201      	movs	r2, #1
 8001940:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8001942:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f06f 0201 	mvn.w	r2, #1
 800194a:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 800194c:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <DMA_TransferCompleteHandler+0x124>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 800195c:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <DMA_TransferCompleteHandler+0x114>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a15      	ldr	r2, [pc, #84]	@ (80019b8 <DMA_TransferCompleteHandler+0x114>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8001968:	4a19      	ldr	r2, [pc, #100]	@ (80019d0 <DMA_TransferCompleteHandler+0x12c>)
 800196a:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <DMA_TransferCompleteHandler+0x130>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	e015      	b.n	800199e <DMA_TransferCompleteHandler+0xfa>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e00a      	b.n	800198e <DMA_TransferCompleteHandler+0xea>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <DMA_TransferCompleteHandler+0x110>)
 800197e:	4413      	add	r3, r2
 8001980:	2101      	movs	r1, #1
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fe12 	bl	80015ac <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3301      	adds	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f1      	beq.n	8001978 <DMA_TransferCompleteHandler+0xd4>
		}

		ws2812b.repeatCounter++;
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <DMA_TransferCompleteHandler+0x110>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	3301      	adds	r3, #1
 800199a:	4a06      	ldr	r2, [pc, #24]	@ (80019b4 <DMA_TransferCompleteHandler+0x110>)
 800199c:	6193      	str	r3, [r2, #24]
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <DMA_TransferCompleteHandler+0x10c>)
 80019a0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80019a4:	619a      	str	r2, [r3, #24]
	#endif

}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	2000008c 	.word	0x2000008c
 80019b8:	40010000 	.word	0x40010000
 80019bc:	20000354 	.word	0x20000354
 80019c0:	200003b4 	.word	0x200003b4
 80019c4:	20000414 	.word	0x20000414
 80019c8:	200002cc 	.word	0x200002cc
 80019cc:	20000350 	.word	0x20000350
 80019d0:	40020000 	.word	0x40020000
 80019d4:	20000008 	.word	0x20000008

080019d8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <DMA2_Stream2_IRQHandler+0x20>)
 80019de:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019e2:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 80019e4:	4805      	ldr	r0, [pc, #20]	@ (80019fc <DMA2_Stream2_IRQHandler+0x24>)
 80019e6:	f000 fca9 	bl	800233c <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 80019ea:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <DMA2_Stream2_IRQHandler+0x20>)
 80019ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80019f0:	619a      	str	r2, [r3, #24]
	#endif
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40020c00 	.word	0x40020c00
 80019fc:	20000414 	.word	0x20000414

08001a00 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001a06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a0a:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8001a0c:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001a0e:	f002 fa91 	bl	8003f34 <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8001a12:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001a14:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a18:	619a      	str	r2, [r3, #24]
	#endif
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	200002cc 	.word	0x200002cc

08001a28 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
    TIM1->CR1 = 0; // disable timer
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8001a3c:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f06f 0201 	mvn.w	r2, #1
 8001a62:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	741a      	strb	r2, [r3, #16]

}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000008c 	.word	0x2000008c
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	200002cc 	.word	0x200002cc
 8001a84:	2000034c 	.word	0x2000034c

08001a88 <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8001a88:	b490      	push	{r4, r7}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80bb      	strh	r3, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	71bb      	strb	r3, [r7, #6]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c14 <ws2812b_set_pixel+0x18c>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	@ (8001c14 <ws2812b_set_pixel+0x18c>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 8001ab6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001aba:	4a56      	ldr	r2, [pc, #344]	@ (8001c14 <ws2812b_set_pixel+0x18c>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28


	uint32_t calcCol = (column*24);
 8001ac2:	88ba      	ldrh	r2, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	61bb      	str	r3, [r7, #24]
	uint32_t invRed = ~red;
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	617b      	str	r3, [r7, #20]
	uint32_t invGreen = ~green;
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	613b      	str	r3, [r7, #16]
	uint32_t invBlue = ~blue;
 8001ada:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	60fb      	str	r3, [r7, #12]


#if defined(SETPIX_1)
	uint8_t i;
	uint32_t calcClearRow = ~((0x01<<row) << 0);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	77fb      	strb	r3, [r7, #31]
 8001af2:	e085      	b.n	8001c00 <ws2812b_set_pixel+0x178>
	{
		// clear the data for pixel

		ws2812bDmaBitBuffer[(calcCol+i)] &= calcClearRow;
 8001af4:	7ffa      	ldrb	r2, [r7, #31]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a47      	ldr	r2, [pc, #284]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001afc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	7ff8      	ldrb	r0, [r7, #31]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4403      	add	r3, r0
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	b291      	uxth	r1, r2
 8001b0e:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001b10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+8+i)] &= calcClearRow;
 8001b14:	7ffa      	ldrb	r2, [r7, #31]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001b1e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	7ff8      	ldrb	r0, [r7, #31]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4403      	add	r3, r0
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	400a      	ands	r2, r1
 8001b30:	b291      	uxth	r1, r2
 8001b32:	4a39      	ldr	r2, [pc, #228]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001b34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+16+i)] &= calcClearRow;
 8001b38:	7ffa      	ldrb	r2, [r7, #31]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3310      	adds	r3, #16
 8001b40:	4a35      	ldr	r2, [pc, #212]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001b42:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	7ff8      	ldrb	r0, [r7, #31]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	4403      	add	r3, r0
 8001b50:	3310      	adds	r3, #16
 8001b52:	400a      	ands	r2, r1
 8001b54:	b291      	uxth	r1, r2
 8001b56:	4a30      	ldr	r2, [pc, #192]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001b58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// write new data for pixel
		ws2812bDmaBitBuffer[(calcCol+i)] |= (((((invGreen)<<i) & 0x80)>>7)<<(row+0));
 8001b5c:	7ffa      	ldrb	r2, [r7, #31]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a2d      	ldr	r2, [pc, #180]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001b64:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b68:	7ffb      	ldrb	r3, [r7, #31]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	09db      	lsrs	r3, r3, #7
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	7ff8      	ldrb	r0, [r7, #31]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	4403      	add	r3, r0
 8001b84:	430a      	orrs	r2, r1
 8001b86:	b291      	uxth	r1, r2
 8001b88:	4a23      	ldr	r2, [pc, #140]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001b8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+8+i)] |= (((((invRed)<<i) & 0x80)>>7)<<(row+0));
 8001b8e:	7ffa      	ldrb	r2, [r7, #31]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	4413      	add	r3, r2
 8001b94:	3308      	adds	r3, #8
 8001b96:	4a20      	ldr	r2, [pc, #128]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001b98:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	09db      	lsrs	r3, r3, #7
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	7ff8      	ldrb	r0, [r7, #31]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	4403      	add	r3, r0
 8001bb8:	3308      	adds	r3, #8
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	b291      	uxth	r1, r2
 8001bbe:	4a16      	ldr	r2, [pc, #88]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001bc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ws2812bDmaBitBuffer[(calcCol+16+i)] |= (((((invBlue)<<i) & 0x80)>>7)<<(row+0));
 8001bc4:	7ffa      	ldrb	r2, [r7, #31]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3310      	adds	r3, #16
 8001bcc:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001bce:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001bd2:	7ffb      	ldrb	r3, [r7, #31]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	09db      	lsrs	r3, r3, #7
 8001bdc:	f003 0201 	and.w	r2, r3, #1
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	7ff8      	ldrb	r0, [r7, #31]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4403      	add	r3, r0
 8001bee:	3310      	adds	r3, #16
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	b291      	uxth	r1, r2
 8001bf4:	4a08      	ldr	r2, [pc, #32]	@ (8001c18 <ws2812b_set_pixel+0x190>)
 8001bf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 8; i++)
 8001bfa:	7ffb      	ldrb	r3, [r7, #31]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	77fb      	strb	r3, [r7, #31]
 8001c00:	7ffb      	ldrb	r3, [r7, #31]
 8001c02:	2b07      	cmp	r3, #7
 8001c04:	f67f af76 	bls.w	8001af4 <ws2812b_set_pixel+0x6c>

	*bitBand = (invBlue >> 0);
	bitBand+=16;

#endif
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc90      	pop	{r4, r7}
 8001c12:	4770      	bx	lr
 8001c14:	08005bc4 	.word	0x08005bc4
 8001c18:	2000026c 	.word	0x2000026c

08001c1c <ws2812b_init>:


void ws2812b_init()
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 8001c20:	f7ff fac4 	bl	80011ac <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 8001c24:	f7ff fbd4 	bl	80013d0 <DMA2_init>
	TIM1_init();
 8001c28:	f7ff fb10 	bl	800124c <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	@ (8001c38 <ws2812b_init+0x1c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	741a      	strb	r2, [r3, #16]
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000008c 	.word	0x2000008c

08001c3c <ws2812b_handle>:


void ws2812b_handle()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <ws2812b_handle+0x1c>)
 8001c42:	7c5b      	ldrb	r3, [r3, #17]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <ws2812b_handle+0x16>
		ws2812b.startTransfer = 0;
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <ws2812b_handle+0x1c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	745a      	strb	r2, [r3, #17]
		WS2812_sendbuf();
 8001c4e:	f7ff fceb 	bl	8001628 <WS2812_sendbuf>
	}

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000008c 	.word	0x2000008c

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c62:	490e      	ldr	r1, [pc, #56]	@ (8001c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c64:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c78:	4c0b      	ldr	r4, [pc, #44]	@ (8001ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c86:	f7ff f89f 	bl	8000dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f003 f941 	bl	8004f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f7fe fc6f 	bl	8000570 <main>
  bx  lr    
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ca0:	08005dbc 	.word	0x08005dbc
  ldr r2, =_sbss
 8001ca4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ca8:	200005c8 	.word	0x200005c8

08001cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC_IRQHandler>
	...

08001cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <HAL_Init+0x40>)
 8001cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <HAL_Init+0x40>)
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <HAL_Init+0x40>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f92b 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7fe fe7e 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023c00 	.word	0x40023c00

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f943 	bl	8001f9e <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 f90b 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	@ (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000010 	.word	0x20000010
 8001d50:	2000000c 	.word	0x2000000c

08001d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_IncTick+0x24>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <HAL_IncTick+0x24>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000010 	.word	0x20000010
 8001d78:	20000474 	.word	0x20000474

08001d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <HAL_GetTick+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000474 	.word	0x20000474

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	@ (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	@ (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	@ (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	@ 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	@ 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff29 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff3e 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff31 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa2 	bl	8001ef0 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff feda 	bl	8001d7c <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e099      	b.n	8002108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff4:	e00f      	b.n	8002016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff6:	f7ff fec1 	bl	8001d7c <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b05      	cmp	r3, #5
 8002002:	d908      	bls.n	8002016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2203      	movs	r2, #3
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e078      	b.n	8002108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e8      	bne.n	8001ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4b38      	ldr	r3, [pc, #224]	@ (8002110 <HAL_DMA_Init+0x158>)
 8002030:	4013      	ands	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	2b04      	cmp	r3, #4
 800206e:	d107      	bne.n	8002080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	4313      	orrs	r3, r2
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f023 0307 	bic.w	r3, r3, #7
 8002096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d117      	bne.n	80020da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fb2b 	bl	8002718 <DMA_CheckFifoParam>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2240      	movs	r2, #64	@ 0x40
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020d6:	2301      	movs	r3, #1
 80020d8:	e016      	b.n	8002108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fae2 	bl	80026ac <DMA_CalcBaseAndBitshift>
 80020e8:	4603      	mov	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	223f      	movs	r2, #63	@ 0x3f
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	f010803f 	.word	0xf010803f

08002114 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e050      	b.n	80021c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d101      	bne.n	8002136 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002132:	2302      	movs	r3, #2
 8002134:	e048      	b.n	80021c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2221      	movs	r2, #33	@ 0x21
 8002174:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa98 	bl	80026ac <DMA_CalcBaseAndBitshift>
 800217c:	4603      	mov	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a8:	223f      	movs	r2, #63	@ 0x3f
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_DMA_Start+0x20>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e026      	b.n	800223e <HAL_DMA_Start+0x6e>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d115      	bne.n	8002230 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fa19 	bl	8002650 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e005      	b.n	800223c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002238:	2302      	movs	r3, #2
 800223a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800223c:	7dfb      	ldrb	r3, [r7, #23]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_DMA_Start_IT+0x26>
 8002268:	2302      	movs	r3, #2
 800226a:	e040      	b.n	80022ee <HAL_DMA_Start_IT+0xa8>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d12f      	bne.n	80022e0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f9db 	bl	8002650 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	223f      	movs	r2, #63	@ 0x3f
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0216 	orr.w	r2, r2, #22
 80022b4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0208 	orr.w	r2, r2, #8
 80022cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e005      	b.n	80022ec <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
 80022ea:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d004      	beq.n	8002314 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e00c      	b.n	800232e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2205      	movs	r2, #5
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002348:	4b8e      	ldr	r3, [pc, #568]	@ (8002584 <HAL_DMA_IRQHandler+0x248>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a8e      	ldr	r2, [pc, #568]	@ (8002588 <HAL_DMA_IRQHandler+0x24c>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a9b      	lsrs	r3, r3, #10
 8002354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2208      	movs	r2, #8
 8002368:	409a      	lsls	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01a      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	2208      	movs	r2, #8
 8002396:	409a      	lsls	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ac:	2201      	movs	r2, #1
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d012      	beq.n	80023de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	2201      	movs	r2, #1
 80023cc:	409a      	lsls	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	2204      	movs	r2, #4
 80023e4:	409a      	lsls	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d012      	beq.n	8002414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00b      	beq.n	8002414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002400:	2204      	movs	r2, #4
 8002402:	409a      	lsls	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	2210      	movs	r2, #16
 800241a:	409a      	lsls	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d043      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d03c      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002436:	2210      	movs	r2, #16
 8002438:	409a      	lsls	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d018      	beq.n	800247e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d108      	bne.n	800246c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d024      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
 800246a:	e01f      	b.n	80024ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
 800247c:	e016      	b.n	80024ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d107      	bne.n	800249c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0208 	bic.w	r2, r2, #8
 800249a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	2220      	movs	r2, #32
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 808f 	beq.w	80025dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8087 	beq.w	80025dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	2220      	movs	r2, #32
 80024d4:	409a      	lsls	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d136      	bne.n	8002554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0216 	bic.w	r2, r2, #22
 80024f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <HAL_DMA_IRQHandler+0x1da>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0208 	bic.w	r2, r2, #8
 8002524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	223f      	movs	r2, #63	@ 0x3f
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002546:	2b00      	cmp	r3, #0
 8002548:	d07e      	beq.n	8002648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
        }
        return;
 8002552:	e079      	b.n	8002648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01d      	beq.n	800259e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	2b00      	cmp	r3, #0
 8002576:	d031      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
 8002580:	e02c      	b.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000
 8002588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e01e      	b.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0210 	bic.w	r2, r2, #16
 80025ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d032      	beq.n	800264a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2205      	movs	r2, #5
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3301      	adds	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	d307      	bcc.n	8002624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f2      	bne.n	8002608 <HAL_DMA_IRQHandler+0x2cc>
 8002622:	e000      	b.n	8002626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e000      	b.n	800264a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002648:	bf00      	nop
    }
  }
}
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800266c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b40      	cmp	r3, #64	@ 0x40
 800267c:	d108      	bne.n	8002690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800268e:	e007      	b.n	80026a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	60da      	str	r2, [r3, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3b10      	subs	r3, #16
 80026bc:	4a14      	ldr	r2, [pc, #80]	@ (8002710 <DMA_CalcBaseAndBitshift+0x64>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026c6:	4a13      	ldr	r2, [pc, #76]	@ (8002714 <DMA_CalcBaseAndBitshift+0x68>)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d909      	bls.n	80026ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	1d1a      	adds	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80026ec:	e007      	b.n	80026fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	aaaaaaab 	.word	0xaaaaaaab
 8002714:	08005cc4 	.word	0x08005cc4

08002718 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d11f      	bne.n	8002772 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d856      	bhi.n	80027e6 <DMA_CheckFifoParam+0xce>
 8002738:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <DMA_CheckFifoParam+0x28>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002751 	.word	0x08002751
 8002744:	08002763 	.word	0x08002763
 8002748:	08002751 	.word	0x08002751
 800274c:	080027e7 	.word	0x080027e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d046      	beq.n	80027ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002760:	e043      	b.n	80027ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800276a:	d140      	bne.n	80027ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e03d      	b.n	80027ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277a:	d121      	bne.n	80027c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d837      	bhi.n	80027f2 <DMA_CheckFifoParam+0xda>
 8002782:	a201      	add	r2, pc, #4	@ (adr r2, 8002788 <DMA_CheckFifoParam+0x70>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	08002799 	.word	0x08002799
 800278c:	0800279f 	.word	0x0800279f
 8002790:	08002799 	.word	0x08002799
 8002794:	080027b1 	.word	0x080027b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e030      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d025      	beq.n	80027f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ae:	e022      	b.n	80027f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027b8:	d11f      	bne.n	80027fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027be:	e01c      	b.n	80027fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d903      	bls.n	80027ce <DMA_CheckFifoParam+0xb6>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d003      	beq.n	80027d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027cc:	e018      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      break;
 80027d2:	e015      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e00b      	b.n	80027fe <DMA_CheckFifoParam+0xe6>
      break;
 80027e6:	bf00      	nop
 80027e8:	e00a      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027ea:	bf00      	nop
 80027ec:	e008      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e006      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e004      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e002      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;   
 80027fa:	bf00      	nop
 80027fc:	e000      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e159      	b.n	8002ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 8148 	bne.w	8002ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a2 	beq.w	8002ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b57      	ldr	r3, [pc, #348]	@ (8002af8 <HAL_GPIO_Init+0x2e8>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	4a56      	ldr	r2, [pc, #344]	@ (8002af8 <HAL_GPIO_Init+0x2e8>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a6:	4b54      	ldr	r3, [pc, #336]	@ (8002af8 <HAL_GPIO_Init+0x2e8>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b2:	4a52      	ldr	r2, [pc, #328]	@ (8002afc <HAL_GPIO_Init+0x2ec>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a49      	ldr	r2, [pc, #292]	@ (8002b00 <HAL_GPIO_Init+0x2f0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x202>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a48      	ldr	r2, [pc, #288]	@ (8002b04 <HAL_GPIO_Init+0x2f4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x1fe>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a47      	ldr	r2, [pc, #284]	@ (8002b08 <HAL_GPIO_Init+0x2f8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x1fa>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a46      	ldr	r2, [pc, #280]	@ (8002b0c <HAL_GPIO_Init+0x2fc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x1f6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a45      	ldr	r2, [pc, #276]	@ (8002b10 <HAL_GPIO_Init+0x300>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x1f2>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e008      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e004      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e002      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a12:	2300      	movs	r3, #0
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f002 0203 	and.w	r2, r2, #3
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	4093      	lsls	r3, r2
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a24:	4935      	ldr	r1, [pc, #212]	@ (8002afc <HAL_GPIO_Init+0x2ec>)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a32:	4b38      	ldr	r3, [pc, #224]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a56:	4a2f      	ldr	r2, [pc, #188]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a80:	4a24      	ldr	r2, [pc, #144]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a86:	4b23      	ldr	r3, [pc, #140]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	f67f aea2 	bls.w	800282c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3724      	adds	r7, #36	@ 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b62:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f806 	bl	8002b7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e267      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d075      	beq.n	8002c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb2:	4b88      	ldr	r3, [pc, #544]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b85      	ldr	r3, [pc, #532]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d112      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4b82      	ldr	r3, [pc, #520]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e242      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x74>
 8002bfa:	4b76      	ldr	r3, [pc, #472]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b70      	ldr	r3, [pc, #448]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6f      	ldr	r2, [pc, #444]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6c      	ldr	r2, [pc, #432]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c2c:	4b69      	ldr	r3, [pc, #420]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a68      	ldr	r2, [pc, #416]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b66      	ldr	r3, [pc, #408]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a65      	ldr	r2, [pc, #404]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f896 	bl	8001d7c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7ff f892 	bl	8001d7c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	@ 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e207      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7ff f882 	bl	8001d7c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff f87e 	bl	8001d7c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	@ 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1f3      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	4b51      	ldr	r3, [pc, #324]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002caa:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b47      	ldr	r3, [pc, #284]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d11c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b44      	ldr	r3, [pc, #272]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d116      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1c7      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4937      	ldr	r1, [pc, #220]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	e03a      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d04:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7ff f837 	bl	8001d7c <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d12:	f7ff f833 	bl	8001d7c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e1a8      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4925      	ldr	r1, [pc, #148]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d46:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7ff f816 	bl	8001d7c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d54:	f7ff f812 	bl	8001d7c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e187      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d036      	beq.n	8002dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d016      	beq.n	8002db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	@ (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fff6 	bl	8001d7c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe fff2 	bl	8001d7c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e167      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x200>
 8002db2:	e01b      	b.n	8002dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fe ffdf 	bl	8001d7c <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	e00e      	b.n	8002de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7fe ffdb 	bl	8001d7c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d907      	bls.n	8002de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e150      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b88      	ldr	r3, [pc, #544]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ea      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8097 	beq.w	8002f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b81      	ldr	r3, [pc, #516]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	4a7c      	ldr	r2, [pc, #496]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b77      	ldr	r3, [pc, #476]	@ (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b74      	ldr	r3, [pc, #464]	@ (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a73      	ldr	r2, [pc, #460]	@ (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe ff9b 	bl	8001d7c <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fe ff97 	bl	8001d7c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e10c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2ea>
 8002e70:	4b64      	ldr	r3, [pc, #400]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a63      	ldr	r2, [pc, #396]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x30c>
 8002e86:	4b5f      	ldr	r3, [pc, #380]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e92:	4b5c      	ldr	r3, [pc, #368]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a5b      	ldr	r2, [pc, #364]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002ea0:	4b58      	ldr	r3, [pc, #352]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	4a57      	ldr	r2, [pc, #348]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eac:	4b55      	ldr	r3, [pc, #340]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a54      	ldr	r2, [pc, #336]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe ff5c 	bl	8001d7c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe ff58 	bl	8001d7c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0cb      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	4b49      	ldr	r3, [pc, #292]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ee      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x334>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7fe ff46 	bl	8001d7c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fe ff42 	bl	8001d7c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0b5      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1c:	4b39      	ldr	r3, [pc, #228]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	4a38      	ldr	r2, [pc, #224]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a1 	beq.w	8003074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f32:	4b34      	ldr	r3, [pc, #208]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d05c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d141      	bne.n	8002fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b31      	ldr	r3, [pc, #196]	@ (800300c <HAL_RCC_OscConfig+0x478>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe ff16 	bl	8001d7c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe ff12 	bl	8001d7c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e087      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	4b27      	ldr	r3, [pc, #156]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	491b      	ldr	r1, [pc, #108]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x478>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe feeb 	bl	8001d7c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fee7 	bl	8001d7c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e05c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x416>
 8002fc8:	e054      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fed4 	bl	8001d7c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe fed0 	bl	8001d7c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e045      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x444>
 8002ff6:	e03d      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e038      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000
 800300c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_RCC_OscConfig+0x4ec>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d028      	beq.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d121      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d11a      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	3b01      	subs	r3, #1
 800305a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b68      	ldr	r3, [pc, #416]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90c      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b65      	ldr	r3, [pc, #404]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a58      	ldr	r2, [pc, #352]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a52      	ldr	r2, [pc, #328]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d044      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b3f      	ldr	r3, [pc, #252]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e067      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b37      	ldr	r3, [pc, #220]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4934      	ldr	r1, [pc, #208]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fe02 	bl	8001d7c <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fdfe 	bl	8001d7c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e04f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b25      	ldr	r3, [pc, #148]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20c      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b22      	ldr	r3, [pc, #136]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f821 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	@ (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	@ (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fd62 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00
 8003240:	40023800 	.word	0x40023800
 8003244:	08005bb4 	.word	0x08005bb4
 8003248:	20000000 	.word	0x20000000
 800324c:	2000000c 	.word	0x2000000c

08003250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b090      	sub	sp, #64	@ 0x40
 8003256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	637b      	str	r3, [r7, #52]	@ 0x34
 800325c:	2300      	movs	r3, #0
 800325e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003260:	2300      	movs	r3, #0
 8003262:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003268:	4b59      	ldr	r3, [pc, #356]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d00d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x40>
 8003274:	2b08      	cmp	r3, #8
 8003276:	f200 80a1 	bhi.w	80033bc <HAL_RCC_GetSysClockFreq+0x16c>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x34>
 800327e:	2b04      	cmp	r3, #4
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x3a>
 8003282:	e09b      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b53      	ldr	r3, [pc, #332]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003288:	e09b      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b53      	ldr	r3, [pc, #332]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800328c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800328e:	e098      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4b4f      	ldr	r3, [pc, #316]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003298:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329a:	4b4d      	ldr	r3, [pc, #308]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d028      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b4a      	ldr	r3, [pc, #296]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032b8:	2100      	movs	r1, #0
 80032ba:	4b47      	ldr	r3, [pc, #284]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032bc:	fb03 f201 	mul.w	r2, r3, r1
 80032c0:	2300      	movs	r3, #0
 80032c2:	fb00 f303 	mul.w	r3, r0, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	4a43      	ldr	r2, [pc, #268]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032ca:	fba0 1202 	umull	r1, r2, r0, r2
 80032ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d0:	460a      	mov	r2, r1
 80032d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032d6:	4413      	add	r3, r2
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032dc:	2200      	movs	r2, #0
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	61fa      	str	r2, [r7, #28]
 80032e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032ea:	f7fc ffc9 	bl	8000280 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4613      	mov	r3, r2
 80032f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f6:	e053      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f8:	4b35      	ldr	r3, [pc, #212]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	2200      	movs	r2, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	617a      	str	r2, [r7, #20]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800330a:	f04f 0b00 	mov.w	fp, #0
 800330e:	4652      	mov	r2, sl
 8003310:	465b      	mov	r3, fp
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	0159      	lsls	r1, r3, #5
 800331c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003320:	0150      	lsls	r0, r2, #5
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	ebb2 080a 	subs.w	r8, r2, sl
 800332a:	eb63 090b 	sbc.w	r9, r3, fp
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800333a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800333e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003342:	ebb2 0408 	subs.w	r4, r2, r8
 8003346:	eb63 0509 	sbc.w	r5, r3, r9
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	00eb      	lsls	r3, r5, #3
 8003354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003358:	00e2      	lsls	r2, r4, #3
 800335a:	4614      	mov	r4, r2
 800335c:	461d      	mov	r5, r3
 800335e:	eb14 030a 	adds.w	r3, r4, sl
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	eb45 030b 	adc.w	r3, r5, fp
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003376:	4629      	mov	r1, r5
 8003378:	028b      	lsls	r3, r1, #10
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003380:	4621      	mov	r1, r4
 8003382:	028a      	lsls	r2, r1, #10
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	2200      	movs	r2, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	60fa      	str	r2, [r7, #12]
 8003390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003394:	f7fc ff74 	bl	8000280 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80033b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3740      	adds	r7, #64	@ 0x40
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	016e3600 	.word	0x016e3600

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003400:	2b00      	cmp	r3, #0
 8003402:	d038      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003404:	4b68      	ldr	r3, [pc, #416]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800340a:	f7fe fcb7 	bl	8001d7c <HAL_GetTick>
 800340e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003412:	f7fe fcb3 	bl	8001d7c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0bd      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003424:	4b61      	ldr	r3, [pc, #388]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	495a      	ldr	r1, [pc, #360]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800344a:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003450:	f7fe fc94 	bl	8001d7c <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003458:	f7fe fc90 	bl	8001d7c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e09a      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800346a:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8083 	beq.w	800358a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	4b48      	ldr	r3, [pc, #288]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003492:	6413      	str	r3, [r2, #64]	@ 0x40
 8003494:	4b45      	ldr	r3, [pc, #276]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034a0:	4b43      	ldr	r3, [pc, #268]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a42      	ldr	r2, [pc, #264]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fc66 	bl	8001d7c <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fe fc62 	bl	8001d7c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e06c      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034c6:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d2:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034da:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02f      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d028      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f0:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034fa:	4b2e      	ldr	r3, [pc, #184]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003500:	4b2c      	ldr	r3, [pc, #176]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003506:	4a29      	ldr	r2, [pc, #164]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800350c:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d114      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fc30 	bl	8001d7c <HAL_GetTick>
 800351c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fe fc2c 	bl	8001d7c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e034      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800354e:	d10d      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003550:	4b16      	ldr	r3, [pc, #88]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003564:	4911      	ldr	r1, [pc, #68]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	e005      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800356c:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003576:	6093      	str	r3, [r2, #8]
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	4909      	ldr	r1, [pc, #36]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7d1a      	ldrb	r2, [r3, #20]
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800359c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	42470068 	.word	0x42470068
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470e40 	.word	0x42470e40
 80035b8:	424711e0 	.word	0x424711e0

080035bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e073      	b.n	80036ba <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7f5b      	ldrb	r3, [r3, #29]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fa26 	bl	8000a34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d055      	beq.n	80036a8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	22ca      	movs	r2, #202	@ 0xca
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2253      	movs	r2, #83	@ 0x53
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f99d 	bl	800394c <RTC_EnterInitMode>
 8003612:	4603      	mov	r3, r0
 8003614:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d12c      	bne.n	8003676 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800362a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800362e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6919      	ldr	r1, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	041a      	lsls	r2, r3, #16
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f9a4 	bl	80039ba <RTC_ExitInitMode>
 8003672:	4603      	mov	r3, r0
 8003674:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d110      	bne.n	800369e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	22ff      	movs	r2, #255	@ 0xff
 80036a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80036a6:	e001      	b.n	80036ac <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	7f1b      	ldrb	r3, [r3, #28]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_RTC_SetTime+0x1c>
 80036da:	2302      	movs	r3, #2
 80036dc:	e087      	b.n	80037ee <HAL_RTC_SetTime+0x12c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2202      	movs	r2, #2
 80036e8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d126      	bne.n	800373e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2200      	movs	r2, #0
 8003702:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f97b 	bl	8003a04 <RTC_ByteToBcd2>
 800370e:	4603      	mov	r3, r0
 8003710:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f974 	bl	8003a04 <RTC_ByteToBcd2>
 800371c:	4603      	mov	r3, r0
 800371e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003720:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	789b      	ldrb	r3, [r3, #2]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f96c 	bl	8003a04 <RTC_ByteToBcd2>
 800372c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800372e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	78db      	ldrb	r3, [r3, #3]
 8003736:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e018      	b.n	8003770 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800375e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003764:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	78db      	ldrb	r3, [r3, #3]
 800376a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	22ca      	movs	r2, #202	@ 0xca
 8003776:	625a      	str	r2, [r3, #36]	@ 0x24
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2253      	movs	r2, #83	@ 0x53
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f8e3 	bl	800394c <RTC_EnterInitMode>
 8003786:	4603      	mov	r3, r0
 8003788:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d120      	bne.n	80037d2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800379a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800379e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6899      	ldr	r1, [r3, #8]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	431a      	orrs	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f8f6 	bl	80039ba <RTC_ExitInitMode>
 80037ce:	4603      	mov	r3, r0
 80037d0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	22ff      	movs	r2, #255	@ 0xff
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]

  return status;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd90      	pop	{r4, r7, pc}

080037f6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037f6:	b590      	push	{r4, r7, lr}
 80037f8:	b087      	sub	sp, #28
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	7f1b      	ldrb	r3, [r3, #28]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_RTC_SetDate+0x1c>
 800380e:	2302      	movs	r3, #2
 8003810:	e071      	b.n	80038f6 <HAL_RTC_SetDate+0x100>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2202      	movs	r2, #2
 800381c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10e      	bne.n	8003842 <HAL_RTC_SetDate+0x4c>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	785b      	ldrb	r3, [r3, #1]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	f023 0310 	bic.w	r3, r3, #16
 8003838:	b2db      	uxtb	r3, r3
 800383a:	330a      	adds	r3, #10
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11c      	bne.n	8003882 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	78db      	ldrb	r3, [r3, #3]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f8d9 	bl	8003a04 <RTC_ByteToBcd2>
 8003852:	4603      	mov	r3, r0
 8003854:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	785b      	ldrb	r3, [r3, #1]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f8d2 	bl	8003a04 <RTC_ByteToBcd2>
 8003860:	4603      	mov	r3, r0
 8003862:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003864:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	789b      	ldrb	r3, [r3, #2]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f8ca 	bl	8003a04 <RTC_ByteToBcd2>
 8003870:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003872:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e00e      	b.n	80038a0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	78db      	ldrb	r3, [r3, #3]
 8003886:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800388e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003894:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	22ca      	movs	r2, #202	@ 0xca
 80038a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2253      	movs	r2, #83	@ 0x53
 80038ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f84b 	bl	800394c <RTC_EnterInitMode>
 80038b6:	4603      	mov	r3, r0
 80038b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10c      	bne.n	80038da <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80038ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80038ce:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f872 	bl	80039ba <RTC_ExitInitMode>
 80038d6:	4603      	mov	r3, r0
 80038d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	22ff      	movs	r2, #255	@ 0xff
 80038ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]

  return status;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
	...

08003900 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0d      	ldr	r2, [pc, #52]	@ (8003948 <HAL_RTC_WaitForSynchro+0x48>)
 8003912:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003914:	f7fe fa32 	bl	8001d7c <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800391a:	e009      	b.n	8003930 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800391c:	f7fe fa2e 	bl	8001d7c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800392a:	d901      	bls.n	8003930 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e007      	b.n	8003940 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ee      	beq.n	800391c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	00013f5f 	.word	0x00013f5f

0800394c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d122      	bne.n	80039b0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003978:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800397a:	f7fe f9ff 	bl	8001d7c <HAL_GetTick>
 800397e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003980:	e00c      	b.n	800399c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003982:	f7fe f9fb 	bl	8001d7c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003990:	d904      	bls.n	800399c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2204      	movs	r2, #4
 8003996:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <RTC_EnterInitMode+0x64>
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d1e8      	bne.n	8003982 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039d4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff8b 	bl	8003900 <HAL_RTC_WaitForSynchro>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2204      	movs	r2, #4
 80039f4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003a12:	e005      	b.n	8003a20 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	3b0a      	subs	r3, #10
 8003a1e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	2b09      	cmp	r3, #9
 8003a24:	d8f6      	bhi.n	8003a14 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	b2db      	uxtb	r3, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e041      	b.n	8003ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd f810 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 fcf0 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d001      	beq.n	8003af8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e03c      	b.n	8003b72 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_TIM_Base_Start+0xa0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_TIM_Base_Start+0x5c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b12:	d013      	beq.n	8003b3c <HAL_TIM_Base_Start+0x5c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1a      	ldr	r2, [pc, #104]	@ (8003b84 <HAL_TIM_Base_Start+0xa4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <HAL_TIM_Base_Start+0x5c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a19      	ldr	r2, [pc, #100]	@ (8003b88 <HAL_TIM_Base_Start+0xa8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_TIM_Base_Start+0x5c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a17      	ldr	r2, [pc, #92]	@ (8003b8c <HAL_TIM_Base_Start+0xac>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_TIM_Base_Start+0x5c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_TIM_Base_Start+0xb0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d111      	bne.n	8003b60 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d010      	beq.n	8003b70 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	e007      	b.n	8003b70 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40014000 	.word	0x40014000

08003b94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e041      	b.n	8003c2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f839 	bl	8003c32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 fc46 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_TIM_PWM_Start+0x24>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e022      	b.n	8003cb2 <HAL_TIM_PWM_Start+0x6a>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d109      	bne.n	8003c86 <HAL_TIM_PWM_Start+0x3e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	bf14      	ite	ne
 8003c7e:	2301      	movne	r3, #1
 8003c80:	2300      	moveq	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e015      	b.n	8003cb2 <HAL_TIM_PWM_Start+0x6a>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d109      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0x58>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e008      	b.n	8003cb2 <HAL_TIM_PWM_Start+0x6a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e068      	b.n	8003d8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PWM_Start+0x82>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc8:	e013      	b.n	8003cf2 <HAL_TIM_PWM_Start+0xaa>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_PWM_Start+0x92>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd8:	e00b      	b.n	8003cf2 <HAL_TIM_PWM_Start+0xaa>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_PWM_Start+0xa2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce8:	e003      	b.n	8003cf2 <HAL_TIM_PWM_Start+0xaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	6839      	ldr	r1, [r7, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fe64 	bl	80049c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a23      	ldr	r2, [pc, #140]	@ (8003d94 <HAL_TIM_PWM_Start+0x14c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d94 <HAL_TIM_PWM_Start+0x14c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d018      	beq.n	8003d56 <HAL_TIM_PWM_Start+0x10e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2c:	d013      	beq.n	8003d56 <HAL_TIM_PWM_Start+0x10e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a19      	ldr	r2, [pc, #100]	@ (8003d98 <HAL_TIM_PWM_Start+0x150>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00e      	beq.n	8003d56 <HAL_TIM_PWM_Start+0x10e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a17      	ldr	r2, [pc, #92]	@ (8003d9c <HAL_TIM_PWM_Start+0x154>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d009      	beq.n	8003d56 <HAL_TIM_PWM_Start+0x10e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a16      	ldr	r2, [pc, #88]	@ (8003da0 <HAL_TIM_PWM_Start+0x158>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_TIM_PWM_Start+0x10e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a14      	ldr	r2, [pc, #80]	@ (8003da4 <HAL_TIM_PWM_Start+0x15c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d111      	bne.n	8003d7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b06      	cmp	r3, #6
 8003d66:	d010      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d78:	e007      	b.n	8003d8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0201 	orr.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40010000 	.word	0x40010000
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00
 8003da4:	40014000 	.word	0x40014000

08003da8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d855      	bhi.n	8003e68 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003e69 	.word	0x08003e69
 8003dcc:	08003e69 	.word	0x08003e69
 8003dd0:	08003e69 	.word	0x08003e69
 8003dd4:	08003e15 	.word	0x08003e15
 8003dd8:	08003e69 	.word	0x08003e69
 8003ddc:	08003e69 	.word	0x08003e69
 8003de0:	08003e69 	.word	0x08003e69
 8003de4:	08003e31 	.word	0x08003e31
 8003de8:	08003e69 	.word	0x08003e69
 8003dec:	08003e69 	.word	0x08003e69
 8003df0:	08003e69 	.word	0x08003e69
 8003df4:	08003e4d 	.word	0x08003e4d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fa72 	bl	80022f6 <HAL_DMA_Abort_IT>
      break;
 8003e12:	e02c      	b.n	8003e6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe fa64 	bl	80022f6 <HAL_DMA_Abort_IT>
      break;
 8003e2e:	e01e      	b.n	8003e6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fe fa56 	bl	80022f6 <HAL_DMA_Abort_IT>
      break;
 8003e4a:	e010      	b.n	8003e6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fa48 	bl	80022f6 <HAL_DMA_Abort_IT>
      break;
 8003e66:	e002      	b.n	8003e6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d157      	bne.n	8003f24 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fda3 	bl	80049c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d117      	bne.n	8003ebc <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6a1a      	ldr	r2, [r3, #32]
 8003e92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10f      	bne.n	8003ebc <HAL_TIM_PWM_Stop_DMA+0x114>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
 8003ea2:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_PWM_Stop_DMA+0x114>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <HAL_TIM_PWM_Stop_DMA+0x144>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a1a      	ldr	r2, [r3, #32]
 8003ed2:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_PWM_Stop_DMA+0x144>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_TIM_PWM_Stop_DMA+0x154>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003efa:	e013      	b.n	8003f24 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d104      	bne.n	8003f0c <HAL_TIM_PWM_Stop_DMA+0x164>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f0a:	e00b      	b.n	8003f24 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d104      	bne.n	8003f1c <HAL_TIM_PWM_Stop_DMA+0x174>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f1a:	e003      	b.n	8003f24 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000

08003f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0202 	mvn.w	r2, #2
 8003f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa5b 	bl	800443a <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa4d 	bl	8004426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fe15 	bl	8004bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01b      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0204 	mvn.w	r2, #4
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa35 	bl	800443a <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa27 	bl	8004426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fdef 	bl	8004bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0208 	mvn.w	r2, #8
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2204      	movs	r2, #4
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa0f 	bl	800443a <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa01 	bl	8004426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fdc9 	bl	8004bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0210 	mvn.w	r2, #16
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2208      	movs	r2, #8
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9e9 	bl	800443a <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f9db 	bl	8004426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fda3 	bl	8004bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0201 	mvn.w	r2, #1
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fcc4 	bl	8001a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00c      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fd72 	bl	8004ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9b3 	bl	800444e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0220 	mvn.w	r2, #32
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fd44 	bl	8004b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800412e:	2302      	movs	r3, #2
 8004130:	e0ae      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	f200 809f 	bhi.w	8004280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004142:	a201      	add	r2, pc, #4	@ (adr r2, 8004148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	0800417d 	.word	0x0800417d
 800414c:	08004281 	.word	0x08004281
 8004150:	08004281 	.word	0x08004281
 8004154:	08004281 	.word	0x08004281
 8004158:	080041bd 	.word	0x080041bd
 800415c:	08004281 	.word	0x08004281
 8004160:	08004281 	.word	0x08004281
 8004164:	08004281 	.word	0x08004281
 8004168:	080041ff 	.word	0x080041ff
 800416c:	08004281 	.word	0x08004281
 8004170:	08004281 	.word	0x08004281
 8004174:	08004281 	.word	0x08004281
 8004178:	0800423f 	.word	0x0800423f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f9fa 	bl	800457c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0208 	orr.w	r2, r2, #8
 8004196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	619a      	str	r2, [r3, #24]
      break;
 80041ba:	e064      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fa40 	bl	8004648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
      break;
 80041fc:	e043      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fa8b 	bl	8004720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0208 	orr.w	r2, r2, #8
 8004218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0204 	bic.w	r2, r2, #4
 8004228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	61da      	str	r2, [r3, #28]
      break;
 800423c:	e023      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fad5 	bl	80047f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	61da      	str	r2, [r3, #28]
      break;
 800427e:	e002      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      break;
 8004284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_TIM_ConfigClockSource+0x1c>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e0b4      	b.n	800441e <HAL_TIM_ConfigClockSource+0x186>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ec:	d03e      	beq.n	800436c <HAL_TIM_ConfigClockSource+0xd4>
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f2:	f200 8087 	bhi.w	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	f000 8086 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x172>
 80042fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004302:	d87f      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b70      	cmp	r3, #112	@ 0x70
 8004306:	d01a      	beq.n	800433e <HAL_TIM_ConfigClockSource+0xa6>
 8004308:	2b70      	cmp	r3, #112	@ 0x70
 800430a:	d87b      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b60      	cmp	r3, #96	@ 0x60
 800430e:	d050      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004310:	2b60      	cmp	r3, #96	@ 0x60
 8004312:	d877      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b50      	cmp	r3, #80	@ 0x50
 8004316:	d03c      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0xfa>
 8004318:	2b50      	cmp	r3, #80	@ 0x50
 800431a:	d873      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	d058      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004320:	2b40      	cmp	r3, #64	@ 0x40
 8004322:	d86f      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b30      	cmp	r3, #48	@ 0x30
 8004326:	d064      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004328:	2b30      	cmp	r3, #48	@ 0x30
 800432a:	d86b      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d060      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004330:	2b20      	cmp	r3, #32
 8004332:	d867      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05c      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004338:	2b10      	cmp	r3, #16
 800433a:	d05a      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x15a>
 800433c:	e062      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800434e:	f000 fb1b 	bl	8004988 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	609a      	str	r2, [r3, #8]
      break;
 800436a:	e04f      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800437c:	f000 fb04 	bl	8004988 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800438e:	609a      	str	r2, [r3, #8]
      break;
 8004390:	e03c      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 fa78 	bl	8004894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2150      	movs	r1, #80	@ 0x50
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fad1 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 80043b0:	e02c      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fa97 	bl	80048f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2160      	movs	r1, #96	@ 0x60
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fac1 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e01c      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 fa58 	bl	8004894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2140      	movs	r1, #64	@ 0x40
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fab1 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e00c      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4619      	mov	r1, r3
 80043fc:	4610      	mov	r0, r2
 80043fe:	f000 faa8 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004402:	e003      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e000      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800440a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3a      	ldr	r2, [pc, #232]	@ (8004560 <TIM_Base_SetConfig+0xfc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00f      	beq.n	800449c <TIM_Base_SetConfig+0x38>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004482:	d00b      	beq.n	800449c <TIM_Base_SetConfig+0x38>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a37      	ldr	r2, [pc, #220]	@ (8004564 <TIM_Base_SetConfig+0x100>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d007      	beq.n	800449c <TIM_Base_SetConfig+0x38>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a36      	ldr	r2, [pc, #216]	@ (8004568 <TIM_Base_SetConfig+0x104>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <TIM_Base_SetConfig+0x38>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a35      	ldr	r2, [pc, #212]	@ (800456c <TIM_Base_SetConfig+0x108>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d108      	bne.n	80044ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004560 <TIM_Base_SetConfig+0xfc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01b      	beq.n	80044ee <TIM_Base_SetConfig+0x8a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044bc:	d017      	beq.n	80044ee <TIM_Base_SetConfig+0x8a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a28      	ldr	r2, [pc, #160]	@ (8004564 <TIM_Base_SetConfig+0x100>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <TIM_Base_SetConfig+0x8a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a27      	ldr	r2, [pc, #156]	@ (8004568 <TIM_Base_SetConfig+0x104>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00f      	beq.n	80044ee <TIM_Base_SetConfig+0x8a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a26      	ldr	r2, [pc, #152]	@ (800456c <TIM_Base_SetConfig+0x108>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00b      	beq.n	80044ee <TIM_Base_SetConfig+0x8a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a25      	ldr	r2, [pc, #148]	@ (8004570 <TIM_Base_SetConfig+0x10c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <TIM_Base_SetConfig+0x8a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a24      	ldr	r2, [pc, #144]	@ (8004574 <TIM_Base_SetConfig+0x110>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_Base_SetConfig+0x8a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a23      	ldr	r2, [pc, #140]	@ (8004578 <TIM_Base_SetConfig+0x114>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d108      	bne.n	8004500 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0e      	ldr	r2, [pc, #56]	@ (8004560 <TIM_Base_SetConfig+0xfc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d105      	bne.n	8004552 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f023 0201 	bic.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	611a      	str	r2, [r3, #16]
  }
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40014000 	.word	0x40014000
 8004574:	40014400 	.word	0x40014400
 8004578:	40014800 	.word	0x40014800

0800457c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 0201 	bic.w	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 0302 	bic.w	r3, r3, #2
 80045c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004644 <TIM_OC1_SetConfig+0xc8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10c      	bne.n	80045f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0308 	bic.w	r3, r3, #8
 80045de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a13      	ldr	r2, [pc, #76]	@ (8004644 <TIM_OC1_SetConfig+0xc8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d111      	bne.n	800461e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	621a      	str	r2, [r3, #32]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	40010000 	.word	0x40010000

08004648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f023 0210 	bic.w	r2, r3, #16
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800467e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0320 	bic.w	r3, r3, #32
 8004692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <TIM_OC2_SetConfig+0xd4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d10d      	bne.n	80046c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a15      	ldr	r2, [pc, #84]	@ (800471c <TIM_OC2_SetConfig+0xd4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d113      	bne.n	80046f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000

08004720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <TIM_OC3_SetConfig+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10d      	bne.n	800479a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <TIM_OC3_SetConfig+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d113      	bne.n	80047ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40010000 	.word	0x40010000

080047f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800483e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	031b      	lsls	r3, r3, #12
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a10      	ldr	r2, [pc, #64]	@ (8004890 <TIM_OC4_SetConfig+0x9c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d109      	bne.n	8004868 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800485a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	019b      	lsls	r3, r3, #6
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000

08004894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 030a 	bic.w	r3, r3, #10
 80048d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b087      	sub	sp, #28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f023 0210 	bic.w	r2, r3, #16
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800491c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	031b      	lsls	r3, r3, #12
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800492e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	f043 0307 	orr.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	021a      	lsls	r2, r3, #8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2201      	movs	r2, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1a      	ldr	r2, [r3, #32]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	401a      	ands	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1a      	ldr	r2, [r3, #32]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e050      	b.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a78:	d013      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a18      	ldr	r2, [pc, #96]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a16      	ldr	r2, [pc, #88]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a15      	ldr	r2, [pc, #84]	@ (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	@ (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d10c      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800
 8004ae8:	40000c00 	.word	0x40000c00
 8004aec:	40014000 	.word	0x40014000

08004af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e03d      	b.n	8004b88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIM_PWM_PulseFinishedCallback>:

    // Reset the data sent flag for the next transmission
    datasentflag = 0;
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff f8ee 	bl	8003da8 <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    datasentflag = 1;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	@ (8004bdc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000478 	.word	0x20000478

08004be0 <rand>:
 8004be0:	4b16      	ldr	r3, [pc, #88]	@ (8004c3c <rand+0x5c>)
 8004be2:	b510      	push	{r4, lr}
 8004be4:	681c      	ldr	r4, [r3, #0]
 8004be6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004be8:	b9b3      	cbnz	r3, 8004c18 <rand+0x38>
 8004bea:	2018      	movs	r0, #24
 8004bec:	f000 fa20 	bl	8005030 <malloc>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6320      	str	r0, [r4, #48]	@ 0x30
 8004bf4:	b920      	cbnz	r0, 8004c00 <rand+0x20>
 8004bf6:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <rand+0x60>)
 8004bf8:	4812      	ldr	r0, [pc, #72]	@ (8004c44 <rand+0x64>)
 8004bfa:	2152      	movs	r1, #82	@ 0x52
 8004bfc:	f000 f9b0 	bl	8004f60 <__assert_func>
 8004c00:	4911      	ldr	r1, [pc, #68]	@ (8004c48 <rand+0x68>)
 8004c02:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <rand+0x6c>)
 8004c04:	e9c0 1300 	strd	r1, r3, [r0]
 8004c08:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <rand+0x70>)
 8004c0a:	6083      	str	r3, [r0, #8]
 8004c0c:	230b      	movs	r3, #11
 8004c0e:	8183      	strh	r3, [r0, #12]
 8004c10:	2100      	movs	r1, #0
 8004c12:	2001      	movs	r0, #1
 8004c14:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c1a:	480e      	ldr	r0, [pc, #56]	@ (8004c54 <rand+0x74>)
 8004c1c:	690b      	ldr	r3, [r1, #16]
 8004c1e:	694c      	ldr	r4, [r1, #20]
 8004c20:	4a0d      	ldr	r2, [pc, #52]	@ (8004c58 <rand+0x78>)
 8004c22:	4358      	muls	r0, r3
 8004c24:	fb02 0004 	mla	r0, r2, r4, r0
 8004c28:	fba3 3202 	umull	r3, r2, r3, r2
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	eb40 0002 	adc.w	r0, r0, r2
 8004c32:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004c36:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004c3a:	bd10      	pop	{r4, pc}
 8004c3c:	20000020 	.word	0x20000020
 8004c40:	08005ccc 	.word	0x08005ccc
 8004c44:	08005ce3 	.word	0x08005ce3
 8004c48:	abcd330e 	.word	0xabcd330e
 8004c4c:	e66d1234 	.word	0xe66d1234
 8004c50:	0005deec 	.word	0x0005deec
 8004c54:	5851f42d 	.word	0x5851f42d
 8004c58:	4c957f2d 	.word	0x4c957f2d

08004c5c <std>:
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	4604      	mov	r4, r0
 8004c62:	e9c0 3300 	strd	r3, r3, [r0]
 8004c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c6a:	6083      	str	r3, [r0, #8]
 8004c6c:	8181      	strh	r1, [r0, #12]
 8004c6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c70:	81c2      	strh	r2, [r0, #14]
 8004c72:	6183      	str	r3, [r0, #24]
 8004c74:	4619      	mov	r1, r3
 8004c76:	2208      	movs	r2, #8
 8004c78:	305c      	adds	r0, #92	@ 0x5c
 8004c7a:	f000 f8f4 	bl	8004e66 <memset>
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <std+0x58>)
 8004c80:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <std+0x5c>)
 8004c84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c86:	4b0d      	ldr	r3, [pc, #52]	@ (8004cbc <std+0x60>)
 8004c88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <std+0x64>)
 8004c8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <std+0x68>)
 8004c90:	6224      	str	r4, [r4, #32]
 8004c92:	429c      	cmp	r4, r3
 8004c94:	d006      	beq.n	8004ca4 <std+0x48>
 8004c96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c9a:	4294      	cmp	r4, r2
 8004c9c:	d002      	beq.n	8004ca4 <std+0x48>
 8004c9e:	33d0      	adds	r3, #208	@ 0xd0
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d105      	bne.n	8004cb0 <std+0x54>
 8004ca4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cac:	f000 b954 	b.w	8004f58 <__retarget_lock_init_recursive>
 8004cb0:	bd10      	pop	{r4, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08004de1 	.word	0x08004de1
 8004cb8:	08004e03 	.word	0x08004e03
 8004cbc:	08004e3b 	.word	0x08004e3b
 8004cc0:	08004e5f 	.word	0x08004e5f
 8004cc4:	2000047c 	.word	0x2000047c

08004cc8 <stdio_exit_handler>:
 8004cc8:	4a02      	ldr	r2, [pc, #8]	@ (8004cd4 <stdio_exit_handler+0xc>)
 8004cca:	4903      	ldr	r1, [pc, #12]	@ (8004cd8 <stdio_exit_handler+0x10>)
 8004ccc:	4803      	ldr	r0, [pc, #12]	@ (8004cdc <stdio_exit_handler+0x14>)
 8004cce:	f000 b869 	b.w	8004da4 <_fwalk_sglue>
 8004cd2:	bf00      	nop
 8004cd4:	20000014 	.word	0x20000014
 8004cd8:	080052a5 	.word	0x080052a5
 8004cdc:	20000024 	.word	0x20000024

08004ce0 <cleanup_stdio>:
 8004ce0:	6841      	ldr	r1, [r0, #4]
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <cleanup_stdio+0x34>)
 8004ce4:	4299      	cmp	r1, r3
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	4604      	mov	r4, r0
 8004cea:	d001      	beq.n	8004cf0 <cleanup_stdio+0x10>
 8004cec:	f000 fada 	bl	80052a4 <_fflush_r>
 8004cf0:	68a1      	ldr	r1, [r4, #8]
 8004cf2:	4b09      	ldr	r3, [pc, #36]	@ (8004d18 <cleanup_stdio+0x38>)
 8004cf4:	4299      	cmp	r1, r3
 8004cf6:	d002      	beq.n	8004cfe <cleanup_stdio+0x1e>
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f000 fad3 	bl	80052a4 <_fflush_r>
 8004cfe:	68e1      	ldr	r1, [r4, #12]
 8004d00:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <cleanup_stdio+0x3c>)
 8004d02:	4299      	cmp	r1, r3
 8004d04:	d004      	beq.n	8004d10 <cleanup_stdio+0x30>
 8004d06:	4620      	mov	r0, r4
 8004d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d0c:	f000 baca 	b.w	80052a4 <_fflush_r>
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	bf00      	nop
 8004d14:	2000047c 	.word	0x2000047c
 8004d18:	200004e4 	.word	0x200004e4
 8004d1c:	2000054c 	.word	0x2000054c

08004d20 <global_stdio_init.part.0>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <global_stdio_init.part.0+0x30>)
 8004d24:	4c0b      	ldr	r4, [pc, #44]	@ (8004d54 <global_stdio_init.part.0+0x34>)
 8004d26:	4a0c      	ldr	r2, [pc, #48]	@ (8004d58 <global_stdio_init.part.0+0x38>)
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2104      	movs	r1, #4
 8004d30:	f7ff ff94 	bl	8004c5c <std>
 8004d34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d38:	2201      	movs	r2, #1
 8004d3a:	2109      	movs	r1, #9
 8004d3c:	f7ff ff8e 	bl	8004c5c <std>
 8004d40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d44:	2202      	movs	r2, #2
 8004d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d4a:	2112      	movs	r1, #18
 8004d4c:	f7ff bf86 	b.w	8004c5c <std>
 8004d50:	200005b4 	.word	0x200005b4
 8004d54:	2000047c 	.word	0x2000047c
 8004d58:	08004cc9 	.word	0x08004cc9

08004d5c <__sfp_lock_acquire>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	@ (8004d64 <__sfp_lock_acquire+0x8>)
 8004d5e:	f000 b8fc 	b.w	8004f5a <__retarget_lock_acquire_recursive>
 8004d62:	bf00      	nop
 8004d64:	200005bd 	.word	0x200005bd

08004d68 <__sfp_lock_release>:
 8004d68:	4801      	ldr	r0, [pc, #4]	@ (8004d70 <__sfp_lock_release+0x8>)
 8004d6a:	f000 b8f7 	b.w	8004f5c <__retarget_lock_release_recursive>
 8004d6e:	bf00      	nop
 8004d70:	200005bd 	.word	0x200005bd

08004d74 <__sinit>:
 8004d74:	b510      	push	{r4, lr}
 8004d76:	4604      	mov	r4, r0
 8004d78:	f7ff fff0 	bl	8004d5c <__sfp_lock_acquire>
 8004d7c:	6a23      	ldr	r3, [r4, #32]
 8004d7e:	b11b      	cbz	r3, 8004d88 <__sinit+0x14>
 8004d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d84:	f7ff bff0 	b.w	8004d68 <__sfp_lock_release>
 8004d88:	4b04      	ldr	r3, [pc, #16]	@ (8004d9c <__sinit+0x28>)
 8004d8a:	6223      	str	r3, [r4, #32]
 8004d8c:	4b04      	ldr	r3, [pc, #16]	@ (8004da0 <__sinit+0x2c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f5      	bne.n	8004d80 <__sinit+0xc>
 8004d94:	f7ff ffc4 	bl	8004d20 <global_stdio_init.part.0>
 8004d98:	e7f2      	b.n	8004d80 <__sinit+0xc>
 8004d9a:	bf00      	nop
 8004d9c:	08004ce1 	.word	0x08004ce1
 8004da0:	200005b4 	.word	0x200005b4

08004da4 <_fwalk_sglue>:
 8004da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da8:	4607      	mov	r7, r0
 8004daa:	4688      	mov	r8, r1
 8004dac:	4614      	mov	r4, r2
 8004dae:	2600      	movs	r6, #0
 8004db0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004db4:	f1b9 0901 	subs.w	r9, r9, #1
 8004db8:	d505      	bpl.n	8004dc6 <_fwalk_sglue+0x22>
 8004dba:	6824      	ldr	r4, [r4, #0]
 8004dbc:	2c00      	cmp	r4, #0
 8004dbe:	d1f7      	bne.n	8004db0 <_fwalk_sglue+0xc>
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dc6:	89ab      	ldrh	r3, [r5, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d907      	bls.n	8004ddc <_fwalk_sglue+0x38>
 8004dcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	d003      	beq.n	8004ddc <_fwalk_sglue+0x38>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	47c0      	blx	r8
 8004dda:	4306      	orrs	r6, r0
 8004ddc:	3568      	adds	r5, #104	@ 0x68
 8004dde:	e7e9      	b.n	8004db4 <_fwalk_sglue+0x10>

08004de0 <__sread>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	460c      	mov	r4, r1
 8004de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de8:	f000 f868 	bl	8004ebc <_read_r>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	bfab      	itete	ge
 8004df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004df2:	89a3      	ldrhlt	r3, [r4, #12]
 8004df4:	181b      	addge	r3, r3, r0
 8004df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dfa:	bfac      	ite	ge
 8004dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004dfe:	81a3      	strhlt	r3, [r4, #12]
 8004e00:	bd10      	pop	{r4, pc}

08004e02 <__swrite>:
 8004e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e06:	461f      	mov	r7, r3
 8004e08:	898b      	ldrh	r3, [r1, #12]
 8004e0a:	05db      	lsls	r3, r3, #23
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	4616      	mov	r6, r2
 8004e12:	d505      	bpl.n	8004e20 <__swrite+0x1e>
 8004e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e18:	2302      	movs	r3, #2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f000 f83c 	bl	8004e98 <_lseek_r>
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	463b      	mov	r3, r7
 8004e30:	4628      	mov	r0, r5
 8004e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e36:	f000 b853 	b.w	8004ee0 <_write_r>

08004e3a <__sseek>:
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e42:	f000 f829 	bl	8004e98 <_lseek_r>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	bf15      	itete	ne
 8004e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e56:	81a3      	strheq	r3, [r4, #12]
 8004e58:	bf18      	it	ne
 8004e5a:	81a3      	strhne	r3, [r4, #12]
 8004e5c:	bd10      	pop	{r4, pc}

08004e5e <__sclose>:
 8004e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e62:	f000 b809 	b.w	8004e78 <_close_r>

08004e66 <memset>:
 8004e66:	4402      	add	r2, r0
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d100      	bne.n	8004e70 <memset+0xa>
 8004e6e:	4770      	bx	lr
 8004e70:	f803 1b01 	strb.w	r1, [r3], #1
 8004e74:	e7f9      	b.n	8004e6a <memset+0x4>
	...

08004e78 <_close_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	@ (8004e94 <_close_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fb ff36 	bl	8000cf4 <_close>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_close_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_close_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	200005b8 	.word	0x200005b8

08004e98 <_lseek_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d07      	ldr	r5, [pc, #28]	@ (8004eb8 <_lseek_r+0x20>)
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	602a      	str	r2, [r5, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f7fb ff4b 	bl	8000d42 <_lseek>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_lseek_r+0x1e>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_lseek_r+0x1e>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	200005b8 	.word	0x200005b8

08004ebc <_read_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d07      	ldr	r5, [pc, #28]	@ (8004edc <_read_r+0x20>)
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	602a      	str	r2, [r5, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f7fb fed9 	bl	8000c82 <_read>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_read_r+0x1e>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_read_r+0x1e>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	200005b8 	.word	0x200005b8

08004ee0 <_write_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d07      	ldr	r5, [pc, #28]	@ (8004f00 <_write_r+0x20>)
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	4608      	mov	r0, r1
 8004ee8:	4611      	mov	r1, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	602a      	str	r2, [r5, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f7fb fee4 	bl	8000cbc <_write>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_write_r+0x1e>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_write_r+0x1e>
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	200005b8 	.word	0x200005b8

08004f04 <__errno>:
 8004f04:	4b01      	ldr	r3, [pc, #4]	@ (8004f0c <__errno+0x8>)
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000020 	.word	0x20000020

08004f10 <__libc_init_array>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4d0d      	ldr	r5, [pc, #52]	@ (8004f48 <__libc_init_array+0x38>)
 8004f14:	4c0d      	ldr	r4, [pc, #52]	@ (8004f4c <__libc_init_array+0x3c>)
 8004f16:	1b64      	subs	r4, r4, r5
 8004f18:	10a4      	asrs	r4, r4, #2
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	42a6      	cmp	r6, r4
 8004f1e:	d109      	bne.n	8004f34 <__libc_init_array+0x24>
 8004f20:	4d0b      	ldr	r5, [pc, #44]	@ (8004f50 <__libc_init_array+0x40>)
 8004f22:	4c0c      	ldr	r4, [pc, #48]	@ (8004f54 <__libc_init_array+0x44>)
 8004f24:	f000 fe3a 	bl	8005b9c <_init>
 8004f28:	1b64      	subs	r4, r4, r5
 8004f2a:	10a4      	asrs	r4, r4, #2
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	42a6      	cmp	r6, r4
 8004f30:	d105      	bne.n	8004f3e <__libc_init_array+0x2e>
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f38:	4798      	blx	r3
 8004f3a:	3601      	adds	r6, #1
 8004f3c:	e7ee      	b.n	8004f1c <__libc_init_array+0xc>
 8004f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f42:	4798      	blx	r3
 8004f44:	3601      	adds	r6, #1
 8004f46:	e7f2      	b.n	8004f2e <__libc_init_array+0x1e>
 8004f48:	08005db4 	.word	0x08005db4
 8004f4c:	08005db4 	.word	0x08005db4
 8004f50:	08005db4 	.word	0x08005db4
 8004f54:	08005db8 	.word	0x08005db8

08004f58 <__retarget_lock_init_recursive>:
 8004f58:	4770      	bx	lr

08004f5a <__retarget_lock_acquire_recursive>:
 8004f5a:	4770      	bx	lr

08004f5c <__retarget_lock_release_recursive>:
 8004f5c:	4770      	bx	lr
	...

08004f60 <__assert_func>:
 8004f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f62:	4614      	mov	r4, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	4b09      	ldr	r3, [pc, #36]	@ (8004f8c <__assert_func+0x2c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	68d8      	ldr	r0, [r3, #12]
 8004f6e:	b954      	cbnz	r4, 8004f86 <__assert_func+0x26>
 8004f70:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <__assert_func+0x30>)
 8004f72:	461c      	mov	r4, r3
 8004f74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f78:	9100      	str	r1, [sp, #0]
 8004f7a:	462b      	mov	r3, r5
 8004f7c:	4905      	ldr	r1, [pc, #20]	@ (8004f94 <__assert_func+0x34>)
 8004f7e:	f000 f9b9 	bl	80052f4 <fiprintf>
 8004f82:	f000 f9d9 	bl	8005338 <abort>
 8004f86:	4b04      	ldr	r3, [pc, #16]	@ (8004f98 <__assert_func+0x38>)
 8004f88:	e7f4      	b.n	8004f74 <__assert_func+0x14>
 8004f8a:	bf00      	nop
 8004f8c:	20000020 	.word	0x20000020
 8004f90:	08005d76 	.word	0x08005d76
 8004f94:	08005d48 	.word	0x08005d48
 8004f98:	08005d3b 	.word	0x08005d3b

08004f9c <_free_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d041      	beq.n	8005028 <_free_r+0x8c>
 8004fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa8:	1f0c      	subs	r4, r1, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfb8      	it	lt
 8004fae:	18e4      	addlt	r4, r4, r3
 8004fb0:	f000 f8e8 	bl	8005184 <__malloc_lock>
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800502c <_free_r+0x90>)
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	b933      	cbnz	r3, 8004fc8 <_free_r+0x2c>
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	6014      	str	r4, [r2, #0]
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fc4:	f000 b8e4 	b.w	8005190 <__malloc_unlock>
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	d908      	bls.n	8004fde <_free_r+0x42>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	1821      	adds	r1, r4, r0
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	bf01      	itttt	eq
 8004fd4:	6819      	ldreq	r1, [r3, #0]
 8004fd6:	685b      	ldreq	r3, [r3, #4]
 8004fd8:	1809      	addeq	r1, r1, r0
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	e7ed      	b.n	8004fba <_free_r+0x1e>
 8004fde:	461a      	mov	r2, r3
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b10b      	cbz	r3, 8004fe8 <_free_r+0x4c>
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d9fa      	bls.n	8004fde <_free_r+0x42>
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	1850      	adds	r0, r2, r1
 8004fec:	42a0      	cmp	r0, r4
 8004fee:	d10b      	bne.n	8005008 <_free_r+0x6c>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	4401      	add	r1, r0
 8004ff4:	1850      	adds	r0, r2, r1
 8004ff6:	4283      	cmp	r3, r0
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	d1e0      	bne.n	8004fbe <_free_r+0x22>
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	6053      	str	r3, [r2, #4]
 8005002:	4408      	add	r0, r1
 8005004:	6010      	str	r0, [r2, #0]
 8005006:	e7da      	b.n	8004fbe <_free_r+0x22>
 8005008:	d902      	bls.n	8005010 <_free_r+0x74>
 800500a:	230c      	movs	r3, #12
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	e7d6      	b.n	8004fbe <_free_r+0x22>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	1821      	adds	r1, r4, r0
 8005014:	428b      	cmp	r3, r1
 8005016:	bf04      	itt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	6063      	str	r3, [r4, #4]
 800501e:	bf04      	itt	eq
 8005020:	1809      	addeq	r1, r1, r0
 8005022:	6021      	streq	r1, [r4, #0]
 8005024:	6054      	str	r4, [r2, #4]
 8005026:	e7ca      	b.n	8004fbe <_free_r+0x22>
 8005028:	bd38      	pop	{r3, r4, r5, pc}
 800502a:	bf00      	nop
 800502c:	200005c4 	.word	0x200005c4

08005030 <malloc>:
 8005030:	4b02      	ldr	r3, [pc, #8]	@ (800503c <malloc+0xc>)
 8005032:	4601      	mov	r1, r0
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	f000 b825 	b.w	8005084 <_malloc_r>
 800503a:	bf00      	nop
 800503c:	20000020 	.word	0x20000020

08005040 <sbrk_aligned>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	4e0f      	ldr	r6, [pc, #60]	@ (8005080 <sbrk_aligned+0x40>)
 8005044:	460c      	mov	r4, r1
 8005046:	6831      	ldr	r1, [r6, #0]
 8005048:	4605      	mov	r5, r0
 800504a:	b911      	cbnz	r1, 8005052 <sbrk_aligned+0x12>
 800504c:	f000 f964 	bl	8005318 <_sbrk_r>
 8005050:	6030      	str	r0, [r6, #0]
 8005052:	4621      	mov	r1, r4
 8005054:	4628      	mov	r0, r5
 8005056:	f000 f95f 	bl	8005318 <_sbrk_r>
 800505a:	1c43      	adds	r3, r0, #1
 800505c:	d103      	bne.n	8005066 <sbrk_aligned+0x26>
 800505e:	f04f 34ff 	mov.w	r4, #4294967295
 8005062:	4620      	mov	r0, r4
 8005064:	bd70      	pop	{r4, r5, r6, pc}
 8005066:	1cc4      	adds	r4, r0, #3
 8005068:	f024 0403 	bic.w	r4, r4, #3
 800506c:	42a0      	cmp	r0, r4
 800506e:	d0f8      	beq.n	8005062 <sbrk_aligned+0x22>
 8005070:	1a21      	subs	r1, r4, r0
 8005072:	4628      	mov	r0, r5
 8005074:	f000 f950 	bl	8005318 <_sbrk_r>
 8005078:	3001      	adds	r0, #1
 800507a:	d1f2      	bne.n	8005062 <sbrk_aligned+0x22>
 800507c:	e7ef      	b.n	800505e <sbrk_aligned+0x1e>
 800507e:	bf00      	nop
 8005080:	200005c0 	.word	0x200005c0

08005084 <_malloc_r>:
 8005084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005088:	1ccd      	adds	r5, r1, #3
 800508a:	f025 0503 	bic.w	r5, r5, #3
 800508e:	3508      	adds	r5, #8
 8005090:	2d0c      	cmp	r5, #12
 8005092:	bf38      	it	cc
 8005094:	250c      	movcc	r5, #12
 8005096:	2d00      	cmp	r5, #0
 8005098:	4606      	mov	r6, r0
 800509a:	db01      	blt.n	80050a0 <_malloc_r+0x1c>
 800509c:	42a9      	cmp	r1, r5
 800509e:	d904      	bls.n	80050aa <_malloc_r+0x26>
 80050a0:	230c      	movs	r3, #12
 80050a2:	6033      	str	r3, [r6, #0]
 80050a4:	2000      	movs	r0, #0
 80050a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005180 <_malloc_r+0xfc>
 80050ae:	f000 f869 	bl	8005184 <__malloc_lock>
 80050b2:	f8d8 3000 	ldr.w	r3, [r8]
 80050b6:	461c      	mov	r4, r3
 80050b8:	bb44      	cbnz	r4, 800510c <_malloc_r+0x88>
 80050ba:	4629      	mov	r1, r5
 80050bc:	4630      	mov	r0, r6
 80050be:	f7ff ffbf 	bl	8005040 <sbrk_aligned>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	4604      	mov	r4, r0
 80050c6:	d158      	bne.n	800517a <_malloc_r+0xf6>
 80050c8:	f8d8 4000 	ldr.w	r4, [r8]
 80050cc:	4627      	mov	r7, r4
 80050ce:	2f00      	cmp	r7, #0
 80050d0:	d143      	bne.n	800515a <_malloc_r+0xd6>
 80050d2:	2c00      	cmp	r4, #0
 80050d4:	d04b      	beq.n	800516e <_malloc_r+0xea>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	4639      	mov	r1, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	eb04 0903 	add.w	r9, r4, r3
 80050e0:	f000 f91a 	bl	8005318 <_sbrk_r>
 80050e4:	4581      	cmp	r9, r0
 80050e6:	d142      	bne.n	800516e <_malloc_r+0xea>
 80050e8:	6821      	ldr	r1, [r4, #0]
 80050ea:	1a6d      	subs	r5, r5, r1
 80050ec:	4629      	mov	r1, r5
 80050ee:	4630      	mov	r0, r6
 80050f0:	f7ff ffa6 	bl	8005040 <sbrk_aligned>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d03a      	beq.n	800516e <_malloc_r+0xea>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	442b      	add	r3, r5
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	bb62      	cbnz	r2, 8005160 <_malloc_r+0xdc>
 8005106:	f8c8 7000 	str.w	r7, [r8]
 800510a:	e00f      	b.n	800512c <_malloc_r+0xa8>
 800510c:	6822      	ldr	r2, [r4, #0]
 800510e:	1b52      	subs	r2, r2, r5
 8005110:	d420      	bmi.n	8005154 <_malloc_r+0xd0>
 8005112:	2a0b      	cmp	r2, #11
 8005114:	d917      	bls.n	8005146 <_malloc_r+0xc2>
 8005116:	1961      	adds	r1, r4, r5
 8005118:	42a3      	cmp	r3, r4
 800511a:	6025      	str	r5, [r4, #0]
 800511c:	bf18      	it	ne
 800511e:	6059      	strne	r1, [r3, #4]
 8005120:	6863      	ldr	r3, [r4, #4]
 8005122:	bf08      	it	eq
 8005124:	f8c8 1000 	streq.w	r1, [r8]
 8005128:	5162      	str	r2, [r4, r5]
 800512a:	604b      	str	r3, [r1, #4]
 800512c:	4630      	mov	r0, r6
 800512e:	f000 f82f 	bl	8005190 <__malloc_unlock>
 8005132:	f104 000b 	add.w	r0, r4, #11
 8005136:	1d23      	adds	r3, r4, #4
 8005138:	f020 0007 	bic.w	r0, r0, #7
 800513c:	1ac2      	subs	r2, r0, r3
 800513e:	bf1c      	itt	ne
 8005140:	1a1b      	subne	r3, r3, r0
 8005142:	50a3      	strne	r3, [r4, r2]
 8005144:	e7af      	b.n	80050a6 <_malloc_r+0x22>
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	42a3      	cmp	r3, r4
 800514a:	bf0c      	ite	eq
 800514c:	f8c8 2000 	streq.w	r2, [r8]
 8005150:	605a      	strne	r2, [r3, #4]
 8005152:	e7eb      	b.n	800512c <_malloc_r+0xa8>
 8005154:	4623      	mov	r3, r4
 8005156:	6864      	ldr	r4, [r4, #4]
 8005158:	e7ae      	b.n	80050b8 <_malloc_r+0x34>
 800515a:	463c      	mov	r4, r7
 800515c:	687f      	ldr	r7, [r7, #4]
 800515e:	e7b6      	b.n	80050ce <_malloc_r+0x4a>
 8005160:	461a      	mov	r2, r3
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	42a3      	cmp	r3, r4
 8005166:	d1fb      	bne.n	8005160 <_malloc_r+0xdc>
 8005168:	2300      	movs	r3, #0
 800516a:	6053      	str	r3, [r2, #4]
 800516c:	e7de      	b.n	800512c <_malloc_r+0xa8>
 800516e:	230c      	movs	r3, #12
 8005170:	6033      	str	r3, [r6, #0]
 8005172:	4630      	mov	r0, r6
 8005174:	f000 f80c 	bl	8005190 <__malloc_unlock>
 8005178:	e794      	b.n	80050a4 <_malloc_r+0x20>
 800517a:	6005      	str	r5, [r0, #0]
 800517c:	e7d6      	b.n	800512c <_malloc_r+0xa8>
 800517e:	bf00      	nop
 8005180:	200005c4 	.word	0x200005c4

08005184 <__malloc_lock>:
 8005184:	4801      	ldr	r0, [pc, #4]	@ (800518c <__malloc_lock+0x8>)
 8005186:	f7ff bee8 	b.w	8004f5a <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	200005bc 	.word	0x200005bc

08005190 <__malloc_unlock>:
 8005190:	4801      	ldr	r0, [pc, #4]	@ (8005198 <__malloc_unlock+0x8>)
 8005192:	f7ff bee3 	b.w	8004f5c <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	200005bc 	.word	0x200005bc

0800519c <__sflush_r>:
 800519c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a4:	0716      	lsls	r6, r2, #28
 80051a6:	4605      	mov	r5, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	d454      	bmi.n	8005256 <__sflush_r+0xba>
 80051ac:	684b      	ldr	r3, [r1, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	dc02      	bgt.n	80051b8 <__sflush_r+0x1c>
 80051b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	dd48      	ble.n	800524a <__sflush_r+0xae>
 80051b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d045      	beq.n	800524a <__sflush_r+0xae>
 80051be:	2300      	movs	r3, #0
 80051c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051c4:	682f      	ldr	r7, [r5, #0]
 80051c6:	6a21      	ldr	r1, [r4, #32]
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	d030      	beq.n	800522e <__sflush_r+0x92>
 80051cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	0759      	lsls	r1, r3, #29
 80051d2:	d505      	bpl.n	80051e0 <__sflush_r+0x44>
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051da:	b10b      	cbz	r3, 80051e0 <__sflush_r+0x44>
 80051dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	2300      	movs	r3, #0
 80051e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051e4:	6a21      	ldr	r1, [r4, #32]
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b0      	blx	r6
 80051ea:	1c43      	adds	r3, r0, #1
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	d106      	bne.n	80051fe <__sflush_r+0x62>
 80051f0:	6829      	ldr	r1, [r5, #0]
 80051f2:	291d      	cmp	r1, #29
 80051f4:	d82b      	bhi.n	800524e <__sflush_r+0xb2>
 80051f6:	4a2a      	ldr	r2, [pc, #168]	@ (80052a0 <__sflush_r+0x104>)
 80051f8:	410a      	asrs	r2, r1
 80051fa:	07d6      	lsls	r6, r2, #31
 80051fc:	d427      	bmi.n	800524e <__sflush_r+0xb2>
 80051fe:	2200      	movs	r2, #0
 8005200:	6062      	str	r2, [r4, #4]
 8005202:	04d9      	lsls	r1, r3, #19
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	6022      	str	r2, [r4, #0]
 8005208:	d504      	bpl.n	8005214 <__sflush_r+0x78>
 800520a:	1c42      	adds	r2, r0, #1
 800520c:	d101      	bne.n	8005212 <__sflush_r+0x76>
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	b903      	cbnz	r3, 8005214 <__sflush_r+0x78>
 8005212:	6560      	str	r0, [r4, #84]	@ 0x54
 8005214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005216:	602f      	str	r7, [r5, #0]
 8005218:	b1b9      	cbz	r1, 800524a <__sflush_r+0xae>
 800521a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800521e:	4299      	cmp	r1, r3
 8005220:	d002      	beq.n	8005228 <__sflush_r+0x8c>
 8005222:	4628      	mov	r0, r5
 8005224:	f7ff feba 	bl	8004f9c <_free_r>
 8005228:	2300      	movs	r3, #0
 800522a:	6363      	str	r3, [r4, #52]	@ 0x34
 800522c:	e00d      	b.n	800524a <__sflush_r+0xae>
 800522e:	2301      	movs	r3, #1
 8005230:	4628      	mov	r0, r5
 8005232:	47b0      	blx	r6
 8005234:	4602      	mov	r2, r0
 8005236:	1c50      	adds	r0, r2, #1
 8005238:	d1c9      	bne.n	80051ce <__sflush_r+0x32>
 800523a:	682b      	ldr	r3, [r5, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0c6      	beq.n	80051ce <__sflush_r+0x32>
 8005240:	2b1d      	cmp	r3, #29
 8005242:	d001      	beq.n	8005248 <__sflush_r+0xac>
 8005244:	2b16      	cmp	r3, #22
 8005246:	d11e      	bne.n	8005286 <__sflush_r+0xea>
 8005248:	602f      	str	r7, [r5, #0]
 800524a:	2000      	movs	r0, #0
 800524c:	e022      	b.n	8005294 <__sflush_r+0xf8>
 800524e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005252:	b21b      	sxth	r3, r3
 8005254:	e01b      	b.n	800528e <__sflush_r+0xf2>
 8005256:	690f      	ldr	r7, [r1, #16]
 8005258:	2f00      	cmp	r7, #0
 800525a:	d0f6      	beq.n	800524a <__sflush_r+0xae>
 800525c:	0793      	lsls	r3, r2, #30
 800525e:	680e      	ldr	r6, [r1, #0]
 8005260:	bf08      	it	eq
 8005262:	694b      	ldreq	r3, [r1, #20]
 8005264:	600f      	str	r7, [r1, #0]
 8005266:	bf18      	it	ne
 8005268:	2300      	movne	r3, #0
 800526a:	eba6 0807 	sub.w	r8, r6, r7
 800526e:	608b      	str	r3, [r1, #8]
 8005270:	f1b8 0f00 	cmp.w	r8, #0
 8005274:	dde9      	ble.n	800524a <__sflush_r+0xae>
 8005276:	6a21      	ldr	r1, [r4, #32]
 8005278:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800527a:	4643      	mov	r3, r8
 800527c:	463a      	mov	r2, r7
 800527e:	4628      	mov	r0, r5
 8005280:	47b0      	blx	r6
 8005282:	2800      	cmp	r0, #0
 8005284:	dc08      	bgt.n	8005298 <__sflush_r+0xfc>
 8005286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005298:	4407      	add	r7, r0
 800529a:	eba8 0800 	sub.w	r8, r8, r0
 800529e:	e7e7      	b.n	8005270 <__sflush_r+0xd4>
 80052a0:	dfbffffe 	.word	0xdfbffffe

080052a4 <_fflush_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	690b      	ldr	r3, [r1, #16]
 80052a8:	4605      	mov	r5, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	b913      	cbnz	r3, 80052b4 <_fflush_r+0x10>
 80052ae:	2500      	movs	r5, #0
 80052b0:	4628      	mov	r0, r5
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	b118      	cbz	r0, 80052be <_fflush_r+0x1a>
 80052b6:	6a03      	ldr	r3, [r0, #32]
 80052b8:	b90b      	cbnz	r3, 80052be <_fflush_r+0x1a>
 80052ba:	f7ff fd5b 	bl	8004d74 <__sinit>
 80052be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f3      	beq.n	80052ae <_fflush_r+0xa>
 80052c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052c8:	07d0      	lsls	r0, r2, #31
 80052ca:	d404      	bmi.n	80052d6 <_fflush_r+0x32>
 80052cc:	0599      	lsls	r1, r3, #22
 80052ce:	d402      	bmi.n	80052d6 <_fflush_r+0x32>
 80052d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052d2:	f7ff fe42 	bl	8004f5a <__retarget_lock_acquire_recursive>
 80052d6:	4628      	mov	r0, r5
 80052d8:	4621      	mov	r1, r4
 80052da:	f7ff ff5f 	bl	800519c <__sflush_r>
 80052de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052e0:	07da      	lsls	r2, r3, #31
 80052e2:	4605      	mov	r5, r0
 80052e4:	d4e4      	bmi.n	80052b0 <_fflush_r+0xc>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	059b      	lsls	r3, r3, #22
 80052ea:	d4e1      	bmi.n	80052b0 <_fflush_r+0xc>
 80052ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ee:	f7ff fe35 	bl	8004f5c <__retarget_lock_release_recursive>
 80052f2:	e7dd      	b.n	80052b0 <_fflush_r+0xc>

080052f4 <fiprintf>:
 80052f4:	b40e      	push	{r1, r2, r3}
 80052f6:	b503      	push	{r0, r1, lr}
 80052f8:	4601      	mov	r1, r0
 80052fa:	ab03      	add	r3, sp, #12
 80052fc:	4805      	ldr	r0, [pc, #20]	@ (8005314 <fiprintf+0x20>)
 80052fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005302:	6800      	ldr	r0, [r0, #0]
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	f000 f847 	bl	8005398 <_vfiprintf_r>
 800530a:	b002      	add	sp, #8
 800530c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005310:	b003      	add	sp, #12
 8005312:	4770      	bx	lr
 8005314:	20000020 	.word	0x20000020

08005318 <_sbrk_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d06      	ldr	r5, [pc, #24]	@ (8005334 <_sbrk_r+0x1c>)
 800531c:	2300      	movs	r3, #0
 800531e:	4604      	mov	r4, r0
 8005320:	4608      	mov	r0, r1
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	f7fb fd1a 	bl	8000d5c <_sbrk>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d102      	bne.n	8005332 <_sbrk_r+0x1a>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b103      	cbz	r3, 8005332 <_sbrk_r+0x1a>
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	200005b8 	.word	0x200005b8

08005338 <abort>:
 8005338:	b508      	push	{r3, lr}
 800533a:	2006      	movs	r0, #6
 800533c:	f000 fb8e 	bl	8005a5c <raise>
 8005340:	2001      	movs	r0, #1
 8005342:	f7fb fc93 	bl	8000c6c <_exit>

08005346 <__sfputc_r>:
 8005346:	6893      	ldr	r3, [r2, #8]
 8005348:	3b01      	subs	r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	b410      	push	{r4}
 800534e:	6093      	str	r3, [r2, #8]
 8005350:	da08      	bge.n	8005364 <__sfputc_r+0x1e>
 8005352:	6994      	ldr	r4, [r2, #24]
 8005354:	42a3      	cmp	r3, r4
 8005356:	db01      	blt.n	800535c <__sfputc_r+0x16>
 8005358:	290a      	cmp	r1, #10
 800535a:	d103      	bne.n	8005364 <__sfputc_r+0x1e>
 800535c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005360:	f000 bac0 	b.w	80058e4 <__swbuf_r>
 8005364:	6813      	ldr	r3, [r2, #0]
 8005366:	1c58      	adds	r0, r3, #1
 8005368:	6010      	str	r0, [r2, #0]
 800536a:	7019      	strb	r1, [r3, #0]
 800536c:	4608      	mov	r0, r1
 800536e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005372:	4770      	bx	lr

08005374 <__sfputs_r>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	4606      	mov	r6, r0
 8005378:	460f      	mov	r7, r1
 800537a:	4614      	mov	r4, r2
 800537c:	18d5      	adds	r5, r2, r3
 800537e:	42ac      	cmp	r4, r5
 8005380:	d101      	bne.n	8005386 <__sfputs_r+0x12>
 8005382:	2000      	movs	r0, #0
 8005384:	e007      	b.n	8005396 <__sfputs_r+0x22>
 8005386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538a:	463a      	mov	r2, r7
 800538c:	4630      	mov	r0, r6
 800538e:	f7ff ffda 	bl	8005346 <__sfputc_r>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d1f3      	bne.n	800537e <__sfputs_r+0xa>
 8005396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005398 <_vfiprintf_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	460d      	mov	r5, r1
 800539e:	b09d      	sub	sp, #116	@ 0x74
 80053a0:	4614      	mov	r4, r2
 80053a2:	4698      	mov	r8, r3
 80053a4:	4606      	mov	r6, r0
 80053a6:	b118      	cbz	r0, 80053b0 <_vfiprintf_r+0x18>
 80053a8:	6a03      	ldr	r3, [r0, #32]
 80053aa:	b90b      	cbnz	r3, 80053b0 <_vfiprintf_r+0x18>
 80053ac:	f7ff fce2 	bl	8004d74 <__sinit>
 80053b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053b2:	07d9      	lsls	r1, r3, #31
 80053b4:	d405      	bmi.n	80053c2 <_vfiprintf_r+0x2a>
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	059a      	lsls	r2, r3, #22
 80053ba:	d402      	bmi.n	80053c2 <_vfiprintf_r+0x2a>
 80053bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053be:	f7ff fdcc 	bl	8004f5a <__retarget_lock_acquire_recursive>
 80053c2:	89ab      	ldrh	r3, [r5, #12]
 80053c4:	071b      	lsls	r3, r3, #28
 80053c6:	d501      	bpl.n	80053cc <_vfiprintf_r+0x34>
 80053c8:	692b      	ldr	r3, [r5, #16]
 80053ca:	b99b      	cbnz	r3, 80053f4 <_vfiprintf_r+0x5c>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4630      	mov	r0, r6
 80053d0:	f000 fac6 	bl	8005960 <__swsetup_r>
 80053d4:	b170      	cbz	r0, 80053f4 <_vfiprintf_r+0x5c>
 80053d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053d8:	07dc      	lsls	r4, r3, #31
 80053da:	d504      	bpl.n	80053e6 <_vfiprintf_r+0x4e>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	b01d      	add	sp, #116	@ 0x74
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	0598      	lsls	r0, r3, #22
 80053ea:	d4f7      	bmi.n	80053dc <_vfiprintf_r+0x44>
 80053ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053ee:	f7ff fdb5 	bl	8004f5c <__retarget_lock_release_recursive>
 80053f2:	e7f3      	b.n	80053dc <_vfiprintf_r+0x44>
 80053f4:	2300      	movs	r3, #0
 80053f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80053f8:	2320      	movs	r3, #32
 80053fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005402:	2330      	movs	r3, #48	@ 0x30
 8005404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80055b4 <_vfiprintf_r+0x21c>
 8005408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800540c:	f04f 0901 	mov.w	r9, #1
 8005410:	4623      	mov	r3, r4
 8005412:	469a      	mov	sl, r3
 8005414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005418:	b10a      	cbz	r2, 800541e <_vfiprintf_r+0x86>
 800541a:	2a25      	cmp	r2, #37	@ 0x25
 800541c:	d1f9      	bne.n	8005412 <_vfiprintf_r+0x7a>
 800541e:	ebba 0b04 	subs.w	fp, sl, r4
 8005422:	d00b      	beq.n	800543c <_vfiprintf_r+0xa4>
 8005424:	465b      	mov	r3, fp
 8005426:	4622      	mov	r2, r4
 8005428:	4629      	mov	r1, r5
 800542a:	4630      	mov	r0, r6
 800542c:	f7ff ffa2 	bl	8005374 <__sfputs_r>
 8005430:	3001      	adds	r0, #1
 8005432:	f000 80a7 	beq.w	8005584 <_vfiprintf_r+0x1ec>
 8005436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005438:	445a      	add	r2, fp
 800543a:	9209      	str	r2, [sp, #36]	@ 0x24
 800543c:	f89a 3000 	ldrb.w	r3, [sl]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 809f 	beq.w	8005584 <_vfiprintf_r+0x1ec>
 8005446:	2300      	movs	r3, #0
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005450:	f10a 0a01 	add.w	sl, sl, #1
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	9307      	str	r3, [sp, #28]
 8005458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800545c:	931a      	str	r3, [sp, #104]	@ 0x68
 800545e:	4654      	mov	r4, sl
 8005460:	2205      	movs	r2, #5
 8005462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005466:	4853      	ldr	r0, [pc, #332]	@ (80055b4 <_vfiprintf_r+0x21c>)
 8005468:	f7fa feba 	bl	80001e0 <memchr>
 800546c:	9a04      	ldr	r2, [sp, #16]
 800546e:	b9d8      	cbnz	r0, 80054a8 <_vfiprintf_r+0x110>
 8005470:	06d1      	lsls	r1, r2, #27
 8005472:	bf44      	itt	mi
 8005474:	2320      	movmi	r3, #32
 8005476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800547a:	0713      	lsls	r3, r2, #28
 800547c:	bf44      	itt	mi
 800547e:	232b      	movmi	r3, #43	@ 0x2b
 8005480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005484:	f89a 3000 	ldrb.w	r3, [sl]
 8005488:	2b2a      	cmp	r3, #42	@ 0x2a
 800548a:	d015      	beq.n	80054b8 <_vfiprintf_r+0x120>
 800548c:	9a07      	ldr	r2, [sp, #28]
 800548e:	4654      	mov	r4, sl
 8005490:	2000      	movs	r0, #0
 8005492:	f04f 0c0a 	mov.w	ip, #10
 8005496:	4621      	mov	r1, r4
 8005498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800549c:	3b30      	subs	r3, #48	@ 0x30
 800549e:	2b09      	cmp	r3, #9
 80054a0:	d94b      	bls.n	800553a <_vfiprintf_r+0x1a2>
 80054a2:	b1b0      	cbz	r0, 80054d2 <_vfiprintf_r+0x13a>
 80054a4:	9207      	str	r2, [sp, #28]
 80054a6:	e014      	b.n	80054d2 <_vfiprintf_r+0x13a>
 80054a8:	eba0 0308 	sub.w	r3, r0, r8
 80054ac:	fa09 f303 	lsl.w	r3, r9, r3
 80054b0:	4313      	orrs	r3, r2
 80054b2:	9304      	str	r3, [sp, #16]
 80054b4:	46a2      	mov	sl, r4
 80054b6:	e7d2      	b.n	800545e <_vfiprintf_r+0xc6>
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	1d19      	adds	r1, r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	9103      	str	r1, [sp, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfbb      	ittet	lt
 80054c4:	425b      	neglt	r3, r3
 80054c6:	f042 0202 	orrlt.w	r2, r2, #2
 80054ca:	9307      	strge	r3, [sp, #28]
 80054cc:	9307      	strlt	r3, [sp, #28]
 80054ce:	bfb8      	it	lt
 80054d0:	9204      	strlt	r2, [sp, #16]
 80054d2:	7823      	ldrb	r3, [r4, #0]
 80054d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80054d6:	d10a      	bne.n	80054ee <_vfiprintf_r+0x156>
 80054d8:	7863      	ldrb	r3, [r4, #1]
 80054da:	2b2a      	cmp	r3, #42	@ 0x2a
 80054dc:	d132      	bne.n	8005544 <_vfiprintf_r+0x1ac>
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	9203      	str	r2, [sp, #12]
 80054e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054ea:	3402      	adds	r4, #2
 80054ec:	9305      	str	r3, [sp, #20]
 80054ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80055c4 <_vfiprintf_r+0x22c>
 80054f2:	7821      	ldrb	r1, [r4, #0]
 80054f4:	2203      	movs	r2, #3
 80054f6:	4650      	mov	r0, sl
 80054f8:	f7fa fe72 	bl	80001e0 <memchr>
 80054fc:	b138      	cbz	r0, 800550e <_vfiprintf_r+0x176>
 80054fe:	9b04      	ldr	r3, [sp, #16]
 8005500:	eba0 000a 	sub.w	r0, r0, sl
 8005504:	2240      	movs	r2, #64	@ 0x40
 8005506:	4082      	lsls	r2, r0
 8005508:	4313      	orrs	r3, r2
 800550a:	3401      	adds	r4, #1
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005512:	4829      	ldr	r0, [pc, #164]	@ (80055b8 <_vfiprintf_r+0x220>)
 8005514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005518:	2206      	movs	r2, #6
 800551a:	f7fa fe61 	bl	80001e0 <memchr>
 800551e:	2800      	cmp	r0, #0
 8005520:	d03f      	beq.n	80055a2 <_vfiprintf_r+0x20a>
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <_vfiprintf_r+0x224>)
 8005524:	bb1b      	cbnz	r3, 800556e <_vfiprintf_r+0x1d6>
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	3307      	adds	r3, #7
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	3308      	adds	r3, #8
 8005530:	9303      	str	r3, [sp, #12]
 8005532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005534:	443b      	add	r3, r7
 8005536:	9309      	str	r3, [sp, #36]	@ 0x24
 8005538:	e76a      	b.n	8005410 <_vfiprintf_r+0x78>
 800553a:	fb0c 3202 	mla	r2, ip, r2, r3
 800553e:	460c      	mov	r4, r1
 8005540:	2001      	movs	r0, #1
 8005542:	e7a8      	b.n	8005496 <_vfiprintf_r+0xfe>
 8005544:	2300      	movs	r3, #0
 8005546:	3401      	adds	r4, #1
 8005548:	9305      	str	r3, [sp, #20]
 800554a:	4619      	mov	r1, r3
 800554c:	f04f 0c0a 	mov.w	ip, #10
 8005550:	4620      	mov	r0, r4
 8005552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005556:	3a30      	subs	r2, #48	@ 0x30
 8005558:	2a09      	cmp	r2, #9
 800555a:	d903      	bls.n	8005564 <_vfiprintf_r+0x1cc>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0c6      	beq.n	80054ee <_vfiprintf_r+0x156>
 8005560:	9105      	str	r1, [sp, #20]
 8005562:	e7c4      	b.n	80054ee <_vfiprintf_r+0x156>
 8005564:	fb0c 2101 	mla	r1, ip, r1, r2
 8005568:	4604      	mov	r4, r0
 800556a:	2301      	movs	r3, #1
 800556c:	e7f0      	b.n	8005550 <_vfiprintf_r+0x1b8>
 800556e:	ab03      	add	r3, sp, #12
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	462a      	mov	r2, r5
 8005574:	4b12      	ldr	r3, [pc, #72]	@ (80055c0 <_vfiprintf_r+0x228>)
 8005576:	a904      	add	r1, sp, #16
 8005578:	4630      	mov	r0, r6
 800557a:	f3af 8000 	nop.w
 800557e:	4607      	mov	r7, r0
 8005580:	1c78      	adds	r0, r7, #1
 8005582:	d1d6      	bne.n	8005532 <_vfiprintf_r+0x19a>
 8005584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005586:	07d9      	lsls	r1, r3, #31
 8005588:	d405      	bmi.n	8005596 <_vfiprintf_r+0x1fe>
 800558a:	89ab      	ldrh	r3, [r5, #12]
 800558c:	059a      	lsls	r2, r3, #22
 800558e:	d402      	bmi.n	8005596 <_vfiprintf_r+0x1fe>
 8005590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005592:	f7ff fce3 	bl	8004f5c <__retarget_lock_release_recursive>
 8005596:	89ab      	ldrh	r3, [r5, #12]
 8005598:	065b      	lsls	r3, r3, #25
 800559a:	f53f af1f 	bmi.w	80053dc <_vfiprintf_r+0x44>
 800559e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055a0:	e71e      	b.n	80053e0 <_vfiprintf_r+0x48>
 80055a2:	ab03      	add	r3, sp, #12
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	462a      	mov	r2, r5
 80055a8:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <_vfiprintf_r+0x228>)
 80055aa:	a904      	add	r1, sp, #16
 80055ac:	4630      	mov	r0, r6
 80055ae:	f000 f879 	bl	80056a4 <_printf_i>
 80055b2:	e7e4      	b.n	800557e <_vfiprintf_r+0x1e6>
 80055b4:	08005d77 	.word	0x08005d77
 80055b8:	08005d81 	.word	0x08005d81
 80055bc:	00000000 	.word	0x00000000
 80055c0:	08005375 	.word	0x08005375
 80055c4:	08005d7d 	.word	0x08005d7d

080055c8 <_printf_common>:
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	4616      	mov	r6, r2
 80055ce:	4698      	mov	r8, r3
 80055d0:	688a      	ldr	r2, [r1, #8]
 80055d2:	690b      	ldr	r3, [r1, #16]
 80055d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055d8:	4293      	cmp	r3, r2
 80055da:	bfb8      	it	lt
 80055dc:	4613      	movlt	r3, r2
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055e4:	4607      	mov	r7, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	b10a      	cbz	r2, 80055ee <_printf_common+0x26>
 80055ea:	3301      	adds	r3, #1
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	0699      	lsls	r1, r3, #26
 80055f2:	bf42      	ittt	mi
 80055f4:	6833      	ldrmi	r3, [r6, #0]
 80055f6:	3302      	addmi	r3, #2
 80055f8:	6033      	strmi	r3, [r6, #0]
 80055fa:	6825      	ldr	r5, [r4, #0]
 80055fc:	f015 0506 	ands.w	r5, r5, #6
 8005600:	d106      	bne.n	8005610 <_printf_common+0x48>
 8005602:	f104 0a19 	add.w	sl, r4, #25
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	6832      	ldr	r2, [r6, #0]
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	42ab      	cmp	r3, r5
 800560e:	dc26      	bgt.n	800565e <_printf_common+0x96>
 8005610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	3b00      	subs	r3, #0
 8005618:	bf18      	it	ne
 800561a:	2301      	movne	r3, #1
 800561c:	0692      	lsls	r2, r2, #26
 800561e:	d42b      	bmi.n	8005678 <_printf_common+0xb0>
 8005620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005624:	4641      	mov	r1, r8
 8005626:	4638      	mov	r0, r7
 8005628:	47c8      	blx	r9
 800562a:	3001      	adds	r0, #1
 800562c:	d01e      	beq.n	800566c <_printf_common+0xa4>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	6922      	ldr	r2, [r4, #16]
 8005632:	f003 0306 	and.w	r3, r3, #6
 8005636:	2b04      	cmp	r3, #4
 8005638:	bf02      	ittt	eq
 800563a:	68e5      	ldreq	r5, [r4, #12]
 800563c:	6833      	ldreq	r3, [r6, #0]
 800563e:	1aed      	subeq	r5, r5, r3
 8005640:	68a3      	ldr	r3, [r4, #8]
 8005642:	bf0c      	ite	eq
 8005644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005648:	2500      	movne	r5, #0
 800564a:	4293      	cmp	r3, r2
 800564c:	bfc4      	itt	gt
 800564e:	1a9b      	subgt	r3, r3, r2
 8005650:	18ed      	addgt	r5, r5, r3
 8005652:	2600      	movs	r6, #0
 8005654:	341a      	adds	r4, #26
 8005656:	42b5      	cmp	r5, r6
 8005658:	d11a      	bne.n	8005690 <_printf_common+0xc8>
 800565a:	2000      	movs	r0, #0
 800565c:	e008      	b.n	8005670 <_printf_common+0xa8>
 800565e:	2301      	movs	r3, #1
 8005660:	4652      	mov	r2, sl
 8005662:	4641      	mov	r1, r8
 8005664:	4638      	mov	r0, r7
 8005666:	47c8      	blx	r9
 8005668:	3001      	adds	r0, #1
 800566a:	d103      	bne.n	8005674 <_printf_common+0xac>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	3501      	adds	r5, #1
 8005676:	e7c6      	b.n	8005606 <_printf_common+0x3e>
 8005678:	18e1      	adds	r1, r4, r3
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	2030      	movs	r0, #48	@ 0x30
 800567e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005682:	4422      	add	r2, r4
 8005684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800568c:	3302      	adds	r3, #2
 800568e:	e7c7      	b.n	8005620 <_printf_common+0x58>
 8005690:	2301      	movs	r3, #1
 8005692:	4622      	mov	r2, r4
 8005694:	4641      	mov	r1, r8
 8005696:	4638      	mov	r0, r7
 8005698:	47c8      	blx	r9
 800569a:	3001      	adds	r0, #1
 800569c:	d0e6      	beq.n	800566c <_printf_common+0xa4>
 800569e:	3601      	adds	r6, #1
 80056a0:	e7d9      	b.n	8005656 <_printf_common+0x8e>
	...

080056a4 <_printf_i>:
 80056a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	7e0f      	ldrb	r7, [r1, #24]
 80056aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056ac:	2f78      	cmp	r7, #120	@ 0x78
 80056ae:	4691      	mov	r9, r2
 80056b0:	4680      	mov	r8, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	469a      	mov	sl, r3
 80056b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056ba:	d807      	bhi.n	80056cc <_printf_i+0x28>
 80056bc:	2f62      	cmp	r7, #98	@ 0x62
 80056be:	d80a      	bhi.n	80056d6 <_printf_i+0x32>
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	f000 80d2 	beq.w	800586a <_printf_i+0x1c6>
 80056c6:	2f58      	cmp	r7, #88	@ 0x58
 80056c8:	f000 80b9 	beq.w	800583e <_printf_i+0x19a>
 80056cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056d4:	e03a      	b.n	800574c <_printf_i+0xa8>
 80056d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056da:	2b15      	cmp	r3, #21
 80056dc:	d8f6      	bhi.n	80056cc <_printf_i+0x28>
 80056de:	a101      	add	r1, pc, #4	@ (adr r1, 80056e4 <_printf_i+0x40>)
 80056e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e4:	0800573d 	.word	0x0800573d
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080056cd 	.word	0x080056cd
 80056f0:	080056cd 	.word	0x080056cd
 80056f4:	080056cd 	.word	0x080056cd
 80056f8:	080056cd 	.word	0x080056cd
 80056fc:	08005751 	.word	0x08005751
 8005700:	080056cd 	.word	0x080056cd
 8005704:	080056cd 	.word	0x080056cd
 8005708:	080056cd 	.word	0x080056cd
 800570c:	080056cd 	.word	0x080056cd
 8005710:	08005851 	.word	0x08005851
 8005714:	0800577b 	.word	0x0800577b
 8005718:	0800580b 	.word	0x0800580b
 800571c:	080056cd 	.word	0x080056cd
 8005720:	080056cd 	.word	0x080056cd
 8005724:	08005873 	.word	0x08005873
 8005728:	080056cd 	.word	0x080056cd
 800572c:	0800577b 	.word	0x0800577b
 8005730:	080056cd 	.word	0x080056cd
 8005734:	080056cd 	.word	0x080056cd
 8005738:	08005813 	.word	0x08005813
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6032      	str	r2, [r6, #0]
 8005744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800574c:	2301      	movs	r3, #1
 800574e:	e09d      	b.n	800588c <_printf_i+0x1e8>
 8005750:	6833      	ldr	r3, [r6, #0]
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	1d19      	adds	r1, r3, #4
 8005756:	6031      	str	r1, [r6, #0]
 8005758:	0606      	lsls	r6, r0, #24
 800575a:	d501      	bpl.n	8005760 <_printf_i+0xbc>
 800575c:	681d      	ldr	r5, [r3, #0]
 800575e:	e003      	b.n	8005768 <_printf_i+0xc4>
 8005760:	0645      	lsls	r5, r0, #25
 8005762:	d5fb      	bpl.n	800575c <_printf_i+0xb8>
 8005764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005768:	2d00      	cmp	r5, #0
 800576a:	da03      	bge.n	8005774 <_printf_i+0xd0>
 800576c:	232d      	movs	r3, #45	@ 0x2d
 800576e:	426d      	negs	r5, r5
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005774:	4859      	ldr	r0, [pc, #356]	@ (80058dc <_printf_i+0x238>)
 8005776:	230a      	movs	r3, #10
 8005778:	e011      	b.n	800579e <_printf_i+0xfa>
 800577a:	6821      	ldr	r1, [r4, #0]
 800577c:	6833      	ldr	r3, [r6, #0]
 800577e:	0608      	lsls	r0, r1, #24
 8005780:	f853 5b04 	ldr.w	r5, [r3], #4
 8005784:	d402      	bmi.n	800578c <_printf_i+0xe8>
 8005786:	0649      	lsls	r1, r1, #25
 8005788:	bf48      	it	mi
 800578a:	b2ad      	uxthmi	r5, r5
 800578c:	2f6f      	cmp	r7, #111	@ 0x6f
 800578e:	4853      	ldr	r0, [pc, #332]	@ (80058dc <_printf_i+0x238>)
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	bf14      	ite	ne
 8005794:	230a      	movne	r3, #10
 8005796:	2308      	moveq	r3, #8
 8005798:	2100      	movs	r1, #0
 800579a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800579e:	6866      	ldr	r6, [r4, #4]
 80057a0:	60a6      	str	r6, [r4, #8]
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	bfa2      	ittt	ge
 80057a6:	6821      	ldrge	r1, [r4, #0]
 80057a8:	f021 0104 	bicge.w	r1, r1, #4
 80057ac:	6021      	strge	r1, [r4, #0]
 80057ae:	b90d      	cbnz	r5, 80057b4 <_printf_i+0x110>
 80057b0:	2e00      	cmp	r6, #0
 80057b2:	d04b      	beq.n	800584c <_printf_i+0x1a8>
 80057b4:	4616      	mov	r6, r2
 80057b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80057ba:	fb03 5711 	mls	r7, r3, r1, r5
 80057be:	5dc7      	ldrb	r7, [r0, r7]
 80057c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057c4:	462f      	mov	r7, r5
 80057c6:	42bb      	cmp	r3, r7
 80057c8:	460d      	mov	r5, r1
 80057ca:	d9f4      	bls.n	80057b6 <_printf_i+0x112>
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d10b      	bne.n	80057e8 <_printf_i+0x144>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	07df      	lsls	r7, r3, #31
 80057d4:	d508      	bpl.n	80057e8 <_printf_i+0x144>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	6861      	ldr	r1, [r4, #4]
 80057da:	4299      	cmp	r1, r3
 80057dc:	bfde      	ittt	le
 80057de:	2330      	movle	r3, #48	@ 0x30
 80057e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057e8:	1b92      	subs	r2, r2, r6
 80057ea:	6122      	str	r2, [r4, #16]
 80057ec:	f8cd a000 	str.w	sl, [sp]
 80057f0:	464b      	mov	r3, r9
 80057f2:	aa03      	add	r2, sp, #12
 80057f4:	4621      	mov	r1, r4
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7ff fee6 	bl	80055c8 <_printf_common>
 80057fc:	3001      	adds	r0, #1
 80057fe:	d14a      	bne.n	8005896 <_printf_i+0x1f2>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	b004      	add	sp, #16
 8005806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f043 0320 	orr.w	r3, r3, #32
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	4833      	ldr	r0, [pc, #204]	@ (80058e0 <_printf_i+0x23c>)
 8005814:	2778      	movs	r7, #120	@ 0x78
 8005816:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	6831      	ldr	r1, [r6, #0]
 800581e:	061f      	lsls	r7, r3, #24
 8005820:	f851 5b04 	ldr.w	r5, [r1], #4
 8005824:	d402      	bmi.n	800582c <_printf_i+0x188>
 8005826:	065f      	lsls	r7, r3, #25
 8005828:	bf48      	it	mi
 800582a:	b2ad      	uxthmi	r5, r5
 800582c:	6031      	str	r1, [r6, #0]
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	bf44      	itt	mi
 8005832:	f043 0320 	orrmi.w	r3, r3, #32
 8005836:	6023      	strmi	r3, [r4, #0]
 8005838:	b11d      	cbz	r5, 8005842 <_printf_i+0x19e>
 800583a:	2310      	movs	r3, #16
 800583c:	e7ac      	b.n	8005798 <_printf_i+0xf4>
 800583e:	4827      	ldr	r0, [pc, #156]	@ (80058dc <_printf_i+0x238>)
 8005840:	e7e9      	b.n	8005816 <_printf_i+0x172>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	f023 0320 	bic.w	r3, r3, #32
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	e7f6      	b.n	800583a <_printf_i+0x196>
 800584c:	4616      	mov	r6, r2
 800584e:	e7bd      	b.n	80057cc <_printf_i+0x128>
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	6961      	ldr	r1, [r4, #20]
 8005856:	1d18      	adds	r0, r3, #4
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	062e      	lsls	r6, r5, #24
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	d501      	bpl.n	8005864 <_printf_i+0x1c0>
 8005860:	6019      	str	r1, [r3, #0]
 8005862:	e002      	b.n	800586a <_printf_i+0x1c6>
 8005864:	0668      	lsls	r0, r5, #25
 8005866:	d5fb      	bpl.n	8005860 <_printf_i+0x1bc>
 8005868:	8019      	strh	r1, [r3, #0]
 800586a:	2300      	movs	r3, #0
 800586c:	6123      	str	r3, [r4, #16]
 800586e:	4616      	mov	r6, r2
 8005870:	e7bc      	b.n	80057ec <_printf_i+0x148>
 8005872:	6833      	ldr	r3, [r6, #0]
 8005874:	1d1a      	adds	r2, r3, #4
 8005876:	6032      	str	r2, [r6, #0]
 8005878:	681e      	ldr	r6, [r3, #0]
 800587a:	6862      	ldr	r2, [r4, #4]
 800587c:	2100      	movs	r1, #0
 800587e:	4630      	mov	r0, r6
 8005880:	f7fa fcae 	bl	80001e0 <memchr>
 8005884:	b108      	cbz	r0, 800588a <_printf_i+0x1e6>
 8005886:	1b80      	subs	r0, r0, r6
 8005888:	6060      	str	r0, [r4, #4]
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	6123      	str	r3, [r4, #16]
 800588e:	2300      	movs	r3, #0
 8005890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005894:	e7aa      	b.n	80057ec <_printf_i+0x148>
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	4632      	mov	r2, r6
 800589a:	4649      	mov	r1, r9
 800589c:	4640      	mov	r0, r8
 800589e:	47d0      	blx	sl
 80058a0:	3001      	adds	r0, #1
 80058a2:	d0ad      	beq.n	8005800 <_printf_i+0x15c>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	079b      	lsls	r3, r3, #30
 80058a8:	d413      	bmi.n	80058d2 <_printf_i+0x22e>
 80058aa:	68e0      	ldr	r0, [r4, #12]
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	4298      	cmp	r0, r3
 80058b0:	bfb8      	it	lt
 80058b2:	4618      	movlt	r0, r3
 80058b4:	e7a6      	b.n	8005804 <_printf_i+0x160>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4632      	mov	r2, r6
 80058ba:	4649      	mov	r1, r9
 80058bc:	4640      	mov	r0, r8
 80058be:	47d0      	blx	sl
 80058c0:	3001      	adds	r0, #1
 80058c2:	d09d      	beq.n	8005800 <_printf_i+0x15c>
 80058c4:	3501      	adds	r5, #1
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	9903      	ldr	r1, [sp, #12]
 80058ca:	1a5b      	subs	r3, r3, r1
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	dcf2      	bgt.n	80058b6 <_printf_i+0x212>
 80058d0:	e7eb      	b.n	80058aa <_printf_i+0x206>
 80058d2:	2500      	movs	r5, #0
 80058d4:	f104 0619 	add.w	r6, r4, #25
 80058d8:	e7f5      	b.n	80058c6 <_printf_i+0x222>
 80058da:	bf00      	nop
 80058dc:	08005d88 	.word	0x08005d88
 80058e0:	08005d99 	.word	0x08005d99

080058e4 <__swbuf_r>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	460e      	mov	r6, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	4605      	mov	r5, r0
 80058ec:	b118      	cbz	r0, 80058f6 <__swbuf_r+0x12>
 80058ee:	6a03      	ldr	r3, [r0, #32]
 80058f0:	b90b      	cbnz	r3, 80058f6 <__swbuf_r+0x12>
 80058f2:	f7ff fa3f 	bl	8004d74 <__sinit>
 80058f6:	69a3      	ldr	r3, [r4, #24]
 80058f8:	60a3      	str	r3, [r4, #8]
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	071a      	lsls	r2, r3, #28
 80058fe:	d501      	bpl.n	8005904 <__swbuf_r+0x20>
 8005900:	6923      	ldr	r3, [r4, #16]
 8005902:	b943      	cbnz	r3, 8005916 <__swbuf_r+0x32>
 8005904:	4621      	mov	r1, r4
 8005906:	4628      	mov	r0, r5
 8005908:	f000 f82a 	bl	8005960 <__swsetup_r>
 800590c:	b118      	cbz	r0, 8005916 <__swbuf_r+0x32>
 800590e:	f04f 37ff 	mov.w	r7, #4294967295
 8005912:	4638      	mov	r0, r7
 8005914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	6922      	ldr	r2, [r4, #16]
 800591a:	1a98      	subs	r0, r3, r2
 800591c:	6963      	ldr	r3, [r4, #20]
 800591e:	b2f6      	uxtb	r6, r6
 8005920:	4283      	cmp	r3, r0
 8005922:	4637      	mov	r7, r6
 8005924:	dc05      	bgt.n	8005932 <__swbuf_r+0x4e>
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f7ff fcbb 	bl	80052a4 <_fflush_r>
 800592e:	2800      	cmp	r0, #0
 8005930:	d1ed      	bne.n	800590e <__swbuf_r+0x2a>
 8005932:	68a3      	ldr	r3, [r4, #8]
 8005934:	3b01      	subs	r3, #1
 8005936:	60a3      	str	r3, [r4, #8]
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	6022      	str	r2, [r4, #0]
 800593e:	701e      	strb	r6, [r3, #0]
 8005940:	6962      	ldr	r2, [r4, #20]
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	429a      	cmp	r2, r3
 8005946:	d004      	beq.n	8005952 <__swbuf_r+0x6e>
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	07db      	lsls	r3, r3, #31
 800594c:	d5e1      	bpl.n	8005912 <__swbuf_r+0x2e>
 800594e:	2e0a      	cmp	r6, #10
 8005950:	d1df      	bne.n	8005912 <__swbuf_r+0x2e>
 8005952:	4621      	mov	r1, r4
 8005954:	4628      	mov	r0, r5
 8005956:	f7ff fca5 	bl	80052a4 <_fflush_r>
 800595a:	2800      	cmp	r0, #0
 800595c:	d0d9      	beq.n	8005912 <__swbuf_r+0x2e>
 800595e:	e7d6      	b.n	800590e <__swbuf_r+0x2a>

08005960 <__swsetup_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4b29      	ldr	r3, [pc, #164]	@ (8005a08 <__swsetup_r+0xa8>)
 8005964:	4605      	mov	r5, r0
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	460c      	mov	r4, r1
 800596a:	b118      	cbz	r0, 8005974 <__swsetup_r+0x14>
 800596c:	6a03      	ldr	r3, [r0, #32]
 800596e:	b90b      	cbnz	r3, 8005974 <__swsetup_r+0x14>
 8005970:	f7ff fa00 	bl	8004d74 <__sinit>
 8005974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005978:	0719      	lsls	r1, r3, #28
 800597a:	d422      	bmi.n	80059c2 <__swsetup_r+0x62>
 800597c:	06da      	lsls	r2, r3, #27
 800597e:	d407      	bmi.n	8005990 <__swsetup_r+0x30>
 8005980:	2209      	movs	r2, #9
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005988:	81a3      	strh	r3, [r4, #12]
 800598a:	f04f 30ff 	mov.w	r0, #4294967295
 800598e:	e033      	b.n	80059f8 <__swsetup_r+0x98>
 8005990:	0758      	lsls	r0, r3, #29
 8005992:	d512      	bpl.n	80059ba <__swsetup_r+0x5a>
 8005994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005996:	b141      	cbz	r1, 80059aa <__swsetup_r+0x4a>
 8005998:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800599c:	4299      	cmp	r1, r3
 800599e:	d002      	beq.n	80059a6 <__swsetup_r+0x46>
 80059a0:	4628      	mov	r0, r5
 80059a2:	f7ff fafb 	bl	8004f9c <_free_r>
 80059a6:	2300      	movs	r3, #0
 80059a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	2300      	movs	r3, #0
 80059b4:	6063      	str	r3, [r4, #4]
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f043 0308 	orr.w	r3, r3, #8
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	b94b      	cbnz	r3, 80059da <__swsetup_r+0x7a>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d0:	d003      	beq.n	80059da <__swsetup_r+0x7a>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 f883 	bl	8005ae0 <__smakebuf_r>
 80059da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059de:	f013 0201 	ands.w	r2, r3, #1
 80059e2:	d00a      	beq.n	80059fa <__swsetup_r+0x9a>
 80059e4:	2200      	movs	r2, #0
 80059e6:	60a2      	str	r2, [r4, #8]
 80059e8:	6962      	ldr	r2, [r4, #20]
 80059ea:	4252      	negs	r2, r2
 80059ec:	61a2      	str	r2, [r4, #24]
 80059ee:	6922      	ldr	r2, [r4, #16]
 80059f0:	b942      	cbnz	r2, 8005a04 <__swsetup_r+0xa4>
 80059f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059f6:	d1c5      	bne.n	8005984 <__swsetup_r+0x24>
 80059f8:	bd38      	pop	{r3, r4, r5, pc}
 80059fa:	0799      	lsls	r1, r3, #30
 80059fc:	bf58      	it	pl
 80059fe:	6962      	ldrpl	r2, [r4, #20]
 8005a00:	60a2      	str	r2, [r4, #8]
 8005a02:	e7f4      	b.n	80059ee <__swsetup_r+0x8e>
 8005a04:	2000      	movs	r0, #0
 8005a06:	e7f7      	b.n	80059f8 <__swsetup_r+0x98>
 8005a08:	20000020 	.word	0x20000020

08005a0c <_raise_r>:
 8005a0c:	291f      	cmp	r1, #31
 8005a0e:	b538      	push	{r3, r4, r5, lr}
 8005a10:	4605      	mov	r5, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	d904      	bls.n	8005a20 <_raise_r+0x14>
 8005a16:	2316      	movs	r3, #22
 8005a18:	6003      	str	r3, [r0, #0]
 8005a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005a22:	b112      	cbz	r2, 8005a2a <_raise_r+0x1e>
 8005a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a28:	b94b      	cbnz	r3, 8005a3e <_raise_r+0x32>
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f830 	bl	8005a90 <_getpid_r>
 8005a30:	4622      	mov	r2, r4
 8005a32:	4601      	mov	r1, r0
 8005a34:	4628      	mov	r0, r5
 8005a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a3a:	f000 b817 	b.w	8005a6c <_kill_r>
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d00a      	beq.n	8005a58 <_raise_r+0x4c>
 8005a42:	1c59      	adds	r1, r3, #1
 8005a44:	d103      	bne.n	8005a4e <_raise_r+0x42>
 8005a46:	2316      	movs	r3, #22
 8005a48:	6003      	str	r3, [r0, #0]
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	e7e7      	b.n	8005a1e <_raise_r+0x12>
 8005a4e:	2100      	movs	r1, #0
 8005a50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a54:	4620      	mov	r0, r4
 8005a56:	4798      	blx	r3
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7e0      	b.n	8005a1e <_raise_r+0x12>

08005a5c <raise>:
 8005a5c:	4b02      	ldr	r3, [pc, #8]	@ (8005a68 <raise+0xc>)
 8005a5e:	4601      	mov	r1, r0
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f7ff bfd3 	b.w	8005a0c <_raise_r>
 8005a66:	bf00      	nop
 8005a68:	20000020 	.word	0x20000020

08005a6c <_kill_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d07      	ldr	r5, [pc, #28]	@ (8005a8c <_kill_r+0x20>)
 8005a70:	2300      	movs	r3, #0
 8005a72:	4604      	mov	r4, r0
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	602b      	str	r3, [r5, #0]
 8005a7a:	f7fb f8e7 	bl	8000c4c <_kill>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	d102      	bne.n	8005a88 <_kill_r+0x1c>
 8005a82:	682b      	ldr	r3, [r5, #0]
 8005a84:	b103      	cbz	r3, 8005a88 <_kill_r+0x1c>
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	bd38      	pop	{r3, r4, r5, pc}
 8005a8a:	bf00      	nop
 8005a8c:	200005b8 	.word	0x200005b8

08005a90 <_getpid_r>:
 8005a90:	f7fb b8d4 	b.w	8000c3c <_getpid>

08005a94 <__swhatbuf_r>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	460c      	mov	r4, r1
 8005a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	b096      	sub	sp, #88	@ 0x58
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	461e      	mov	r6, r3
 8005aa4:	da0d      	bge.n	8005ac2 <__swhatbuf_r+0x2e>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005aac:	f04f 0100 	mov.w	r1, #0
 8005ab0:	bf14      	ite	ne
 8005ab2:	2340      	movne	r3, #64	@ 0x40
 8005ab4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ab8:	2000      	movs	r0, #0
 8005aba:	6031      	str	r1, [r6, #0]
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	b016      	add	sp, #88	@ 0x58
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	466a      	mov	r2, sp
 8005ac4:	f000 f848 	bl	8005b58 <_fstat_r>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	dbec      	blt.n	8005aa6 <__swhatbuf_r+0x12>
 8005acc:	9901      	ldr	r1, [sp, #4]
 8005ace:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ad2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ad6:	4259      	negs	r1, r3
 8005ad8:	4159      	adcs	r1, r3
 8005ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ade:	e7eb      	b.n	8005ab8 <__swhatbuf_r+0x24>

08005ae0 <__smakebuf_r>:
 8005ae0:	898b      	ldrh	r3, [r1, #12]
 8005ae2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae4:	079d      	lsls	r5, r3, #30
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	460c      	mov	r4, r1
 8005aea:	d507      	bpl.n	8005afc <__smakebuf_r+0x1c>
 8005aec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	6123      	str	r3, [r4, #16]
 8005af4:	2301      	movs	r3, #1
 8005af6:	6163      	str	r3, [r4, #20]
 8005af8:	b003      	add	sp, #12
 8005afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afc:	ab01      	add	r3, sp, #4
 8005afe:	466a      	mov	r2, sp
 8005b00:	f7ff ffc8 	bl	8005a94 <__swhatbuf_r>
 8005b04:	9f00      	ldr	r7, [sp, #0]
 8005b06:	4605      	mov	r5, r0
 8005b08:	4639      	mov	r1, r7
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7ff faba 	bl	8005084 <_malloc_r>
 8005b10:	b948      	cbnz	r0, 8005b26 <__smakebuf_r+0x46>
 8005b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b16:	059a      	lsls	r2, r3, #22
 8005b18:	d4ee      	bmi.n	8005af8 <__smakebuf_r+0x18>
 8005b1a:	f023 0303 	bic.w	r3, r3, #3
 8005b1e:	f043 0302 	orr.w	r3, r3, #2
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	e7e2      	b.n	8005aec <__smakebuf_r+0xc>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	6020      	str	r0, [r4, #0]
 8005b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	9b01      	ldr	r3, [sp, #4]
 8005b32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b36:	b15b      	cbz	r3, 8005b50 <__smakebuf_r+0x70>
 8005b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f000 f81d 	bl	8005b7c <_isatty_r>
 8005b42:	b128      	cbz	r0, 8005b50 <__smakebuf_r+0x70>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	81a3      	strh	r3, [r4, #12]
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	431d      	orrs	r5, r3
 8005b54:	81a5      	strh	r5, [r4, #12]
 8005b56:	e7cf      	b.n	8005af8 <__smakebuf_r+0x18>

08005b58 <_fstat_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d07      	ldr	r5, [pc, #28]	@ (8005b78 <_fstat_r+0x20>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	f7fb f8d1 	bl	8000d0c <_fstat>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d102      	bne.n	8005b74 <_fstat_r+0x1c>
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	b103      	cbz	r3, 8005b74 <_fstat_r+0x1c>
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
 8005b76:	bf00      	nop
 8005b78:	200005b8 	.word	0x200005b8

08005b7c <_isatty_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d06      	ldr	r5, [pc, #24]	@ (8005b98 <_isatty_r+0x1c>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fb f8d0 	bl	8000d2c <_isatty>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_isatty_r+0x1a>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_isatty_r+0x1a>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200005b8 	.word	0x200005b8

08005b9c <_init>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr

08005ba8 <_fini>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	bf00      	nop
 8005bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bae:	bc08      	pop	{r3}
 8005bb0:	469e      	mov	lr, r3
 8005bb2:	4770      	bx	lr
