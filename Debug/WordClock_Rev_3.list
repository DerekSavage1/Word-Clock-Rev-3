
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005684  08005684  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800568c  0800568c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  20000088  0800571c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  0800571c  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c764  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ef  00000000  00000000  0002c81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017890  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e63e  00000000  00000000  00047890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092cf2  00000000  00000000  00055ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003510  00000000  00000000  000e8c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005304 	.word	0x08005304

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005304 	.word	0x08005304

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <getRainbowColor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t getRainbowColor(uint8_t colorOption) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    switch (colorOption) {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d84a      	bhi.n	800063c <getRainbowColor+0xa8>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <getRainbowColor+0x18>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	080005f3 	.word	0x080005f3
 80005b4:	080005f7 	.word	0x080005f7
 80005b8:	080005fb 	.word	0x080005fb
 80005bc:	080005ff 	.word	0x080005ff
 80005c0:	08000605 	.word	0x08000605
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000611 	.word	0x08000611
 80005cc:	08000617 	.word	0x08000617
 80005d0:	0800061b 	.word	0x0800061b
 80005d4:	0800061f 	.word	0x0800061f
 80005d8:	08000625 	.word	0x08000625
 80005dc:	08000629 	.word	0x08000629
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	08000631 	.word	0x08000631
 80005e8:	08000637 	.word	0x08000637
        case 1:
            return 0xFF0000; // Red
 80005ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80005f0:	e026      	b.n	8000640 <getRainbowColor+0xac>
        case 2:
            return 0xFF7F00; // Orange
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <getRainbowColor+0xb8>)
 80005f4:	e024      	b.n	8000640 <getRainbowColor+0xac>
        case 3:
            return 0xFFFF00; // Yellow
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <getRainbowColor+0xbc>)
 80005f8:	e022      	b.n	8000640 <getRainbowColor+0xac>
        case 4:
            return 0x7FFF00; // Yellow-Green
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <getRainbowColor+0xc0>)
 80005fc:	e020      	b.n	8000640 <getRainbowColor+0xac>
        case 5:
            return 0x00FF00; // Green
 80005fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000602:	e01d      	b.n	8000640 <getRainbowColor+0xac>
        case 6:
            return 0x00FF7F; // Spring Green
 8000604:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000608:	e01a      	b.n	8000640 <getRainbowColor+0xac>
        case 7:
            return 0x00FFFF; // Cyan
 800060a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060e:	e017      	b.n	8000640 <getRainbowColor+0xac>
        case 8:
            return 0x007FFF; // Sky Blue
 8000610:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000614:	e014      	b.n	8000640 <getRainbowColor+0xac>
        case 9:
            return 0x0000FF; // Blue
 8000616:	23ff      	movs	r3, #255	; 0xff
 8000618:	e012      	b.n	8000640 <getRainbowColor+0xac>
        case 10:
            return 0x7F00FF; // Violet
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <getRainbowColor+0xc4>)
 800061c:	e010      	b.n	8000640 <getRainbowColor+0xac>
        case 11:
            return 0xFF00FF; // Magenta
 800061e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8000622:	e00d      	b.n	8000640 <getRainbowColor+0xac>
        case 12:
            return 0xFF007F; // Rose
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <getRainbowColor+0xc8>)
 8000626:	e00b      	b.n	8000640 <getRainbowColor+0xac>
        case 13:
            return 0xFF1493; // Deep Pink
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <getRainbowColor+0xcc>)
 800062a:	e009      	b.n	8000640 <getRainbowColor+0xac>
        case 14:
            return 0xC71585; // Medium Violet Red
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <getRainbowColor+0xd0>)
 800062e:	e007      	b.n	8000640 <getRainbowColor+0xac>
        case 15:
            return 0x800080; // Purple
 8000630:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
 8000634:	e004      	b.n	8000640 <getRainbowColor+0xac>
        case 16:
            return 0x8B008B; // Dark Magenta
 8000636:	f04f 138b 	mov.w	r3, #9109643	; 0x8b008b
 800063a:	e001      	b.n	8000640 <getRainbowColor+0xac>
        default:
            return 0xFFFFFF; // Default to White if an unexpected value is provided
 800063c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    }
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	00ff7f00 	.word	0x00ff7f00
 8000650:	00ffff00 	.word	0x00ffff00
 8000654:	007fff00 	.word	0x007fff00
 8000658:	007f00ff 	.word	0x007f00ff
 800065c:	00ff007f 	.word	0x00ff007f
 8000660:	00ff1493 	.word	0x00ff1493
 8000664:	00c71585 	.word	0x00c71585

08000668 <clear_display_buffer>:
    MINUTE_THIRTY // This is only used if we exactly hit the 30-minute mark
};

unsigned char displayBuffer[12][11] = {0}; // Adjust the buffer to be 12 rows by 11 columns

void clear_display_buffer() {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
    for (int row = 0; row < 12; row++) {
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	e017      	b.n	80006a4 <clear_display_buffer+0x3c>
        for (int col = 0; col < 11; col++) {
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	e00e      	b.n	8000698 <clear_display_buffer+0x30>
            displayBuffer[row][col] = 0; // Clear the bit in the display buffer
 800067a:	490f      	ldr	r1, [pc, #60]	; (80006b8 <clear_display_buffer+0x50>)
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	18ca      	adds	r2, r1, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) {
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	2b0a      	cmp	r3, #10
 800069c:	dded      	ble.n	800067a <clear_display_buffer+0x12>
    for (int row = 0; row < 12; row++) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b0b      	cmp	r3, #11
 80006a8:	dde4      	ble.n	8000674 <clear_display_buffer+0xc>
        }
    }
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	2000016c 	.word	0x2000016c

080006bc <add_bmp>:

void add_bmp(const uint16_t bmp[12]) {
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    for (int row = 0; row < 12; row++) { // Loop over each row
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e032      	b.n	8000730 <add_bmp+0x74>
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e029      	b.n	8000724 <add_bmp+0x68>
            if ((bmp[row] & (1 << col)) != 0) { // Check if the bit is set in bmp at (row, col)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	fa42 f303 	asr.w	r3, r2, r3
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d019      	beq.n	800071e <add_bmp+0x62>
                displayBuffer[row][col] |= 1; // Set the bit in the display buffer
 80006ea:	4916      	ldr	r1, [pc, #88]	; (8000744 <add_bmp+0x88>)
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	18ca      	adds	r2, r1, r3
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	b2d8      	uxtb	r0, r3
 8000706:	490f      	ldr	r1, [pc, #60]	; (8000744 <add_bmp+0x88>)
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	18ca      	adds	r2, r1, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	4602      	mov	r2, r0
 800071c:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3301      	adds	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b0a      	cmp	r3, #10
 8000728:	ddd2      	ble.n	80006d0 <add_bmp+0x14>
    for (int row = 0; row < 12; row++) { // Loop over each row
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b0b      	cmp	r3, #11
 8000734:	ddc9      	ble.n	80006ca <add_bmp+0xe>
            }
        }
    }
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	2000016c 	.word	0x2000016c

08000748 <display_bmp>:

void display_bmp(uint32_t color) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    // Extract the red, green, and blue components from the color
    uint8_t red = (color >> 16) & 0xFF;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	73fb      	strb	r3, [r7, #15]
    uint8_t green = (color >> 8) & 0xFF;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	73bb      	strb	r3, [r7, #14]
    uint8_t blue = color & 0xFF;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	737b      	strb	r3, [r7, #13]

    for (int row = 0; row < 12; row++) {
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	e035      	b.n	80007d2 <display_bmp+0x8a>
        for (int col = 0; col < 11; col++) {
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	e02c      	b.n	80007c6 <display_bmp+0x7e>
            if (displayBuffer[row][col] & 1) { // Check if the bit is set
 800076c:	491d      	ldr	r1, [pc, #116]	; (80007e4 <display_bmp+0x9c>)
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	18ca      	adds	r2, r1, r3
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	2b00      	cmp	r3, #0
 8000788:	d00d      	beq.n	80007a6 <display_bmp+0x5e>
                // Set the LED to the specified color
                Set_LED((row * 11) + col, red, green, blue);
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	441a      	add	r2, r3
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	18d0      	adds	r0, r2, r3
 800079a:	7bf9      	ldrb	r1, [r7, #15]
 800079c:	7bba      	ldrb	r2, [r7, #14]
 800079e:	7b7b      	ldrb	r3, [r7, #13]
 80007a0:	f004 f83e 	bl	8004820 <Set_LED>
 80007a4:	e00c      	b.n	80007c0 <display_bmp+0x78>
            } else {
                // Turn the LED off
                Set_LED((row * 11) + col, 0, 0, 0);
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	441a      	add	r2, r3
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	18d0      	adds	r0, r2, r3
 80007b6:	2300      	movs	r3, #0
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	f004 f830 	bl	8004820 <Set_LED>
        for (int col = 0; col < 11; col++) {
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	3301      	adds	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	2b0a      	cmp	r3, #10
 80007ca:	ddcf      	ble.n	800076c <display_bmp+0x24>
    for (int row = 0; row < 12; row++) {
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3301      	adds	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	2b0b      	cmp	r3, #11
 80007d6:	ddc6      	ble.n	8000766 <display_bmp+0x1e>
            }
        }
    }
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000016c 	.word	0x2000016c

080007e8 <display_time>:



void display_time(int hour, int minute) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	add_bmp(BMP_ITS);
 80007f2:	4859      	ldr	r0, [pc, #356]	; (8000958 <display_time+0x170>)
 80007f4:	f7ff ff62 	bl	80006bc <add_bmp>
    // Round down to the nearest five minutes
    minute = (minute / 5) * 5;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4a58      	ldr	r2, [pc, #352]	; (800095c <display_time+0x174>)
 80007fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000800:	1052      	asrs	r2, r2, #1
 8000802:	17db      	asrs	r3, r3, #31
 8000804:	1ad2      	subs	r2, r2, r3
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	603b      	str	r3, [r7, #0]

    // Display minute, accounting for 'past' or 'to'
    if (minute < 5) {
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2b04      	cmp	r3, #4
 8000812:	dd10      	ble.n	8000836 <display_time+0x4e>
    	//no past or till
    } else if (minute < 35) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	2b22      	cmp	r3, #34	; 0x22
 8000818:	dc03      	bgt.n	8000822 <display_time+0x3a>
        add_bmp(BMP_PAST);
 800081a:	4851      	ldr	r0, [pc, #324]	; (8000960 <display_time+0x178>)
 800081c:	f7ff ff4e 	bl	80006bc <add_bmp>
 8000820:	e009      	b.n	8000836 <display_time+0x4e>
    } else {
        minute = 60 - minute;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000828:	603b      	str	r3, [r7, #0]
        hour++;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3301      	adds	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
        add_bmp(BMP_TILL);
 8000830:	484c      	ldr	r0, [pc, #304]	; (8000964 <display_time+0x17c>)
 8000832:	f7ff ff43 	bl	80006bc <add_bmp>
    }

    if(hour == 0 || hour == 12);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00c      	beq.n	8000856 <display_time+0x6e>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b0c      	cmp	r3, #12
 8000840:	d009      	beq.n	8000856 <display_time+0x6e>
    else if(hour < 12) add_bmp(BMP_AM);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0b      	cmp	r3, #11
 8000846:	dc03      	bgt.n	8000850 <display_time+0x68>
 8000848:	4847      	ldr	r0, [pc, #284]	; (8000968 <display_time+0x180>)
 800084a:	f7ff ff37 	bl	80006bc <add_bmp>
 800084e:	e002      	b.n	8000856 <display_time+0x6e>
    else add_bmp(BMP_PM);
 8000850:	4846      	ldr	r0, [pc, #280]	; (800096c <display_time+0x184>)
 8000852:	f7ff ff33 	bl	80006bc <add_bmp>

    // Display hour
    switch(hour) {
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b17      	cmp	r3, #23
 800085a:	d867      	bhi.n	800092c <display_time+0x144>
 800085c:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <display_time+0x7c>)
 800085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000862:	bf00      	nop
 8000864:	080008c5 	.word	0x080008c5
 8000868:	080008cd 	.word	0x080008cd
 800086c:	080008d5 	.word	0x080008d5
 8000870:	080008dd 	.word	0x080008dd
 8000874:	080008e5 	.word	0x080008e5
 8000878:	080008ed 	.word	0x080008ed
 800087c:	080008f5 	.word	0x080008f5
 8000880:	080008fd 	.word	0x080008fd
 8000884:	08000905 	.word	0x08000905
 8000888:	0800090d 	.word	0x0800090d
 800088c:	08000915 	.word	0x08000915
 8000890:	0800091d 	.word	0x0800091d
 8000894:	08000925 	.word	0x08000925
 8000898:	080008cd 	.word	0x080008cd
 800089c:	080008d5 	.word	0x080008d5
 80008a0:	080008dd 	.word	0x080008dd
 80008a4:	080008e5 	.word	0x080008e5
 80008a8:	080008ed 	.word	0x080008ed
 80008ac:	080008f5 	.word	0x080008f5
 80008b0:	080008fd 	.word	0x080008fd
 80008b4:	08000905 	.word	0x08000905
 80008b8:	0800090d 	.word	0x0800090d
 80008bc:	08000915 	.word	0x08000915
 80008c0:	0800091d 	.word	0x0800091d
        case 0:
            add_bmp(HOUR_MIDNIGHT);
 80008c4:	482a      	ldr	r0, [pc, #168]	; (8000970 <display_time+0x188>)
 80008c6:	f7ff fef9 	bl	80006bc <add_bmp>
            break;
 80008ca:	e030      	b.n	800092e <display_time+0x146>
        case 1:
        case 13:
            add_bmp(HOUR_ONE);
 80008cc:	4829      	ldr	r0, [pc, #164]	; (8000974 <display_time+0x18c>)
 80008ce:	f7ff fef5 	bl	80006bc <add_bmp>
            break;
 80008d2:	e02c      	b.n	800092e <display_time+0x146>
        case 2:
        case 14:
            add_bmp(HOUR_TWO);
 80008d4:	4828      	ldr	r0, [pc, #160]	; (8000978 <display_time+0x190>)
 80008d6:	f7ff fef1 	bl	80006bc <add_bmp>
            break;
 80008da:	e028      	b.n	800092e <display_time+0x146>
        case 3:
        case 15:
            add_bmp(HOUR_THREE);
 80008dc:	4827      	ldr	r0, [pc, #156]	; (800097c <display_time+0x194>)
 80008de:	f7ff feed 	bl	80006bc <add_bmp>
            break;
 80008e2:	e024      	b.n	800092e <display_time+0x146>
        case 4:
        case 16:
            add_bmp(HOUR_FOUR);
 80008e4:	4826      	ldr	r0, [pc, #152]	; (8000980 <display_time+0x198>)
 80008e6:	f7ff fee9 	bl	80006bc <add_bmp>
            break;
 80008ea:	e020      	b.n	800092e <display_time+0x146>
        case 5:
        case 17:
            add_bmp(HOUR_FIVE);
 80008ec:	4825      	ldr	r0, [pc, #148]	; (8000984 <display_time+0x19c>)
 80008ee:	f7ff fee5 	bl	80006bc <add_bmp>
            break;
 80008f2:	e01c      	b.n	800092e <display_time+0x146>
        case 6:
        case 18:
            add_bmp(HOUR_SIX);
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <display_time+0x1a0>)
 80008f6:	f7ff fee1 	bl	80006bc <add_bmp>
            break;
 80008fa:	e018      	b.n	800092e <display_time+0x146>
        case 7:
        case 19:
            add_bmp(HOUR_SEVEN);
 80008fc:	4823      	ldr	r0, [pc, #140]	; (800098c <display_time+0x1a4>)
 80008fe:	f7ff fedd 	bl	80006bc <add_bmp>
            break;
 8000902:	e014      	b.n	800092e <display_time+0x146>
        case 8:
        case 20:
            add_bmp(HOUR_EIGHT);
 8000904:	4822      	ldr	r0, [pc, #136]	; (8000990 <display_time+0x1a8>)
 8000906:	f7ff fed9 	bl	80006bc <add_bmp>
            break;
 800090a:	e010      	b.n	800092e <display_time+0x146>
        case 9:
        case 21:
            add_bmp(HOUR_NINE);
 800090c:	4821      	ldr	r0, [pc, #132]	; (8000994 <display_time+0x1ac>)
 800090e:	f7ff fed5 	bl	80006bc <add_bmp>
            break;
 8000912:	e00c      	b.n	800092e <display_time+0x146>
        case 10:
        case 22:
            add_bmp(HOUR_TEN);
 8000914:	4820      	ldr	r0, [pc, #128]	; (8000998 <display_time+0x1b0>)
 8000916:	f7ff fed1 	bl	80006bc <add_bmp>
            break;
 800091a:	e008      	b.n	800092e <display_time+0x146>
        case 11:
        case 23:
            add_bmp(HOUR_ELEVEN);
 800091c:	481f      	ldr	r0, [pc, #124]	; (800099c <display_time+0x1b4>)
 800091e:	f7ff fecd 	bl	80006bc <add_bmp>
            break;
 8000922:	e004      	b.n	800092e <display_time+0x146>
        case 12:
            add_bmp(HOUR_NOON);
 8000924:	481e      	ldr	r0, [pc, #120]	; (80009a0 <display_time+0x1b8>)
 8000926:	f7ff fec9 	bl	80006bc <add_bmp>
            break;
 800092a:	e000      	b.n	800092e <display_time+0x146>
        default:
            // Handle error or invalid hour
            break;
 800092c:	bf00      	nop
    }

    // Display minute in intervals of five using an array pointing to the bitmaps
    if (minute > 0) {
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	dd0d      	ble.n	8000950 <display_time+0x168>
        add_bmp(minuteBitmaps[(minute / 5) - 1]);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <display_time+0x174>)
 8000938:	fb82 1203 	smull	r1, r2, r2, r3
 800093c:	1052      	asrs	r2, r2, #1
 800093e:	17db      	asrs	r3, r3, #31
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	3b01      	subs	r3, #1
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <display_time+0x1bc>)
 8000946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff feb6 	bl	80006bc <add_bmp>
    }
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	08005504 	.word	0x08005504
 800095c:	66666667 	.word	0x66666667
 8000960:	0800551c 	.word	0x0800551c
 8000964:	08005534 	.word	0x08005534
 8000968:	080055ac 	.word	0x080055ac
 800096c:	080055c4 	.word	0x080055c4
 8000970:	0800545c 	.word	0x0800545c
 8000974:	0800533c 	.word	0x0800533c
 8000978:	08005354 	.word	0x08005354
 800097c:	0800536c 	.word	0x0800536c
 8000980:	08005384 	.word	0x08005384
 8000984:	0800539c 	.word	0x0800539c
 8000988:	080053b4 	.word	0x080053b4
 800098c:	080053cc 	.word	0x080053cc
 8000990:	080053e4 	.word	0x080053e4
 8000994:	080053fc 	.word	0x080053fc
 8000998:	08005414 	.word	0x08005414
 800099c:	0800542c 	.word	0x0800542c
 80009a0:	08005444 	.word	0x08005444
 80009a4:	20000000 	.word	0x20000000

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	b099      	sub	sp, #100	; 0x64
 80009ac:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f000 ff05 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f961 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 fae3 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ba:	f000 fac1 	bl	8000f40 <MX_DMA_Init>
  MX_TIM1_Init();
 80009be:	f000 fa1f 	bl	8000e00 <MX_TIM1_Init>
  MX_RTC_Init();
 80009c2:	f000 f9c3 	bl	8000d4c <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  bool hours_set = false;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bool minutes_set = false;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  bool color_set = false;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t color = 0xFFFFFF;
 80009d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80009dc:	623b      	str	r3, [r7, #32]

    /* USER CODE BEGIN 3 */


		// Update the RTC structure with the current time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // or RTC_FORMAT_BCD depending on your setting
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2200      	movs	r2, #0
 80009e4:	4619      	mov	r1, r3
 80009e6:	489a      	ldr	r0, [pc, #616]	; (8000c50 <main+0x2a8>)
 80009e8:	f002 fc14 	bl	8003214 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This line is required to unlock the shadow registers
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4896      	ldr	r0, [pc, #600]	; (8000c50 <main+0x2a8>)
 80009f6:	f002 fcef 	bl	80033d8 <HAL_RTC_GetDate>



	    char displayStr[6]; // Buffer for "00:00" plus null terminator

	    switch (button_state) {
 80009fa:	4b96      	ldr	r3, [pc, #600]	; (8000c54 <main+0x2ac>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	f200 80ef 	bhi.w	8000be4 <main+0x23c>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <main+0x64>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a1d 	.word	0x08000a1d
 8000a10:	08000a37 	.word	0x08000a37
 8000a14:	08000acf 	.word	0x08000acf
 8000a18:	08000b71 	.word	0x08000b71
	        case 0:
	            // Default state, should not display anything.
	            Segment_Display("STRT");
 8000a1c:	488e      	ldr	r0, [pc, #568]	; (8000c58 <main+0x2b0>)
 8000a1e:	f000 fe2f 	bl	8001680 <Segment_Display>
	            hours_set = false;  // Reset hours_set flag
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	            minutes_set = false;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	            color_set = false;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	            break;
 8000a34:	e0dd      	b.n	8000bf2 <main+0x24a>
	        case 1:
	        	if(!hours_set) {
 8000a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a3a:	f083 0301 	eor.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00b      	beq.n	8000a5c <main+0xb4>
	        		encoder_count = (sTime.Hours * 10);
 8000a44:	7b3b      	ldrb	r3, [r7, #12]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b82      	ldr	r3, [pc, #520]	; (8000c5c <main+0x2b4>)
 8000a54:	601a      	str	r2, [r3, #0]
	        		hours_set = true;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        	}

	        	if(encoder_count > 230) encoder_count = 230; // 23 * 10
 8000a5c:	4b7f      	ldr	r3, [pc, #508]	; (8000c5c <main+0x2b4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2be6      	cmp	r3, #230	; 0xe6
 8000a62:	dd02      	ble.n	8000a6a <main+0xc2>
 8000a64:	4b7d      	ldr	r3, [pc, #500]	; (8000c5c <main+0x2b4>)
 8000a66:	22e6      	movs	r2, #230	; 0xe6
 8000a68:	601a      	str	r2, [r3, #0]
	        	if(encoder_count < 0) encoder_count = 0;
 8000a6a:	4b7c      	ldr	r3, [pc, #496]	; (8000c5c <main+0x2b4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da02      	bge.n	8000a78 <main+0xd0>
 8000a72:	4b7a      	ldr	r3, [pc, #488]	; (8000c5c <main+0x2b4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]

	        	sTime.Hours = encoder_count / 10; // Convert to actual hours by dividing by 10
 8000a78:	4b78      	ldr	r3, [pc, #480]	; (8000c5c <main+0x2b4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a78      	ldr	r2, [pc, #480]	; (8000c60 <main+0x2b8>)
 8000a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a82:	1092      	asrs	r2, r2, #2
 8000a84:	17db      	asrs	r3, r3, #31
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	733b      	strb	r3, [r7, #12]
	        	sTime.Minutes = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	737b      	strb	r3, [r7, #13]
	        	sTime.Seconds = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73bb      	strb	r3, [r7, #14]
	        	snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000a94:	7b3b      	ldrb	r3, [r7, #12]
 8000a96:	461a      	mov	r2, r3
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	4a70      	ldr	r2, [pc, #448]	; (8000c64 <main+0x2bc>)
 8000aa2:	2106      	movs	r1, #6
 8000aa4:	f003 ffac 	bl	8004a00 <sniprintf>
	        	Segment_Display(displayStr);
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fde8 	bl	8001680 <Segment_Display>

        		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4865      	ldr	r0, [pc, #404]	; (8000c50 <main+0x2a8>)
 8000aba:	f002 fb11 	bl	80030e0 <HAL_RTC_SetTime>
        		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4862      	ldr	r0, [pc, #392]	; (8000c50 <main+0x2a8>)
 8000ac8:	f002 fc02 	bl	80032d0 <HAL_RTC_SetDate>
	            break;
 8000acc:	e091      	b.n	8000bf2 <main+0x24a>
	        case 2:
	        	if(!minutes_set) {
 8000ace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ad2:	f083 0301 	eor.w	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00b      	beq.n	8000af4 <main+0x14c>
	        		encoder_count = sTime.Minutes * 10;
 8000adc:	7b7b      	ldrb	r3, [r7, #13]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b5c      	ldr	r3, [pc, #368]	; (8000c5c <main+0x2b4>)
 8000aec:	601a      	str	r2, [r3, #0]
	        		minutes_set = true;
 8000aee:	2301      	movs	r3, #1
 8000af0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	        	}
	            sTime.Minutes = encoder_count;
 8000af4:	4b59      	ldr	r3, [pc, #356]	; (8000c5c <main+0x2b4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	737b      	strb	r3, [r7, #13]
	            sTime.Seconds = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73bb      	strb	r3, [r7, #14]

	            if(encoder_count > 590) encoder_count = 590;  // 59 * 10
 8000b00:	4b56      	ldr	r3, [pc, #344]	; (8000c5c <main+0x2b4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f240 224e 	movw	r2, #590	; 0x24e
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	dd03      	ble.n	8000b14 <main+0x16c>
 8000b0c:	4b53      	ldr	r3, [pc, #332]	; (8000c5c <main+0x2b4>)
 8000b0e:	f240 224e 	movw	r2, #590	; 0x24e
 8000b12:	601a      	str	r2, [r3, #0]
	            if(encoder_count < 0) encoder_count = 0;
 8000b14:	4b51      	ldr	r3, [pc, #324]	; (8000c5c <main+0x2b4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	da02      	bge.n	8000b22 <main+0x17a>
 8000b1c:	4b4f      	ldr	r3, [pc, #316]	; (8000c5c <main+0x2b4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]

	            sTime.Minutes = encoder_count / 10;
 8000b22:	4b4e      	ldr	r3, [pc, #312]	; (8000c5c <main+0x2b4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a4e      	ldr	r2, [pc, #312]	; (8000c60 <main+0x2b8>)
 8000b28:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2c:	1092      	asrs	r2, r2, #2
 8000b2e:	17db      	asrs	r3, r3, #31
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	737b      	strb	r3, [r7, #13]

	            snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000b36:	7b3b      	ldrb	r3, [r7, #12]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	7b7b      	ldrb	r3, [r7, #13]
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	4613      	mov	r3, r2
 8000b42:	4a48      	ldr	r2, [pc, #288]	; (8000c64 <main+0x2bc>)
 8000b44:	2106      	movs	r1, #6
 8000b46:	f003 ff5b 	bl	8004a00 <sniprintf>
	            Segment_Display(displayStr);
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fd97 	bl	8001680 <Segment_Display>

        		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	483d      	ldr	r0, [pc, #244]	; (8000c50 <main+0x2a8>)
 8000b5c:	f002 fac0 	bl	80030e0 <HAL_RTC_SetTime>
        		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	2200      	movs	r2, #0
 8000b66:	4619      	mov	r1, r3
 8000b68:	4839      	ldr	r0, [pc, #228]	; (8000c50 <main+0x2a8>)
 8000b6a:	f002 fbb1 	bl	80032d0 <HAL_RTC_SetDate>
	            break;
 8000b6e:	e040      	b.n	8000bf2 <main+0x24a>
	        case 3:
	        	if(!color_set) {
 8000b70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b74:	f083 0301 	eor.w	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <main+0x1e2>
	        		encoder_count = 0;
 8000b7e:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <main+0x2b4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
	        		color_set = true;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	        	}

	            if(encoder_count > 160) encoder_count = 160; // 160 * 10
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <main+0x2b4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2ba0      	cmp	r3, #160	; 0xa0
 8000b90:	dd02      	ble.n	8000b98 <main+0x1f0>
 8000b92:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <main+0x2b4>)
 8000b94:	22a0      	movs	r2, #160	; 0xa0
 8000b96:	601a      	str	r2, [r3, #0]
	            if(encoder_count < 0) encoder_count = 0;
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <main+0x2b4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da02      	bge.n	8000ba6 <main+0x1fe>
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <main+0x2b4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]

	        	color = getRainbowColor((int) encoder_count / 10);
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <main+0x2b4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <main+0x2b8>)
 8000bac:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb0:	1092      	asrs	r2, r2, #2
 8000bb2:	17db      	asrs	r3, r3, #31
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fceb 	bl	8000594 <getRainbowColor>
 8000bbe:	6238      	str	r0, [r7, #32]
	        	snprintf(displayStr, sizeof(displayStr), "%04i", (encoder_count / 10));
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <main+0x2b4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a26      	ldr	r2, [pc, #152]	; (8000c60 <main+0x2b8>)
 8000bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bca:	1092      	asrs	r2, r2, #2
 8000bcc:	17db      	asrs	r3, r3, #31
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <main+0x2c0>)
 8000bd4:	2106      	movs	r1, #6
 8000bd6:	f003 ff13 	bl	8004a00 <sniprintf>
	            Segment_Display(displayStr);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fd4f 	bl	8001680 <Segment_Display>
	        	break;
 8000be2:	e006      	b.n	8000bf2 <main+0x24a>
	        case 4:

	        default:
	            Segment_Display("ERR");
 8000be4:	4821      	ldr	r0, [pc, #132]	; (8000c6c <main+0x2c4>)
 8000be6:	f000 fd4b 	bl	8001680 <Segment_Display>
	            button_state = 0;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <main+0x2ac>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
	            break;
 8000bf0:	bf00      	nop

	    }



	    HAL_GPIO_WritePin(GPIOA, LED_Pin, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf8:	481d      	ldr	r0, [pc, #116]	; (8000c70 <main+0x2c8>)
 8000bfa:	f001 fcb5 	bl	8002568 <HAL_GPIO_WritePin>

	    HAL_Delay(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 fe4e 	bl	80018a0 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c0a:	4819      	ldr	r0, [pc, #100]	; (8000c70 <main+0x2c8>)
 8000c0c:	f001 fcac 	bl	8002568 <HAL_GPIO_WritePin>




	// Now you can safely use sTime to display the time or perform other operations
	display_time(sTime.Hours, sTime.Minutes);
 8000c10:	7b3b      	ldrb	r3, [r7, #12]
 8000c12:	461a      	mov	r2, r3
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4610      	mov	r0, r2
 8000c1a:	f7ff fde5 	bl	80007e8 <display_time>
	display_bmp(color);
 8000c1e:	6a38      	ldr	r0, [r7, #32]
 8000c20:	f7ff fd92 	bl	8000748 <display_bmp>
	WS2812B_Send(htim1);
 8000c24:	4e13      	ldr	r6, [pc, #76]	; (8000c74 <main+0x2cc>)
 8000c26:	466d      	mov	r5, sp
 8000c28:	f106 0410 	add.w	r4, r6, #16
 8000c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c44:	f003 fe1c 	bl	8004880 <WS2812B_Send>

	clear_display_buffer();
 8000c48:	f7ff fd0e 	bl	8000668 <clear_display_buffer>
  {
 8000c4c:	e6c7      	b.n	80009de <main+0x36>
 8000c4e:	bf00      	nop
 8000c50:	200000a4 	.word	0x200000a4
 8000c54:	200001f5 	.word	0x200001f5
 8000c58:	0800531c 	.word	0x0800531c
 8000c5c:	200001f0 	.word	0x200001f0
 8000c60:	66666667 	.word	0x66666667
 8000c64:	08005324 	.word	0x08005324
 8000c68:	08005330 	.word	0x08005330
 8000c6c:	08005338 	.word	0x08005338
 8000c70:	40020000 	.word	0x40020000
 8000c74:	200000c4 	.word	0x200000c4

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	; 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2230      	movs	r2, #48	; 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 feb2 	bl	80049f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <SystemClock_Config+0xcc>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <SystemClock_Config+0xcc>)
 8000ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <SystemClock_Config+0xcc>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <SystemClock_Config+0xd0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <SystemClock_Config+0xd0>)
 8000cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <SystemClock_Config+0xd0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cec:	2308      	movs	r3, #8
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cf0:	2348      	movs	r3, #72	; 0x48
 8000cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fc63 	bl	80025cc <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d0c:	f000 fa60 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	230f      	movs	r3, #15
 8000d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2302      	movs	r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fec5 	bl	8002abc <HAL_RCC_ClockConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d38:	f000 fa4a 	bl	80011d0 <Error_Handler>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3750      	adds	r7, #80	; 0x50
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40007000 	.word	0x40007000

08000d4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <MX_RTC_Init+0xac>)
 8000d66:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <MX_RTC_Init+0xac>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_RTC_Init+0xac>)
 8000d72:	227f      	movs	r2, #127	; 0x7f
 8000d74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <MX_RTC_Init+0xac>)
 8000d78:	22ff      	movs	r2, #255	; 0xff
 8000d7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_RTC_Init+0xac>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_RTC_Init+0xac>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_RTC_Init+0xac>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d8e:	481a      	ldr	r0, [pc, #104]	; (8000df8 <MX_RTC_Init+0xac>)
 8000d90:	f002 f930 	bl	8002ff4 <HAL_RTC_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f000 fa19 	bl	80011d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 8000da2:	230f      	movs	r3, #15
 8000da4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 8000da6:	2332      	movs	r3, #50	; 0x32
 8000da8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	480f      	ldr	r0, [pc, #60]	; (8000df8 <MX_RTC_Init+0xac>)
 8000dba:	f002 f991 	bl	80030e0 <HAL_RTC_SetTime>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f000 fa04 	bl	80011d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 8000dd0:	2317      	movs	r3, #23
 8000dd2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8000dd4:	2318      	movs	r3, #24
 8000dd6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_RTC_Init+0xac>)
 8000de0:	f002 fa76 	bl	80032d0 <HAL_RTC_SetDate>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000dea:	f000 f9f1 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000a4 	.word	0x200000a4
 8000dfc:	40002800 	.word	0x40002800

08000e00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b096      	sub	sp, #88	; 0x58
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2220      	movs	r2, #32
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fdd9 	bl	80049f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e3e:	4b3e      	ldr	r3, [pc, #248]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e40:	4a3e      	ldr	r2, [pc, #248]	; (8000f3c <MX_TIM1_Init+0x13c>)
 8000e42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e44:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e52:	2259      	movs	r2, #89	; 0x59
 8000e54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e68:	4833      	ldr	r0, [pc, #204]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e6a:	f002 fbc1 	bl	80035f0 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e74:	f000 f9ac 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e82:	4619      	mov	r1, r3
 8000e84:	482c      	ldr	r0, [pc, #176]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e86:	f002 ff93 	bl	8003db0 <HAL_TIM_ConfigClockSource>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e90:	f000 f99e 	bl	80011d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e94:	4828      	ldr	r0, [pc, #160]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000e96:	f002 fbfa 	bl	800368e <HAL_TIM_PWM_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ea0:	f000 f996 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4821      	ldr	r0, [pc, #132]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000eb4:	f003 fbf4 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ebe:	f000 f987 	bl	80011d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec2:	2360      	movs	r3, #96	; 0x60
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000ee8:	f002 fea0 	bl	8003c2c <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ef2:	f000 f96d 	bl	80011d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4619      	mov	r1, r3
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000f1a:	f003 fc2f 	bl	800477c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000f24:	f000 f954 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_TIM1_Init+0x138>)
 8000f2a:	f000 f9ff 	bl	800132c <HAL_TIM_MspPostInit>

}
 8000f2e:	bf00      	nop
 8000f30:	3758      	adds	r7, #88	; 0x58
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000c4 	.word	0x200000c4
 8000f3c:	40010000 	.word	0x40010000

08000f40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2039      	movs	r0, #57	; 0x39
 8000f68:	f000 fd99 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f6c:	2039      	movs	r0, #57	; 0x39
 8000f6e:	f000 fdb2 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <MX_GPIO_Init+0x110>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <MX_GPIO_Init+0x110>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <MX_GPIO_Init+0x110>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_GPIO_Init+0x110>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a35      	ldr	r2, [pc, #212]	; (8001090 <MX_GPIO_Init+0x110>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <MX_GPIO_Init+0x110>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <MX_GPIO_Init+0x110>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a2e      	ldr	r2, [pc, #184]	; (8001090 <MX_GPIO_Init+0x110>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_GPIO_Init+0x110>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8000fea:	2200      	movs	r2, #0
 8000fec:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8000ff0:	4828      	ldr	r0, [pc, #160]	; (8001094 <MX_GPIO_Init+0x114>)
 8000ff2:	f001 fab9 	bl	8002568 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f241 4107 	movw	r1, #5127	; 0x1407
 8000ffc:	4826      	ldr	r0, [pc, #152]	; (8001098 <MX_GPIO_Init+0x118>)
 8000ffe:	f001 fab3 	bl	8002568 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001002:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001006:	60fb      	str	r3, [r7, #12]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	481e      	ldr	r0, [pc, #120]	; (8001094 <MX_GPIO_Init+0x114>)
 800101c:	f001 f908 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001020:	f241 4307 	movw	r3, #5127	; 0x1407
 8001024:	60fb      	str	r3, [r7, #12]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	4817      	ldr	r0, [pc, #92]	; (8001098 <MX_GPIO_Init+0x118>)
 800103a:	f001 f8f9 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_CH_A_Pin ENC_CH_B_Pin */
  GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CH_B_Pin;
 800103e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001044:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4619      	mov	r1, r3
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <MX_GPIO_Init+0x118>)
 8001056:	f001 f8eb 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800105a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001060:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001066:	2301      	movs	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <MX_GPIO_Init+0x118>)
 8001072:	f001 f8dd 	bl	8002230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2028      	movs	r0, #40	; 0x28
 800107c:	f000 fd0f 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001080:	2028      	movs	r0, #40	; 0x28
 8001082:	f000 fd28 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400

0800109c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
//----------------------------------------------------------------------------------------------------------------------------dial
// Callback function to handle encoder signals


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
    uint8_t currentState;
    uint8_t aState;
    uint8_t bState;
    const uint32_t debounce_delay = 50;  // milliseconds
 80010a6:	2332      	movs	r3, #50	; 0x32
 80010a8:	617b      	str	r3, [r7, #20]

    // Read the current encoder states
    aState = HAL_GPIO_ReadPin(GPIOB, ENC_CH_A_Pin);
 80010aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ae:	4843      	ldr	r0, [pc, #268]	; (80011bc <HAL_GPIO_EXTI_Callback+0x120>)
 80010b0:	f001 fa42 	bl	8002538 <HAL_GPIO_ReadPin>
 80010b4:	4603      	mov	r3, r0
 80010b6:	74fb      	strb	r3, [r7, #19]
    bState = HAL_GPIO_ReadPin(GPIOB, ENC_CH_B_Pin);
 80010b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010bc:	483f      	ldr	r0, [pc, #252]	; (80011bc <HAL_GPIO_EXTI_Callback+0x120>)
 80010be:	f001 fa3b 	bl	8002538 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	74bb      	strb	r3, [r7, #18]
    currentState = (aState << 1) | bState;
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b25a      	sxtb	r2, r3
 80010cc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	747b      	strb	r3, [r7, #17]

    // Only consider state changes if either A or B has generated an interrupt
    if ((GPIO_Pin == ENC_CH_A_Pin) || (GPIO_Pin == ENC_CH_B_Pin)) {
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_EXTI_Callback+0x4a>
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010e4:	d14e      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0xe8>
        // Determine the rotation direction based on the state transition
        if ((lastState == 0x0 && currentState == 0x2) ||
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <HAL_GPIO_EXTI_Callback+0x5a>
 80010f0:	7c7b      	ldrb	r3, [r7, #17]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d017      	beq.n	8001126 <HAL_GPIO_EXTI_Callback+0x8a>
            (lastState == 0x3 && currentState == 0x1) ||
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2db      	uxtb	r3, r3
        if ((lastState == 0x0 && currentState == 0x2) ||
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d102      	bne.n	8001106 <HAL_GPIO_EXTI_Callback+0x6a>
            (lastState == 0x3 && currentState == 0x1) ||
 8001100:	7c7b      	ldrb	r3, [r7, #17]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d00f      	beq.n	8001126 <HAL_GPIO_EXTI_Callback+0x8a>
            (lastState == 0x2 && currentState == 0x3) ||
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
            (lastState == 0x3 && currentState == 0x1) ||
 800110c:	2b02      	cmp	r3, #2
 800110e:	d102      	bne.n	8001116 <HAL_GPIO_EXTI_Callback+0x7a>
            (lastState == 0x2 && currentState == 0x3) ||
 8001110:	7c7b      	ldrb	r3, [r7, #17]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_EXTI_Callback+0x8a>
            (lastState == 0x1 && currentState == 0x0)) {
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
            (lastState == 0x2 && currentState == 0x3) ||
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_GPIO_EXTI_Callback+0x96>
            (lastState == 0x1 && currentState == 0x0)) {
 8001120:	7c7b      	ldrb	r3, [r7, #17]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <HAL_GPIO_EXTI_Callback+0x96>
            // Encoder has moved clockwise
        	encoder_count++;
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x128>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x128>)
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e024      	b.n	800117c <HAL_GPIO_EXTI_Callback+0xe0>
        }
        else if ((lastState == 0x0 && currentState == 0x1) ||
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <HAL_GPIO_EXTI_Callback+0xa6>
 800113c:	7c7b      	ldrb	r3, [r7, #17]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d017      	beq.n	8001172 <HAL_GPIO_EXTI_Callback+0xd6>
                 (lastState == 0x1 && currentState == 0x3) ||
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b2db      	uxtb	r3, r3
        else if ((lastState == 0x0 && currentState == 0x1) ||
 8001148:	2b01      	cmp	r3, #1
 800114a:	d102      	bne.n	8001152 <HAL_GPIO_EXTI_Callback+0xb6>
                 (lastState == 0x1 && currentState == 0x3) ||
 800114c:	7c7b      	ldrb	r3, [r7, #17]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d00f      	beq.n	8001172 <HAL_GPIO_EXTI_Callback+0xd6>
                 (lastState == 0x3 && currentState == 0x2) ||
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
                 (lastState == 0x1 && currentState == 0x3) ||
 8001158:	2b03      	cmp	r3, #3
 800115a:	d102      	bne.n	8001162 <HAL_GPIO_EXTI_Callback+0xc6>
                 (lastState == 0x3 && currentState == 0x2) ||
 800115c:	7c7b      	ldrb	r3, [r7, #17]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_EXTI_Callback+0xd6>
                 (lastState == 0x2 && currentState == 0x0)) {
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
                 (lastState == 0x3 && currentState == 0x2) ||
 8001168:	2b02      	cmp	r3, #2
 800116a:	d107      	bne.n	800117c <HAL_GPIO_EXTI_Callback+0xe0>
                 (lastState == 0x2 && currentState == 0x0)) {
 800116c:	7c7b      	ldrb	r3, [r7, #17]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d104      	bne.n	800117c <HAL_GPIO_EXTI_Callback+0xe0>
            // Encoder has moved counterclockwise
            encoder_count--;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x128>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x128>)
 800117a:	6013      	str	r3, [r2, #0]
        }

        // Save the new state
        lastState = currentState;
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x124>)
 800117e:	7c7b      	ldrb	r3, [r7, #17]
 8001180:	7013      	strb	r3, [r2, #0]
            last_debounce_time = current_time;  // update last debounce time
        }
    }

    // Handle other GPIO pins (if any)
}
 8001182:	e017      	b.n	80011b4 <HAL_GPIO_EXTI_Callback+0x118>
    } else if (GPIO_Pin == BTN_Pin) {
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800118a:	d113      	bne.n	80011b4 <HAL_GPIO_EXTI_Callback+0x118>
        uint32_t current_time = HAL_GetTick();  // Assuming HAL_GetTick() gives you the system tick in ms
 800118c:	f000 fb7c 	bl	8001888 <HAL_GetTick>
 8001190:	60f8      	str	r0, [r7, #12]
        if ((current_time - last_debounce_time) > debounce_delay) {
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	d209      	bcs.n	80011b4 <HAL_GPIO_EXTI_Callback+0x118>
            button_state++;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_GPIO_EXTI_Callback+0x130>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_GPIO_EXTI_Callback+0x130>)
 80011ac:	701a      	strb	r2, [r3, #0]
            last_debounce_time = current_time;  // update last debounce time
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020400 	.word	0x40020400
 80011c0:	200001f4 	.word	0x200001f4
 80011c4:	200001f0 	.word	0x200001f0
 80011c8:	200001f8 	.word	0x200001f8
 80011cc:	200001f5 	.word	0x200001f5

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <HAL_MspInit+0x4c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_MspInit+0x4c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_RTC_MspInit+0x50>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d111      	bne.n	8001274 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001250:	2302      	movs	r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001258:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fdd8 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800126a:	f7ff ffb1 	bl	80011d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_RTC_MspInit+0x54>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40002800 	.word	0x40002800
 8001280:	42470e3c 	.word	0x42470e3c

08001284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <HAL_TIM_Base_MspInit+0x98>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d13d      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_TIM_Base_MspInit+0x9c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a20      	ldr	r2, [pc, #128]	; (8001320 <HAL_TIM_Base_MspInit+0x9c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_TIM_Base_MspInit+0x9c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <HAL_TIM_Base_MspInit+0xa4>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012ba:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80012be:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012c2:	2240      	movs	r2, #64	; 0x40
 80012c4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012da:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 80012f8:	f000 fc08 	bl	8001b0c <HAL_DMA_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001302:	f7ff ff65 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_TIM_Base_MspInit+0xa0>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40010000 	.word	0x40010000
 8001320:	40023800 	.word	0x40023800
 8001324:	2000010c 	.word	0x2000010c
 8001328:	40026428 	.word	0x40026428

0800132c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_TIM_MspPostInit+0x68>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d11e      	bne.n	800138c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_TIM_MspPostInit+0x6c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_TIM_MspPostInit+0x6c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_TIM_MspPostInit+0x6c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800136a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800137c:	2301      	movs	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_TIM_MspPostInit+0x70>)
 8001388:	f000 ff52 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010000 	.word	0x40010000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 fa38 	bl	8001860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_CH_A_Pin);
 80013f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013fc:	f001 f8ce 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_CH_B_Pin);
 8001400:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001404:	f001 f8ca 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001408:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800140c:	f001 f8c6 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <DMA2_Stream1_IRQHandler+0x10>)
 800141a:	f000 fc9f 	bl	8001d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000010c 	.word	0x2000010c

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f003 faa0 	bl	800499c <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20020000 	.word	0x20020000
 8001488:	00000400 	.word	0x00000400
 800148c:	200001fc 	.word	0x200001fc
 8001490:	20001c68 	.word	0x20001c68

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014be:	490e      	ldr	r1, [pc, #56]	; (80014f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d4:	4c0b      	ldr	r4, [pc, #44]	; (8001504 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e2:	f7ff ffd7 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f003 fa5f 	bl	80049a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff fa5d 	bl	80009a8 <main>
  bx  lr    
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80014fc:	08005694 	.word	0x08005694
  ldr r2, =_sbss
 8001500:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001504:	20001c64 	.word	0x20001c64

08001508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC_IRQHandler>
	...

0800150c <setSegments>:
		[' '] = 0x00, // Blank character
		['.'] = 0x80, // Decimal point assuming it's on a separate segment
};

// Set the segments for the current digit
void setSegments(uint8_t segments) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	2104      	movs	r1, #4
 800152a:	4830      	ldr	r0, [pc, #192]	; (80015ec <setSegments+0xe0>)
 800152c:	f001 f81c 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf0c      	ite	eq
 800153a:	2301      	moveq	r3, #1
 800153c:	2300      	movne	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	2101      	movs	r1, #1
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <setSegments+0xe0>)
 8001546:	f001 f80f 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	2108      	movs	r1, #8
 800155e:	4823      	ldr	r0, [pc, #140]	; (80015ec <setSegments+0xe0>)
 8001560:	f001 f802 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	2104      	movs	r1, #4
 8001578:	481d      	ldr	r0, [pc, #116]	; (80015f0 <setSegments+0xe4>)
 800157a:	f000 fff5 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	2101      	movs	r1, #1
 8001592:	4817      	ldr	r0, [pc, #92]	; (80015f0 <setSegments+0xe4>)
 8001594:	f000 ffe8 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	2110      	movs	r1, #16
 80015ac:	480f      	ldr	r0, [pc, #60]	; (80015ec <setSegments+0xe0>)
 80015ae:	f000 ffdb 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	2102      	movs	r1, #2
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <setSegments+0xe0>)
 80015c8:	f000 ffce 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	09db      	lsrs	r3, r3, #7
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	2140      	movs	r1, #64	; 0x40
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <setSegments+0xe0>)
 80015de:	f000 ffc3 	bl	8002568 <HAL_GPIO_WritePin>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400

080015f4 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b01      	cmp	r3, #1
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001610:	4819      	ldr	r0, [pc, #100]	; (8001678 <activateDigit+0x84>)
 8001612:	f000 ffa9 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b02      	cmp	r3, #2
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <activateDigit+0x84>)
 800162a:	f000 ff9d 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b03      	cmp	r3, #3
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	480f      	ldr	r0, [pc, #60]	; (800167c <activateDigit+0x88>)
 8001640:	f000 ff92 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	2120      	movs	r1, #32
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <activateDigit+0x88>)
 8001656:	f000 ff87 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b05      	cmp	r3, #5
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	2102      	movs	r1, #2
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <activateDigit+0x84>)
 800166c:	f000 ff7c 	bl	8002568 <HAL_GPIO_WritePin>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40020400 	.word	0x40020400
 800167c:	40020000 	.word	0x40020000

08001680 <Segment_Display>:


// Display up to four characters on the 7-segment displays
void Segment_Display(const char* input) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

	char output[6] = "";  // Assuming maximum input length of 5 digits + null terminator
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	2300      	movs	r3, #0
 800168e:	823b      	strh	r3, [r7, #16]
	bool hasColon = false;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for (int i = 0; i < strlen(input); i++) {
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	e024      	b.n	80016e6 <Segment_Display+0x66>
		if (input[i] != ':') {
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b3a      	cmp	r3, #58	; 0x3a
 80016a6:	d018      	beq.n	80016da <Segment_Display+0x5a>
			int len = strlen(output);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fd97 	bl	80001e0 <strlen>
 80016b2:	4603      	mov	r3, r0
 80016b4:	617b      	str	r3, [r7, #20]
			output[len] = input[i];
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	7819      	ldrb	r1, [r3, #0]
 80016be:	f107 020c 	add.w	r2, r7, #12
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	4413      	add	r3, r2
 80016c6:	460a      	mov	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
			output[len + 1] = '\0';
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	3328      	adds	r3, #40	; 0x28
 80016d0:	443b      	add	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80016d8:	e002      	b.n	80016e0 <Segment_Display+0x60>
		}
		else {
			hasColon = true;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (int i = 0; i < strlen(input); i++) {
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	3301      	adds	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe fd7a 	bl	80001e0 <strlen>
 80016ec:	4602      	mov	r2, r0
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8d3      	bhi.n	800169c <Segment_Display+0x1c>
		}
	}


  // clearing all digits
  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fa:	482d      	ldr	r0, [pc, #180]	; (80017b0 <Segment_Display+0x130>)
 80016fc:	f000 ff34 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001706:	482a      	ldr	r0, [pc, #168]	; (80017b0 <Segment_Display+0x130>)
 8001708:	f000 ff2e 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	4828      	ldr	r0, [pc, #160]	; (80017b4 <Segment_Display+0x134>)
 8001712:	f000 ff29 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2120      	movs	r1, #32
 800171a:	4826      	ldr	r0, [pc, #152]	; (80017b4 <Segment_Display+0x134>)
 800171c:	f000 ff24 	bl	8002568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2102      	movs	r1, #2
 8001724:	4822      	ldr	r0, [pc, #136]	; (80017b0 <Segment_Display+0x130>)
 8001726:	f000 ff1f 	bl	8002568 <HAL_GPIO_WritePin>

  uint8_t numChars = MIN(strlen(output), NUM_DIGITS);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fd56 	bl	80001e0 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	2b03      	cmp	r3, #3
 8001738:	d807      	bhi.n	800174a <Segment_Display+0xca>
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fd4e 	bl	80001e0 <strlen>
 8001744:	4603      	mov	r3, r0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	e000      	b.n	800174c <Segment_Display+0xcc>
 800174a:	2304      	movs	r3, #4
 800174c:	76fb      	strb	r3, [r7, #27]
  for (int i = 0; i < (numChars + hasColon); i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e01e      	b.n	8001792 <Segment_Display+0x112>
	  activateDigit(i + 1); // Activate the correct digit
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	3301      	adds	r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff49 	bl	80015f4 <activateDigit>
	  if((i + 1) == 5) { //colon
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d103      	bne.n	8001770 <Segment_Display+0xf0>
		  setSegments(0b11);
 8001768:	2003      	movs	r0, #3
 800176a:	f7ff fecf 	bl	800150c <setSegments>
 800176e:	e00a      	b.n	8001786 <Segment_Display+0x106>
	  } else {
		  setSegments(charToSegmentsMap[(uint8_t) output[i]]); // Set the correct segments
 8001770:	f107 020c 	add.w	r2, r7, #12
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4413      	add	r3, r2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <Segment_Display+0x138>)
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fec3 	bl	800150c <setSegments>
	  }
	  HAL_Delay(1); // Delay to allow the segments to light up
 8001786:	2001      	movs	r0, #1
 8001788:	f000 f88a 	bl	80018a0 <HAL_Delay>
  for (int i = 0; i < (numChars + hasColon); i++) {
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	3301      	adds	r3, #1
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	7efa      	ldrb	r2, [r7, #27]
 8001794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001798:	4413      	add	r3, r2
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbd9      	blt.n	8001754 <Segment_Display+0xd4>
  }
  activateDigit(0); // Turn off all digits
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff ff27 	bl	80015f4 <activateDigit>
}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020000 	.word	0x40020000
 80017b8:	080055ec 	.word	0x080055ec

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_Init+0x40>)
 80017c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_Init+0x40>)
 80017d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_Init+0x40>)
 80017de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 f94f 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	200f      	movs	r0, #15
 80017ec:	f000 f808 	bl	8001800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f0:	f7ff fcf4 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_InitTick+0x54>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x58>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	fbb3 f3f1 	udiv	r3, r3, r1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f967 	bl	8001af2 <HAL_SYSTICK_Config>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00e      	b.n	800184c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d80a      	bhi.n	800184a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f000 f92f 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <HAL_InitTick+0x5c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000018 	.word	0x20000018
 8001858:	20000020 	.word	0x20000020
 800185c:	2000001c 	.word	0x2000001c

08001860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x20>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x24>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_IncTick+0x24>)
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000020 	.word	0x20000020
 8001884:	20000200 	.word	0x20000200

08001888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_GetTick+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000200 	.word	0x20000200

080018a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff ffee 	bl	8001888 <HAL_GetTick>
 80018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d005      	beq.n	80018c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_Delay+0x44>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c6:	bf00      	nop
 80018c8:	f7ff ffde 	bl	8001888 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d8f7      	bhi.n	80018c8 <HAL_Delay+0x28>
  {
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000020 	.word	0x20000020

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff29 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff3e 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff31 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff feb6 	bl	8001888 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e099      	b.n	8001c5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b48:	e00f      	b.n	8001b6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4a:	f7ff fe9d 	bl	8001888 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d908      	bls.n	8001b6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2203      	movs	r2, #3
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e078      	b.n	8001c5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e8      	bne.n	8001b4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_DMA_Init+0x158>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d107      	bne.n	8001bd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f023 0307 	bic.w	r3, r3, #7
 8001bea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d117      	bne.n	8001c2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00e      	beq.n	8001c2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fa91 	bl	8002138 <DMA_CheckFifoParam>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2240      	movs	r2, #64	; 0x40
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e016      	b.n	8001c5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa48 	bl	80020cc <DMA_CalcBaseAndBitshift>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	223f      	movs	r2, #63	; 0x3f
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	f010803f 	.word	0xf010803f

08001c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_DMA_Start_IT+0x26>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e040      	b.n	8001d10 <HAL_DMA_Start_IT+0xa8>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d12f      	bne.n	8001d02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f9da 	bl	8002070 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	223f      	movs	r2, #63	; 0x3f
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0216 	orr.w	r2, r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0208 	orr.w	r2, r2, #8
 8001cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e005      	b.n	8001d0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d004      	beq.n	8001d36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00c      	b.n	8001d50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2205      	movs	r2, #5
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d68:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <HAL_DMA_IRQHandler+0x248>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a8e      	ldr	r2, [pc, #568]	; (8001fa8 <HAL_DMA_IRQHandler+0x24c>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0a9b      	lsrs	r3, r3, #10
 8001d74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	2208      	movs	r2, #8
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01a      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0204 	bic.w	r2, r2, #4
 8001dae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2208      	movs	r2, #8
 8001db6:	409a      	lsls	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2201      	movs	r2, #1
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d012      	beq.n	8001dfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	2201      	movs	r2, #1
 8001dec:	409a      	lsls	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2204      	movs	r2, #4
 8001e04:	409a      	lsls	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d012      	beq.n	8001e34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2204      	movs	r2, #4
 8001e22:	409a      	lsls	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f043 0204 	orr.w	r2, r3, #4
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2210      	movs	r2, #16
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d043      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d03c      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2210      	movs	r2, #16
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d018      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d108      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d024      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
 8001e8a:	e01f      	b.n	8001ecc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
 8001e9c:	e016      	b.n	8001ecc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0208 	bic.w	r2, r2, #8
 8001eba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 808f 	beq.w	8001ffc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8087 	beq.w	8001ffc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d136      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0216 	bic.w	r2, r2, #22
 8001f14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <HAL_DMA_IRQHandler+0x1da>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0208 	bic.w	r2, r2, #8
 8001f44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	223f      	movs	r2, #63	; 0x3f
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d07e      	beq.n	8002068 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4798      	blx	r3
        }
        return;
 8001f72:	e079      	b.n	8002068 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d01d      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10d      	bne.n	8001fac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d031      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4798      	blx	r3
 8001fa0:	e02c      	b.n	8001ffc <HAL_DMA_IRQHandler+0x2a0>
 8001fa2:	bf00      	nop
 8001fa4:	20000018 	.word	0x20000018
 8001fa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	e01e      	b.n	8001ffc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10f      	bne.n	8001fec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0210 	bic.w	r2, r2, #16
 8001fda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	2b00      	cmp	r3, #0
 8002002:	d032      	beq.n	800206a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d022      	beq.n	8002056 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2205      	movs	r2, #5
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	3301      	adds	r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	429a      	cmp	r2, r3
 8002032:	d307      	bcc.n	8002044 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f2      	bne.n	8002028 <HAL_DMA_IRQHandler+0x2cc>
 8002042:	e000      	b.n	8002046 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002044:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
 8002066:	e000      	b.n	800206a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002068:	bf00      	nop
    }
  }
}
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800208c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d108      	bne.n	80020b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ae:	e007      	b.n	80020c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3b10      	subs	r3, #16
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <DMA_CalcBaseAndBitshift+0x64>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <DMA_CalcBaseAndBitshift+0x68>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d909      	bls.n	800210e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
 800210c:	e007      	b.n	800211e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	aaaaaaab 	.word	0xaaaaaaab
 8002134:	08005648 	.word	0x08005648

08002138 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11f      	bne.n	8002192 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d856      	bhi.n	8002206 <DMA_CheckFifoParam+0xce>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <DMA_CheckFifoParam+0x28>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002171 	.word	0x08002171
 8002164:	08002183 	.word	0x08002183
 8002168:	08002171 	.word	0x08002171
 800216c:	08002207 	.word	0x08002207
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d046      	beq.n	800220a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002180:	e043      	b.n	800220a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800218a:	d140      	bne.n	800220e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002190:	e03d      	b.n	800220e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219a:	d121      	bne.n	80021e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d837      	bhi.n	8002212 <DMA_CheckFifoParam+0xda>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <DMA_CheckFifoParam+0x70>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021bf 	.word	0x080021bf
 80021b0:	080021b9 	.word	0x080021b9
 80021b4:	080021d1 	.word	0x080021d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	e030      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d025      	beq.n	8002216 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ce:	e022      	b.n	8002216 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d8:	d11f      	bne.n	800221a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021de:	e01c      	b.n	800221a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d903      	bls.n	80021ee <DMA_CheckFifoParam+0xb6>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d003      	beq.n	80021f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021ec:	e018      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      break;
 80021f2:	e015      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
      break;
 8002204:	e00b      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;
 8002206:	bf00      	nop
 8002208:	e00a      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e008      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
 8002210:	e006      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
 8002214:	e004      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 8002216:	bf00      	nop
 8002218:	e002      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;   
 800221a:	bf00      	nop
 800221c:	e000      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
    }
  } 
  
  return status; 
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e159      	b.n	8002500 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8148 	bne.w	80024fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d005      	beq.n	8002282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227e:	2b02      	cmp	r3, #2
 8002280:	d130      	bne.n	80022e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d017      	beq.n	8002320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a2 	beq.w	80024fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b57      	ldr	r3, [pc, #348]	; (8002518 <HAL_GPIO_Init+0x2e8>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a56      	ldr	r2, [pc, #344]	; (8002518 <HAL_GPIO_Init+0x2e8>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_GPIO_Init+0x2e8>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d2:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_GPIO_Init+0x2ec>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a49      	ldr	r2, [pc, #292]	; (8002520 <HAL_GPIO_Init+0x2f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x202>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a48      	ldr	r2, [pc, #288]	; (8002524 <HAL_GPIO_Init+0x2f4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x1fe>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a47      	ldr	r2, [pc, #284]	; (8002528 <HAL_GPIO_Init+0x2f8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x1fa>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a46      	ldr	r2, [pc, #280]	; (800252c <HAL_GPIO_Init+0x2fc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x1f6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a45      	ldr	r2, [pc, #276]	; (8002530 <HAL_GPIO_Init+0x300>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x1f2>
 800241e:	2304      	movs	r3, #4
 8002420:	e008      	b.n	8002434 <HAL_GPIO_Init+0x204>
 8002422:	2307      	movs	r3, #7
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x204>
 8002426:	2303      	movs	r3, #3
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x204>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x204>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x204>
 8002432:	2300      	movs	r3, #0
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f002 0203 	and.w	r2, r2, #3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	; (800251c <HAL_GPIO_Init+0x2ec>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_GPIO_Init+0x304>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a2f      	ldr	r2, [pc, #188]	; (8002534 <HAL_GPIO_Init+0x304>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_GPIO_Init+0x304>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a24      	ldr	r2, [pc, #144]	; (8002534 <HAL_GPIO_Init+0x304>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_GPIO_Init+0x304>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_GPIO_Init+0x304>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_GPIO_Init+0x304>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f4:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <HAL_GPIO_Init+0x304>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	f67f aea2 	bls.w	800224c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40013c00 	.word	0x40013c00

08002538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e001      	b.n	800255a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
 8002574:	4613      	mov	r3, r2
 8002576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002584:	e003      	b.n	800258e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fd6e 	bl	800109c <HAL_GPIO_EXTI_Callback>
  }
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40013c00 	.word	0x40013c00

080025cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e267      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d075      	beq.n	80026d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ea:	4b88      	ldr	r3, [pc, #544]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d00c      	beq.n	8002610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f6:	4b85      	ldr	r3, [pc, #532]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d112      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b82      	ldr	r3, [pc, #520]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260e:	d10b      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	4b7e      	ldr	r3, [pc, #504]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05b      	beq.n	80026d4 <HAL_RCC_OscConfig+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d157      	bne.n	80026d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e242      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x74>
 8002632:	4b76      	ldr	r3, [pc, #472]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a75      	ldr	r2, [pc, #468]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x98>
 800264a:	4b70      	ldr	r3, [pc, #448]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6f      	ldr	r2, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6d      	ldr	r3, [pc, #436]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6c      	ldr	r2, [pc, #432]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
 8002664:	4b69      	ldr	r3, [pc, #420]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a68      	ldr	r2, [pc, #416]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b66      	ldr	r3, [pc, #408]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a65      	ldr	r2, [pc, #404]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff f900 	bl	8001888 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff f8fc 	bl	8001888 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e207      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5b      	ldr	r3, [pc, #364]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xc0>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff f8ec 	bl	8001888 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff f8e8 	bl	8001888 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1f3      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b51      	ldr	r3, [pc, #324]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0xe8>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e2:	4b4a      	ldr	r3, [pc, #296]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b44      	ldr	r3, [pc, #272]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x152>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c7      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4937      	ldr	r1, [pc, #220]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_RCC_OscConfig+0x244>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7ff f8a1 	bl	8001888 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff f89d 	bl	8001888 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a8      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b28      	ldr	r3, [pc, #160]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4925      	ldr	r1, [pc, #148]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCC_OscConfig+0x244>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff f880 	bl	8001888 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff f87c 	bl	8001888 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e187      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d036      	beq.n	8002824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_RCC_OscConfig+0x248>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7ff f860 	bl	8001888 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027cc:	f7ff f85c 	bl	8001888 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e167      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80027e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x200>
 80027ea:	e01b      	b.n	8002824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_OscConfig+0x248>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7ff f849 	bl	8001888 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	e00e      	b.n	8002818 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fa:	f7ff f845 	bl	8001888 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d907      	bls.n	8002818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e150      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
 800280c:	40023800 	.word	0x40023800
 8002810:	42470000 	.word	0x42470000
 8002814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ea      	bne.n	80027fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8097 	beq.w	8002960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b7d      	ldr	r3, [pc, #500]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a7c      	ldr	r2, [pc, #496]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b7a      	ldr	r3, [pc, #488]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a73      	ldr	r2, [pc, #460]	; (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7ff f805 	bl	8001888 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7ff f801 	bl	8001888 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e10c      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x2ea>
 80028a8:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a63      	ldr	r2, [pc, #396]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	e01c      	b.n	80028f0 <HAL_RCC_OscConfig+0x324>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x30c>
 80028be:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a5e      	ldr	r2, [pc, #376]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a5b      	ldr	r2, [pc, #364]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0x324>
 80028d8:	4b58      	ldr	r3, [pc, #352]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	4a57      	ldr	r2, [pc, #348]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6713      	str	r3, [r2, #112]	; 0x70
 80028e4:	4b55      	ldr	r3, [pc, #340]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a54      	ldr	r2, [pc, #336]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 0304 	bic.w	r3, r3, #4
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe ffc6 	bl	8001888 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe ffc2 	bl	8001888 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0cb      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ee      	beq.n	8002900 <HAL_RCC_OscConfig+0x334>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7fe ffb0 	bl	8001888 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe ffac 	bl	8001888 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0b5      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002942:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ee      	bne.n	800292c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a38      	ldr	r2, [pc, #224]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80a1 	beq.w	8002aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296a:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b08      	cmp	r3, #8
 8002974:	d05c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d141      	bne.n	8002a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_RCC_OscConfig+0x478>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe ff80 	bl	8001888 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe ff7c 	bl	8001888 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e087      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	491b      	ldr	r1, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x478>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe ff55 	bl	8001888 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe ff51 	bl	8001888 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e05c      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x416>
 8002a00:	e054      	b.n	8002aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCC_OscConfig+0x478>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe ff3e 	bl	8001888 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe ff3a 	bl	8001888 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e045      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x444>
 8002a2e:	e03d      	b.n	8002aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e038      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000
 8002a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x4ec>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d028      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d121      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d11a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a78:	4013      	ands	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d111      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	3b01      	subs	r3, #1
 8002a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0cc      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d90c      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b63      	ldr	r3, [pc, #396]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b8      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a58      	ldr	r2, [pc, #352]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b28:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	494d      	ldr	r1, [pc, #308]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d044      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d119      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e067      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4934      	ldr	r1, [pc, #208]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe fe6c 	bl	8001888 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe fe68 	bl	8001888 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e04f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d20c      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e032      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4916      	ldr	r1, [pc, #88]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c42:	f000 f821 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	490a      	ldr	r1, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	5ccb      	ldrb	r3, [r1, r3]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fdcc 	bl	8001800 <HAL_InitTick>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	080055dc 	.word	0x080055dc
 8002c80:	20000018 	.word	0x20000018
 8002c84:	2000001c 	.word	0x2000001c

08002c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c8c:	b090      	sub	sp, #64	; 0x40
 8002c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
 8002c94:	2300      	movs	r3, #0
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c98:	2300      	movs	r3, #0
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca0:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d00d      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	f200 80a1 	bhi.w	8002df4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x34>
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cba:	e09b      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8002cbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cc0:	e09b      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc2:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc6:	e098      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d028      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	627a      	str	r2, [r7, #36]	; 0x24
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cf4:	fb03 f201 	mul.w	r2, r3, r1
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d02:	fba0 1202 	umull	r1, r2, r0, r2
 8002d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d08:	460a      	mov	r2, r1
 8002d0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0e:	4413      	add	r3, r2
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d14:	2200      	movs	r2, #0
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	61fa      	str	r2, [r7, #28]
 8002d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d22:	f7fd fab5 	bl	8000290 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2e:	e053      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	2200      	movs	r2, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	617a      	str	r2, [r7, #20]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d42:	f04f 0b00 	mov.w	fp, #0
 8002d46:	4652      	mov	r2, sl
 8002d48:	465b      	mov	r3, fp
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	0159      	lsls	r1, r3, #5
 8002d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d58:	0150      	lsls	r0, r2, #5
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d62:	eb63 090b 	sbc.w	r9, r3, fp
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d7a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d7e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	00eb      	lsls	r3, r5, #3
 8002d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d90:	00e2      	lsls	r2, r4, #3
 8002d92:	4614      	mov	r4, r2
 8002d94:	461d      	mov	r5, r3
 8002d96:	eb14 030a 	adds.w	r3, r4, sl
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	eb45 030b 	adc.w	r3, r5, fp
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	60fa      	str	r2, [r7, #12]
 8002dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dcc:	f7fd fa60 	bl	8000290 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3740      	adds	r7, #64	; 0x40
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	016e3600 	.word	0x016e3600

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d038      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e42:	f7fe fd21 	bl	8001888 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e4a:	f7fe fd1d 	bl	8001888 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0bd      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e5c:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	019b      	lsls	r3, r3, #6
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	071b      	lsls	r3, r3, #28
 8002e7a:	495a      	ldr	r1, [pc, #360]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e82:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fcfe 	bl	8001888 <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e90:	f7fe fcfa 	bl	8001888 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e09a      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea2:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8083 	beq.w	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	4a47      	ldr	r2, [pc, #284]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eca:	6413      	str	r3, [r2, #64]	; 0x40
 8002ecc:	4b45      	ldr	r3, [pc, #276]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ed8:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fcd0 	bl	8001888 <HAL_GetTick>
 8002ee8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002eec:	f7fe fccc 	bl	8001888 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e06c      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f0a:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f12:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02f      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d028      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f28:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d114      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc9a 	bl	8001888 <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe fc96 	bl	8001888 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e034      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ee      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f86:	d10d      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	4911      	ldr	r1, [pc, #68]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
 8002fa2:	e005      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fae:	6093      	str	r3, [r2, #8]
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbc:	4909      	ldr	r1, [pc, #36]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7d1a      	ldrb	r2, [r3, #20]
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002fd4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	42470068 	.word	0x42470068
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42470e40 	.word	0x42470e40
 8002ff0:	424711e0 	.word	0x424711e0

08002ff4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e066      	b.n	80030d8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7f5b      	ldrb	r3, [r3, #29]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fe f906 	bl	800122c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	22ca      	movs	r2, #202	; 0xca
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2253      	movs	r2, #83	; 0x53
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa45 	bl	80034c6 <RTC_EnterInitMode>
 800303c:	4603      	mov	r3, r0
 800303e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12c      	bne.n	80030a0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003058:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6899      	ldr	r1, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68d2      	ldr	r2, [r2, #12]
 8003080:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6919      	ldr	r1, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	041a      	lsls	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa4c 	bl	8003534 <RTC_ExitInitMode>
 800309c:	4603      	mov	r3, r0
 800309e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d113      	bne.n	80030ce <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699a      	ldr	r2, [r3, #24]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	22ff      	movs	r2, #255	; 0xff
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	7f1b      	ldrb	r3, [r3, #28]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_RTC_SetTime+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e087      	b.n	800320c <HAL_RTC_SetTime+0x12c>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2202      	movs	r2, #2
 8003106:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d126      	bne.n	800315c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fa29 	bl	800357e <RTC_ByteToBcd2>
 800312c:	4603      	mov	r3, r0
 800312e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	785b      	ldrb	r3, [r3, #1]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fa22 	bl	800357e <RTC_ByteToBcd2>
 800313a:	4603      	mov	r3, r0
 800313c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800313e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	789b      	ldrb	r3, [r3, #2]
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fa1a 	bl	800357e <RTC_ByteToBcd2>
 800314a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800314c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	78db      	ldrb	r3, [r3, #3]
 8003154:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e018      	b.n	800318e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	785b      	ldrb	r3, [r3, #1]
 800317a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800317c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003182:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	78db      	ldrb	r3, [r3, #3]
 8003188:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	22ca      	movs	r2, #202	; 0xca
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2253      	movs	r2, #83	; 0x53
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f991 	bl	80034c6 <RTC_EnterInitMode>
 80031a4:	4603      	mov	r3, r0
 80031a6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d120      	bne.n	80031f0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f9a4 	bl	8003534 <RTC_ExitInitMode>
 80031ec:	4603      	mov	r3, r0
 80031ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	771a      	strb	r2, [r3, #28]

  return status;
 800320a:	7cfb      	ldrb	r3, [r7, #19]
}
 800320c:	4618      	mov	r0, r3
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}

08003214 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003246:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800324a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003256:	b2da      	uxtb	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	0d9b      	lsrs	r3, r3, #22
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d11a      	bne.n	80032c6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f98f 	bl	80035b8 <RTC_Bcd2ToByte>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f986 	bl	80035b8 <RTC_Bcd2ToByte>
 80032ac:	4603      	mov	r3, r0
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	789b      	ldrb	r3, [r3, #2]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f97d 	bl	80035b8 <RTC_Bcd2ToByte>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	7f1b      	ldrb	r3, [r3, #28]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_RTC_SetDate+0x1c>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e071      	b.n	80033d0 <HAL_RTC_SetDate+0x100>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2202      	movs	r2, #2
 80032f6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10e      	bne.n	800331c <HAL_RTC_SetDate+0x4c>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	785b      	ldrb	r3, [r3, #1]
 800330e:	f023 0310 	bic.w	r3, r3, #16
 8003312:	b2db      	uxtb	r3, r3
 8003314:	330a      	adds	r3, #10
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11c      	bne.n	800335c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	78db      	ldrb	r3, [r3, #3]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f929 	bl	800357e <RTC_ByteToBcd2>
 800332c:	4603      	mov	r3, r0
 800332e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f922 	bl	800357e <RTC_ByteToBcd2>
 800333a:	4603      	mov	r3, r0
 800333c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800333e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	789b      	ldrb	r3, [r3, #2]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f91a 	bl	800357e <RTC_ByteToBcd2>
 800334a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800334c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	e00e      	b.n	800337a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	78db      	ldrb	r3, [r3, #3]
 8003360:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003368:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800336e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	22ca      	movs	r2, #202	; 0xca
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2253      	movs	r2, #83	; 0x53
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f89b 	bl	80034c6 <RTC_EnterInitMode>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f8c2 	bl	8003534 <RTC_ExitInitMode>
 80033b0:	4603      	mov	r3, r0
 80033b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	771a      	strb	r2, [r3, #28]

  return status;
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}

080033d8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	0b5b      	lsrs	r3, r3, #13
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d11a      	bne.n	800346c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f8bc 	bl	80035b8 <RTC_Bcd2ToByte>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f8b3 	bl	80035b8 <RTC_Bcd2ToByte>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	789b      	ldrb	r3, [r3, #2]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f8aa 	bl	80035b8 <RTC_Bcd2ToByte>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003490:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003492:	f7fe f9f9 	bl	8001888 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003498:	e009      	b.n	80034ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800349a:	f7fe f9f5 	bl	8001888 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a8:	d901      	bls.n	80034ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e007      	b.n	80034be <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ee      	beq.n	800349a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d122      	bne.n	800352a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fe f9c8 	bl	8001888 <HAL_GetTick>
 80034f8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034fa:	e00c      	b.n	8003516 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034fc:	f7fe f9c4 	bl	8001888 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800350a:	d904      	bls.n	8003516 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <RTC_EnterInitMode+0x64>
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d1e8      	bne.n	80034fc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800354e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff89 	bl	8003476 <HAL_RTC_WaitForSynchro>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800358c:	e005      	b.n	800359a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	3301      	adds	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	3b0a      	subs	r3, #10
 8003598:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2b09      	cmp	r3, #9
 800359e:	d8f6      	bhi.n	800358e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b2db      	uxtb	r3, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	4413      	add	r3, r2
 80035e2:	b2db      	uxtb	r3, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e041      	b.n	8003686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fe34 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f000 fd6a 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e041      	b.n	8003724 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f839 	bl	800372c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f000 fd1b 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e022      	b.n	80037b2 <HAL_TIM_PWM_Start_DMA+0x72>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b04      	cmp	r3, #4
 8003770:	d109      	bne.n	8003786 <HAL_TIM_PWM_Start_DMA+0x46>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	e015      	b.n	80037b2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d109      	bne.n	80037a0 <HAL_TIM_PWM_Start_DMA+0x60>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e008      	b.n	80037b2 <HAL_TIM_PWM_Start_DMA+0x72>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	e15d      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_TIM_PWM_Start_DMA+0x94>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e022      	b.n	800381a <HAL_TIM_PWM_Start_DMA+0xda>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d109      	bne.n	80037ee <HAL_TIM_PWM_Start_DMA+0xae>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e015      	b.n	800381a <HAL_TIM_PWM_Start_DMA+0xda>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d109      	bne.n	8003808 <HAL_TIM_PWM_Start_DMA+0xc8>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e008      	b.n	800381a <HAL_TIM_PWM_Start_DMA+0xda>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d024      	beq.n	8003868 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_TIM_PWM_Start_DMA+0xee>
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e123      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800383c:	e016      	b.n	800386c <HAL_TIM_PWM_Start_DMA+0x12c>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b04      	cmp	r3, #4
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	e00e      	b.n	800386c <HAL_TIM_PWM_Start_DMA+0x12c>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	e006      	b.n	800386c <HAL_TIM_PWM_Start_DMA+0x12c>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003866:	e001      	b.n	800386c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e104      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b0c      	cmp	r3, #12
 8003870:	f200 80ae 	bhi.w	80039d0 <HAL_TIM_PWM_Start_DMA+0x290>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038b1 	.word	0x080038b1
 8003880:	080039d1 	.word	0x080039d1
 8003884:	080039d1 	.word	0x080039d1
 8003888:	080039d1 	.word	0x080039d1
 800388c:	080038f9 	.word	0x080038f9
 8003890:	080039d1 	.word	0x080039d1
 8003894:	080039d1 	.word	0x080039d1
 8003898:	080039d1 	.word	0x080039d1
 800389c:	08003941 	.word	0x08003941
 80038a0:	080039d1 	.word	0x080039d1
 80038a4:	080039d1 	.word	0x080039d1
 80038a8:	080039d1 	.word	0x080039d1
 80038ac:	08003989 	.word	0x08003989
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	4a72      	ldr	r2, [pc, #456]	; (8003a80 <HAL_TIM_PWM_Start_DMA+0x340>)
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	4a71      	ldr	r2, [pc, #452]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x344>)
 80038be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	4a70      	ldr	r2, [pc, #448]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x348>)
 80038c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3334      	adds	r3, #52	; 0x34
 80038d4:	461a      	mov	r2, r3
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	f7fe f9c6 	bl	8001c68 <HAL_DMA_Start_IT>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0c7      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f4:	60da      	str	r2, [r3, #12]
      break;
 80038f6:	e06e      	b.n	80039d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	4a60      	ldr	r2, [pc, #384]	; (8003a80 <HAL_TIM_PWM_Start_DMA+0x340>)
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	4a5f      	ldr	r2, [pc, #380]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	4a5e      	ldr	r2, [pc, #376]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x348>)
 800390e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3338      	adds	r3, #56	; 0x38
 800391c:	461a      	mov	r2, r3
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	f7fe f9a2 	bl	8001c68 <HAL_DMA_Start_IT>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0a3      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800393c:	60da      	str	r2, [r3, #12]
      break;
 800393e:	e04a      	b.n	80039d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4a4e      	ldr	r2, [pc, #312]	; (8003a80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	4a4d      	ldr	r2, [pc, #308]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x344>)
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a4c      	ldr	r2, [pc, #304]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003956:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	333c      	adds	r3, #60	; 0x3c
 8003964:	461a      	mov	r2, r3
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	f7fe f97e 	bl	8001c68 <HAL_DMA_Start_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07f      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003984:	60da      	str	r2, [r3, #12]
      break;
 8003986:	e026      	b.n	80039d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	4a3c      	ldr	r2, [pc, #240]	; (8003a80 <HAL_TIM_PWM_Start_DMA+0x340>)
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4a3b      	ldr	r2, [pc, #236]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a3a      	ldr	r2, [pc, #232]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x348>)
 800399e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3340      	adds	r3, #64	; 0x40
 80039ac:	461a      	mov	r2, r3
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	f7fe f95a 	bl	8001c68 <HAL_DMA_Start_IT>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e05b      	b.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039cc:	60da      	str	r2, [r3, #12]
      break;
 80039ce:	e002      	b.n	80039d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
      break;
 80039d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d14b      	bne.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2201      	movs	r2, #1
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fe35 	bl	8004654 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d013      	beq.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d111      	bne.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d010      	beq.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	e007      	b.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	08003ff9 	.word	0x08003ff9
 8003a84:	080040a1 	.word	0x080040a1
 8003a88:	08003f67 	.word	0x08003f67
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000

08003aa0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b0c      	cmp	r3, #12
 8003ab2:	d855      	bhi.n	8003b60 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003b61 	.word	0x08003b61
 8003ac4:	08003b61 	.word	0x08003b61
 8003ac8:	08003b61 	.word	0x08003b61
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b61 	.word	0x08003b61
 8003ad4:	08003b61 	.word	0x08003b61
 8003ad8:	08003b61 	.word	0x08003b61
 8003adc:	08003b29 	.word	0x08003b29
 8003ae0:	08003b61 	.word	0x08003b61
 8003ae4:	08003b61 	.word	0x08003b61
 8003ae8:	08003b61 	.word	0x08003b61
 8003aec:	08003b45 	.word	0x08003b45
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003afe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe f907 	bl	8001d18 <HAL_DMA_Abort_IT>
      break;
 8003b0a:	e02c      	b.n	8003b66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe f8f9 	bl	8001d18 <HAL_DMA_Abort_IT>
      break;
 8003b26:	e01e      	b.n	8003b66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe f8eb 	bl	8001d18 <HAL_DMA_Abort_IT>
      break;
 8003b42:	e010      	b.n	8003b66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe f8dd 	bl	8001d18 <HAL_DMA_Abort_IT>
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d157      	bne.n	8003c1c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	6839      	ldr	r1, [r7, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fd6d 	bl	8004654 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d117      	bne.n	8003bb4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a1a      	ldr	r2, [r3, #32]
 8003b8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10f      	bne.n	8003bb4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	f240 4344 	movw	r3, #1092	; 0x444
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d107      	bne.n	8003bb4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bb2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10f      	bne.n	8003be4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a1a      	ldr	r2, [r3, #32]
 8003bca:	f240 4344 	movw	r3, #1092	; 0x444
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf2:	e013      	b.n	8003c1c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d104      	bne.n	8003c04 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c02:	e00b      	b.n	8003c1c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d104      	bne.n	8003c14 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c12:	e003      	b.n	8003c1c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000

08003c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0ae      	b.n	8003da8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	f200 809f 	bhi.w	8003d98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003d99 	.word	0x08003d99
 8003c68:	08003d99 	.word	0x08003d99
 8003c6c:	08003d99 	.word	0x08003d99
 8003c70:	08003cd5 	.word	0x08003cd5
 8003c74:	08003d99 	.word	0x08003d99
 8003c78:	08003d99 	.word	0x08003d99
 8003c7c:	08003d99 	.word	0x08003d99
 8003c80:	08003d17 	.word	0x08003d17
 8003c84:	08003d99 	.word	0x08003d99
 8003c88:	08003d99 	.word	0x08003d99
 8003c8c:	08003d99 	.word	0x08003d99
 8003c90:	08003d57 	.word	0x08003d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fab4 	bl	8004208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0208 	orr.w	r2, r2, #8
 8003cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6999      	ldr	r1, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	619a      	str	r2, [r3, #24]
      break;
 8003cd2:	e064      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fafa 	bl	80042d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	021a      	lsls	r2, r3, #8
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	619a      	str	r2, [r3, #24]
      break;
 8003d14:	e043      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fb45 	bl	80043ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0208 	orr.w	r2, r2, #8
 8003d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0204 	bic.w	r2, r2, #4
 8003d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	61da      	str	r2, [r3, #28]
      break;
 8003d54:	e023      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fb8f 	bl	8004480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	021a      	lsls	r2, r3, #8
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	61da      	str	r2, [r3, #28]
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_TIM_ConfigClockSource+0x1c>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0b4      	b.n	8003f36 <HAL_TIM_ConfigClockSource+0x186>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d03e      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0xd4>
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	f200 8087 	bhi.w	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e12:	f000 8086 	beq.w	8003f22 <HAL_TIM_ConfigClockSource+0x172>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d87f      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b70      	cmp	r3, #112	; 0x70
 8003e1e:	d01a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xa6>
 8003e20:	2b70      	cmp	r3, #112	; 0x70
 8003e22:	d87b      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b60      	cmp	r3, #96	; 0x60
 8003e26:	d050      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x11a>
 8003e28:	2b60      	cmp	r3, #96	; 0x60
 8003e2a:	d877      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d03c      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xfa>
 8003e30:	2b50      	cmp	r3, #80	; 0x50
 8003e32:	d873      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d058      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x13a>
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d86f      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d064      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x15a>
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d86b      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d060      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x15a>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d867      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x15a>
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d05a      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x15a>
 8003e54:	e062      	b.n	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f000 fbd5 	bl	8004614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	609a      	str	r2, [r3, #8]
      break;
 8003e82:	e04f      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6899      	ldr	r1, [r3, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f000 fbbe 	bl	8004614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea6:	609a      	str	r2, [r3, #8]
      break;
 8003ea8:	e03c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f000 fb32 	bl	8004520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2150      	movs	r1, #80	; 0x50
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fb8b 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003ec8:	e02c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f000 fb51 	bl	800457e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2160      	movs	r1, #96	; 0x60
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fb7b 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003ee8:	e01c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 fb12 	bl	8004520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fb6b 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003f08:	e00c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f000 fb62 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003f1a:	e003      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f20:	e000      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d107      	bne.n	8003f8e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f8c:	e02a      	b.n	8003fe4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d107      	bne.n	8003fa8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa6:	e01d      	b.n	8003fe4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d107      	bne.n	8003fc2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc0:	e010      	b.n	8003fe4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2208      	movs	r2, #8
 8003fd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fda:	e003      	b.n	8003fe4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ffb4 	bl	8003f52 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	d10b      	bne.n	8004028 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d136      	bne.n	800408c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004026:	e031      	b.n	800408c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d10b      	bne.n	800404a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2202      	movs	r2, #2
 8004036:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d125      	bne.n	800408c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	e020      	b.n	800408c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d10b      	bne.n	800406c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2204      	movs	r2, #4
 8004058:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d114      	bne.n	800408c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406a:	e00f      	b.n	800408c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d10a      	bne.n	800408c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2208      	movs	r2, #8
 800407a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d103      	bne.n	800408c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fc73 	bl	8004978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d103      	bne.n	80040c0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	771a      	strb	r2, [r3, #28]
 80040be:	e019      	b.n	80040f4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d103      	bne.n	80040d2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2202      	movs	r2, #2
 80040ce:	771a      	strb	r2, [r3, #28]
 80040d0:	e010      	b.n	80040f4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d103      	bne.n	80040e4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2204      	movs	r2, #4
 80040e0:	771a      	strb	r2, [r3, #28]
 80040e2:	e007      	b.n	80040f4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d102      	bne.n	80040f4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2208      	movs	r2, #8
 80040f2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7ff ff22 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a34      	ldr	r2, [pc, #208]	; (80041ec <TIM_Base_SetConfig+0xe4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00f      	beq.n	8004140 <TIM_Base_SetConfig+0x38>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d00b      	beq.n	8004140 <TIM_Base_SetConfig+0x38>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a31      	ldr	r2, [pc, #196]	; (80041f0 <TIM_Base_SetConfig+0xe8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_Base_SetConfig+0x38>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a30      	ldr	r2, [pc, #192]	; (80041f4 <TIM_Base_SetConfig+0xec>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_Base_SetConfig+0x38>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <TIM_Base_SetConfig+0xf0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a25      	ldr	r2, [pc, #148]	; (80041ec <TIM_Base_SetConfig+0xe4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01b      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d017      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <TIM_Base_SetConfig+0xe8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <TIM_Base_SetConfig+0xec>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00f      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <TIM_Base_SetConfig+0xf0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <TIM_Base_SetConfig+0xf4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <TIM_Base_SetConfig+0xf8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <TIM_Base_SetConfig+0xfc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d108      	bne.n	80041a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <TIM_Base_SetConfig+0xe4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d103      	bne.n	80041d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40014000 	.word	0x40014000
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800

08004208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 0302 	bic.w	r3, r3, #2
 8004250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <TIM_OC1_SetConfig+0xc8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10c      	bne.n	800427e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0308 	bic.w	r3, r3, #8
 800426a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a13      	ldr	r2, [pc, #76]	; (80042d0 <TIM_OC1_SetConfig+0xc8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	621a      	str	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40010000 	.word	0x40010000

080042d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0320 	bic.w	r3, r3, #32
 800431e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <TIM_OC2_SetConfig+0xd4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10d      	bne.n	8004350 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <TIM_OC2_SetConfig+0xd4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d113      	bne.n	8004380 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800435e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000

080043ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <TIM_OC3_SetConfig+0xd0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d10d      	bne.n	8004426 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <TIM_OC3_SetConfig+0xd0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d113      	bne.n	8004456 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800443c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40010000 	.word	0x40010000

08004480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	031b      	lsls	r3, r3, #12
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a10      	ldr	r2, [pc, #64]	; (800451c <TIM_OC4_SetConfig+0x9c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d109      	bne.n	80044f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000

08004520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f023 0201 	bic.w	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800454a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 030a 	bic.w	r3, r3, #10
 800455c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0210 	bic.w	r2, r3, #16
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	031b      	lsls	r3, r3, #12
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f043 0307 	orr.w	r3, r3, #7
 8004600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	609a      	str	r2, [r3, #8]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	431a      	orrs	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	2201      	movs	r2, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	43db      	mvns	r3, r3
 8004676:	401a      	ands	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	fa01 f303 	lsl.w	r3, r1, r3
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e050      	b.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d018      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d013      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a18      	ldr	r2, [pc, #96]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00e      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a16      	ldr	r2, [pc, #88]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a13      	ldr	r2, [pc, #76]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10c      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40014000 	.word	0x40014000

0800477c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004794:	2302      	movs	r3, #2
 8004796:	e03d      	b.n	8004814 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <Set_LED>:
#include "WS2812B.h"

uint8_t LED_Data[NUM_LEDS][3]; // Remove unnecessary LED num
volatile int datasentflag;

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
    LED_Data[LEDnum][0] = Green;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	b2d8      	uxtb	r0, r3
 8004832:	4912      	ldr	r1, [pc, #72]	; (800487c <Set_LED+0x5c>)
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	440b      	add	r3, r1
 800483e:	4602      	mov	r2, r0
 8004840:	701a      	strb	r2, [r3, #0]
    LED_Data[LEDnum][1] = Red;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	b2d8      	uxtb	r0, r3
 8004846:	490d      	ldr	r1, [pc, #52]	; (800487c <Set_LED+0x5c>)
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	440b      	add	r3, r1
 8004852:	3301      	adds	r3, #1
 8004854:	4602      	mov	r2, r0
 8004856:	701a      	strb	r2, [r3, #0]
    LED_Data[LEDnum][2] = Blue;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b2d8      	uxtb	r0, r3
 800485c:	4907      	ldr	r1, [pc, #28]	; (800487c <Set_LED+0x5c>)
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4613      	mov	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	4413      	add	r3, r2
 8004866:	440b      	add	r3, r1
 8004868:	3302      	adds	r3, #2
 800486a:	4602      	mov	r2, r0
 800486c:	701a      	strb	r2, [r3, #0]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000204 	.word	0x20000204

08004880 <WS2812B_Send>:

uint16_t pwmData[(24 * NUM_LEDS) + RESET_SLOTS]; // Each LED requires 24 bits.



void WS2812B_Send(TIM_HandleTypeDef htim1) {
 8004880:	b084      	sub	sp, #16
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	f107 0c20 	add.w	ip, r7, #32
 800488c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t indx = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
    uint32_t data;

    // Shifting colors into 24 bit buffer
    for (int i = 0; i < NUM_LEDS; i++) {
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e03e      	b.n	8004918 <WS2812B_Send+0x98>

        data = ((LED_Data[i][0] << 16) | (LED_Data[i][1] << 8) | (LED_Data[i][2]));
 800489a:	4934      	ldr	r1, [pc, #208]	; (800496c <WS2812B_Send+0xec>)
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	0419      	lsls	r1, r3, #16
 80048aa:	4830      	ldr	r0, [pc, #192]	; (800496c <WS2812B_Send+0xec>)
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4613      	mov	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	4403      	add	r3, r0
 80048b6:	3301      	adds	r3, #1
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	4319      	orrs	r1, r3
 80048be:	482b      	ldr	r0, [pc, #172]	; (800496c <WS2812B_Send+0xec>)
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	4403      	add	r3, r0
 80048ca:	3302      	adds	r3, #2
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	430b      	orrs	r3, r1
 80048d0:	607b      	str	r3, [r7, #4]

        for (int j = 23; j >= 0; j--) {
 80048d2:	2317      	movs	r3, #23
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	e019      	b.n	800490c <WS2812B_Send+0x8c>
            if (data & (1 << j))
 80048d8:	2201      	movs	r2, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <WS2812B_Send+0x76>
                pwmData[indx] = ONE; // Use defined duty cycle for ONE
 80048ea:	4a21      	ldr	r2, [pc, #132]	; (8004970 <WS2812B_Send+0xf0>)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2136      	movs	r1, #54	; 0x36
 80048f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80048f4:	e004      	b.n	8004900 <WS2812B_Send+0x80>
            else
                pwmData[indx] = ZERO; // Use defined duty cycle for ZERO
 80048f6:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <WS2812B_Send+0xf0>)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	211b      	movs	r1, #27
 80048fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            indx++;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	3301      	adds	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
        for (int j = 23; j >= 0; j--) {
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b01      	subs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	dae2      	bge.n	80048d8 <WS2812B_Send+0x58>
    for (int i = 0; i < NUM_LEDS; i++) {
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3301      	adds	r3, #1
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b81      	cmp	r3, #129	; 0x81
 800491c:	ddbd      	ble.n	800489a <WS2812B_Send+0x1a>
        }
    }

    // Create the reset signal by putting low values (0) at the end of pwmData
    for (int j = 0; j < RESET_SLOTS; j++) {
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	e009      	b.n	8004938 <WS2812B_Send+0xb8>
        pwmData[indx++] = 0;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	617a      	str	r2, [r7, #20]
 800492a:	4a11      	ldr	r2, [pc, #68]	; (8004970 <WS2812B_Send+0xf0>)
 800492c:	2100      	movs	r1, #0
 800492e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int j = 0; j < RESET_SLOTS; j++) {
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	3301      	adds	r3, #1
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b31      	cmp	r3, #49	; 0x31
 800493c:	ddf2      	ble.n	8004924 <WS2812B_Send+0xa4>
    }

    // Start transmitting PWM data
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData, indx);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	b29b      	uxth	r3, r3
 8004942:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <WS2812B_Send+0xf0>)
 8004944:	2100      	movs	r1, #0
 8004946:	f107 0020 	add.w	r0, r7, #32
 800494a:	f7fe fef9 	bl	8003740 <HAL_TIM_PWM_Start_DMA>

    // Wait until the data has been sent
    while (!datasentflag) {}
 800494e:	bf00      	nop
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <WS2812B_Send+0xf4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0fb      	beq.n	8004950 <WS2812B_Send+0xd0>

    // Reset the data sent flag for the next transmission
    datasentflag = 0;
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <WS2812B_Send+0xf4>)
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004968:	b004      	add	sp, #16
 800496a:	4770      	bx	lr
 800496c:	20000204 	.word	0x20000204
 8004970:	20000390 	.word	0x20000390
 8004974:	2000038c 	.word	0x2000038c

08004978 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8004980:	2100      	movs	r1, #0
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff f88c 	bl	8003aa0 <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    datasentflag = 1;
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	2000038c 	.word	0x2000038c

0800499c <__errno>:
 800499c:	4b01      	ldr	r3, [pc, #4]	; (80049a4 <__errno+0x8>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000024 	.word	0x20000024

080049a8 <__libc_init_array>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	4d0d      	ldr	r5, [pc, #52]	; (80049e0 <__libc_init_array+0x38>)
 80049ac:	4c0d      	ldr	r4, [pc, #52]	; (80049e4 <__libc_init_array+0x3c>)
 80049ae:	1b64      	subs	r4, r4, r5
 80049b0:	10a4      	asrs	r4, r4, #2
 80049b2:	2600      	movs	r6, #0
 80049b4:	42a6      	cmp	r6, r4
 80049b6:	d109      	bne.n	80049cc <__libc_init_array+0x24>
 80049b8:	4d0b      	ldr	r5, [pc, #44]	; (80049e8 <__libc_init_array+0x40>)
 80049ba:	4c0c      	ldr	r4, [pc, #48]	; (80049ec <__libc_init_array+0x44>)
 80049bc:	f000 fca2 	bl	8005304 <_init>
 80049c0:	1b64      	subs	r4, r4, r5
 80049c2:	10a4      	asrs	r4, r4, #2
 80049c4:	2600      	movs	r6, #0
 80049c6:	42a6      	cmp	r6, r4
 80049c8:	d105      	bne.n	80049d6 <__libc_init_array+0x2e>
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d0:	4798      	blx	r3
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7ee      	b.n	80049b4 <__libc_init_array+0xc>
 80049d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049da:	4798      	blx	r3
 80049dc:	3601      	adds	r6, #1
 80049de:	e7f2      	b.n	80049c6 <__libc_init_array+0x1e>
 80049e0:	0800568c 	.word	0x0800568c
 80049e4:	0800568c 	.word	0x0800568c
 80049e8:	0800568c 	.word	0x0800568c
 80049ec:	08005690 	.word	0x08005690

080049f0 <memset>:
 80049f0:	4402      	add	r2, r0
 80049f2:	4603      	mov	r3, r0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <memset+0xa>
 80049f8:	4770      	bx	lr
 80049fa:	f803 1b01 	strb.w	r1, [r3], #1
 80049fe:	e7f9      	b.n	80049f4 <memset+0x4>

08004a00 <sniprintf>:
 8004a00:	b40c      	push	{r2, r3}
 8004a02:	b530      	push	{r4, r5, lr}
 8004a04:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <sniprintf+0x64>)
 8004a06:	1e0c      	subs	r4, r1, #0
 8004a08:	681d      	ldr	r5, [r3, #0]
 8004a0a:	b09d      	sub	sp, #116	; 0x74
 8004a0c:	da08      	bge.n	8004a20 <sniprintf+0x20>
 8004a0e:	238b      	movs	r3, #139	; 0x8b
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	f04f 30ff 	mov.w	r0, #4294967295
 8004a16:	b01d      	add	sp, #116	; 0x74
 8004a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a1c:	b002      	add	sp, #8
 8004a1e:	4770      	bx	lr
 8004a20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a28:	bf14      	ite	ne
 8004a2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a2e:	4623      	moveq	r3, r4
 8004a30:	9304      	str	r3, [sp, #16]
 8004a32:	9307      	str	r3, [sp, #28]
 8004a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a38:	9002      	str	r0, [sp, #8]
 8004a3a:	9006      	str	r0, [sp, #24]
 8004a3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a42:	ab21      	add	r3, sp, #132	; 0x84
 8004a44:	a902      	add	r1, sp, #8
 8004a46:	4628      	mov	r0, r5
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	f000 f869 	bl	8004b20 <_svfiprintf_r>
 8004a4e:	1c43      	adds	r3, r0, #1
 8004a50:	bfbc      	itt	lt
 8004a52:	238b      	movlt	r3, #139	; 0x8b
 8004a54:	602b      	strlt	r3, [r5, #0]
 8004a56:	2c00      	cmp	r4, #0
 8004a58:	d0dd      	beq.n	8004a16 <sniprintf+0x16>
 8004a5a:	9b02      	ldr	r3, [sp, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	e7d9      	b.n	8004a16 <sniprintf+0x16>
 8004a62:	bf00      	nop
 8004a64:	20000024 	.word	0x20000024

08004a68 <__ssputs_r>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	688e      	ldr	r6, [r1, #8]
 8004a6e:	429e      	cmp	r6, r3
 8004a70:	4682      	mov	sl, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	4690      	mov	r8, r2
 8004a76:	461f      	mov	r7, r3
 8004a78:	d838      	bhi.n	8004aec <__ssputs_r+0x84>
 8004a7a:	898a      	ldrh	r2, [r1, #12]
 8004a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a80:	d032      	beq.n	8004ae8 <__ssputs_r+0x80>
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	6909      	ldr	r1, [r1, #16]
 8004a86:	eba5 0901 	sub.w	r9, r5, r1
 8004a8a:	6965      	ldr	r5, [r4, #20]
 8004a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a94:	3301      	adds	r3, #1
 8004a96:	444b      	add	r3, r9
 8004a98:	106d      	asrs	r5, r5, #1
 8004a9a:	429d      	cmp	r5, r3
 8004a9c:	bf38      	it	cc
 8004a9e:	461d      	movcc	r5, r3
 8004aa0:	0553      	lsls	r3, r2, #21
 8004aa2:	d531      	bpl.n	8004b08 <__ssputs_r+0xa0>
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f000 fb63 	bl	8005170 <_malloc_r>
 8004aaa:	4606      	mov	r6, r0
 8004aac:	b950      	cbnz	r0, 8004ac4 <__ssputs_r+0x5c>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	f8ca 3000 	str.w	r3, [sl]
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	6921      	ldr	r1, [r4, #16]
 8004ac6:	464a      	mov	r2, r9
 8004ac8:	f000 fabe 	bl	8005048 <memcpy>
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	6126      	str	r6, [r4, #16]
 8004ada:	6165      	str	r5, [r4, #20]
 8004adc:	444e      	add	r6, r9
 8004ade:	eba5 0509 	sub.w	r5, r5, r9
 8004ae2:	6026      	str	r6, [r4, #0]
 8004ae4:	60a5      	str	r5, [r4, #8]
 8004ae6:	463e      	mov	r6, r7
 8004ae8:	42be      	cmp	r6, r7
 8004aea:	d900      	bls.n	8004aee <__ssputs_r+0x86>
 8004aec:	463e      	mov	r6, r7
 8004aee:	6820      	ldr	r0, [r4, #0]
 8004af0:	4632      	mov	r2, r6
 8004af2:	4641      	mov	r1, r8
 8004af4:	f000 fab6 	bl	8005064 <memmove>
 8004af8:	68a3      	ldr	r3, [r4, #8]
 8004afa:	1b9b      	subs	r3, r3, r6
 8004afc:	60a3      	str	r3, [r4, #8]
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	4433      	add	r3, r6
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	2000      	movs	r0, #0
 8004b06:	e7db      	b.n	8004ac0 <__ssputs_r+0x58>
 8004b08:	462a      	mov	r2, r5
 8004b0a:	f000 fba5 	bl	8005258 <_realloc_r>
 8004b0e:	4606      	mov	r6, r0
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d1e1      	bne.n	8004ad8 <__ssputs_r+0x70>
 8004b14:	6921      	ldr	r1, [r4, #16]
 8004b16:	4650      	mov	r0, sl
 8004b18:	f000 fabe 	bl	8005098 <_free_r>
 8004b1c:	e7c7      	b.n	8004aae <__ssputs_r+0x46>
	...

08004b20 <_svfiprintf_r>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	4698      	mov	r8, r3
 8004b26:	898b      	ldrh	r3, [r1, #12]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	b09d      	sub	sp, #116	; 0x74
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	460d      	mov	r5, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	d50e      	bpl.n	8004b52 <_svfiprintf_r+0x32>
 8004b34:	690b      	ldr	r3, [r1, #16]
 8004b36:	b963      	cbnz	r3, 8004b52 <_svfiprintf_r+0x32>
 8004b38:	2140      	movs	r1, #64	; 0x40
 8004b3a:	f000 fb19 	bl	8005170 <_malloc_r>
 8004b3e:	6028      	str	r0, [r5, #0]
 8004b40:	6128      	str	r0, [r5, #16]
 8004b42:	b920      	cbnz	r0, 8004b4e <_svfiprintf_r+0x2e>
 8004b44:	230c      	movs	r3, #12
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	e0d1      	b.n	8004cf2 <_svfiprintf_r+0x1d2>
 8004b4e:	2340      	movs	r3, #64	; 0x40
 8004b50:	616b      	str	r3, [r5, #20]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9309      	str	r3, [sp, #36]	; 0x24
 8004b56:	2320      	movs	r3, #32
 8004b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b60:	2330      	movs	r3, #48	; 0x30
 8004b62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d0c <_svfiprintf_r+0x1ec>
 8004b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b6a:	f04f 0901 	mov.w	r9, #1
 8004b6e:	4623      	mov	r3, r4
 8004b70:	469a      	mov	sl, r3
 8004b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b76:	b10a      	cbz	r2, 8004b7c <_svfiprintf_r+0x5c>
 8004b78:	2a25      	cmp	r2, #37	; 0x25
 8004b7a:	d1f9      	bne.n	8004b70 <_svfiprintf_r+0x50>
 8004b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004b80:	d00b      	beq.n	8004b9a <_svfiprintf_r+0x7a>
 8004b82:	465b      	mov	r3, fp
 8004b84:	4622      	mov	r2, r4
 8004b86:	4629      	mov	r1, r5
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f7ff ff6d 	bl	8004a68 <__ssputs_r>
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f000 80aa 	beq.w	8004ce8 <_svfiprintf_r+0x1c8>
 8004b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b96:	445a      	add	r2, fp
 8004b98:	9209      	str	r2, [sp, #36]	; 0x24
 8004b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80a2 	beq.w	8004ce8 <_svfiprintf_r+0x1c8>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8004baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bae:	f10a 0a01 	add.w	sl, sl, #1
 8004bb2:	9304      	str	r3, [sp, #16]
 8004bb4:	9307      	str	r3, [sp, #28]
 8004bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bba:	931a      	str	r3, [sp, #104]	; 0x68
 8004bbc:	4654      	mov	r4, sl
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc4:	4851      	ldr	r0, [pc, #324]	; (8004d0c <_svfiprintf_r+0x1ec>)
 8004bc6:	f7fb fb13 	bl	80001f0 <memchr>
 8004bca:	9a04      	ldr	r2, [sp, #16]
 8004bcc:	b9d8      	cbnz	r0, 8004c06 <_svfiprintf_r+0xe6>
 8004bce:	06d0      	lsls	r0, r2, #27
 8004bd0:	bf44      	itt	mi
 8004bd2:	2320      	movmi	r3, #32
 8004bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd8:	0711      	lsls	r1, r2, #28
 8004bda:	bf44      	itt	mi
 8004bdc:	232b      	movmi	r3, #43	; 0x2b
 8004bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be2:	f89a 3000 	ldrb.w	r3, [sl]
 8004be6:	2b2a      	cmp	r3, #42	; 0x2a
 8004be8:	d015      	beq.n	8004c16 <_svfiprintf_r+0xf6>
 8004bea:	9a07      	ldr	r2, [sp, #28]
 8004bec:	4654      	mov	r4, sl
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f04f 0c0a 	mov.w	ip, #10
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfa:	3b30      	subs	r3, #48	; 0x30
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d94e      	bls.n	8004c9e <_svfiprintf_r+0x17e>
 8004c00:	b1b0      	cbz	r0, 8004c30 <_svfiprintf_r+0x110>
 8004c02:	9207      	str	r2, [sp, #28]
 8004c04:	e014      	b.n	8004c30 <_svfiprintf_r+0x110>
 8004c06:	eba0 0308 	sub.w	r3, r0, r8
 8004c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	9304      	str	r3, [sp, #16]
 8004c12:	46a2      	mov	sl, r4
 8004c14:	e7d2      	b.n	8004bbc <_svfiprintf_r+0x9c>
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	1d19      	adds	r1, r3, #4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	9103      	str	r1, [sp, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfbb      	ittet	lt
 8004c22:	425b      	neglt	r3, r3
 8004c24:	f042 0202 	orrlt.w	r2, r2, #2
 8004c28:	9307      	strge	r3, [sp, #28]
 8004c2a:	9307      	strlt	r3, [sp, #28]
 8004c2c:	bfb8      	it	lt
 8004c2e:	9204      	strlt	r2, [sp, #16]
 8004c30:	7823      	ldrb	r3, [r4, #0]
 8004c32:	2b2e      	cmp	r3, #46	; 0x2e
 8004c34:	d10c      	bne.n	8004c50 <_svfiprintf_r+0x130>
 8004c36:	7863      	ldrb	r3, [r4, #1]
 8004c38:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3a:	d135      	bne.n	8004ca8 <_svfiprintf_r+0x188>
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	9203      	str	r2, [sp, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bfb8      	it	lt
 8004c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c4c:	3402      	adds	r4, #2
 8004c4e:	9305      	str	r3, [sp, #20]
 8004c50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d1c <_svfiprintf_r+0x1fc>
 8004c54:	7821      	ldrb	r1, [r4, #0]
 8004c56:	2203      	movs	r2, #3
 8004c58:	4650      	mov	r0, sl
 8004c5a:	f7fb fac9 	bl	80001f0 <memchr>
 8004c5e:	b140      	cbz	r0, 8004c72 <_svfiprintf_r+0x152>
 8004c60:	2340      	movs	r3, #64	; 0x40
 8004c62:	eba0 000a 	sub.w	r0, r0, sl
 8004c66:	fa03 f000 	lsl.w	r0, r3, r0
 8004c6a:	9b04      	ldr	r3, [sp, #16]
 8004c6c:	4303      	orrs	r3, r0
 8004c6e:	3401      	adds	r4, #1
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c76:	4826      	ldr	r0, [pc, #152]	; (8004d10 <_svfiprintf_r+0x1f0>)
 8004c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c7c:	2206      	movs	r2, #6
 8004c7e:	f7fb fab7 	bl	80001f0 <memchr>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d038      	beq.n	8004cf8 <_svfiprintf_r+0x1d8>
 8004c86:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <_svfiprintf_r+0x1f4>)
 8004c88:	bb1b      	cbnz	r3, 8004cd2 <_svfiprintf_r+0x1b2>
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	f023 0307 	bic.w	r3, r3, #7
 8004c92:	3308      	adds	r3, #8
 8004c94:	9303      	str	r3, [sp, #12]
 8004c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c98:	4433      	add	r3, r6
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9c:	e767      	b.n	8004b6e <_svfiprintf_r+0x4e>
 8004c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	e7a5      	b.n	8004bf4 <_svfiprintf_r+0xd4>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	3401      	adds	r4, #1
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f04f 0c0a 	mov.w	ip, #10
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cba:	3a30      	subs	r2, #48	; 0x30
 8004cbc:	2a09      	cmp	r2, #9
 8004cbe:	d903      	bls.n	8004cc8 <_svfiprintf_r+0x1a8>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0c5      	beq.n	8004c50 <_svfiprintf_r+0x130>
 8004cc4:	9105      	str	r1, [sp, #20]
 8004cc6:	e7c3      	b.n	8004c50 <_svfiprintf_r+0x130>
 8004cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ccc:	4604      	mov	r4, r0
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e7f0      	b.n	8004cb4 <_svfiprintf_r+0x194>
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <_svfiprintf_r+0x1f8>)
 8004cda:	a904      	add	r1, sp, #16
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f3af 8000 	nop.w
 8004ce2:	1c42      	adds	r2, r0, #1
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	d1d6      	bne.n	8004c96 <_svfiprintf_r+0x176>
 8004ce8:	89ab      	ldrh	r3, [r5, #12]
 8004cea:	065b      	lsls	r3, r3, #25
 8004cec:	f53f af2c 	bmi.w	8004b48 <_svfiprintf_r+0x28>
 8004cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf2:	b01d      	add	sp, #116	; 0x74
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	ab03      	add	r3, sp, #12
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	462a      	mov	r2, r5
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <_svfiprintf_r+0x1f8>)
 8004d00:	a904      	add	r1, sp, #16
 8004d02:	4638      	mov	r0, r7
 8004d04:	f000 f87a 	bl	8004dfc <_printf_i>
 8004d08:	e7eb      	b.n	8004ce2 <_svfiprintf_r+0x1c2>
 8004d0a:	bf00      	nop
 8004d0c:	08005650 	.word	0x08005650
 8004d10:	0800565a 	.word	0x0800565a
 8004d14:	00000000 	.word	0x00000000
 8004d18:	08004a69 	.word	0x08004a69
 8004d1c:	08005656 	.word	0x08005656

08004d20 <_printf_common>:
 8004d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d24:	4616      	mov	r6, r2
 8004d26:	4699      	mov	r9, r3
 8004d28:	688a      	ldr	r2, [r1, #8]
 8004d2a:	690b      	ldr	r3, [r1, #16]
 8004d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	bfb8      	it	lt
 8004d34:	4613      	movlt	r3, r2
 8004d36:	6033      	str	r3, [r6, #0]
 8004d38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	b10a      	cbz	r2, 8004d46 <_printf_common+0x26>
 8004d42:	3301      	adds	r3, #1
 8004d44:	6033      	str	r3, [r6, #0]
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	0699      	lsls	r1, r3, #26
 8004d4a:	bf42      	ittt	mi
 8004d4c:	6833      	ldrmi	r3, [r6, #0]
 8004d4e:	3302      	addmi	r3, #2
 8004d50:	6033      	strmi	r3, [r6, #0]
 8004d52:	6825      	ldr	r5, [r4, #0]
 8004d54:	f015 0506 	ands.w	r5, r5, #6
 8004d58:	d106      	bne.n	8004d68 <_printf_common+0x48>
 8004d5a:	f104 0a19 	add.w	sl, r4, #25
 8004d5e:	68e3      	ldr	r3, [r4, #12]
 8004d60:	6832      	ldr	r2, [r6, #0]
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	42ab      	cmp	r3, r5
 8004d66:	dc26      	bgt.n	8004db6 <_printf_common+0x96>
 8004d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d6c:	1e13      	subs	r3, r2, #0
 8004d6e:	6822      	ldr	r2, [r4, #0]
 8004d70:	bf18      	it	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	0692      	lsls	r2, r2, #26
 8004d76:	d42b      	bmi.n	8004dd0 <_printf_common+0xb0>
 8004d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	4638      	mov	r0, r7
 8004d80:	47c0      	blx	r8
 8004d82:	3001      	adds	r0, #1
 8004d84:	d01e      	beq.n	8004dc4 <_printf_common+0xa4>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	68e5      	ldr	r5, [r4, #12]
 8004d8a:	6832      	ldr	r2, [r6, #0]
 8004d8c:	f003 0306 	and.w	r3, r3, #6
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	bf08      	it	eq
 8004d94:	1aad      	subeq	r5, r5, r2
 8004d96:	68a3      	ldr	r3, [r4, #8]
 8004d98:	6922      	ldr	r2, [r4, #16]
 8004d9a:	bf0c      	ite	eq
 8004d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da0:	2500      	movne	r5, #0
 8004da2:	4293      	cmp	r3, r2
 8004da4:	bfc4      	itt	gt
 8004da6:	1a9b      	subgt	r3, r3, r2
 8004da8:	18ed      	addgt	r5, r5, r3
 8004daa:	2600      	movs	r6, #0
 8004dac:	341a      	adds	r4, #26
 8004dae:	42b5      	cmp	r5, r6
 8004db0:	d11a      	bne.n	8004de8 <_printf_common+0xc8>
 8004db2:	2000      	movs	r0, #0
 8004db4:	e008      	b.n	8004dc8 <_printf_common+0xa8>
 8004db6:	2301      	movs	r3, #1
 8004db8:	4652      	mov	r2, sl
 8004dba:	4649      	mov	r1, r9
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	47c0      	blx	r8
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d103      	bne.n	8004dcc <_printf_common+0xac>
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dcc:	3501      	adds	r5, #1
 8004dce:	e7c6      	b.n	8004d5e <_printf_common+0x3e>
 8004dd0:	18e1      	adds	r1, r4, r3
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	2030      	movs	r0, #48	; 0x30
 8004dd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dda:	4422      	add	r2, r4
 8004ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de4:	3302      	adds	r3, #2
 8004de6:	e7c7      	b.n	8004d78 <_printf_common+0x58>
 8004de8:	2301      	movs	r3, #1
 8004dea:	4622      	mov	r2, r4
 8004dec:	4649      	mov	r1, r9
 8004dee:	4638      	mov	r0, r7
 8004df0:	47c0      	blx	r8
 8004df2:	3001      	adds	r0, #1
 8004df4:	d0e6      	beq.n	8004dc4 <_printf_common+0xa4>
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7d9      	b.n	8004dae <_printf_common+0x8e>
	...

08004dfc <_printf_i>:
 8004dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e00:	7e0f      	ldrb	r7, [r1, #24]
 8004e02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e04:	2f78      	cmp	r7, #120	; 0x78
 8004e06:	4691      	mov	r9, r2
 8004e08:	4680      	mov	r8, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	469a      	mov	sl, r3
 8004e0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e12:	d807      	bhi.n	8004e24 <_printf_i+0x28>
 8004e14:	2f62      	cmp	r7, #98	; 0x62
 8004e16:	d80a      	bhi.n	8004e2e <_printf_i+0x32>
 8004e18:	2f00      	cmp	r7, #0
 8004e1a:	f000 80d8 	beq.w	8004fce <_printf_i+0x1d2>
 8004e1e:	2f58      	cmp	r7, #88	; 0x58
 8004e20:	f000 80a3 	beq.w	8004f6a <_printf_i+0x16e>
 8004e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e2c:	e03a      	b.n	8004ea4 <_printf_i+0xa8>
 8004e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e32:	2b15      	cmp	r3, #21
 8004e34:	d8f6      	bhi.n	8004e24 <_printf_i+0x28>
 8004e36:	a101      	add	r1, pc, #4	; (adr r1, 8004e3c <_printf_i+0x40>)
 8004e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e3c:	08004e95 	.word	0x08004e95
 8004e40:	08004ea9 	.word	0x08004ea9
 8004e44:	08004e25 	.word	0x08004e25
 8004e48:	08004e25 	.word	0x08004e25
 8004e4c:	08004e25 	.word	0x08004e25
 8004e50:	08004e25 	.word	0x08004e25
 8004e54:	08004ea9 	.word	0x08004ea9
 8004e58:	08004e25 	.word	0x08004e25
 8004e5c:	08004e25 	.word	0x08004e25
 8004e60:	08004e25 	.word	0x08004e25
 8004e64:	08004e25 	.word	0x08004e25
 8004e68:	08004fb5 	.word	0x08004fb5
 8004e6c:	08004ed9 	.word	0x08004ed9
 8004e70:	08004f97 	.word	0x08004f97
 8004e74:	08004e25 	.word	0x08004e25
 8004e78:	08004e25 	.word	0x08004e25
 8004e7c:	08004fd7 	.word	0x08004fd7
 8004e80:	08004e25 	.word	0x08004e25
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e25 	.word	0x08004e25
 8004e8c:	08004e25 	.word	0x08004e25
 8004e90:	08004f9f 	.word	0x08004f9f
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	1d1a      	adds	r2, r3, #4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	602a      	str	r2, [r5, #0]
 8004e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0a3      	b.n	8004ff0 <_printf_i+0x1f4>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	6829      	ldr	r1, [r5, #0]
 8004eac:	0606      	lsls	r6, r0, #24
 8004eae:	f101 0304 	add.w	r3, r1, #4
 8004eb2:	d50a      	bpl.n	8004eca <_printf_i+0xce>
 8004eb4:	680e      	ldr	r6, [r1, #0]
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	2e00      	cmp	r6, #0
 8004eba:	da03      	bge.n	8004ec4 <_printf_i+0xc8>
 8004ebc:	232d      	movs	r3, #45	; 0x2d
 8004ebe:	4276      	negs	r6, r6
 8004ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec4:	485e      	ldr	r0, [pc, #376]	; (8005040 <_printf_i+0x244>)
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	e019      	b.n	8004efe <_printf_i+0x102>
 8004eca:	680e      	ldr	r6, [r1, #0]
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ed2:	bf18      	it	ne
 8004ed4:	b236      	sxthne	r6, r6
 8004ed6:	e7ef      	b.n	8004eb8 <_printf_i+0xbc>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	1d19      	adds	r1, r3, #4
 8004ede:	6029      	str	r1, [r5, #0]
 8004ee0:	0601      	lsls	r1, r0, #24
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0xec>
 8004ee4:	681e      	ldr	r6, [r3, #0]
 8004ee6:	e002      	b.n	8004eee <_printf_i+0xf2>
 8004ee8:	0646      	lsls	r6, r0, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0xe8>
 8004eec:	881e      	ldrh	r6, [r3, #0]
 8004eee:	4854      	ldr	r0, [pc, #336]	; (8005040 <_printf_i+0x244>)
 8004ef0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2308      	moveq	r3, #8
 8004ef6:	230a      	movne	r3, #10
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004efe:	6865      	ldr	r5, [r4, #4]
 8004f00:	60a5      	str	r5, [r4, #8]
 8004f02:	2d00      	cmp	r5, #0
 8004f04:	bfa2      	ittt	ge
 8004f06:	6821      	ldrge	r1, [r4, #0]
 8004f08:	f021 0104 	bicge.w	r1, r1, #4
 8004f0c:	6021      	strge	r1, [r4, #0]
 8004f0e:	b90e      	cbnz	r6, 8004f14 <_printf_i+0x118>
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	d04d      	beq.n	8004fb0 <_printf_i+0x1b4>
 8004f14:	4615      	mov	r5, r2
 8004f16:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f1a:	fb03 6711 	mls	r7, r3, r1, r6
 8004f1e:	5dc7      	ldrb	r7, [r0, r7]
 8004f20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f24:	4637      	mov	r7, r6
 8004f26:	42bb      	cmp	r3, r7
 8004f28:	460e      	mov	r6, r1
 8004f2a:	d9f4      	bls.n	8004f16 <_printf_i+0x11a>
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d10b      	bne.n	8004f48 <_printf_i+0x14c>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	07de      	lsls	r6, r3, #31
 8004f34:	d508      	bpl.n	8004f48 <_printf_i+0x14c>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	6861      	ldr	r1, [r4, #4]
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	bfde      	ittt	le
 8004f3e:	2330      	movle	r3, #48	; 0x30
 8004f40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f48:	1b52      	subs	r2, r2, r5
 8004f4a:	6122      	str	r2, [r4, #16]
 8004f4c:	f8cd a000 	str.w	sl, [sp]
 8004f50:	464b      	mov	r3, r9
 8004f52:	aa03      	add	r2, sp, #12
 8004f54:	4621      	mov	r1, r4
 8004f56:	4640      	mov	r0, r8
 8004f58:	f7ff fee2 	bl	8004d20 <_printf_common>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d14c      	bne.n	8004ffa <_printf_i+0x1fe>
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295
 8004f64:	b004      	add	sp, #16
 8004f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6a:	4835      	ldr	r0, [pc, #212]	; (8005040 <_printf_i+0x244>)
 8004f6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f70:	6829      	ldr	r1, [r5, #0]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f78:	6029      	str	r1, [r5, #0]
 8004f7a:	061d      	lsls	r5, r3, #24
 8004f7c:	d514      	bpl.n	8004fa8 <_printf_i+0x1ac>
 8004f7e:	07df      	lsls	r7, r3, #31
 8004f80:	bf44      	itt	mi
 8004f82:	f043 0320 	orrmi.w	r3, r3, #32
 8004f86:	6023      	strmi	r3, [r4, #0]
 8004f88:	b91e      	cbnz	r6, 8004f92 <_printf_i+0x196>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	f023 0320 	bic.w	r3, r3, #32
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	2310      	movs	r3, #16
 8004f94:	e7b0      	b.n	8004ef8 <_printf_i+0xfc>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f043 0320 	orr.w	r3, r3, #32
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	2378      	movs	r3, #120	; 0x78
 8004fa0:	4828      	ldr	r0, [pc, #160]	; (8005044 <_printf_i+0x248>)
 8004fa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fa6:	e7e3      	b.n	8004f70 <_printf_i+0x174>
 8004fa8:	0659      	lsls	r1, r3, #25
 8004faa:	bf48      	it	mi
 8004fac:	b2b6      	uxthmi	r6, r6
 8004fae:	e7e6      	b.n	8004f7e <_printf_i+0x182>
 8004fb0:	4615      	mov	r5, r2
 8004fb2:	e7bb      	b.n	8004f2c <_printf_i+0x130>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	6826      	ldr	r6, [r4, #0]
 8004fb8:	6961      	ldr	r1, [r4, #20]
 8004fba:	1d18      	adds	r0, r3, #4
 8004fbc:	6028      	str	r0, [r5, #0]
 8004fbe:	0635      	lsls	r5, r6, #24
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	d501      	bpl.n	8004fc8 <_printf_i+0x1cc>
 8004fc4:	6019      	str	r1, [r3, #0]
 8004fc6:	e002      	b.n	8004fce <_printf_i+0x1d2>
 8004fc8:	0670      	lsls	r0, r6, #25
 8004fca:	d5fb      	bpl.n	8004fc4 <_printf_i+0x1c8>
 8004fcc:	8019      	strh	r1, [r3, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6123      	str	r3, [r4, #16]
 8004fd2:	4615      	mov	r5, r2
 8004fd4:	e7ba      	b.n	8004f4c <_printf_i+0x150>
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	1d1a      	adds	r2, r3, #4
 8004fda:	602a      	str	r2, [r5, #0]
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	6862      	ldr	r2, [r4, #4]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f7fb f904 	bl	80001f0 <memchr>
 8004fe8:	b108      	cbz	r0, 8004fee <_printf_i+0x1f2>
 8004fea:	1b40      	subs	r0, r0, r5
 8004fec:	6060      	str	r0, [r4, #4]
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff8:	e7a8      	b.n	8004f4c <_printf_i+0x150>
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	4649      	mov	r1, r9
 8005000:	4640      	mov	r0, r8
 8005002:	47d0      	blx	sl
 8005004:	3001      	adds	r0, #1
 8005006:	d0ab      	beq.n	8004f60 <_printf_i+0x164>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	079b      	lsls	r3, r3, #30
 800500c:	d413      	bmi.n	8005036 <_printf_i+0x23a>
 800500e:	68e0      	ldr	r0, [r4, #12]
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	4298      	cmp	r0, r3
 8005014:	bfb8      	it	lt
 8005016:	4618      	movlt	r0, r3
 8005018:	e7a4      	b.n	8004f64 <_printf_i+0x168>
 800501a:	2301      	movs	r3, #1
 800501c:	4632      	mov	r2, r6
 800501e:	4649      	mov	r1, r9
 8005020:	4640      	mov	r0, r8
 8005022:	47d0      	blx	sl
 8005024:	3001      	adds	r0, #1
 8005026:	d09b      	beq.n	8004f60 <_printf_i+0x164>
 8005028:	3501      	adds	r5, #1
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	9903      	ldr	r1, [sp, #12]
 800502e:	1a5b      	subs	r3, r3, r1
 8005030:	42ab      	cmp	r3, r5
 8005032:	dcf2      	bgt.n	800501a <_printf_i+0x21e>
 8005034:	e7eb      	b.n	800500e <_printf_i+0x212>
 8005036:	2500      	movs	r5, #0
 8005038:	f104 0619 	add.w	r6, r4, #25
 800503c:	e7f5      	b.n	800502a <_printf_i+0x22e>
 800503e:	bf00      	nop
 8005040:	08005661 	.word	0x08005661
 8005044:	08005672 	.word	0x08005672

08005048 <memcpy>:
 8005048:	440a      	add	r2, r1
 800504a:	4291      	cmp	r1, r2
 800504c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005050:	d100      	bne.n	8005054 <memcpy+0xc>
 8005052:	4770      	bx	lr
 8005054:	b510      	push	{r4, lr}
 8005056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800505a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800505e:	4291      	cmp	r1, r2
 8005060:	d1f9      	bne.n	8005056 <memcpy+0xe>
 8005062:	bd10      	pop	{r4, pc}

08005064 <memmove>:
 8005064:	4288      	cmp	r0, r1
 8005066:	b510      	push	{r4, lr}
 8005068:	eb01 0402 	add.w	r4, r1, r2
 800506c:	d902      	bls.n	8005074 <memmove+0x10>
 800506e:	4284      	cmp	r4, r0
 8005070:	4623      	mov	r3, r4
 8005072:	d807      	bhi.n	8005084 <memmove+0x20>
 8005074:	1e43      	subs	r3, r0, #1
 8005076:	42a1      	cmp	r1, r4
 8005078:	d008      	beq.n	800508c <memmove+0x28>
 800507a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005082:	e7f8      	b.n	8005076 <memmove+0x12>
 8005084:	4402      	add	r2, r0
 8005086:	4601      	mov	r1, r0
 8005088:	428a      	cmp	r2, r1
 800508a:	d100      	bne.n	800508e <memmove+0x2a>
 800508c:	bd10      	pop	{r4, pc}
 800508e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005096:	e7f7      	b.n	8005088 <memmove+0x24>

08005098 <_free_r>:
 8005098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800509a:	2900      	cmp	r1, #0
 800509c:	d044      	beq.n	8005128 <_free_r+0x90>
 800509e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a2:	9001      	str	r0, [sp, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f1a1 0404 	sub.w	r4, r1, #4
 80050aa:	bfb8      	it	lt
 80050ac:	18e4      	addlt	r4, r4, r3
 80050ae:	f000 f913 	bl	80052d8 <__malloc_lock>
 80050b2:	4a1e      	ldr	r2, [pc, #120]	; (800512c <_free_r+0x94>)
 80050b4:	9801      	ldr	r0, [sp, #4]
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	b933      	cbnz	r3, 80050c8 <_free_r+0x30>
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	6014      	str	r4, [r2, #0]
 80050be:	b003      	add	sp, #12
 80050c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c4:	f000 b90e 	b.w	80052e4 <__malloc_unlock>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d908      	bls.n	80050de <_free_r+0x46>
 80050cc:	6825      	ldr	r5, [r4, #0]
 80050ce:	1961      	adds	r1, r4, r5
 80050d0:	428b      	cmp	r3, r1
 80050d2:	bf01      	itttt	eq
 80050d4:	6819      	ldreq	r1, [r3, #0]
 80050d6:	685b      	ldreq	r3, [r3, #4]
 80050d8:	1949      	addeq	r1, r1, r5
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	e7ed      	b.n	80050ba <_free_r+0x22>
 80050de:	461a      	mov	r2, r3
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b10b      	cbz	r3, 80050e8 <_free_r+0x50>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d9fa      	bls.n	80050de <_free_r+0x46>
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	1855      	adds	r5, r2, r1
 80050ec:	42a5      	cmp	r5, r4
 80050ee:	d10b      	bne.n	8005108 <_free_r+0x70>
 80050f0:	6824      	ldr	r4, [r4, #0]
 80050f2:	4421      	add	r1, r4
 80050f4:	1854      	adds	r4, r2, r1
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	d1e0      	bne.n	80050be <_free_r+0x26>
 80050fc:	681c      	ldr	r4, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	6053      	str	r3, [r2, #4]
 8005102:	4421      	add	r1, r4
 8005104:	6011      	str	r1, [r2, #0]
 8005106:	e7da      	b.n	80050be <_free_r+0x26>
 8005108:	d902      	bls.n	8005110 <_free_r+0x78>
 800510a:	230c      	movs	r3, #12
 800510c:	6003      	str	r3, [r0, #0]
 800510e:	e7d6      	b.n	80050be <_free_r+0x26>
 8005110:	6825      	ldr	r5, [r4, #0]
 8005112:	1961      	adds	r1, r4, r5
 8005114:	428b      	cmp	r3, r1
 8005116:	bf04      	itt	eq
 8005118:	6819      	ldreq	r1, [r3, #0]
 800511a:	685b      	ldreq	r3, [r3, #4]
 800511c:	6063      	str	r3, [r4, #4]
 800511e:	bf04      	itt	eq
 8005120:	1949      	addeq	r1, r1, r5
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	6054      	str	r4, [r2, #4]
 8005126:	e7ca      	b.n	80050be <_free_r+0x26>
 8005128:	b003      	add	sp, #12
 800512a:	bd30      	pop	{r4, r5, pc}
 800512c:	20001c54 	.word	0x20001c54

08005130 <sbrk_aligned>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4e0e      	ldr	r6, [pc, #56]	; (800516c <sbrk_aligned+0x3c>)
 8005134:	460c      	mov	r4, r1
 8005136:	6831      	ldr	r1, [r6, #0]
 8005138:	4605      	mov	r5, r0
 800513a:	b911      	cbnz	r1, 8005142 <sbrk_aligned+0x12>
 800513c:	f000 f8bc 	bl	80052b8 <_sbrk_r>
 8005140:	6030      	str	r0, [r6, #0]
 8005142:	4621      	mov	r1, r4
 8005144:	4628      	mov	r0, r5
 8005146:	f000 f8b7 	bl	80052b8 <_sbrk_r>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	d00a      	beq.n	8005164 <sbrk_aligned+0x34>
 800514e:	1cc4      	adds	r4, r0, #3
 8005150:	f024 0403 	bic.w	r4, r4, #3
 8005154:	42a0      	cmp	r0, r4
 8005156:	d007      	beq.n	8005168 <sbrk_aligned+0x38>
 8005158:	1a21      	subs	r1, r4, r0
 800515a:	4628      	mov	r0, r5
 800515c:	f000 f8ac 	bl	80052b8 <_sbrk_r>
 8005160:	3001      	adds	r0, #1
 8005162:	d101      	bne.n	8005168 <sbrk_aligned+0x38>
 8005164:	f04f 34ff 	mov.w	r4, #4294967295
 8005168:	4620      	mov	r0, r4
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	20001c58 	.word	0x20001c58

08005170 <_malloc_r>:
 8005170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005174:	1ccd      	adds	r5, r1, #3
 8005176:	f025 0503 	bic.w	r5, r5, #3
 800517a:	3508      	adds	r5, #8
 800517c:	2d0c      	cmp	r5, #12
 800517e:	bf38      	it	cc
 8005180:	250c      	movcc	r5, #12
 8005182:	2d00      	cmp	r5, #0
 8005184:	4607      	mov	r7, r0
 8005186:	db01      	blt.n	800518c <_malloc_r+0x1c>
 8005188:	42a9      	cmp	r1, r5
 800518a:	d905      	bls.n	8005198 <_malloc_r+0x28>
 800518c:	230c      	movs	r3, #12
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	2600      	movs	r6, #0
 8005192:	4630      	mov	r0, r6
 8005194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005198:	4e2e      	ldr	r6, [pc, #184]	; (8005254 <_malloc_r+0xe4>)
 800519a:	f000 f89d 	bl	80052d8 <__malloc_lock>
 800519e:	6833      	ldr	r3, [r6, #0]
 80051a0:	461c      	mov	r4, r3
 80051a2:	bb34      	cbnz	r4, 80051f2 <_malloc_r+0x82>
 80051a4:	4629      	mov	r1, r5
 80051a6:	4638      	mov	r0, r7
 80051a8:	f7ff ffc2 	bl	8005130 <sbrk_aligned>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	4604      	mov	r4, r0
 80051b0:	d14d      	bne.n	800524e <_malloc_r+0xde>
 80051b2:	6834      	ldr	r4, [r6, #0]
 80051b4:	4626      	mov	r6, r4
 80051b6:	2e00      	cmp	r6, #0
 80051b8:	d140      	bne.n	800523c <_malloc_r+0xcc>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	4631      	mov	r1, r6
 80051be:	4638      	mov	r0, r7
 80051c0:	eb04 0803 	add.w	r8, r4, r3
 80051c4:	f000 f878 	bl	80052b8 <_sbrk_r>
 80051c8:	4580      	cmp	r8, r0
 80051ca:	d13a      	bne.n	8005242 <_malloc_r+0xd2>
 80051cc:	6821      	ldr	r1, [r4, #0]
 80051ce:	3503      	adds	r5, #3
 80051d0:	1a6d      	subs	r5, r5, r1
 80051d2:	f025 0503 	bic.w	r5, r5, #3
 80051d6:	3508      	adds	r5, #8
 80051d8:	2d0c      	cmp	r5, #12
 80051da:	bf38      	it	cc
 80051dc:	250c      	movcc	r5, #12
 80051de:	4629      	mov	r1, r5
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7ff ffa5 	bl	8005130 <sbrk_aligned>
 80051e6:	3001      	adds	r0, #1
 80051e8:	d02b      	beq.n	8005242 <_malloc_r+0xd2>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	442b      	add	r3, r5
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	e00e      	b.n	8005210 <_malloc_r+0xa0>
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	1b52      	subs	r2, r2, r5
 80051f6:	d41e      	bmi.n	8005236 <_malloc_r+0xc6>
 80051f8:	2a0b      	cmp	r2, #11
 80051fa:	d916      	bls.n	800522a <_malloc_r+0xba>
 80051fc:	1961      	adds	r1, r4, r5
 80051fe:	42a3      	cmp	r3, r4
 8005200:	6025      	str	r5, [r4, #0]
 8005202:	bf18      	it	ne
 8005204:	6059      	strne	r1, [r3, #4]
 8005206:	6863      	ldr	r3, [r4, #4]
 8005208:	bf08      	it	eq
 800520a:	6031      	streq	r1, [r6, #0]
 800520c:	5162      	str	r2, [r4, r5]
 800520e:	604b      	str	r3, [r1, #4]
 8005210:	4638      	mov	r0, r7
 8005212:	f104 060b 	add.w	r6, r4, #11
 8005216:	f000 f865 	bl	80052e4 <__malloc_unlock>
 800521a:	f026 0607 	bic.w	r6, r6, #7
 800521e:	1d23      	adds	r3, r4, #4
 8005220:	1af2      	subs	r2, r6, r3
 8005222:	d0b6      	beq.n	8005192 <_malloc_r+0x22>
 8005224:	1b9b      	subs	r3, r3, r6
 8005226:	50a3      	str	r3, [r4, r2]
 8005228:	e7b3      	b.n	8005192 <_malloc_r+0x22>
 800522a:	6862      	ldr	r2, [r4, #4]
 800522c:	42a3      	cmp	r3, r4
 800522e:	bf0c      	ite	eq
 8005230:	6032      	streq	r2, [r6, #0]
 8005232:	605a      	strne	r2, [r3, #4]
 8005234:	e7ec      	b.n	8005210 <_malloc_r+0xa0>
 8005236:	4623      	mov	r3, r4
 8005238:	6864      	ldr	r4, [r4, #4]
 800523a:	e7b2      	b.n	80051a2 <_malloc_r+0x32>
 800523c:	4634      	mov	r4, r6
 800523e:	6876      	ldr	r6, [r6, #4]
 8005240:	e7b9      	b.n	80051b6 <_malloc_r+0x46>
 8005242:	230c      	movs	r3, #12
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4638      	mov	r0, r7
 8005248:	f000 f84c 	bl	80052e4 <__malloc_unlock>
 800524c:	e7a1      	b.n	8005192 <_malloc_r+0x22>
 800524e:	6025      	str	r5, [r4, #0]
 8005250:	e7de      	b.n	8005210 <_malloc_r+0xa0>
 8005252:	bf00      	nop
 8005254:	20001c54 	.word	0x20001c54

08005258 <_realloc_r>:
 8005258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525c:	4680      	mov	r8, r0
 800525e:	4614      	mov	r4, r2
 8005260:	460e      	mov	r6, r1
 8005262:	b921      	cbnz	r1, 800526e <_realloc_r+0x16>
 8005264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005268:	4611      	mov	r1, r2
 800526a:	f7ff bf81 	b.w	8005170 <_malloc_r>
 800526e:	b92a      	cbnz	r2, 800527c <_realloc_r+0x24>
 8005270:	f7ff ff12 	bl	8005098 <_free_r>
 8005274:	4625      	mov	r5, r4
 8005276:	4628      	mov	r0, r5
 8005278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800527c:	f000 f838 	bl	80052f0 <_malloc_usable_size_r>
 8005280:	4284      	cmp	r4, r0
 8005282:	4607      	mov	r7, r0
 8005284:	d802      	bhi.n	800528c <_realloc_r+0x34>
 8005286:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800528a:	d812      	bhi.n	80052b2 <_realloc_r+0x5a>
 800528c:	4621      	mov	r1, r4
 800528e:	4640      	mov	r0, r8
 8005290:	f7ff ff6e 	bl	8005170 <_malloc_r>
 8005294:	4605      	mov	r5, r0
 8005296:	2800      	cmp	r0, #0
 8005298:	d0ed      	beq.n	8005276 <_realloc_r+0x1e>
 800529a:	42bc      	cmp	r4, r7
 800529c:	4622      	mov	r2, r4
 800529e:	4631      	mov	r1, r6
 80052a0:	bf28      	it	cs
 80052a2:	463a      	movcs	r2, r7
 80052a4:	f7ff fed0 	bl	8005048 <memcpy>
 80052a8:	4631      	mov	r1, r6
 80052aa:	4640      	mov	r0, r8
 80052ac:	f7ff fef4 	bl	8005098 <_free_r>
 80052b0:	e7e1      	b.n	8005276 <_realloc_r+0x1e>
 80052b2:	4635      	mov	r5, r6
 80052b4:	e7df      	b.n	8005276 <_realloc_r+0x1e>
	...

080052b8 <_sbrk_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d06      	ldr	r5, [pc, #24]	; (80052d4 <_sbrk_r+0x1c>)
 80052bc:	2300      	movs	r3, #0
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	f7fc f8b0 	bl	8001428 <_sbrk>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_sbrk_r+0x1a>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_sbrk_r+0x1a>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	20001c5c 	.word	0x20001c5c

080052d8 <__malloc_lock>:
 80052d8:	4801      	ldr	r0, [pc, #4]	; (80052e0 <__malloc_lock+0x8>)
 80052da:	f000 b811 	b.w	8005300 <__retarget_lock_acquire_recursive>
 80052de:	bf00      	nop
 80052e0:	20001c60 	.word	0x20001c60

080052e4 <__malloc_unlock>:
 80052e4:	4801      	ldr	r0, [pc, #4]	; (80052ec <__malloc_unlock+0x8>)
 80052e6:	f000 b80c 	b.w	8005302 <__retarget_lock_release_recursive>
 80052ea:	bf00      	nop
 80052ec:	20001c60 	.word	0x20001c60

080052f0 <_malloc_usable_size_r>:
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f18      	subs	r0, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfbc      	itt	lt
 80052fa:	580b      	ldrlt	r3, [r1, r0]
 80052fc:	18c0      	addlt	r0, r0, r3
 80052fe:	4770      	bx	lr

08005300 <__retarget_lock_acquire_recursive>:
 8005300:	4770      	bx	lr

08005302 <__retarget_lock_release_recursive>:
 8005302:	4770      	bx	lr

08005304 <_init>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr

08005310 <_fini>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr
