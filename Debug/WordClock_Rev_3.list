
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08008888  08008888  00009888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb8  08008eb8  0000a0d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008eb8  08008eb8  00009eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ec0  08008ec0  0000a0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ec0  08008ec0  00009ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ec4  08008ec4  00009ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08008ec8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e8  200000d8  08008fa0  0000a0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00010400  200025c0  08008fa0  0000a5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102f9  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037af  00000000  00000000  0001a401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd6  00000000  00000000  0001eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb75  00000000  00000000  0001f756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001798f  00000000  00000000  0003b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095cfb  00000000  00000000  00052c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  000e8998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ed34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008870 	.word	0x08008870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	08008870 	.word	0x08008870

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf0c      	ite	eq
 8000d60:	2301      	moveq	r3, #1
 8000d62:	2300      	movne	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4830      	ldr	r0, [pc, #192]	@ (8000e2c <setSegments+0xe0>)
 8000d6c:	f003 ffe2 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bf0c      	ite	eq
 8000d7a:	2301      	moveq	r3, #1
 8000d7c:	2300      	movne	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	2101      	movs	r1, #1
 8000d84:	4829      	ldr	r0, [pc, #164]	@ (8000e2c <setSegments+0xe0>)
 8000d86:	f003 ffd5 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2108      	movs	r1, #8
 8000d9e:	4823      	ldr	r0, [pc, #140]	@ (8000e2c <setSegments+0xe0>)
 8000da0:	f003 ffc8 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf0c      	ite	eq
 8000dae:	2301      	moveq	r3, #1
 8000db0:	2300      	movne	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	2104      	movs	r1, #4
 8000db8:	481d      	ldr	r0, [pc, #116]	@ (8000e30 <setSegments+0xe4>)
 8000dba:	f003 ffbb 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4817      	ldr	r0, [pc, #92]	@ (8000e30 <setSegments+0xe4>)
 8000dd4:	f003 ffae 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 0320 	and.w	r3, r3, #32
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	bf0c      	ite	eq
 8000de2:	2301      	moveq	r3, #1
 8000de4:	2300      	movne	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	2110      	movs	r1, #16
 8000dec:	480f      	ldr	r0, [pc, #60]	@ (8000e2c <setSegments+0xe0>)
 8000dee:	f003 ffa1 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	2102      	movs	r1, #2
 8000e06:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <setSegments+0xe0>)
 8000e08:	f003 ff94 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	09db      	lsrs	r3, r3, #7
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2140      	movs	r1, #64	@ 0x40
 8000e1c:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <setSegments+0xe0>)
 8000e1e:	f003 ff89 	bl	8004d34 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400

08000e34 <wipeSegments>:

void wipeSegments(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <wipeSegments+0x58>)
 8000e3e:	f003 ff79 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2101      	movs	r1, #1
 8000e46:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <wipeSegments+0x58>)
 8000e48:	f003 ff74 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2108      	movs	r1, #8
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <wipeSegments+0x58>)
 8000e52:	f003 ff6f 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2104      	movs	r1, #4
 8000e5a:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <wipeSegments+0x5c>)
 8000e5c:	f003 ff6a 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2101      	movs	r1, #1
 8000e64:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <wipeSegments+0x5c>)
 8000e66:	f003 ff65 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <wipeSegments+0x58>)
 8000e70:	f003 ff60 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2102      	movs	r1, #2
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <wipeSegments+0x58>)
 8000e7a:	f003 ff5b 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2140      	movs	r1, #64	@ 0x40
 8000e82:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <wipeSegments+0x58>)
 8000e84:	f003 ff56 	bl	8004d34 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400

08000e94 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb0:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <activateDigit+0x84>)
 8000eb2:	f003 ff3f 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ec8:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <activateDigit+0x84>)
 8000eca:	f003 ff33 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2301      	moveq	r3, #1
 8000ed6:	2300      	movne	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	480f      	ldr	r0, [pc, #60]	@ (8000f1c <activateDigit+0x88>)
 8000ee0:	f003 ff28 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <activateDigit+0x88>)
 8000ef6:	f003 ff1d 	bl	8004d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <activateDigit+0x84>)
 8000f0c:	f003 ff12 	bl	8004d34 <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020000 	.word	0x40020000

08000f20 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fc41 	bl	80077b8 <strncpy>
    truncatedInput[4] = '\0';
 8000f36:	2300      	movs	r3, #0
 8000f38:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e1af      	b.n	80012a0 <Segment_Display+0x380>
        activateDigit(i + 1);
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffa4 	bl	8000e94 <activateDigit>

		char ch = truncatedInput[i];
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	3310      	adds	r3, #16
 8000f50:	443b      	add	r3, r7
 8000f52:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000f56:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f5c:	f200 8195 	bhi.w	800128a <Segment_Display+0x36a>
 8000f60:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <Segment_Display+0x48>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08001155 	.word	0x08001155
 8000f6c:	0800128b 	.word	0x0800128b
 8000f70:	0800128b 	.word	0x0800128b
 8000f74:	0800128b 	.word	0x0800128b
 8000f78:	0800128b 	.word	0x0800128b
 8000f7c:	0800128b 	.word	0x0800128b
 8000f80:	0800128b 	.word	0x0800128b
 8000f84:	0800128b 	.word	0x0800128b
 8000f88:	0800128b 	.word	0x0800128b
 8000f8c:	0800128b 	.word	0x0800128b
 8000f90:	0800128b 	.word	0x0800128b
 8000f94:	0800128b 	.word	0x0800128b
 8000f98:	0800128b 	.word	0x0800128b
 8000f9c:	0800128b 	.word	0x0800128b
 8000fa0:	0800128b 	.word	0x0800128b
 8000fa4:	0800128b 	.word	0x0800128b
 8000fa8:	0800128b 	.word	0x0800128b
 8000fac:	0800128b 	.word	0x0800128b
 8000fb0:	0800128b 	.word	0x0800128b
 8000fb4:	0800128b 	.word	0x0800128b
 8000fb8:	0800128b 	.word	0x0800128b
 8000fbc:	0800128b 	.word	0x0800128b
 8000fc0:	0800128b 	.word	0x0800128b
 8000fc4:	0800128b 	.word	0x0800128b
 8000fc8:	0800128b 	.word	0x0800128b
 8000fcc:	0800128b 	.word	0x0800128b
 8000fd0:	0800128b 	.word	0x0800128b
 8000fd4:	0800128b 	.word	0x0800128b
 8000fd8:	0800128b 	.word	0x0800128b
 8000fdc:	0800128b 	.word	0x0800128b
 8000fe0:	0800128b 	.word	0x0800128b
 8000fe4:	0800128b 	.word	0x0800128b
 8000fe8:	0800127b 	.word	0x0800127b
 8000fec:	0800128b 	.word	0x0800128b
 8000ff0:	0800128b 	.word	0x0800128b
 8000ff4:	0800128b 	.word	0x0800128b
 8000ff8:	0800128b 	.word	0x0800128b
 8000ffc:	0800128b 	.word	0x0800128b
 8001000:	0800128b 	.word	0x0800128b
 8001004:	0800128b 	.word	0x0800128b
 8001008:	0800128b 	.word	0x0800128b
 800100c:	0800128b 	.word	0x0800128b
 8001010:	0800128b 	.word	0x0800128b
 8001014:	0800128b 	.word	0x0800128b
 8001018:	0800128b 	.word	0x0800128b
 800101c:	08001283 	.word	0x08001283
 8001020:	0800128b 	.word	0x0800128b
 8001024:	0800128b 	.word	0x0800128b
 8001028:	0800115b 	.word	0x0800115b
 800102c:	08001163 	.word	0x08001163
 8001030:	0800116b 	.word	0x0800116b
 8001034:	08001173 	.word	0x08001173
 8001038:	0800117b 	.word	0x0800117b
 800103c:	08001183 	.word	0x08001183
 8001040:	0800118b 	.word	0x0800118b
 8001044:	08001193 	.word	0x08001193
 8001048:	0800119b 	.word	0x0800119b
 800104c:	080011a3 	.word	0x080011a3
 8001050:	0800128b 	.word	0x0800128b
 8001054:	0800128b 	.word	0x0800128b
 8001058:	0800128b 	.word	0x0800128b
 800105c:	0800128b 	.word	0x0800128b
 8001060:	0800128b 	.word	0x0800128b
 8001064:	0800128b 	.word	0x0800128b
 8001068:	0800128b 	.word	0x0800128b
 800106c:	080011ab 	.word	0x080011ab
 8001070:	080011b3 	.word	0x080011b3
 8001074:	080011bb 	.word	0x080011bb
 8001078:	080011c3 	.word	0x080011c3
 800107c:	080011cb 	.word	0x080011cb
 8001080:	080011d3 	.word	0x080011d3
 8001084:	080011db 	.word	0x080011db
 8001088:	080011e3 	.word	0x080011e3
 800108c:	080011eb 	.word	0x080011eb
 8001090:	080011f3 	.word	0x080011f3
 8001094:	080011fb 	.word	0x080011fb
 8001098:	08001203 	.word	0x08001203
 800109c:	0800120b 	.word	0x0800120b
 80010a0:	08001213 	.word	0x08001213
 80010a4:	0800121b 	.word	0x0800121b
 80010a8:	08001223 	.word	0x08001223
 80010ac:	0800122b 	.word	0x0800122b
 80010b0:	08001233 	.word	0x08001233
 80010b4:	0800123b 	.word	0x0800123b
 80010b8:	08001243 	.word	0x08001243
 80010bc:	0800124b 	.word	0x0800124b
 80010c0:	08001253 	.word	0x08001253
 80010c4:	0800125b 	.word	0x0800125b
 80010c8:	08001263 	.word	0x08001263
 80010cc:	0800126b 	.word	0x0800126b
 80010d0:	08001273 	.word	0x08001273
 80010d4:	0800128b 	.word	0x0800128b
 80010d8:	0800128b 	.word	0x0800128b
 80010dc:	0800128b 	.word	0x0800128b
 80010e0:	0800128b 	.word	0x0800128b
 80010e4:	0800128b 	.word	0x0800128b
 80010e8:	0800128b 	.word	0x0800128b
 80010ec:	080011ab 	.word	0x080011ab
 80010f0:	080011b3 	.word	0x080011b3
 80010f4:	080011bb 	.word	0x080011bb
 80010f8:	080011c3 	.word	0x080011c3
 80010fc:	080011cb 	.word	0x080011cb
 8001100:	080011d3 	.word	0x080011d3
 8001104:	080011db 	.word	0x080011db
 8001108:	080011e3 	.word	0x080011e3
 800110c:	080011eb 	.word	0x080011eb
 8001110:	080011f3 	.word	0x080011f3
 8001114:	080011fb 	.word	0x080011fb
 8001118:	08001203 	.word	0x08001203
 800111c:	0800120b 	.word	0x0800120b
 8001120:	08001213 	.word	0x08001213
 8001124:	0800121b 	.word	0x0800121b
 8001128:	08001223 	.word	0x08001223
 800112c:	0800122b 	.word	0x0800122b
 8001130:	08001233 	.word	0x08001233
 8001134:	0800123b 	.word	0x0800123b
 8001138:	08001243 	.word	0x08001243
 800113c:	0800124b 	.word	0x0800124b
 8001140:	08001253 	.word	0x08001253
 8001144:	0800125b 	.word	0x0800125b
 8001148:	08001263 	.word	0x08001263
 800114c:	0800126b 	.word	0x0800126b
 8001150:	08001273 	.word	0x08001273
        	case '\0':
        		wipeSegments();
 8001154:	f7ff fe6e 	bl	8000e34 <wipeSegments>
        		return;
 8001158:	e0a6      	b.n	80012a8 <Segment_Display+0x388>
            case '0':
                setSegments(0x3F);
 800115a:	203f      	movs	r0, #63	@ 0x3f
 800115c:	f7ff fdf6 	bl	8000d4c <setSegments>
                break;
 8001160:	e096      	b.n	8001290 <Segment_Display+0x370>
            case '1':
                setSegments(0x06);
 8001162:	2006      	movs	r0, #6
 8001164:	f7ff fdf2 	bl	8000d4c <setSegments>
                break;
 8001168:	e092      	b.n	8001290 <Segment_Display+0x370>
            case '2':
                setSegments(0x5B);
 800116a:	205b      	movs	r0, #91	@ 0x5b
 800116c:	f7ff fdee 	bl	8000d4c <setSegments>
                break;
 8001170:	e08e      	b.n	8001290 <Segment_Display+0x370>
            case '3':
                setSegments(0x4F);
 8001172:	204f      	movs	r0, #79	@ 0x4f
 8001174:	f7ff fdea 	bl	8000d4c <setSegments>
                break;
 8001178:	e08a      	b.n	8001290 <Segment_Display+0x370>
            case '4':
                setSegments(0x66);
 800117a:	2066      	movs	r0, #102	@ 0x66
 800117c:	f7ff fde6 	bl	8000d4c <setSegments>
                break;
 8001180:	e086      	b.n	8001290 <Segment_Display+0x370>
            case '5':
                setSegments(0x6D);
 8001182:	206d      	movs	r0, #109	@ 0x6d
 8001184:	f7ff fde2 	bl	8000d4c <setSegments>
                break;
 8001188:	e082      	b.n	8001290 <Segment_Display+0x370>
            case '6':
                setSegments(0x7D);
 800118a:	207d      	movs	r0, #125	@ 0x7d
 800118c:	f7ff fdde 	bl	8000d4c <setSegments>
                break;
 8001190:	e07e      	b.n	8001290 <Segment_Display+0x370>
            case '7':
                setSegments(0x07);
 8001192:	2007      	movs	r0, #7
 8001194:	f7ff fdda 	bl	8000d4c <setSegments>
                break;
 8001198:	e07a      	b.n	8001290 <Segment_Display+0x370>
            case '8':
                setSegments(0x7F);
 800119a:	207f      	movs	r0, #127	@ 0x7f
 800119c:	f7ff fdd6 	bl	8000d4c <setSegments>
                break;
 80011a0:	e076      	b.n	8001290 <Segment_Display+0x370>
            case '9':
                setSegments(0x6F);
 80011a2:	206f      	movs	r0, #111	@ 0x6f
 80011a4:	f7ff fdd2 	bl	8000d4c <setSegments>
                break;
 80011a8:	e072      	b.n	8001290 <Segment_Display+0x370>
            case 'a':
            case 'A':
                setSegments(0x77);
 80011aa:	2077      	movs	r0, #119	@ 0x77
 80011ac:	f7ff fdce 	bl	8000d4c <setSegments>
                break;
 80011b0:	e06e      	b.n	8001290 <Segment_Display+0x370>
            case 'b':
            case 'B':
                setSegments(0x7C);
 80011b2:	207c      	movs	r0, #124	@ 0x7c
 80011b4:	f7ff fdca 	bl	8000d4c <setSegments>
                break;
 80011b8:	e06a      	b.n	8001290 <Segment_Display+0x370>
            case 'c':
            case 'C':
                setSegments(0x39);
 80011ba:	2039      	movs	r0, #57	@ 0x39
 80011bc:	f7ff fdc6 	bl	8000d4c <setSegments>
                break;
 80011c0:	e066      	b.n	8001290 <Segment_Display+0x370>
            case 'd':
            case 'D':
                setSegments(0x5E);
 80011c2:	205e      	movs	r0, #94	@ 0x5e
 80011c4:	f7ff fdc2 	bl	8000d4c <setSegments>
                break;
 80011c8:	e062      	b.n	8001290 <Segment_Display+0x370>
            case 'e':
            case 'E':
                setSegments(0x79);
 80011ca:	2079      	movs	r0, #121	@ 0x79
 80011cc:	f7ff fdbe 	bl	8000d4c <setSegments>
                break;
 80011d0:	e05e      	b.n	8001290 <Segment_Display+0x370>
            case 'f':
            case 'F':
                setSegments(0x71);
 80011d2:	2071      	movs	r0, #113	@ 0x71
 80011d4:	f7ff fdba 	bl	8000d4c <setSegments>
                break;
 80011d8:	e05a      	b.n	8001290 <Segment_Display+0x370>
            case 'g':
            case 'G':
                setSegments(0x3D);
 80011da:	203d      	movs	r0, #61	@ 0x3d
 80011dc:	f7ff fdb6 	bl	8000d4c <setSegments>
                break;
 80011e0:	e056      	b.n	8001290 <Segment_Display+0x370>
            case 'h':
            case 'H':
                setSegments(0x76);
 80011e2:	2076      	movs	r0, #118	@ 0x76
 80011e4:	f7ff fdb2 	bl	8000d4c <setSegments>
                break;
 80011e8:	e052      	b.n	8001290 <Segment_Display+0x370>
            case 'i':
            case 'I':
                setSegments(0x30);
 80011ea:	2030      	movs	r0, #48	@ 0x30
 80011ec:	f7ff fdae 	bl	8000d4c <setSegments>
                break;
 80011f0:	e04e      	b.n	8001290 <Segment_Display+0x370>
            case 'j':
            case 'J':
                setSegments(0x1E);
 80011f2:	201e      	movs	r0, #30
 80011f4:	f7ff fdaa 	bl	8000d4c <setSegments>
                break;
 80011f8:	e04a      	b.n	8001290 <Segment_Display+0x370>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 80011fa:	2076      	movs	r0, #118	@ 0x76
 80011fc:	f7ff fda6 	bl	8000d4c <setSegments>
                break;
 8001200:	e046      	b.n	8001290 <Segment_Display+0x370>
            case 'l':
            case 'L':
                setSegments(0x38);
 8001202:	2038      	movs	r0, #56	@ 0x38
 8001204:	f7ff fda2 	bl	8000d4c <setSegments>
                break;
 8001208:	e042      	b.n	8001290 <Segment_Display+0x370>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 800120a:	2037      	movs	r0, #55	@ 0x37
 800120c:	f7ff fd9e 	bl	8000d4c <setSegments>
                break;
 8001210:	e03e      	b.n	8001290 <Segment_Display+0x370>
            case 'n':
            case 'N':
                setSegments(0x54);
 8001212:	2054      	movs	r0, #84	@ 0x54
 8001214:	f7ff fd9a 	bl	8000d4c <setSegments>
                break;
 8001218:	e03a      	b.n	8001290 <Segment_Display+0x370>
            case 'o':
            case 'O':
                setSegments(0x3F);
 800121a:	203f      	movs	r0, #63	@ 0x3f
 800121c:	f7ff fd96 	bl	8000d4c <setSegments>
                break;
 8001220:	e036      	b.n	8001290 <Segment_Display+0x370>
            case 'p':
            case 'P':
                setSegments(0x73);
 8001222:	2073      	movs	r0, #115	@ 0x73
 8001224:	f7ff fd92 	bl	8000d4c <setSegments>
                break;
 8001228:	e032      	b.n	8001290 <Segment_Display+0x370>
            case 'q':
            case 'Q':
                setSegments(0x67);
 800122a:	2067      	movs	r0, #103	@ 0x67
 800122c:	f7ff fd8e 	bl	8000d4c <setSegments>
                break;
 8001230:	e02e      	b.n	8001290 <Segment_Display+0x370>
            case 'r':
            case 'R':
                setSegments(0x50);
 8001232:	2050      	movs	r0, #80	@ 0x50
 8001234:	f7ff fd8a 	bl	8000d4c <setSegments>
                break;
 8001238:	e02a      	b.n	8001290 <Segment_Display+0x370>
            case 's':
            case 'S':
                setSegments(0x6D);
 800123a:	206d      	movs	r0, #109	@ 0x6d
 800123c:	f7ff fd86 	bl	8000d4c <setSegments>
                break;
 8001240:	e026      	b.n	8001290 <Segment_Display+0x370>
            case 't':
            case 'T':
                setSegments(0x78);
 8001242:	2078      	movs	r0, #120	@ 0x78
 8001244:	f7ff fd82 	bl	8000d4c <setSegments>
                break;
 8001248:	e022      	b.n	8001290 <Segment_Display+0x370>
            case 'u':
            case 'U':
                setSegments(0x3E);
 800124a:	203e      	movs	r0, #62	@ 0x3e
 800124c:	f7ff fd7e 	bl	8000d4c <setSegments>
                break;
 8001250:	e01e      	b.n	8001290 <Segment_Display+0x370>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8001252:	203e      	movs	r0, #62	@ 0x3e
 8001254:	f7ff fd7a 	bl	8000d4c <setSegments>
                break;
 8001258:	e01a      	b.n	8001290 <Segment_Display+0x370>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 800125a:	202a      	movs	r0, #42	@ 0x2a
 800125c:	f7ff fd76 	bl	8000d4c <setSegments>
                break;
 8001260:	e016      	b.n	8001290 <Segment_Display+0x370>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8001262:	2076      	movs	r0, #118	@ 0x76
 8001264:	f7ff fd72 	bl	8000d4c <setSegments>
                break;
 8001268:	e012      	b.n	8001290 <Segment_Display+0x370>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 800126a:	206e      	movs	r0, #110	@ 0x6e
 800126c:	f7ff fd6e 	bl	8000d4c <setSegments>
                break;
 8001270:	e00e      	b.n	8001290 <Segment_Display+0x370>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8001272:	205b      	movs	r0, #91	@ 0x5b
 8001274:	f7ff fd6a 	bl	8000d4c <setSegments>
                break;
 8001278:	e00a      	b.n	8001290 <Segment_Display+0x370>
            case ' ':
                // Blank character
                setSegments(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fd66 	bl	8000d4c <setSegments>
                break;
 8001280:	e006      	b.n	8001290 <Segment_Display+0x370>
            case '-':
            	setSegments(0x04);
 8001282:	2004      	movs	r0, #4
 8001284:	f7ff fd62 	bl	8000d4c <setSegments>
            	break;
 8001288:	e002      	b.n	8001290 <Segment_Display+0x370>
            default:
            	wipeSegments();
 800128a:	f7ff fdd3 	bl	8000e34 <wipeSegments>
                break;
 800128e:	bf00      	nop
        }
        HAL_Delay(2);
 8001290:	2002      	movs	r0, #2
 8001292:	f002 feeb 	bl	800406c <HAL_Delay>
        wipeSegments();
 8001296:	f7ff fdcd 	bl	8000e34 <wipeSegments>
    for(uint8_t i = 0; i < 4; i++) {
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	3301      	adds	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	f67f ae4c 	bls.w	8000f40 <Segment_Display+0x20>
    }
}
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop

080012b0 <turnOnLED>:
/**
 * @brief   Turns on an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn on.
 */
void turnOnLED(LED *frame, uint8_t index) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
	frame[index].on = true;
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	2201      	movs	r2, #1
 80012ca:	711a      	strb	r2, [r3, #4]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <turnOffLED>:
/**
 * @brief   Turns off an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn off.
 */
void turnOffLED(LED *frame, uint8_t index) {
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	frame[index].on = false;
 80012e4:	78fa      	ldrb	r2, [r7, #3]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	2200      	movs	r2, #0
 80012f2:	711a      	strb	r2, [r3, #4]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <getLEDsWithEffect>:
 * @param   arr Pointer to an array for storing indices of lit LEDs.
 *            This array should be preallocated by the caller.
 *
 * @return  Number of lit LEDs found. This value represents the size of the updated array.
 */
uint8_t getLEDsWithEffect(uint8_t *result, LED *display, Effect effect) {
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	4613      	mov	r3, r2
 800130c:	71fb      	strb	r3, [r7, #7]

    uint32_t index = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	e015      	b.n	8001344 <getLEDsWithEffect+0x44>
    	if(display[i].effect == effect) {
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	4413      	add	r3, r2
 8001324:	78db      	ldrb	r3, [r3, #3]
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	429a      	cmp	r2, r3
 800132a:	d108      	bne.n	800133e <getLEDsWithEffect+0x3e>
    		result[index] = i;
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	701a      	strb	r2, [r3, #0]
            index++;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	3301      	adds	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b8e      	cmp	r3, #142	@ 0x8e
 8001348:	dde6      	ble.n	8001318 <getLEDsWithEffect+0x18>
    	}
    }

    return index++;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	617a      	str	r2, [r7, #20]
 8001350:	b2db      	uxtb	r3, r3
}
 8001352:	4618      	mov	r0, r3
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <removeLED>:

void removeLED(LED *frame, uint8_t index) {
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	70fb      	strb	r3, [r7, #3]
	frame[index].blue = 0;
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	2200      	movs	r2, #0
 8001378:	709a      	strb	r2, [r3, #2]
	frame[index].red = 0;
 800137a:	78fa      	ldrb	r2, [r7, #3]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
	frame[index].green = 0;
 800138a:	78fa      	ldrb	r2, [r7, #3]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	2200      	movs	r2, #0
 8001398:	705a      	strb	r2, [r3, #1]
	frame[index].effect = NONE;
 800139a:	78fa      	ldrb	r2, [r7, #3]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	70da      	strb	r2, [r3, #3]
	frame[index].on = false;
 80013aa:	78fa      	ldrb	r2, [r7, #3]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	2200      	movs	r2, #0
 80013b8:	711a      	strb	r2, [r3, #4]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <wipePWMBuffer>:
 * @brief Converts a bitmap to PWM data for WS2812B LEDs.
 *
 * Wipes PWM Buffer by filling it with user defined ZERO PWM values.
 *
 */
void wipePWMBuffer(void) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e007      	b.n	80013e4 <wipePWMBuffer+0x1c>
        pwmBuffer[i] = ZERO;
 80013d4:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <wipePWMBuffer+0x58>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	211b      	movs	r1, #27
 80013da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3301      	adds	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f640 5299 	movw	r2, #3481	@ 0xd99
 80013ea:	4293      	cmp	r3, r2
 80013ec:	ddf2      	ble.n	80013d4 <wipePWMBuffer+0xc>
    }

    for(int i = MATRIX_SIZE * 24; i < PWM_ARRAY_SIZE; i++) {
 80013ee:	f640 5368 	movw	r3, #3432	@ 0xd68
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	e007      	b.n	8001406 <wipePWMBuffer+0x3e>
        pwmBuffer[i] = RESET;
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <wipePWMBuffer+0x58>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = MATRIX_SIZE * 24; i < PWM_ARRAY_SIZE; i++) {
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f640 5299 	movw	r2, #3481	@ 0xd99
 800140c:	4293      	cmp	r3, r2
 800140e:	ddf2      	ble.n	80013f6 <wipePWMBuffer+0x2e>
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200000f8 	.word	0x200000f8

08001424 <updatePwmBuffer>:
 * (green, red, blue) order.
 *
 * @note    The PWM buffer must be appropriately sized to accommodate the
 *          LED data. Each LED requires 24 bits in the PWM buffer.
 */
void updatePwmBuffer(LED *currentFrame) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

    wipePWMBuffer();
 800142c:	f7ff ffcc 	bl	80013c8 <wipePWMBuffer>

    for(int ledNumber = 0 ; ledNumber < MATRIX_SIZE; ledNumber++) {
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e067      	b.n	8001506 <updatePwmBuffer+0xe2>

        if(!currentFrame[ledNumber].on) {
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d157      	bne.n	80014fe <updatePwmBuffer+0xda>
            continue;
        }


        uint8_t red     = currentFrame[ledNumber].red;
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	73fb      	strb	r3, [r7, #15]
        uint8_t green   = currentFrame[ledNumber].green;
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	785b      	ldrb	r3, [r3, #1]
 800146c:	73bb      	strb	r3, [r7, #14]
        uint8_t blue    = currentFrame[ledNumber].blue;
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	737b      	strb	r3, [r7, #13]
        uint32_t arrayIndex = ledNumber * 24;
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	60bb      	str	r3, [r7, #8]

        // ws2812b is GRB, so we swap the positions of red and green
        for(int bit = 0; bit < 8; bit++) {
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	e032      	b.n	80014f6 <updatePwmBuffer+0xd2>

            if(blue & (1 << bit)) {
 8001490:	7b7a      	ldrb	r2, [r7, #13]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa42 f303 	asr.w	r3, r2, r3
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <updatePwmBuffer+0x8c>
                pwmBuffer[arrayIndex + 16 + (7 - bit)] = ONE;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	3317      	adds	r3, #23
 80014a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001518 <updatePwmBuffer+0xf4>)
 80014aa:	2136      	movs	r1, #54	@ 0x36
 80014ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(red & (1 << bit)) {
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	fa42 f303 	asr.w	r3, r2, r3
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <updatePwmBuffer+0xac>
                pwmBuffer[arrayIndex + 8 + (7 - bit)] = ONE;
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	330f      	adds	r3, #15
 80014c8:	4a13      	ldr	r2, [pc, #76]	@ (8001518 <updatePwmBuffer+0xf4>)
 80014ca:	2136      	movs	r1, #54	@ 0x36
 80014cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(green & (1 << bit)) {
 80014d0:	7bba      	ldrb	r2, [r7, #14]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	fa42 f303 	asr.w	r3, r2, r3
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <updatePwmBuffer+0xcc>
                pwmBuffer[arrayIndex + (7 - bit)] = ONE;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	3307      	adds	r3, #7
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <updatePwmBuffer+0xf4>)
 80014ea:	2136      	movs	r1, #54	@ 0x36
 80014ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(int bit = 0; bit < 8; bit++) {
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	3301      	adds	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	ddc9      	ble.n	8001490 <updatePwmBuffer+0x6c>
 80014fc:	e000      	b.n	8001500 <updatePwmBuffer+0xdc>
            continue;
 80014fe:	bf00      	nop
    for(int ledNumber = 0 ; ledNumber < MATRIX_SIZE; ledNumber++) {
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b8e      	cmp	r3, #142	@ 0x8e
 800150a:	dd94      	ble.n	8001436 <updatePwmBuffer+0x12>
            }
        }

    }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000f8 	.word	0x200000f8

0800151c <DMA_Send>:


void DMA_Send() {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

	HAL_Delay(1);
 8001520:	2001      	movs	r0, #1
 8001522:	f002 fda3 	bl	800406c <HAL_Delay>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmBuffer, PWM_ARRAY_SIZE);
 8001526:	f640 539a 	movw	r3, #3482	@ 0xd9a
 800152a:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <DMA_Send+0x2c>)
 800152c:	2100      	movs	r1, #0
 800152e:	4807      	ldr	r0, [pc, #28]	@ (800154c <DMA_Send+0x30>)
 8001530:	f004 fce2 	bl	8005ef8 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 8001534:	bf00      	nop
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <DMA_Send+0x34>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0fb      	beq.n	8001536 <DMA_Send+0x1a>
	datasentflag = 0;
 800153e:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <DMA_Send+0x34>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200000f8 	.word	0x200000f8
 800154c:	20002368 	.word	0x20002368
 8001550:	200000f4 	.word	0x200000f4

08001554 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800155c:	2100      	movs	r1, #0
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f004 fe7a 	bl	8006258 <HAL_TIM_PWM_Stop_DMA>
    datasentflag = 1;
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200000f4 	.word	0x200000f4

08001578 <blink>:

uint32_t lastTickBlink = 0;
uint16_t blinkDelay = 375;
uint8_t timeOn = 263;

void blink(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b0ac      	sub	sp, #176	@ 0xb0
 800157c:	af00      	add	r7, sp, #0
    uint8_t leds[MATRIX_SIZE];
    uint32_t size = getLEDsWithEffect((uint8_t *) leds, (LED *) currentDisplay, BLINK);
 800157e:	463b      	mov	r3, r7
 8001580:	2204      	movs	r2, #4
 8001582:	493d      	ldr	r1, [pc, #244]	@ (8001678 <blink+0x100>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff febb 	bl	8001300 <getLEDsWithEffect>
 800158a:	4603      	mov	r3, r0
 800158c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    // Calculate total cycle time
    uint32_t totalCycleTime = timeOn + blinkDelay;
 8001590:	4b3a      	ldr	r3, [pc, #232]	@ (800167c <blink+0x104>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <blink+0x108>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    // Calculate on time and off time based on percentages
    uint32_t onTime = (70 * totalCycleTime) / 100;
 80015a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80015a4:	2246      	movs	r2, #70	@ 0x46
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4a36      	ldr	r2, [pc, #216]	@ (8001684 <blink+0x10c>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	095b      	lsrs	r3, r3, #5
 80015b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint32_t offTime = totalCycleTime - onTime;
 80015b6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80015ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    // Calculate current position in the cycle
    uint32_t currentTime = HAL_GetTick() - lastTickBlink;
 80015c4:	f002 fd46 	bl	8004054 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <blink+0x110>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint32_t cyclePosition = currentTime % totalCycleTime;
 80015d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80015dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80015e0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80015e4:	fb01 f202 	mul.w	r2, r1, r2
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    if (cyclePosition < onTime) {
 80015ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80015f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d218      	bcs.n	800162c <blink+0xb4>
        // LED should be on
        for (int i = 0; i < size; i++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001600:	e00d      	b.n	800161e <blink+0xa6>
            turnOnLED(currentDisplay, leds[i]);
 8001602:	463a      	mov	r2, r7
 8001604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	481a      	ldr	r0, [pc, #104]	@ (8001678 <blink+0x100>)
 8001610:	f7ff fe4e 	bl	80012b0 <turnOnLED>
        for (int i = 0; i < size; i++) {
 8001614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001618:	3301      	adds	r3, #1
 800161a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800161e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001622:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001626:	429a      	cmp	r2, r3
 8001628:	d8eb      	bhi.n	8001602 <blink+0x8a>
 800162a:	e017      	b.n	800165c <blink+0xe4>
        }
    } else {
        // LED should be off
        for (int i = 0; i < size; i++) {
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001632:	e00d      	b.n	8001650 <blink+0xd8>
            turnOffLED(currentDisplay, leds[i]);
 8001634:	463a      	mov	r2, r7
 8001636:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	480d      	ldr	r0, [pc, #52]	@ (8001678 <blink+0x100>)
 8001642:	f7ff fe49 	bl	80012d8 <turnOffLED>
        for (int i = 0; i < size; i++) {
 8001646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800164a:	3301      	adds	r3, #1
 800164c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001654:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001658:	429a      	cmp	r2, r3
 800165a:	d8eb      	bhi.n	8001634 <blink+0xbc>
        }
    }

    // Update last tick if a full cycle has passed
    if (cyclePosition == 0) {
 800165c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001660:	2b00      	cmp	r3, #0
 8001662:	d104      	bne.n	800166e <blink+0xf6>
        lastTickBlink = HAL_GetTick();
 8001664:	f002 fcf6 	bl	8004054 <HAL_GetTick>
 8001668:	4603      	mov	r3, r0
 800166a:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <blink+0x110>)
 800166c:	6013      	str	r3, [r2, #0]
    }
}
 800166e:	bf00      	nop
 8001670:	37b0      	adds	r7, #176	@ 0xb0
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20002054 	.word	0x20002054
 800167c:	20000002 	.word	0x20000002
 8001680:	20000000 	.word	0x20000000
 8001684:	51eb851f 	.word	0x51eb851f
 8001688:	20001c2c 	.word	0x20001c2c

0800168c <constant>:
 *  Created on: Apr 4, 2024
 *      Author: dsava
 */
#include "constant.h"

void constant(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b0a6      	sub	sp, #152	@ 0x98
 8001690:	af00      	add	r7, sp, #0

	uint8_t leds[MATRIX_SIZE];
	uint32_t size = getLEDsWithEffect((uint8_t *) leds, (LED *) currentDisplay, CONSTANT);
 8001692:	463b      	mov	r3, r7
 8001694:	2205      	movs	r2, #5
 8001696:	4912      	ldr	r1, [pc, #72]	@ (80016e0 <constant+0x54>)
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe31 	bl	8001300 <getLEDsWithEffect>
 800169e:	4603      	mov	r3, r0
 80016a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	for(int i = 0; i < size; i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016aa:	e00d      	b.n	80016c8 <constant+0x3c>
		turnOnLED(currentDisplay, leds[i]);
 80016ac:	463a      	mov	r2, r7
 80016ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <constant+0x54>)
 80016ba:	f7ff fdf9 	bl	80012b0 <turnOnLED>
	for(int i = 0; i < size; i++) {
 80016be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016c2:	3301      	adds	r3, #1
 80016c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8eb      	bhi.n	80016ac <constant+0x20>
	}

}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3798      	adds	r7, #152	@ 0x98
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20002054 	.word	0x20002054

080016e4 <flicker>:
FlickerState currentFlickerState = STATE_IDLE;
static RTC_TimeTypeDef previousDisplayedTime = {0}; // Initialize to some value
bool needToUpdateDisplay = true;
bool isFlickering = false;

void flicker(RTC_TimeTypeDef currentTime) {
 80016e4:	b084      	sub	sp, #16
 80016e6:	b5b0      	push	{r4, r5, r7, lr}
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	f107 0410 	add.w	r4, r7, #16
 80016ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	display_time(currentTime.Hours, currentTime.Minutes);
 80016f2:	7c3b      	ldrb	r3, [r7, #16]
 80016f4:	7c7a      	ldrb	r2, [r7, #17]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fd9f 	bl	800223c <display_time>

	if(displaysAreDifferent(FLICKER) && currentFlickerState != STATE_FLICKER_IN) {
 80016fe:	2002      	movs	r0, #2
 8001700:	f000 fbd0 	bl	8001ea4 <displaysAreDifferent>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <flicker+0x34>
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <flicker+0xb8>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d002      	beq.n	8001718 <flicker+0x34>
		currentFlickerState = STATE_FLICKER_OUT;
 8001712:	4b22      	ldr	r3, [pc, #136]	@ (800179c <flicker+0xb8>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
	}

    switch (currentFlickerState) {
 8001718:	4b20      	ldr	r3, [pc, #128]	@ (800179c <flicker+0xb8>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d017      	beq.n	8001750 <flicker+0x6c>
 8001720:	2b02      	cmp	r3, #2
 8001722:	dc2e      	bgt.n	8001782 <flicker+0x9e>
 8001724:	2b00      	cmp	r3, #0
 8001726:	d02e      	beq.n	8001786 <flicker+0xa2>
 8001728:	2b01      	cmp	r3, #1
 800172a:	d000      	beq.n	800172e <flicker+0x4a>
                currentFlickerState = STATE_IDLE;
                previousDisplayedTime = currentTime;
            }
            break;
        default:
        	break;
 800172c:	e029      	b.n	8001782 <flicker+0x9e>
            isFlickering = flickerOut();
 800172e:	f000 f83b 	bl	80017a8 <flickerOut>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <flicker+0xbc>)
 8001738:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) {
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <flicker+0xbc>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <flicker+0xa6>
                currentFlickerState = STATE_FLICKER_IN;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <flicker+0xb8>)
 800174a:	2202      	movs	r2, #2
 800174c:	701a      	strb	r2, [r3, #0]
            break;
 800174e:	e01c      	b.n	800178a <flicker+0xa6>
        	isFlickering = flickerIn();
 8001750:	f000 f8c0 	bl	80018d4 <flickerIn>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <flicker+0xbc>)
 800175a:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) {
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <flicker+0xbc>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f083 0301 	eor.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d011      	beq.n	800178e <flicker+0xaa>
                currentFlickerState = STATE_IDLE;
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <flicker+0xb8>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
                previousDisplayedTime = currentTime;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <flicker+0xc0>)
 8001772:	461d      	mov	r5, r3
 8001774:	f107 0410 	add.w	r4, r7, #16
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	602b      	str	r3, [r5, #0]
            break;
 8001780:	e005      	b.n	800178e <flicker+0xaa>
        	break;
 8001782:	bf00      	nop
 8001784:	e004      	b.n	8001790 <flicker+0xac>
            break;
 8001786:	bf00      	nop
 8001788:	e002      	b.n	8001790 <flicker+0xac>
            break;
 800178a:	bf00      	nop
 800178c:	e000      	b.n	8001790 <flicker+0xac>
            break;
 800178e:	bf00      	nop
    }
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001798:	b004      	add	sp, #16
 800179a:	4770      	bx	lr
 800179c:	20001c30 	.word	0x20001c30
 80017a0:	20001c48 	.word	0x20001c48
 80017a4:	20001c34 	.word	0x20001c34

080017a8 <flickerOut>:

uint32_t lastTickFlicker;

bool flickerOut(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
    static uint8_t ledsToFlickerOff[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 80017ae:	230a      	movs	r3, #10
 80017b0:	717b      	strb	r3, [r7, #5]
    const uint32_t delayIntervalMs = 50;
 80017b2:	2332      	movs	r3, #50	@ 0x32
 80017b4:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <flickerOut+0x114>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f083 0301 	eor.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d018      	beq.n	80017f6 <flickerOut+0x4e>
    	numLit = getChangedPixels(ledsToFlickerOff, FLICKER);
 80017c4:	2102      	movs	r1, #2
 80017c6:	483e      	ldr	r0, [pc, #248]	@ (80018c0 <flickerOut+0x118>)
 80017c8:	f000 fbe4 	bl	8001f94 <getChangedPixels>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <flickerOut+0x11c>)
 80017d2:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 80017d4:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <flickerOut+0x11c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <flickerOut+0x38>
            return false; // Function did not start flickering, return false
 80017dc:	2300      	movs	r3, #0
 80017de:	e069      	b.n	80018b4 <flickerOut+0x10c>
        }
        loop = 0;
 80017e0:	4b39      	ldr	r3, [pc, #228]	@ (80018c8 <flickerOut+0x120>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 80017e6:	f002 fc35 	bl	8004054 <HAL_GetTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a37      	ldr	r2, [pc, #220]	@ (80018cc <flickerOut+0x124>)
 80017ee:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 80017f0:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <flickerOut+0x114>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayIntervalMs) {
 80017f6:	f002 fc2d 	bl	8004054 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <flickerOut+0x124>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d854      	bhi.n	80018b2 <flickerOut+0x10a>
        if (loop >= flickerLoops) {
 8001808:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <flickerOut+0x120>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	797a      	ldrb	r2, [r7, #5]
 800180e:	429a      	cmp	r2, r3
 8001810:	d816      	bhi.n	8001840 <flickerOut+0x98>
            // Ensure all LEDs are turned off at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 8001812:	2300      	movs	r3, #0
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	e009      	b.n	800182c <flickerOut+0x84>
                removeLED((LED *) currentDisplay, ledsToFlickerOff[i]);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a29      	ldr	r2, [pc, #164]	@ (80018c0 <flickerOut+0x118>)
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	4619      	mov	r1, r3
 8001820:	482b      	ldr	r0, [pc, #172]	@ (80018d0 <flickerOut+0x128>)
 8001822:	f7ff fd9c 	bl	800135e <removeLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	3301      	adds	r3, #1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <flickerOut+0x11c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	79fa      	ldrb	r2, [r7, #7]
 8001832:	429a      	cmp	r2, r3
 8001834:	d3f0      	bcc.n	8001818 <flickerOut+0x70>
            }
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 8001836:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <flickerOut+0x114>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 800183c:	2300      	movs	r3, #0
 800183e:	e039      	b.n	80018b4 <flickerOut+0x10c>
        }

        shuffleArray(ledsToFlickerOff, numLit);
 8001840:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <flickerOut+0x11c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	481e      	ldr	r0, [pc, #120]	@ (80018c0 <flickerOut+0x118>)
 8001848:	f000 fcbe 	bl	80021c8 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 800184c:	2300      	movs	r3, #0
 800184e:	71bb      	strb	r3, [r7, #6]
 8001850:	e01f      	b.n	8001892 <flickerOut+0xea>
            if (RANDOM_IN_RANGE(0, flickerLoops) < loop) {
 8001852:	f005 fe2d 	bl	80074b0 <rand>
 8001856:	4602      	mov	r2, r0
 8001858:	797b      	ldrb	r3, [r7, #5]
 800185a:	3301      	adds	r3, #1
 800185c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	4a18      	ldr	r2, [pc, #96]	@ (80018c8 <flickerOut+0x120>)
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	4293      	cmp	r3, r2
 800186c:	da07      	bge.n	800187e <flickerOut+0xd6>
                turnOffLED((LED *) currentDisplay, ledsToFlickerOff[i]);
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	4a13      	ldr	r2, [pc, #76]	@ (80018c0 <flickerOut+0x118>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	4619      	mov	r1, r3
 8001876:	4816      	ldr	r0, [pc, #88]	@ (80018d0 <flickerOut+0x128>)
 8001878:	f7ff fd2e 	bl	80012d8 <turnOffLED>
 800187c:	e006      	b.n	800188c <flickerOut+0xe4>
            } else {
                turnOnLED((LED *) currentDisplay, ledsToFlickerOff[i]);
 800187e:	79bb      	ldrb	r3, [r7, #6]
 8001880:	4a0f      	ldr	r2, [pc, #60]	@ (80018c0 <flickerOut+0x118>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	4619      	mov	r1, r3
 8001886:	4812      	ldr	r0, [pc, #72]	@ (80018d0 <flickerOut+0x128>)
 8001888:	f7ff fd12 	bl	80012b0 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	3301      	adds	r3, #1
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <flickerOut+0x11c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	79ba      	ldrb	r2, [r7, #6]
 8001898:	429a      	cmp	r2, r3
 800189a:	d3da      	bcc.n	8001852 <flickerOut+0xaa>
            }
        }
        lastTickEffect = HAL_GetTick();
 800189c:	f002 fbda 	bl	8004054 <HAL_GetTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <flickerOut+0x124>)
 80018a4:	6013      	str	r3, [r2, #0]
        loop++;
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <flickerOut+0x120>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <flickerOut+0x120>)
 80018b0:	701a      	strb	r2, [r3, #0]
    }
    return true;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20001c49 	.word	0x20001c49
 80018c0:	20001c4c 	.word	0x20001c4c
 80018c4:	20001cdb 	.word	0x20001cdb
 80018c8:	20001cdc 	.word	0x20001cdc
 80018cc:	20001ce0 	.word	0x20001ce0
 80018d0:	20002054 	.word	0x20002054

080018d4 <flickerIn>:

bool flickerIn(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
    static uint8_t ledsToFlickerIn[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 80018da:	230a      	movs	r3, #10
 80018dc:	717b      	strb	r3, [r7, #5]
    const uint32_t delayInterval = 50; // milliseconds
 80018de:	2332      	movs	r3, #50	@ 0x32
 80018e0:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 80018e2:	4b59      	ldr	r3, [pc, #356]	@ (8001a48 <flickerIn+0x174>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	f083 0301 	eor.w	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d018      	beq.n	8001922 <flickerIn+0x4e>
        numLit = getChangedPixels(ledsToFlickerIn, FLICKER);
 80018f0:	2102      	movs	r1, #2
 80018f2:	4856      	ldr	r0, [pc, #344]	@ (8001a4c <flickerIn+0x178>)
 80018f4:	f000 fb4e 	bl	8001f94 <getChangedPixels>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b54      	ldr	r3, [pc, #336]	@ (8001a50 <flickerIn+0x17c>)
 80018fe:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 8001900:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <flickerIn+0x17c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <flickerIn+0x38>
            return false;
 8001908:	2300      	movs	r3, #0
 800190a:	e098      	b.n	8001a3e <flickerIn+0x16a>
        }
        loop = 0;
 800190c:	4b51      	ldr	r3, [pc, #324]	@ (8001a54 <flickerIn+0x180>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 8001912:	f002 fb9f 	bl	8004054 <HAL_GetTick>
 8001916:	4603      	mov	r3, r0
 8001918:	4a4f      	ldr	r2, [pc, #316]	@ (8001a58 <flickerIn+0x184>)
 800191a:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 800191c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <flickerIn+0x174>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayInterval) {
 8001922:	f002 fb97 	bl	8004054 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	4b4b      	ldr	r3, [pc, #300]	@ (8001a58 <flickerIn+0x184>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	f200 8083 	bhi.w	8001a3c <flickerIn+0x168>
        if (loop >= flickerLoops) {
 8001936:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <flickerIn+0x180>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	797a      	ldrb	r2, [r7, #5]
 800193c:	429a      	cmp	r2, r3
 800193e:	d82d      	bhi.n	800199c <flickerIn+0xc8>
            // Ensure all LEDs are turned on at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 8001940:	2300      	movs	r3, #0
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	e020      	b.n	8001988 <flickerIn+0xb4>
            	currentDisplay[ledsToFlickerIn[i]] = targetDisplay[ledsToFlickerIn[i]];
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4a40      	ldr	r2, [pc, #256]	@ (8001a4c <flickerIn+0x178>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	4619      	mov	r1, r3
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4a3e      	ldr	r2, [pc, #248]	@ (8001a4c <flickerIn+0x178>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	4618      	mov	r0, r3
 8001956:	4a41      	ldr	r2, [pc, #260]	@ (8001a5c <flickerIn+0x188>)
 8001958:	4603      	mov	r3, r0
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4403      	add	r3, r0
 800195e:	18d0      	adds	r0, r2, r3
 8001960:	4a3f      	ldr	r2, [pc, #252]	@ (8001a60 <flickerIn+0x18c>)
 8001962:	460b      	mov	r3, r1
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	441a      	add	r2, r3
 800196a:	4603      	mov	r3, r0
 800196c:	6811      	ldr	r1, [r2, #0]
 800196e:	6019      	str	r1, [r3, #0]
 8001970:	7912      	ldrb	r2, [r2, #4]
 8001972:	711a      	strb	r2, [r3, #4]
                turnOnLED((LED *) currentDisplay, ledsToFlickerIn[i]);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4a35      	ldr	r2, [pc, #212]	@ (8001a4c <flickerIn+0x178>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	4619      	mov	r1, r3
 800197c:	4837      	ldr	r0, [pc, #220]	@ (8001a5c <flickerIn+0x188>)
 800197e:	f7ff fc97 	bl	80012b0 <turnOnLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	3301      	adds	r3, #1
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <flickerIn+0x17c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	429a      	cmp	r2, r3
 8001990:	d3d9      	bcc.n	8001946 <flickerIn+0x72>
            }
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <flickerIn+0x174>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 8001998:	2300      	movs	r3, #0
 800199a:	e050      	b.n	8001a3e <flickerIn+0x16a>
        }

        shuffleArray(ledsToFlickerIn, numLit);
 800199c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <flickerIn+0x17c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	482a      	ldr	r0, [pc, #168]	@ (8001a4c <flickerIn+0x178>)
 80019a4:	f000 fc10 	bl	80021c8 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	71bb      	strb	r3, [r7, #6]
 80019ac:	e036      	b.n	8001a1c <flickerIn+0x148>
        	currentDisplay[ledsToFlickerIn[i]] = targetDisplay[ledsToFlickerIn[i]];
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	4a26      	ldr	r2, [pc, #152]	@ (8001a4c <flickerIn+0x178>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	4619      	mov	r1, r3
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	4a24      	ldr	r2, [pc, #144]	@ (8001a4c <flickerIn+0x178>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	4618      	mov	r0, r3
 80019be:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <flickerIn+0x188>)
 80019c0:	4603      	mov	r3, r0
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4403      	add	r3, r0
 80019c6:	18d0      	adds	r0, r2, r3
 80019c8:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <flickerIn+0x18c>)
 80019ca:	460b      	mov	r3, r1
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	441a      	add	r2, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	6019      	str	r1, [r3, #0]
 80019d8:	7912      	ldrb	r2, [r2, #4]
 80019da:	711a      	strb	r2, [r3, #4]
            if (RANDOM_IN_RANGE(0, flickerLoops) > loop) {
 80019dc:	f005 fd68 	bl	80074b0 <rand>
 80019e0:	4602      	mov	r2, r0
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	3301      	adds	r3, #1
 80019e6:	fb92 f1f3 	sdiv	r1, r2, r3
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <flickerIn+0x180>)
 80019f2:	7812      	ldrb	r2, [r2, #0]
 80019f4:	4293      	cmp	r3, r2
 80019f6:	dd07      	ble.n	8001a08 <flickerIn+0x134>
                turnOffLED((LED *) currentDisplay, ledsToFlickerIn[i]);
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <flickerIn+0x178>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	4619      	mov	r1, r3
 8001a00:	4816      	ldr	r0, [pc, #88]	@ (8001a5c <flickerIn+0x188>)
 8001a02:	f7ff fc69 	bl	80012d8 <turnOffLED>
 8001a06:	e006      	b.n	8001a16 <flickerIn+0x142>
            } else {
                turnOnLED((LED *) currentDisplay, ledsToFlickerIn[i]);
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	4a10      	ldr	r2, [pc, #64]	@ (8001a4c <flickerIn+0x178>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <flickerIn+0x188>)
 8001a12:	f7ff fc4d 	bl	80012b0 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	71bb      	strb	r3, [r7, #6]
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <flickerIn+0x17c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	79ba      	ldrb	r2, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3c3      	bcc.n	80019ae <flickerIn+0xda>
            }
        }
        lastTickEffect = HAL_GetTick();
 8001a26:	f002 fb15 	bl	8004054 <HAL_GetTick>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <flickerIn+0x184>)
 8001a2e:	6013      	str	r3, [r2, #0]
        loop++;
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <flickerIn+0x180>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <flickerIn+0x180>)
 8001a3a:	701a      	strb	r2, [r3, #0]
    }


    return true;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20001ce4 	.word	0x20001ce4
 8001a4c:	20001ce8 	.word	0x20001ce8
 8001a50:	20001d77 	.word	0x20001d77
 8001a54:	20001d78 	.word	0x20001d78
 8001a58:	20001d7c 	.word	0x20001d7c
 8001a5c:	20002054 	.word	0x20002054
 8001a60:	20001d88 	.word	0x20001d88

08001a64 <setupRainbow>:
static HsvColor lastColor = {0};
bool init = false;
uint32_t lastTickRainbow = 0;
uint32_t rainbowDelay = 357;

void setupRainbow(void) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0a8      	sub	sp, #160	@ 0xa0
 8001a68:	af00      	add	r7, sp, #0
	uint8_t rainbow[MATRIX_SIZE];
	uint32_t size = getLEDsWithEffect(rainbow, (LED *) currentDisplay, RAINBOW);
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4935      	ldr	r1, [pc, #212]	@ (8001b48 <setupRainbow+0xe4>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fc44 	bl	8001300 <getLEDsWithEffect>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	if(HAL_GetTick() - lastTickRainbow < rainbowDelay) {
 8001a7e:	f002 fae9 	bl	8004054 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <setupRainbow+0xe8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	1ad2      	subs	r2, r2, r3
 8001a8a:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <setupRainbow+0xec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d356      	bcc.n	8001b40 <setupRainbow+0xdc>
		return;
	}

	lastTickRainbow = HAL_GetTick();
 8001a92:	f002 fadf 	bl	8004054 <HAL_GetTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a2c      	ldr	r2, [pc, #176]	@ (8001b4c <setupRainbow+0xe8>)
 8001a9a:	6013      	str	r3, [r2, #0]

	lastColor.h++;
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b54 <setupRainbow+0xf0>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <setupRainbow+0xf0>)
 8001aa6:	701a      	strb	r2, [r3, #0]
	RgbColor rgb = hsvToRgb(lastColor);
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <setupRainbow+0xf0>)
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	f000 f886 	bl	8001bbc <hsvToRgb>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	713a      	strb	r2, [r7, #4]
 8001ab6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001aba:	717a      	strb	r2, [r7, #5]
 8001abc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001ac0:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < size; i++) {
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001ac8:	e033      	b.n	8001b32 <setupRainbow+0xce>

		currentDisplay[rainbow[i]].red = rgb.r;
 8001aca:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001ace:	33a0      	adds	r3, #160	@ 0xa0
 8001ad0:	443b      	add	r3, r7
 8001ad2:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	7938      	ldrb	r0, [r7, #4]
 8001ada:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <setupRainbow+0xe4>)
 8001adc:	460b      	mov	r3, r1
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	701a      	strb	r2, [r3, #0]
		currentDisplay[rainbow[i]].blue = rgb.g;
 8001ae8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001aec:	33a0      	adds	r3, #160	@ 0xa0
 8001aee:	443b      	add	r3, r7
 8001af0:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001af4:	4619      	mov	r1, r3
 8001af6:	7978      	ldrb	r0, [r7, #5]
 8001af8:	4a13      	ldr	r2, [pc, #76]	@ (8001b48 <setupRainbow+0xe4>)
 8001afa:	460b      	mov	r3, r1
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	4413      	add	r3, r2
 8001b02:	3302      	adds	r3, #2
 8001b04:	4602      	mov	r2, r0
 8001b06:	701a      	strb	r2, [r3, #0]
		currentDisplay[rainbow[i]].green = rgb.b;
 8001b08:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001b0c:	33a0      	adds	r3, #160	@ 0xa0
 8001b0e:	443b      	add	r3, r7
 8001b10:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001b14:	4619      	mov	r1, r3
 8001b16:	79b8      	ldrb	r0, [r7, #6]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <setupRainbow+0xe4>)
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	4413      	add	r3, r2
 8001b22:	3301      	adds	r3, #1
 8001b24:	4602      	mov	r2, r0
 8001b26:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++) {
 8001b28:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001b32:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001b36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d8c5      	bhi.n	8001aca <setupRainbow+0x66>
 8001b3e:	e000      	b.n	8001b42 <setupRainbow+0xde>
		return;
 8001b40:	bf00      	nop
	}

}
 8001b42:	37a0      	adds	r7, #160	@ 0xa0
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20002054 	.word	0x20002054
 8001b4c:	20001d84 	.word	0x20001d84
 8001b50:	20000004 	.word	0x20000004
 8001b54:	20001d80 	.word	0x20001d80

08001b58 <rainbow>:
		currentDisplay[rainbow[i]].green = rgb.g;

	}
}

void rainbow(uint8_t brightness) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
//		setupRainbow();
//		init = !init;
//		return;
//	}

	setupRainbow();
 8001b62:	f7ff ff7f 	bl	8001a64 <setupRainbow>
//	advanceRainbow(brightness);

	updatePwmBuffer((LED *) currentDisplay);
 8001b66:	4804      	ldr	r0, [pc, #16]	@ (8001b78 <rainbow+0x20>)
 8001b68:	f7ff fc5c 	bl	8001424 <updatePwmBuffer>
	DMA_Send();
 8001b6c:	f7ff fcd6 	bl	800151c <DMA_Send>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20002054 	.word	0x20002054

08001b7c <twinkle>:
	DMA_Send();

    return newColor;
}

void twinkle() {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0a6      	sub	sp, #152	@ 0x98
 8001b80:	af00      	add	r7, sp, #0

	uint8_t userBrightness = getBrightnessAsPercent();
 8001b82:	f001 fba3 	bl	80032cc <getBrightnessAsPercent>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

	uint8_t twinkleLEDs[MATRIX_SIZE];

	uint32_t numTwinleLEDs = getLEDsWithEffect((uint8_t *) twinkleLEDs, currentDisplay, TWINKLE);
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4909      	ldr	r1, [pc, #36]	@ (8001bb8 <twinkle+0x3c>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fbb4 	bl	8001300 <getLEDsWithEffect>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	shuffleArray(twinkleLEDs, numTwinleLEDs);
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fb0f 	bl	80021c8 <shuffleArray>

	//if arrays are not equal, copy elements to other array

	if(HAL_GetTick() - lastTickTwinkle <= twinkleDelay) {
 8001baa:	f002 fa53 	bl	8004054 <HAL_GetTick>
//			//keep a limit
//		}
	}


}
 8001bae:	bf00      	nop
 8001bb0:	3798      	adds	r7, #152	@ 0x98
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20002054 	.word	0x20002054

08001bbc <hsvToRgb>:
 */

#include "color.h"

RgbColor hsvToRgb(HsvColor hsv)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    RgbColor rgb;
    unsigned char region, remainder, p, q, t;

    if (hsv.s == 0)
 8001bc4:	797b      	ldrb	r3, [r7, #5]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d110      	bne.n	8001bec <hsvToRgb+0x30>
    {
        rgb.r = hsv.v;
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	733b      	strb	r3, [r7, #12]
        rgb.g = hsv.v;
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	737b      	strb	r3, [r7, #13]
        rgb.b = hsv.v;
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	73bb      	strb	r3, [r7, #14]
        return rgb;
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	f107 020c 	add.w	r2, r7, #12
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4611      	mov	r1, r2
 8001be2:	8019      	strh	r1, [r3, #0]
 8001be4:	3302      	adds	r3, #2
 8001be6:	0c12      	lsrs	r2, r2, #16
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e07f      	b.n	8001cec <hsvToRgb+0x130>
    }

    region = hsv.h / 43;
 8001bec:	793b      	ldrb	r3, [r7, #4]
 8001bee:	4a47      	ldr	r2, [pc, #284]	@ (8001d0c <hsvToRgb+0x150>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	75fb      	strb	r3, [r7, #23]
    remainder = (hsv.h - (region * 43)) * 6;
 8001bf8:	793b      	ldrb	r3, [r7, #4]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	f06f 022a 	mvn.w	r2, #42	@ 0x2a
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	440b      	add	r3, r1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	0052      	lsls	r2, r2, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	75bb      	strb	r3, [r7, #22]

    p = (hsv.v * (255 - hsv.s)) >> 8;
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	461a      	mov	r2, r3
 8001c18:	797b      	ldrb	r3, [r7, #5]
 8001c1a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	121b      	asrs	r3, r3, #8
 8001c24:	757b      	strb	r3, [r7, #21]
    q = (hsv.v * (255 - ((hsv.s * remainder) >> 8))) >> 8;
 8001c26:	79bb      	ldrb	r3, [r7, #6]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	797b      	ldrb	r3, [r7, #5]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	7dbb      	ldrb	r3, [r7, #22]
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	121b      	asrs	r3, r3, #8
 8001c36:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	121b      	asrs	r3, r3, #8
 8001c40:	753b      	strb	r3, [r7, #20]
    t = (hsv.v * (255 - ((hsv.s * (255 - remainder)) >> 8))) >> 8;
 8001c42:	79bb      	ldrb	r3, [r7, #6]
 8001c44:	461a      	mov	r2, r3
 8001c46:	797b      	ldrb	r3, [r7, #5]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	7dbb      	ldrb	r3, [r7, #22]
 8001c4c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	121b      	asrs	r3, r3, #8
 8001c56:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	121b      	asrs	r3, r3, #8
 8001c60:	74fb      	strb	r3, [r7, #19]

    switch (region)
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d830      	bhi.n	8001cca <hsvToRgb+0x10e>
 8001c68:	a201      	add	r2, pc, #4	@ (adr r2, 8001c70 <hsvToRgb+0xb4>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001c85 	.word	0x08001c85
 8001c74:	08001c93 	.word	0x08001c93
 8001c78:	08001ca1 	.word	0x08001ca1
 8001c7c:	08001caf 	.word	0x08001caf
 8001c80:	08001cbd 	.word	0x08001cbd
    {
        case 0:
            rgb.r = hsv.v; rgb.g = t; rgb.b = p;
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	733b      	strb	r3, [r7, #12]
 8001c88:	7cfb      	ldrb	r3, [r7, #19]
 8001c8a:	737b      	strb	r3, [r7, #13]
 8001c8c:	7d7b      	ldrb	r3, [r7, #21]
 8001c8e:	73bb      	strb	r3, [r7, #14]
            break;
 8001c90:	e022      	b.n	8001cd8 <hsvToRgb+0x11c>
        case 1:
            rgb.r = q; rgb.g = hsv.v; rgb.b = p;
 8001c92:	7d3b      	ldrb	r3, [r7, #20]
 8001c94:	733b      	strb	r3, [r7, #12]
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	737b      	strb	r3, [r7, #13]
 8001c9a:	7d7b      	ldrb	r3, [r7, #21]
 8001c9c:	73bb      	strb	r3, [r7, #14]
            break;
 8001c9e:	e01b      	b.n	8001cd8 <hsvToRgb+0x11c>
        case 2:
            rgb.r = p; rgb.g = hsv.v; rgb.b = t;
 8001ca0:	7d7b      	ldrb	r3, [r7, #21]
 8001ca2:	733b      	strb	r3, [r7, #12]
 8001ca4:	79bb      	ldrb	r3, [r7, #6]
 8001ca6:	737b      	strb	r3, [r7, #13]
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	73bb      	strb	r3, [r7, #14]
            break;
 8001cac:	e014      	b.n	8001cd8 <hsvToRgb+0x11c>
        case 3:
            rgb.r = p; rgb.g = q; rgb.b = hsv.v;
 8001cae:	7d7b      	ldrb	r3, [r7, #21]
 8001cb0:	733b      	strb	r3, [r7, #12]
 8001cb2:	7d3b      	ldrb	r3, [r7, #20]
 8001cb4:	737b      	strb	r3, [r7, #13]
 8001cb6:	79bb      	ldrb	r3, [r7, #6]
 8001cb8:	73bb      	strb	r3, [r7, #14]
            break;
 8001cba:	e00d      	b.n	8001cd8 <hsvToRgb+0x11c>
        case 4:
            rgb.r = t; rgb.g = p; rgb.b = hsv.v;
 8001cbc:	7cfb      	ldrb	r3, [r7, #19]
 8001cbe:	733b      	strb	r3, [r7, #12]
 8001cc0:	7d7b      	ldrb	r3, [r7, #21]
 8001cc2:	737b      	strb	r3, [r7, #13]
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	73bb      	strb	r3, [r7, #14]
            break;
 8001cc8:	e006      	b.n	8001cd8 <hsvToRgb+0x11c>
        default:
            rgb.r = hsv.v; rgb.g = p; rgb.b = q;
 8001cca:	79bb      	ldrb	r3, [r7, #6]
 8001ccc:	733b      	strb	r3, [r7, #12]
 8001cce:	7d7b      	ldrb	r3, [r7, #21]
 8001cd0:	737b      	strb	r3, [r7, #13]
 8001cd2:	7d3b      	ldrb	r3, [r7, #20]
 8001cd4:	73bb      	strb	r3, [r7, #14]
            break;
 8001cd6:	bf00      	nop
    }

    return rgb;
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	f107 020c 	add.w	r2, r7, #12
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	8019      	strh	r1, [r3, #0]
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	0c12      	lsrs	r2, r2, #16
 8001cea:	701a      	strb	r2, [r3, #0]
}
 8001cec:	2300      	movs	r3, #0
 8001cee:	7c3a      	ldrb	r2, [r7, #16]
 8001cf0:	f362 0307 	bfi	r3, r2, #0, #8
 8001cf4:	7c7a      	ldrb	r2, [r7, #17]
 8001cf6:	f362 230f 	bfi	r3, r2, #8, #8
 8001cfa:	7cba      	ldrb	r2, [r7, #18]
 8001cfc:	f362 4317 	bfi	r3, r2, #16, #8
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	2fa0be83 	.word	0x2fa0be83

08001d10 <addBitmapToDisplay>:
#include "display.h"

LED targetDisplay[MATRIX_SIZE];
LED currentDisplay[MATRIX_SIZE];

void addBitmapToDisplay(const uint16_t matrix[MATRIX_HEIGHT], LED *display, Effect effect) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	71fb      	strb	r3, [r7, #7]

	RgbColor color = getColor();
 8001d1e:	f001 f9f7 	bl	8003110 <getColor>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	753a      	strb	r2, [r7, #20]
 8001d28:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d2c:	757a      	strb	r2, [r7, #21]
 8001d2e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d32:	75bb      	strb	r3, [r7, #22]

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	e044      	b.n	8001dc4 <addBitmapToDisplay+0xb4>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	e03b      	b.n	8001db8 <addBitmapToDisplay+0xa8>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	441a      	add	r2, r3
 8001d4a:	0052      	lsls	r2, r2, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	75fb      	strb	r3, [r7, #23]

            if(matrix[i] & (1 << j)) {
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa42 f303 	asr.w	r3, r2, r3
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01f      	beq.n	8001db2 <addBitmapToDisplay+0xa2>
            	display[ledNumber].red = color.r;
 8001d72:	7dfa      	ldrb	r2, [r7, #23]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	7d3a      	ldrb	r2, [r7, #20]
 8001d80:	701a      	strb	r2, [r3, #0]
            	display[ledNumber].green = color.g;
 8001d82:	7dfa      	ldrb	r2, [r7, #23]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	7d7a      	ldrb	r2, [r7, #21]
 8001d90:	705a      	strb	r2, [r3, #1]
            	display[ledNumber].blue = color.b;
 8001d92:	7dfa      	ldrb	r2, [r7, #23]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	7dba      	ldrb	r2, [r7, #22]
 8001da0:	709a      	strb	r2, [r3, #2]
            	display[ledNumber].effect = effect;
 8001da2:	7dfa      	ldrb	r2, [r7, #23]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4413      	add	r3, r2
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	ddc0      	ble.n	8001d40 <addBitmapToDisplay+0x30>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	ddb7      	ble.n	8001d3a <addBitmapToDisplay+0x2a>
            }

        }
    }
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <removeBitmapFromDisplay>:

void removeBitmapFromDisplay(const uint16_t matrix[MATRIX_HEIGHT], LED *display) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]

	RgbColor color = getColor();
 8001dde:	f001 f997 	bl	8003110 <getColor>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	733a      	strb	r2, [r7, #12]
 8001de8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001dec:	737a      	strb	r2, [r7, #13]
 8001dee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001df2:	73bb      	strb	r3, [r7, #14]
    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e04c      	b.n	8001e94 <removeBitmapFromDisplay+0xc0>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	e043      	b.n	8001e88 <removeBitmapFromDisplay+0xb4>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	0052      	lsls	r2, r2, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	73fb      	strb	r3, [r7, #15]

            if(matrix[i] & (1 << j)) {
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	fa42 f303 	asr.w	r3, r2, r3
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d027      	beq.n	8001e82 <removeBitmapFromDisplay+0xae>
            	display[ledNumber].red = color.r;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	7b3a      	ldrb	r2, [r7, #12]
 8001e40:	701a      	strb	r2, [r3, #0]
            	display[ledNumber].green = color.g;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	7b7a      	ldrb	r2, [r7, #13]
 8001e50:	705a      	strb	r2, [r3, #1]
            	display[ledNumber].blue = color.b;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	7bba      	ldrb	r2, [r7, #14]
 8001e60:	709a      	strb	r2, [r3, #2]
            	display[ledNumber].on = false;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	2200      	movs	r2, #0
 8001e70:	711a      	strb	r2, [r3, #4]
            	display[ledNumber].effect = NONE;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2200      	movs	r2, #0
 8001e80:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	3301      	adds	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b0a      	cmp	r3, #10
 8001e8c:	ddb8      	ble.n	8001e00 <removeBitmapFromDisplay+0x2c>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	ddaf      	ble.n	8001dfa <removeBitmapFromDisplay+0x26>
            }

        }
    }
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <displaysAreDifferent>:

bool displaysAreDifferent(Effect effect) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e061      	b.n	8001f78 <displaysAreDifferent+0xd4>
    	if(targetDisplay[i].effect != effect && currentDisplay[i].effect != effect) {
 8001eb4:	4935      	ldr	r1, [pc, #212]	@ (8001f8c <displaysAreDifferent+0xe8>)
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3303      	adds	r3, #3
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	79fa      	ldrb	r2, [r7, #7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d00a      	beq.n	8001ee0 <displaysAreDifferent+0x3c>
 8001eca:	4931      	ldr	r1, [pc, #196]	@ (8001f90 <displaysAreDifferent+0xec>)
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d147      	bne.n	8001f70 <displaysAreDifferent+0xcc>
    		continue;
    	}

		if(currentDisplay[i].red != targetDisplay[i].red
 8001ee0:	492b      	ldr	r1, [pc, #172]	@ (8001f90 <displaysAreDifferent+0xec>)
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	7819      	ldrb	r1, [r3, #0]
 8001eee:	4827      	ldr	r0, [pc, #156]	@ (8001f8c <displaysAreDifferent+0xe8>)
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4403      	add	r3, r0
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4299      	cmp	r1, r3
 8001efe:	d135      	bne.n	8001f6c <displaysAreDifferent+0xc8>
				|| currentDisplay[i].green != targetDisplay[i].green
 8001f00:	4923      	ldr	r1, [pc, #140]	@ (8001f90 <displaysAreDifferent+0xec>)
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	7819      	ldrb	r1, [r3, #0]
 8001f10:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <displaysAreDifferent+0xe8>)
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	4403      	add	r3, r0
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4299      	cmp	r1, r3
 8001f22:	d123      	bne.n	8001f6c <displaysAreDifferent+0xc8>
				|| currentDisplay[i].blue != targetDisplay[i].blue
 8001f24:	491a      	ldr	r1, [pc, #104]	@ (8001f90 <displaysAreDifferent+0xec>)
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	3302      	adds	r3, #2
 8001f32:	7819      	ldrb	r1, [r3, #0]
 8001f34:	4815      	ldr	r0, [pc, #84]	@ (8001f8c <displaysAreDifferent+0xe8>)
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4403      	add	r3, r0
 8001f40:	3302      	adds	r3, #2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4299      	cmp	r1, r3
 8001f46:	d111      	bne.n	8001f6c <displaysAreDifferent+0xc8>
				|| currentDisplay[i].effect != targetDisplay[i].effect) {
 8001f48:	4911      	ldr	r1, [pc, #68]	@ (8001f90 <displaysAreDifferent+0xec>)
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	3303      	adds	r3, #3
 8001f56:	7819      	ldrb	r1, [r3, #0]
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <displaysAreDifferent+0xe8>)
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	4403      	add	r3, r0
 8001f64:	3303      	adds	r3, #3
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4299      	cmp	r1, r3
 8001f6a:	d002      	beq.n	8001f72 <displaysAreDifferent+0xce>
			return true;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e007      	b.n	8001f80 <displaysAreDifferent+0xdc>
    		continue;
 8001f70:	bf00      	nop
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3301      	adds	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b8e      	cmp	r3, #142	@ 0x8e
 8001f7c:	dd9a      	ble.n	8001eb4 <displaysAreDifferent+0x10>
    	}
    }
    return false;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	20001d88 	.word	0x20001d88
 8001f90:	20002054 	.word	0x20002054

08001f94 <getChangedPixels>:
uint32_t getChangedPixels(uint8_t *result, Effect effect) {
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
    uint32_t changedPixels = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	e057      	b.n	800205a <getChangedPixels+0xc6>

    	if(targetDisplay[i].effect != effect && currentDisplay[i].effect != effect) {
 8001faa:	4931      	ldr	r1, [pc, #196]	@ (8002070 <getChangedPixels+0xdc>)
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3303      	adds	r3, #3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d00a      	beq.n	8001fd6 <getChangedPixels+0x42>
 8001fc0:	492c      	ldr	r1, [pc, #176]	@ (8002074 <getChangedPixels+0xe0>)
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3303      	adds	r3, #3
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d13d      	bne.n	8002052 <getChangedPixels+0xbe>
    		continue;
    	}

        if(currentDisplay[i].red != targetDisplay[i].red
 8001fd6:	4927      	ldr	r1, [pc, #156]	@ (8002074 <getChangedPixels+0xe0>)
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	7819      	ldrb	r1, [r3, #0]
 8001fe4:	4822      	ldr	r0, [pc, #136]	@ (8002070 <getChangedPixels+0xdc>)
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	4403      	add	r3, r0
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4299      	cmp	r1, r3
 8001ff4:	d123      	bne.n	800203e <getChangedPixels+0xaa>
           || currentDisplay[i].green != targetDisplay[i].green
 8001ff6:	491f      	ldr	r1, [pc, #124]	@ (8002074 <getChangedPixels+0xe0>)
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	440b      	add	r3, r1
 8002002:	3301      	adds	r3, #1
 8002004:	7819      	ldrb	r1, [r3, #0]
 8002006:	481a      	ldr	r0, [pc, #104]	@ (8002070 <getChangedPixels+0xdc>)
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	4403      	add	r3, r0
 8002012:	3301      	adds	r3, #1
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4299      	cmp	r1, r3
 8002018:	d111      	bne.n	800203e <getChangedPixels+0xaa>
           || currentDisplay[i].blue != targetDisplay[i].blue) {
 800201a:	4916      	ldr	r1, [pc, #88]	@ (8002074 <getChangedPixels+0xe0>)
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	440b      	add	r3, r1
 8002026:	3302      	adds	r3, #2
 8002028:	7819      	ldrb	r1, [r3, #0]
 800202a:	4811      	ldr	r0, [pc, #68]	@ (8002070 <getChangedPixels+0xdc>)
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	4403      	add	r3, r0
 8002036:	3302      	adds	r3, #2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4299      	cmp	r1, r3
 800203c:	d00a      	beq.n	8002054 <getChangedPixels+0xc0>

			result[changedPixels] = i;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
			changedPixels++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e000      	b.n	8002054 <getChangedPixels+0xc0>
    		continue;
 8002052:	bf00      	nop
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3301      	adds	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b8e      	cmp	r3, #142	@ 0x8e
 800205e:	dda4      	ble.n	8001faa <getChangedPixels+0x16>
        }
    }

    return changedPixels;
 8002060:	68fb      	ldr	r3, [r7, #12]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20001d88 	.word	0x20001d88
 8002074:	20002054 	.word	0x20002054

08002078 <updateDisplayColor>:


void updateDisplayColor(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0

	RgbColor color = getColor();
 800207e:	f001 f847 	bl	8003110 <getColor>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	713a      	strb	r2, [r7, #4]
 8002088:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800208c:	717a      	strb	r2, [r7, #5]
 800208e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002092:	71bb      	strb	r3, [r7, #6]

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e04c      	b.n	8002134 <updateDisplayColor+0xbc>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	e043      	b.n	8002128 <updateDisplayColor+0xb0>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	0052      	lsls	r2, r2, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	71fb      	strb	r3, [r7, #7]

        	if(currentDisplay[ledNumber].effect == RAINBOW) {
 80020b8:	79fa      	ldrb	r2, [r7, #7]
 80020ba:	4922      	ldr	r1, [pc, #136]	@ (8002144 <updateDisplayColor+0xcc>)
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	3303      	adds	r3, #3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d027      	beq.n	800211c <updateDisplayColor+0xa4>
        		continue;
        	}

        	if(currentDisplay[ledNumber].effect == NONE) {
 80020cc:	79fa      	ldrb	r2, [r7, #7]
 80020ce:	491d      	ldr	r1, [pc, #116]	@ (8002144 <updateDisplayColor+0xcc>)
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	3303      	adds	r3, #3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01f      	beq.n	8002120 <updateDisplayColor+0xa8>
        		continue;
        	}

			currentDisplay[ledNumber].red = color.r;
 80020e0:	79fa      	ldrb	r2, [r7, #7]
 80020e2:	7938      	ldrb	r0, [r7, #4]
 80020e4:	4917      	ldr	r1, [pc, #92]	@ (8002144 <updateDisplayColor+0xcc>)
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	4602      	mov	r2, r0
 80020f0:	701a      	strb	r2, [r3, #0]
			currentDisplay[ledNumber].green = color.g;
 80020f2:	79fa      	ldrb	r2, [r7, #7]
 80020f4:	7978      	ldrb	r0, [r7, #5]
 80020f6:	4913      	ldr	r1, [pc, #76]	@ (8002144 <updateDisplayColor+0xcc>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	440b      	add	r3, r1
 8002100:	3301      	adds	r3, #1
 8002102:	4602      	mov	r2, r0
 8002104:	701a      	strb	r2, [r3, #0]
			currentDisplay[ledNumber].blue = color.b;
 8002106:	79fa      	ldrb	r2, [r7, #7]
 8002108:	79b8      	ldrb	r0, [r7, #6]
 800210a:	490e      	ldr	r1, [pc, #56]	@ (8002144 <updateDisplayColor+0xcc>)
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	440b      	add	r3, r1
 8002114:	3302      	adds	r3, #2
 8002116:	4602      	mov	r2, r0
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e002      	b.n	8002122 <updateDisplayColor+0xaa>
        		continue;
 800211c:	bf00      	nop
 800211e:	e000      	b.n	8002122 <updateDisplayColor+0xaa>
        		continue;
 8002120:	bf00      	nop
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3301      	adds	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b0a      	cmp	r3, #10
 800212c:	ddb8      	ble.n	80020a0 <updateDisplayColor+0x28>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3301      	adds	r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	ddaf      	ble.n	800209a <updateDisplayColor+0x22>
        }
    }
}
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20002054 	.word	0x20002054

08002148 <wipeDisplay>:

void wipeDisplay(LED *display) {
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e022      	b.n	800219c <wipeDisplay+0x54>
		display[i].blue = 0;
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	2200      	movs	r2, #0
 8002164:	709a      	strb	r2, [r3, #2]
		display[i].green = 0;
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	2200      	movs	r2, #0
 8002174:	705a      	strb	r2, [r3, #1]
		display[i].red = 0;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
		display[i].effect = NONE;
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	2200      	movs	r2, #0
 8002194:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3301      	adds	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b8e      	cmp	r3, #142	@ 0x8e
 80021a0:	ddd9      	ble.n	8002156 <wipeDisplay+0xe>
	}
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <sendDisplayToDMA>:
	}
    memcpy(currentDisplay, targetDisplay, sizeof(currentDisplay));
    wipeDisplay((LED *) targetDisplay);
}

void sendDisplayToDMA() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	updatePwmBuffer((LED *) currentDisplay);
 80021b4:	4803      	ldr	r0, [pc, #12]	@ (80021c4 <sendDisplayToDMA+0x14>)
 80021b6:	f7ff f935 	bl	8001424 <updatePwmBuffer>
	DMA_Send();
 80021ba:	f7ff f9af 	bl	800151c <DMA_Send>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20002054 	.word	0x20002054

080021c8 <shuffleArray>:
 * @param   size  Number of elements in the array.
 *
 * @note    The array must be non-empty and contain at least two elements for shuffling to occur.
 *          Otherwise, the function does nothing.
 */
void shuffleArray(uint8_t *array, uint32_t size) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
    if (size > 1) {
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d92d      	bls.n	8002234 <shuffleArray+0x6c>
        for (uint32_t i = 0; i < size - 1; i++) {
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e025      	b.n	800222a <shuffleArray+0x62>
            uint32_t j = i + (uint32_t) rand() / (RAND_MAX / (size - i) + 1);
 80021de:	f005 f967 	bl	80074b0 <rand>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4619      	mov	r1, r3
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4413      	add	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
            uint8_t t = array[j];
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	73fb      	strb	r3, [r7, #15]
            array[j] = array[i];
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	441a      	add	r2, r3
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	440b      	add	r3, r1
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
            array[i] = t;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4413      	add	r3, r2
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size - 1; i++) {
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	3b01      	subs	r3, #1
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	d3d4      	bcc.n	80021de <shuffleArray+0x16>
        }
    }
}
 8002234:	bf00      	nop
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <display_time>:
		MINUTE_TWENTY,
		MINUTE_TWENTYFIVE,
		MINUTE_THIRTY
};

void display_time(uint8_t hour, uint8_t minute) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	460a      	mov	r2, r1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	4613      	mov	r3, r2
 800224a:	71bb      	strb	r3, [r7, #6]

	wipeDisplay((LED *) targetDisplay);
 800224c:	486e      	ldr	r0, [pc, #440]	@ (8002408 <display_time+0x1cc>)
 800224e:	f7ff ff7b 	bl	8002148 <wipeDisplay>
    addBitmapToDisplay(BMP_ITS, (LED *) targetDisplay, FLICKER);
 8002252:	2202      	movs	r2, #2
 8002254:	496c      	ldr	r1, [pc, #432]	@ (8002408 <display_time+0x1cc>)
 8002256:	486d      	ldr	r0, [pc, #436]	@ (800240c <display_time+0x1d0>)
 8002258:	f7ff fd5a 	bl	8001d10 <addBitmapToDisplay>

    switch(minute % 5) {
 800225c:	79ba      	ldrb	r2, [r7, #6]
 800225e:	4b6c      	ldr	r3, [pc, #432]	@ (8002410 <display_time+0x1d4>)
 8002260:	fba3 1302 	umull	r1, r3, r3, r2
 8002264:	0899      	lsrs	r1, r3, #2
 8002266:	460b      	mov	r3, r1
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	2b03      	cmp	r3, #3
 8002274:	d840      	bhi.n	80022f8 <display_time+0xbc>
 8002276:	a201      	add	r2, pc, #4	@ (adr r2, 800227c <display_time+0x40>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	0800228d 	.word	0x0800228d
 8002280:	08002299 	.word	0x08002299
 8002284:	080022af 	.word	0x080022af
 8002288:	080022cf 	.word	0x080022cf
    case 1:
    	addBitmapToDisplay(MINUTE_ONE, (LED *) targetDisplay, FLICKER);
 800228c:	2202      	movs	r2, #2
 800228e:	495e      	ldr	r1, [pc, #376]	@ (8002408 <display_time+0x1cc>)
 8002290:	4860      	ldr	r0, [pc, #384]	@ (8002414 <display_time+0x1d8>)
 8002292:	f7ff fd3d 	bl	8001d10 <addBitmapToDisplay>
    	break;
 8002296:	e02f      	b.n	80022f8 <display_time+0xbc>
    case 2:
    	addBitmapToDisplay(MINUTE_ONE, (LED *) targetDisplay, FLICKER);
 8002298:	2202      	movs	r2, #2
 800229a:	495b      	ldr	r1, [pc, #364]	@ (8002408 <display_time+0x1cc>)
 800229c:	485d      	ldr	r0, [pc, #372]	@ (8002414 <display_time+0x1d8>)
 800229e:	f7ff fd37 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(MINUTE_TWO, (LED *) targetDisplay, FLICKER);
 80022a2:	2202      	movs	r2, #2
 80022a4:	4958      	ldr	r1, [pc, #352]	@ (8002408 <display_time+0x1cc>)
 80022a6:	485c      	ldr	r0, [pc, #368]	@ (8002418 <display_time+0x1dc>)
 80022a8:	f7ff fd32 	bl	8001d10 <addBitmapToDisplay>
    	break;
 80022ac:	e024      	b.n	80022f8 <display_time+0xbc>
    case 3:
    	addBitmapToDisplay(MINUTE_ONE, (LED *) targetDisplay, FLICKER);
 80022ae:	2202      	movs	r2, #2
 80022b0:	4955      	ldr	r1, [pc, #340]	@ (8002408 <display_time+0x1cc>)
 80022b2:	4858      	ldr	r0, [pc, #352]	@ (8002414 <display_time+0x1d8>)
 80022b4:	f7ff fd2c 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(MINUTE_TWO, (LED *) targetDisplay, FLICKER);
 80022b8:	2202      	movs	r2, #2
 80022ba:	4953      	ldr	r1, [pc, #332]	@ (8002408 <display_time+0x1cc>)
 80022bc:	4856      	ldr	r0, [pc, #344]	@ (8002418 <display_time+0x1dc>)
 80022be:	f7ff fd27 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(MINUTE_THREE, (LED *) targetDisplay, FLICKER);
 80022c2:	2202      	movs	r2, #2
 80022c4:	4950      	ldr	r1, [pc, #320]	@ (8002408 <display_time+0x1cc>)
 80022c6:	4855      	ldr	r0, [pc, #340]	@ (800241c <display_time+0x1e0>)
 80022c8:	f7ff fd22 	bl	8001d10 <addBitmapToDisplay>
    	break;
 80022cc:	e014      	b.n	80022f8 <display_time+0xbc>
    case 4:
    	addBitmapToDisplay(MINUTE_ONE, (LED *) targetDisplay, FLICKER);
 80022ce:	2202      	movs	r2, #2
 80022d0:	494d      	ldr	r1, [pc, #308]	@ (8002408 <display_time+0x1cc>)
 80022d2:	4850      	ldr	r0, [pc, #320]	@ (8002414 <display_time+0x1d8>)
 80022d4:	f7ff fd1c 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(MINUTE_TWO, (LED *) targetDisplay, FLICKER);
 80022d8:	2202      	movs	r2, #2
 80022da:	494b      	ldr	r1, [pc, #300]	@ (8002408 <display_time+0x1cc>)
 80022dc:	484e      	ldr	r0, [pc, #312]	@ (8002418 <display_time+0x1dc>)
 80022de:	f7ff fd17 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(MINUTE_THREE, (LED *) targetDisplay, FLICKER);
 80022e2:	2202      	movs	r2, #2
 80022e4:	4948      	ldr	r1, [pc, #288]	@ (8002408 <display_time+0x1cc>)
 80022e6:	484d      	ldr	r0, [pc, #308]	@ (800241c <display_time+0x1e0>)
 80022e8:	f7ff fd12 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(MINUTE_FOUR, (LED *) targetDisplay, FLICKER);
 80022ec:	2202      	movs	r2, #2
 80022ee:	4946      	ldr	r1, [pc, #280]	@ (8002408 <display_time+0x1cc>)
 80022f0:	484b      	ldr	r0, [pc, #300]	@ (8002420 <display_time+0x1e4>)
 80022f2:	f7ff fd0d 	bl	8001d10 <addBitmapToDisplay>
    	break;
 80022f6:	bf00      	nop
    }
    int roundedMinute = (minute / 5) * 5;
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	4a45      	ldr	r2, [pc, #276]	@ (8002410 <display_time+0x1d4>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
    if (roundedMinute > 0) {
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	dd14      	ble.n	800233e <display_time+0x102>
        if (roundedMinute < 35) {
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b22      	cmp	r3, #34	@ 0x22
 8002318:	dc05      	bgt.n	8002326 <display_time+0xea>
            addBitmapToDisplay(BMP_PAST, (LED *) targetDisplay, FLICKER);
 800231a:	2202      	movs	r2, #2
 800231c:	493a      	ldr	r1, [pc, #232]	@ (8002408 <display_time+0x1cc>)
 800231e:	4841      	ldr	r0, [pc, #260]	@ (8002424 <display_time+0x1e8>)
 8002320:	f7ff fcf6 	bl	8001d10 <addBitmapToDisplay>
 8002324:	e00b      	b.n	800233e <display_time+0x102>
        } else {
            roundedMinute = 60 - roundedMinute;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800232c:	60fb      	str	r3, [r7, #12]
            hour++;
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	3301      	adds	r3, #1
 8002332:	71fb      	strb	r3, [r7, #7]
            addBitmapToDisplay(BMP_TILL, (LED *) targetDisplay, FLICKER);
 8002334:	2202      	movs	r2, #2
 8002336:	4934      	ldr	r1, [pc, #208]	@ (8002408 <display_time+0x1cc>)
 8002338:	483b      	ldr	r0, [pc, #236]	@ (8002428 <display_time+0x1ec>)
 800233a:	f7ff fce9 	bl	8001d10 <addBitmapToDisplay>
        }
    }

    hour %= 24; // Normalize hour to 0-23
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	4b3a      	ldr	r3, [pc, #232]	@ (800242c <display_time+0x1f0>)
 8002342:	fba3 1302 	umull	r1, r3, r3, r2
 8002346:	0919      	lsrs	r1, r3, #4
 8002348:	460b      	mov	r3, r1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	71fb      	strb	r3, [r7, #7]
    if(hour == 0) {
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <display_time+0x12a>
        addBitmapToDisplay(HOUR_MIDNIGHT, (LED *) targetDisplay, FLICKER);
 800235a:	2202      	movs	r2, #2
 800235c:	492a      	ldr	r1, [pc, #168]	@ (8002408 <display_time+0x1cc>)
 800235e:	4834      	ldr	r0, [pc, #208]	@ (8002430 <display_time+0x1f4>)
 8002360:	f7ff fcd6 	bl	8001d10 <addBitmapToDisplay>
 8002364:	e016      	b.n	8002394 <display_time+0x158>
    } else if (hour == 12) {
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b0c      	cmp	r3, #12
 800236a:	d105      	bne.n	8002378 <display_time+0x13c>
        addBitmapToDisplay(HOUR_NOON, (LED *) targetDisplay, FLICKER);
 800236c:	2202      	movs	r2, #2
 800236e:	4926      	ldr	r1, [pc, #152]	@ (8002408 <display_time+0x1cc>)
 8002370:	4830      	ldr	r0, [pc, #192]	@ (8002434 <display_time+0x1f8>)
 8002372:	f7ff fccd 	bl	8001d10 <addBitmapToDisplay>
 8002376:	e00d      	b.n	8002394 <display_time+0x158>
    } else if (hour < 12) {
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	2b0b      	cmp	r3, #11
 800237c:	d805      	bhi.n	800238a <display_time+0x14e>
        addBitmapToDisplay(BMP_AM, (LED *) targetDisplay, FLICKER);
 800237e:	2202      	movs	r2, #2
 8002380:	4921      	ldr	r1, [pc, #132]	@ (8002408 <display_time+0x1cc>)
 8002382:	482d      	ldr	r0, [pc, #180]	@ (8002438 <display_time+0x1fc>)
 8002384:	f7ff fcc4 	bl	8001d10 <addBitmapToDisplay>
 8002388:	e004      	b.n	8002394 <display_time+0x158>
    } else {
        addBitmapToDisplay(BMP_PM, (LED *) targetDisplay, FLICKER);
 800238a:	2202      	movs	r2, #2
 800238c:	491e      	ldr	r1, [pc, #120]	@ (8002408 <display_time+0x1cc>)
 800238e:	482b      	ldr	r0, [pc, #172]	@ (800243c <display_time+0x200>)
 8002390:	f7ff fcbe 	bl	8001d10 <addBitmapToDisplay>
    }

    if (hour > 12) {
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d902      	bls.n	80023a0 <display_time+0x164>
        hour -= 12; // Convert to 12-hour format
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	3b0c      	subs	r3, #12
 800239e:	71fb      	strb	r3, [r7, #7]
    }

    if(hour >= 1 && hour < 12) {
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <display_time+0x198>
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2b0b      	cmp	r3, #11
 80023aa:	d813      	bhi.n	80023d4 <display_time+0x198>
        addBitmapToDisplay(hourBitmaps[hour % 12], (LED *) targetDisplay, FLICKER);
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <display_time+0x1f0>)
 80023b0:	fba3 1302 	umull	r1, r3, r3, r2
 80023b4:	08d9      	lsrs	r1, r3, #3
 80023b6:	460b      	mov	r3, r1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	440b      	add	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <display_time+0x204>)
 80023c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ca:	2202      	movs	r2, #2
 80023cc:	490e      	ldr	r1, [pc, #56]	@ (8002408 <display_time+0x1cc>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fc9e 	bl	8001d10 <addBitmapToDisplay>
    }

    if (roundedMinute > 0) {
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	dd0f      	ble.n	80023fa <display_time+0x1be>
        addBitmapToDisplay(minuteBitmaps[(roundedMinute / 5) - 1], (LED *) targetDisplay, FLICKER);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a19      	ldr	r2, [pc, #100]	@ (8002444 <display_time+0x208>)
 80023de:	fb82 1203 	smull	r1, r2, r2, r3
 80023e2:	1052      	asrs	r2, r2, #1
 80023e4:	17db      	asrs	r3, r3, #31
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <display_time+0x20c>)
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4905      	ldr	r1, [pc, #20]	@ (8002408 <display_time+0x1cc>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fc8b 	bl	8001d10 <addBitmapToDisplay>
    }

    display_date();
 80023fa:	f000 f827 	bl	800244c <display_date>
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20001d88 	.word	0x20001d88
 800240c:	08008b9e 	.word	0x08008b9e
 8002410:	cccccccd 	.word	0xcccccccd
 8002414:	08008cbc 	.word	0x08008cbc
 8002418:	08008cd6 	.word	0x08008cd6
 800241c:	08008cf0 	.word	0x08008cf0
 8002420:	08008d0a 	.word	0x08008d0a
 8002424:	08008bb8 	.word	0x08008bb8
 8002428:	08008bd2 	.word	0x08008bd2
 800242c:	aaaaaaab 	.word	0xaaaaaaab
 8002430:	08008ae8 	.word	0x08008ae8
 8002434:	08008ace 	.word	0x08008ace
 8002438:	08008c54 	.word	0x08008c54
 800243c:	08008c6e 	.word	0x08008c6e
 8002440:	20000008 	.word	0x20000008
 8002444:	66666667 	.word	0x66666667
 8002448:	2000003c 	.word	0x2000003c

0800244c <display_date>:

void display_date() {
 800244c:	b598      	push	{r3, r4, r7, lr}
 800244e:	af00      	add	r7, sp, #0
    if(getDate(SYSTEM_DATE)->Month == getDate(BIRTHDAY_DATE)->Month
 8002450:	2000      	movs	r0, #0
 8002452:	f000 fe05 	bl	8003060 <getDate>
 8002456:	4603      	mov	r3, r0
 8002458:	785c      	ldrb	r4, [r3, #1]
 800245a:	2002      	movs	r0, #2
 800245c:	f000 fe00 	bl	8003060 <getDate>
 8002460:	4603      	mov	r3, r0
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	429c      	cmp	r4, r3
 8002466:	d11a      	bne.n	800249e <display_date+0x52>
    		&& getDate(SYSTEM_DATE)->Date == getDate(BIRTHDAY_DATE)->Date) {
 8002468:	2000      	movs	r0, #0
 800246a:	f000 fdf9 	bl	8003060 <getDate>
 800246e:	4603      	mov	r3, r0
 8002470:	789c      	ldrb	r4, [r3, #2]
 8002472:	2002      	movs	r0, #2
 8002474:	f000 fdf4 	bl	8003060 <getDate>
 8002478:	4603      	mov	r3, r0
 800247a:	789b      	ldrb	r3, [r3, #2]
 800247c:	429c      	cmp	r4, r3
 800247e:	d10e      	bne.n	800249e <display_date+0x52>
    	addBitmapToDisplay(BMP_HAPPY, (LED *) currentDisplay, RAINBOW);
 8002480:	2201      	movs	r2, #1
 8002482:	491b      	ldr	r1, [pc, #108]	@ (80024f0 <display_date+0xa4>)
 8002484:	481b      	ldr	r0, [pc, #108]	@ (80024f4 <display_date+0xa8>)
 8002486:	f7ff fc43 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(BMP_BIRTHDAY, (LED *) currentDisplay, RAINBOW);
 800248a:	2201      	movs	r2, #1
 800248c:	4918      	ldr	r1, [pc, #96]	@ (80024f0 <display_date+0xa4>)
 800248e:	481a      	ldr	r0, [pc, #104]	@ (80024f8 <display_date+0xac>)
 8002490:	f7ff fc3e 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(BMP_KATIE, (LED *) currentDisplay, RAINBOW);
 8002494:	2201      	movs	r2, #1
 8002496:	4916      	ldr	r1, [pc, #88]	@ (80024f0 <display_date+0xa4>)
 8002498:	4818      	ldr	r0, [pc, #96]	@ (80024fc <display_date+0xb0>)
 800249a:	f7ff fc39 	bl	8001d10 <addBitmapToDisplay>
    }

    if(getDate(SYSTEM_DATE)->Month == getDate(ANNIVERSARY_DATE)->Month
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 fdde 	bl	8003060 <getDate>
 80024a4:	4603      	mov	r3, r0
 80024a6:	785c      	ldrb	r4, [r3, #1]
 80024a8:	2001      	movs	r0, #1
 80024aa:	f000 fdd9 	bl	8003060 <getDate>
 80024ae:	4603      	mov	r3, r0
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	429c      	cmp	r4, r3
 80024b4:	d11a      	bne.n	80024ec <display_date+0xa0>
    		&& getDate(SYSTEM_DATE)->Date == getDate(ANNIVERSARY_DATE)->Date) {
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 fdd2 	bl	8003060 <getDate>
 80024bc:	4603      	mov	r3, r0
 80024be:	789c      	ldrb	r4, [r3, #2]
 80024c0:	2001      	movs	r0, #1
 80024c2:	f000 fdcd 	bl	8003060 <getDate>
 80024c6:	4603      	mov	r3, r0
 80024c8:	789b      	ldrb	r3, [r3, #2]
 80024ca:	429c      	cmp	r4, r3
 80024cc:	d10e      	bne.n	80024ec <display_date+0xa0>
    	addBitmapToDisplay(BMP_HAPPY, (LED *) currentDisplay, RAINBOW);
 80024ce:	2201      	movs	r2, #1
 80024d0:	4907      	ldr	r1, [pc, #28]	@ (80024f0 <display_date+0xa4>)
 80024d2:	4808      	ldr	r0, [pc, #32]	@ (80024f4 <display_date+0xa8>)
 80024d4:	f7ff fc1c 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(BMP_ANNIVERSARY, (LED *) currentDisplay, RAINBOW);
 80024d8:	2201      	movs	r2, #1
 80024da:	4905      	ldr	r1, [pc, #20]	@ (80024f0 <display_date+0xa4>)
 80024dc:	4808      	ldr	r0, [pc, #32]	@ (8002500 <display_date+0xb4>)
 80024de:	f7ff fc17 	bl	8001d10 <addBitmapToDisplay>
    	addBitmapToDisplay(BMP_KATIEDEREK, (LED *) currentDisplay, RAINBOW);
 80024e2:	2201      	movs	r2, #1
 80024e4:	4902      	ldr	r1, [pc, #8]	@ (80024f0 <display_date+0xa4>)
 80024e6:	4807      	ldr	r0, [pc, #28]	@ (8002504 <display_date+0xb8>)
 80024e8:	f7ff fc12 	bl	8001d10 <addBitmapToDisplay>
    }
}
 80024ec:	bf00      	nop
 80024ee:	bd98      	pop	{r3, r4, r7, pc}
 80024f0:	20002054 	.word	0x20002054
 80024f4:	08008bec 	.word	0x08008bec
 80024f8:	08008c20 	.word	0x08008c20
 80024fc:	08008ca2 	.word	0x08008ca2
 8002500:	08008c06 	.word	0x08008c06
 8002504:	08008c3a 	.word	0x08008c3a

08002508 <checkButtonPress>:
 *      Author: dsava
 */

#include "button.h"

bool checkButtonPress(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 800250e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002512:	480f      	ldr	r0, [pc, #60]	@ (8002550 <checkButtonPress+0x48>)
 8002514:	f002 fbf6 	bl	8004d04 <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 800251c:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <checkButtonPress+0x4c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10d      	bne.n	8002540 <checkButtonPress+0x38>
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <checkButtonPress+0x38>
        // Button was pressed - perform actions here.
        lastButtonState = currentButtonState; // Update the last button state.
 800252a:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <checkButtonPress+0x4c>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	7013      	strb	r3, [r2, #0]
        setLastUserInput(HAL_GetTick());
 8002530:	f001 fd90 	bl	8004054 <HAL_GetTick>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fd40 	bl	8002fbc <setLastUserInput>
        return true;
 800253c:	2301      	movs	r3, #1
 800253e:	e003      	b.n	8002548 <checkButtonPress+0x40>
    } else {
        // Update the last button state.
        lastButtonState = currentButtonState;
 8002540:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <checkButtonPress+0x4c>)
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	7013      	strb	r3, [r2, #0]
        return false;
 8002546:	2300      	movs	r3, #0
    }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40020400 	.word	0x40020400
 8002554:	20000054 	.word	0x20000054

08002558 <switchState>:

extern uint32_t lastTickMenu = 0;
extern RTC_HandleTypeDef hrtc;

void switchState() {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
    switch(getDeviceState()) {
 800255e:	f000 fcb3 	bl	8002ec8 <getDeviceState>
 8002562:	4603      	mov	r3, r0
 8002564:	2b09      	cmp	r3, #9
 8002566:	f200 81d3 	bhi.w	8002910 <switchState+0x3b8>
 800256a:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <switchState+0x18>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002599 	.word	0x08002599
 8002574:	080025a7 	.word	0x080025a7
 8002578:	080025bf 	.word	0x080025bf
 800257c:	0800279f 	.word	0x0800279f
 8002580:	080027c5 	.word	0x080027c5
 8002584:	080028ed 	.word	0x080028ed
 8002588:	08002909 	.word	0x08002909
 800258c:	080027ed 	.word	0x080027ed
 8002590:	08002837 	.word	0x08002837
 8002594:	0800287d 	.word	0x0800287d
        case SLEEP:
            setDeviceState(WAKE);
 8002598:	2001      	movs	r0, #1
 800259a:	f000 fca1 	bl	8002ee0 <setDeviceState>
        	setCounter(0);
 800259e:	2000      	movs	r0, #0
 80025a0:	f000 fd1c 	bl	8002fdc <setCounter>
            break;
 80025a4:	e1b9      	b.n	800291a <switchState+0x3c2>
        case WAKE:
            setDeviceState(SELECT);
 80025a6:	2002      	movs	r0, #2
 80025a8:	f000 fc9a 	bl	8002ee0 <setDeviceState>
        	setCounter(0);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f000 fd15 	bl	8002fdc <setCounter>
        	lastTickMenu = HAL_GetTick();
 80025b2:	f001 fd4f 	bl	8004054 <HAL_GetTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4ac3      	ldr	r2, [pc, #780]	@ (80028c8 <switchState+0x370>)
 80025ba:	6013      	str	r3, [r2, #0]
            break;
 80025bc:	e1ad      	b.n	800291a <switchState+0x3c2>
        case SELECT:
        	switch(3-getCounterWithinBounds(0, 3)){
 80025be:	2103      	movs	r1, #3
 80025c0:	2000      	movs	r0, #0
 80025c2:	f000 fcc1 	bl	8002f48 <getCounterWithinBounds>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f1c3 0303 	rsb	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	f200 80e4 	bhi.w	800279a <switchState+0x242>
 80025d2:	a201      	add	r2, pc, #4	@ (adr r2, 80025d8 <switchState+0x80>)
 80025d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d8:	08002723 	.word	0x08002723
 80025dc:	080026ab 	.word	0x080026ab
 80025e0:	08002639 	.word	0x08002639
 80025e4:	080025e9 	.word	0x080025e9
        	case 3:

				addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, CONSTANT);
 80025e8:	2205      	movs	r2, #5
 80025ea:	49b8      	ldr	r1, [pc, #736]	@ (80028cc <switchState+0x374>)
 80025ec:	48b8      	ldr	r0, [pc, #736]	@ (80028d0 <switchState+0x378>)
 80025ee:	f7ff fb8f 	bl	8001d10 <addBitmapToDisplay>
				if(getMode() == SET_MODE) {
 80025f2:	f000 fe95 	bl	8003320 <getMode>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d109      	bne.n	8002610 <switchState+0xb8>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 80025fc:	2205      	movs	r2, #5
 80025fe:	49b3      	ldr	r1, [pc, #716]	@ (80028cc <switchState+0x374>)
 8002600:	48b4      	ldr	r0, [pc, #720]	@ (80028d4 <switchState+0x37c>)
 8002602:	f7ff fb85 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002606:	49b1      	ldr	r1, [pc, #708]	@ (80028cc <switchState+0x374>)
 8002608:	48b3      	ldr	r0, [pc, #716]	@ (80028d8 <switchState+0x380>)
 800260a:	f7ff fbe3 	bl	8001dd4 <removeBitmapFromDisplay>
 800260e:	e008      	b.n	8002622 <switchState+0xca>
				} else {
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 8002610:	2205      	movs	r2, #5
 8002612:	49ae      	ldr	r1, [pc, #696]	@ (80028cc <switchState+0x374>)
 8002614:	48b0      	ldr	r0, [pc, #704]	@ (80028d8 <switchState+0x380>)
 8002616:	f7ff fb7b 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 800261a:	49ac      	ldr	r1, [pc, #688]	@ (80028cc <switchState+0x374>)
 800261c:	48ad      	ldr	r0, [pc, #692]	@ (80028d4 <switchState+0x37c>)
 800261e:	f7ff fbd9 	bl	8001dd4 <removeBitmapFromDisplay>
				}

				setCounter(getTime()->Hours);
 8002622:	f000 fd13 	bl	800304c <getTime>
 8002626:	4603      	mov	r3, r0
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fcd6 	bl	8002fdc <setCounter>
        		setDeviceState(SET_HOURS);
 8002630:	2003      	movs	r0, #3
 8002632:	f000 fc55 	bl	8002ee0 <setDeviceState>

        		break;
 8002636:	e0b1      	b.n	800279c <switchState+0x244>
        	case 2:

				addBitmapToDisplay(MENU_COLOR, (LED *) currentDisplay, CONSTANT);
 8002638:	2205      	movs	r2, #5
 800263a:	49a4      	ldr	r1, [pc, #656]	@ (80028cc <switchState+0x374>)
 800263c:	48a7      	ldr	r0, [pc, #668]	@ (80028dc <switchState+0x384>)
 800263e:	f7ff fb67 	bl	8001d10 <addBitmapToDisplay>
				if(getMode() == SET_MODE) {
 8002642:	f000 fe6d 	bl	8003320 <getMode>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10c      	bne.n	8002666 <switchState+0x10e>
	        		setDateState(SYSTEM_DATE);
 800264c:	2000      	movs	r0, #0
 800264e:	f000 fe2d 	bl	80032ac <setDateState>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002652:	2205      	movs	r2, #5
 8002654:	499d      	ldr	r1, [pc, #628]	@ (80028cc <switchState+0x374>)
 8002656:	489f      	ldr	r0, [pc, #636]	@ (80028d4 <switchState+0x37c>)
 8002658:	f7ff fb5a 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 800265c:	499b      	ldr	r1, [pc, #620]	@ (80028cc <switchState+0x374>)
 800265e:	489e      	ldr	r0, [pc, #632]	@ (80028d8 <switchState+0x380>)
 8002660:	f7ff fbb8 	bl	8001dd4 <removeBitmapFromDisplay>
 8002664:	e00b      	b.n	800267e <switchState+0x126>
				} else {
	        		setDateState(SYSTEM_DATE);
 8002666:	2000      	movs	r0, #0
 8002668:	f000 fe20 	bl	80032ac <setDateState>
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 800266c:	2205      	movs	r2, #5
 800266e:	4997      	ldr	r1, [pc, #604]	@ (80028cc <switchState+0x374>)
 8002670:	4899      	ldr	r0, [pc, #612]	@ (80028d8 <switchState+0x380>)
 8002672:	f7ff fb4d 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 8002676:	4995      	ldr	r1, [pc, #596]	@ (80028cc <switchState+0x374>)
 8002678:	4896      	ldr	r0, [pc, #600]	@ (80028d4 <switchState+0x37c>)
 800267a:	f7ff fbab 	bl	8001dd4 <removeBitmapFromDisplay>
				}
				removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 800267e:	4993      	ldr	r1, [pc, #588]	@ (80028cc <switchState+0x374>)
 8002680:	4896      	ldr	r0, [pc, #600]	@ (80028dc <switchState+0x384>)
 8002682:	f7ff fba7 	bl	8001dd4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 8002686:	4991      	ldr	r1, [pc, #580]	@ (80028cc <switchState+0x374>)
 8002688:	4895      	ldr	r0, [pc, #596]	@ (80028e0 <switchState+0x388>)
 800268a:	f7ff fba3 	bl	8001dd4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 800268e:	498f      	ldr	r1, [pc, #572]	@ (80028cc <switchState+0x374>)
 8002690:	488f      	ldr	r0, [pc, #572]	@ (80028d0 <switchState+0x378>)
 8002692:	f7ff fb9f 	bl	8001dd4 <removeBitmapFromDisplay>

				setCounter(getColorPreset());
 8002696:	f000 fe6f 	bl	8003378 <getColorPreset>
 800269a:	4603      	mov	r3, r0
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fc9d 	bl	8002fdc <setCounter>
        		setDeviceState(SET_COLOR);
 80026a2:	2005      	movs	r0, #5
 80026a4:	f000 fc1c 	bl	8002ee0 <setDeviceState>

        		break;
 80026a8:	e078      	b.n	800279c <switchState+0x244>
        	case 1:


				addBitmapToDisplay(MENU_BIRTHDAY, (LED *) currentDisplay, CONSTANT);
 80026aa:	2205      	movs	r2, #5
 80026ac:	4987      	ldr	r1, [pc, #540]	@ (80028cc <switchState+0x374>)
 80026ae:	488d      	ldr	r0, [pc, #564]	@ (80028e4 <switchState+0x38c>)
 80026b0:	f7ff fb2e 	bl	8001d10 <addBitmapToDisplay>
				if(getMode() == SET_MODE) {
 80026b4:	f000 fe34 	bl	8003320 <getMode>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d117      	bne.n	80026ee <switchState+0x196>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 80026be:	2205      	movs	r2, #5
 80026c0:	4982      	ldr	r1, [pc, #520]	@ (80028cc <switchState+0x374>)
 80026c2:	4884      	ldr	r0, [pc, #528]	@ (80028d4 <switchState+0x37c>)
 80026c4:	f7ff fb24 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 80026c8:	4980      	ldr	r1, [pc, #512]	@ (80028cc <switchState+0x374>)
 80026ca:	4883      	ldr	r0, [pc, #524]	@ (80028d8 <switchState+0x380>)
 80026cc:	f7ff fb82 	bl	8001dd4 <removeBitmapFromDisplay>
	        		setDateState(BIRTHDAY_DATE);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f000 fdeb 	bl	80032ac <setDateState>
	            	setCounter(getDate(BIRTHDAY_DATE)->Month);
 80026d6:	2002      	movs	r0, #2
 80026d8:	f000 fcc2 	bl	8003060 <getDate>
 80026dc:	4603      	mov	r3, r0
 80026de:	785b      	ldrb	r3, [r3, #1]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fc7b 	bl	8002fdc <setCounter>
	            	setDeviceState(SET_MONTH);
 80026e6:	2007      	movs	r0, #7
 80026e8:	f000 fbfa 	bl	8002ee0 <setDeviceState>
 80026ec:	e010      	b.n	8002710 <switchState+0x1b8>
				} else {
					deleteBirthday();
 80026ee:	f000 feeb 	bl	80034c8 <deleteBirthday>
					setDeviceState(SLEEP);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f000 fbf4 	bl	8002ee0 <setDeviceState>
	        		setDateState(SYSTEM_DATE);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f000 fdd7 	bl	80032ac <setDateState>
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 80026fe:	2205      	movs	r2, #5
 8002700:	4972      	ldr	r1, [pc, #456]	@ (80028cc <switchState+0x374>)
 8002702:	4875      	ldr	r0, [pc, #468]	@ (80028d8 <switchState+0x380>)
 8002704:	f7ff fb04 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 8002708:	4970      	ldr	r1, [pc, #448]	@ (80028cc <switchState+0x374>)
 800270a:	4872      	ldr	r0, [pc, #456]	@ (80028d4 <switchState+0x37c>)
 800270c:	f7ff fb62 	bl	8001dd4 <removeBitmapFromDisplay>
				}
				removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002710:	496e      	ldr	r1, [pc, #440]	@ (80028cc <switchState+0x374>)
 8002712:	486f      	ldr	r0, [pc, #444]	@ (80028d0 <switchState+0x378>)
 8002714:	f7ff fb5e 	bl	8001dd4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 8002718:	496c      	ldr	r1, [pc, #432]	@ (80028cc <switchState+0x374>)
 800271a:	4871      	ldr	r0, [pc, #452]	@ (80028e0 <switchState+0x388>)
 800271c:	f7ff fb5a 	bl	8001dd4 <removeBitmapFromDisplay>


        		break;
 8002720:	e03c      	b.n	800279c <switchState+0x244>
        	case 0:


				addBitmapToDisplay(MENU_ANNIVERSARY, (LED *) currentDisplay, CONSTANT);
 8002722:	2205      	movs	r2, #5
 8002724:	4969      	ldr	r1, [pc, #420]	@ (80028cc <switchState+0x374>)
 8002726:	486e      	ldr	r0, [pc, #440]	@ (80028e0 <switchState+0x388>)
 8002728:	f7ff faf2 	bl	8001d10 <addBitmapToDisplay>
				if(getMode() == SET_MODE) {
 800272c:	f000 fdf8 	bl	8003320 <getMode>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d117      	bne.n	8002766 <switchState+0x20e>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002736:	2205      	movs	r2, #5
 8002738:	4964      	ldr	r1, [pc, #400]	@ (80028cc <switchState+0x374>)
 800273a:	4866      	ldr	r0, [pc, #408]	@ (80028d4 <switchState+0x37c>)
 800273c:	f7ff fae8 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002740:	4962      	ldr	r1, [pc, #392]	@ (80028cc <switchState+0x374>)
 8002742:	4865      	ldr	r0, [pc, #404]	@ (80028d8 <switchState+0x380>)
 8002744:	f7ff fb46 	bl	8001dd4 <removeBitmapFromDisplay>
	        		setDateState(ANNIVERSARY_DATE);
 8002748:	2001      	movs	r0, #1
 800274a:	f000 fdaf 	bl	80032ac <setDateState>
	            	setCounter(getDate(ANNIVERSARY_DATE)->Month);
 800274e:	2001      	movs	r0, #1
 8002750:	f000 fc86 	bl	8003060 <getDate>
 8002754:	4603      	mov	r3, r0
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fc3f 	bl	8002fdc <setCounter>
	            	setDeviceState(SET_MONTH);
 800275e:	2007      	movs	r0, #7
 8002760:	f000 fbbe 	bl	8002ee0 <setDeviceState>
 8002764:	e010      	b.n	8002788 <switchState+0x230>
				} else {
					deleteAnniversary();
 8002766:	f000 fe97 	bl	8003498 <deleteAnniversary>
	        		setDateState(SYSTEM_DATE);
 800276a:	2000      	movs	r0, #0
 800276c:	f000 fd9e 	bl	80032ac <setDateState>
					setDeviceState(SLEEP);
 8002770:	2000      	movs	r0, #0
 8002772:	f000 fbb5 	bl	8002ee0 <setDeviceState>
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 8002776:	2205      	movs	r2, #5
 8002778:	4954      	ldr	r1, [pc, #336]	@ (80028cc <switchState+0x374>)
 800277a:	4857      	ldr	r0, [pc, #348]	@ (80028d8 <switchState+0x380>)
 800277c:	f7ff fac8 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 8002780:	4952      	ldr	r1, [pc, #328]	@ (80028cc <switchState+0x374>)
 8002782:	4854      	ldr	r0, [pc, #336]	@ (80028d4 <switchState+0x37c>)
 8002784:	f7ff fb26 	bl	8001dd4 <removeBitmapFromDisplay>
				}
				removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002788:	4950      	ldr	r1, [pc, #320]	@ (80028cc <switchState+0x374>)
 800278a:	4854      	ldr	r0, [pc, #336]	@ (80028dc <switchState+0x384>)
 800278c:	f7ff fb22 	bl	8001dd4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 8002790:	494e      	ldr	r1, [pc, #312]	@ (80028cc <switchState+0x374>)
 8002792:	4854      	ldr	r0, [pc, #336]	@ (80028e4 <switchState+0x38c>)
 8002794:	f7ff fb1e 	bl	8001dd4 <removeBitmapFromDisplay>

        		break;
 8002798:	e000      	b.n	800279c <switchState+0x244>
        	default:
        		break;
 800279a:	bf00      	nop
        	}

            break;
 800279c:	e0bd      	b.n	800291a <switchState+0x3c2>
        case SET_HOURS:
        	setCounter(getTime()->Minutes);
 800279e:	f000 fc55 	bl	800304c <getTime>
 80027a2:	4603      	mov	r3, r0
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fc18 	bl	8002fdc <setCounter>
            setDeviceState(SET_MINUTES);
 80027ac:	2004      	movs	r0, #4
 80027ae:	f000 fb97 	bl	8002ee0 <setDeviceState>
            HAL_RTC_SetTime(&hrtc, getTime(), RTC_FORMAT_BIN);
 80027b2:	f000 fc4b 	bl	800304c <getTime>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2200      	movs	r2, #0
 80027ba:	4619      	mov	r1, r3
 80027bc:	484a      	ldr	r0, [pc, #296]	@ (80028e8 <switchState+0x390>)
 80027be:	f003 f86a 	bl	8005896 <HAL_RTC_SetTime>
            break;
 80027c2:	e0aa      	b.n	800291a <switchState+0x3c2>
        case SET_MINUTES:
        	setCounter(getDate(SYSTEM_DATE)->Month);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f000 fc4b 	bl	8003060 <getDate>
 80027ca:	4603      	mov	r3, r0
 80027cc:	785b      	ldrb	r3, [r3, #1]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fc04 	bl	8002fdc <setCounter>
            setDeviceState(SET_MONTH);
 80027d4:	2007      	movs	r0, #7
 80027d6:	f000 fb83 	bl	8002ee0 <setDeviceState>
            HAL_RTC_SetTime(&hrtc, getTime(), RTC_FORMAT_BIN);
 80027da:	f000 fc37 	bl	800304c <getTime>
 80027de:	4603      	mov	r3, r0
 80027e0:	2200      	movs	r2, #0
 80027e2:	4619      	mov	r1, r3
 80027e4:	4840      	ldr	r0, [pc, #256]	@ (80028e8 <switchState+0x390>)
 80027e6:	f003 f856 	bl	8005896 <HAL_RTC_SetTime>
            break;
 80027ea:	e096      	b.n	800291a <switchState+0x3c2>
        case SET_MONTH:;
        	RTC_DateTypeDef nDate = *getDate(getDateState());
 80027ec:	f000 fd52 	bl	8003294 <getDateState>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fc34 	bl	8003060 <getDate>
 80027f8:	4602      	mov	r2, r0
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	6810      	ldr	r0, [r2, #0]
 80027fe:	6018      	str	r0, [r3, #0]
        	nDate.Month = (uint8_t) getCounter();
 8002800:	f000 fb7e 	bl	8002f00 <getCounter>
 8002804:	4603      	mov	r3, r0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	717b      	strb	r3, [r7, #5]
        	setDate(nDate, getDateState());
 800280a:	f000 fd43 	bl	8003294 <getDateState>
 800280e:	4603      	mov	r3, r0
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fc46 	bl	80030a4 <setDate>
        	setCounter(getDate(getDateState())->Date);
 8002818:	f000 fd3c 	bl	8003294 <getDateState>
 800281c:	4603      	mov	r3, r0
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fc1e 	bl	8003060 <getDate>
 8002824:	4603      	mov	r3, r0
 8002826:	789b      	ldrb	r3, [r3, #2]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fbd7 	bl	8002fdc <setCounter>
        	setDeviceState(SET_DAY);
 800282e:	2008      	movs	r0, #8
 8002830:	f000 fb56 	bl	8002ee0 <setDeviceState>

        	break;
 8002834:	e071      	b.n	800291a <switchState+0x3c2>
        case SET_DAY:
        	nDate = *getDate(getDateState());
 8002836:	f000 fd2d 	bl	8003294 <getDateState>
 800283a:	4603      	mov	r3, r0
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fc0f 	bl	8003060 <getDate>
 8002842:	4602      	mov	r2, r0
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	6810      	ldr	r0, [r2, #0]
 8002848:	6018      	str	r0, [r3, #0]
        	nDate.Date = (uint8_t) getCounter();
 800284a:	f000 fb59 	bl	8002f00 <getCounter>
 800284e:	4603      	mov	r3, r0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	71bb      	strb	r3, [r7, #6]
        	setDate(nDate, getDateState());
 8002854:	f000 fd1e 	bl	8003294 <getDateState>
 8002858:	4603      	mov	r3, r0
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fc21 	bl	80030a4 <setDate>
        	if (getDateState() != SYSTEM_DATE) {
 8002862:	f000 fd17 	bl	8003294 <getDateState>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <switchState+0x31c>
        		setDeviceState(SLEEP);
 800286c:	2000      	movs	r0, #0
 800286e:	f000 fb37 	bl	8002ee0 <setDeviceState>
 8002872:	e052      	b.n	800291a <switchState+0x3c2>
        		return;
        	}

        	setDeviceState(SET_YEAR);
 8002874:	2009      	movs	r0, #9
 8002876:	f000 fb33 	bl	8002ee0 <setDeviceState>
        	break;
 800287a:	e04e      	b.n	800291a <switchState+0x3c2>
        case SET_YEAR:
        	nDate = *getDate(getDateState());
 800287c:	f000 fd0a 	bl	8003294 <getDateState>
 8002880:	4603      	mov	r3, r0
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fbec 	bl	8003060 <getDate>
 8002888:	4602      	mov	r2, r0
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	6810      	ldr	r0, [r2, #0]
 800288e:	6018      	str	r0, [r3, #0]
        	nDate.Year = (uint8_t) getCounter();
 8002890:	f000 fb36 	bl	8002f00 <getCounter>
 8002894:	4603      	mov	r3, r0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	71fb      	strb	r3, [r7, #7]
        	setDate(nDate, getDateState());
 800289a:	f000 fcfb 	bl	8003294 <getDateState>
 800289e:	4603      	mov	r3, r0
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fbfe 	bl	80030a4 <setDate>
        	setDeviceState(SLEEP);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f000 fb19 	bl	8002ee0 <setDeviceState>
        	if(getDateState() == SYSTEM_DATE) {
 80028ae:	f000 fcf1 	bl	8003294 <getDateState>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d12f      	bne.n	8002918 <switchState+0x3c0>
            	HAL_RTC_SetDate(&hrtc, &nDate, RTC_FORMAT_BIN);
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2200      	movs	r2, #0
 80028bc:	4619      	mov	r1, r3
 80028be:	480a      	ldr	r0, [pc, #40]	@ (80028e8 <switchState+0x390>)
 80028c0:	f003 f8e1 	bl	8005a86 <HAL_RTC_SetDate>
        	}
        	break;
 80028c4:	e028      	b.n	8002918 <switchState+0x3c0>
 80028c6:	bf00      	nop
 80028c8:	20002320 	.word	0x20002320
 80028cc:	20002054 	.word	0x20002054
 80028d0:	08008d58 	.word	0x08008d58
 80028d4:	08008d24 	.word	0x08008d24
 80028d8:	08008d3e 	.word	0x08008d3e
 80028dc:	08008d72 	.word	0x08008d72
 80028e0:	08008da6 	.word	0x08008da6
 80028e4:	08008d8c 	.word	0x08008d8c
 80028e8:	20002348 	.word	0x20002348
        case SET_COLOR:
        	setCounterBounds(0,100);
 80028ec:	2164      	movs	r1, #100	@ 0x64
 80028ee:	2000      	movs	r0, #0
 80028f0:	f000 fad4 	bl	8002e9c <setCounterBounds>
        	setCounter(getBrightnessAsPercent());
 80028f4:	f000 fcea 	bl	80032cc <getBrightnessAsPercent>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fb6e 	bl	8002fdc <setCounter>
            setDeviceState(SET_BRIGHTNESS); // After color, set brightness
 8002900:	2006      	movs	r0, #6
 8002902:	f000 faed 	bl	8002ee0 <setDeviceState>
            break;
 8002906:	e008      	b.n	800291a <switchState+0x3c2>
        case SET_BRIGHTNESS:
            setDeviceState(SLEEP); // Return to SLEEP after setting LED features
 8002908:	2000      	movs	r0, #0
 800290a:	f000 fae9 	bl	8002ee0 <setDeviceState>
            break;
 800290e:	e004      	b.n	800291a <switchState+0x3c2>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            setDeviceState(SLEEP);
 8002910:	2000      	movs	r0, #0
 8002912:	f000 fae5 	bl	8002ee0 <setDeviceState>
            break;
 8002916:	e000      	b.n	800291a <switchState+0x3c2>
        	break;
 8002918:	bf00      	nop
    }
}
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <configureSettings>:

#include "menu.h"

uint32_t menuTimeoutMs = 50000;

void configureSettings(void) {
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0

	if(HAL_GetTick() - getLastUserInput() > menuTimeoutMs) {
 8002926:	f001 fb95 	bl	8004054 <HAL_GetTick>
 800292a:	4604      	mov	r4, r0
 800292c:	f000 fb3a 	bl	8002fa4 <getLastUserInput>
 8002930:	4603      	mov	r3, r0
 8002932:	1ae2      	subs	r2, r4, r3
 8002934:	4ba7      	ldr	r3, [pc, #668]	@ (8002bd4 <configureSettings+0x2b4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d902      	bls.n	8002942 <configureSettings+0x22>
        setDeviceState(SLEEP);
 800293c:	2000      	movs	r0, #0
 800293e:	f000 facf 	bl	8002ee0 <setDeviceState>

	}

	switch(getDeviceState()) {
 8002942:	f000 fac1 	bl	8002ec8 <getDeviceState>
 8002946:	4603      	mov	r3, r0
 8002948:	2b09      	cmp	r3, #9
 800294a:	f200 826f 	bhi.w	8002e2c <configureSettings+0x50c>
 800294e:	a201      	add	r2, pc, #4	@ (adr r2, 8002954 <configureSettings+0x34>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	0800297d 	.word	0x0800297d
 8002958:	080029b5 	.word	0x080029b5
 800295c:	08002a2d 	.word	0x08002a2d
 8002960:	08002c01 	.word	0x08002c01
 8002964:	08002c47 	.word	0x08002c47
 8002968:	08002db3 	.word	0x08002db3
 800296c:	08002def 	.word	0x08002def
 8002970:	08002c8f 	.word	0x08002c8f
 8002974:	08002d19 	.word	0x08002d19
 8002978:	08002d83 	.word	0x08002d83
		case SLEEP:
			removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 800297c:	4996      	ldr	r1, [pc, #600]	@ (8002bd8 <configureSettings+0x2b8>)
 800297e:	4897      	ldr	r0, [pc, #604]	@ (8002bdc <configureSettings+0x2bc>)
 8002980:	f7ff fa28 	bl	8001dd4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002984:	4994      	ldr	r1, [pc, #592]	@ (8002bd8 <configureSettings+0x2b8>)
 8002986:	4896      	ldr	r0, [pc, #600]	@ (8002be0 <configureSettings+0x2c0>)
 8002988:	f7ff fa24 	bl	8001dd4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_SET, currentDisplay);
 800298c:	4992      	ldr	r1, [pc, #584]	@ (8002bd8 <configureSettings+0x2b8>)
 800298e:	4895      	ldr	r0, [pc, #596]	@ (8002be4 <configureSettings+0x2c4>)
 8002990:	f7ff fa20 	bl	8001dd4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002994:	4990      	ldr	r1, [pc, #576]	@ (8002bd8 <configureSettings+0x2b8>)
 8002996:	4894      	ldr	r0, [pc, #592]	@ (8002be8 <configureSettings+0x2c8>)
 8002998:	f7ff fa1c 	bl	8001dd4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 800299c:	498e      	ldr	r1, [pc, #568]	@ (8002bd8 <configureSettings+0x2b8>)
 800299e:	4893      	ldr	r0, [pc, #588]	@ (8002bec <configureSettings+0x2cc>)
 80029a0:	f7ff fa18 	bl	8001dd4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 80029a4:	498c      	ldr	r1, [pc, #560]	@ (8002bd8 <configureSettings+0x2b8>)
 80029a6:	4892      	ldr	r0, [pc, #584]	@ (8002bf0 <configureSettings+0x2d0>)
 80029a8:	f7ff fa14 	bl	8001dd4 <removeBitmapFromDisplay>
			setDisplayString("");
 80029ac:	4891      	ldr	r0, [pc, #580]	@ (8002bf4 <configureSettings+0x2d4>)
 80029ae:	f000 fccd 	bl	800334c <setDisplayString>
			break;
 80029b2:	e23c      	b.n	8002e2e <configureSettings+0x50e>
		case WAKE:;


			uint8_t upperBound = 1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	71fb      	strb	r3, [r7, #7]

			if(!isBirthdaySet() && !isAnniversarySet())
 80029b8:	f000 fd5e 	bl	8003478 <isBirthdaySet>
 80029bc:	4603      	mov	r3, r0
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <configureSettings+0xbc>
 80029c8:	f000 fd46 	bl	8003458 <isAnniversarySet>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f083 0301 	eor.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <configureSettings+0xbc>
				upperBound = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	71fb      	strb	r3, [r7, #7]

			if(!getCounterWithinBounds(0, upperBound)) {
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	4619      	mov	r1, r3
 80029e0:	2000      	movs	r0, #0
 80029e2:	f000 fab1 	bl	8002f48 <getCounterWithinBounds>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10f      	bne.n	8002a0c <configureSettings+0xec>
				setDisplayString("SET");
 80029ec:	4882      	ldr	r0, [pc, #520]	@ (8002bf8 <configureSettings+0x2d8>)
 80029ee:	f000 fcad 	bl	800334c <setDisplayString>
				addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, BLINK);
 80029f2:	2204      	movs	r2, #4
 80029f4:	4978      	ldr	r1, [pc, #480]	@ (8002bd8 <configureSettings+0x2b8>)
 80029f6:	487b      	ldr	r0, [pc, #492]	@ (8002be4 <configureSettings+0x2c4>)
 80029f8:	f7ff f98a 	bl	8001d10 <addBitmapToDisplay>
				removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 80029fc:	4976      	ldr	r1, [pc, #472]	@ (8002bd8 <configureSettings+0x2b8>)
 80029fe:	4878      	ldr	r0, [pc, #480]	@ (8002be0 <configureSettings+0x2c0>)
 8002a00:	f7ff f9e8 	bl	8001dd4 <removeBitmapFromDisplay>
				setMode(SET_MODE);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f000 fc7b 	bl	8003300 <setMode>
				setDisplayString("DEL");
				addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, BLINK);
				removeBitmapFromDisplay(MENU_SET, currentDisplay);
				setMode(DELETE_MODE);
			}
			break;
 8002a0a:	e210      	b.n	8002e2e <configureSettings+0x50e>
				setDisplayString("DEL");
 8002a0c:	487b      	ldr	r0, [pc, #492]	@ (8002bfc <configureSettings+0x2dc>)
 8002a0e:	f000 fc9d 	bl	800334c <setDisplayString>
				addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, BLINK);
 8002a12:	2204      	movs	r2, #4
 8002a14:	4970      	ldr	r1, [pc, #448]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a16:	4872      	ldr	r0, [pc, #456]	@ (8002be0 <configureSettings+0x2c0>)
 8002a18:	f7ff f97a 	bl	8001d10 <addBitmapToDisplay>
				removeBitmapFromDisplay(MENU_SET, currentDisplay);
 8002a1c:	496e      	ldr	r1, [pc, #440]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a1e:	4871      	ldr	r0, [pc, #452]	@ (8002be4 <configureSettings+0x2c4>)
 8002a20:	f7ff f9d8 	bl	8001dd4 <removeBitmapFromDisplay>
				setMode(DELETE_MODE);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f000 fc6b 	bl	8003300 <setMode>
			break;
 8002a2a:	e200      	b.n	8002e2e <configureSettings+0x50e>
		case SELECT:
			if(getMode() == SET_MODE) {
 8002a2c:	f000 fc78 	bl	8003320 <getMode>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d17e      	bne.n	8002b34 <configureSettings+0x214>
				switch(getCounterWithinBounds(0, 3)) {
 8002a36:	2103      	movs	r1, #3
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f000 fa85 	bl	8002f48 <getCounterWithinBounds>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	f200 80c5 	bhi.w	8002bd0 <configureSettings+0x2b0>
 8002a46:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <configureSettings+0x12c>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002aff 	.word	0x08002aff
 8002a50:	08002ac9 	.word	0x08002ac9
 8002a54:	08002a93 	.word	0x08002a93
 8002a58:	08002a5d 	.word	0x08002a5d
				case 3:
					addBitmapToDisplay(MENU_ANNIVERSARY, (LED *) currentDisplay, BLINK);
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	495e      	ldr	r1, [pc, #376]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a60:	485e      	ldr	r0, [pc, #376]	@ (8002bdc <configureSettings+0x2bc>)
 8002a62:	f7ff f955 	bl	8001d10 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002a66:	2205      	movs	r2, #5
 8002a68:	495b      	ldr	r1, [pc, #364]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a6a:	485e      	ldr	r0, [pc, #376]	@ (8002be4 <configureSettings+0x2c4>)
 8002a6c:	f7ff f950 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002a70:	4959      	ldr	r1, [pc, #356]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a72:	485b      	ldr	r0, [pc, #364]	@ (8002be0 <configureSettings+0x2c0>)
 8002a74:	f7ff f9ae 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002a78:	4957      	ldr	r1, [pc, #348]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a7a:	485b      	ldr	r0, [pc, #364]	@ (8002be8 <configureSettings+0x2c8>)
 8002a7c:	f7ff f9aa 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 8002a80:	4955      	ldr	r1, [pc, #340]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a82:	485a      	ldr	r0, [pc, #360]	@ (8002bec <configureSettings+0x2cc>)
 8002a84:	f7ff f9a6 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002a88:	4953      	ldr	r1, [pc, #332]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a8a:	4859      	ldr	r0, [pc, #356]	@ (8002bf0 <configureSettings+0x2d0>)
 8002a8c:	f7ff f9a2 	bl	8001dd4 <removeBitmapFromDisplay>
					break;
 8002a90:	e09f      	b.n	8002bd2 <configureSettings+0x2b2>
				case 2:
					addBitmapToDisplay(MENU_BIRTHDAY, (LED *) currentDisplay, BLINK);
 8002a92:	2204      	movs	r2, #4
 8002a94:	4950      	ldr	r1, [pc, #320]	@ (8002bd8 <configureSettings+0x2b8>)
 8002a96:	4855      	ldr	r0, [pc, #340]	@ (8002bec <configureSettings+0x2cc>)
 8002a98:	f7ff f93a 	bl	8001d10 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002a9c:	2205      	movs	r2, #5
 8002a9e:	494e      	ldr	r1, [pc, #312]	@ (8002bd8 <configureSettings+0x2b8>)
 8002aa0:	4850      	ldr	r0, [pc, #320]	@ (8002be4 <configureSettings+0x2c4>)
 8002aa2:	f7ff f935 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002aa6:	494c      	ldr	r1, [pc, #304]	@ (8002bd8 <configureSettings+0x2b8>)
 8002aa8:	484d      	ldr	r0, [pc, #308]	@ (8002be0 <configureSettings+0x2c0>)
 8002aaa:	f7ff f993 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002aae:	494a      	ldr	r1, [pc, #296]	@ (8002bd8 <configureSettings+0x2b8>)
 8002ab0:	484d      	ldr	r0, [pc, #308]	@ (8002be8 <configureSettings+0x2c8>)
 8002ab2:	f7ff f98f 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 8002ab6:	4948      	ldr	r1, [pc, #288]	@ (8002bd8 <configureSettings+0x2b8>)
 8002ab8:	4848      	ldr	r0, [pc, #288]	@ (8002bdc <configureSettings+0x2bc>)
 8002aba:	f7ff f98b 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002abe:	4946      	ldr	r1, [pc, #280]	@ (8002bd8 <configureSettings+0x2b8>)
 8002ac0:	484b      	ldr	r0, [pc, #300]	@ (8002bf0 <configureSettings+0x2d0>)
 8002ac2:	f7ff f987 	bl	8001dd4 <removeBitmapFromDisplay>
					break;
 8002ac6:	e084      	b.n	8002bd2 <configureSettings+0x2b2>
				case 1:
					addBitmapToDisplay(MENU_COLOR, (LED *) currentDisplay, BLINK);
 8002ac8:	2204      	movs	r2, #4
 8002aca:	4943      	ldr	r1, [pc, #268]	@ (8002bd8 <configureSettings+0x2b8>)
 8002acc:	4846      	ldr	r0, [pc, #280]	@ (8002be8 <configureSettings+0x2c8>)
 8002ace:	f7ff f91f 	bl	8001d10 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	4940      	ldr	r1, [pc, #256]	@ (8002bd8 <configureSettings+0x2b8>)
 8002ad6:	4843      	ldr	r0, [pc, #268]	@ (8002be4 <configureSettings+0x2c4>)
 8002ad8:	f7ff f91a 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002adc:	493e      	ldr	r1, [pc, #248]	@ (8002bd8 <configureSettings+0x2b8>)
 8002ade:	4840      	ldr	r0, [pc, #256]	@ (8002be0 <configureSettings+0x2c0>)
 8002ae0:	f7ff f978 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 8002ae4:	493c      	ldr	r1, [pc, #240]	@ (8002bd8 <configureSettings+0x2b8>)
 8002ae6:	483d      	ldr	r0, [pc, #244]	@ (8002bdc <configureSettings+0x2bc>)
 8002ae8:	f7ff f974 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 8002aec:	493a      	ldr	r1, [pc, #232]	@ (8002bd8 <configureSettings+0x2b8>)
 8002aee:	483f      	ldr	r0, [pc, #252]	@ (8002bec <configureSettings+0x2cc>)
 8002af0:	f7ff f970 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002af4:	4938      	ldr	r1, [pc, #224]	@ (8002bd8 <configureSettings+0x2b8>)
 8002af6:	483e      	ldr	r0, [pc, #248]	@ (8002bf0 <configureSettings+0x2d0>)
 8002af8:	f7ff f96c 	bl	8001dd4 <removeBitmapFromDisplay>

					break;
 8002afc:	e069      	b.n	8002bd2 <configureSettings+0x2b2>
				case 0:
					addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, BLINK);
 8002afe:	2204      	movs	r2, #4
 8002b00:	4935      	ldr	r1, [pc, #212]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b02:	483b      	ldr	r0, [pc, #236]	@ (8002bf0 <configureSettings+0x2d0>)
 8002b04:	f7ff f904 	bl	8001d10 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002b08:	2205      	movs	r2, #5
 8002b0a:	4933      	ldr	r1, [pc, #204]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b0c:	4835      	ldr	r0, [pc, #212]	@ (8002be4 <configureSettings+0x2c4>)
 8002b0e:	f7ff f8ff 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002b12:	4931      	ldr	r1, [pc, #196]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b14:	4832      	ldr	r0, [pc, #200]	@ (8002be0 <configureSettings+0x2c0>)
 8002b16:	f7ff f95d 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002b1a:	492f      	ldr	r1, [pc, #188]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b1c:	4832      	ldr	r0, [pc, #200]	@ (8002be8 <configureSettings+0x2c8>)
 8002b1e:	f7ff f959 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 8002b22:	492d      	ldr	r1, [pc, #180]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b24:	4831      	ldr	r0, [pc, #196]	@ (8002bec <configureSettings+0x2cc>)
 8002b26:	f7ff f955 	bl	8001dd4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 8002b2a:	492b      	ldr	r1, [pc, #172]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b2c:	482b      	ldr	r0, [pc, #172]	@ (8002bdc <configureSettings+0x2bc>)
 8002b2e:	f7ff f951 	bl	8001dd4 <removeBitmapFromDisplay>
					break;
 8002b32:	e04e      	b.n	8002bd2 <configureSettings+0x2b2>
			} else {
				//delete mode
				uint8_t lowerBound;
				uint8_t upperBound;

				if(isBirthdaySet() && isAnniversarySet()) {
 8002b34:	f000 fca0 	bl	8003478 <isBirthdaySet>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <configureSettings+0x232>
 8002b3e:	f000 fc8b 	bl	8003458 <isAnniversarySet>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <configureSettings+0x232>
					lowerBound = 2;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	71bb      	strb	r3, [r7, #6]
					upperBound = 3;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	717b      	strb	r3, [r7, #5]
 8002b50:	e00d      	b.n	8002b6e <configureSettings+0x24e>
				} else if(isBirthdaySet()) {
 8002b52:	f000 fc91 	bl	8003478 <isBirthdaySet>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <configureSettings+0x246>
					lowerBound = 2;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	71bb      	strb	r3, [r7, #6]
					upperBound = 2;
 8002b60:	2302      	movs	r3, #2
 8002b62:	717b      	strb	r3, [r7, #5]
 8002b64:	e003      	b.n	8002b6e <configureSettings+0x24e>
				} else {
					lowerBound = 3;
 8002b66:	2303      	movs	r3, #3
 8002b68:	71bb      	strb	r3, [r7, #6]
					upperBound = 3;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	717b      	strb	r3, [r7, #5]
				}

				switch(getCounterWithinBounds(lowerBound, upperBound)) {
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	797a      	ldrb	r2, [r7, #5]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f9e7 	bl	8002f48 <getCounterWithinBounds>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d00b      	beq.n	8002b98 <configureSettings+0x278>
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d113      	bne.n	8002bac <configureSettings+0x28c>
				case 3:
					addBitmapToDisplay(MENU_ANNIVERSARY, (LED *) currentDisplay, BLINK);
 8002b84:	2204      	movs	r2, #4
 8002b86:	4914      	ldr	r1, [pc, #80]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b88:	4814      	ldr	r0, [pc, #80]	@ (8002bdc <configureSettings+0x2bc>)
 8002b8a:	f7ff f8c1 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 8002b8e:	4912      	ldr	r1, [pc, #72]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b90:	4816      	ldr	r0, [pc, #88]	@ (8002bec <configureSettings+0x2cc>)
 8002b92:	f7ff f91f 	bl	8001dd4 <removeBitmapFromDisplay>
					break;
 8002b96:	e009      	b.n	8002bac <configureSettings+0x28c>
				case 2:
					addBitmapToDisplay(MENU_BIRTHDAY, (LED *) currentDisplay, BLINK);
 8002b98:	2204      	movs	r2, #4
 8002b9a:	490f      	ldr	r1, [pc, #60]	@ (8002bd8 <configureSettings+0x2b8>)
 8002b9c:	4813      	ldr	r0, [pc, #76]	@ (8002bec <configureSettings+0x2cc>)
 8002b9e:	f7ff f8b7 	bl	8001d10 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 8002ba2:	490d      	ldr	r1, [pc, #52]	@ (8002bd8 <configureSettings+0x2b8>)
 8002ba4:	480d      	ldr	r0, [pc, #52]	@ (8002bdc <configureSettings+0x2bc>)
 8002ba6:	f7ff f915 	bl	8001dd4 <removeBitmapFromDisplay>
					break;
 8002baa:	bf00      	nop
				}

				addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 8002bac:	2205      	movs	r2, #5
 8002bae:	490a      	ldr	r1, [pc, #40]	@ (8002bd8 <configureSettings+0x2b8>)
 8002bb0:	480b      	ldr	r0, [pc, #44]	@ (8002be0 <configureSettings+0x2c0>)
 8002bb2:	f7ff f8ad 	bl	8001d10 <addBitmapToDisplay>
				removeBitmapFromDisplay(MENU_SET, currentDisplay);
 8002bb6:	4908      	ldr	r1, [pc, #32]	@ (8002bd8 <configureSettings+0x2b8>)
 8002bb8:	480a      	ldr	r0, [pc, #40]	@ (8002be4 <configureSettings+0x2c4>)
 8002bba:	f7ff f90b 	bl	8001dd4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002bbe:	4906      	ldr	r1, [pc, #24]	@ (8002bd8 <configureSettings+0x2b8>)
 8002bc0:	4809      	ldr	r0, [pc, #36]	@ (8002be8 <configureSettings+0x2c8>)
 8002bc2:	f7ff f907 	bl	8001dd4 <removeBitmapFromDisplay>

				removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002bc6:	4904      	ldr	r1, [pc, #16]	@ (8002bd8 <configureSettings+0x2b8>)
 8002bc8:	4809      	ldr	r0, [pc, #36]	@ (8002bf0 <configureSettings+0x2d0>)
 8002bca:	f7ff f903 	bl	8001dd4 <removeBitmapFromDisplay>
			}
			break;
 8002bce:	e12e      	b.n	8002e2e <configureSettings+0x50e>
					break;
 8002bd0:	bf00      	nop
			break;
 8002bd2:	e12c      	b.n	8002e2e <configureSettings+0x50e>
 8002bd4:	20000058 	.word	0x20000058
 8002bd8:	20002054 	.word	0x20002054
 8002bdc:	08008da6 	.word	0x08008da6
 8002be0:	08008d3e 	.word	0x08008d3e
 8002be4:	08008d24 	.word	0x08008d24
 8002be8:	08008d72 	.word	0x08008d72
 8002bec:	08008d8c 	.word	0x08008d8c
 8002bf0:	08008d58 	.word	0x08008d58
 8002bf4:	08008888 	.word	0x08008888
 8002bf8:	0800888c 	.word	0x0800888c
 8002bfc:	08008890 	.word	0x08008890
		case SET_HOURS:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002c00:	2205      	movs	r2, #5
 8002c02:	498d      	ldr	r1, [pc, #564]	@ (8002e38 <configureSettings+0x518>)
 8002c04:	488d      	ldr	r0, [pc, #564]	@ (8002e3c <configureSettings+0x51c>)
 8002c06:	f7ff f883 	bl	8001d10 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, CONSTANT);
 8002c0a:	2205      	movs	r2, #5
 8002c0c:	498a      	ldr	r1, [pc, #552]	@ (8002e38 <configureSettings+0x518>)
 8002c0e:	488c      	ldr	r0, [pc, #560]	@ (8002e40 <configureSettings+0x520>)
 8002c10:	f7ff f87e 	bl	8001d10 <addBitmapToDisplay>
			setDisplayString("%02d%02d", getCounterWithinBounds(0, 23), getTime()->Minutes);
 8002c14:	2117      	movs	r1, #23
 8002c16:	2000      	movs	r0, #0
 8002c18:	f000 f996 	bl	8002f48 <getCounterWithinBounds>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	f000 fa15 	bl	800304c <getTime>
 8002c22:	4603      	mov	r3, r0
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	461a      	mov	r2, r3
 8002c28:	4621      	mov	r1, r4
 8002c2a:	4886      	ldr	r0, [pc, #536]	@ (8002e44 <configureSettings+0x524>)
 8002c2c:	f000 fb8e 	bl	800334c <setDisplayString>
		    getTime()->Hours = (uint8_t) getCounterWithinBounds(0, 23);
 8002c30:	2117      	movs	r1, #23
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 f988 	bl	8002f48 <getCounterWithinBounds>
 8002c38:	4604      	mov	r4, r0
 8002c3a:	f000 fa07 	bl	800304c <getTime>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	b2e2      	uxtb	r2, r4
 8002c42:	701a      	strb	r2, [r3, #0]
			break;
 8002c44:	e0f3      	b.n	8002e2e <configureSettings+0x50e>
		case SET_MINUTES:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002c46:	2205      	movs	r2, #5
 8002c48:	497b      	ldr	r1, [pc, #492]	@ (8002e38 <configureSettings+0x518>)
 8002c4a:	487c      	ldr	r0, [pc, #496]	@ (8002e3c <configureSettings+0x51c>)
 8002c4c:	f7ff f860 	bl	8001d10 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, CONSTANT);
 8002c50:	2205      	movs	r2, #5
 8002c52:	4979      	ldr	r1, [pc, #484]	@ (8002e38 <configureSettings+0x518>)
 8002c54:	487a      	ldr	r0, [pc, #488]	@ (8002e40 <configureSettings+0x520>)
 8002c56:	f7ff f85b 	bl	8001d10 <addBitmapToDisplay>
			setDisplayString("%02d%02d", getTime()->Hours, getCounterWithinBounds(0, 59));
 8002c5a:	f000 f9f7 	bl	800304c <getTime>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461c      	mov	r4, r3
 8002c64:	213b      	movs	r1, #59	@ 0x3b
 8002c66:	2000      	movs	r0, #0
 8002c68:	f000 f96e 	bl	8002f48 <getCounterWithinBounds>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4621      	mov	r1, r4
 8002c72:	4874      	ldr	r0, [pc, #464]	@ (8002e44 <configureSettings+0x524>)
 8002c74:	f000 fb6a 	bl	800334c <setDisplayString>
		    getTime()->Minutes = (uint8_t) getCounterWithinBounds(0, 59);
 8002c78:	213b      	movs	r1, #59	@ 0x3b
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f964 	bl	8002f48 <getCounterWithinBounds>
 8002c80:	4604      	mov	r4, r0
 8002c82:	f000 f9e3 	bl	800304c <getTime>
 8002c86:	4603      	mov	r3, r0
 8002c88:	b2e2      	uxtb	r2, r4
 8002c8a:	705a      	strb	r2, [r3, #1]
			break;
 8002c8c:	e0cf      	b.n	8002e2e <configureSettings+0x50e>
		case SET_MONTH:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002c8e:	2205      	movs	r2, #5
 8002c90:	4969      	ldr	r1, [pc, #420]	@ (8002e38 <configureSettings+0x518>)
 8002c92:	486a      	ldr	r0, [pc, #424]	@ (8002e3c <configureSettings+0x51c>)
 8002c94:	f7ff f83c 	bl	8001d10 <addBitmapToDisplay>
			if(getDateState() == SYSTEM_DATE) {
 8002c98:	f000 fafc 	bl	8003294 <getDateState>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <configureSettings+0x38e>
				addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, CONSTANT);
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	4964      	ldr	r1, [pc, #400]	@ (8002e38 <configureSettings+0x518>)
 8002ca6:	4866      	ldr	r0, [pc, #408]	@ (8002e40 <configureSettings+0x520>)
 8002ca8:	f7ff f832 	bl	8001d10 <addBitmapToDisplay>
 8002cac:	e00f      	b.n	8002cce <configureSettings+0x3ae>
			} else if(getDateState() == BIRTHDAY_DATE) {
 8002cae:	f000 faf1 	bl	8003294 <getDateState>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d105      	bne.n	8002cc4 <configureSettings+0x3a4>
				addBitmapToDisplay(MENU_BIRTHDAY, (LED *) currentDisplay, CONSTANT);
 8002cb8:	2205      	movs	r2, #5
 8002cba:	495f      	ldr	r1, [pc, #380]	@ (8002e38 <configureSettings+0x518>)
 8002cbc:	4862      	ldr	r0, [pc, #392]	@ (8002e48 <configureSettings+0x528>)
 8002cbe:	f7ff f827 	bl	8001d10 <addBitmapToDisplay>
 8002cc2:	e004      	b.n	8002cce <configureSettings+0x3ae>
			} else {
				addBitmapToDisplay(MENU_ANNIVERSARY, (LED *) currentDisplay, CONSTANT);
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	495c      	ldr	r1, [pc, #368]	@ (8002e38 <configureSettings+0x518>)
 8002cc8:	4860      	ldr	r0, [pc, #384]	@ (8002e4c <configureSettings+0x52c>)
 8002cca:	f7ff f821 	bl	8001d10 <addBitmapToDisplay>
			}

			getCounterWithinBounds(0, 12);
 8002cce:	210c      	movs	r1, #12
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f000 f939 	bl	8002f48 <getCounterWithinBounds>
			setDisplayString("%02d%02d", getCounterWithinBounds(1, 12), getDate(getDateState())->Date);
 8002cd6:	210c      	movs	r1, #12
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f000 f935 	bl	8002f48 <getCounterWithinBounds>
 8002cde:	4604      	mov	r4, r0
 8002ce0:	f000 fad8 	bl	8003294 <getDateState>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f9ba 	bl	8003060 <getDate>
 8002cec:	4603      	mov	r3, r0
 8002cee:	789b      	ldrb	r3, [r3, #2]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	4853      	ldr	r0, [pc, #332]	@ (8002e44 <configureSettings+0x524>)
 8002cf6:	f000 fb29 	bl	800334c <setDisplayString>
		    getDate(getDateState())->Month = (uint8_t) getCounterWithinBounds(0, 12);
 8002cfa:	210c      	movs	r1, #12
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f000 f923 	bl	8002f48 <getCounterWithinBounds>
 8002d02:	4604      	mov	r4, r0
 8002d04:	f000 fac6 	bl	8003294 <getDateState>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f9a8 	bl	8003060 <getDate>
 8002d10:	4603      	mov	r3, r0
 8002d12:	b2e2      	uxtb	r2, r4
 8002d14:	705a      	strb	r2, [r3, #1]
			break;
 8002d16:	e08a      	b.n	8002e2e <configureSettings+0x50e>
		case SET_DAY:;
		    uint8_t maxDay;
		    uint8_t selectedMonth = getDate(getDateState())->Month;
 8002d18:	f000 fabc 	bl	8003294 <getDateState>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f99e 	bl	8003060 <getDate>
 8002d24:	4603      	mov	r3, r0
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	70fb      	strb	r3, [r7, #3]

		    if(selectedMonth == 2) {
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d102      	bne.n	8002d36 <configureSettings+0x416>
		    	maxDay = 29;
 8002d30:	231d      	movs	r3, #29
 8002d32:	713b      	strb	r3, [r7, #4]
 8002d34:	e010      	b.n	8002d58 <configureSettings+0x438>
		    } else if(selectedMonth == 4 || selectedMonth == 6 || selectedMonth == 9 || selectedMonth == 11) {
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d008      	beq.n	8002d4e <configureSettings+0x42e>
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d005      	beq.n	8002d4e <configureSettings+0x42e>
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d002      	beq.n	8002d4e <configureSettings+0x42e>
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b0b      	cmp	r3, #11
 8002d4c:	d102      	bne.n	8002d54 <configureSettings+0x434>
		        maxDay = 30;
 8002d4e:	231e      	movs	r3, #30
 8002d50:	713b      	strb	r3, [r7, #4]
 8002d52:	e001      	b.n	8002d58 <configureSettings+0x438>
		    } else {
		        maxDay = 31;
 8002d54:	231f      	movs	r3, #31
 8002d56:	713b      	strb	r3, [r7, #4]
		    }

			setDisplayString("%02d%02d", getDate(getDateState())->Month, getCounterWithinBounds(1, maxDay));
 8002d58:	f000 fa9c 	bl	8003294 <getDateState>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f97e 	bl	8003060 <getDate>
 8002d64:	4603      	mov	r3, r0
 8002d66:	785b      	ldrb	r3, [r3, #1]
 8002d68:	461c      	mov	r4, r3
 8002d6a:	793b      	ldrb	r3, [r7, #4]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f000 f8ea 	bl	8002f48 <getCounterWithinBounds>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4832      	ldr	r0, [pc, #200]	@ (8002e44 <configureSettings+0x524>)
 8002d7c:	f000 fae6 	bl	800334c <setDisplayString>
			break;
 8002d80:	e055      	b.n	8002e2e <configureSettings+0x50e>
		case SET_YEAR:
			setDisplayString("20%02d", getCounterWithinBounds(0, 99));
 8002d82:	2163      	movs	r1, #99	@ 0x63
 8002d84:	2000      	movs	r0, #0
 8002d86:	f000 f8df 	bl	8002f48 <getCounterWithinBounds>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4830      	ldr	r0, [pc, #192]	@ (8002e50 <configureSettings+0x530>)
 8002d90:	f000 fadc 	bl	800334c <setDisplayString>
		    getDate(getDateState())->Year = (uint8_t) getCounterWithinBounds(0, 99);
 8002d94:	2163      	movs	r1, #99	@ 0x63
 8002d96:	2000      	movs	r0, #0
 8002d98:	f000 f8d6 	bl	8002f48 <getCounterWithinBounds>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	f000 fa79 	bl	8003294 <getDateState>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 f95b 	bl	8003060 <getDate>
 8002daa:	4603      	mov	r3, r0
 8002dac:	b2e2      	uxtb	r2, r4
 8002dae:	70da      	strb	r2, [r3, #3]
			break;
 8002db0:	e03d      	b.n	8002e2e <configureSettings+0x50e>
		case SET_COLOR:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002db2:	2205      	movs	r2, #5
 8002db4:	4920      	ldr	r1, [pc, #128]	@ (8002e38 <configureSettings+0x518>)
 8002db6:	4821      	ldr	r0, [pc, #132]	@ (8002e3c <configureSettings+0x51c>)
 8002db8:	f7fe ffaa 	bl	8001d10 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_COLOR, (LED *) currentDisplay, CONSTANT);
 8002dbc:	2205      	movs	r2, #5
 8002dbe:	491e      	ldr	r1, [pc, #120]	@ (8002e38 <configureSettings+0x518>)
 8002dc0:	4824      	ldr	r0, [pc, #144]	@ (8002e54 <configureSettings+0x534>)
 8002dc2:	f7fe ffa5 	bl	8001d10 <addBitmapToDisplay>
			setDisplayString("%02d", getCounterWithinBounds(0, 100));
 8002dc6:	2164      	movs	r1, #100	@ 0x64
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f000 f8bd 	bl	8002f48 <getCounterWithinBounds>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4821      	ldr	r0, [pc, #132]	@ (8002e58 <configureSettings+0x538>)
 8002dd4:	f000 faba 	bl	800334c <setDisplayString>
			setColorWithPreset(getCounterWithinBounds(0, 100));
 8002dd8:	2164      	movs	r1, #100	@ 0x64
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f000 f8b4 	bl	8002f48 <getCounterWithinBounds>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fae2 	bl	80033ac <setColorWithPreset>
			updateDisplayColor();
 8002de8:	f7ff f946 	bl	8002078 <updateDisplayColor>
			break;
 8002dec:	e01f      	b.n	8002e2e <configureSettings+0x50e>
		case SET_BRIGHTNESS:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002dee:	2205      	movs	r2, #5
 8002df0:	4911      	ldr	r1, [pc, #68]	@ (8002e38 <configureSettings+0x518>)
 8002df2:	4812      	ldr	r0, [pc, #72]	@ (8002e3c <configureSettings+0x51c>)
 8002df4:	f7fe ff8c 	bl	8001d10 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_COLOR, (LED *) currentDisplay, CONSTANT);
 8002df8:	2205      	movs	r2, #5
 8002dfa:	490f      	ldr	r1, [pc, #60]	@ (8002e38 <configureSettings+0x518>)
 8002dfc:	4815      	ldr	r0, [pc, #84]	@ (8002e54 <configureSettings+0x534>)
 8002dfe:	f7fe ff87 	bl	8001d10 <addBitmapToDisplay>
			setDisplayString("%02d", getCounterWithinBounds(1, 100));
 8002e02:	2164      	movs	r1, #100	@ 0x64
 8002e04:	2001      	movs	r0, #1
 8002e06:	f000 f89f 	bl	8002f48 <getCounterWithinBounds>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4812      	ldr	r0, [pc, #72]	@ (8002e58 <configureSettings+0x538>)
 8002e10:	f000 fa9c 	bl	800334c <setDisplayString>
			setBrightnessAsPercent(getCounterWithinBounds(1, 100));
 8002e14:	2164      	movs	r1, #100	@ 0x64
 8002e16:	2001      	movs	r0, #1
 8002e18:	f000 f896 	bl	8002f48 <getCounterWithinBounds>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fafd 	bl	8003420 <setBrightnessAsPercent>
			updateDisplayColor();
 8002e26:	f7ff f927 	bl	8002078 <updateDisplayColor>
			break;
 8002e2a:	e000      	b.n	8002e2e <configureSettings+0x50e>
		default:
			break;
 8002e2c:	bf00      	nop
	}


}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20002054 	.word	0x20002054
 8002e3c:	08008d24 	.word	0x08008d24
 8002e40:	08008d58 	.word	0x08008d58
 8002e44:	08008894 	.word	0x08008894
 8002e48:	08008d8c 	.word	0x08008d8c
 8002e4c:	08008da6 	.word	0x08008da6
 8002e50:	080088a0 	.word	0x080088a0
 8002e54:	08008d72 	.word	0x08008d72
 8002e58:	080088a8 	.word	0x080088a8

08002e5c <clamp>:
uint8_t colorSelection;
uint32_t lastInputMs;

#define UNDERFLOW_TRIGGER 65500

uint32_t clamp(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]

	if(value > UNDERFLOW_TRIGGER) return minVal;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <clamp+0x1a>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	e00c      	b.n	8002e90 <clamp+0x34>
	if (value < minVal) return minVal;
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d201      	bcs.n	8002e82 <clamp+0x26>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	e006      	b.n	8002e90 <clamp+0x34>
	if (value > maxVal) return maxVal;
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d901      	bls.n	8002e8e <clamp+0x32>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	e000      	b.n	8002e90 <clamp+0x34>
	return value;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <setCounterBounds>:

void setCounterBounds(uint32_t _minVal, uint32_t _maxVal) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
	minVal = _minVal;
 8002ea6:	4a06      	ldr	r2, [pc, #24]	@ (8002ec0 <setCounterBounds+0x24>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6013      	str	r3, [r2, #0]
	maxVal = _maxVal;
 8002eac:	4a05      	ldr	r2, [pc, #20]	@ (8002ec4 <setCounterBounds+0x28>)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6013      	str	r3, [r2, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000233c 	.word	0x2000233c
 8002ec4:	20000060 	.word	0x20000060

08002ec8 <getDeviceState>:

DeviceState getDeviceState(void) {
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
	return currentState;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <getDeviceState+0x14>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20002324 	.word	0x20002324

08002ee0 <setDeviceState>:

void setDeviceState(DeviceState _currentState) {
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
	currentState = _currentState;
 8002eea:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <setDeviceState+0x1c>)
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	7013      	strb	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	20002324 	.word	0x20002324

08002f00 <getCounter>:

uint32_t getCounter(void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	setCounter(clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal));
 8002f04:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <getCounter+0x3c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f40 <getCounter+0x40>)
 8002f0c:	6811      	ldr	r1, [r2, #0]
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <getCounter+0x44>)
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ffa2 	bl	8002e5c <clamp>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f85e 	bl	8002fdc <setCounter>
	return clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal);
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <getCounter+0x3c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <getCounter+0x40>)
 8002f28:	6811      	ldr	r1, [r2, #0]
 8002f2a:	4a06      	ldr	r2, [pc, #24]	@ (8002f44 <getCounter+0x44>)
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff94 	bl	8002e5c <clamp>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200023b0 	.word	0x200023b0
 8002f40:	2000233c 	.word	0x2000233c
 8002f44:	20000060 	.word	0x20000060

08002f48 <getCounterWithinBounds>:

uint32_t getCounterWithinBounds(uint32_t _minVal, uint32_t _maxVal) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	minVal = _minVal;
 8002f52:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <getCounterWithinBounds+0x50>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6013      	str	r3, [r2, #0]
	maxVal = _maxVal;
 8002f58:	4a10      	ldr	r2, [pc, #64]	@ (8002f9c <getCounterWithinBounds+0x54>)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6013      	str	r3, [r2, #0]
	setCounter(clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal));
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <getCounterWithinBounds+0x58>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	4a0c      	ldr	r2, [pc, #48]	@ (8002f98 <getCounterWithinBounds+0x50>)
 8002f66:	6811      	ldr	r1, [r2, #0]
 8002f68:	4a0c      	ldr	r2, [pc, #48]	@ (8002f9c <getCounterWithinBounds+0x54>)
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff75 	bl	8002e5c <clamp>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f831 	bl	8002fdc <setCounter>
	return clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <getCounterWithinBounds+0x58>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <getCounterWithinBounds+0x50>)
 8002f82:	6811      	ldr	r1, [r2, #0]
 8002f84:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <getCounterWithinBounds+0x54>)
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff67 	bl	8002e5c <clamp>
 8002f8e:	4603      	mov	r3, r0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2000233c 	.word	0x2000233c
 8002f9c:	20000060 	.word	0x20000060
 8002fa0:	200023b0 	.word	0x200023b0

08002fa4 <getLastUserInput>:

uint32_t getLastUserInput(void) {
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
	return lastInputMs;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <getLastUserInput+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20002344 	.word	0x20002344

08002fbc <setLastUserInput>:

void setLastUserInput(uint32_t _counterLastChanged) {
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	lastInputMs = _counterLastChanged;
 8002fc4:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <setLastUserInput+0x1c>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6013      	str	r3, [r2, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20002344 	.word	0x20002344

08002fdc <setCounter>:

void setCounter(uint32_t _counter) {
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	setCounterBounds(0,-1);
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7ff ff57 	bl	8002e9c <setCounterBounds>
	if(_counter != counter) {
 8002fee:	4b12      	ldr	r3, [pc, #72]	@ (8003038 <setCounter+0x5c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d004      	beq.n	8003002 <setCounter+0x26>
		lastInputMs = HAL_GetTick();
 8002ff8:	f001 f82c 	bl	8004054 <HAL_GetTick>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800303c <setCounter+0x60>)
 8003000:	6013      	str	r3, [r2, #0]
	}
	counter = clamp(_counter, minVal, maxVal);
 8003002:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <setCounter+0x64>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a0f      	ldr	r2, [pc, #60]	@ (8003044 <setCounter+0x68>)
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff25 	bl	8002e5c <clamp>
 8003012:	4603      	mov	r3, r0
 8003014:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <setCounter+0x5c>)
 8003016:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, clamp(_counter, minVal, maxVal));
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <setCounter+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <setCounter+0x68>)
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	4909      	ldr	r1, [pc, #36]	@ (8003048 <setCounter+0x6c>)
 8003022:	680c      	ldr	r4, [r1, #0]
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff18 	bl	8002e5c <clamp>
 800302c:	4603      	mov	r3, r0
 800302e:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	20002328 	.word	0x20002328
 800303c:	20002344 	.word	0x20002344
 8003040:	2000233c 	.word	0x2000233c
 8003044:	20000060 	.word	0x20000060
 8003048:	200023b0 	.word	0x200023b0

0800304c <getTime>:

uint32_t getSelected(void) {
	return counter;
}

RTC_TimeTypeDef* getTime(void) {
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
	return &sTime;
 8003050:	4b02      	ldr	r3, [pc, #8]	@ (800305c <getTime+0x10>)
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	20002458 	.word	0x20002458

08003060 <getDate>:

RTC_DateTypeDef* getDate(DateType type) {
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
	switch(type) {
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d00a      	beq.n	8003086 <getDate+0x26>
 8003070:	2b02      	cmp	r3, #2
 8003072:	dc0a      	bgt.n	800308a <getDate+0x2a>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <getDate+0x1e>
 8003078:	2b01      	cmp	r3, #1
 800307a:	d002      	beq.n	8003082 <getDate+0x22>
 800307c:	e005      	b.n	800308a <getDate+0x2a>
		case SYSTEM_DATE:
			return &sDate;
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <getDate+0x38>)
 8003080:	e004      	b.n	800308c <getDate+0x2c>
		case ANNIVERSARY_DATE:
			return &aDate;
 8003082:	4b06      	ldr	r3, [pc, #24]	@ (800309c <getDate+0x3c>)
 8003084:	e002      	b.n	800308c <getDate+0x2c>
		case BIRTHDAY_DATE:
			return &bDate;
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <getDate+0x40>)
 8003088:	e000      	b.n	800308c <getDate+0x2c>
		default:
			return &sDate;
 800308a:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <getDate+0x38>)
	}
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	20000064 	.word	0x20000064
 800309c:	20000068 	.word	0x20000068
 80030a0:	2000006c 	.word	0x2000006c

080030a4 <setDate>:

void setDate(RTC_DateTypeDef tDate, DateType type) {
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
    switch(type) {
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d014      	beq.n	80030e0 <setDate+0x3c>
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	dc1a      	bgt.n	80030f0 <setDate+0x4c>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <setDate+0x20>
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d006      	beq.n	80030d0 <setDate+0x2c>
        case BIRTHDAY_DATE:
        	tDate.Year = 0;
            bDate = tDate;
            break;
        default:
        	break;
 80030c2:	e015      	b.n	80030f0 <setDate+0x4c>
            sDate = tDate;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <setDate+0x5c>)
 80030c6:	461a      	mov	r2, r3
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	6010      	str	r0, [r2, #0]
            break;
 80030ce:	e010      	b.n	80030f2 <setDate+0x4e>
        	tDate.Year = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	71fb      	strb	r3, [r7, #7]
            aDate = tDate;
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <setDate+0x60>)
 80030d6:	461a      	mov	r2, r3
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	6010      	str	r0, [r2, #0]
            break;
 80030de:	e008      	b.n	80030f2 <setDate+0x4e>
        	tDate.Year = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	71fb      	strb	r3, [r7, #7]
            bDate = tDate;
 80030e4:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <setDate+0x64>)
 80030e6:	461a      	mov	r2, r3
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	6010      	str	r0, [r2, #0]
            break;
 80030ee:	e000      	b.n	80030f2 <setDate+0x4e>
        	break;
 80030f0:	bf00      	nop
    }
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000064 	.word	0x20000064
 8003104:	20000068 	.word	0x20000068
 8003108:	2000006c 	.word	0x2000006c
 800310c:	00000000 	.word	0x00000000

08003110 <getColor>:

void setColor(RgbColor _color) {
	color = _color;
}

RgbColor getColor(void) {
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b0c2      	sub	sp, #264	@ 0x108
 8003114:	af00      	add	r7, sp, #0
	const uint8_t gamma_lut[256] = {
 8003116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800311a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800311e:	4a5a      	ldr	r2, [pc, #360]	@ (8003288 <getColor+0x178>)
 8003120:	4618      	mov	r0, r3
 8003122:	4611      	mov	r1, r2
 8003124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003128:	461a      	mov	r2, r3
 800312a:	f004 fbcc 	bl	80078c6 <memcpy>
	   170, 171, 173, 175, 176, 178, 180, 181, 183, 185, 186, 188, 190, 192, 193, 195,
	   197, 199, 200, 202, 204, 206, 207, 209, 211, 213, 215, 217, 218, 220, 222, 224,
	   226, 228, 230, 232, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255,
	  };

	uint8_t corrected_brightness = gamma_lut[brightness];
 800312e:	4b57      	ldr	r3, [pc, #348]	@ (800328c <getColor+0x17c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800313c:	5c9b      	ldrb	r3, [r3, r2]
 800313e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

	RgbColor _color;

	_color.r = (uint8_t) ((double) gamma_lut[color.r] * (double) ((double) corrected_brightness / (double) 255.0));
 8003142:	4b53      	ldr	r3, [pc, #332]	@ (8003290 <getColor+0x180>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800314c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003150:	5c9b      	ldrb	r3, [r3, r2]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f9d6 	bl	8000504 <__aeabi_ui2d>
 8003158:	4604      	mov	r4, r0
 800315a:	460d      	mov	r5, r1
 800315c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f9cf 	bl	8000504 <__aeabi_ui2d>
 8003166:	a346      	add	r3, pc, #280	@ (adr r3, 8003280 <getColor+0x170>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f7fd fb6e 	bl	800084c <__aeabi_ddiv>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4620      	mov	r0, r4
 8003176:	4629      	mov	r1, r5
 8003178:	f7fd fa3e 	bl	80005f8 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fc4a 	bl	8000a1c <__aeabi_d2uiz>
 8003188:	4603      	mov	r3, r0
 800318a:	b2da      	uxtb	r2, r3
 800318c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003194:	701a      	strb	r2, [r3, #0]
	_color.g = (uint8_t) ((double) gamma_lut[color.g] * (double) ((double) corrected_brightness / (double) 255.0));
 8003196:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <getColor+0x180>)
 8003198:	785b      	ldrb	r3, [r3, #1]
 800319a:	461a      	mov	r2, r3
 800319c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031a4:	5c9b      	ldrb	r3, [r3, r2]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f9ac 	bl	8000504 <__aeabi_ui2d>
 80031ac:	4604      	mov	r4, r0
 80031ae:	460d      	mov	r5, r1
 80031b0:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f9a5 	bl	8000504 <__aeabi_ui2d>
 80031ba:	a331      	add	r3, pc, #196	@ (adr r3, 8003280 <getColor+0x170>)
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f7fd fb44 	bl	800084c <__aeabi_ddiv>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4620      	mov	r0, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	f7fd fa14 	bl	80005f8 <__aeabi_dmul>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	f7fd fc20 	bl	8000a1c <__aeabi_d2uiz>
 80031dc:	4603      	mov	r3, r0
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031e8:	705a      	strb	r2, [r3, #1]
	_color.b = (uint8_t) ((double) gamma_lut[color.b] * (double) ((double) corrected_brightness  / (double) 255.0));
 80031ea:	4b29      	ldr	r3, [pc, #164]	@ (8003290 <getColor+0x180>)
 80031ec:	789b      	ldrb	r3, [r3, #2]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031f8:	5c9b      	ldrb	r3, [r3, r2]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f982 	bl	8000504 <__aeabi_ui2d>
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
 8003204:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f97b 	bl	8000504 <__aeabi_ui2d>
 800320e:	a31c      	add	r3, pc, #112	@ (adr r3, 8003280 <getColor+0x170>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd fb1a 	bl	800084c <__aeabi_ddiv>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4620      	mov	r0, r4
 800321e:	4629      	mov	r1, r5
 8003220:	f7fd f9ea 	bl	80005f8 <__aeabi_dmul>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	f7fd fbf6 	bl	8000a1c <__aeabi_d2uiz>
 8003230:	4603      	mov	r3, r0
 8003232:	b2da      	uxtb	r2, r3
 8003234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800323c:	709a      	strb	r2, [r3, #2]

	return _color;
 800323e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003242:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003246:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	4611      	mov	r1, r2
 800324e:	8019      	strh	r1, [r3, #0]
 8003250:	3302      	adds	r3, #2
 8003252:	0c12      	lsrs	r2, r2, #16
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	f897 2104 	ldrb.w	r2, [r7, #260]	@ 0x104
 800325c:	f362 0307 	bfi	r3, r2, #0, #8
 8003260:	f897 2105 	ldrb.w	r2, [r7, #261]	@ 0x105
 8003264:	f362 230f 	bfi	r3, r2, #8, #8
 8003268:	f897 2106 	ldrb.w	r2, [r7, #262]	@ 0x106
 800326c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003270:	4618      	mov	r0, r3
 8003272:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003276:	46bd      	mov	sp, r7
 8003278:	bdb0      	pop	{r4, r5, r7, pc}
 800327a:	bf00      	nop
 800327c:	f3af 8000 	nop.w
 8003280:	00000000 	.word	0x00000000
 8003284:	406fe000 	.word	0x406fe000
 8003288:	080088b0 	.word	0x080088b0
 800328c:	2000005d 	.word	0x2000005d
 8003290:	2000232c 	.word	0x2000232c

08003294 <getDateState>:

DateType getDateState(void) {
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
	return dateState;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <getDateState+0x14>)
 800329a:	781b      	ldrb	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000232f 	.word	0x2000232f

080032ac <setDateState>:

void setDateState(DateType _dateState) {
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
	dateState = _dateState;
 80032b6:	4a04      	ldr	r2, [pc, #16]	@ (80032c8 <setDateState+0x1c>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	7013      	strb	r3, [r2, #0]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	2000232f 	.word	0x2000232f

080032cc <getBrightnessAsPercent>:

uint8_t getBrightnessAsPercent(void) {
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
	return (brightness * 100) / 255;
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <getBrightnessAsPercent+0x2c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	2364      	movs	r3, #100	@ 0x64
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	4a07      	ldr	r2, [pc, #28]	@ (80032fc <getBrightnessAsPercent+0x30>)
 80032de:	fb82 1203 	smull	r1, r2, r2, r3
 80032e2:	441a      	add	r2, r3
 80032e4:	11d2      	asrs	r2, r2, #7
 80032e6:	17db      	asrs	r3, r3, #31
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	b2db      	uxtb	r3, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	2000005d 	.word	0x2000005d
 80032fc:	80808081 	.word	0x80808081

08003300 <setMode>:

uint8_t getBrightness(void) {
	return brightness;
}

void setMode(Mode _mode) {
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
	mode = _mode;
 800330a:	4a04      	ldr	r2, [pc, #16]	@ (800331c <setMode+0x1c>)
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	7013      	strb	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	2000005c 	.word	0x2000005c

08003320 <getMode>:

Mode getMode(void) {
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
	return mode;
 8003324:	4b03      	ldr	r3, [pc, #12]	@ (8003334 <getMode+0x14>)
 8003326:	781b      	ldrb	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	2000005c 	.word	0x2000005c

08003338 <getDisplayString>:

char *getDisplayString(void) {
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
	return (char *) displayStr;
 800333c:	4b02      	ldr	r3, [pc, #8]	@ (8003348 <getDisplayString+0x10>)
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20002330 	.word	0x20002330

0800334c <setDisplayString>:

void setDisplayString(const char *format, ...) {
 800334c:	b40f      	push	{r0, r1, r2, r3}
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	607b      	str	r3, [r7, #4]
    vsnprintf(displayStr, MAX_STRING_LENGTH, format, args);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	210a      	movs	r1, #10
 8003360:	4804      	ldr	r0, [pc, #16]	@ (8003374 <setDisplayString+0x28>)
 8003362:	f004 fa13 	bl	800778c <vsniprintf>
    va_end(args);
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003370:	b004      	add	sp, #16
 8003372:	4770      	bx	lr
 8003374:	20002330 	.word	0x20002330

08003378 <getColorPreset>:

uint8_t getColorPreset(void) {
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	return (colorSelection * 100) / 255;
 800337c:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <getColorPreset+0x2c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	2364      	movs	r3, #100	@ 0x64
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	4a07      	ldr	r2, [pc, #28]	@ (80033a8 <getColorPreset+0x30>)
 800338a:	fb82 1203 	smull	r1, r2, r2, r3
 800338e:	441a      	add	r2, r3
 8003390:	11d2      	asrs	r2, r2, #7
 8003392:	17db      	asrs	r3, r3, #31
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	b2db      	uxtb	r3, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20002340 	.word	0x20002340
 80033a8:	80808081 	.word	0x80808081

080033ac <setColorWithPreset>:

void setColorWithPreset(uint32_t selection) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]

	if(selection == 0) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <setColorWithPreset+0x22>
		color.r = 0xFF;
 80033ba:	4b16      	ldr	r3, [pc, #88]	@ (8003414 <setColorWithPreset+0x68>)
 80033bc:	22ff      	movs	r2, #255	@ 0xff
 80033be:	701a      	strb	r2, [r3, #0]
		color.g = 0xFF;
 80033c0:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <setColorWithPreset+0x68>)
 80033c2:	22ff      	movs	r2, #255	@ 0xff
 80033c4:	705a      	strb	r2, [r3, #1]
		color.b = 0xFF;
 80033c6:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <setColorWithPreset+0x68>)
 80033c8:	22ff      	movs	r2, #255	@ 0xff
 80033ca:	709a      	strb	r2, [r3, #2]
	    hsv.h = colorSelection;

	    color = hsvToRgb(hsv);

	}
}
 80033cc:	e01e      	b.n	800340c <setColorWithPreset+0x60>
		colorSelection = (selection * 255) / 100;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	4a10      	ldr	r2, [pc, #64]	@ (8003418 <setColorWithPreset+0x6c>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <setColorWithPreset+0x70>)
 80033e2:	701a      	strb	r2, [r3, #0]
	    hsv.s = 255;
 80033e4:	23ff      	movs	r3, #255	@ 0xff
 80033e6:	737b      	strb	r3, [r7, #13]
	    hsv.v = 255;
 80033e8:	23ff      	movs	r3, #255	@ 0xff
 80033ea:	73bb      	strb	r3, [r7, #14]
	    hsv.h = colorSelection;
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <setColorWithPreset+0x70>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	733b      	strb	r3, [r7, #12]
	    color = hsvToRgb(hsv);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7fe fbe2 	bl	8001bbc <hsvToRgb>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <setColorWithPreset+0x68>)
 80033fc:	4611      	mov	r1, r2
 80033fe:	7019      	strb	r1, [r3, #0]
 8003400:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003404:	7059      	strb	r1, [r3, #1]
 8003406:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800340a:	709a      	strb	r2, [r3, #2]
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	2000232c 	.word	0x2000232c
 8003418:	51eb851f 	.word	0x51eb851f
 800341c:	20002340 	.word	0x20002340

08003420 <setBrightnessAsPercent>:

void setBrightnessAsPercent(uint8_t _brightness) {
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
	brightness = (_brightness * 255) / 100;
 800342a:	79fa      	ldrb	r2, [r7, #7]
 800342c:	4613      	mov	r3, r2
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	4a07      	ldr	r2, [pc, #28]	@ (8003450 <setBrightnessAsPercent+0x30>)
 8003434:	fb82 1203 	smull	r1, r2, r2, r3
 8003438:	1152      	asrs	r2, r2, #5
 800343a:	17db      	asrs	r3, r3, #31
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	b2da      	uxtb	r2, r3
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <setBrightnessAsPercent+0x34>)
 8003442:	701a      	strb	r2, [r3, #0]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	51eb851f 	.word	0x51eb851f
 8003454:	2000005d 	.word	0x2000005d

08003458 <isAnniversarySet>:

bool isAnniversarySet(void) {
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
	return !(aDate.Year == 99);
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <isAnniversarySet+0x1c>)
 800345e:	78db      	ldrb	r3, [r3, #3]
 8003460:	2b63      	cmp	r3, #99	@ 0x63
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20000068 	.word	0x20000068

08003478 <isBirthdaySet>:

bool isBirthdaySet(void) {
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
	return !(bDate.Year == 99);
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <isBirthdaySet+0x1c>)
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	2b63      	cmp	r3, #99	@ 0x63
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	2000006c 	.word	0x2000006c

08003498 <deleteAnniversary>:

void deleteAnniversary(void) {
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
	RTC_DateTypeDef tDate = {0, 0, 0, 99};
 800349e:	2300      	movs	r3, #0
 80034a0:	713b      	strb	r3, [r7, #4]
 80034a2:	2300      	movs	r3, #0
 80034a4:	717b      	strb	r3, [r7, #5]
 80034a6:	2300      	movs	r3, #0
 80034a8:	71bb      	strb	r3, [r7, #6]
 80034aa:	2363      	movs	r3, #99	@ 0x63
 80034ac:	71fb      	strb	r3, [r7, #7]
	aDate = tDate;
 80034ae:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <deleteAnniversary+0x2c>)
 80034b0:	461a      	mov	r2, r3
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	6010      	str	r0, [r2, #0]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20000068 	.word	0x20000068

080034c8 <deleteBirthday>:

void deleteBirthday(void) {
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
	RTC_DateTypeDef tDate = {0, 0, 0, 99};
 80034ce:	2300      	movs	r3, #0
 80034d0:	713b      	strb	r3, [r7, #4]
 80034d2:	2300      	movs	r3, #0
 80034d4:	717b      	strb	r3, [r7, #5]
 80034d6:	2300      	movs	r3, #0
 80034d8:	71bb      	strb	r3, [r7, #6]
 80034da:	2363      	movs	r3, #99	@ 0x63
 80034dc:	71fb      	strb	r3, [r7, #7]
	bDate = tDate;
 80034de:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <deleteBirthday+0x2c>)
 80034e0:	461a      	mov	r2, r3
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	6010      	str	r0, [r2, #0]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	2000006c 	.word	0x2000006c

080034f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034fe:	f000 fd43 	bl	8003f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003502:	f000 f845 	bl	8003590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003506:	f000 fa1b 	bl	8003940 <MX_GPIO_Init>
  MX_DMA_Init();
 800350a:	f000 f9f9 	bl	8003900 <MX_DMA_Init>
  MX_TIM1_Init();
 800350e:	f000 f903 	bl	8003718 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003512:	f000 f9a1 	bl	8003858 <MX_TIM3_Init>
  MX_RTC_Init();
 8003516:	f000 f8a5 	bl	8003664 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 800351a:	213c      	movs	r1, #60	@ 0x3c
 800351c:	4818      	ldr	r0, [pc, #96]	@ (8003580 <main+0x88>)
 800351e:	f003 f807 	bl	8006530 <HAL_TIM_Encoder_Start>
  setColorWithPreset(0);
 8003522:	2000      	movs	r0, #0
 8003524:	f7ff ff42 	bl	80033ac <setColorWithPreset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(checkButtonPress()){
 8003528:	f7fe ffee 	bl	8002508 <checkButtonPress>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <main+0x3e>
		switchState();
 8003532:	f7ff f811 	bl	8002558 <switchState>
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003536:	2200      	movs	r2, #0
 8003538:	4912      	ldr	r1, [pc, #72]	@ (8003584 <main+0x8c>)
 800353a:	4813      	ldr	r0, [pc, #76]	@ (8003588 <main+0x90>)
 800353c:	f002 fa45 	bl	80059ca <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003540:	2200      	movs	r2, #0
 8003542:	4912      	ldr	r1, [pc, #72]	@ (800358c <main+0x94>)
 8003544:	4810      	ldr	r0, [pc, #64]	@ (8003588 <main+0x90>)
 8003546:	f002 fb22 	bl	8005b8e <HAL_RTC_GetDate>

	configureSettings();
 800354a:	f7ff f9e9 	bl	8002920 <configureSettings>


	Segment_Display(getDisplayString());
 800354e:	f7ff fef3 	bl	8003338 <getDisplayString>
 8003552:	4603      	mov	r3, r0
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fce3 	bl	8000f20 <Segment_Display>



	flicker(sTime);
 800355a:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <main+0x8c>)
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	9200      	str	r2, [sp, #0]
 8003560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003562:	f7fe f8bf 	bl	80016e4 <flicker>
	rainbow(5);
 8003566:	2005      	movs	r0, #5
 8003568:	f7fe faf6 	bl	8001b58 <rainbow>
	twinkle();
 800356c:	f7fe fb06 	bl	8001b7c <twinkle>
	blink();
 8003570:	f7fe f802 	bl	8001578 <blink>
	constant();
 8003574:	f7fe f88a 	bl	800168c <constant>

	sendDisplayToDMA();
 8003578:	f7fe fe1a 	bl	80021b0 <sendDisplayToDMA>
	if(checkButtonPress()){
 800357c:	e7d4      	b.n	8003528 <main+0x30>
 800357e:	bf00      	nop
 8003580:	200023b0 	.word	0x200023b0
 8003584:	20002458 	.word	0x20002458
 8003588:	20002348 	.word	0x20002348
 800358c:	20000064 	.word	0x20000064

08003590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b094      	sub	sp, #80	@ 0x50
 8003594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003596:	f107 0320 	add.w	r3, r7, #32
 800359a:	2230      	movs	r2, #48	@ 0x30
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f004 f902 	bl	80077a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <SystemClock_Config+0xcc>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	4a27      	ldr	r2, [pc, #156]	@ (800365c <SystemClock_Config+0xcc>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c4:	4b25      	ldr	r3, [pc, #148]	@ (800365c <SystemClock_Config+0xcc>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d0:	2300      	movs	r3, #0
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	4b22      	ldr	r3, [pc, #136]	@ (8003660 <SystemClock_Config+0xd0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a21      	ldr	r2, [pc, #132]	@ (8003660 <SystemClock_Config+0xd0>)
 80035da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003660 <SystemClock_Config+0xd0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80035ec:	2305      	movs	r3, #5
 80035ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80035f6:	2301      	movs	r3, #1
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035fa:	2302      	movs	r3, #2
 80035fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003604:	230c      	movs	r3, #12
 8003606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003608:	2348      	movs	r3, #72	@ 0x48
 800360a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800360c:	2302      	movs	r3, #2
 800360e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003610:	2304      	movs	r3, #4
 8003612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003614:	f107 0320 	add.w	r3, r7, #32
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fba5 	bl	8004d68 <HAL_RCC_OscConfig>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003624:	f000 fa10 	bl	8003a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003628:	230f      	movs	r3, #15
 800362a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800362c:	2302      	movs	r3, #2
 800362e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800363e:	f107 030c 	add.w	r3, r7, #12
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fe07 	bl	8005258 <HAL_RCC_ClockConfig>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003650:	f000 f9fa 	bl	8003a48 <Error_Handler>
  }
}
 8003654:	bf00      	nop
 8003656:	3750      	adds	r7, #80	@ 0x50
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	40007000 	.word	0x40007000

08003664 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003678:	2300      	movs	r3, #0
 800367a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800367c:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <MX_RTC_Init+0xac>)
 800367e:	4a25      	ldr	r2, [pc, #148]	@ (8003714 <MX_RTC_Init+0xb0>)
 8003680:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003682:	4b23      	ldr	r3, [pc, #140]	@ (8003710 <MX_RTC_Init+0xac>)
 8003684:	2200      	movs	r2, #0
 8003686:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003688:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <MX_RTC_Init+0xac>)
 800368a:	227f      	movs	r2, #127	@ 0x7f
 800368c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <MX_RTC_Init+0xac>)
 8003690:	22ff      	movs	r2, #255	@ 0xff
 8003692:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003694:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <MX_RTC_Init+0xac>)
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800369a:	4b1d      	ldr	r3, [pc, #116]	@ (8003710 <MX_RTC_Init+0xac>)
 800369c:	2200      	movs	r2, #0
 800369e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <MX_RTC_Init+0xac>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036a6:	481a      	ldr	r0, [pc, #104]	@ (8003710 <MX_RTC_Init+0xac>)
 80036a8:	f002 f872 	bl	8005790 <HAL_RTC_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80036b2:	f000 f9c9 	bl	8003a48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 80036b6:	2303      	movs	r3, #3
 80036b8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 80036ba:	2359      	movs	r3, #89	@ 0x59
 80036bc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 80036be:	2350      	movs	r3, #80	@ 0x50
 80036c0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	2201      	movs	r2, #1
 80036ce:	4619      	mov	r1, r3
 80036d0:	480f      	ldr	r0, [pc, #60]	@ (8003710 <MX_RTC_Init+0xac>)
 80036d2:	f002 f8e0 	bl	8005896 <HAL_RTC_SetTime>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80036dc:	f000 f9b4 	bl	8003a48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036e0:	2301      	movs	r3, #1
 80036e2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80036e4:	2301      	movs	r3, #1
 80036e6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80036e8:	2301      	movs	r3, #1
 80036ea:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80036f0:	463b      	mov	r3, r7
 80036f2:	2201      	movs	r2, #1
 80036f4:	4619      	mov	r1, r3
 80036f6:	4806      	ldr	r0, [pc, #24]	@ (8003710 <MX_RTC_Init+0xac>)
 80036f8:	f002 f9c5 	bl	8005a86 <HAL_RTC_SetDate>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003702:	f000 f9a1 	bl	8003a48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20002348 	.word	0x20002348
 8003714:	40002800 	.word	0x40002800

08003718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b096      	sub	sp, #88	@ 0x58
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800371e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	609a      	str	r2, [r3, #8]
 800372a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	611a      	str	r2, [r3, #16]
 8003746:	615a      	str	r2, [r3, #20]
 8003748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2220      	movs	r2, #32
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f004 f829 	bl	80077a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003756:	4b3e      	ldr	r3, [pc, #248]	@ (8003850 <MX_TIM1_Init+0x138>)
 8003758:	4a3e      	ldr	r2, [pc, #248]	@ (8003854 <MX_TIM1_Init+0x13c>)
 800375a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800375c:	4b3c      	ldr	r3, [pc, #240]	@ (8003850 <MX_TIM1_Init+0x138>)
 800375e:	2200      	movs	r2, #0
 8003760:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003762:	4b3b      	ldr	r3, [pc, #236]	@ (8003850 <MX_TIM1_Init+0x138>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8003768:	4b39      	ldr	r3, [pc, #228]	@ (8003850 <MX_TIM1_Init+0x138>)
 800376a:	2259      	movs	r2, #89	@ 0x59
 800376c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376e:	4b38      	ldr	r3, [pc, #224]	@ (8003850 <MX_TIM1_Init+0x138>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003774:	4b36      	ldr	r3, [pc, #216]	@ (8003850 <MX_TIM1_Init+0x138>)
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800377a:	4b35      	ldr	r3, [pc, #212]	@ (8003850 <MX_TIM1_Init+0x138>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003780:	4833      	ldr	r0, [pc, #204]	@ (8003850 <MX_TIM1_Init+0x138>)
 8003782:	f002 fb11 	bl	8005da8 <HAL_TIM_Base_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800378c:	f000 f95c 	bl	8003a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003794:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003796:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800379a:	4619      	mov	r1, r3
 800379c:	482c      	ldr	r0, [pc, #176]	@ (8003850 <MX_TIM1_Init+0x138>)
 800379e:	f003 f907 	bl	80069b0 <HAL_TIM_ConfigClockSource>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80037a8:	f000 f94e 	bl	8003a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037ac:	4828      	ldr	r0, [pc, #160]	@ (8003850 <MX_TIM1_Init+0x138>)
 80037ae:	f002 fb4a 	bl	8005e46 <HAL_TIM_PWM_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80037b8:	f000 f946 	bl	8003a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037bc:	2300      	movs	r3, #0
 80037be:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80037c8:	4619      	mov	r1, r3
 80037ca:	4821      	ldr	r0, [pc, #132]	@ (8003850 <MX_TIM1_Init+0x138>)
 80037cc:	f003 fd9c 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80037d6:	f000 f937 	bl	8003a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037da:	2360      	movs	r3, #96	@ 0x60
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037e2:	2300      	movs	r3, #0
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037e6:	2300      	movs	r3, #0
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037fa:	2200      	movs	r2, #0
 80037fc:	4619      	mov	r1, r3
 80037fe:	4814      	ldr	r0, [pc, #80]	@ (8003850 <MX_TIM1_Init+0x138>)
 8003800:	f003 f814 	bl	800682c <HAL_TIM_PWM_ConfigChannel>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800380a:	f000 f91d 	bl	8003a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003826:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003828:	2300      	movs	r3, #0
 800382a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4807      	ldr	r0, [pc, #28]	@ (8003850 <MX_TIM1_Init+0x138>)
 8003832:	f003 fdd7 	bl	80073e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800383c:	f000 f904 	bl	8003a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003840:	4803      	ldr	r0, [pc, #12]	@ (8003850 <MX_TIM1_Init+0x138>)
 8003842:	f000 fa21 	bl	8003c88 <HAL_TIM_MspPostInit>

}
 8003846:	bf00      	nop
 8003848:	3758      	adds	r7, #88	@ 0x58
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20002368 	.word	0x20002368
 8003854:	40010000 	.word	0x40010000

08003858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08c      	sub	sp, #48	@ 0x30
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800385e:	f107 030c 	add.w	r3, r7, #12
 8003862:	2224      	movs	r2, #36	@ 0x24
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f003 ff9e 	bl	80077a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800386c:	1d3b      	adds	r3, r7, #4
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003874:	4b20      	ldr	r3, [pc, #128]	@ (80038f8 <MX_TIM3_Init+0xa0>)
 8003876:	4a21      	ldr	r2, [pc, #132]	@ (80038fc <MX_TIM3_Init+0xa4>)
 8003878:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800387a:	4b1f      	ldr	r3, [pc, #124]	@ (80038f8 <MX_TIM3_Init+0xa0>)
 800387c:	2204      	movs	r2, #4
 800387e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003880:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <MX_TIM3_Init+0xa0>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003886:	4b1c      	ldr	r3, [pc, #112]	@ (80038f8 <MX_TIM3_Init+0xa0>)
 8003888:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800388c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388e:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <MX_TIM3_Init+0xa0>)
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003894:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <MX_TIM3_Init+0xa0>)
 8003896:	2200      	movs	r2, #0
 8003898:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800389a:	2303      	movs	r3, #3
 800389c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800389e:	2302      	movs	r3, #2
 80038a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038a2:	2301      	movs	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80038ae:	2302      	movs	r3, #2
 80038b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038b2:	2301      	movs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038b6:	2300      	movs	r3, #0
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	4619      	mov	r1, r3
 80038c4:	480c      	ldr	r0, [pc, #48]	@ (80038f8 <MX_TIM3_Init+0xa0>)
 80038c6:	f002 fd8d 	bl	80063e4 <HAL_TIM_Encoder_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80038d0:	f000 f8ba 	bl	8003a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	4619      	mov	r1, r3
 80038e0:	4805      	ldr	r0, [pc, #20]	@ (80038f8 <MX_TIM3_Init+0xa0>)
 80038e2:	f003 fd11 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80038ec:	f000 f8ac 	bl	8003a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038f0:	bf00      	nop
 80038f2:	3730      	adds	r7, #48	@ 0x30
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	200023b0 	.word	0x200023b0
 80038fc:	40000400 	.word	0x40000400

08003900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <MX_DMA_Init+0x3c>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	4a0b      	ldr	r2, [pc, #44]	@ (800393c <MX_DMA_Init+0x3c>)
 8003910:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003914:	6313      	str	r3, [r2, #48]	@ 0x30
 8003916:	4b09      	ldr	r3, [pc, #36]	@ (800393c <MX_DMA_Init+0x3c>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2108      	movs	r1, #8
 8003926:	2039      	movs	r0, #57	@ 0x39
 8003928:	f000 fc9f 	bl	800426a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800392c:	2039      	movs	r0, #57	@ 0x39
 800392e:	f000 fcb8 	bl	80042a2 <HAL_NVIC_EnableIRQ>

}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800

08003940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	@ 0x28
 8003944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	4b38      	ldr	r3, [pc, #224]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	4a37      	ldr	r2, [pc, #220]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6313      	str	r3, [r2, #48]	@ 0x30
 8003966:	4b35      	ldr	r3, [pc, #212]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	4a30      	ldr	r2, [pc, #192]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 800397c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003980:	6313      	str	r3, [r2, #48]	@ 0x30
 8003982:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b2a      	ldr	r3, [pc, #168]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	4a29      	ldr	r2, [pc, #164]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6313      	str	r3, [r2, #48]	@ 0x30
 800399e:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	4b23      	ldr	r3, [pc, #140]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	4a22      	ldr	r2, [pc, #136]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ba:	4b20      	ldr	r3, [pc, #128]	@ (8003a3c <MX_GPIO_Init+0xfc>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 80039c6:	2200      	movs	r2, #0
 80039c8:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 80039cc:	481c      	ldr	r0, [pc, #112]	@ (8003a40 <MX_GPIO_Init+0x100>)
 80039ce:	f001 f9b1 	bl	8004d34 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 80039d2:	2200      	movs	r2, #0
 80039d4:	f241 4107 	movw	r1, #5127	@ 0x1407
 80039d8:	481a      	ldr	r0, [pc, #104]	@ (8003a44 <MX_GPIO_Init+0x104>)
 80039da:	f001 f9ab 	bl	8004d34 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 80039de:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 80039e2:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e4:	2301      	movs	r3, #1
 80039e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ec:	2300      	movs	r3, #0
 80039ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4619      	mov	r1, r3
 80039f6:	4812      	ldr	r0, [pc, #72]	@ (8003a40 <MX_GPIO_Init+0x100>)
 80039f8:	f001 f800 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 80039fc:	f241 4307 	movw	r3, #5127	@ 0x1407
 8003a00:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4619      	mov	r1, r3
 8003a14:	480b      	ldr	r0, [pc, #44]	@ (8003a44 <MX_GPIO_Init+0x104>)
 8003a16:	f000 fff1 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a24:	2301      	movs	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4805      	ldr	r0, [pc, #20]	@ (8003a44 <MX_GPIO_Init+0x104>)
 8003a30:	f000 ffe4 	bl	80049fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a34:	bf00      	nop
 8003a36:	3728      	adds	r7, #40	@ 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400

08003a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a4c:	b672      	cpsid	i
}
 8003a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <Error_Handler+0x8>

08003a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	4b21      	ldr	r3, [pc, #132]	@ (8003ae4 <HAL_MspInit+0x90>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	4a20      	ldr	r2, [pc, #128]	@ (8003ae4 <HAL_MspInit+0x90>)
 8003a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae4 <HAL_MspInit+0x90>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <HAL_MspInit+0x90>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	4a19      	ldr	r2, [pc, #100]	@ (8003ae4 <HAL_MspInit+0x90>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a86:	4b17      	ldr	r3, [pc, #92]	@ (8003ae4 <HAL_MspInit+0x90>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2101      	movs	r1, #1
 8003a96:	f06f 000b 	mvn.w	r0, #11
 8003a9a:	f000 fbe6 	bl	800426a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	f06f 000a 	mvn.w	r0, #10
 8003aa6:	f000 fbe0 	bl	800426a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2103      	movs	r1, #3
 8003aae:	f06f 0009 	mvn.w	r0, #9
 8003ab2:	f000 fbda 	bl	800426a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2104      	movs	r1, #4
 8003aba:	f06f 0004 	mvn.w	r0, #4
 8003abe:	f000 fbd4 	bl	800426a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2105      	movs	r1, #5
 8003ac6:	f06f 0003 	mvn.w	r0, #3
 8003aca:	f000 fbce 	bl	800426a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2106      	movs	r1, #6
 8003ad2:	f06f 0001 	mvn.w	r0, #1
 8003ad6:	f000 fbc8 	bl	800426a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
 8003b00:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a0c      	ldr	r2, [pc, #48]	@ (8003b38 <HAL_RTC_MspInit+0x50>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b14:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b16:	f107 0308 	add.w	r3, r7, #8
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fd48 	bl	80055b0 <HAL_RCCEx_PeriphCLKConfig>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003b26:	f7ff ff8f 	bl	8003a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b2a:	4b04      	ldr	r3, [pc, #16]	@ (8003b3c <HAL_RTC_MspInit+0x54>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b30:	bf00      	nop
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40002800 	.word	0x40002800
 8003b3c:	42470e3c 	.word	0x42470e3c

08003b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x98>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d13d      	bne.n	8003bce <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_TIM_Base_MspInit+0x9c>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	4a20      	ldr	r2, [pc, #128]	@ (8003bdc <HAL_TIM_Base_MspInit+0x9c>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b62:	4b1e      	ldr	r3, [pc, #120]	@ (8003bdc <HAL_TIM_Base_MspInit+0x9c>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003b70:	4a1c      	ldr	r2, [pc, #112]	@ (8003be4 <HAL_TIM_Base_MspInit+0xa4>)
 8003b72:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003b74:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003b76:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003b7a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b7c:	4b18      	ldr	r3, [pc, #96]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003b7e:	2240      	movs	r2, #64	@ 0x40
 8003b80:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b82:	4b17      	ldr	r3, [pc, #92]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003b88:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b8e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b96:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003b9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b9e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003bb2:	480b      	ldr	r0, [pc, #44]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003bb4:	f000 fb90 	bl	80042d8 <HAL_DMA_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003bbe:	f7ff ff43 	bl	8003a48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a06      	ldr	r2, [pc, #24]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bc8:	4a05      	ldr	r2, [pc, #20]	@ (8003be0 <HAL_TIM_Base_MspInit+0xa0>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	200023f8 	.word	0x200023f8
 8003be4:	40026428 	.word	0x40026428

08003be8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	@ 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <HAL_TIM_Encoder_MspInit+0x94>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d133      	bne.n	8003c72 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c80 <HAL_TIM_Encoder_MspInit+0x98>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	4a1b      	ldr	r2, [pc, #108]	@ (8003c80 <HAL_TIM_Encoder_MspInit+0x98>)
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1a:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <HAL_TIM_Encoder_MspInit+0x98>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <HAL_TIM_Encoder_MspInit+0x98>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	4a14      	ldr	r2, [pc, #80]	@ (8003c80 <HAL_TIM_Encoder_MspInit+0x98>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c36:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <HAL_TIM_Encoder_MspInit+0x98>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c42:	2330      	movs	r3, #48	@ 0x30
 8003c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c52:	2302      	movs	r3, #2
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4809      	ldr	r0, [pc, #36]	@ (8003c84 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003c5e:	f000 fecd 	bl	80049fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2109      	movs	r1, #9
 8003c66:	201d      	movs	r0, #29
 8003c68:	f000 faff 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c6c:	201d      	movs	r0, #29
 8003c6e:	f000 fb18 	bl	80042a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	@ 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40020400 	.word	0x40020400

08003c88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a12      	ldr	r2, [pc, #72]	@ (8003cf0 <HAL_TIM_MspPostInit+0x68>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d11e      	bne.n	8003ce8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <HAL_TIM_MspPostInit+0x6c>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	4a10      	ldr	r2, [pc, #64]	@ (8003cf4 <HAL_TIM_MspPostInit+0x6c>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cba:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf4 <HAL_TIM_MspPostInit+0x6c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003cc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4805      	ldr	r0, [pc, #20]	@ (8003cf8 <HAL_TIM_MspPostInit+0x70>)
 8003ce4:	f000 fe8a 	bl	80049fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ce8:	bf00      	nop
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40020000 	.word	0x40020000

08003cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <NMI_Handler+0x4>

08003d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <HardFault_Handler+0x4>

08003d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <MemManage_Handler+0x4>

08003d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <BusFault_Handler+0x4>

08003d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <UsageFault_Handler+0x4>

08003d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d52:	f000 f96b 	bl	800402c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d60:	4802      	ldr	r0, [pc, #8]	@ (8003d6c <TIM3_IRQHandler+0x10>)
 8003d62:	f002 fc73 	bl	800664c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200023b0 	.word	0x200023b0

08003d70 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003d74:	4802      	ldr	r0, [pc, #8]	@ (8003d80 <DMA2_Stream1_IRQHandler+0x10>)
 8003d76:	f000 fbd7 	bl	8004528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200023f8 	.word	0x200023f8

08003d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return 1;
 8003d88:	2301      	movs	r3, #1
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <_kill>:

int _kill(int pid, int sig)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d9e:	f003 fd65 	bl	800786c <__errno>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2216      	movs	r2, #22
 8003da6:	601a      	str	r2, [r3, #0]
  return -1;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_exit>:

void _exit (int status)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ffe7 	bl	8003d94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <_exit+0x12>

08003dca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e00a      	b.n	8003df2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ddc:	f3af 8000 	nop.w
 8003de0:	4601      	mov	r1, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	60ba      	str	r2, [r7, #8]
 8003de8:	b2ca      	uxtb	r2, r1
 8003dea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3301      	adds	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	dbf0      	blt.n	8003ddc <_read+0x12>
  }

  return len;
 8003dfa:	687b      	ldr	r3, [r7, #4]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e009      	b.n	8003e2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	60ba      	str	r2, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	dbf1      	blt.n	8003e16 <_write+0x12>
  }
  return len;
 8003e32:	687b      	ldr	r3, [r7, #4]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_close>:

int _close(int file)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e64:	605a      	str	r2, [r3, #4]
  return 0;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <_isatty>:

int _isatty(int file)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e7c:	2301      	movs	r3, #1
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003eac:	4a14      	ldr	r2, [pc, #80]	@ (8003f00 <_sbrk+0x5c>)
 8003eae:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <_sbrk+0x60>)
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb8:	4b13      	ldr	r3, [pc, #76]	@ (8003f08 <_sbrk+0x64>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <_sbrk+0x64>)
 8003ec2:	4a12      	ldr	r2, [pc, #72]	@ (8003f0c <_sbrk+0x68>)
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ec6:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <_sbrk+0x64>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d207      	bcs.n	8003ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ed4:	f003 fcca 	bl	800786c <__errno>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	220c      	movs	r2, #12
 8003edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e009      	b.n	8003ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ee4:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <_sbrk+0x64>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eea:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <_sbrk+0x64>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	4a05      	ldr	r2, [pc, #20]	@ (8003f08 <_sbrk+0x64>)
 8003ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20020000 	.word	0x20020000
 8003f04:	00010000 	.word	0x00010000
 8003f08:	2000246c 	.word	0x2000246c
 8003f0c:	200025c0 	.word	0x200025c0

08003f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f14:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <SystemInit+0x20>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	4a05      	ldr	r2, [pc, #20]	@ (8003f30 <SystemInit+0x20>)
 8003f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f38:	480d      	ldr	r0, [pc, #52]	@ (8003f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f3a:	490e      	ldr	r1, [pc, #56]	@ (8003f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8003f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f40:	e002      	b.n	8003f48 <LoopCopyDataInit>

08003f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f46:	3304      	adds	r3, #4

08003f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f4c:	d3f9      	bcc.n	8003f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8003f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f50:	4c0b      	ldr	r4, [pc, #44]	@ (8003f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f54:	e001      	b.n	8003f5a <LoopFillZerobss>

08003f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f58:	3204      	adds	r2, #4

08003f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f5c:	d3fb      	bcc.n	8003f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f5e:	f7ff ffd7 	bl	8003f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f62:	f003 fc89 	bl	8007878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f66:	f7ff fac7 	bl	80034f8 <main>
  bx  lr    
 8003f6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f74:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8003f78:	08008ec8 	.word	0x08008ec8
  ldr r2, =_sbss
 8003f7c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8003f80:	200025c0 	.word	0x200025c0

08003f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f84:	e7fe      	b.n	8003f84 <ADC_IRQHandler>
	...

08003f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc8 <HAL_Init+0x40>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc8 <HAL_Init+0x40>)
 8003f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f98:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <HAL_Init+0x40>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc8 <HAL_Init+0x40>)
 8003f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fa4:	4b08      	ldr	r3, [pc, #32]	@ (8003fc8 <HAL_Init+0x40>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a07      	ldr	r2, [pc, #28]	@ (8003fc8 <HAL_Init+0x40>)
 8003faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	f000 f94f 	bl	8004254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fb6:	200f      	movs	r0, #15
 8003fb8:	f000 f808 	bl	8003fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fbc:	f7ff fd4a 	bl	8003a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023c00 	.word	0x40023c00

08003fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fd4:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_InitTick+0x54>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <HAL_InitTick+0x58>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f967 	bl	80042be <HAL_SYSTICK_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e00e      	b.n	8004018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b0f      	cmp	r3, #15
 8003ffe:	d80a      	bhi.n	8004016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004000:	2200      	movs	r2, #0
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	f000 f92f 	bl	800426a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800400c:	4a06      	ldr	r2, [pc, #24]	@ (8004028 <HAL_InitTick+0x5c>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000070 	.word	0x20000070
 8004024:	20000078 	.word	0x20000078
 8004028:	20000074 	.word	0x20000074

0800402c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004030:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_IncTick+0x20>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_IncTick+0x24>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4413      	add	r3, r2
 800403c:	4a04      	ldr	r2, [pc, #16]	@ (8004050 <HAL_IncTick+0x24>)
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000078 	.word	0x20000078
 8004050:	20002470 	.word	0x20002470

08004054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return uwTick;
 8004058:	4b03      	ldr	r3, [pc, #12]	@ (8004068 <HAL_GetTick+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20002470 	.word	0x20002470

0800406c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004074:	f7ff ffee 	bl	8004054 <HAL_GetTick>
 8004078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d005      	beq.n	8004092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004086:	4b0a      	ldr	r3, [pc, #40]	@ (80040b0 <HAL_Delay+0x44>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004092:	bf00      	nop
 8004094:	f7ff ffde 	bl	8004054 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d8f7      	bhi.n	8004094 <HAL_Delay+0x28>
  {
  }
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000078 	.word	0x20000078

080040b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c4:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e6:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	60d3      	str	r3, [r2, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004100:	4b04      	ldr	r3, [pc, #16]	@ (8004114 <__NVIC_GetPriorityGrouping+0x18>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 0307 	and.w	r3, r3, #7
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db0b      	blt.n	8004142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4907      	ldr	r1, [pc, #28]	@ (8004150 <__NVIC_EnableIRQ+0x38>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000e100 	.word	0xe000e100

08004154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	2b00      	cmp	r3, #0
 8004166:	db0a      	blt.n	800417e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	490c      	ldr	r1, [pc, #48]	@ (80041a0 <__NVIC_SetPriority+0x4c>)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	0112      	lsls	r2, r2, #4
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	440b      	add	r3, r1
 8004178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800417c:	e00a      	b.n	8004194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4908      	ldr	r1, [pc, #32]	@ (80041a4 <__NVIC_SetPriority+0x50>)
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	3b04      	subs	r3, #4
 800418c:	0112      	lsls	r2, r2, #4
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	440b      	add	r3, r1
 8004192:	761a      	strb	r2, [r3, #24]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000e100 	.word	0xe000e100
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	@ 0x24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f1c3 0307 	rsb	r3, r3, #7
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf28      	it	cs
 80041c6:	2304      	movcs	r3, #4
 80041c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d902      	bls.n	80041d8 <NVIC_EncodePriority+0x30>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3b03      	subs	r3, #3
 80041d6:	e000      	b.n	80041da <NVIC_EncodePriority+0x32>
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	401a      	ands	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f0:	f04f 31ff 	mov.w	r1, #4294967295
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	43d9      	mvns	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004200:	4313      	orrs	r3, r2
         );
}
 8004202:	4618      	mov	r0, r3
 8004204:	3724      	adds	r7, #36	@ 0x24
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004220:	d301      	bcc.n	8004226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004222:	2301      	movs	r3, #1
 8004224:	e00f      	b.n	8004246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004226:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <SysTick_Config+0x40>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800422e:	210f      	movs	r1, #15
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	f7ff ff8e 	bl	8004154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <SysTick_Config+0x40>)
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800423e:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <SysTick_Config+0x40>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010

08004254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff29 	bl	80040b4 <__NVIC_SetPriorityGrouping>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800426a:	b580      	push	{r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	4603      	mov	r3, r0
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800427c:	f7ff ff3e 	bl	80040fc <__NVIC_GetPriorityGrouping>
 8004280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	6978      	ldr	r0, [r7, #20]
 8004288:	f7ff ff8e 	bl	80041a8 <NVIC_EncodePriority>
 800428c:	4602      	mov	r2, r0
 800428e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff5d 	bl	8004154 <__NVIC_SetPriority>
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff31 	bl	8004118 <__NVIC_EnableIRQ>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff ffa2 	bl	8004210 <SysTick_Config>
 80042cc:	4603      	mov	r3, r0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042e4:	f7ff feb6 	bl	8004054 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e099      	b.n	8004428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004314:	e00f      	b.n	8004336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004316:	f7ff fe9d 	bl	8004054 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b05      	cmp	r3, #5
 8004322:	d908      	bls.n	8004336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2203      	movs	r2, #3
 800432e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e078      	b.n	8004428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e8      	bne.n	8004316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <HAL_DMA_Init+0x158>)
 8004350:	4013      	ands	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	2b04      	cmp	r3, #4
 800438e:	d107      	bne.n	80043a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004398:	4313      	orrs	r3, r2
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0307 	bic.w	r3, r3, #7
 80043b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d117      	bne.n	80043fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fa91 	bl	8004904 <DMA_CheckFifoParam>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2240      	movs	r2, #64	@ 0x40
 80043ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80043f6:	2301      	movs	r3, #1
 80043f8:	e016      	b.n	8004428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa48 	bl	8004898 <DMA_CalcBaseAndBitshift>
 8004408:	4603      	mov	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004410:	223f      	movs	r2, #63	@ 0x3f
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	f010803f 	.word	0xf010803f

08004434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_DMA_Start_IT+0x26>
 8004456:	2302      	movs	r3, #2
 8004458:	e040      	b.n	80044dc <HAL_DMA_Start_IT+0xa8>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d12f      	bne.n	80044ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9da 	bl	800483c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	223f      	movs	r2, #63	@ 0x3f
 800448e:	409a      	lsls	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0216 	orr.w	r2, r2, #22
 80044a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e005      	b.n	80044da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d004      	beq.n	8004502 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2280      	movs	r2, #128	@ 0x80
 80044fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e00c      	b.n	800451c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2205      	movs	r2, #5
 8004506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004534:	4b8e      	ldr	r3, [pc, #568]	@ (8004770 <HAL_DMA_IRQHandler+0x248>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a8e      	ldr	r2, [pc, #568]	@ (8004774 <HAL_DMA_IRQHandler+0x24c>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	0a9b      	lsrs	r3, r3, #10
 8004540:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004546:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	2208      	movs	r2, #8
 8004554:	409a      	lsls	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01a      	beq.n	8004594 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0204 	bic.w	r2, r2, #4
 800457a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	2208      	movs	r2, #8
 8004582:	409a      	lsls	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004598:	2201      	movs	r2, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b6:	2201      	movs	r2, #1
 80045b8:	409a      	lsls	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	f043 0202 	orr.w	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ce:	2204      	movs	r2, #4
 80045d0:	409a      	lsls	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d012      	beq.n	8004600 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	2204      	movs	r2, #4
 80045ee:	409a      	lsls	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	2210      	movs	r2, #16
 8004606:	409a      	lsls	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d043      	beq.n	8004698 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03c      	beq.n	8004698 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	2210      	movs	r2, #16
 8004624:	409a      	lsls	r2, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d018      	beq.n	800466a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d108      	bne.n	8004658 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d024      	beq.n	8004698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
 8004656:	e01f      	b.n	8004698 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01b      	beq.n	8004698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
 8004668:	e016      	b.n	8004698 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0208 	bic.w	r2, r2, #8
 8004686:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469c:	2220      	movs	r2, #32
 800469e:	409a      	lsls	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 808f 	beq.w	80047c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8087 	beq.w	80047c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046be:	2220      	movs	r2, #32
 80046c0:	409a      	lsls	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d136      	bne.n	8004740 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0216 	bic.w	r2, r2, #22
 80046e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_DMA_IRQHandler+0x1da>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0208 	bic.w	r2, r2, #8
 8004710:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	223f      	movs	r2, #63	@ 0x3f
 8004718:	409a      	lsls	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004732:	2b00      	cmp	r3, #0
 8004734:	d07e      	beq.n	8004834 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4798      	blx	r3
        }
        return;
 800473e:	e079      	b.n	8004834 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01d      	beq.n	800478a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10d      	bne.n	8004778 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004760:	2b00      	cmp	r3, #0
 8004762:	d031      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
 800476c:	e02c      	b.n	80047c8 <HAL_DMA_IRQHandler+0x2a0>
 800476e:	bf00      	nop
 8004770:	20000070 	.word	0x20000070
 8004774:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d023      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
 8004788:	e01e      	b.n	80047c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10f      	bne.n	80047b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0210 	bic.w	r2, r2, #16
 80047a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d032      	beq.n	8004836 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d022      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2205      	movs	r2, #5
 80047e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d307      	bcc.n	8004810 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f2      	bne.n	80047f4 <HAL_DMA_IRQHandler+0x2cc>
 800480e:	e000      	b.n	8004812 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004810:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
 8004832:	e000      	b.n	8004836 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004834:	bf00      	nop
    }
  }
}
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004858:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b40      	cmp	r3, #64	@ 0x40
 8004868:	d108      	bne.n	800487c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800487a:	e007      	b.n	800488c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	3b10      	subs	r3, #16
 80048a8:	4a14      	ldr	r2, [pc, #80]	@ (80048fc <DMA_CalcBaseAndBitshift+0x64>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048b2:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <DMA_CalcBaseAndBitshift+0x68>)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d909      	bls.n	80048da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80048d8:	e007      	b.n	80048ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	aaaaaaab 	.word	0xaaaaaaab
 8004900:	08008dd0 	.word	0x08008dd0

08004904 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d11f      	bne.n	800495e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d856      	bhi.n	80049d2 <DMA_CheckFifoParam+0xce>
 8004924:	a201      	add	r2, pc, #4	@ (adr r2, 800492c <DMA_CheckFifoParam+0x28>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	0800493d 	.word	0x0800493d
 8004930:	0800494f 	.word	0x0800494f
 8004934:	0800493d 	.word	0x0800493d
 8004938:	080049d3 	.word	0x080049d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d046      	beq.n	80049d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494c:	e043      	b.n	80049d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004952:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004956:	d140      	bne.n	80049da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495c:	e03d      	b.n	80049da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004966:	d121      	bne.n	80049ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d837      	bhi.n	80049de <DMA_CheckFifoParam+0xda>
 800496e:	a201      	add	r2, pc, #4	@ (adr r2, 8004974 <DMA_CheckFifoParam+0x70>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	08004985 	.word	0x08004985
 8004978:	0800498b 	.word	0x0800498b
 800497c:	08004985 	.word	0x08004985
 8004980:	0800499d 	.word	0x0800499d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      break;
 8004988:	e030      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d025      	beq.n	80049e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499a:	e022      	b.n	80049e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049a4:	d11f      	bne.n	80049e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049aa:	e01c      	b.n	80049e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d903      	bls.n	80049ba <DMA_CheckFifoParam+0xb6>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d003      	beq.n	80049c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049b8:	e018      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
      break;
 80049be:	e015      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00e      	beq.n	80049ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	e00b      	b.n	80049ea <DMA_CheckFifoParam+0xe6>
      break;
 80049d2:	bf00      	nop
 80049d4:	e00a      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
      break;
 80049d6:	bf00      	nop
 80049d8:	e008      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
      break;
 80049da:	bf00      	nop
 80049dc:	e006      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
      break;
 80049de:	bf00      	nop
 80049e0:	e004      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
      break;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
      break;   
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <DMA_CheckFifoParam+0xe8>
      break;
 80049ea:	bf00      	nop
    }
  } 
  
  return status; 
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop

080049fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	@ 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	e159      	b.n	8004ccc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	f040 8148 	bne.w	8004cc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d005      	beq.n	8004a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d130      	bne.n	8004ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	2203      	movs	r2, #3
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a84:	2201      	movs	r2, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 0201 	and.w	r2, r3, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d017      	beq.n	8004aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d123      	bne.n	8004b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	08da      	lsrs	r2, r3, #3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3208      	adds	r2, #8
 8004b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	220f      	movs	r2, #15
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	08da      	lsrs	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3208      	adds	r2, #8
 8004b3a:	69b9      	ldr	r1, [r7, #24]
 8004b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0203 	and.w	r2, r3, #3
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a2 	beq.w	8004cc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	4b57      	ldr	r3, [pc, #348]	@ (8004ce4 <HAL_GPIO_Init+0x2e8>)
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	4a56      	ldr	r2, [pc, #344]	@ (8004ce4 <HAL_GPIO_Init+0x2e8>)
 8004b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b92:	4b54      	ldr	r3, [pc, #336]	@ (8004ce4 <HAL_GPIO_Init+0x2e8>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b9e:	4a52      	ldr	r2, [pc, #328]	@ (8004ce8 <HAL_GPIO_Init+0x2ec>)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	089b      	lsrs	r3, r3, #2
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	220f      	movs	r2, #15
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a49      	ldr	r2, [pc, #292]	@ (8004cec <HAL_GPIO_Init+0x2f0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d019      	beq.n	8004bfe <HAL_GPIO_Init+0x202>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a48      	ldr	r2, [pc, #288]	@ (8004cf0 <HAL_GPIO_Init+0x2f4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_GPIO_Init+0x1fe>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a47      	ldr	r2, [pc, #284]	@ (8004cf4 <HAL_GPIO_Init+0x2f8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00d      	beq.n	8004bf6 <HAL_GPIO_Init+0x1fa>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a46      	ldr	r2, [pc, #280]	@ (8004cf8 <HAL_GPIO_Init+0x2fc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <HAL_GPIO_Init+0x1f6>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a45      	ldr	r2, [pc, #276]	@ (8004cfc <HAL_GPIO_Init+0x300>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <HAL_GPIO_Init+0x1f2>
 8004bea:	2304      	movs	r3, #4
 8004bec:	e008      	b.n	8004c00 <HAL_GPIO_Init+0x204>
 8004bee:	2307      	movs	r3, #7
 8004bf0:	e006      	b.n	8004c00 <HAL_GPIO_Init+0x204>
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e004      	b.n	8004c00 <HAL_GPIO_Init+0x204>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e002      	b.n	8004c00 <HAL_GPIO_Init+0x204>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_GPIO_Init+0x204>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	f002 0203 	and.w	r2, r2, #3
 8004c06:	0092      	lsls	r2, r2, #2
 8004c08:	4093      	lsls	r3, r2
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c10:	4935      	ldr	r1, [pc, #212]	@ (8004ce8 <HAL_GPIO_Init+0x2ec>)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	089b      	lsrs	r3, r3, #2
 8004c16:	3302      	adds	r3, #2
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c1e:	4b38      	ldr	r3, [pc, #224]	@ (8004d00 <HAL_GPIO_Init+0x304>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c42:	4a2f      	ldr	r2, [pc, #188]	@ (8004d00 <HAL_GPIO_Init+0x304>)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c48:	4b2d      	ldr	r3, [pc, #180]	@ (8004d00 <HAL_GPIO_Init+0x304>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c6c:	4a24      	ldr	r2, [pc, #144]	@ (8004d00 <HAL_GPIO_Init+0x304>)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c72:	4b23      	ldr	r3, [pc, #140]	@ (8004d00 <HAL_GPIO_Init+0x304>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c96:	4a1a      	ldr	r2, [pc, #104]	@ (8004d00 <HAL_GPIO_Init+0x304>)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c9c:	4b18      	ldr	r3, [pc, #96]	@ (8004d00 <HAL_GPIO_Init+0x304>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8004d00 <HAL_GPIO_Init+0x304>)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	f67f aea2 	bls.w	8004a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	3724      	adds	r7, #36	@ 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40013800 	.word	0x40013800
 8004cec:	40020000 	.word	0x40020000
 8004cf0:	40020400 	.word	0x40020400
 8004cf4:	40020800 	.word	0x40020800
 8004cf8:	40020c00 	.word	0x40020c00
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40013c00 	.word	0x40013c00

08004d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	887b      	ldrh	r3, [r7, #2]
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
 8004d20:	e001      	b.n	8004d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	807b      	strh	r3, [r7, #2]
 8004d40:	4613      	mov	r3, r2
 8004d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d44:	787b      	ldrb	r3, [r7, #1]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d4a:	887a      	ldrh	r2, [r7, #2]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d50:	e003      	b.n	8004d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d52:	887b      	ldrh	r3, [r7, #2]
 8004d54:	041a      	lsls	r2, r3, #16
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	619a      	str	r2, [r3, #24]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e267      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d075      	beq.n	8004e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d86:	4b88      	ldr	r3, [pc, #544]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d00c      	beq.n	8004dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b85      	ldr	r3, [pc, #532]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d112      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9e:	4b82      	ldr	r3, [pc, #520]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05b      	beq.n	8004e70 <HAL_RCC_OscConfig+0x108>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d157      	bne.n	8004e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e242      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x74>
 8004dce:	4b76      	ldr	r3, [pc, #472]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a75      	ldr	r2, [pc, #468]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e01d      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x98>
 8004de6:	4b70      	ldr	r3, [pc, #448]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b6d      	ldr	r3, [pc, #436]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6c      	ldr	r2, [pc, #432]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004e00:	4b69      	ldr	r3, [pc, #420]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a68      	ldr	r2, [pc, #416]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b66      	ldr	r3, [pc, #408]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a65      	ldr	r2, [pc, #404]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7ff f918 	bl	8004054 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e28:	f7ff f914 	bl	8004054 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	@ 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e207      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0xc0>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7ff f904 	bl	8004054 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7ff f900 	bl	8004054 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	@ 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1f3      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	4b51      	ldr	r3, [pc, #324]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0xe8>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d063      	beq.n	8004f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b47      	ldr	r3, [pc, #284]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d11c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e96:	4b44      	ldr	r3, [pc, #272]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d116      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	4b41      	ldr	r3, [pc, #260]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_RCC_OscConfig+0x152>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e1c7      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eba:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	4937      	ldr	r1, [pc, #220]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ece:	e03a      	b.n	8004f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed8:	4b34      	ldr	r3, [pc, #208]	@ (8004fac <HAL_RCC_OscConfig+0x244>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7ff f8b9 	bl	8004054 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ee6:	f7ff f8b5 	bl	8004054 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e1a8      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f04:	4b28      	ldr	r3, [pc, #160]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4925      	ldr	r1, [pc, #148]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
 8004f18:	e015      	b.n	8004f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1a:	4b24      	ldr	r3, [pc, #144]	@ (8004fac <HAL_RCC_OscConfig+0x244>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7ff f898 	bl	8004054 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f28:	f7ff f894 	bl	8004054 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e187      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d036      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5a:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <HAL_RCC_OscConfig+0x248>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7ff f878 	bl	8004054 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f68:	f7ff f874 	bl	8004054 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e167      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x200>
 8004f86:	e01b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f88:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <HAL_RCC_OscConfig+0x248>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8e:	f7ff f861 	bl	8004054 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	e00e      	b.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f96:	f7ff f85d 	bl	8004054 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d907      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e150      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	42470000 	.word	0x42470000
 8004fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb4:	4b88      	ldr	r3, [pc, #544]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ea      	bne.n	8004f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8097 	beq.w	80050fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fd2:	4b81      	ldr	r3, [pc, #516]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fee:	4b7a      	ldr	r3, [pc, #488]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffe:	4b77      	ldr	r3, [pc, #476]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d118      	bne.n	800503c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800500a:	4b74      	ldr	r3, [pc, #464]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a73      	ldr	r2, [pc, #460]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005016:	f7ff f81d 	bl	8004054 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501e:	f7ff f819 	bl	8004054 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e10c      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005030:	4b6a      	ldr	r3, [pc, #424]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d106      	bne.n	8005052 <HAL_RCC_OscConfig+0x2ea>
 8005044:	4b64      	ldr	r3, [pc, #400]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005048:	4a63      	ldr	r2, [pc, #396]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005050:	e01c      	b.n	800508c <HAL_RCC_OscConfig+0x324>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b05      	cmp	r3, #5
 8005058:	d10c      	bne.n	8005074 <HAL_RCC_OscConfig+0x30c>
 800505a:	4b5f      	ldr	r3, [pc, #380]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	4a5e      	ldr	r2, [pc, #376]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	6713      	str	r3, [r2, #112]	@ 0x70
 8005066:	4b5c      	ldr	r3, [pc, #368]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506a:	4a5b      	ldr	r2, [pc, #364]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6713      	str	r3, [r2, #112]	@ 0x70
 8005072:	e00b      	b.n	800508c <HAL_RCC_OscConfig+0x324>
 8005074:	4b58      	ldr	r3, [pc, #352]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	4a57      	ldr	r2, [pc, #348]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005080:	4b55      	ldr	r3, [pc, #340]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005084:	4a54      	ldr	r2, [pc, #336]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005086:	f023 0304 	bic.w	r3, r3, #4
 800508a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fe ffde 	bl	8004054 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fe ffda 	bl	8004054 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0cb      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b2:	4b49      	ldr	r3, [pc, #292]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0ee      	beq.n	800509c <HAL_RCC_OscConfig+0x334>
 80050be:	e014      	b.n	80050ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c0:	f7fe ffc8 	bl	8004054 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c8:	f7fe ffc4 	bl	8004054 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e0b5      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050de:	4b3e      	ldr	r3, [pc, #248]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ee      	bne.n	80050c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d105      	bne.n	80050fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f0:	4b39      	ldr	r3, [pc, #228]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	4a38      	ldr	r2, [pc, #224]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80a1 	beq.w	8005248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005106:	4b34      	ldr	r3, [pc, #208]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b08      	cmp	r3, #8
 8005110:	d05c      	beq.n	80051cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d141      	bne.n	800519e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511a:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fe ff98 	bl	8004054 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005128:	f7fe ff94 	bl	8004054 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e087      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513a:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	3b01      	subs	r3, #1
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	491b      	ldr	r1, [pc, #108]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800516c:	4313      	orrs	r3, r2
 800516e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005170:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005176:	f7fe ff6d 	bl	8004054 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517e:	f7fe ff69 	bl	8004054 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e05c      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005190:	4b11      	ldr	r3, [pc, #68]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x416>
 800519c:	e054      	b.n	8005248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519e:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fe ff56 	bl	8004054 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fe ff52 	bl	8004054 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e045      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051be:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x444>
 80051ca:	e03d      	b.n	8005248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e038      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
 80051d8:	40023800 	.word	0x40023800
 80051dc:	40007000 	.word	0x40007000
 80051e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x4ec>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d028      	beq.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d121      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d11a      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800521a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	3b01      	subs	r3, #1
 800522e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d107      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0cc      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b68      	ldr	r3, [pc, #416]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d90c      	bls.n	8005294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b65      	ldr	r3, [pc, #404]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b63      	ldr	r3, [pc, #396]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0b8      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d020      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ac:	4b59      	ldr	r3, [pc, #356]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a58      	ldr	r2, [pc, #352]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c4:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a52      	ldr	r2, [pc, #328]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d0:	4b50      	ldr	r3, [pc, #320]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	494d      	ldr	r1, [pc, #308]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d044      	beq.n	8005378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	4b47      	ldr	r3, [pc, #284]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d119      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e07f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d003      	beq.n	8005316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005312:	2b03      	cmp	r3, #3
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005316:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e06f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005326:	4b3b      	ldr	r3, [pc, #236]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e067      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005336:	4b37      	ldr	r3, [pc, #220]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f023 0203 	bic.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4934      	ldr	r1, [pc, #208]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	4313      	orrs	r3, r2
 8005346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005348:	f7fe fe84 	bl	8004054 <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fe fe80 	bl	8004054 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e04f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	4b2b      	ldr	r3, [pc, #172]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 020c 	and.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	429a      	cmp	r2, r3
 8005376:	d1eb      	bne.n	8005350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005378:	4b25      	ldr	r3, [pc, #148]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d20c      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b22      	ldr	r3, [pc, #136]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b20      	ldr	r3, [pc, #128]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e032      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ac:	4b19      	ldr	r3, [pc, #100]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4916      	ldr	r1, [pc, #88]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ca:	4b12      	ldr	r3, [pc, #72]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	490e      	ldr	r1, [pc, #56]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053de:	f000 f821 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80053e2:	4602      	mov	r2, r0
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	490a      	ldr	r1, [pc, #40]	@ (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 80053f0:	5ccb      	ldrb	r3, [r1, r3]
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	4a09      	ldr	r2, [pc, #36]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053fa:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fde4 	bl	8003fcc <HAL_InitTick>

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40023c00 	.word	0x40023c00
 8005414:	40023800 	.word	0x40023800
 8005418:	08008dc0 	.word	0x08008dc0
 800541c:	20000070 	.word	0x20000070
 8005420:	20000074 	.word	0x20000074

08005424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005428:	b090      	sub	sp, #64	@ 0x40
 800542a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005430:	2300      	movs	r3, #0
 8005432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005434:	2300      	movs	r3, #0
 8005436:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800543c:	4b59      	ldr	r3, [pc, #356]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d00d      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x40>
 8005448:	2b08      	cmp	r3, #8
 800544a:	f200 80a1 	bhi.w	8005590 <HAL_RCC_GetSysClockFreq+0x16c>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x34>
 8005452:	2b04      	cmp	r3, #4
 8005454:	d003      	beq.n	800545e <HAL_RCC_GetSysClockFreq+0x3a>
 8005456:	e09b      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005458:	4b53      	ldr	r3, [pc, #332]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800545a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800545c:	e09b      	b.n	8005596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800545e:	4b53      	ldr	r3, [pc, #332]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005460:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005462:	e098      	b.n	8005596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005464:	4b4f      	ldr	r3, [pc, #316]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800546e:	4b4d      	ldr	r3, [pc, #308]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d028      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547a:	4b4a      	ldr	r3, [pc, #296]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	099b      	lsrs	r3, r3, #6
 8005480:	2200      	movs	r2, #0
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	627a      	str	r2, [r7, #36]	@ 0x24
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800548c:	2100      	movs	r1, #0
 800548e:	4b47      	ldr	r3, [pc, #284]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005490:	fb03 f201 	mul.w	r2, r3, r1
 8005494:	2300      	movs	r3, #0
 8005496:	fb00 f303 	mul.w	r3, r0, r3
 800549a:	4413      	add	r3, r2
 800549c:	4a43      	ldr	r2, [pc, #268]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x188>)
 800549e:	fba0 1202 	umull	r1, r2, r0, r2
 80054a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a4:	460a      	mov	r2, r1
 80054a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80054a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054aa:	4413      	add	r3, r2
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b0:	2200      	movs	r2, #0
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	61fa      	str	r2, [r7, #28]
 80054b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80054be:	f7fb facd 	bl	8000a5c <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4613      	mov	r3, r2
 80054c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ca:	e053      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054cc:	4b35      	ldr	r3, [pc, #212]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	099b      	lsrs	r3, r3, #6
 80054d2:	2200      	movs	r2, #0
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	617a      	str	r2, [r7, #20]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054de:	f04f 0b00 	mov.w	fp, #0
 80054e2:	4652      	mov	r2, sl
 80054e4:	465b      	mov	r3, fp
 80054e6:	f04f 0000 	mov.w	r0, #0
 80054ea:	f04f 0100 	mov.w	r1, #0
 80054ee:	0159      	lsls	r1, r3, #5
 80054f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f4:	0150      	lsls	r0, r2, #5
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	ebb2 080a 	subs.w	r8, r2, sl
 80054fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800550e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005512:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005516:	ebb2 0408 	subs.w	r4, r2, r8
 800551a:	eb63 0509 	sbc.w	r5, r3, r9
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	00eb      	lsls	r3, r5, #3
 8005528:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800552c:	00e2      	lsls	r2, r4, #3
 800552e:	4614      	mov	r4, r2
 8005530:	461d      	mov	r5, r3
 8005532:	eb14 030a 	adds.w	r3, r4, sl
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	eb45 030b 	adc.w	r3, r5, fp
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800554a:	4629      	mov	r1, r5
 800554c:	028b      	lsls	r3, r1, #10
 800554e:	4621      	mov	r1, r4
 8005550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005554:	4621      	mov	r1, r4
 8005556:	028a      	lsls	r2, r1, #10
 8005558:	4610      	mov	r0, r2
 800555a:	4619      	mov	r1, r3
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	2200      	movs	r2, #0
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	60fa      	str	r2, [r7, #12]
 8005564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005568:	f7fb fa78 	bl	8000a5c <__aeabi_uldivmod>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4613      	mov	r3, r2
 8005572:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	3301      	adds	r3, #1
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005584:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800558e:	e002      	b.n	8005596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005590:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005592:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005598:	4618      	mov	r0, r3
 800559a:	3740      	adds	r7, #64	@ 0x40
 800559c:	46bd      	mov	sp, r7
 800559e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055a2:	bf00      	nop
 80055a4:	40023800 	.word	0x40023800
 80055a8:	00f42400 	.word	0x00f42400
 80055ac:	016e3600 	.word	0x016e3600

080055b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d105      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d038      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055d8:	4b68      	ldr	r3, [pc, #416]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055de:	f7fe fd39 	bl	8004054 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055e4:	e008      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055e6:	f7fe fd35 	bl	8004054 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e0bd      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055f8:	4b61      	ldr	r3, [pc, #388]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f0      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	019b      	lsls	r3, r3, #6
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	071b      	lsls	r3, r3, #28
 8005616:	495a      	ldr	r1, [pc, #360]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800561e:	4b57      	ldr	r3, [pc, #348]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005624:	f7fe fd16 	bl	8004054 <HAL_GetTick>
 8005628:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800562a:	e008      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800562c:	f7fe fd12 	bl	8004054 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e09a      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800563e:	4b50      	ldr	r3, [pc, #320]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8083 	beq.w	800575e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	4b48      	ldr	r3, [pc, #288]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	4a47      	ldr	r2, [pc, #284]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005666:	6413      	str	r3, [r2, #64]	@ 0x40
 8005668:	4b45      	ldr	r3, [pc, #276]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800566a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005674:	4b43      	ldr	r3, [pc, #268]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a42      	ldr	r2, [pc, #264]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800567a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005680:	f7fe fce8 	bl	8004054 <HAL_GetTick>
 8005684:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005686:	e008      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005688:	f7fe fce4 	bl	8004054 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e06c      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800569a:	4b3a      	ldr	r3, [pc, #232]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a6:	4b36      	ldr	r3, [pc, #216]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ae:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d02f      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d028      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056cc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056da:	4a29      	ldr	r2, [pc, #164]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056e0:	4b27      	ldr	r3, [pc, #156]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d114      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056ec:	f7fe fcb2 	bl	8004054 <HAL_GetTick>
 80056f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f2:	e00a      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f4:	f7fe fcae 	bl	8004054 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e034      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570a:	4b1d      	ldr	r3, [pc, #116]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0ee      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005722:	d10d      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005724:	4b16      	ldr	r3, [pc, #88]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005738:	4911      	ldr	r1, [pc, #68]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
 800573e:	e005      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005740:	4b0f      	ldr	r3, [pc, #60]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a0e      	ldr	r2, [pc, #56]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005746:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800574a:	6093      	str	r3, [r2, #8]
 800574c:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005758:	4909      	ldr	r1, [pc, #36]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575a:	4313      	orrs	r3, r2
 800575c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	7d1a      	ldrb	r2, [r3, #20]
 800576e:	4b07      	ldr	r3, [pc, #28]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005770:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	42470068 	.word	0x42470068
 8005780:	40023800 	.word	0x40023800
 8005784:	40007000 	.word	0x40007000
 8005788:	42470e40 	.word	0x42470e40
 800578c:	424711e0 	.word	0x424711e0

08005790 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e073      	b.n	800588e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	7f5b      	ldrb	r3, [r3, #29]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d105      	bne.n	80057bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fe f996 	bl	8003ae8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d055      	beq.n	800587c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	22ca      	movs	r2, #202	@ 0xca
 80057d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2253      	movs	r2, #83	@ 0x53
 80057de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fa49 	bl	8005c78 <RTC_EnterInitMode>
 80057e6:	4603      	mov	r3, r0
 80057e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d12c      	bne.n	800584a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80057fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005802:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6899      	ldr	r1, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68d2      	ldr	r2, [r2, #12]
 800582a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6919      	ldr	r1, [r3, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	041a      	lsls	r2, r3, #16
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fa50 	bl	8005ce6 <RTC_ExitInitMode>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d110      	bne.n	8005872 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800585e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	22ff      	movs	r2, #255	@ 0xff
 8005878:	625a      	str	r2, [r3, #36]	@ 0x24
 800587a:	e001      	b.n	8005880 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005896:	b590      	push	{r4, r7, lr}
 8005898:	b087      	sub	sp, #28
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	7f1b      	ldrb	r3, [r3, #28]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_RTC_SetTime+0x1c>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e087      	b.n	80059c2 <HAL_RTC_SetTime+0x12c>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2202      	movs	r2, #2
 80058bc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d126      	bne.n	8005912 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fa27 	bl	8005d30 <RTC_ByteToBcd2>
 80058e2:	4603      	mov	r3, r0
 80058e4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fa20 	bl	8005d30 <RTC_ByteToBcd2>
 80058f0:	4603      	mov	r3, r0
 80058f2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058f4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	789b      	ldrb	r3, [r3, #2]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fa18 	bl	8005d30 <RTC_ByteToBcd2>
 8005900:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005902:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	78db      	ldrb	r3, [r3, #3]
 800590a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	e018      	b.n	8005944 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d102      	bne.n	8005926 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005932:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005938:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	78db      	ldrb	r3, [r3, #3]
 800593e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	22ca      	movs	r2, #202	@ 0xca
 800594a:	625a      	str	r2, [r3, #36]	@ 0x24
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2253      	movs	r2, #83	@ 0x53
 8005952:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f98f 	bl	8005c78 <RTC_EnterInitMode>
 800595a:	4603      	mov	r3, r0
 800595c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800595e:	7cfb      	ldrb	r3, [r7, #19]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d120      	bne.n	80059a6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800596e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005972:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005982:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6899      	ldr	r1, [r3, #8]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	431a      	orrs	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f9a2 	bl	8005ce6 <RTC_ExitInitMode>
 80059a2:	4603      	mov	r3, r0
 80059a4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80059a6:	7cfb      	ldrb	r3, [r7, #19]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	22ff      	movs	r2, #255	@ 0xff
 80059b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]

  return status;
 80059c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd90      	pop	{r4, r7, pc}

080059ca <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80059fc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005a00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	0d9b      	lsrs	r3, r3, #22
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d11a      	bne.n	8005a7c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 f98e 	bl	8005d6c <RTC_Bcd2ToByte>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 f985 	bl	8005d6c <RTC_Bcd2ToByte>
 8005a62:	4603      	mov	r3, r0
 8005a64:	461a      	mov	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	789b      	ldrb	r3, [r3, #2]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f97c 	bl	8005d6c <RTC_Bcd2ToByte>
 8005a74:	4603      	mov	r3, r0
 8005a76:	461a      	mov	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a86:	b590      	push	{r4, r7, lr}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	7f1b      	ldrb	r3, [r3, #28]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RTC_SetDate+0x1c>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e071      	b.n	8005b86 <HAL_RTC_SetDate+0x100>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10e      	bne.n	8005ad2 <HAL_RTC_SetDate+0x4c>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	330a      	adds	r3, #10
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d11c      	bne.n	8005b12 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	78db      	ldrb	r3, [r3, #3]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 f927 	bl	8005d30 <RTC_ByteToBcd2>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f920 	bl	8005d30 <RTC_ByteToBcd2>
 8005af0:	4603      	mov	r3, r0
 8005af2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005af4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	789b      	ldrb	r3, [r3, #2]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f918 	bl	8005d30 <RTC_ByteToBcd2>
 8005b00:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b02:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	e00e      	b.n	8005b30 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	78db      	ldrb	r3, [r3, #3]
 8005b16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b1e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	22ca      	movs	r2, #202	@ 0xca
 8005b36:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2253      	movs	r2, #83	@ 0x53
 8005b3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f899 	bl	8005c78 <RTC_EnterInitMode>
 8005b46:	4603      	mov	r3, r0
 8005b48:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10c      	bne.n	8005b6a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b5a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b5e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f8c0 	bl	8005ce6 <RTC_ExitInitMode>
 8005b66:	4603      	mov	r3, r0
 8005b68:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b6a:	7cfb      	ldrb	r3, [r7, #19]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	22ff      	movs	r2, #255	@ 0xff
 8005b7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]

  return status;
 8005b84:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd90      	pop	{r4, r7, pc}

08005b8e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ba8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005bac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 031f 	and.w	r3, r3, #31
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	0b5b      	lsrs	r3, r3, #13
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d11a      	bne.n	8005c22 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 f8bb 	bl	8005d6c <RTC_Bcd2ToByte>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f8b2 	bl	8005d6c <RTC_Bcd2ToByte>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	789b      	ldrb	r3, [r3, #2]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 f8a9 	bl	8005d6c <RTC_Bcd2ToByte>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c74 <HAL_RTC_WaitForSynchro+0x48>)
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c40:	f7fe fa08 	bl	8004054 <HAL_GetTick>
 8005c44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c46:	e009      	b.n	8005c5c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c48:	f7fe fa04 	bl	8004054 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c56:	d901      	bls.n	8005c5c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e007      	b.n	8005c6c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ee      	beq.n	8005c48 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	00013f5f 	.word	0x00013f5f

08005c78 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d122      	bne.n	8005cdc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ca4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca6:	f7fe f9d5 	bl	8004054 <HAL_GetTick>
 8005caa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cac:	e00c      	b.n	8005cc8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cae:	f7fe f9d1 	bl	8004054 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cbc:	d904      	bls.n	8005cc8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <RTC_EnterInitMode+0x64>
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d1e8      	bne.n	8005cae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d00:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff ff8b 	bl	8005c2c <HAL_RTC_WaitForSynchro>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005d3e:	e005      	b.n	8005d4c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3301      	adds	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	3b0a      	subs	r3, #10
 8005d4a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	2b09      	cmp	r3, #9
 8005d50:	d8f6      	bhi.n	8005d40 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b2db      	uxtb	r3, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	4613      	mov	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	b2db      	uxtb	r3, r3
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e041      	b.n	8005e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fd feb6 	bl	8003b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f000 ffb6 	bl	8006d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e041      	b.n	8005edc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f839 	bl	8005ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f000 ff67 	bl	8006d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2301      	moveq	r3, #1
 8005f1e:	2300      	movne	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	e022      	b.n	8005f6a <HAL_TIM_PWM_Start_DMA+0x72>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d109      	bne.n	8005f3e <HAL_TIM_PWM_Start_DMA+0x46>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	bf0c      	ite	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	2300      	movne	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	e015      	b.n	8005f6a <HAL_TIM_PWM_Start_DMA+0x72>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d109      	bne.n	8005f58 <HAL_TIM_PWM_Start_DMA+0x60>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	e008      	b.n	8005f6a <HAL_TIM_PWM_Start_DMA+0x72>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	bf0c      	ite	eq
 8005f64:	2301      	moveq	r3, #1
 8005f66:	2300      	movne	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e15d      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <HAL_TIM_PWM_Start_DMA+0x94>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	e022      	b.n	8005fd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d109      	bne.n	8005fa6 <HAL_TIM_PWM_Start_DMA+0xae>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2301      	moveq	r3, #1
 8005fa0:	2300      	movne	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	e015      	b.n	8005fd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d109      	bne.n	8005fc0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	e008      	b.n	8005fd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d024      	beq.n	8006020 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <HAL_TIM_PWM_Start_DMA+0xea>
 8005fdc:	887b      	ldrh	r3, [r7, #2]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e123      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d104      	bne.n	8005ff6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff4:	e016      	b.n	8006024 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d104      	bne.n	8006006 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006004:	e00e      	b.n	8006024 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_Start_DMA+0x11e>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006014:	e006      	b.n	8006024 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800601e:	e001      	b.n	8006024 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e104      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b0c      	cmp	r3, #12
 8006028:	f200 80ae 	bhi.w	8006188 <HAL_TIM_PWM_Start_DMA+0x290>
 800602c:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006069 	.word	0x08006069
 8006038:	08006189 	.word	0x08006189
 800603c:	08006189 	.word	0x08006189
 8006040:	08006189 	.word	0x08006189
 8006044:	080060b1 	.word	0x080060b1
 8006048:	08006189 	.word	0x08006189
 800604c:	08006189 	.word	0x08006189
 8006050:	08006189 	.word	0x08006189
 8006054:	080060f9 	.word	0x080060f9
 8006058:	08006189 	.word	0x08006189
 800605c:	08006189 	.word	0x08006189
 8006060:	08006189 	.word	0x08006189
 8006064:	08006141 	.word	0x08006141
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	4a72      	ldr	r2, [pc, #456]	@ (8006238 <HAL_TIM_PWM_Start_DMA+0x340>)
 800606e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	4a71      	ldr	r2, [pc, #452]	@ (800623c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006076:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	4a70      	ldr	r2, [pc, #448]	@ (8006240 <HAL_TIM_PWM_Start_DMA+0x348>)
 800607e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3334      	adds	r3, #52	@ 0x34
 800608c:	461a      	mov	r2, r3
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	f7fe f9d0 	bl	8004434 <HAL_DMA_Start_IT>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e0c7      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ac:	60da      	str	r2, [r3, #12]
      break;
 80060ae:	e06e      	b.n	800618e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b4:	4a60      	ldr	r2, [pc, #384]	@ (8006238 <HAL_TIM_PWM_Start_DMA+0x340>)
 80060b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060bc:	4a5f      	ldr	r2, [pc, #380]	@ (800623c <HAL_TIM_PWM_Start_DMA+0x344>)
 80060be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006240 <HAL_TIM_PWM_Start_DMA+0x348>)
 80060c6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3338      	adds	r3, #56	@ 0x38
 80060d4:	461a      	mov	r2, r3
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	f7fe f9ac 	bl	8004434 <HAL_DMA_Start_IT>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e0a3      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060f4:	60da      	str	r2, [r3, #12]
      break;
 80060f6:	e04a      	b.n	800618e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fc:	4a4e      	ldr	r2, [pc, #312]	@ (8006238 <HAL_TIM_PWM_Start_DMA+0x340>)
 80060fe:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a4d      	ldr	r2, [pc, #308]	@ (800623c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006106:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	4a4c      	ldr	r2, [pc, #304]	@ (8006240 <HAL_TIM_PWM_Start_DMA+0x348>)
 800610e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	333c      	adds	r3, #60	@ 0x3c
 800611c:	461a      	mov	r2, r3
 800611e:	887b      	ldrh	r3, [r7, #2]
 8006120:	f7fe f988 	bl	8004434 <HAL_DMA_Start_IT>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e07f      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800613c:	60da      	str	r2, [r3, #12]
      break;
 800613e:	e026      	b.n	800618e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006144:	4a3c      	ldr	r2, [pc, #240]	@ (8006238 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006146:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	4a3b      	ldr	r2, [pc, #236]	@ (800623c <HAL_TIM_PWM_Start_DMA+0x344>)
 800614e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006154:	4a3a      	ldr	r2, [pc, #232]	@ (8006240 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006156:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3340      	adds	r3, #64	@ 0x40
 8006164:	461a      	mov	r2, r3
 8006166:	887b      	ldrh	r3, [r7, #2]
 8006168:	f7fe f964 	bl	8004434 <HAL_DMA_Start_IT>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e05b      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006184:	60da      	str	r2, [r3, #12]
      break;
 8006186:	e002      	b.n	800618e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	75fb      	strb	r3, [r7, #23]
      break;
 800618c:	bf00      	nop
  }

  if (status == HAL_OK)
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d14b      	bne.n	800622c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2201      	movs	r2, #1
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f88d 	bl	80072bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a27      	ldr	r2, [pc, #156]	@ (8006244 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d107      	bne.n	80061bc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a20      	ldr	r2, [pc, #128]	@ (8006244 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ce:	d013      	beq.n	80061f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006248 <HAL_TIM_PWM_Start_DMA+0x350>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1b      	ldr	r2, [pc, #108]	@ (800624c <HAL_TIM_PWM_Start_DMA+0x354>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a19      	ldr	r2, [pc, #100]	@ (8006250 <HAL_TIM_PWM_Start_DMA+0x358>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIM_PWM_Start_DMA+0x300>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a18      	ldr	r2, [pc, #96]	@ (8006254 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d111      	bne.n	800621c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b06      	cmp	r3, #6
 8006208:	d010      	beq.n	800622c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621a:	e007      	b.n	800622c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800622c:	7dfb      	ldrb	r3, [r7, #23]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	08006c49 	.word	0x08006c49
 800623c:	08006cf1 	.word	0x08006cf1
 8006240:	08006bb7 	.word	0x08006bb7
 8006244:	40010000 	.word	0x40010000
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	40014000 	.word	0x40014000

08006258 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b0c      	cmp	r3, #12
 800626a:	d855      	bhi.n	8006318 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800626c:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	080062a9 	.word	0x080062a9
 8006278:	08006319 	.word	0x08006319
 800627c:	08006319 	.word	0x08006319
 8006280:	08006319 	.word	0x08006319
 8006284:	080062c5 	.word	0x080062c5
 8006288:	08006319 	.word	0x08006319
 800628c:	08006319 	.word	0x08006319
 8006290:	08006319 	.word	0x08006319
 8006294:	080062e1 	.word	0x080062e1
 8006298:	08006319 	.word	0x08006319
 800629c:	08006319 	.word	0x08006319
 80062a0:	08006319 	.word	0x08006319
 80062a4:	080062fd 	.word	0x080062fd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80062b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe f911 	bl	80044e4 <HAL_DMA_Abort_IT>
      break;
 80062c2:	e02c      	b.n	800631e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe f903 	bl	80044e4 <HAL_DMA_Abort_IT>
      break;
 80062de:	e01e      	b.n	800631e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe f8f5 	bl	80044e4 <HAL_DMA_Abort_IT>
      break;
 80062fa:	e010      	b.n	800631e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800630a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe f8e7 	bl	80044e4 <HAL_DMA_Abort_IT>
      break;
 8006316:	e002      	b.n	800631e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
      break;
 800631c:	bf00      	nop
  }

  if (status == HAL_OK)
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d157      	bne.n	80063d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2200      	movs	r2, #0
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 ffc5 	bl	80072bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2a      	ldr	r2, [pc, #168]	@ (80063e0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d117      	bne.n	800636c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006346:	4013      	ands	r3, r2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10f      	bne.n	800636c <HAL_TIM_PWM_Stop_DMA+0x114>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6a1a      	ldr	r2, [r3, #32]
 8006352:	f240 4344 	movw	r3, #1092	@ 0x444
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d107      	bne.n	800636c <HAL_TIM_PWM_Stop_DMA+0x114>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800636a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6a1a      	ldr	r2, [r3, #32]
 8006372:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <HAL_TIM_PWM_Stop_DMA+0x144>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6a1a      	ldr	r2, [r3, #32]
 8006382:	f240 4344 	movw	r3, #1092	@ 0x444
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d107      	bne.n	800639c <HAL_TIM_PWM_Stop_DMA+0x144>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <HAL_TIM_PWM_Stop_DMA+0x154>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063aa:	e013      	b.n	80063d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d104      	bne.n	80063bc <HAL_TIM_PWM_Stop_DMA+0x164>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ba:	e00b      	b.n	80063d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d104      	bne.n	80063cc <HAL_TIM_PWM_Stop_DMA+0x174>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063ca:	e003      	b.n	80063d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40010000 	.word	0x40010000

080063e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e097      	b.n	8006528 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fd fbeb 	bl	8003be8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006428:	f023 0307 	bic.w	r3, r3, #7
 800642c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3304      	adds	r3, #4
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f000 fc8d 	bl	8006d58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	4313      	orrs	r3, r2
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006484:	f023 030c 	bic.w	r3, r3, #12
 8006488:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006490:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	4313      	orrs	r3, r2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	011a      	lsls	r2, r3, #4
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	031b      	lsls	r3, r3, #12
 80064b4:	4313      	orrs	r3, r2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	4313      	orrs	r3, r2
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006540:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006548:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006550:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006558:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d110      	bne.n	8006582 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d102      	bne.n	800656c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006566:	7b7b      	ldrb	r3, [r7, #13]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e069      	b.n	8006644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006580:	e031      	b.n	80065e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b04      	cmp	r3, #4
 8006586:	d110      	bne.n	80065aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d102      	bne.n	8006594 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800658e:	7b3b      	ldrb	r3, [r7, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d001      	beq.n	8006598 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e055      	b.n	8006644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065a8:	e01d      	b.n	80065e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d108      	bne.n	80065c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d105      	bne.n	80065c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b6:	7b7b      	ldrb	r3, [r7, #13]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d102      	bne.n	80065c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065bc:	7b3b      	ldrb	r3, [r7, #12]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d001      	beq.n	80065c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e03e      	b.n	8006644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_TIM_Encoder_Start+0xc4>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d008      	beq.n	8006604 <HAL_TIM_Encoder_Start+0xd4>
 80065f2:	e00f      	b.n	8006614 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2201      	movs	r2, #1
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fe5d 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006602:	e016      	b.n	8006632 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2201      	movs	r2, #1
 800660a:	2104      	movs	r1, #4
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fe55 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006612:	e00e      	b.n	8006632 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2201      	movs	r2, #1
 800661a:	2100      	movs	r1, #0
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fe4d 	bl	80072bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2201      	movs	r2, #1
 8006628:	2104      	movs	r1, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fe46 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006630:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d020      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01b      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0202 	mvn.w	r2, #2
 8006680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa65 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa57 	bl	8006b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fa ff55 	bl	8001554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d020      	beq.n	80066fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01b      	beq.n	80066fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0204 	mvn.w	r2, #4
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa3f 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa31 	bl	8006b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fa ff2f 	bl	8001554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d020      	beq.n	8006748 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01b      	beq.n	8006748 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0208 	mvn.w	r2, #8
 8006718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2204      	movs	r2, #4
 800671e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa19 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 8006734:	e005      	b.n	8006742 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa0b 	bl	8006b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7fa ff09 	bl	8001554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	d020      	beq.n	8006794 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01b      	beq.n	8006794 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0210 	mvn.w	r2, #16
 8006764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2208      	movs	r2, #8
 800676a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f9f3 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 8006780:	e005      	b.n	800678e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f9e5 	bl	8006b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7fa fee3 	bl	8001554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00c      	beq.n	80067b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f06f 0201 	mvn.w	r2, #1
 80067b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f9c3 	bl	8006b3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00c      	beq.n	80067dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fe60 	bl	800749c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f9c7 	bl	8006b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00c      	beq.n	8006824 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0220 	mvn.w	r2, #32
 800681c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fe32 	bl	8007488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006846:	2302      	movs	r3, #2
 8006848:	e0ae      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b0c      	cmp	r3, #12
 8006856:	f200 809f 	bhi.w	8006998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800685a:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006895 	.word	0x08006895
 8006864:	08006999 	.word	0x08006999
 8006868:	08006999 	.word	0x08006999
 800686c:	08006999 	.word	0x08006999
 8006870:	080068d5 	.word	0x080068d5
 8006874:	08006999 	.word	0x08006999
 8006878:	08006999 	.word	0x08006999
 800687c:	08006999 	.word	0x08006999
 8006880:	08006917 	.word	0x08006917
 8006884:	08006999 	.word	0x08006999
 8006888:	08006999 	.word	0x08006999
 800688c:	08006999 	.word	0x08006999
 8006890:	08006957 	.word	0x08006957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fae8 	bl	8006e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0208 	orr.w	r2, r2, #8
 80068ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0204 	bic.w	r2, r2, #4
 80068be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6999      	ldr	r1, [r3, #24]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	619a      	str	r2, [r3, #24]
      break;
 80068d2:	e064      	b.n	800699e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fb2e 	bl	8006f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6999      	ldr	r1, [r3, #24]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	021a      	lsls	r2, r3, #8
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	619a      	str	r2, [r3, #24]
      break;
 8006914:	e043      	b.n	800699e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fb79 	bl	8007014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0208 	orr.w	r2, r2, #8
 8006930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0204 	bic.w	r2, r2, #4
 8006940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69d9      	ldr	r1, [r3, #28]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	61da      	str	r2, [r3, #28]
      break;
 8006954:	e023      	b.n	800699e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fbc3 	bl	80070e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69d9      	ldr	r1, [r3, #28]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	021a      	lsls	r2, r3, #8
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	61da      	str	r2, [r3, #28]
      break;
 8006996:	e002      	b.n	800699e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
      break;
 800699c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_TIM_ConfigClockSource+0x1c>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e0b4      	b.n	8006b36 <HAL_TIM_ConfigClockSource+0x186>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a04:	d03e      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0xd4>
 8006a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a0a:	f200 8087 	bhi.w	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
 8006a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a12:	f000 8086 	beq.w	8006b22 <HAL_TIM_ConfigClockSource+0x172>
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a1a:	d87f      	bhi.n	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b70      	cmp	r3, #112	@ 0x70
 8006a1e:	d01a      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0xa6>
 8006a20:	2b70      	cmp	r3, #112	@ 0x70
 8006a22:	d87b      	bhi.n	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
 8006a24:	2b60      	cmp	r3, #96	@ 0x60
 8006a26:	d050      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x11a>
 8006a28:	2b60      	cmp	r3, #96	@ 0x60
 8006a2a:	d877      	bhi.n	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b50      	cmp	r3, #80	@ 0x50
 8006a2e:	d03c      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0xfa>
 8006a30:	2b50      	cmp	r3, #80	@ 0x50
 8006a32:	d873      	bhi.n	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
 8006a34:	2b40      	cmp	r3, #64	@ 0x40
 8006a36:	d058      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x13a>
 8006a38:	2b40      	cmp	r3, #64	@ 0x40
 8006a3a:	d86f      	bhi.n	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b30      	cmp	r3, #48	@ 0x30
 8006a3e:	d064      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x15a>
 8006a40:	2b30      	cmp	r3, #48	@ 0x30
 8006a42:	d86b      	bhi.n	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d060      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x15a>
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d867      	bhi.n	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d05c      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x15a>
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d05a      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x15a>
 8006a54:	e062      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a66:	f000 fc09 	bl	800727c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	609a      	str	r2, [r3, #8]
      break;
 8006a82:	e04f      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a94:	f000 fbf2 	bl	800727c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006aa6:	609a      	str	r2, [r3, #8]
      break;
 8006aa8:	e03c      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f000 fb66 	bl	8007188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2150      	movs	r1, #80	@ 0x50
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fbbf 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006ac8:	e02c      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f000 fb85 	bl	80071e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2160      	movs	r1, #96	@ 0x60
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fbaf 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006ae8:	e01c      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af6:	461a      	mov	r2, r3
 8006af8:	f000 fb46 	bl	8007188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2140      	movs	r1, #64	@ 0x40
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fb9f 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006b08:	e00c      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f000 fb96 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006b1a:	e003      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b20:	e000      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d107      	bne.n	8006bde <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bdc:	e02a      	b.n	8006c34 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d107      	bne.n	8006bf8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2202      	movs	r2, #2
 8006bec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bf6:	e01d      	b.n	8006c34 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d107      	bne.n	8006c12 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2204      	movs	r2, #4
 8006c06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c10:	e010      	b.n	8006c34 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d107      	bne.n	8006c2c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2208      	movs	r2, #8
 8006c20:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c2a:	e003      	b.n	8006c34 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f7ff ffb4 	bl	8006ba2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	771a      	strb	r2, [r3, #28]
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d10b      	bne.n	8006c78 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d136      	bne.n	8006cdc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c76:	e031      	b.n	8006cdc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d10b      	bne.n	8006c9a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2202      	movs	r2, #2
 8006c86:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d125      	bne.n	8006cdc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c98:	e020      	b.n	8006cdc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d10b      	bne.n	8006cbc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d114      	bne.n	8006cdc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cba:	e00f      	b.n	8006cdc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d10a      	bne.n	8006cdc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d103      	bne.n	8006cdc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7fa fc39 	bl	8001554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
}
 8006ce8:	bf00      	nop
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d103      	bne.n	8006d10 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	771a      	strb	r2, [r3, #28]
 8006d0e:	e019      	b.n	8006d44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d103      	bne.n	8006d22 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	771a      	strb	r2, [r3, #28]
 8006d20:	e010      	b.n	8006d44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d103      	bne.n	8006d34 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	771a      	strb	r2, [r3, #28]
 8006d32:	e007      	b.n	8006d44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d102      	bne.n	8006d44 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2208      	movs	r2, #8
 8006d42:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff ff18 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a3a      	ldr	r2, [pc, #232]	@ (8006e54 <TIM_Base_SetConfig+0xfc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00f      	beq.n	8006d90 <TIM_Base_SetConfig+0x38>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d76:	d00b      	beq.n	8006d90 <TIM_Base_SetConfig+0x38>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a37      	ldr	r2, [pc, #220]	@ (8006e58 <TIM_Base_SetConfig+0x100>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d007      	beq.n	8006d90 <TIM_Base_SetConfig+0x38>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a36      	ldr	r2, [pc, #216]	@ (8006e5c <TIM_Base_SetConfig+0x104>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_Base_SetConfig+0x38>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a35      	ldr	r2, [pc, #212]	@ (8006e60 <TIM_Base_SetConfig+0x108>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d108      	bne.n	8006da2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2b      	ldr	r2, [pc, #172]	@ (8006e54 <TIM_Base_SetConfig+0xfc>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01b      	beq.n	8006de2 <TIM_Base_SetConfig+0x8a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db0:	d017      	beq.n	8006de2 <TIM_Base_SetConfig+0x8a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a28      	ldr	r2, [pc, #160]	@ (8006e58 <TIM_Base_SetConfig+0x100>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d013      	beq.n	8006de2 <TIM_Base_SetConfig+0x8a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a27      	ldr	r2, [pc, #156]	@ (8006e5c <TIM_Base_SetConfig+0x104>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00f      	beq.n	8006de2 <TIM_Base_SetConfig+0x8a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a26      	ldr	r2, [pc, #152]	@ (8006e60 <TIM_Base_SetConfig+0x108>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00b      	beq.n	8006de2 <TIM_Base_SetConfig+0x8a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a25      	ldr	r2, [pc, #148]	@ (8006e64 <TIM_Base_SetConfig+0x10c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d007      	beq.n	8006de2 <TIM_Base_SetConfig+0x8a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a24      	ldr	r2, [pc, #144]	@ (8006e68 <TIM_Base_SetConfig+0x110>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <TIM_Base_SetConfig+0x8a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	@ (8006e6c <TIM_Base_SetConfig+0x114>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d108      	bne.n	8006df4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e54 <TIM_Base_SetConfig+0xfc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d103      	bne.n	8006e28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d105      	bne.n	8006e46 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f023 0201 	bic.w	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	611a      	str	r2, [r3, #16]
  }
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40014000 	.word	0x40014000
 8006e68:	40014400 	.word	0x40014400
 8006e6c:	40014800 	.word	0x40014800

08006e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f023 0201 	bic.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f023 0302 	bic.w	r3, r3, #2
 8006eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f38 <TIM_OC1_SetConfig+0xc8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d10c      	bne.n	8006ee6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f023 0308 	bic.w	r3, r3, #8
 8006ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f023 0304 	bic.w	r3, r3, #4
 8006ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a13      	ldr	r2, [pc, #76]	@ (8006f38 <TIM_OC1_SetConfig+0xc8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d111      	bne.n	8006f12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40010000 	.word	0x40010000

08006f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	f023 0210 	bic.w	r2, r3, #16
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f023 0320 	bic.w	r3, r3, #32
 8006f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a1e      	ldr	r2, [pc, #120]	@ (8007010 <TIM_OC2_SetConfig+0xd4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d10d      	bne.n	8006fb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a15      	ldr	r2, [pc, #84]	@ (8007010 <TIM_OC2_SetConfig+0xd4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d113      	bne.n	8006fe8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	621a      	str	r2, [r3, #32]
}
 8007002:	bf00      	nop
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40010000 	.word	0x40010000

08007014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800705c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1d      	ldr	r2, [pc, #116]	@ (80070e4 <TIM_OC3_SetConfig+0xd0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d10d      	bne.n	800708e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800708c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a14      	ldr	r2, [pc, #80]	@ (80070e4 <TIM_OC3_SetConfig+0xd0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d113      	bne.n	80070be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800709c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	621a      	str	r2, [r3, #32]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	40010000 	.word	0x40010000

080070e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800711e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	031b      	lsls	r3, r3, #12
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a10      	ldr	r2, [pc, #64]	@ (8007184 <TIM_OC4_SetConfig+0x9c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d109      	bne.n	800715c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800714e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	019b      	lsls	r3, r3, #6
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	621a      	str	r2, [r3, #32]
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000

08007188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f023 0201 	bic.w	r2, r3, #1
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f023 030a 	bic.w	r3, r3, #10
 80071c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b087      	sub	sp, #28
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	f023 0210 	bic.w	r2, r3, #16
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	031b      	lsls	r3, r3, #12
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	f043 0307 	orr.w	r3, r3, #7
 8007268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	431a      	orrs	r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	609a      	str	r2, [r3, #8]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2201      	movs	r2, #1
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e050      	b.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1c      	ldr	r2, [pc, #112]	@ (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d018      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800736c:	d013      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a18      	ldr	r2, [pc, #96]	@ (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00e      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a16      	ldr	r2, [pc, #88]	@ (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a15      	ldr	r2, [pc, #84]	@ (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a13      	ldr	r2, [pc, #76]	@ (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d10c      	bne.n	80073b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800739c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	40010000 	.word	0x40010000
 80073d4:	40000400 	.word	0x40000400
 80073d8:	40000800 	.word	0x40000800
 80073dc:	40000c00 	.word	0x40000c00
 80073e0:	40014000 	.word	0x40014000

080073e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e03d      	b.n	800747c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <rand>:
 80074b0:	4b16      	ldr	r3, [pc, #88]	@ (800750c <rand+0x5c>)
 80074b2:	b510      	push	{r4, lr}
 80074b4:	681c      	ldr	r4, [r3, #0]
 80074b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80074b8:	b9b3      	cbnz	r3, 80074e8 <rand+0x38>
 80074ba:	2018      	movs	r0, #24
 80074bc:	f000 fa7a 	bl	80079b4 <malloc>
 80074c0:	4602      	mov	r2, r0
 80074c2:	6320      	str	r0, [r4, #48]	@ 0x30
 80074c4:	b920      	cbnz	r0, 80074d0 <rand+0x20>
 80074c6:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <rand+0x60>)
 80074c8:	4812      	ldr	r0, [pc, #72]	@ (8007514 <rand+0x64>)
 80074ca:	2152      	movs	r1, #82	@ 0x52
 80074cc:	f000 fa0a 	bl	80078e4 <__assert_func>
 80074d0:	4911      	ldr	r1, [pc, #68]	@ (8007518 <rand+0x68>)
 80074d2:	4b12      	ldr	r3, [pc, #72]	@ (800751c <rand+0x6c>)
 80074d4:	e9c0 1300 	strd	r1, r3, [r0]
 80074d8:	4b11      	ldr	r3, [pc, #68]	@ (8007520 <rand+0x70>)
 80074da:	6083      	str	r3, [r0, #8]
 80074dc:	230b      	movs	r3, #11
 80074de:	8183      	strh	r3, [r0, #12]
 80074e0:	2100      	movs	r1, #0
 80074e2:	2001      	movs	r0, #1
 80074e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80074e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80074ea:	480e      	ldr	r0, [pc, #56]	@ (8007524 <rand+0x74>)
 80074ec:	690b      	ldr	r3, [r1, #16]
 80074ee:	694c      	ldr	r4, [r1, #20]
 80074f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007528 <rand+0x78>)
 80074f2:	4358      	muls	r0, r3
 80074f4:	fb02 0004 	mla	r0, r2, r4, r0
 80074f8:	fba3 3202 	umull	r3, r2, r3, r2
 80074fc:	3301      	adds	r3, #1
 80074fe:	eb40 0002 	adc.w	r0, r0, r2
 8007502:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007506:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800750a:	bd10      	pop	{r4, pc}
 800750c:	20000088 	.word	0x20000088
 8007510:	08008dd8 	.word	0x08008dd8
 8007514:	08008def 	.word	0x08008def
 8007518:	abcd330e 	.word	0xabcd330e
 800751c:	e66d1234 	.word	0xe66d1234
 8007520:	0005deec 	.word	0x0005deec
 8007524:	5851f42d 	.word	0x5851f42d
 8007528:	4c957f2d 	.word	0x4c957f2d

0800752c <std>:
 800752c:	2300      	movs	r3, #0
 800752e:	b510      	push	{r4, lr}
 8007530:	4604      	mov	r4, r0
 8007532:	e9c0 3300 	strd	r3, r3, [r0]
 8007536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800753a:	6083      	str	r3, [r0, #8]
 800753c:	8181      	strh	r1, [r0, #12]
 800753e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007540:	81c2      	strh	r2, [r0, #14]
 8007542:	6183      	str	r3, [r0, #24]
 8007544:	4619      	mov	r1, r3
 8007546:	2208      	movs	r2, #8
 8007548:	305c      	adds	r0, #92	@ 0x5c
 800754a:	f000 f92d 	bl	80077a8 <memset>
 800754e:	4b0d      	ldr	r3, [pc, #52]	@ (8007584 <std+0x58>)
 8007550:	6263      	str	r3, [r4, #36]	@ 0x24
 8007552:	4b0d      	ldr	r3, [pc, #52]	@ (8007588 <std+0x5c>)
 8007554:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007556:	4b0d      	ldr	r3, [pc, #52]	@ (800758c <std+0x60>)
 8007558:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800755a:	4b0d      	ldr	r3, [pc, #52]	@ (8007590 <std+0x64>)
 800755c:	6323      	str	r3, [r4, #48]	@ 0x30
 800755e:	4b0d      	ldr	r3, [pc, #52]	@ (8007594 <std+0x68>)
 8007560:	6224      	str	r4, [r4, #32]
 8007562:	429c      	cmp	r4, r3
 8007564:	d006      	beq.n	8007574 <std+0x48>
 8007566:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800756a:	4294      	cmp	r4, r2
 800756c:	d002      	beq.n	8007574 <std+0x48>
 800756e:	33d0      	adds	r3, #208	@ 0xd0
 8007570:	429c      	cmp	r4, r3
 8007572:	d105      	bne.n	8007580 <std+0x54>
 8007574:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757c:	f000 b9a0 	b.w	80078c0 <__retarget_lock_init_recursive>
 8007580:	bd10      	pop	{r4, pc}
 8007582:	bf00      	nop
 8007584:	080076b1 	.word	0x080076b1
 8007588:	080076d3 	.word	0x080076d3
 800758c:	0800770b 	.word	0x0800770b
 8007590:	0800772f 	.word	0x0800772f
 8007594:	20002474 	.word	0x20002474

08007598 <stdio_exit_handler>:
 8007598:	4a02      	ldr	r2, [pc, #8]	@ (80075a4 <stdio_exit_handler+0xc>)
 800759a:	4903      	ldr	r1, [pc, #12]	@ (80075a8 <stdio_exit_handler+0x10>)
 800759c:	4803      	ldr	r0, [pc, #12]	@ (80075ac <stdio_exit_handler+0x14>)
 800759e:	f000 b869 	b.w	8007674 <_fwalk_sglue>
 80075a2:	bf00      	nop
 80075a4:	2000007c 	.word	0x2000007c
 80075a8:	080081f5 	.word	0x080081f5
 80075ac:	2000008c 	.word	0x2000008c

080075b0 <cleanup_stdio>:
 80075b0:	6841      	ldr	r1, [r0, #4]
 80075b2:	4b0c      	ldr	r3, [pc, #48]	@ (80075e4 <cleanup_stdio+0x34>)
 80075b4:	4299      	cmp	r1, r3
 80075b6:	b510      	push	{r4, lr}
 80075b8:	4604      	mov	r4, r0
 80075ba:	d001      	beq.n	80075c0 <cleanup_stdio+0x10>
 80075bc:	f000 fe1a 	bl	80081f4 <_fflush_r>
 80075c0:	68a1      	ldr	r1, [r4, #8]
 80075c2:	4b09      	ldr	r3, [pc, #36]	@ (80075e8 <cleanup_stdio+0x38>)
 80075c4:	4299      	cmp	r1, r3
 80075c6:	d002      	beq.n	80075ce <cleanup_stdio+0x1e>
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fe13 	bl	80081f4 <_fflush_r>
 80075ce:	68e1      	ldr	r1, [r4, #12]
 80075d0:	4b06      	ldr	r3, [pc, #24]	@ (80075ec <cleanup_stdio+0x3c>)
 80075d2:	4299      	cmp	r1, r3
 80075d4:	d004      	beq.n	80075e0 <cleanup_stdio+0x30>
 80075d6:	4620      	mov	r0, r4
 80075d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075dc:	f000 be0a 	b.w	80081f4 <_fflush_r>
 80075e0:	bd10      	pop	{r4, pc}
 80075e2:	bf00      	nop
 80075e4:	20002474 	.word	0x20002474
 80075e8:	200024dc 	.word	0x200024dc
 80075ec:	20002544 	.word	0x20002544

080075f0 <global_stdio_init.part.0>:
 80075f0:	b510      	push	{r4, lr}
 80075f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007620 <global_stdio_init.part.0+0x30>)
 80075f4:	4c0b      	ldr	r4, [pc, #44]	@ (8007624 <global_stdio_init.part.0+0x34>)
 80075f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007628 <global_stdio_init.part.0+0x38>)
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	4620      	mov	r0, r4
 80075fc:	2200      	movs	r2, #0
 80075fe:	2104      	movs	r1, #4
 8007600:	f7ff ff94 	bl	800752c <std>
 8007604:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007608:	2201      	movs	r2, #1
 800760a:	2109      	movs	r1, #9
 800760c:	f7ff ff8e 	bl	800752c <std>
 8007610:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007614:	2202      	movs	r2, #2
 8007616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800761a:	2112      	movs	r1, #18
 800761c:	f7ff bf86 	b.w	800752c <std>
 8007620:	200025ac 	.word	0x200025ac
 8007624:	20002474 	.word	0x20002474
 8007628:	08007599 	.word	0x08007599

0800762c <__sfp_lock_acquire>:
 800762c:	4801      	ldr	r0, [pc, #4]	@ (8007634 <__sfp_lock_acquire+0x8>)
 800762e:	f000 b948 	b.w	80078c2 <__retarget_lock_acquire_recursive>
 8007632:	bf00      	nop
 8007634:	200025b5 	.word	0x200025b5

08007638 <__sfp_lock_release>:
 8007638:	4801      	ldr	r0, [pc, #4]	@ (8007640 <__sfp_lock_release+0x8>)
 800763a:	f000 b943 	b.w	80078c4 <__retarget_lock_release_recursive>
 800763e:	bf00      	nop
 8007640:	200025b5 	.word	0x200025b5

08007644 <__sinit>:
 8007644:	b510      	push	{r4, lr}
 8007646:	4604      	mov	r4, r0
 8007648:	f7ff fff0 	bl	800762c <__sfp_lock_acquire>
 800764c:	6a23      	ldr	r3, [r4, #32]
 800764e:	b11b      	cbz	r3, 8007658 <__sinit+0x14>
 8007650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007654:	f7ff bff0 	b.w	8007638 <__sfp_lock_release>
 8007658:	4b04      	ldr	r3, [pc, #16]	@ (800766c <__sinit+0x28>)
 800765a:	6223      	str	r3, [r4, #32]
 800765c:	4b04      	ldr	r3, [pc, #16]	@ (8007670 <__sinit+0x2c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1f5      	bne.n	8007650 <__sinit+0xc>
 8007664:	f7ff ffc4 	bl	80075f0 <global_stdio_init.part.0>
 8007668:	e7f2      	b.n	8007650 <__sinit+0xc>
 800766a:	bf00      	nop
 800766c:	080075b1 	.word	0x080075b1
 8007670:	200025ac 	.word	0x200025ac

08007674 <_fwalk_sglue>:
 8007674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007678:	4607      	mov	r7, r0
 800767a:	4688      	mov	r8, r1
 800767c:	4614      	mov	r4, r2
 800767e:	2600      	movs	r6, #0
 8007680:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007684:	f1b9 0901 	subs.w	r9, r9, #1
 8007688:	d505      	bpl.n	8007696 <_fwalk_sglue+0x22>
 800768a:	6824      	ldr	r4, [r4, #0]
 800768c:	2c00      	cmp	r4, #0
 800768e:	d1f7      	bne.n	8007680 <_fwalk_sglue+0xc>
 8007690:	4630      	mov	r0, r6
 8007692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007696:	89ab      	ldrh	r3, [r5, #12]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d907      	bls.n	80076ac <_fwalk_sglue+0x38>
 800769c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076a0:	3301      	adds	r3, #1
 80076a2:	d003      	beq.n	80076ac <_fwalk_sglue+0x38>
 80076a4:	4629      	mov	r1, r5
 80076a6:	4638      	mov	r0, r7
 80076a8:	47c0      	blx	r8
 80076aa:	4306      	orrs	r6, r0
 80076ac:	3568      	adds	r5, #104	@ 0x68
 80076ae:	e7e9      	b.n	8007684 <_fwalk_sglue+0x10>

080076b0 <__sread>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	f000 f8b4 	bl	8007824 <_read_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	bfab      	itete	ge
 80076c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076c2:	89a3      	ldrhlt	r3, [r4, #12]
 80076c4:	181b      	addge	r3, r3, r0
 80076c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076ca:	bfac      	ite	ge
 80076cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076ce:	81a3      	strhlt	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__swrite>:
 80076d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	461f      	mov	r7, r3
 80076d8:	898b      	ldrh	r3, [r1, #12]
 80076da:	05db      	lsls	r3, r3, #23
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	4616      	mov	r6, r2
 80076e2:	d505      	bpl.n	80076f0 <__swrite+0x1e>
 80076e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e8:	2302      	movs	r3, #2
 80076ea:	2200      	movs	r2, #0
 80076ec:	f000 f888 	bl	8007800 <_lseek_r>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	4632      	mov	r2, r6
 80076fe:	463b      	mov	r3, r7
 8007700:	4628      	mov	r0, r5
 8007702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007706:	f000 b89f 	b.w	8007848 <_write_r>

0800770a <__sseek>:
 800770a:	b510      	push	{r4, lr}
 800770c:	460c      	mov	r4, r1
 800770e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007712:	f000 f875 	bl	8007800 <_lseek_r>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	bf15      	itete	ne
 800771c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800771e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007726:	81a3      	strheq	r3, [r4, #12]
 8007728:	bf18      	it	ne
 800772a:	81a3      	strhne	r3, [r4, #12]
 800772c:	bd10      	pop	{r4, pc}

0800772e <__sclose>:
 800772e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007732:	f000 b855 	b.w	80077e0 <_close_r>

08007736 <_vsniprintf_r>:
 8007736:	b530      	push	{r4, r5, lr}
 8007738:	4614      	mov	r4, r2
 800773a:	2c00      	cmp	r4, #0
 800773c:	b09b      	sub	sp, #108	@ 0x6c
 800773e:	4605      	mov	r5, r0
 8007740:	461a      	mov	r2, r3
 8007742:	da05      	bge.n	8007750 <_vsniprintf_r+0x1a>
 8007744:	238b      	movs	r3, #139	@ 0x8b
 8007746:	6003      	str	r3, [r0, #0]
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	b01b      	add	sp, #108	@ 0x6c
 800774e:	bd30      	pop	{r4, r5, pc}
 8007750:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007754:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007758:	bf14      	ite	ne
 800775a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800775e:	4623      	moveq	r3, r4
 8007760:	9302      	str	r3, [sp, #8]
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007768:	9100      	str	r1, [sp, #0]
 800776a:	9104      	str	r1, [sp, #16]
 800776c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007770:	4669      	mov	r1, sp
 8007772:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007774:	f000 fa30 	bl	8007bd8 <_svfiprintf_r>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	bfbc      	itt	lt
 800777c:	238b      	movlt	r3, #139	@ 0x8b
 800777e:	602b      	strlt	r3, [r5, #0]
 8007780:	2c00      	cmp	r4, #0
 8007782:	d0e3      	beq.n	800774c <_vsniprintf_r+0x16>
 8007784:	9b00      	ldr	r3, [sp, #0]
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e7df      	b.n	800774c <_vsniprintf_r+0x16>

0800778c <vsniprintf>:
 800778c:	b507      	push	{r0, r1, r2, lr}
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4613      	mov	r3, r2
 8007792:	460a      	mov	r2, r1
 8007794:	4601      	mov	r1, r0
 8007796:	4803      	ldr	r0, [pc, #12]	@ (80077a4 <vsniprintf+0x18>)
 8007798:	6800      	ldr	r0, [r0, #0]
 800779a:	f7ff ffcc 	bl	8007736 <_vsniprintf_r>
 800779e:	b003      	add	sp, #12
 80077a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80077a4:	20000088 	.word	0x20000088

080077a8 <memset>:
 80077a8:	4402      	add	r2, r0
 80077aa:	4603      	mov	r3, r0
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d100      	bne.n	80077b2 <memset+0xa>
 80077b0:	4770      	bx	lr
 80077b2:	f803 1b01 	strb.w	r1, [r3], #1
 80077b6:	e7f9      	b.n	80077ac <memset+0x4>

080077b8 <strncpy>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	3901      	subs	r1, #1
 80077bc:	4603      	mov	r3, r0
 80077be:	b132      	cbz	r2, 80077ce <strncpy+0x16>
 80077c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80077c4:	f803 4b01 	strb.w	r4, [r3], #1
 80077c8:	3a01      	subs	r2, #1
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	d1f7      	bne.n	80077be <strncpy+0x6>
 80077ce:	441a      	add	r2, r3
 80077d0:	2100      	movs	r1, #0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d100      	bne.n	80077d8 <strncpy+0x20>
 80077d6:	bd10      	pop	{r4, pc}
 80077d8:	f803 1b01 	strb.w	r1, [r3], #1
 80077dc:	e7f9      	b.n	80077d2 <strncpy+0x1a>
	...

080077e0 <_close_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d06      	ldr	r5, [pc, #24]	@ (80077fc <_close_r+0x1c>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7fc fb26 	bl	8003e3c <_close>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_close_r+0x1a>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_close_r+0x1a>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	200025b0 	.word	0x200025b0

08007800 <_lseek_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	@ (8007820 <_lseek_r+0x20>)
 8007804:	4604      	mov	r4, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7fc fb3b 	bl	8003e8a <_lseek>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_lseek_r+0x1e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_lseek_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	200025b0 	.word	0x200025b0

08007824 <_read_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d07      	ldr	r5, [pc, #28]	@ (8007844 <_read_r+0x20>)
 8007828:	4604      	mov	r4, r0
 800782a:	4608      	mov	r0, r1
 800782c:	4611      	mov	r1, r2
 800782e:	2200      	movs	r2, #0
 8007830:	602a      	str	r2, [r5, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	f7fc fac9 	bl	8003dca <_read>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_read_r+0x1e>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_read_r+0x1e>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	200025b0 	.word	0x200025b0

08007848 <_write_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d07      	ldr	r5, [pc, #28]	@ (8007868 <_write_r+0x20>)
 800784c:	4604      	mov	r4, r0
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	2200      	movs	r2, #0
 8007854:	602a      	str	r2, [r5, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	f7fc fad4 	bl	8003e04 <_write>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_write_r+0x1e>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_write_r+0x1e>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	200025b0 	.word	0x200025b0

0800786c <__errno>:
 800786c:	4b01      	ldr	r3, [pc, #4]	@ (8007874 <__errno+0x8>)
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20000088 	.word	0x20000088

08007878 <__libc_init_array>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	4d0d      	ldr	r5, [pc, #52]	@ (80078b0 <__libc_init_array+0x38>)
 800787c:	4c0d      	ldr	r4, [pc, #52]	@ (80078b4 <__libc_init_array+0x3c>)
 800787e:	1b64      	subs	r4, r4, r5
 8007880:	10a4      	asrs	r4, r4, #2
 8007882:	2600      	movs	r6, #0
 8007884:	42a6      	cmp	r6, r4
 8007886:	d109      	bne.n	800789c <__libc_init_array+0x24>
 8007888:	4d0b      	ldr	r5, [pc, #44]	@ (80078b8 <__libc_init_array+0x40>)
 800788a:	4c0c      	ldr	r4, [pc, #48]	@ (80078bc <__libc_init_array+0x44>)
 800788c:	f000 fff0 	bl	8008870 <_init>
 8007890:	1b64      	subs	r4, r4, r5
 8007892:	10a4      	asrs	r4, r4, #2
 8007894:	2600      	movs	r6, #0
 8007896:	42a6      	cmp	r6, r4
 8007898:	d105      	bne.n	80078a6 <__libc_init_array+0x2e>
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a0:	4798      	blx	r3
 80078a2:	3601      	adds	r6, #1
 80078a4:	e7ee      	b.n	8007884 <__libc_init_array+0xc>
 80078a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078aa:	4798      	blx	r3
 80078ac:	3601      	adds	r6, #1
 80078ae:	e7f2      	b.n	8007896 <__libc_init_array+0x1e>
 80078b0:	08008ec0 	.word	0x08008ec0
 80078b4:	08008ec0 	.word	0x08008ec0
 80078b8:	08008ec0 	.word	0x08008ec0
 80078bc:	08008ec4 	.word	0x08008ec4

080078c0 <__retarget_lock_init_recursive>:
 80078c0:	4770      	bx	lr

080078c2 <__retarget_lock_acquire_recursive>:
 80078c2:	4770      	bx	lr

080078c4 <__retarget_lock_release_recursive>:
 80078c4:	4770      	bx	lr

080078c6 <memcpy>:
 80078c6:	440a      	add	r2, r1
 80078c8:	4291      	cmp	r1, r2
 80078ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ce:	d100      	bne.n	80078d2 <memcpy+0xc>
 80078d0:	4770      	bx	lr
 80078d2:	b510      	push	{r4, lr}
 80078d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078dc:	4291      	cmp	r1, r2
 80078de:	d1f9      	bne.n	80078d4 <memcpy+0xe>
 80078e0:	bd10      	pop	{r4, pc}
	...

080078e4 <__assert_func>:
 80078e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078e6:	4614      	mov	r4, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	4b09      	ldr	r3, [pc, #36]	@ (8007910 <__assert_func+0x2c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4605      	mov	r5, r0
 80078f0:	68d8      	ldr	r0, [r3, #12]
 80078f2:	b954      	cbnz	r4, 800790a <__assert_func+0x26>
 80078f4:	4b07      	ldr	r3, [pc, #28]	@ (8007914 <__assert_func+0x30>)
 80078f6:	461c      	mov	r4, r3
 80078f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078fc:	9100      	str	r1, [sp, #0]
 80078fe:	462b      	mov	r3, r5
 8007900:	4905      	ldr	r1, [pc, #20]	@ (8007918 <__assert_func+0x34>)
 8007902:	f000 fc9f 	bl	8008244 <fiprintf>
 8007906:	f000 fcd9 	bl	80082bc <abort>
 800790a:	4b04      	ldr	r3, [pc, #16]	@ (800791c <__assert_func+0x38>)
 800790c:	e7f4      	b.n	80078f8 <__assert_func+0x14>
 800790e:	bf00      	nop
 8007910:	20000088 	.word	0x20000088
 8007914:	08008e82 	.word	0x08008e82
 8007918:	08008e54 	.word	0x08008e54
 800791c:	08008e47 	.word	0x08008e47

08007920 <_free_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4605      	mov	r5, r0
 8007924:	2900      	cmp	r1, #0
 8007926:	d041      	beq.n	80079ac <_free_r+0x8c>
 8007928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800792c:	1f0c      	subs	r4, r1, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfb8      	it	lt
 8007932:	18e4      	addlt	r4, r4, r3
 8007934:	f000 f8e8 	bl	8007b08 <__malloc_lock>
 8007938:	4a1d      	ldr	r2, [pc, #116]	@ (80079b0 <_free_r+0x90>)
 800793a:	6813      	ldr	r3, [r2, #0]
 800793c:	b933      	cbnz	r3, 800794c <_free_r+0x2c>
 800793e:	6063      	str	r3, [r4, #4]
 8007940:	6014      	str	r4, [r2, #0]
 8007942:	4628      	mov	r0, r5
 8007944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007948:	f000 b8e4 	b.w	8007b14 <__malloc_unlock>
 800794c:	42a3      	cmp	r3, r4
 800794e:	d908      	bls.n	8007962 <_free_r+0x42>
 8007950:	6820      	ldr	r0, [r4, #0]
 8007952:	1821      	adds	r1, r4, r0
 8007954:	428b      	cmp	r3, r1
 8007956:	bf01      	itttt	eq
 8007958:	6819      	ldreq	r1, [r3, #0]
 800795a:	685b      	ldreq	r3, [r3, #4]
 800795c:	1809      	addeq	r1, r1, r0
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	e7ed      	b.n	800793e <_free_r+0x1e>
 8007962:	461a      	mov	r2, r3
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b10b      	cbz	r3, 800796c <_free_r+0x4c>
 8007968:	42a3      	cmp	r3, r4
 800796a:	d9fa      	bls.n	8007962 <_free_r+0x42>
 800796c:	6811      	ldr	r1, [r2, #0]
 800796e:	1850      	adds	r0, r2, r1
 8007970:	42a0      	cmp	r0, r4
 8007972:	d10b      	bne.n	800798c <_free_r+0x6c>
 8007974:	6820      	ldr	r0, [r4, #0]
 8007976:	4401      	add	r1, r0
 8007978:	1850      	adds	r0, r2, r1
 800797a:	4283      	cmp	r3, r0
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	d1e0      	bne.n	8007942 <_free_r+0x22>
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	6053      	str	r3, [r2, #4]
 8007986:	4408      	add	r0, r1
 8007988:	6010      	str	r0, [r2, #0]
 800798a:	e7da      	b.n	8007942 <_free_r+0x22>
 800798c:	d902      	bls.n	8007994 <_free_r+0x74>
 800798e:	230c      	movs	r3, #12
 8007990:	602b      	str	r3, [r5, #0]
 8007992:	e7d6      	b.n	8007942 <_free_r+0x22>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	1821      	adds	r1, r4, r0
 8007998:	428b      	cmp	r3, r1
 800799a:	bf04      	itt	eq
 800799c:	6819      	ldreq	r1, [r3, #0]
 800799e:	685b      	ldreq	r3, [r3, #4]
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	bf04      	itt	eq
 80079a4:	1809      	addeq	r1, r1, r0
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	6054      	str	r4, [r2, #4]
 80079aa:	e7ca      	b.n	8007942 <_free_r+0x22>
 80079ac:	bd38      	pop	{r3, r4, r5, pc}
 80079ae:	bf00      	nop
 80079b0:	200025bc 	.word	0x200025bc

080079b4 <malloc>:
 80079b4:	4b02      	ldr	r3, [pc, #8]	@ (80079c0 <malloc+0xc>)
 80079b6:	4601      	mov	r1, r0
 80079b8:	6818      	ldr	r0, [r3, #0]
 80079ba:	f000 b825 	b.w	8007a08 <_malloc_r>
 80079be:	bf00      	nop
 80079c0:	20000088 	.word	0x20000088

080079c4 <sbrk_aligned>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007a04 <sbrk_aligned+0x40>)
 80079c8:	460c      	mov	r4, r1
 80079ca:	6831      	ldr	r1, [r6, #0]
 80079cc:	4605      	mov	r5, r0
 80079ce:	b911      	cbnz	r1, 80079d6 <sbrk_aligned+0x12>
 80079d0:	f000 fc64 	bl	800829c <_sbrk_r>
 80079d4:	6030      	str	r0, [r6, #0]
 80079d6:	4621      	mov	r1, r4
 80079d8:	4628      	mov	r0, r5
 80079da:	f000 fc5f 	bl	800829c <_sbrk_r>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	d103      	bne.n	80079ea <sbrk_aligned+0x26>
 80079e2:	f04f 34ff 	mov.w	r4, #4294967295
 80079e6:	4620      	mov	r0, r4
 80079e8:	bd70      	pop	{r4, r5, r6, pc}
 80079ea:	1cc4      	adds	r4, r0, #3
 80079ec:	f024 0403 	bic.w	r4, r4, #3
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d0f8      	beq.n	80079e6 <sbrk_aligned+0x22>
 80079f4:	1a21      	subs	r1, r4, r0
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 fc50 	bl	800829c <_sbrk_r>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d1f2      	bne.n	80079e6 <sbrk_aligned+0x22>
 8007a00:	e7ef      	b.n	80079e2 <sbrk_aligned+0x1e>
 8007a02:	bf00      	nop
 8007a04:	200025b8 	.word	0x200025b8

08007a08 <_malloc_r>:
 8007a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a0c:	1ccd      	adds	r5, r1, #3
 8007a0e:	f025 0503 	bic.w	r5, r5, #3
 8007a12:	3508      	adds	r5, #8
 8007a14:	2d0c      	cmp	r5, #12
 8007a16:	bf38      	it	cc
 8007a18:	250c      	movcc	r5, #12
 8007a1a:	2d00      	cmp	r5, #0
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	db01      	blt.n	8007a24 <_malloc_r+0x1c>
 8007a20:	42a9      	cmp	r1, r5
 8007a22:	d904      	bls.n	8007a2e <_malloc_r+0x26>
 8007a24:	230c      	movs	r3, #12
 8007a26:	6033      	str	r3, [r6, #0]
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b04 <_malloc_r+0xfc>
 8007a32:	f000 f869 	bl	8007b08 <__malloc_lock>
 8007a36:	f8d8 3000 	ldr.w	r3, [r8]
 8007a3a:	461c      	mov	r4, r3
 8007a3c:	bb44      	cbnz	r4, 8007a90 <_malloc_r+0x88>
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4630      	mov	r0, r6
 8007a42:	f7ff ffbf 	bl	80079c4 <sbrk_aligned>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	4604      	mov	r4, r0
 8007a4a:	d158      	bne.n	8007afe <_malloc_r+0xf6>
 8007a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007a50:	4627      	mov	r7, r4
 8007a52:	2f00      	cmp	r7, #0
 8007a54:	d143      	bne.n	8007ade <_malloc_r+0xd6>
 8007a56:	2c00      	cmp	r4, #0
 8007a58:	d04b      	beq.n	8007af2 <_malloc_r+0xea>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	4630      	mov	r0, r6
 8007a60:	eb04 0903 	add.w	r9, r4, r3
 8007a64:	f000 fc1a 	bl	800829c <_sbrk_r>
 8007a68:	4581      	cmp	r9, r0
 8007a6a:	d142      	bne.n	8007af2 <_malloc_r+0xea>
 8007a6c:	6821      	ldr	r1, [r4, #0]
 8007a6e:	1a6d      	subs	r5, r5, r1
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7ff ffa6 	bl	80079c4 <sbrk_aligned>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d03a      	beq.n	8007af2 <_malloc_r+0xea>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	442b      	add	r3, r5
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	f8d8 3000 	ldr.w	r3, [r8]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	bb62      	cbnz	r2, 8007ae4 <_malloc_r+0xdc>
 8007a8a:	f8c8 7000 	str.w	r7, [r8]
 8007a8e:	e00f      	b.n	8007ab0 <_malloc_r+0xa8>
 8007a90:	6822      	ldr	r2, [r4, #0]
 8007a92:	1b52      	subs	r2, r2, r5
 8007a94:	d420      	bmi.n	8007ad8 <_malloc_r+0xd0>
 8007a96:	2a0b      	cmp	r2, #11
 8007a98:	d917      	bls.n	8007aca <_malloc_r+0xc2>
 8007a9a:	1961      	adds	r1, r4, r5
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	6025      	str	r5, [r4, #0]
 8007aa0:	bf18      	it	ne
 8007aa2:	6059      	strne	r1, [r3, #4]
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	bf08      	it	eq
 8007aa8:	f8c8 1000 	streq.w	r1, [r8]
 8007aac:	5162      	str	r2, [r4, r5]
 8007aae:	604b      	str	r3, [r1, #4]
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f000 f82f 	bl	8007b14 <__malloc_unlock>
 8007ab6:	f104 000b 	add.w	r0, r4, #11
 8007aba:	1d23      	adds	r3, r4, #4
 8007abc:	f020 0007 	bic.w	r0, r0, #7
 8007ac0:	1ac2      	subs	r2, r0, r3
 8007ac2:	bf1c      	itt	ne
 8007ac4:	1a1b      	subne	r3, r3, r0
 8007ac6:	50a3      	strne	r3, [r4, r2]
 8007ac8:	e7af      	b.n	8007a2a <_malloc_r+0x22>
 8007aca:	6862      	ldr	r2, [r4, #4]
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	bf0c      	ite	eq
 8007ad0:	f8c8 2000 	streq.w	r2, [r8]
 8007ad4:	605a      	strne	r2, [r3, #4]
 8007ad6:	e7eb      	b.n	8007ab0 <_malloc_r+0xa8>
 8007ad8:	4623      	mov	r3, r4
 8007ada:	6864      	ldr	r4, [r4, #4]
 8007adc:	e7ae      	b.n	8007a3c <_malloc_r+0x34>
 8007ade:	463c      	mov	r4, r7
 8007ae0:	687f      	ldr	r7, [r7, #4]
 8007ae2:	e7b6      	b.n	8007a52 <_malloc_r+0x4a>
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	d1fb      	bne.n	8007ae4 <_malloc_r+0xdc>
 8007aec:	2300      	movs	r3, #0
 8007aee:	6053      	str	r3, [r2, #4]
 8007af0:	e7de      	b.n	8007ab0 <_malloc_r+0xa8>
 8007af2:	230c      	movs	r3, #12
 8007af4:	6033      	str	r3, [r6, #0]
 8007af6:	4630      	mov	r0, r6
 8007af8:	f000 f80c 	bl	8007b14 <__malloc_unlock>
 8007afc:	e794      	b.n	8007a28 <_malloc_r+0x20>
 8007afe:	6005      	str	r5, [r0, #0]
 8007b00:	e7d6      	b.n	8007ab0 <_malloc_r+0xa8>
 8007b02:	bf00      	nop
 8007b04:	200025bc 	.word	0x200025bc

08007b08 <__malloc_lock>:
 8007b08:	4801      	ldr	r0, [pc, #4]	@ (8007b10 <__malloc_lock+0x8>)
 8007b0a:	f7ff beda 	b.w	80078c2 <__retarget_lock_acquire_recursive>
 8007b0e:	bf00      	nop
 8007b10:	200025b4 	.word	0x200025b4

08007b14 <__malloc_unlock>:
 8007b14:	4801      	ldr	r0, [pc, #4]	@ (8007b1c <__malloc_unlock+0x8>)
 8007b16:	f7ff bed5 	b.w	80078c4 <__retarget_lock_release_recursive>
 8007b1a:	bf00      	nop
 8007b1c:	200025b4 	.word	0x200025b4

08007b20 <__ssputs_r>:
 8007b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	688e      	ldr	r6, [r1, #8]
 8007b26:	461f      	mov	r7, r3
 8007b28:	42be      	cmp	r6, r7
 8007b2a:	680b      	ldr	r3, [r1, #0]
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	4690      	mov	r8, r2
 8007b32:	d82d      	bhi.n	8007b90 <__ssputs_r+0x70>
 8007b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b3c:	d026      	beq.n	8007b8c <__ssputs_r+0x6c>
 8007b3e:	6965      	ldr	r5, [r4, #20]
 8007b40:	6909      	ldr	r1, [r1, #16]
 8007b42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b46:	eba3 0901 	sub.w	r9, r3, r1
 8007b4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b4e:	1c7b      	adds	r3, r7, #1
 8007b50:	444b      	add	r3, r9
 8007b52:	106d      	asrs	r5, r5, #1
 8007b54:	429d      	cmp	r5, r3
 8007b56:	bf38      	it	cc
 8007b58:	461d      	movcc	r5, r3
 8007b5a:	0553      	lsls	r3, r2, #21
 8007b5c:	d527      	bpl.n	8007bae <__ssputs_r+0x8e>
 8007b5e:	4629      	mov	r1, r5
 8007b60:	f7ff ff52 	bl	8007a08 <_malloc_r>
 8007b64:	4606      	mov	r6, r0
 8007b66:	b360      	cbz	r0, 8007bc2 <__ssputs_r+0xa2>
 8007b68:	6921      	ldr	r1, [r4, #16]
 8007b6a:	464a      	mov	r2, r9
 8007b6c:	f7ff feab 	bl	80078c6 <memcpy>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	6126      	str	r6, [r4, #16]
 8007b7e:	6165      	str	r5, [r4, #20]
 8007b80:	444e      	add	r6, r9
 8007b82:	eba5 0509 	sub.w	r5, r5, r9
 8007b86:	6026      	str	r6, [r4, #0]
 8007b88:	60a5      	str	r5, [r4, #8]
 8007b8a:	463e      	mov	r6, r7
 8007b8c:	42be      	cmp	r6, r7
 8007b8e:	d900      	bls.n	8007b92 <__ssputs_r+0x72>
 8007b90:	463e      	mov	r6, r7
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	4632      	mov	r2, r6
 8007b96:	4641      	mov	r1, r8
 8007b98:	f000 fb66 	bl	8008268 <memmove>
 8007b9c:	68a3      	ldr	r3, [r4, #8]
 8007b9e:	1b9b      	subs	r3, r3, r6
 8007ba0:	60a3      	str	r3, [r4, #8]
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	4433      	add	r3, r6
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	2000      	movs	r0, #0
 8007baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bae:	462a      	mov	r2, r5
 8007bb0:	f000 fb8b 	bl	80082ca <_realloc_r>
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d1e0      	bne.n	8007b7c <__ssputs_r+0x5c>
 8007bba:	6921      	ldr	r1, [r4, #16]
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	f7ff feaf 	bl	8007920 <_free_r>
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	f8ca 3000 	str.w	r3, [sl]
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bce:	81a3      	strh	r3, [r4, #12]
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd4:	e7e9      	b.n	8007baa <__ssputs_r+0x8a>
	...

08007bd8 <_svfiprintf_r>:
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	4698      	mov	r8, r3
 8007bde:	898b      	ldrh	r3, [r1, #12]
 8007be0:	061b      	lsls	r3, r3, #24
 8007be2:	b09d      	sub	sp, #116	@ 0x74
 8007be4:	4607      	mov	r7, r0
 8007be6:	460d      	mov	r5, r1
 8007be8:	4614      	mov	r4, r2
 8007bea:	d510      	bpl.n	8007c0e <_svfiprintf_r+0x36>
 8007bec:	690b      	ldr	r3, [r1, #16]
 8007bee:	b973      	cbnz	r3, 8007c0e <_svfiprintf_r+0x36>
 8007bf0:	2140      	movs	r1, #64	@ 0x40
 8007bf2:	f7ff ff09 	bl	8007a08 <_malloc_r>
 8007bf6:	6028      	str	r0, [r5, #0]
 8007bf8:	6128      	str	r0, [r5, #16]
 8007bfa:	b930      	cbnz	r0, 8007c0a <_svfiprintf_r+0x32>
 8007bfc:	230c      	movs	r3, #12
 8007bfe:	603b      	str	r3, [r7, #0]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	b01d      	add	sp, #116	@ 0x74
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	2340      	movs	r3, #64	@ 0x40
 8007c0c:	616b      	str	r3, [r5, #20]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c12:	2320      	movs	r3, #32
 8007c14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c1c:	2330      	movs	r3, #48	@ 0x30
 8007c1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007dbc <_svfiprintf_r+0x1e4>
 8007c22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c26:	f04f 0901 	mov.w	r9, #1
 8007c2a:	4623      	mov	r3, r4
 8007c2c:	469a      	mov	sl, r3
 8007c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c32:	b10a      	cbz	r2, 8007c38 <_svfiprintf_r+0x60>
 8007c34:	2a25      	cmp	r2, #37	@ 0x25
 8007c36:	d1f9      	bne.n	8007c2c <_svfiprintf_r+0x54>
 8007c38:	ebba 0b04 	subs.w	fp, sl, r4
 8007c3c:	d00b      	beq.n	8007c56 <_svfiprintf_r+0x7e>
 8007c3e:	465b      	mov	r3, fp
 8007c40:	4622      	mov	r2, r4
 8007c42:	4629      	mov	r1, r5
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ff6b 	bl	8007b20 <__ssputs_r>
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	f000 80a7 	beq.w	8007d9e <_svfiprintf_r+0x1c6>
 8007c50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c52:	445a      	add	r2, fp
 8007c54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c56:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 809f 	beq.w	8007d9e <_svfiprintf_r+0x1c6>
 8007c60:	2300      	movs	r3, #0
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295
 8007c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c6a:	f10a 0a01 	add.w	sl, sl, #1
 8007c6e:	9304      	str	r3, [sp, #16]
 8007c70:	9307      	str	r3, [sp, #28]
 8007c72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c76:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c78:	4654      	mov	r4, sl
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c80:	484e      	ldr	r0, [pc, #312]	@ (8007dbc <_svfiprintf_r+0x1e4>)
 8007c82:	f7f8 faad 	bl	80001e0 <memchr>
 8007c86:	9a04      	ldr	r2, [sp, #16]
 8007c88:	b9d8      	cbnz	r0, 8007cc2 <_svfiprintf_r+0xea>
 8007c8a:	06d0      	lsls	r0, r2, #27
 8007c8c:	bf44      	itt	mi
 8007c8e:	2320      	movmi	r3, #32
 8007c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c94:	0711      	lsls	r1, r2, #28
 8007c96:	bf44      	itt	mi
 8007c98:	232b      	movmi	r3, #43	@ 0x2b
 8007c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca4:	d015      	beq.n	8007cd2 <_svfiprintf_r+0xfa>
 8007ca6:	9a07      	ldr	r2, [sp, #28]
 8007ca8:	4654      	mov	r4, sl
 8007caa:	2000      	movs	r0, #0
 8007cac:	f04f 0c0a 	mov.w	ip, #10
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb6:	3b30      	subs	r3, #48	@ 0x30
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	d94b      	bls.n	8007d54 <_svfiprintf_r+0x17c>
 8007cbc:	b1b0      	cbz	r0, 8007cec <_svfiprintf_r+0x114>
 8007cbe:	9207      	str	r2, [sp, #28]
 8007cc0:	e014      	b.n	8007cec <_svfiprintf_r+0x114>
 8007cc2:	eba0 0308 	sub.w	r3, r0, r8
 8007cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	46a2      	mov	sl, r4
 8007cd0:	e7d2      	b.n	8007c78 <_svfiprintf_r+0xa0>
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	1d19      	adds	r1, r3, #4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	9103      	str	r1, [sp, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bfbb      	ittet	lt
 8007cde:	425b      	neglt	r3, r3
 8007ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce4:	9307      	strge	r3, [sp, #28]
 8007ce6:	9307      	strlt	r3, [sp, #28]
 8007ce8:	bfb8      	it	lt
 8007cea:	9204      	strlt	r2, [sp, #16]
 8007cec:	7823      	ldrb	r3, [r4, #0]
 8007cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cf0:	d10a      	bne.n	8007d08 <_svfiprintf_r+0x130>
 8007cf2:	7863      	ldrb	r3, [r4, #1]
 8007cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf6:	d132      	bne.n	8007d5e <_svfiprintf_r+0x186>
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	9203      	str	r2, [sp, #12]
 8007d00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d04:	3402      	adds	r4, #2
 8007d06:	9305      	str	r3, [sp, #20]
 8007d08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007dcc <_svfiprintf_r+0x1f4>
 8007d0c:	7821      	ldrb	r1, [r4, #0]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	4650      	mov	r0, sl
 8007d12:	f7f8 fa65 	bl	80001e0 <memchr>
 8007d16:	b138      	cbz	r0, 8007d28 <_svfiprintf_r+0x150>
 8007d18:	9b04      	ldr	r3, [sp, #16]
 8007d1a:	eba0 000a 	sub.w	r0, r0, sl
 8007d1e:	2240      	movs	r2, #64	@ 0x40
 8007d20:	4082      	lsls	r2, r0
 8007d22:	4313      	orrs	r3, r2
 8007d24:	3401      	adds	r4, #1
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2c:	4824      	ldr	r0, [pc, #144]	@ (8007dc0 <_svfiprintf_r+0x1e8>)
 8007d2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d32:	2206      	movs	r2, #6
 8007d34:	f7f8 fa54 	bl	80001e0 <memchr>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d036      	beq.n	8007daa <_svfiprintf_r+0x1d2>
 8007d3c:	4b21      	ldr	r3, [pc, #132]	@ (8007dc4 <_svfiprintf_r+0x1ec>)
 8007d3e:	bb1b      	cbnz	r3, 8007d88 <_svfiprintf_r+0x1b0>
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	3307      	adds	r3, #7
 8007d44:	f023 0307 	bic.w	r3, r3, #7
 8007d48:	3308      	adds	r3, #8
 8007d4a:	9303      	str	r3, [sp, #12]
 8007d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d4e:	4433      	add	r3, r6
 8007d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d52:	e76a      	b.n	8007c2a <_svfiprintf_r+0x52>
 8007d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d58:	460c      	mov	r4, r1
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	e7a8      	b.n	8007cb0 <_svfiprintf_r+0xd8>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	3401      	adds	r4, #1
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	4619      	mov	r1, r3
 8007d66:	f04f 0c0a 	mov.w	ip, #10
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d70:	3a30      	subs	r2, #48	@ 0x30
 8007d72:	2a09      	cmp	r2, #9
 8007d74:	d903      	bls.n	8007d7e <_svfiprintf_r+0x1a6>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0c6      	beq.n	8007d08 <_svfiprintf_r+0x130>
 8007d7a:	9105      	str	r1, [sp, #20]
 8007d7c:	e7c4      	b.n	8007d08 <_svfiprintf_r+0x130>
 8007d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d82:	4604      	mov	r4, r0
 8007d84:	2301      	movs	r3, #1
 8007d86:	e7f0      	b.n	8007d6a <_svfiprintf_r+0x192>
 8007d88:	ab03      	add	r3, sp, #12
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc8 <_svfiprintf_r+0x1f0>)
 8007d90:	a904      	add	r1, sp, #16
 8007d92:	4638      	mov	r0, r7
 8007d94:	f3af 8000 	nop.w
 8007d98:	1c42      	adds	r2, r0, #1
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	d1d6      	bne.n	8007d4c <_svfiprintf_r+0x174>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	065b      	lsls	r3, r3, #25
 8007da2:	f53f af2d 	bmi.w	8007c00 <_svfiprintf_r+0x28>
 8007da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007da8:	e72c      	b.n	8007c04 <_svfiprintf_r+0x2c>
 8007daa:	ab03      	add	r3, sp, #12
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	462a      	mov	r2, r5
 8007db0:	4b05      	ldr	r3, [pc, #20]	@ (8007dc8 <_svfiprintf_r+0x1f0>)
 8007db2:	a904      	add	r1, sp, #16
 8007db4:	4638      	mov	r0, r7
 8007db6:	f000 f879 	bl	8007eac <_printf_i>
 8007dba:	e7ed      	b.n	8007d98 <_svfiprintf_r+0x1c0>
 8007dbc:	08008e83 	.word	0x08008e83
 8007dc0:	08008e8d 	.word	0x08008e8d
 8007dc4:	00000000 	.word	0x00000000
 8007dc8:	08007b21 	.word	0x08007b21
 8007dcc:	08008e89 	.word	0x08008e89

08007dd0 <_printf_common>:
 8007dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	4616      	mov	r6, r2
 8007dd6:	4698      	mov	r8, r3
 8007dd8:	688a      	ldr	r2, [r1, #8]
 8007dda:	690b      	ldr	r3, [r1, #16]
 8007ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007de0:	4293      	cmp	r3, r2
 8007de2:	bfb8      	it	lt
 8007de4:	4613      	movlt	r3, r2
 8007de6:	6033      	str	r3, [r6, #0]
 8007de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dec:	4607      	mov	r7, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	b10a      	cbz	r2, 8007df6 <_printf_common+0x26>
 8007df2:	3301      	adds	r3, #1
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	0699      	lsls	r1, r3, #26
 8007dfa:	bf42      	ittt	mi
 8007dfc:	6833      	ldrmi	r3, [r6, #0]
 8007dfe:	3302      	addmi	r3, #2
 8007e00:	6033      	strmi	r3, [r6, #0]
 8007e02:	6825      	ldr	r5, [r4, #0]
 8007e04:	f015 0506 	ands.w	r5, r5, #6
 8007e08:	d106      	bne.n	8007e18 <_printf_common+0x48>
 8007e0a:	f104 0a19 	add.w	sl, r4, #25
 8007e0e:	68e3      	ldr	r3, [r4, #12]
 8007e10:	6832      	ldr	r2, [r6, #0]
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	42ab      	cmp	r3, r5
 8007e16:	dc26      	bgt.n	8007e66 <_printf_common+0x96>
 8007e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e1c:	6822      	ldr	r2, [r4, #0]
 8007e1e:	3b00      	subs	r3, #0
 8007e20:	bf18      	it	ne
 8007e22:	2301      	movne	r3, #1
 8007e24:	0692      	lsls	r2, r2, #26
 8007e26:	d42b      	bmi.n	8007e80 <_printf_common+0xb0>
 8007e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e2c:	4641      	mov	r1, r8
 8007e2e:	4638      	mov	r0, r7
 8007e30:	47c8      	blx	r9
 8007e32:	3001      	adds	r0, #1
 8007e34:	d01e      	beq.n	8007e74 <_printf_common+0xa4>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6922      	ldr	r2, [r4, #16]
 8007e3a:	f003 0306 	and.w	r3, r3, #6
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	bf02      	ittt	eq
 8007e42:	68e5      	ldreq	r5, [r4, #12]
 8007e44:	6833      	ldreq	r3, [r6, #0]
 8007e46:	1aed      	subeq	r5, r5, r3
 8007e48:	68a3      	ldr	r3, [r4, #8]
 8007e4a:	bf0c      	ite	eq
 8007e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e50:	2500      	movne	r5, #0
 8007e52:	4293      	cmp	r3, r2
 8007e54:	bfc4      	itt	gt
 8007e56:	1a9b      	subgt	r3, r3, r2
 8007e58:	18ed      	addgt	r5, r5, r3
 8007e5a:	2600      	movs	r6, #0
 8007e5c:	341a      	adds	r4, #26
 8007e5e:	42b5      	cmp	r5, r6
 8007e60:	d11a      	bne.n	8007e98 <_printf_common+0xc8>
 8007e62:	2000      	movs	r0, #0
 8007e64:	e008      	b.n	8007e78 <_printf_common+0xa8>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4652      	mov	r2, sl
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	47c8      	blx	r9
 8007e70:	3001      	adds	r0, #1
 8007e72:	d103      	bne.n	8007e7c <_printf_common+0xac>
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7c:	3501      	adds	r5, #1
 8007e7e:	e7c6      	b.n	8007e0e <_printf_common+0x3e>
 8007e80:	18e1      	adds	r1, r4, r3
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	2030      	movs	r0, #48	@ 0x30
 8007e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e8a:	4422      	add	r2, r4
 8007e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e94:	3302      	adds	r3, #2
 8007e96:	e7c7      	b.n	8007e28 <_printf_common+0x58>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	4622      	mov	r2, r4
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	47c8      	blx	r9
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d0e6      	beq.n	8007e74 <_printf_common+0xa4>
 8007ea6:	3601      	adds	r6, #1
 8007ea8:	e7d9      	b.n	8007e5e <_printf_common+0x8e>
	...

08007eac <_printf_i>:
 8007eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb0:	7e0f      	ldrb	r7, [r1, #24]
 8007eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007eb4:	2f78      	cmp	r7, #120	@ 0x78
 8007eb6:	4691      	mov	r9, r2
 8007eb8:	4680      	mov	r8, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	469a      	mov	sl, r3
 8007ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ec2:	d807      	bhi.n	8007ed4 <_printf_i+0x28>
 8007ec4:	2f62      	cmp	r7, #98	@ 0x62
 8007ec6:	d80a      	bhi.n	8007ede <_printf_i+0x32>
 8007ec8:	2f00      	cmp	r7, #0
 8007eca:	f000 80d2 	beq.w	8008072 <_printf_i+0x1c6>
 8007ece:	2f58      	cmp	r7, #88	@ 0x58
 8007ed0:	f000 80b9 	beq.w	8008046 <_printf_i+0x19a>
 8007ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007edc:	e03a      	b.n	8007f54 <_printf_i+0xa8>
 8007ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ee2:	2b15      	cmp	r3, #21
 8007ee4:	d8f6      	bhi.n	8007ed4 <_printf_i+0x28>
 8007ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8007eec <_printf_i+0x40>)
 8007ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f59 	.word	0x08007f59
 8007ef4:	08007ed5 	.word	0x08007ed5
 8007ef8:	08007ed5 	.word	0x08007ed5
 8007efc:	08007ed5 	.word	0x08007ed5
 8007f00:	08007ed5 	.word	0x08007ed5
 8007f04:	08007f59 	.word	0x08007f59
 8007f08:	08007ed5 	.word	0x08007ed5
 8007f0c:	08007ed5 	.word	0x08007ed5
 8007f10:	08007ed5 	.word	0x08007ed5
 8007f14:	08007ed5 	.word	0x08007ed5
 8007f18:	08008059 	.word	0x08008059
 8007f1c:	08007f83 	.word	0x08007f83
 8007f20:	08008013 	.word	0x08008013
 8007f24:	08007ed5 	.word	0x08007ed5
 8007f28:	08007ed5 	.word	0x08007ed5
 8007f2c:	0800807b 	.word	0x0800807b
 8007f30:	08007ed5 	.word	0x08007ed5
 8007f34:	08007f83 	.word	0x08007f83
 8007f38:	08007ed5 	.word	0x08007ed5
 8007f3c:	08007ed5 	.word	0x08007ed5
 8007f40:	0800801b 	.word	0x0800801b
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6032      	str	r2, [r6, #0]
 8007f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f54:	2301      	movs	r3, #1
 8007f56:	e09d      	b.n	8008094 <_printf_i+0x1e8>
 8007f58:	6833      	ldr	r3, [r6, #0]
 8007f5a:	6820      	ldr	r0, [r4, #0]
 8007f5c:	1d19      	adds	r1, r3, #4
 8007f5e:	6031      	str	r1, [r6, #0]
 8007f60:	0606      	lsls	r6, r0, #24
 8007f62:	d501      	bpl.n	8007f68 <_printf_i+0xbc>
 8007f64:	681d      	ldr	r5, [r3, #0]
 8007f66:	e003      	b.n	8007f70 <_printf_i+0xc4>
 8007f68:	0645      	lsls	r5, r0, #25
 8007f6a:	d5fb      	bpl.n	8007f64 <_printf_i+0xb8>
 8007f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	da03      	bge.n	8007f7c <_printf_i+0xd0>
 8007f74:	232d      	movs	r3, #45	@ 0x2d
 8007f76:	426d      	negs	r5, r5
 8007f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f7c:	4859      	ldr	r0, [pc, #356]	@ (80080e4 <_printf_i+0x238>)
 8007f7e:	230a      	movs	r3, #10
 8007f80:	e011      	b.n	8007fa6 <_printf_i+0xfa>
 8007f82:	6821      	ldr	r1, [r4, #0]
 8007f84:	6833      	ldr	r3, [r6, #0]
 8007f86:	0608      	lsls	r0, r1, #24
 8007f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f8c:	d402      	bmi.n	8007f94 <_printf_i+0xe8>
 8007f8e:	0649      	lsls	r1, r1, #25
 8007f90:	bf48      	it	mi
 8007f92:	b2ad      	uxthmi	r5, r5
 8007f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f96:	4853      	ldr	r0, [pc, #332]	@ (80080e4 <_printf_i+0x238>)
 8007f98:	6033      	str	r3, [r6, #0]
 8007f9a:	bf14      	ite	ne
 8007f9c:	230a      	movne	r3, #10
 8007f9e:	2308      	moveq	r3, #8
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fa6:	6866      	ldr	r6, [r4, #4]
 8007fa8:	60a6      	str	r6, [r4, #8]
 8007faa:	2e00      	cmp	r6, #0
 8007fac:	bfa2      	ittt	ge
 8007fae:	6821      	ldrge	r1, [r4, #0]
 8007fb0:	f021 0104 	bicge.w	r1, r1, #4
 8007fb4:	6021      	strge	r1, [r4, #0]
 8007fb6:	b90d      	cbnz	r5, 8007fbc <_printf_i+0x110>
 8007fb8:	2e00      	cmp	r6, #0
 8007fba:	d04b      	beq.n	8008054 <_printf_i+0x1a8>
 8007fbc:	4616      	mov	r6, r2
 8007fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8007fc6:	5dc7      	ldrb	r7, [r0, r7]
 8007fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fcc:	462f      	mov	r7, r5
 8007fce:	42bb      	cmp	r3, r7
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	d9f4      	bls.n	8007fbe <_printf_i+0x112>
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d10b      	bne.n	8007ff0 <_printf_i+0x144>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	07df      	lsls	r7, r3, #31
 8007fdc:	d508      	bpl.n	8007ff0 <_printf_i+0x144>
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	6861      	ldr	r1, [r4, #4]
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	bfde      	ittt	le
 8007fe6:	2330      	movle	r3, #48	@ 0x30
 8007fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ff0:	1b92      	subs	r2, r2, r6
 8007ff2:	6122      	str	r2, [r4, #16]
 8007ff4:	f8cd a000 	str.w	sl, [sp]
 8007ff8:	464b      	mov	r3, r9
 8007ffa:	aa03      	add	r2, sp, #12
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4640      	mov	r0, r8
 8008000:	f7ff fee6 	bl	8007dd0 <_printf_common>
 8008004:	3001      	adds	r0, #1
 8008006:	d14a      	bne.n	800809e <_printf_i+0x1f2>
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	b004      	add	sp, #16
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	f043 0320 	orr.w	r3, r3, #32
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	4833      	ldr	r0, [pc, #204]	@ (80080e8 <_printf_i+0x23c>)
 800801c:	2778      	movs	r7, #120	@ 0x78
 800801e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	6831      	ldr	r1, [r6, #0]
 8008026:	061f      	lsls	r7, r3, #24
 8008028:	f851 5b04 	ldr.w	r5, [r1], #4
 800802c:	d402      	bmi.n	8008034 <_printf_i+0x188>
 800802e:	065f      	lsls	r7, r3, #25
 8008030:	bf48      	it	mi
 8008032:	b2ad      	uxthmi	r5, r5
 8008034:	6031      	str	r1, [r6, #0]
 8008036:	07d9      	lsls	r1, r3, #31
 8008038:	bf44      	itt	mi
 800803a:	f043 0320 	orrmi.w	r3, r3, #32
 800803e:	6023      	strmi	r3, [r4, #0]
 8008040:	b11d      	cbz	r5, 800804a <_printf_i+0x19e>
 8008042:	2310      	movs	r3, #16
 8008044:	e7ac      	b.n	8007fa0 <_printf_i+0xf4>
 8008046:	4827      	ldr	r0, [pc, #156]	@ (80080e4 <_printf_i+0x238>)
 8008048:	e7e9      	b.n	800801e <_printf_i+0x172>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	f023 0320 	bic.w	r3, r3, #32
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	e7f6      	b.n	8008042 <_printf_i+0x196>
 8008054:	4616      	mov	r6, r2
 8008056:	e7bd      	b.n	8007fd4 <_printf_i+0x128>
 8008058:	6833      	ldr	r3, [r6, #0]
 800805a:	6825      	ldr	r5, [r4, #0]
 800805c:	6961      	ldr	r1, [r4, #20]
 800805e:	1d18      	adds	r0, r3, #4
 8008060:	6030      	str	r0, [r6, #0]
 8008062:	062e      	lsls	r6, r5, #24
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	d501      	bpl.n	800806c <_printf_i+0x1c0>
 8008068:	6019      	str	r1, [r3, #0]
 800806a:	e002      	b.n	8008072 <_printf_i+0x1c6>
 800806c:	0668      	lsls	r0, r5, #25
 800806e:	d5fb      	bpl.n	8008068 <_printf_i+0x1bc>
 8008070:	8019      	strh	r1, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	4616      	mov	r6, r2
 8008078:	e7bc      	b.n	8007ff4 <_printf_i+0x148>
 800807a:	6833      	ldr	r3, [r6, #0]
 800807c:	1d1a      	adds	r2, r3, #4
 800807e:	6032      	str	r2, [r6, #0]
 8008080:	681e      	ldr	r6, [r3, #0]
 8008082:	6862      	ldr	r2, [r4, #4]
 8008084:	2100      	movs	r1, #0
 8008086:	4630      	mov	r0, r6
 8008088:	f7f8 f8aa 	bl	80001e0 <memchr>
 800808c:	b108      	cbz	r0, 8008092 <_printf_i+0x1e6>
 800808e:	1b80      	subs	r0, r0, r6
 8008090:	6060      	str	r0, [r4, #4]
 8008092:	6863      	ldr	r3, [r4, #4]
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	2300      	movs	r3, #0
 8008098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800809c:	e7aa      	b.n	8007ff4 <_printf_i+0x148>
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	4632      	mov	r2, r6
 80080a2:	4649      	mov	r1, r9
 80080a4:	4640      	mov	r0, r8
 80080a6:	47d0      	blx	sl
 80080a8:	3001      	adds	r0, #1
 80080aa:	d0ad      	beq.n	8008008 <_printf_i+0x15c>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	079b      	lsls	r3, r3, #30
 80080b0:	d413      	bmi.n	80080da <_printf_i+0x22e>
 80080b2:	68e0      	ldr	r0, [r4, #12]
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	4298      	cmp	r0, r3
 80080b8:	bfb8      	it	lt
 80080ba:	4618      	movlt	r0, r3
 80080bc:	e7a6      	b.n	800800c <_printf_i+0x160>
 80080be:	2301      	movs	r3, #1
 80080c0:	4632      	mov	r2, r6
 80080c2:	4649      	mov	r1, r9
 80080c4:	4640      	mov	r0, r8
 80080c6:	47d0      	blx	sl
 80080c8:	3001      	adds	r0, #1
 80080ca:	d09d      	beq.n	8008008 <_printf_i+0x15c>
 80080cc:	3501      	adds	r5, #1
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	9903      	ldr	r1, [sp, #12]
 80080d2:	1a5b      	subs	r3, r3, r1
 80080d4:	42ab      	cmp	r3, r5
 80080d6:	dcf2      	bgt.n	80080be <_printf_i+0x212>
 80080d8:	e7eb      	b.n	80080b2 <_printf_i+0x206>
 80080da:	2500      	movs	r5, #0
 80080dc:	f104 0619 	add.w	r6, r4, #25
 80080e0:	e7f5      	b.n	80080ce <_printf_i+0x222>
 80080e2:	bf00      	nop
 80080e4:	08008e94 	.word	0x08008e94
 80080e8:	08008ea5 	.word	0x08008ea5

080080ec <__sflush_r>:
 80080ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f4:	0716      	lsls	r6, r2, #28
 80080f6:	4605      	mov	r5, r0
 80080f8:	460c      	mov	r4, r1
 80080fa:	d454      	bmi.n	80081a6 <__sflush_r+0xba>
 80080fc:	684b      	ldr	r3, [r1, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	dc02      	bgt.n	8008108 <__sflush_r+0x1c>
 8008102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	dd48      	ble.n	800819a <__sflush_r+0xae>
 8008108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800810a:	2e00      	cmp	r6, #0
 800810c:	d045      	beq.n	800819a <__sflush_r+0xae>
 800810e:	2300      	movs	r3, #0
 8008110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008114:	682f      	ldr	r7, [r5, #0]
 8008116:	6a21      	ldr	r1, [r4, #32]
 8008118:	602b      	str	r3, [r5, #0]
 800811a:	d030      	beq.n	800817e <__sflush_r+0x92>
 800811c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	0759      	lsls	r1, r3, #29
 8008122:	d505      	bpl.n	8008130 <__sflush_r+0x44>
 8008124:	6863      	ldr	r3, [r4, #4]
 8008126:	1ad2      	subs	r2, r2, r3
 8008128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800812a:	b10b      	cbz	r3, 8008130 <__sflush_r+0x44>
 800812c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	2300      	movs	r3, #0
 8008132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008134:	6a21      	ldr	r1, [r4, #32]
 8008136:	4628      	mov	r0, r5
 8008138:	47b0      	blx	r6
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	d106      	bne.n	800814e <__sflush_r+0x62>
 8008140:	6829      	ldr	r1, [r5, #0]
 8008142:	291d      	cmp	r1, #29
 8008144:	d82b      	bhi.n	800819e <__sflush_r+0xb2>
 8008146:	4a2a      	ldr	r2, [pc, #168]	@ (80081f0 <__sflush_r+0x104>)
 8008148:	410a      	asrs	r2, r1
 800814a:	07d6      	lsls	r6, r2, #31
 800814c:	d427      	bmi.n	800819e <__sflush_r+0xb2>
 800814e:	2200      	movs	r2, #0
 8008150:	6062      	str	r2, [r4, #4]
 8008152:	04d9      	lsls	r1, r3, #19
 8008154:	6922      	ldr	r2, [r4, #16]
 8008156:	6022      	str	r2, [r4, #0]
 8008158:	d504      	bpl.n	8008164 <__sflush_r+0x78>
 800815a:	1c42      	adds	r2, r0, #1
 800815c:	d101      	bne.n	8008162 <__sflush_r+0x76>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	b903      	cbnz	r3, 8008164 <__sflush_r+0x78>
 8008162:	6560      	str	r0, [r4, #84]	@ 0x54
 8008164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008166:	602f      	str	r7, [r5, #0]
 8008168:	b1b9      	cbz	r1, 800819a <__sflush_r+0xae>
 800816a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800816e:	4299      	cmp	r1, r3
 8008170:	d002      	beq.n	8008178 <__sflush_r+0x8c>
 8008172:	4628      	mov	r0, r5
 8008174:	f7ff fbd4 	bl	8007920 <_free_r>
 8008178:	2300      	movs	r3, #0
 800817a:	6363      	str	r3, [r4, #52]	@ 0x34
 800817c:	e00d      	b.n	800819a <__sflush_r+0xae>
 800817e:	2301      	movs	r3, #1
 8008180:	4628      	mov	r0, r5
 8008182:	47b0      	blx	r6
 8008184:	4602      	mov	r2, r0
 8008186:	1c50      	adds	r0, r2, #1
 8008188:	d1c9      	bne.n	800811e <__sflush_r+0x32>
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0c6      	beq.n	800811e <__sflush_r+0x32>
 8008190:	2b1d      	cmp	r3, #29
 8008192:	d001      	beq.n	8008198 <__sflush_r+0xac>
 8008194:	2b16      	cmp	r3, #22
 8008196:	d11e      	bne.n	80081d6 <__sflush_r+0xea>
 8008198:	602f      	str	r7, [r5, #0]
 800819a:	2000      	movs	r0, #0
 800819c:	e022      	b.n	80081e4 <__sflush_r+0xf8>
 800819e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081a2:	b21b      	sxth	r3, r3
 80081a4:	e01b      	b.n	80081de <__sflush_r+0xf2>
 80081a6:	690f      	ldr	r7, [r1, #16]
 80081a8:	2f00      	cmp	r7, #0
 80081aa:	d0f6      	beq.n	800819a <__sflush_r+0xae>
 80081ac:	0793      	lsls	r3, r2, #30
 80081ae:	680e      	ldr	r6, [r1, #0]
 80081b0:	bf08      	it	eq
 80081b2:	694b      	ldreq	r3, [r1, #20]
 80081b4:	600f      	str	r7, [r1, #0]
 80081b6:	bf18      	it	ne
 80081b8:	2300      	movne	r3, #0
 80081ba:	eba6 0807 	sub.w	r8, r6, r7
 80081be:	608b      	str	r3, [r1, #8]
 80081c0:	f1b8 0f00 	cmp.w	r8, #0
 80081c4:	dde9      	ble.n	800819a <__sflush_r+0xae>
 80081c6:	6a21      	ldr	r1, [r4, #32]
 80081c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081ca:	4643      	mov	r3, r8
 80081cc:	463a      	mov	r2, r7
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b0      	blx	r6
 80081d2:	2800      	cmp	r0, #0
 80081d4:	dc08      	bgt.n	80081e8 <__sflush_r+0xfc>
 80081d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e8:	4407      	add	r7, r0
 80081ea:	eba8 0800 	sub.w	r8, r8, r0
 80081ee:	e7e7      	b.n	80081c0 <__sflush_r+0xd4>
 80081f0:	dfbffffe 	.word	0xdfbffffe

080081f4 <_fflush_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	690b      	ldr	r3, [r1, #16]
 80081f8:	4605      	mov	r5, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	b913      	cbnz	r3, 8008204 <_fflush_r+0x10>
 80081fe:	2500      	movs	r5, #0
 8008200:	4628      	mov	r0, r5
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	b118      	cbz	r0, 800820e <_fflush_r+0x1a>
 8008206:	6a03      	ldr	r3, [r0, #32]
 8008208:	b90b      	cbnz	r3, 800820e <_fflush_r+0x1a>
 800820a:	f7ff fa1b 	bl	8007644 <__sinit>
 800820e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0f3      	beq.n	80081fe <_fflush_r+0xa>
 8008216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008218:	07d0      	lsls	r0, r2, #31
 800821a:	d404      	bmi.n	8008226 <_fflush_r+0x32>
 800821c:	0599      	lsls	r1, r3, #22
 800821e:	d402      	bmi.n	8008226 <_fflush_r+0x32>
 8008220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008222:	f7ff fb4e 	bl	80078c2 <__retarget_lock_acquire_recursive>
 8008226:	4628      	mov	r0, r5
 8008228:	4621      	mov	r1, r4
 800822a:	f7ff ff5f 	bl	80080ec <__sflush_r>
 800822e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008230:	07da      	lsls	r2, r3, #31
 8008232:	4605      	mov	r5, r0
 8008234:	d4e4      	bmi.n	8008200 <_fflush_r+0xc>
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	059b      	lsls	r3, r3, #22
 800823a:	d4e1      	bmi.n	8008200 <_fflush_r+0xc>
 800823c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800823e:	f7ff fb41 	bl	80078c4 <__retarget_lock_release_recursive>
 8008242:	e7dd      	b.n	8008200 <_fflush_r+0xc>

08008244 <fiprintf>:
 8008244:	b40e      	push	{r1, r2, r3}
 8008246:	b503      	push	{r0, r1, lr}
 8008248:	4601      	mov	r1, r0
 800824a:	ab03      	add	r3, sp, #12
 800824c:	4805      	ldr	r0, [pc, #20]	@ (8008264 <fiprintf+0x20>)
 800824e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008252:	6800      	ldr	r0, [r0, #0]
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	f000 f88f 	bl	8008378 <_vfiprintf_r>
 800825a:	b002      	add	sp, #8
 800825c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008260:	b003      	add	sp, #12
 8008262:	4770      	bx	lr
 8008264:	20000088 	.word	0x20000088

08008268 <memmove>:
 8008268:	4288      	cmp	r0, r1
 800826a:	b510      	push	{r4, lr}
 800826c:	eb01 0402 	add.w	r4, r1, r2
 8008270:	d902      	bls.n	8008278 <memmove+0x10>
 8008272:	4284      	cmp	r4, r0
 8008274:	4623      	mov	r3, r4
 8008276:	d807      	bhi.n	8008288 <memmove+0x20>
 8008278:	1e43      	subs	r3, r0, #1
 800827a:	42a1      	cmp	r1, r4
 800827c:	d008      	beq.n	8008290 <memmove+0x28>
 800827e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008286:	e7f8      	b.n	800827a <memmove+0x12>
 8008288:	4402      	add	r2, r0
 800828a:	4601      	mov	r1, r0
 800828c:	428a      	cmp	r2, r1
 800828e:	d100      	bne.n	8008292 <memmove+0x2a>
 8008290:	bd10      	pop	{r4, pc}
 8008292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800829a:	e7f7      	b.n	800828c <memmove+0x24>

0800829c <_sbrk_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4d06      	ldr	r5, [pc, #24]	@ (80082b8 <_sbrk_r+0x1c>)
 80082a0:	2300      	movs	r3, #0
 80082a2:	4604      	mov	r4, r0
 80082a4:	4608      	mov	r0, r1
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	f7fb fdfc 	bl	8003ea4 <_sbrk>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_sbrk_r+0x1a>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_sbrk_r+0x1a>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	200025b0 	.word	0x200025b0

080082bc <abort>:
 80082bc:	b508      	push	{r3, lr}
 80082be:	2006      	movs	r0, #6
 80082c0:	f000 fa2e 	bl	8008720 <raise>
 80082c4:	2001      	movs	r0, #1
 80082c6:	f7fb fd75 	bl	8003db4 <_exit>

080082ca <_realloc_r>:
 80082ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ce:	4680      	mov	r8, r0
 80082d0:	4615      	mov	r5, r2
 80082d2:	460c      	mov	r4, r1
 80082d4:	b921      	cbnz	r1, 80082e0 <_realloc_r+0x16>
 80082d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082da:	4611      	mov	r1, r2
 80082dc:	f7ff bb94 	b.w	8007a08 <_malloc_r>
 80082e0:	b92a      	cbnz	r2, 80082ee <_realloc_r+0x24>
 80082e2:	f7ff fb1d 	bl	8007920 <_free_r>
 80082e6:	2400      	movs	r4, #0
 80082e8:	4620      	mov	r0, r4
 80082ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ee:	f000 fa33 	bl	8008758 <_malloc_usable_size_r>
 80082f2:	4285      	cmp	r5, r0
 80082f4:	4606      	mov	r6, r0
 80082f6:	d802      	bhi.n	80082fe <_realloc_r+0x34>
 80082f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082fc:	d8f4      	bhi.n	80082e8 <_realloc_r+0x1e>
 80082fe:	4629      	mov	r1, r5
 8008300:	4640      	mov	r0, r8
 8008302:	f7ff fb81 	bl	8007a08 <_malloc_r>
 8008306:	4607      	mov	r7, r0
 8008308:	2800      	cmp	r0, #0
 800830a:	d0ec      	beq.n	80082e6 <_realloc_r+0x1c>
 800830c:	42b5      	cmp	r5, r6
 800830e:	462a      	mov	r2, r5
 8008310:	4621      	mov	r1, r4
 8008312:	bf28      	it	cs
 8008314:	4632      	movcs	r2, r6
 8008316:	f7ff fad6 	bl	80078c6 <memcpy>
 800831a:	4621      	mov	r1, r4
 800831c:	4640      	mov	r0, r8
 800831e:	f7ff faff 	bl	8007920 <_free_r>
 8008322:	463c      	mov	r4, r7
 8008324:	e7e0      	b.n	80082e8 <_realloc_r+0x1e>

08008326 <__sfputc_r>:
 8008326:	6893      	ldr	r3, [r2, #8]
 8008328:	3b01      	subs	r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	b410      	push	{r4}
 800832e:	6093      	str	r3, [r2, #8]
 8008330:	da08      	bge.n	8008344 <__sfputc_r+0x1e>
 8008332:	6994      	ldr	r4, [r2, #24]
 8008334:	42a3      	cmp	r3, r4
 8008336:	db01      	blt.n	800833c <__sfputc_r+0x16>
 8008338:	290a      	cmp	r1, #10
 800833a:	d103      	bne.n	8008344 <__sfputc_r+0x1e>
 800833c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008340:	f000 b932 	b.w	80085a8 <__swbuf_r>
 8008344:	6813      	ldr	r3, [r2, #0]
 8008346:	1c58      	adds	r0, r3, #1
 8008348:	6010      	str	r0, [r2, #0]
 800834a:	7019      	strb	r1, [r3, #0]
 800834c:	4608      	mov	r0, r1
 800834e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008352:	4770      	bx	lr

08008354 <__sfputs_r>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	4606      	mov	r6, r0
 8008358:	460f      	mov	r7, r1
 800835a:	4614      	mov	r4, r2
 800835c:	18d5      	adds	r5, r2, r3
 800835e:	42ac      	cmp	r4, r5
 8008360:	d101      	bne.n	8008366 <__sfputs_r+0x12>
 8008362:	2000      	movs	r0, #0
 8008364:	e007      	b.n	8008376 <__sfputs_r+0x22>
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	463a      	mov	r2, r7
 800836c:	4630      	mov	r0, r6
 800836e:	f7ff ffda 	bl	8008326 <__sfputc_r>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d1f3      	bne.n	800835e <__sfputs_r+0xa>
 8008376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008378 <_vfiprintf_r>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	460d      	mov	r5, r1
 800837e:	b09d      	sub	sp, #116	@ 0x74
 8008380:	4614      	mov	r4, r2
 8008382:	4698      	mov	r8, r3
 8008384:	4606      	mov	r6, r0
 8008386:	b118      	cbz	r0, 8008390 <_vfiprintf_r+0x18>
 8008388:	6a03      	ldr	r3, [r0, #32]
 800838a:	b90b      	cbnz	r3, 8008390 <_vfiprintf_r+0x18>
 800838c:	f7ff f95a 	bl	8007644 <__sinit>
 8008390:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008392:	07d9      	lsls	r1, r3, #31
 8008394:	d405      	bmi.n	80083a2 <_vfiprintf_r+0x2a>
 8008396:	89ab      	ldrh	r3, [r5, #12]
 8008398:	059a      	lsls	r2, r3, #22
 800839a:	d402      	bmi.n	80083a2 <_vfiprintf_r+0x2a>
 800839c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800839e:	f7ff fa90 	bl	80078c2 <__retarget_lock_acquire_recursive>
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	071b      	lsls	r3, r3, #28
 80083a6:	d501      	bpl.n	80083ac <_vfiprintf_r+0x34>
 80083a8:	692b      	ldr	r3, [r5, #16]
 80083aa:	b99b      	cbnz	r3, 80083d4 <_vfiprintf_r+0x5c>
 80083ac:	4629      	mov	r1, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	f000 f938 	bl	8008624 <__swsetup_r>
 80083b4:	b170      	cbz	r0, 80083d4 <_vfiprintf_r+0x5c>
 80083b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083b8:	07dc      	lsls	r4, r3, #31
 80083ba:	d504      	bpl.n	80083c6 <_vfiprintf_r+0x4e>
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295
 80083c0:	b01d      	add	sp, #116	@ 0x74
 80083c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	0598      	lsls	r0, r3, #22
 80083ca:	d4f7      	bmi.n	80083bc <_vfiprintf_r+0x44>
 80083cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ce:	f7ff fa79 	bl	80078c4 <__retarget_lock_release_recursive>
 80083d2:	e7f3      	b.n	80083bc <_vfiprintf_r+0x44>
 80083d4:	2300      	movs	r3, #0
 80083d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d8:	2320      	movs	r3, #32
 80083da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083de:	f8cd 800c 	str.w	r8, [sp, #12]
 80083e2:	2330      	movs	r3, #48	@ 0x30
 80083e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008594 <_vfiprintf_r+0x21c>
 80083e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083ec:	f04f 0901 	mov.w	r9, #1
 80083f0:	4623      	mov	r3, r4
 80083f2:	469a      	mov	sl, r3
 80083f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f8:	b10a      	cbz	r2, 80083fe <_vfiprintf_r+0x86>
 80083fa:	2a25      	cmp	r2, #37	@ 0x25
 80083fc:	d1f9      	bne.n	80083f2 <_vfiprintf_r+0x7a>
 80083fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008402:	d00b      	beq.n	800841c <_vfiprintf_r+0xa4>
 8008404:	465b      	mov	r3, fp
 8008406:	4622      	mov	r2, r4
 8008408:	4629      	mov	r1, r5
 800840a:	4630      	mov	r0, r6
 800840c:	f7ff ffa2 	bl	8008354 <__sfputs_r>
 8008410:	3001      	adds	r0, #1
 8008412:	f000 80a7 	beq.w	8008564 <_vfiprintf_r+0x1ec>
 8008416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008418:	445a      	add	r2, fp
 800841a:	9209      	str	r2, [sp, #36]	@ 0x24
 800841c:	f89a 3000 	ldrb.w	r3, [sl]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 809f 	beq.w	8008564 <_vfiprintf_r+0x1ec>
 8008426:	2300      	movs	r3, #0
 8008428:	f04f 32ff 	mov.w	r2, #4294967295
 800842c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008430:	f10a 0a01 	add.w	sl, sl, #1
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	9307      	str	r3, [sp, #28]
 8008438:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800843c:	931a      	str	r3, [sp, #104]	@ 0x68
 800843e:	4654      	mov	r4, sl
 8008440:	2205      	movs	r2, #5
 8008442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008446:	4853      	ldr	r0, [pc, #332]	@ (8008594 <_vfiprintf_r+0x21c>)
 8008448:	f7f7 feca 	bl	80001e0 <memchr>
 800844c:	9a04      	ldr	r2, [sp, #16]
 800844e:	b9d8      	cbnz	r0, 8008488 <_vfiprintf_r+0x110>
 8008450:	06d1      	lsls	r1, r2, #27
 8008452:	bf44      	itt	mi
 8008454:	2320      	movmi	r3, #32
 8008456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800845a:	0713      	lsls	r3, r2, #28
 800845c:	bf44      	itt	mi
 800845e:	232b      	movmi	r3, #43	@ 0x2b
 8008460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008464:	f89a 3000 	ldrb.w	r3, [sl]
 8008468:	2b2a      	cmp	r3, #42	@ 0x2a
 800846a:	d015      	beq.n	8008498 <_vfiprintf_r+0x120>
 800846c:	9a07      	ldr	r2, [sp, #28]
 800846e:	4654      	mov	r4, sl
 8008470:	2000      	movs	r0, #0
 8008472:	f04f 0c0a 	mov.w	ip, #10
 8008476:	4621      	mov	r1, r4
 8008478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800847c:	3b30      	subs	r3, #48	@ 0x30
 800847e:	2b09      	cmp	r3, #9
 8008480:	d94b      	bls.n	800851a <_vfiprintf_r+0x1a2>
 8008482:	b1b0      	cbz	r0, 80084b2 <_vfiprintf_r+0x13a>
 8008484:	9207      	str	r2, [sp, #28]
 8008486:	e014      	b.n	80084b2 <_vfiprintf_r+0x13a>
 8008488:	eba0 0308 	sub.w	r3, r0, r8
 800848c:	fa09 f303 	lsl.w	r3, r9, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	46a2      	mov	sl, r4
 8008496:	e7d2      	b.n	800843e <_vfiprintf_r+0xc6>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	1d19      	adds	r1, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9103      	str	r1, [sp, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfbb      	ittet	lt
 80084a4:	425b      	neglt	r3, r3
 80084a6:	f042 0202 	orrlt.w	r2, r2, #2
 80084aa:	9307      	strge	r3, [sp, #28]
 80084ac:	9307      	strlt	r3, [sp, #28]
 80084ae:	bfb8      	it	lt
 80084b0:	9204      	strlt	r2, [sp, #16]
 80084b2:	7823      	ldrb	r3, [r4, #0]
 80084b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80084b6:	d10a      	bne.n	80084ce <_vfiprintf_r+0x156>
 80084b8:	7863      	ldrb	r3, [r4, #1]
 80084ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80084bc:	d132      	bne.n	8008524 <_vfiprintf_r+0x1ac>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	1d1a      	adds	r2, r3, #4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	9203      	str	r2, [sp, #12]
 80084c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084ca:	3402      	adds	r4, #2
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085a4 <_vfiprintf_r+0x22c>
 80084d2:	7821      	ldrb	r1, [r4, #0]
 80084d4:	2203      	movs	r2, #3
 80084d6:	4650      	mov	r0, sl
 80084d8:	f7f7 fe82 	bl	80001e0 <memchr>
 80084dc:	b138      	cbz	r0, 80084ee <_vfiprintf_r+0x176>
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	eba0 000a 	sub.w	r0, r0, sl
 80084e4:	2240      	movs	r2, #64	@ 0x40
 80084e6:	4082      	lsls	r2, r0
 80084e8:	4313      	orrs	r3, r2
 80084ea:	3401      	adds	r4, #1
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f2:	4829      	ldr	r0, [pc, #164]	@ (8008598 <_vfiprintf_r+0x220>)
 80084f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084f8:	2206      	movs	r2, #6
 80084fa:	f7f7 fe71 	bl	80001e0 <memchr>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d03f      	beq.n	8008582 <_vfiprintf_r+0x20a>
 8008502:	4b26      	ldr	r3, [pc, #152]	@ (800859c <_vfiprintf_r+0x224>)
 8008504:	bb1b      	cbnz	r3, 800854e <_vfiprintf_r+0x1d6>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	3307      	adds	r3, #7
 800850a:	f023 0307 	bic.w	r3, r3, #7
 800850e:	3308      	adds	r3, #8
 8008510:	9303      	str	r3, [sp, #12]
 8008512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008514:	443b      	add	r3, r7
 8008516:	9309      	str	r3, [sp, #36]	@ 0x24
 8008518:	e76a      	b.n	80083f0 <_vfiprintf_r+0x78>
 800851a:	fb0c 3202 	mla	r2, ip, r2, r3
 800851e:	460c      	mov	r4, r1
 8008520:	2001      	movs	r0, #1
 8008522:	e7a8      	b.n	8008476 <_vfiprintf_r+0xfe>
 8008524:	2300      	movs	r3, #0
 8008526:	3401      	adds	r4, #1
 8008528:	9305      	str	r3, [sp, #20]
 800852a:	4619      	mov	r1, r3
 800852c:	f04f 0c0a 	mov.w	ip, #10
 8008530:	4620      	mov	r0, r4
 8008532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008536:	3a30      	subs	r2, #48	@ 0x30
 8008538:	2a09      	cmp	r2, #9
 800853a:	d903      	bls.n	8008544 <_vfiprintf_r+0x1cc>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0c6      	beq.n	80084ce <_vfiprintf_r+0x156>
 8008540:	9105      	str	r1, [sp, #20]
 8008542:	e7c4      	b.n	80084ce <_vfiprintf_r+0x156>
 8008544:	fb0c 2101 	mla	r1, ip, r1, r2
 8008548:	4604      	mov	r4, r0
 800854a:	2301      	movs	r3, #1
 800854c:	e7f0      	b.n	8008530 <_vfiprintf_r+0x1b8>
 800854e:	ab03      	add	r3, sp, #12
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	462a      	mov	r2, r5
 8008554:	4b12      	ldr	r3, [pc, #72]	@ (80085a0 <_vfiprintf_r+0x228>)
 8008556:	a904      	add	r1, sp, #16
 8008558:	4630      	mov	r0, r6
 800855a:	f3af 8000 	nop.w
 800855e:	4607      	mov	r7, r0
 8008560:	1c78      	adds	r0, r7, #1
 8008562:	d1d6      	bne.n	8008512 <_vfiprintf_r+0x19a>
 8008564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008566:	07d9      	lsls	r1, r3, #31
 8008568:	d405      	bmi.n	8008576 <_vfiprintf_r+0x1fe>
 800856a:	89ab      	ldrh	r3, [r5, #12]
 800856c:	059a      	lsls	r2, r3, #22
 800856e:	d402      	bmi.n	8008576 <_vfiprintf_r+0x1fe>
 8008570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008572:	f7ff f9a7 	bl	80078c4 <__retarget_lock_release_recursive>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	065b      	lsls	r3, r3, #25
 800857a:	f53f af1f 	bmi.w	80083bc <_vfiprintf_r+0x44>
 800857e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008580:	e71e      	b.n	80083c0 <_vfiprintf_r+0x48>
 8008582:	ab03      	add	r3, sp, #12
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	462a      	mov	r2, r5
 8008588:	4b05      	ldr	r3, [pc, #20]	@ (80085a0 <_vfiprintf_r+0x228>)
 800858a:	a904      	add	r1, sp, #16
 800858c:	4630      	mov	r0, r6
 800858e:	f7ff fc8d 	bl	8007eac <_printf_i>
 8008592:	e7e4      	b.n	800855e <_vfiprintf_r+0x1e6>
 8008594:	08008e83 	.word	0x08008e83
 8008598:	08008e8d 	.word	0x08008e8d
 800859c:	00000000 	.word	0x00000000
 80085a0:	08008355 	.word	0x08008355
 80085a4:	08008e89 	.word	0x08008e89

080085a8 <__swbuf_r>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	460e      	mov	r6, r1
 80085ac:	4614      	mov	r4, r2
 80085ae:	4605      	mov	r5, r0
 80085b0:	b118      	cbz	r0, 80085ba <__swbuf_r+0x12>
 80085b2:	6a03      	ldr	r3, [r0, #32]
 80085b4:	b90b      	cbnz	r3, 80085ba <__swbuf_r+0x12>
 80085b6:	f7ff f845 	bl	8007644 <__sinit>
 80085ba:	69a3      	ldr	r3, [r4, #24]
 80085bc:	60a3      	str	r3, [r4, #8]
 80085be:	89a3      	ldrh	r3, [r4, #12]
 80085c0:	071a      	lsls	r2, r3, #28
 80085c2:	d501      	bpl.n	80085c8 <__swbuf_r+0x20>
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	b943      	cbnz	r3, 80085da <__swbuf_r+0x32>
 80085c8:	4621      	mov	r1, r4
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 f82a 	bl	8008624 <__swsetup_r>
 80085d0:	b118      	cbz	r0, 80085da <__swbuf_r+0x32>
 80085d2:	f04f 37ff 	mov.w	r7, #4294967295
 80085d6:	4638      	mov	r0, r7
 80085d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	6922      	ldr	r2, [r4, #16]
 80085de:	1a98      	subs	r0, r3, r2
 80085e0:	6963      	ldr	r3, [r4, #20]
 80085e2:	b2f6      	uxtb	r6, r6
 80085e4:	4283      	cmp	r3, r0
 80085e6:	4637      	mov	r7, r6
 80085e8:	dc05      	bgt.n	80085f6 <__swbuf_r+0x4e>
 80085ea:	4621      	mov	r1, r4
 80085ec:	4628      	mov	r0, r5
 80085ee:	f7ff fe01 	bl	80081f4 <_fflush_r>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d1ed      	bne.n	80085d2 <__swbuf_r+0x2a>
 80085f6:	68a3      	ldr	r3, [r4, #8]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	60a3      	str	r3, [r4, #8]
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	6022      	str	r2, [r4, #0]
 8008602:	701e      	strb	r6, [r3, #0]
 8008604:	6962      	ldr	r2, [r4, #20]
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	429a      	cmp	r2, r3
 800860a:	d004      	beq.n	8008616 <__swbuf_r+0x6e>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	07db      	lsls	r3, r3, #31
 8008610:	d5e1      	bpl.n	80085d6 <__swbuf_r+0x2e>
 8008612:	2e0a      	cmp	r6, #10
 8008614:	d1df      	bne.n	80085d6 <__swbuf_r+0x2e>
 8008616:	4621      	mov	r1, r4
 8008618:	4628      	mov	r0, r5
 800861a:	f7ff fdeb 	bl	80081f4 <_fflush_r>
 800861e:	2800      	cmp	r0, #0
 8008620:	d0d9      	beq.n	80085d6 <__swbuf_r+0x2e>
 8008622:	e7d6      	b.n	80085d2 <__swbuf_r+0x2a>

08008624 <__swsetup_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4b29      	ldr	r3, [pc, #164]	@ (80086cc <__swsetup_r+0xa8>)
 8008628:	4605      	mov	r5, r0
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	460c      	mov	r4, r1
 800862e:	b118      	cbz	r0, 8008638 <__swsetup_r+0x14>
 8008630:	6a03      	ldr	r3, [r0, #32]
 8008632:	b90b      	cbnz	r3, 8008638 <__swsetup_r+0x14>
 8008634:	f7ff f806 	bl	8007644 <__sinit>
 8008638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800863c:	0719      	lsls	r1, r3, #28
 800863e:	d422      	bmi.n	8008686 <__swsetup_r+0x62>
 8008640:	06da      	lsls	r2, r3, #27
 8008642:	d407      	bmi.n	8008654 <__swsetup_r+0x30>
 8008644:	2209      	movs	r2, #9
 8008646:	602a      	str	r2, [r5, #0]
 8008648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800864c:	81a3      	strh	r3, [r4, #12]
 800864e:	f04f 30ff 	mov.w	r0, #4294967295
 8008652:	e033      	b.n	80086bc <__swsetup_r+0x98>
 8008654:	0758      	lsls	r0, r3, #29
 8008656:	d512      	bpl.n	800867e <__swsetup_r+0x5a>
 8008658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800865a:	b141      	cbz	r1, 800866e <__swsetup_r+0x4a>
 800865c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008660:	4299      	cmp	r1, r3
 8008662:	d002      	beq.n	800866a <__swsetup_r+0x46>
 8008664:	4628      	mov	r0, r5
 8008666:	f7ff f95b 	bl	8007920 <_free_r>
 800866a:	2300      	movs	r3, #0
 800866c:	6363      	str	r3, [r4, #52]	@ 0x34
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	2300      	movs	r3, #0
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	f043 0308 	orr.w	r3, r3, #8
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	b94b      	cbnz	r3, 800869e <__swsetup_r+0x7a>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008694:	d003      	beq.n	800869e <__swsetup_r+0x7a>
 8008696:	4621      	mov	r1, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f000 f88b 	bl	80087b4 <__smakebuf_r>
 800869e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a2:	f013 0201 	ands.w	r2, r3, #1
 80086a6:	d00a      	beq.n	80086be <__swsetup_r+0x9a>
 80086a8:	2200      	movs	r2, #0
 80086aa:	60a2      	str	r2, [r4, #8]
 80086ac:	6962      	ldr	r2, [r4, #20]
 80086ae:	4252      	negs	r2, r2
 80086b0:	61a2      	str	r2, [r4, #24]
 80086b2:	6922      	ldr	r2, [r4, #16]
 80086b4:	b942      	cbnz	r2, 80086c8 <__swsetup_r+0xa4>
 80086b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086ba:	d1c5      	bne.n	8008648 <__swsetup_r+0x24>
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
 80086be:	0799      	lsls	r1, r3, #30
 80086c0:	bf58      	it	pl
 80086c2:	6962      	ldrpl	r2, [r4, #20]
 80086c4:	60a2      	str	r2, [r4, #8]
 80086c6:	e7f4      	b.n	80086b2 <__swsetup_r+0x8e>
 80086c8:	2000      	movs	r0, #0
 80086ca:	e7f7      	b.n	80086bc <__swsetup_r+0x98>
 80086cc:	20000088 	.word	0x20000088

080086d0 <_raise_r>:
 80086d0:	291f      	cmp	r1, #31
 80086d2:	b538      	push	{r3, r4, r5, lr}
 80086d4:	4605      	mov	r5, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	d904      	bls.n	80086e4 <_raise_r+0x14>
 80086da:	2316      	movs	r3, #22
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	f04f 30ff 	mov.w	r0, #4294967295
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086e6:	b112      	cbz	r2, 80086ee <_raise_r+0x1e>
 80086e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086ec:	b94b      	cbnz	r3, 8008702 <_raise_r+0x32>
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 f830 	bl	8008754 <_getpid_r>
 80086f4:	4622      	mov	r2, r4
 80086f6:	4601      	mov	r1, r0
 80086f8:	4628      	mov	r0, r5
 80086fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fe:	f000 b817 	b.w	8008730 <_kill_r>
 8008702:	2b01      	cmp	r3, #1
 8008704:	d00a      	beq.n	800871c <_raise_r+0x4c>
 8008706:	1c59      	adds	r1, r3, #1
 8008708:	d103      	bne.n	8008712 <_raise_r+0x42>
 800870a:	2316      	movs	r3, #22
 800870c:	6003      	str	r3, [r0, #0]
 800870e:	2001      	movs	r0, #1
 8008710:	e7e7      	b.n	80086e2 <_raise_r+0x12>
 8008712:	2100      	movs	r1, #0
 8008714:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008718:	4620      	mov	r0, r4
 800871a:	4798      	blx	r3
 800871c:	2000      	movs	r0, #0
 800871e:	e7e0      	b.n	80086e2 <_raise_r+0x12>

08008720 <raise>:
 8008720:	4b02      	ldr	r3, [pc, #8]	@ (800872c <raise+0xc>)
 8008722:	4601      	mov	r1, r0
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	f7ff bfd3 	b.w	80086d0 <_raise_r>
 800872a:	bf00      	nop
 800872c:	20000088 	.word	0x20000088

08008730 <_kill_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4d07      	ldr	r5, [pc, #28]	@ (8008750 <_kill_r+0x20>)
 8008734:	2300      	movs	r3, #0
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	4611      	mov	r1, r2
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	f7fb fb29 	bl	8003d94 <_kill>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d102      	bne.n	800874c <_kill_r+0x1c>
 8008746:	682b      	ldr	r3, [r5, #0]
 8008748:	b103      	cbz	r3, 800874c <_kill_r+0x1c>
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	bf00      	nop
 8008750:	200025b0 	.word	0x200025b0

08008754 <_getpid_r>:
 8008754:	f7fb bb16 	b.w	8003d84 <_getpid>

08008758 <_malloc_usable_size_r>:
 8008758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800875c:	1f18      	subs	r0, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfbc      	itt	lt
 8008762:	580b      	ldrlt	r3, [r1, r0]
 8008764:	18c0      	addlt	r0, r0, r3
 8008766:	4770      	bx	lr

08008768 <__swhatbuf_r>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	460c      	mov	r4, r1
 800876c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008770:	2900      	cmp	r1, #0
 8008772:	b096      	sub	sp, #88	@ 0x58
 8008774:	4615      	mov	r5, r2
 8008776:	461e      	mov	r6, r3
 8008778:	da0d      	bge.n	8008796 <__swhatbuf_r+0x2e>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008780:	f04f 0100 	mov.w	r1, #0
 8008784:	bf14      	ite	ne
 8008786:	2340      	movne	r3, #64	@ 0x40
 8008788:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800878c:	2000      	movs	r0, #0
 800878e:	6031      	str	r1, [r6, #0]
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	b016      	add	sp, #88	@ 0x58
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	466a      	mov	r2, sp
 8008798:	f000 f848 	bl	800882c <_fstat_r>
 800879c:	2800      	cmp	r0, #0
 800879e:	dbec      	blt.n	800877a <__swhatbuf_r+0x12>
 80087a0:	9901      	ldr	r1, [sp, #4]
 80087a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087aa:	4259      	negs	r1, r3
 80087ac:	4159      	adcs	r1, r3
 80087ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087b2:	e7eb      	b.n	800878c <__swhatbuf_r+0x24>

080087b4 <__smakebuf_r>:
 80087b4:	898b      	ldrh	r3, [r1, #12]
 80087b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087b8:	079d      	lsls	r5, r3, #30
 80087ba:	4606      	mov	r6, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	d507      	bpl.n	80087d0 <__smakebuf_r+0x1c>
 80087c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	2301      	movs	r3, #1
 80087ca:	6163      	str	r3, [r4, #20]
 80087cc:	b003      	add	sp, #12
 80087ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d0:	ab01      	add	r3, sp, #4
 80087d2:	466a      	mov	r2, sp
 80087d4:	f7ff ffc8 	bl	8008768 <__swhatbuf_r>
 80087d8:	9f00      	ldr	r7, [sp, #0]
 80087da:	4605      	mov	r5, r0
 80087dc:	4639      	mov	r1, r7
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff f912 	bl	8007a08 <_malloc_r>
 80087e4:	b948      	cbnz	r0, 80087fa <__smakebuf_r+0x46>
 80087e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ea:	059a      	lsls	r2, r3, #22
 80087ec:	d4ee      	bmi.n	80087cc <__smakebuf_r+0x18>
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	f043 0302 	orr.w	r3, r3, #2
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	e7e2      	b.n	80087c0 <__smakebuf_r+0xc>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	6020      	str	r0, [r4, #0]
 80087fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800880a:	b15b      	cbz	r3, 8008824 <__smakebuf_r+0x70>
 800880c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008810:	4630      	mov	r0, r6
 8008812:	f000 f81d 	bl	8008850 <_isatty_r>
 8008816:	b128      	cbz	r0, 8008824 <__smakebuf_r+0x70>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	431d      	orrs	r5, r3
 8008828:	81a5      	strh	r5, [r4, #12]
 800882a:	e7cf      	b.n	80087cc <__smakebuf_r+0x18>

0800882c <_fstat_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d07      	ldr	r5, [pc, #28]	@ (800884c <_fstat_r+0x20>)
 8008830:	2300      	movs	r3, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	f7fb fb0b 	bl	8003e54 <_fstat>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	d102      	bne.n	8008848 <_fstat_r+0x1c>
 8008842:	682b      	ldr	r3, [r5, #0]
 8008844:	b103      	cbz	r3, 8008848 <_fstat_r+0x1c>
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	bd38      	pop	{r3, r4, r5, pc}
 800884a:	bf00      	nop
 800884c:	200025b0 	.word	0x200025b0

08008850 <_isatty_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d06      	ldr	r5, [pc, #24]	@ (800886c <_isatty_r+0x1c>)
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	602b      	str	r3, [r5, #0]
 800885c:	f7fb fb0a 	bl	8003e74 <_isatty>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_isatty_r+0x1a>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_isatty_r+0x1a>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	200025b0 	.word	0x200025b0

08008870 <_init>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	bf00      	nop
 8008874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008876:	bc08      	pop	{r3}
 8008878:	469e      	mov	lr, r3
 800887a:	4770      	bx	lr

0800887c <_fini>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	bf00      	nop
 8008880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008882:	bc08      	pop	{r3}
 8008884:	469e      	mov	lr, r3
 8008886:	4770      	bx	lr
