
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b60  08006b60  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b68  08006b68  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b6c  08006b6c  00007b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022dc  20000074  08006be4  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00010400  20002350  08006be4  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1b1  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002562  00000000  00000000  00015255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000177b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a57  00000000  00000000  00018538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003742  00000000  00000000  00018f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010464  00000000  00000000  0001c6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009538e  00000000  00000000  0002cb35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1ec3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  000c1f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c5fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006778 	.word	0x08006778

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006778 	.word	0x08006778

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <clampValue>:
		isOff = !isOff;
		lastTick = HAL_GetTick();
	}
}

uint32_t clampValue(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
    if ((0xFFFF - value) < (maxVal - value)) {
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000582:	33ff      	adds	r3, #255	@ 0xff
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	1a8a      	subs	r2, r1, r2
 800058a:	4293      	cmp	r3, r2
 800058c:	d201      	bcs.n	8000592 <clampValue+0x22>
  	  return minVal;
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	e00c      	b.n	80005ac <clampValue+0x3c>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	429a      	cmp	r2, r3
 8000598:	d201      	bcs.n	800059e <clampValue+0x2e>
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	e006      	b.n	80005ac <clampValue+0x3c>
        if (value > maxVal) return maxVal;
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d901      	bls.n	80005aa <clampValue+0x3a>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	e000      	b.n	80005ac <clampValue+0x3c>
        return value;
 80005aa:	68fb      	ldr	r3, [r7, #12]
    }
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <switchState>:

bool userSelectingFeature = true; // True when in SELECT state to decide what feature to adjust

void switchState(RTC_DateTypeDef * tDate) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    switch(currentState) {
 80005c0:	4b83      	ldr	r3, [pc, #524]	@ (80007d0 <switchState+0x218>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b09      	cmp	r3, #9
 80005c8:	f200 80f9 	bhi.w	80007be <switchState+0x206>
 80005cc:	a201      	add	r2, pc, #4	@ (adr r2, 80005d4 <switchState+0x1c>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005fd 	.word	0x080005fd
 80005d8:	08000605 	.word	0x08000605
 80005dc:	0800060d 	.word	0x0800060d
 80005e0:	080006af 	.word	0x080006af
 80005e4:	080006dd 	.word	0x080006dd
 80005e8:	0800079b 	.word	0x0800079b
 80005ec:	080007b7 	.word	0x080007b7
 80005f0:	0800070b 	.word	0x0800070b
 80005f4:	08000741 	.word	0x08000741
 80005f8:	08000777 	.word	0x08000777
        case SLEEP:
            currentState = WAKE;
 80005fc:	4b74      	ldr	r3, [pc, #464]	@ (80007d0 <switchState+0x218>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
            break;
 8000602:	e0e0      	b.n	80007c6 <switchState+0x20e>
        case WAKE:
            currentState = SELECT;
 8000604:	4b72      	ldr	r3, [pc, #456]	@ (80007d0 <switchState+0x218>)
 8000606:	2202      	movs	r2, #2
 8000608:	701a      	strb	r2, [r3, #0]

            break;
 800060a:	e0dc      	b.n	80007c6 <switchState+0x20e>
        case SELECT:
        	switch(counter / sensitivity){
 800060c:	4b71      	ldr	r3, [pc, #452]	@ (80007d4 <switchState+0x21c>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b71      	ldr	r3, [pc, #452]	@ (80007d8 <switchState+0x220>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	fbb2 f3f3 	udiv	r3, r2, r3
 8000618:	2b03      	cmp	r3, #3
 800061a:	d846      	bhi.n	80006aa <switchState+0xf2>
 800061c:	a201      	add	r2, pc, #4	@ (adr r2, 8000624 <switchState+0x6c>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000635 	.word	0x08000635
 8000628:	0800064f 	.word	0x0800064f
 800062c:	0800066b 	.word	0x0800066b
 8000630:	0800068b 	.word	0x0800068b
        	case 0:
        		counter = sTime.Hours * sensitivity;
 8000634:	4b69      	ldr	r3, [pc, #420]	@ (80007dc <switchState+0x224>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b67      	ldr	r3, [pc, #412]	@ (80007d8 <switchState+0x220>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	fb02 f303 	mul.w	r3, r2, r3
 8000642:	4a64      	ldr	r2, [pc, #400]	@ (80007d4 <switchState+0x21c>)
 8000644:	6013      	str	r3, [r2, #0]
        		currentState = SET_HOURS;
 8000646:	4b62      	ldr	r3, [pc, #392]	@ (80007d0 <switchState+0x218>)
 8000648:	2203      	movs	r2, #3
 800064a:	701a      	strb	r2, [r3, #0]
        		break;
 800064c:	e02e      	b.n	80006ac <switchState+0xf4>
        	case 1:
        		currentState = SET_COLOR;
 800064e:	4b60      	ldr	r3, [pc, #384]	@ (80007d0 <switchState+0x218>)
 8000650:	2205      	movs	r2, #5
 8000652:	701a      	strb	r2, [r3, #0]
        		counter = color * sensitivity;
 8000654:	4b62      	ldr	r3, [pc, #392]	@ (80007e0 <switchState+0x228>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b5e      	ldr	r3, [pc, #376]	@ (80007d8 <switchState+0x220>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	fb02 f303 	mul.w	r3, r2, r3
 8000664:	4a5b      	ldr	r2, [pc, #364]	@ (80007d4 <switchState+0x21c>)
 8000666:	6013      	str	r3, [r2, #0]
        		break;
 8000668:	e020      	b.n	80006ac <switchState+0xf4>
        	case 2:
        		currentDateType = ANNIVERSARY_DATE;
 800066a:	4b5e      	ldr	r3, [pc, #376]	@ (80007e4 <switchState+0x22c>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
            	counter = aDate.Month * sensitivity;
 8000670:	4b5d      	ldr	r3, [pc, #372]	@ (80007e8 <switchState+0x230>)
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	461a      	mov	r2, r3
 8000676:	4b58      	ldr	r3, [pc, #352]	@ (80007d8 <switchState+0x220>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	fb02 f303 	mul.w	r3, r2, r3
 800067e:	4a55      	ldr	r2, [pc, #340]	@ (80007d4 <switchState+0x21c>)
 8000680:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 8000682:	4b53      	ldr	r3, [pc, #332]	@ (80007d0 <switchState+0x218>)
 8000684:	2207      	movs	r2, #7
 8000686:	701a      	strb	r2, [r3, #0]
        		break;
 8000688:	e010      	b.n	80006ac <switchState+0xf4>
        	case 3:
        		currentDateType = BIRTHDAY_DATE;
 800068a:	4b56      	ldr	r3, [pc, #344]	@ (80007e4 <switchState+0x22c>)
 800068c:	2202      	movs	r2, #2
 800068e:	701a      	strb	r2, [r3, #0]
            	counter = bDate.Month * sensitivity;
 8000690:	4b56      	ldr	r3, [pc, #344]	@ (80007ec <switchState+0x234>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	461a      	mov	r2, r3
 8000696:	4b50      	ldr	r3, [pc, #320]	@ (80007d8 <switchState+0x220>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	4a4d      	ldr	r2, [pc, #308]	@ (80007d4 <switchState+0x21c>)
 80006a0:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 80006a2:	4b4b      	ldr	r3, [pc, #300]	@ (80007d0 <switchState+0x218>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	701a      	strb	r2, [r3, #0]
        		break;
 80006a8:	e000      	b.n	80006ac <switchState+0xf4>
        	default:
        		break;
 80006aa:	bf00      	nop
        	}
            break;
 80006ac:	e08b      	b.n	80007c6 <switchState+0x20e>
        case SET_HOURS:
        	counter = sTime.Minutes * sensitivity;
 80006ae:	4b4b      	ldr	r3, [pc, #300]	@ (80007dc <switchState+0x224>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b48      	ldr	r3, [pc, #288]	@ (80007d8 <switchState+0x220>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	4a45      	ldr	r2, [pc, #276]	@ (80007d4 <switchState+0x21c>)
 80006be:	6013      	str	r3, [r2, #0]

        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80006c0:	2200      	movs	r2, #0
 80006c2:	4946      	ldr	r1, [pc, #280]	@ (80007dc <switchState+0x224>)
 80006c4:	484a      	ldr	r0, [pc, #296]	@ (80007f0 <switchState+0x238>)
 80006c6:	f002 ff4c 	bl	8003562 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80006ca:	2200      	movs	r2, #0
 80006cc:	4949      	ldr	r1, [pc, #292]	@ (80007f4 <switchState+0x23c>)
 80006ce:	4848      	ldr	r0, [pc, #288]	@ (80007f0 <switchState+0x238>)
 80006d0:	f003 f83f 	bl	8003752 <HAL_RTC_SetDate>
            currentState = SET_MINUTES; // After setting hours, set minutes
 80006d4:	4b3e      	ldr	r3, [pc, #248]	@ (80007d0 <switchState+0x218>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	701a      	strb	r2, [r3, #0]
            break;
 80006da:	e074      	b.n	80007c6 <switchState+0x20e>
        case SET_MINUTES:
        	counter = sDate.Month * sensitivity;
 80006dc:	4b45      	ldr	r3, [pc, #276]	@ (80007f4 <switchState+0x23c>)
 80006de:	785b      	ldrb	r3, [r3, #1]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b3d      	ldr	r3, [pc, #244]	@ (80007d8 <switchState+0x220>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	fb02 f303 	mul.w	r3, r2, r3
 80006ea:	4a3a      	ldr	r2, [pc, #232]	@ (80007d4 <switchState+0x21c>)
 80006ec:	6013      	str	r3, [r2, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80006ee:	2200      	movs	r2, #0
 80006f0:	493a      	ldr	r1, [pc, #232]	@ (80007dc <switchState+0x224>)
 80006f2:	483f      	ldr	r0, [pc, #252]	@ (80007f0 <switchState+0x238>)
 80006f4:	f002 ff35 	bl	8003562 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80006f8:	2200      	movs	r2, #0
 80006fa:	493e      	ldr	r1, [pc, #248]	@ (80007f4 <switchState+0x23c>)
 80006fc:	483c      	ldr	r0, [pc, #240]	@ (80007f0 <switchState+0x238>)
 80006fe:	f003 f828 	bl	8003752 <HAL_RTC_SetDate>
            currentState = SET_MONTH; // Return to SLEEP after setting time
 8000702:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <switchState+0x218>)
 8000704:	2207      	movs	r2, #7
 8000706:	701a      	strb	r2, [r3, #0]
            break;
 8000708:	e05d      	b.n	80007c6 <switchState+0x20e>
        case SET_MONTH:
        	counter = tDate->Date * sensitivity;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	461a      	mov	r2, r3
 8000710:	4b31      	ldr	r3, [pc, #196]	@ (80007d8 <switchState+0x220>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	fb02 f303 	mul.w	r3, r2, r3
 8000718:	4a2e      	ldr	r2, [pc, #184]	@ (80007d4 <switchState+0x21c>)
 800071a:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE){
 800071c:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <switchState+0x22c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d109      	bne.n	8000738 <switchState+0x180>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000724:	2200      	movs	r2, #0
 8000726:	492d      	ldr	r1, [pc, #180]	@ (80007dc <switchState+0x224>)
 8000728:	4831      	ldr	r0, [pc, #196]	@ (80007f0 <switchState+0x238>)
 800072a:	f002 ff1a 	bl	8003562 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800072e:	2200      	movs	r2, #0
 8000730:	4930      	ldr	r1, [pc, #192]	@ (80007f4 <switchState+0x23c>)
 8000732:	482f      	ldr	r0, [pc, #188]	@ (80007f0 <switchState+0x238>)
 8000734:	f003 f80d 	bl	8003752 <HAL_RTC_SetDate>
        	}

        	currentState = SET_DAY;
 8000738:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <switchState+0x218>)
 800073a:	2208      	movs	r2, #8
 800073c:	701a      	strb	r2, [r3, #0]
        	break;
 800073e:	e042      	b.n	80007c6 <switchState+0x20e>
        case SET_DAY:
        	counter = tDate->Year * sensitivity;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	78db      	ldrb	r3, [r3, #3]
 8000744:	461a      	mov	r2, r3
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <switchState+0x220>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <switchState+0x21c>)
 8000750:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE) {
 8000752:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <switchState+0x22c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d109      	bne.n	800076e <switchState+0x1b6>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800075a:	2200      	movs	r2, #0
 800075c:	491f      	ldr	r1, [pc, #124]	@ (80007dc <switchState+0x224>)
 800075e:	4824      	ldr	r0, [pc, #144]	@ (80007f0 <switchState+0x238>)
 8000760:	f002 feff 	bl	8003562 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000764:	2200      	movs	r2, #0
 8000766:	4923      	ldr	r1, [pc, #140]	@ (80007f4 <switchState+0x23c>)
 8000768:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <switchState+0x238>)
 800076a:	f002 fff2 	bl	8003752 <HAL_RTC_SetDate>
        	}

        	currentState = SET_YEAR;
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <switchState+0x218>)
 8000770:	2209      	movs	r2, #9
 8000772:	701a      	strb	r2, [r3, #0]
        	break;
 8000774:	e027      	b.n	80007c6 <switchState+0x20e>
        case SET_YEAR:
        	if(currentDateType == SYSTEM_DATE) {
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <switchState+0x22c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d109      	bne.n	8000792 <switchState+0x1da>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800077e:	2200      	movs	r2, #0
 8000780:	4916      	ldr	r1, [pc, #88]	@ (80007dc <switchState+0x224>)
 8000782:	481b      	ldr	r0, [pc, #108]	@ (80007f0 <switchState+0x238>)
 8000784:	f002 feed 	bl	8003562 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000788:	2200      	movs	r2, #0
 800078a:	491a      	ldr	r1, [pc, #104]	@ (80007f4 <switchState+0x23c>)
 800078c:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <switchState+0x238>)
 800078e:	f002 ffe0 	bl	8003752 <HAL_RTC_SetDate>
        	}

        	currentState = SLEEP;
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <switchState+0x218>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
        	break;
 8000798:	e015      	b.n	80007c6 <switchState+0x20e>
        case SET_COLOR:
        	counter = brightness * sensitivity;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <switchState+0x240>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <switchState+0x220>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <switchState+0x21c>)
 80007ac:	6013      	str	r3, [r2, #0]
            currentState = SET_BRIGHTNESS; // After color, set brightness
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <switchState+0x218>)
 80007b0:	2206      	movs	r2, #6
 80007b2:	701a      	strb	r2, [r3, #0]
            break;
 80007b4:	e007      	b.n	80007c6 <switchState+0x20e>
        case SET_BRIGHTNESS:
            currentState = SLEEP; // Return to SLEEP after setting LED features
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <switchState+0x218>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
            break;
 80007bc:	e003      	b.n	80007c6 <switchState+0x20e>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            currentState = SLEEP;
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <switchState+0x218>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
            break;
 80007c4:	bf00      	nop
    }
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001c5 	.word	0x200001c5
 80007d4:	200001a0 	.word	0x200001a0
 80007d8:	20000004 	.word	0x20000004
 80007dc:	200001a4 	.word	0x200001a4
 80007e0:	200001c4 	.word	0x200001c4
 80007e4:	20000249 	.word	0x20000249
 80007e8:	200001bc 	.word	0x200001bc
 80007ec:	200001c0 	.word	0x200001c0
 80007f0:	20000090 	.word	0x20000090
 80007f4:	200001b8 	.word	0x200001b8
 80007f8:	20000000 	.word	0x20000000

080007fc <checkButtonPress>:

void checkButtonPress(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 8000802:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000806:	480d      	ldr	r0, [pc, #52]	@ (800083c <checkButtonPress+0x40>)
 8000808:	f002 f8e2 	bl	80029d0 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8000810:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <checkButtonPress+0x44>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d106      	bne.n	8000826 <checkButtonPress+0x2a>
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d103      	bne.n	8000826 <checkButtonPress+0x2a>
        // Button was pressed - perform actions here.
    	stateChangeRequest = true;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <checkButtonPress+0x48>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e002      	b.n	800082c <checkButtonPress+0x30>
    } else {
    	stateChangeRequest = false;
 8000826:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <checkButtonPress+0x48>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 800082c:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <checkButtonPress+0x44>)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	7013      	strb	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020400 	.word	0x40020400
 8000840:	20000009 	.word	0x20000009
 8000844:	20000248 	.word	0x20000248

08000848 <SetHours>:




void SetHours() {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

    counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <SetHours+0x3c>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <SetHours+0x40>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	1a9b      	subs	r3, r3, r2
 800085e:	461a      	mov	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f7ff fe85 	bl	8000570 <clampValue>
 8000866:	4603      	mov	r3, r0
 8000868:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <SetHours+0x3c>)
 800086a:	6013      	str	r3, [r2, #0]
    sTime.Hours = (uint8_t) (counter / sensitivity);
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <SetHours+0x3c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <SetHours+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	fbb2 f3f3 	udiv	r3, r2, r3
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b04      	ldr	r3, [pc, #16]	@ (800088c <SetHours+0x44>)
 800087c:	701a      	strb	r2, [r3, #0]

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200001a0 	.word	0x200001a0
 8000888:	20000004 	.word	0x20000004
 800088c:	200001a4 	.word	0x200001a4

08000890 <SetMinutes>:

void SetMinutes() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 59 * sensitivity); //59 minutes
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <SetMinutes+0x3c>)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <SetMinutes+0x40>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4613      	mov	r3, r2
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	461a      	mov	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f7ff fe61 	bl	8000570 <clampValue>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a06      	ldr	r2, [pc, #24]	@ (80008cc <SetMinutes+0x3c>)
 80008b2:	6013      	str	r3, [r2, #0]
    sTime.Minutes = (uint8_t) (counter / sensitivity);
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <SetMinutes+0x3c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <SetMinutes+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <SetMinutes+0x44>)
 80008c4:	705a      	strb	r2, [r3, #1]

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200001a0 	.word	0x200001a0
 80008d0:	20000004 	.word	0x20000004
 80008d4:	200001a4 	.word	0x200001a4

080008d8 <SetMonth>:

uint8_t SetMonth(RTC_DateTypeDef * tDate) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 12 * sensitivity); //12 months
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <SetMonth+0x50>)
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <SetMonth+0x54>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4613      	mov	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	461a      	mov	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f7ff fe3c 	bl	8000570 <clampValue>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <SetMonth+0x50>)
 80008fc:	6013      	str	r3, [r2, #0]
    tDate->Month = (uint8_t) (counter / sensitivity);
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <SetMonth+0x50>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <SetMonth+0x54>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	b2da      	uxtb	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	705a      	strb	r2, [r3, #1]

    return (uint8_t) (counter / sensitivity);
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <SetMonth+0x50>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <SetMonth+0x54>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	fbb2 f3f3 	udiv	r3, r2, r3
 800091c:	b2db      	uxtb	r3, r3
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001a0 	.word	0x200001a0
 800092c:	20000004 	.word	0x20000004

08000930 <SetDay>:

uint8_t SetDay(RTC_DateTypeDef * tDate) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 31 * sensitivity); //31 days
 8000938:	4b10      	ldr	r3, [pc, #64]	@ (800097c <SetDay+0x4c>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <SetDay+0x50>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4613      	mov	r3, r2
 8000942:	015b      	lsls	r3, r3, #5
 8000944:	1a9b      	subs	r3, r3, r2
 8000946:	461a      	mov	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f7ff fe11 	bl	8000570 <clampValue>
 800094e:	4603      	mov	r3, r0
 8000950:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <SetDay+0x4c>)
 8000952:	6013      	str	r3, [r2, #0]
    //FIXME: user could enter February 31 which is wrong
    tDate->Date = (uint8_t) (counter / sensitivity);
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <SetDay+0x4c>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <SetDay+0x50>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	709a      	strb	r2, [r3, #2]

    return (uint8_t) (counter / sensitivity);
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <SetDay+0x4c>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <SetDay+0x50>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	b2db      	uxtb	r3, r3
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200001a0 	.word	0x200001a0
 8000980:	20000004 	.word	0x20000004

08000984 <SetYear>:

uint8_t SetYear(RTC_DateTypeDef * tDate) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 3000 * sensitivity); //12 months
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <SetYear+0x50>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <SetYear+0x54>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000998:	fb02 f303 	mul.w	r3, r2, r3
 800099c:	461a      	mov	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f7ff fde6 	bl	8000570 <clampValue>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <SetYear+0x50>)
 80009a8:	6013      	str	r3, [r2, #0]
    tDate->Year = (uint8_t) (counter / sensitivity);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <SetYear+0x50>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <SetYear+0x54>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	70da      	strb	r2, [r3, #3]

    return (uint8_t) (counter / sensitivity);
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <SetYear+0x50>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <SetYear+0x54>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c8:	b2db      	uxtb	r3, r3
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001a0 	.word	0x200001a0
 80009d8:	20000004 	.word	0x20000004

080009dc <SetColor>:

void SetColor() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <SetColor+0x34>)
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <SetColor+0x38>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	461a      	mov	r2, r3
 80009ec:	2100      	movs	r1, #0
 80009ee:	f7ff fdbf 	bl	8000570 <clampValue>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a06      	ldr	r2, [pc, #24]	@ (8000a10 <SetColor+0x34>)
 80009f6:	6013      	str	r3, [r2, #0]
    color = (uint8_t) (counter / sensitivity);
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <SetColor+0x34>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <SetColor+0x38>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <SetColor+0x3c>)
 8000a08:	701a      	strb	r2, [r3, #0]


}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001a0 	.word	0x200001a0
 8000a14:	20000004 	.word	0x20000004
 8000a18:	200001c4 	.word	0x200001c4

08000a1c <SetBrightness>:


void SetBrightness() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 8000a20:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <SetBrightness+0x3c>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <SetBrightness+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	2264      	movs	r2, #100	@ 0x64
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	2101      	movs	r1, #1
 8000a34:	f7ff fd9c 	bl	8000570 <clampValue>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a07      	ldr	r2, [pc, #28]	@ (8000a58 <SetBrightness+0x3c>)
 8000a3c:	6013      	str	r3, [r2, #0]
    brightness = (uint8_t) (counter / (sensitivity / 2));
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <SetBrightness+0x3c>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SetBrightness+0x40>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	085b      	lsrs	r3, r3, #1
 8000a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <SetBrightness+0x44>)
 8000a50:	701a      	strb	r2, [r3, #0]

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001a0 	.word	0x200001a0
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000000 	.word	0x20000000

08000a64 <Select>:

void Select() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 3 * sensitivity);
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <Select+0x24>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <Select+0x28>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	461a      	mov	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f7ff fd79 	bl	8000570 <clampValue>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a01      	ldr	r2, [pc, #4]	@ (8000a88 <Select+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200001a0 	.word	0x200001a0
 8000a8c:	20000004 	.word	0x20000004

08000a90 <Wake>:

void Wake() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 1);
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <Wake+0x30>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd67 	bl	8000570 <clampValue>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <Wake+0x30>)
 8000aa6:	6013      	str	r3, [r2, #0]
	//counter = 0 -> isSet
	//counter = 1 -> isNotSet
	isSet = !counter;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <Wake+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <Wake+0x34>)
 8000ab8:	701a      	strb	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200001a0 	.word	0x200001a0
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ace:	f001 f8c1 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad2:	f000 f943 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f000 fb19 	bl	800110c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ada:	f000 faf7 	bl	80010cc <MX_DMA_Init>
  MX_TIM1_Init();
 8000ade:	f000 fa01 	bl	8000ee4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ae2:	f000 fa9f 	bl	8001024 <MX_TIM3_Init>
  MX_RTC_Init();
 8000ae6:	f000 f9a3 	bl	8000e30 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 8000aea:	213c      	movs	r1, #60	@ 0x3c
 8000aec:	4888      	ldr	r0, [pc, #544]	@ (8000d10 <main+0x248>)
 8000aee:	f003 fb85 	bl	80041fc <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  bool toggle = false;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000af6:	4b86      	ldr	r3, [pc, #536]	@ (8000d10 <main+0x248>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000afc:	4a85      	ldr	r2, [pc, #532]	@ (8000d14 <main+0x24c>)
 8000afe:	6013      	str	r3, [r2, #0]

	checkButtonPress();
 8000b00:	f7ff fe7c 	bl	80007fc <checkButtonPress>
	if(stateChangeRequest){
 8000b04:	4b84      	ldr	r3, [pc, #528]	@ (8000d18 <main+0x250>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d01e      	beq.n	8000b4a <main+0x82>
		switchState((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000b0c:	4b83      	ldr	r3, [pc, #524]	@ (8000d1c <main+0x254>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d007      	beq.n	8000b24 <main+0x5c>
 8000b14:	4b81      	ldr	r3, [pc, #516]	@ (8000d1c <main+0x254>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d101      	bne.n	8000b20 <main+0x58>
 8000b1c:	4b80      	ldr	r3, [pc, #512]	@ (8000d20 <main+0x258>)
 8000b1e:	e002      	b.n	8000b26 <main+0x5e>
 8000b20:	4b80      	ldr	r3, [pc, #512]	@ (8000d24 <main+0x25c>)
 8000b22:	e000      	b.n	8000b26 <main+0x5e>
 8000b24:	4b80      	ldr	r3, [pc, #512]	@ (8000d28 <main+0x260>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd46 	bl	80005b8 <switchState>
		stateChangeRequest = !stateChangeRequest;
 8000b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8000d18 <main+0x250>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f083 0301 	eor.w	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b74      	ldr	r3, [pc, #464]	@ (8000d18 <main+0x250>)
 8000b48:	701a      	strb	r2, [r3, #0]
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4977      	ldr	r1, [pc, #476]	@ (8000d2c <main+0x264>)
 8000b4e:	4878      	ldr	r0, [pc, #480]	@ (8000d30 <main+0x268>)
 8000b50:	f002 fda1 	bl	8003696 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b54:	2200      	movs	r2, #0
 8000b56:	4974      	ldr	r1, [pc, #464]	@ (8000d28 <main+0x260>)
 8000b58:	4875      	ldr	r0, [pc, #468]	@ (8000d30 <main+0x268>)
 8000b5a:	f002 fe7e 	bl	800385a <HAL_RTC_GetDate>


	switch(currentState) {
 8000b5e:	4b75      	ldr	r3, [pc, #468]	@ (8000d34 <main+0x26c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b09      	cmp	r3, #9
 8000b66:	d85d      	bhi.n	8000c24 <main+0x15c>
 8000b68:	a201      	add	r2, pc, #4	@ (adr r2, 8000b70 <main+0xa8>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000c25 	.word	0x08000c25
 8000b74:	08000b99 	.word	0x08000b99
 8000b78:	08000b9f 	.word	0x08000b9f
 8000b7c:	08000ba5 	.word	0x08000ba5
 8000b80:	08000bab 	.word	0x08000bab
 8000b84:	08000c17 	.word	0x08000c17
 8000b88:	08000c1f 	.word	0x08000c1f
 8000b8c:	08000bb1 	.word	0x08000bb1
 8000b90:	08000bd3 	.word	0x08000bd3
 8000b94:	08000bf5 	.word	0x08000bf5
		case SLEEP:

			break;
		case WAKE:
			Wake();
 8000b98:	f7ff ff7a 	bl	8000a90 <Wake>
			break;
 8000b9c:	e043      	b.n	8000c26 <main+0x15e>
		case SELECT:
			Select();
 8000b9e:	f7ff ff61 	bl	8000a64 <Select>
			break;
 8000ba2:	e040      	b.n	8000c26 <main+0x15e>
		case SET_HOURS:
			SetHours();
 8000ba4:	f7ff fe50 	bl	8000848 <SetHours>
			break;
 8000ba8:	e03d      	b.n	8000c26 <main+0x15e>
		case SET_MINUTES:
			SetMinutes();
 8000baa:	f7ff fe71 	bl	8000890 <SetMinutes>
			break;
 8000bae:	e03a      	b.n	8000c26 <main+0x15e>
		case SET_MONTH:
			SetMonth((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d1c <main+0x254>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d007      	beq.n	8000bc8 <main+0x100>
 8000bb8:	4b58      	ldr	r3, [pc, #352]	@ (8000d1c <main+0x254>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d101      	bne.n	8000bc4 <main+0xfc>
 8000bc0:	4b57      	ldr	r3, [pc, #348]	@ (8000d20 <main+0x258>)
 8000bc2:	e002      	b.n	8000bca <main+0x102>
 8000bc4:	4b57      	ldr	r3, [pc, #348]	@ (8000d24 <main+0x25c>)
 8000bc6:	e000      	b.n	8000bca <main+0x102>
 8000bc8:	4b57      	ldr	r3, [pc, #348]	@ (8000d28 <main+0x260>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fe84 	bl	80008d8 <SetMonth>
			break;
 8000bd0:	e029      	b.n	8000c26 <main+0x15e>
		case SET_DAY:
			SetDay((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000bd2:	4b52      	ldr	r3, [pc, #328]	@ (8000d1c <main+0x254>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d007      	beq.n	8000bea <main+0x122>
 8000bda:	4b50      	ldr	r3, [pc, #320]	@ (8000d1c <main+0x254>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d101      	bne.n	8000be6 <main+0x11e>
 8000be2:	4b4f      	ldr	r3, [pc, #316]	@ (8000d20 <main+0x258>)
 8000be4:	e002      	b.n	8000bec <main+0x124>
 8000be6:	4b4f      	ldr	r3, [pc, #316]	@ (8000d24 <main+0x25c>)
 8000be8:	e000      	b.n	8000bec <main+0x124>
 8000bea:	4b4f      	ldr	r3, [pc, #316]	@ (8000d28 <main+0x260>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fe9f 	bl	8000930 <SetDay>
			break;
 8000bf2:	e018      	b.n	8000c26 <main+0x15e>
		case SET_YEAR:
			SetYear((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000bf4:	4b49      	ldr	r3, [pc, #292]	@ (8000d1c <main+0x254>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <main+0x144>
 8000bfc:	4b47      	ldr	r3, [pc, #284]	@ (8000d1c <main+0x254>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d101      	bne.n	8000c08 <main+0x140>
 8000c04:	4b46      	ldr	r3, [pc, #280]	@ (8000d20 <main+0x258>)
 8000c06:	e002      	b.n	8000c0e <main+0x146>
 8000c08:	4b46      	ldr	r3, [pc, #280]	@ (8000d24 <main+0x25c>)
 8000c0a:	e000      	b.n	8000c0e <main+0x146>
 8000c0c:	4b46      	ldr	r3, [pc, #280]	@ (8000d28 <main+0x260>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff feb8 	bl	8000984 <SetYear>
			break;
 8000c14:	e007      	b.n	8000c26 <main+0x15e>
		case SET_COLOR:
			SetColor(&sDate);
 8000c16:	4844      	ldr	r0, [pc, #272]	@ (8000d28 <main+0x260>)
 8000c18:	f7ff fee0 	bl	80009dc <SetColor>
			break;
 8000c1c:	e003      	b.n	8000c26 <main+0x15e>
		case SET_BRIGHTNESS:
			SetBrightness();
 8000c1e:	f7ff fefd 	bl	8000a1c <SetBrightness>
			break;
 8000c22:	e000      	b.n	8000c26 <main+0x15e>
		default:
			break;
 8000c24:	bf00      	nop
	}

	__HAL_TIM_SET_COUNTER(&htim3, counter);
 8000c26:	4b3a      	ldr	r3, [pc, #232]	@ (8000d10 <main+0x248>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a3a      	ldr	r2, [pc, #232]	@ (8000d14 <main+0x24c>)
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
	Segment_Display(displayStr);
 8000c30:	4841      	ldr	r0, [pc, #260]	@ (8000d38 <main+0x270>)
 8000c32:	f000 fe49 	bl	80018c8 <Segment_Display>

	flickerOutEffect();
 8000c36:	f004 fbe5 	bl	8005404 <flickerOutEffect>
	advanceFrame();
 8000c3a:	f004 fbcf 	bl	80053dc <advanceFrame>

	if (toggle) {
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d028      	beq.n	8000c96 <main+0x1ce>
		// Convert the bitmap to next frame
		addBitmapToNextFrame(BMP_ITS, 5, 5, 5, 255); // White color, full brightness
 8000c44:	23ff      	movs	r3, #255	@ 0xff
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2305      	movs	r3, #5
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	2105      	movs	r1, #5
 8000c4e:	483b      	ldr	r0, [pc, #236]	@ (8000d3c <main+0x274>)
 8000c50:	f004 fa94 	bl	800517c <addBitmapToNextFrame>
		addBitmapToNextFrame(MINUTE_THIRTY, 5, 5, 5, 255); // White color, full brightness
 8000c54:	23ff      	movs	r3, #255	@ 0xff
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2305      	movs	r3, #5
 8000c5a:	2205      	movs	r2, #5
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	4838      	ldr	r0, [pc, #224]	@ (8000d40 <main+0x278>)
 8000c60:	f004 fa8c 	bl	800517c <addBitmapToNextFrame>
		addBitmapToNextFrame(BMP_PAST, 5, 5, 5, 255); // White color, full brightness
 8000c64:	23ff      	movs	r3, #255	@ 0xff
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2305      	movs	r3, #5
 8000c6a:	2205      	movs	r2, #5
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	4835      	ldr	r0, [pc, #212]	@ (8000d44 <main+0x27c>)
 8000c70:	f004 fa84 	bl	800517c <addBitmapToNextFrame>
		addBitmapToNextFrame(HOUR_NINE, 5, 5, 5, 255); // White color, full brightness
 8000c74:	23ff      	movs	r3, #255	@ 0xff
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2305      	movs	r3, #5
 8000c7a:	2205      	movs	r2, #5
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	4832      	ldr	r0, [pc, #200]	@ (8000d48 <main+0x280>)
 8000c80:	f004 fa7c 	bl	800517c <addBitmapToNextFrame>
		addBitmapToNextFrame(BMP_PM, 5, 5, 5, 255); // White color, full brightness
 8000c84:	23ff      	movs	r3, #255	@ 0xff
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2305      	movs	r3, #5
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	482f      	ldr	r0, [pc, #188]	@ (8000d4c <main+0x284>)
 8000c90:	f004 fa74 	bl	800517c <addBitmapToNextFrame>
 8000c94:	e027      	b.n	8000ce6 <main+0x21e>
	} else {
		// Define a bitmap pattern for the "OFF" state
		addBitmapToNextFrame(BMP_ITS, 5, 5, 5, 255); // White color, full brightness
 8000c96:	23ff      	movs	r3, #255	@ 0xff
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	4826      	ldr	r0, [pc, #152]	@ (8000d3c <main+0x274>)
 8000ca2:	f004 fa6b 	bl	800517c <addBitmapToNextFrame>
		addBitmapToNextFrame(MINUTE_TWENTYFIVE, 5, 5, 5, 255); // White color, full brightness
 8000ca6:	23ff      	movs	r3, #255	@ 0xff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2305      	movs	r3, #5
 8000cac:	2205      	movs	r2, #5
 8000cae:	2105      	movs	r1, #5
 8000cb0:	4827      	ldr	r0, [pc, #156]	@ (8000d50 <main+0x288>)
 8000cb2:	f004 fa63 	bl	800517c <addBitmapToNextFrame>
		addBitmapToNextFrame(BMP_TILL, 5, 5, 5, 255); // White color, full brightness
 8000cb6:	23ff      	movs	r3, #255	@ 0xff
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2305      	movs	r3, #5
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	4824      	ldr	r0, [pc, #144]	@ (8000d54 <main+0x28c>)
 8000cc2:	f004 fa5b 	bl	800517c <addBitmapToNextFrame>
		addBitmapToNextFrame(HOUR_TEN, 5, 5, 5, 255); // White color, full brightness
 8000cc6:	23ff      	movs	r3, #255	@ 0xff
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2305      	movs	r3, #5
 8000ccc:	2205      	movs	r2, #5
 8000cce:	2105      	movs	r1, #5
 8000cd0:	4821      	ldr	r0, [pc, #132]	@ (8000d58 <main+0x290>)
 8000cd2:	f004 fa53 	bl	800517c <addBitmapToNextFrame>
		addBitmapToNextFrame(BMP_PM, 5, 5, 5, 255); // White color, full brightness
 8000cd6:	23ff      	movs	r3, #255	@ 0xff
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2305      	movs	r3, #5
 8000cdc:	2205      	movs	r2, #5
 8000cde:	2105      	movs	r1, #5
 8000ce0:	481a      	ldr	r0, [pc, #104]	@ (8000d4c <main+0x284>)
 8000ce2:	f004 fa4b 	bl	800517c <addBitmapToNextFrame>
	}


	// Flicker in the new pattern
	flickerInEffect();
 8000ce6:	f004 fc0d 	bl	8005504 <flickerInEffect>

	// Toggle the state for the next iteration
	toggle = !toggle;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bf14      	ite	ne
 8000cf0:	2301      	movne	r3, #1
 8000cf2:	2300      	moveq	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f083 0301 	eor.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	71fb      	strb	r3, [r7, #7]

	// Delay between transitions, adjust as needed
	HAL_Delay(5000);
 8000d06:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d0a:	f001 f815 	bl	8001d38 <HAL_Delay>
	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000d0e:	e6f2      	b.n	8000af6 <main+0x2e>
 8000d10:	200000f8 	.word	0x200000f8
 8000d14:	200001a0 	.word	0x200001a0
 8000d18:	20000248 	.word	0x20000248
 8000d1c:	20000249 	.word	0x20000249
 8000d20:	200001c0 	.word	0x200001c0
 8000d24:	200001bc 	.word	0x200001bc
 8000d28:	200001b8 	.word	0x200001b8
 8000d2c:	200001a4 	.word	0x200001a4
 8000d30:	20000090 	.word	0x20000090
 8000d34:	200001c5 	.word	0x200001c5
 8000d38:	200001c8 	.word	0x200001c8
 8000d3c:	0800697e 	.word	0x0800697e
 8000d40:	08006964 	.word	0x08006964
 8000d44:	08006998 	.word	0x08006998
 8000d48:	08006860 	.word	0x08006860
 8000d4c:	08006a4e 	.word	0x08006a4e
 8000d50:	0800694a 	.word	0x0800694a
 8000d54:	080069b2 	.word	0x080069b2
 8000d58:	0800687a 	.word	0x0800687a

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	@ 0x50
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 0320 	add.w	r3, r7, #32
 8000d66:	2230      	movs	r2, #48	@ 0x30
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 fe49 	bl	8005a02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <SystemClock_Config+0xcc>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <SystemClock_Config+0xcc>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d90:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <SystemClock_Config+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <SystemClock_Config+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a21      	ldr	r2, [pc, #132]	@ (8000e2c <SystemClock_Config+0xd0>)
 8000da6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <SystemClock_Config+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000db8:	2305      	movs	r3, #5
 8000dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000dd4:	2348      	movs	r3, #72	@ 0x48
 8000dd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fe25 	bl	8002a34 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000df0:	f000 fa10 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 f887 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e1c:	f000 f9fa 	bl	8001214 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	@ 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e44:	2300      	movs	r3, #0
 8000e46:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e48:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ee0 <MX_RTC_Init+0xb0>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e54:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e56:	227f      	movs	r2, #127	@ 0x7f
 8000e58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e5c:	22ff      	movs	r2, #255	@ 0xff
 8000e5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e72:	481a      	ldr	r0, [pc, #104]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e74:	f002 faf2 	bl	800345c <HAL_RTC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f9c9 	bl	8001214 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480f      	ldr	r0, [pc, #60]	@ (8000edc <MX_RTC_Init+0xac>)
 8000e9e:	f002 fb60 	bl	8003562 <HAL_RTC_SetTime>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ea8:	f000 f9b4 	bl	8001214 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eac:	2301      	movs	r3, #1
 8000eae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <MX_RTC_Init+0xac>)
 8000ec4:	f002 fc45 	bl	8003752 <HAL_RTC_SetDate>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000ece:	f000 f9a1 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000090 	.word	0x20000090
 8000ee0:	40002800 	.word	0x40002800

08000ee4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b096      	sub	sp, #88	@ 0x58
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2220      	movs	r2, #32
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f004 fd70 	bl	8005a02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f22:	4b3e      	ldr	r3, [pc, #248]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f24:	4a3e      	ldr	r2, [pc, #248]	@ (8001020 <MX_TIM1_Init+0x13c>)
 8000f26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f28:	4b3c      	ldr	r3, [pc, #240]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000f34:	4b39      	ldr	r3, [pc, #228]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f36:	2259      	movs	r2, #89	@ 0x59
 8000f38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f40:	4b36      	ldr	r3, [pc, #216]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b35      	ldr	r3, [pc, #212]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f4c:	4833      	ldr	r0, [pc, #204]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f4e:	f002 fd91 	bl	8003a74 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f58:	f000 f95c 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f66:	4619      	mov	r1, r3
 8000f68:	482c      	ldr	r0, [pc, #176]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f6a:	f003 fb87 	bl	800467c <HAL_TIM_ConfigClockSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f74:	f000 f94e 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f78:	4828      	ldr	r0, [pc, #160]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f7a:	f002 fdca 	bl	8003b12 <HAL_TIM_PWM_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f84:	f000 f946 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f94:	4619      	mov	r1, r3
 8000f96:	4821      	ldr	r0, [pc, #132]	@ (800101c <MX_TIM1_Init+0x138>)
 8000f98:	f004 f81c 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000fa2:	f000 f937 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa6:	2360      	movs	r3, #96	@ 0x60
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4814      	ldr	r0, [pc, #80]	@ (800101c <MX_TIM1_Init+0x138>)
 8000fcc:	f003 fa94 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000fd6:	f000 f91d 	bl	8001214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	@ (800101c <MX_TIM1_Init+0x138>)
 8000ffe:	f004 f857 	bl	80050b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001008:	f000 f904 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <MX_TIM1_Init+0x138>)
 800100e:	f000 fa21 	bl	8001454 <HAL_TIM_MspPostInit>

}
 8001012:	bf00      	nop
 8001014:	3758      	adds	r7, #88	@ 0x58
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000b0 	.word	0x200000b0
 8001020:	40010000 	.word	0x40010000

08001024 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2224      	movs	r2, #36	@ 0x24
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f004 fce5 	bl	8005a02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001040:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <MX_TIM3_Init+0xa0>)
 8001042:	4a21      	ldr	r2, [pc, #132]	@ (80010c8 <MX_TIM3_Init+0xa4>)
 8001044:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001046:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <MX_TIM3_Init+0xa0>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <MX_TIM3_Init+0xa0>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <MX_TIM3_Init+0xa0>)
 8001054:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001058:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_TIM3_Init+0xa0>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_TIM3_Init+0xa0>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001066:	2303      	movs	r3, #3
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800106a:	2302      	movs	r3, #2
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800107a:	2302      	movs	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800107e:	2301      	movs	r3, #1
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <MX_TIM3_Init+0xa0>)
 8001092:	f003 f80d 	bl	80040b0 <HAL_TIM_Encoder_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800109c:	f000 f8ba 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_TIM3_Init+0xa0>)
 80010ae:	f003 ff91 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80010b8:	f000 f8ac 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3730      	adds	r7, #48	@ 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200000f8 	.word	0x200000f8
 80010c8:	40000400 	.word	0x40000400

080010cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_DMA_Init+0x3c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <MX_DMA_Init+0x3c>)
 80010dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <MX_DMA_Init+0x3c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	2039      	movs	r0, #57	@ 0x39
 80010f4:	f000 ff1f 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010f8:	2039      	movs	r0, #57	@ 0x39
 80010fa:	f000 ff38 	bl	8001f6e <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a37      	ldr	r2, [pc, #220]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b35      	ldr	r3, [pc, #212]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a30      	ldr	r2, [pc, #192]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b2e      	ldr	r3, [pc, #184]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a29      	ldr	r2, [pc, #164]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a22      	ldr	r2, [pc, #136]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001192:	2200      	movs	r2, #0
 8001194:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 8001198:	481c      	ldr	r0, [pc, #112]	@ (800120c <MX_GPIO_Init+0x100>)
 800119a:	f001 fc31 	bl	8002a00 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 800119e:	2200      	movs	r2, #0
 80011a0:	f241 4107 	movw	r1, #5127	@ 0x1407
 80011a4:	481a      	ldr	r0, [pc, #104]	@ (8001210 <MX_GPIO_Init+0x104>)
 80011a6:	f001 fc2b 	bl	8002a00 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 80011aa:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 80011ae:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4812      	ldr	r0, [pc, #72]	@ (800120c <MX_GPIO_Init+0x100>)
 80011c4:	f001 fa80 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 80011c8:	f241 4307 	movw	r3, #5127	@ 0x1407
 80011cc:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <MX_GPIO_Init+0x104>)
 80011e2:	f001 fa71 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80011e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_GPIO_Init+0x104>)
 80011fc:	f001 fa64 	bl	80026c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	@ 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <HAL_MspInit+0x90>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	4a20      	ldr	r2, [pc, #128]	@ (80012b0 <HAL_MspInit+0x90>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001234:	6453      	str	r3, [r2, #68]	@ 0x44
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <HAL_MspInit+0x90>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <HAL_MspInit+0x90>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <HAL_MspInit+0x90>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	@ 0x40
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_MspInit+0x90>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2101      	movs	r1, #1
 8001262:	f06f 000b 	mvn.w	r0, #11
 8001266:	f000 fe66 	bl	8001f36 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2102      	movs	r1, #2
 800126e:	f06f 000a 	mvn.w	r0, #10
 8001272:	f000 fe60 	bl	8001f36 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2103      	movs	r1, #3
 800127a:	f06f 0009 	mvn.w	r0, #9
 800127e:	f000 fe5a 	bl	8001f36 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2104      	movs	r1, #4
 8001286:	f06f 0004 	mvn.w	r0, #4
 800128a:	f000 fe54 	bl	8001f36 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2105      	movs	r1, #5
 8001292:	f06f 0003 	mvn.w	r0, #3
 8001296:	f000 fe4e 	bl	8001f36 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2106      	movs	r1, #6
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f000 fe48 	bl	8001f36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <HAL_RTC_MspInit+0x50>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d111      	bne.n	80012fc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012d8:	2302      	movs	r3, #2
 80012da:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 ffc8 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80012f2:	f7ff ff8f 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012f6:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <HAL_RTC_MspInit+0x54>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40002800 	.word	0x40002800
 8001308:	42470e3c 	.word	0x42470e3c

0800130c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <HAL_TIM_Base_MspInit+0x98>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d13d      	bne.n	800139a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 800133c:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <HAL_TIM_Base_MspInit+0xa4>)
 800133e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 8001342:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001346:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 800134a:	2240      	movs	r2, #64	@ 0x40
 800134c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 8001356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800135a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 800135e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001362:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 8001366:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800136a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800137e:	480b      	ldr	r0, [pc, #44]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 8001380:	f000 fe10 	bl	8001fa4 <HAL_DMA_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800138a:	f7ff ff43 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 8001392:	625a      	str	r2, [r3, #36]	@ 0x24
 8001394:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <HAL_TIM_Base_MspInit+0xa0>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40010000 	.word	0x40010000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	20000140 	.word	0x20000140
 80013b0:	40026428 	.word	0x40026428

080013b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <HAL_TIM_Encoder_MspInit+0x94>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d133      	bne.n	800143e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <HAL_TIM_Encoder_MspInit+0x98>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <HAL_TIM_Encoder_MspInit+0x98>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <HAL_TIM_Encoder_MspInit+0x98>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_TIM_Encoder_MspInit+0x98>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a14      	ldr	r2, [pc, #80]	@ (800144c <HAL_TIM_Encoder_MspInit+0x98>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_TIM_Encoder_MspInit+0x98>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800140e:	2330      	movs	r3, #48	@ 0x30
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800141e:	2302      	movs	r3, #2
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4809      	ldr	r0, [pc, #36]	@ (8001450 <HAL_TIM_Encoder_MspInit+0x9c>)
 800142a:	f001 f94d 	bl	80026c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2109      	movs	r1, #9
 8001432:	201d      	movs	r0, #29
 8001434:	f000 fd7f 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001438:	201d      	movs	r0, #29
 800143a:	f000 fd98 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	@ 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40000400 	.word	0x40000400
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400

08001454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <HAL_TIM_MspPostInit+0x68>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d11e      	bne.n	80014b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001496:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <HAL_TIM_MspPostInit+0x70>)
 80014b0:	f001 f90a 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <NMI_Handler+0x4>

080014d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <MemManage_Handler+0x4>

080014e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <UsageFault_Handler+0x4>

080014f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151e:	f000 fbeb 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <TIM3_IRQHandler+0x10>)
 800152e:	f002 fef3 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000f8 	.word	0x200000f8

0800153c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <DMA2_Stream1_IRQHandler+0x10>)
 8001542:	f000 fe57 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000140 	.word	0x20000140

08001550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_kill>:

int _kill(int pid, int sig)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800156a:	f004 faab 	bl	8005ac4 <__errno>
 800156e:	4603      	mov	r3, r0
 8001570:	2216      	movs	r2, #22
 8001572:	601a      	str	r2, [r3, #0]
  return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_exit>:

void _exit (int status)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe7 	bl	8001560 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001592:	bf00      	nop
 8001594:	e7fd      	b.n	8001592 <_exit+0x12>

08001596 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e00a      	b.n	80015be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a8:	f3af 8000 	nop.w
 80015ac:	4601      	mov	r1, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	60ba      	str	r2, [r7, #8]
 80015b4:	b2ca      	uxtb	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dbf0      	blt.n	80015a8 <_read+0x12>
  }

  return len;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e009      	b.n	80015f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbf1      	blt.n	80015e2 <_write+0x12>
  }
  return len;
 80015fe:	687b      	ldr	r3, [r7, #4]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_close>:

int _close(int file)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001630:	605a      	str	r2, [r3, #4]
  return 0;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_isatty>:

int _isatty(int file)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f004 fa10 	bl	8005ac4 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20020000 	.word	0x20020000
 80016d0:	00010000 	.word	0x00010000
 80016d4:	2000024c 	.word	0x2000024c
 80016d8:	20002350 	.word	0x20002350

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480d      	ldr	r0, [pc, #52]	@ (800173c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001706:	490e      	ldr	r1, [pc, #56]	@ (8001740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001708:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800171c:	4c0b      	ldr	r4, [pc, #44]	@ (800174c <LoopFillZerobss+0x26>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172a:	f7ff ffd7 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f004 f9cf 	bl	8005ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff f9c9 	bl	8000ac8 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001744:	08006b70 	.word	0x08006b70
  ldr r2, =_sbss
 8001748:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800174c:	20002350 	.word	0x20002350

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>
	...

08001754 <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	2104      	movs	r1, #4
 8001772:	4830      	ldr	r0, [pc, #192]	@ (8001834 <setSegments+0xe0>)
 8001774:	f001 f944 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	2101      	movs	r1, #1
 800178c:	4829      	ldr	r0, [pc, #164]	@ (8001834 <setSegments+0xe0>)
 800178e:	f001 f937 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	2108      	movs	r1, #8
 80017a6:	4823      	ldr	r0, [pc, #140]	@ (8001834 <setSegments+0xe0>)
 80017a8:	f001 f92a 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	2104      	movs	r1, #4
 80017c0:	481d      	ldr	r0, [pc, #116]	@ (8001838 <setSegments+0xe4>)
 80017c2:	f001 f91d 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	2101      	movs	r1, #1
 80017da:	4817      	ldr	r0, [pc, #92]	@ (8001838 <setSegments+0xe4>)
 80017dc:	f001 f910 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	2110      	movs	r1, #16
 80017f4:	480f      	ldr	r0, [pc, #60]	@ (8001834 <setSegments+0xe0>)
 80017f6:	f001 f903 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	2102      	movs	r1, #2
 800180e:	4809      	ldr	r0, [pc, #36]	@ (8001834 <setSegments+0xe0>)
 8001810:	f001 f8f6 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	43db      	mvns	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	09db      	lsrs	r3, r3, #7
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	2140      	movs	r1, #64	@ 0x40
 8001824:	4803      	ldr	r0, [pc, #12]	@ (8001834 <setSegments+0xe0>)
 8001826:	f001 f8eb 	bl	8002a00 <HAL_GPIO_WritePin>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400

0800183c <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b01      	cmp	r3, #1
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001858:	4819      	ldr	r0, [pc, #100]	@ (80018c0 <activateDigit+0x84>)
 800185a:	f001 f8d1 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b02      	cmp	r3, #2
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001870:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <activateDigit+0x84>)
 8001872:	f001 f8c5 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b03      	cmp	r3, #3
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	480f      	ldr	r0, [pc, #60]	@ (80018c4 <activateDigit+0x88>)
 8001888:	f001 f8ba 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf0c      	ite	eq
 8001892:	2301      	moveq	r3, #1
 8001894:	2300      	movne	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	2120      	movs	r1, #32
 800189c:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <activateDigit+0x88>)
 800189e:	f001 f8af 	bl	8002a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	2102      	movs	r1, #2
 80018b2:	4803      	ldr	r0, [pc, #12]	@ (80018c0 <activateDigit+0x84>)
 80018b4:	f001 f8a4 	bl	8002a00 <HAL_GPIO_WritePin>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020000 	.word	0x40020000

080018c8 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	2204      	movs	r2, #4
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 f89a 	bl	8005a12 <strncpy>
    truncatedInput[4] = '\0';
 80018de:	2300      	movs	r3, #0
 80018e0:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e1ab      	b.n	8001c40 <Segment_Display+0x378>
        activateDigit(i + 1);
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	3301      	adds	r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ffa4 	bl	800183c <activateDigit>

		char ch = truncatedInput[i];
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3310      	adds	r3, #16
 80018f8:	443b      	add	r3, r7
 80018fa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80018fe:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 8001900:	7bbb      	ldrb	r3, [r7, #14]
 8001902:	2b7a      	cmp	r3, #122	@ 0x7a
 8001904:	f200 8192 	bhi.w	8001c2c <Segment_Display+0x364>
 8001908:	a201      	add	r2, pc, #4	@ (adr r2, 8001910 <Segment_Display+0x48>)
 800190a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	08001c4b 	.word	0x08001c4b
 8001914:	08001c2d 	.word	0x08001c2d
 8001918:	08001c2d 	.word	0x08001c2d
 800191c:	08001c2d 	.word	0x08001c2d
 8001920:	08001c2d 	.word	0x08001c2d
 8001924:	08001c2d 	.word	0x08001c2d
 8001928:	08001c2d 	.word	0x08001c2d
 800192c:	08001c2d 	.word	0x08001c2d
 8001930:	08001c2d 	.word	0x08001c2d
 8001934:	08001c2d 	.word	0x08001c2d
 8001938:	08001c2d 	.word	0x08001c2d
 800193c:	08001c2d 	.word	0x08001c2d
 8001940:	08001c2d 	.word	0x08001c2d
 8001944:	08001c2d 	.word	0x08001c2d
 8001948:	08001c2d 	.word	0x08001c2d
 800194c:	08001c2d 	.word	0x08001c2d
 8001950:	08001c2d 	.word	0x08001c2d
 8001954:	08001c2d 	.word	0x08001c2d
 8001958:	08001c2d 	.word	0x08001c2d
 800195c:	08001c2d 	.word	0x08001c2d
 8001960:	08001c2d 	.word	0x08001c2d
 8001964:	08001c2d 	.word	0x08001c2d
 8001968:	08001c2d 	.word	0x08001c2d
 800196c:	08001c2d 	.word	0x08001c2d
 8001970:	08001c2d 	.word	0x08001c2d
 8001974:	08001c2d 	.word	0x08001c2d
 8001978:	08001c2d 	.word	0x08001c2d
 800197c:	08001c2d 	.word	0x08001c2d
 8001980:	08001c2d 	.word	0x08001c2d
 8001984:	08001c2d 	.word	0x08001c2d
 8001988:	08001c2d 	.word	0x08001c2d
 800198c:	08001c2d 	.word	0x08001c2d
 8001990:	08001c1d 	.word	0x08001c1d
 8001994:	08001c2d 	.word	0x08001c2d
 8001998:	08001c2d 	.word	0x08001c2d
 800199c:	08001c2d 	.word	0x08001c2d
 80019a0:	08001c2d 	.word	0x08001c2d
 80019a4:	08001c2d 	.word	0x08001c2d
 80019a8:	08001c2d 	.word	0x08001c2d
 80019ac:	08001c2d 	.word	0x08001c2d
 80019b0:	08001c2d 	.word	0x08001c2d
 80019b4:	08001c2d 	.word	0x08001c2d
 80019b8:	08001c2d 	.word	0x08001c2d
 80019bc:	08001c2d 	.word	0x08001c2d
 80019c0:	08001c2d 	.word	0x08001c2d
 80019c4:	08001c25 	.word	0x08001c25
 80019c8:	08001c2d 	.word	0x08001c2d
 80019cc:	08001c2d 	.word	0x08001c2d
 80019d0:	08001afd 	.word	0x08001afd
 80019d4:	08001b05 	.word	0x08001b05
 80019d8:	08001b0d 	.word	0x08001b0d
 80019dc:	08001b15 	.word	0x08001b15
 80019e0:	08001b1d 	.word	0x08001b1d
 80019e4:	08001b25 	.word	0x08001b25
 80019e8:	08001b2d 	.word	0x08001b2d
 80019ec:	08001b35 	.word	0x08001b35
 80019f0:	08001b3d 	.word	0x08001b3d
 80019f4:	08001b45 	.word	0x08001b45
 80019f8:	08001c2d 	.word	0x08001c2d
 80019fc:	08001c2d 	.word	0x08001c2d
 8001a00:	08001c2d 	.word	0x08001c2d
 8001a04:	08001c2d 	.word	0x08001c2d
 8001a08:	08001c2d 	.word	0x08001c2d
 8001a0c:	08001c2d 	.word	0x08001c2d
 8001a10:	08001c2d 	.word	0x08001c2d
 8001a14:	08001b4d 	.word	0x08001b4d
 8001a18:	08001b55 	.word	0x08001b55
 8001a1c:	08001b5d 	.word	0x08001b5d
 8001a20:	08001b65 	.word	0x08001b65
 8001a24:	08001b6d 	.word	0x08001b6d
 8001a28:	08001b75 	.word	0x08001b75
 8001a2c:	08001b7d 	.word	0x08001b7d
 8001a30:	08001b85 	.word	0x08001b85
 8001a34:	08001b8d 	.word	0x08001b8d
 8001a38:	08001b95 	.word	0x08001b95
 8001a3c:	08001b9d 	.word	0x08001b9d
 8001a40:	08001ba5 	.word	0x08001ba5
 8001a44:	08001bad 	.word	0x08001bad
 8001a48:	08001bb5 	.word	0x08001bb5
 8001a4c:	08001bbd 	.word	0x08001bbd
 8001a50:	08001bc5 	.word	0x08001bc5
 8001a54:	08001bcd 	.word	0x08001bcd
 8001a58:	08001bd5 	.word	0x08001bd5
 8001a5c:	08001bdd 	.word	0x08001bdd
 8001a60:	08001be5 	.word	0x08001be5
 8001a64:	08001bed 	.word	0x08001bed
 8001a68:	08001bf5 	.word	0x08001bf5
 8001a6c:	08001bfd 	.word	0x08001bfd
 8001a70:	08001c05 	.word	0x08001c05
 8001a74:	08001c0d 	.word	0x08001c0d
 8001a78:	08001c15 	.word	0x08001c15
 8001a7c:	08001c2d 	.word	0x08001c2d
 8001a80:	08001c2d 	.word	0x08001c2d
 8001a84:	08001c2d 	.word	0x08001c2d
 8001a88:	08001c2d 	.word	0x08001c2d
 8001a8c:	08001c2d 	.word	0x08001c2d
 8001a90:	08001c2d 	.word	0x08001c2d
 8001a94:	08001b4d 	.word	0x08001b4d
 8001a98:	08001b55 	.word	0x08001b55
 8001a9c:	08001b5d 	.word	0x08001b5d
 8001aa0:	08001b65 	.word	0x08001b65
 8001aa4:	08001b6d 	.word	0x08001b6d
 8001aa8:	08001b75 	.word	0x08001b75
 8001aac:	08001b7d 	.word	0x08001b7d
 8001ab0:	08001b85 	.word	0x08001b85
 8001ab4:	08001b8d 	.word	0x08001b8d
 8001ab8:	08001b95 	.word	0x08001b95
 8001abc:	08001b9d 	.word	0x08001b9d
 8001ac0:	08001ba5 	.word	0x08001ba5
 8001ac4:	08001bad 	.word	0x08001bad
 8001ac8:	08001bb5 	.word	0x08001bb5
 8001acc:	08001bbd 	.word	0x08001bbd
 8001ad0:	08001bc5 	.word	0x08001bc5
 8001ad4:	08001bcd 	.word	0x08001bcd
 8001ad8:	08001bd5 	.word	0x08001bd5
 8001adc:	08001bdd 	.word	0x08001bdd
 8001ae0:	08001be5 	.word	0x08001be5
 8001ae4:	08001bed 	.word	0x08001bed
 8001ae8:	08001bf5 	.word	0x08001bf5
 8001aec:	08001bfd 	.word	0x08001bfd
 8001af0:	08001c05 	.word	0x08001c05
 8001af4:	08001c0d 	.word	0x08001c0d
 8001af8:	08001c15 	.word	0x08001c15
        	case '\0':
        		return;
            case '0':
                setSegments(0x3F);
 8001afc:	203f      	movs	r0, #63	@ 0x3f
 8001afe:	f7ff fe29 	bl	8001754 <setSegments>
                break;
 8001b02:	e097      	b.n	8001c34 <Segment_Display+0x36c>
            case '1':
                setSegments(0x06);
 8001b04:	2006      	movs	r0, #6
 8001b06:	f7ff fe25 	bl	8001754 <setSegments>
                break;
 8001b0a:	e093      	b.n	8001c34 <Segment_Display+0x36c>
            case '2':
                setSegments(0x5B);
 8001b0c:	205b      	movs	r0, #91	@ 0x5b
 8001b0e:	f7ff fe21 	bl	8001754 <setSegments>
                break;
 8001b12:	e08f      	b.n	8001c34 <Segment_Display+0x36c>
            case '3':
                setSegments(0x4F);
 8001b14:	204f      	movs	r0, #79	@ 0x4f
 8001b16:	f7ff fe1d 	bl	8001754 <setSegments>
                break;
 8001b1a:	e08b      	b.n	8001c34 <Segment_Display+0x36c>
            case '4':
                setSegments(0x66);
 8001b1c:	2066      	movs	r0, #102	@ 0x66
 8001b1e:	f7ff fe19 	bl	8001754 <setSegments>
                break;
 8001b22:	e087      	b.n	8001c34 <Segment_Display+0x36c>
            case '5':
                setSegments(0x6D);
 8001b24:	206d      	movs	r0, #109	@ 0x6d
 8001b26:	f7ff fe15 	bl	8001754 <setSegments>
                break;
 8001b2a:	e083      	b.n	8001c34 <Segment_Display+0x36c>
            case '6':
                setSegments(0x7D);
 8001b2c:	207d      	movs	r0, #125	@ 0x7d
 8001b2e:	f7ff fe11 	bl	8001754 <setSegments>
                break;
 8001b32:	e07f      	b.n	8001c34 <Segment_Display+0x36c>
            case '7':
                setSegments(0x07);
 8001b34:	2007      	movs	r0, #7
 8001b36:	f7ff fe0d 	bl	8001754 <setSegments>
                break;
 8001b3a:	e07b      	b.n	8001c34 <Segment_Display+0x36c>
            case '8':
                setSegments(0x7F);
 8001b3c:	207f      	movs	r0, #127	@ 0x7f
 8001b3e:	f7ff fe09 	bl	8001754 <setSegments>
                break;
 8001b42:	e077      	b.n	8001c34 <Segment_Display+0x36c>
            case '9':
                setSegments(0x6F);
 8001b44:	206f      	movs	r0, #111	@ 0x6f
 8001b46:	f7ff fe05 	bl	8001754 <setSegments>
                break;
 8001b4a:	e073      	b.n	8001c34 <Segment_Display+0x36c>
            case 'a':
            case 'A':
                setSegments(0x77);
 8001b4c:	2077      	movs	r0, #119	@ 0x77
 8001b4e:	f7ff fe01 	bl	8001754 <setSegments>
                break;
 8001b52:	e06f      	b.n	8001c34 <Segment_Display+0x36c>
            case 'b':
            case 'B':
                setSegments(0x7C);
 8001b54:	207c      	movs	r0, #124	@ 0x7c
 8001b56:	f7ff fdfd 	bl	8001754 <setSegments>
                break;
 8001b5a:	e06b      	b.n	8001c34 <Segment_Display+0x36c>
            case 'c':
            case 'C':
                setSegments(0x39);
 8001b5c:	2039      	movs	r0, #57	@ 0x39
 8001b5e:	f7ff fdf9 	bl	8001754 <setSegments>
                break;
 8001b62:	e067      	b.n	8001c34 <Segment_Display+0x36c>
            case 'd':
            case 'D':
                setSegments(0x5E);
 8001b64:	205e      	movs	r0, #94	@ 0x5e
 8001b66:	f7ff fdf5 	bl	8001754 <setSegments>
                break;
 8001b6a:	e063      	b.n	8001c34 <Segment_Display+0x36c>
            case 'e':
            case 'E':
                setSegments(0x79);
 8001b6c:	2079      	movs	r0, #121	@ 0x79
 8001b6e:	f7ff fdf1 	bl	8001754 <setSegments>
                break;
 8001b72:	e05f      	b.n	8001c34 <Segment_Display+0x36c>
            case 'f':
            case 'F':
                setSegments(0x71);
 8001b74:	2071      	movs	r0, #113	@ 0x71
 8001b76:	f7ff fded 	bl	8001754 <setSegments>
                break;
 8001b7a:	e05b      	b.n	8001c34 <Segment_Display+0x36c>
            case 'g':
            case 'G':
                setSegments(0x3D);
 8001b7c:	203d      	movs	r0, #61	@ 0x3d
 8001b7e:	f7ff fde9 	bl	8001754 <setSegments>
                break;
 8001b82:	e057      	b.n	8001c34 <Segment_Display+0x36c>
            case 'h':
            case 'H':
                setSegments(0x76);
 8001b84:	2076      	movs	r0, #118	@ 0x76
 8001b86:	f7ff fde5 	bl	8001754 <setSegments>
                break;
 8001b8a:	e053      	b.n	8001c34 <Segment_Display+0x36c>
            case 'i':
            case 'I':
                setSegments(0x30);
 8001b8c:	2030      	movs	r0, #48	@ 0x30
 8001b8e:	f7ff fde1 	bl	8001754 <setSegments>
                break;
 8001b92:	e04f      	b.n	8001c34 <Segment_Display+0x36c>
            case 'j':
            case 'J':
                setSegments(0x1E);
 8001b94:	201e      	movs	r0, #30
 8001b96:	f7ff fddd 	bl	8001754 <setSegments>
                break;
 8001b9a:	e04b      	b.n	8001c34 <Segment_Display+0x36c>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 8001b9c:	2076      	movs	r0, #118	@ 0x76
 8001b9e:	f7ff fdd9 	bl	8001754 <setSegments>
                break;
 8001ba2:	e047      	b.n	8001c34 <Segment_Display+0x36c>
            case 'l':
            case 'L':
                setSegments(0x38);
 8001ba4:	2038      	movs	r0, #56	@ 0x38
 8001ba6:	f7ff fdd5 	bl	8001754 <setSegments>
                break;
 8001baa:	e043      	b.n	8001c34 <Segment_Display+0x36c>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 8001bac:	2037      	movs	r0, #55	@ 0x37
 8001bae:	f7ff fdd1 	bl	8001754 <setSegments>
                break;
 8001bb2:	e03f      	b.n	8001c34 <Segment_Display+0x36c>
            case 'n':
            case 'N':
                setSegments(0x54);
 8001bb4:	2054      	movs	r0, #84	@ 0x54
 8001bb6:	f7ff fdcd 	bl	8001754 <setSegments>
                break;
 8001bba:	e03b      	b.n	8001c34 <Segment_Display+0x36c>
            case 'o':
            case 'O':
                setSegments(0x3F);
 8001bbc:	203f      	movs	r0, #63	@ 0x3f
 8001bbe:	f7ff fdc9 	bl	8001754 <setSegments>
                break;
 8001bc2:	e037      	b.n	8001c34 <Segment_Display+0x36c>
            case 'p':
            case 'P':
                setSegments(0x73);
 8001bc4:	2073      	movs	r0, #115	@ 0x73
 8001bc6:	f7ff fdc5 	bl	8001754 <setSegments>
                break;
 8001bca:	e033      	b.n	8001c34 <Segment_Display+0x36c>
            case 'q':
            case 'Q':
                setSegments(0x67);
 8001bcc:	2067      	movs	r0, #103	@ 0x67
 8001bce:	f7ff fdc1 	bl	8001754 <setSegments>
                break;
 8001bd2:	e02f      	b.n	8001c34 <Segment_Display+0x36c>
            case 'r':
            case 'R':
                setSegments(0x50);
 8001bd4:	2050      	movs	r0, #80	@ 0x50
 8001bd6:	f7ff fdbd 	bl	8001754 <setSegments>
                break;
 8001bda:	e02b      	b.n	8001c34 <Segment_Display+0x36c>
            case 's':
            case 'S':
                setSegments(0x6D);
 8001bdc:	206d      	movs	r0, #109	@ 0x6d
 8001bde:	f7ff fdb9 	bl	8001754 <setSegments>
                break;
 8001be2:	e027      	b.n	8001c34 <Segment_Display+0x36c>
            case 't':
            case 'T':
                setSegments(0x78);
 8001be4:	2078      	movs	r0, #120	@ 0x78
 8001be6:	f7ff fdb5 	bl	8001754 <setSegments>
                break;
 8001bea:	e023      	b.n	8001c34 <Segment_Display+0x36c>
            case 'u':
            case 'U':
                setSegments(0x3E);
 8001bec:	203e      	movs	r0, #62	@ 0x3e
 8001bee:	f7ff fdb1 	bl	8001754 <setSegments>
                break;
 8001bf2:	e01f      	b.n	8001c34 <Segment_Display+0x36c>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8001bf4:	203e      	movs	r0, #62	@ 0x3e
 8001bf6:	f7ff fdad 	bl	8001754 <setSegments>
                break;
 8001bfa:	e01b      	b.n	8001c34 <Segment_Display+0x36c>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 8001bfc:	202a      	movs	r0, #42	@ 0x2a
 8001bfe:	f7ff fda9 	bl	8001754 <setSegments>
                break;
 8001c02:	e017      	b.n	8001c34 <Segment_Display+0x36c>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8001c04:	2076      	movs	r0, #118	@ 0x76
 8001c06:	f7ff fda5 	bl	8001754 <setSegments>
                break;
 8001c0a:	e013      	b.n	8001c34 <Segment_Display+0x36c>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 8001c0c:	206e      	movs	r0, #110	@ 0x6e
 8001c0e:	f7ff fda1 	bl	8001754 <setSegments>
                break;
 8001c12:	e00f      	b.n	8001c34 <Segment_Display+0x36c>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8001c14:	205b      	movs	r0, #91	@ 0x5b
 8001c16:	f7ff fd9d 	bl	8001754 <setSegments>
                break;
 8001c1a:	e00b      	b.n	8001c34 <Segment_Display+0x36c>
            case ' ':
                // Blank character
                setSegments(0x00);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff fd99 	bl	8001754 <setSegments>
                break;
 8001c22:	e007      	b.n	8001c34 <Segment_Display+0x36c>
            case '-':
            	setSegments(0x04);
 8001c24:	2004      	movs	r0, #4
 8001c26:	f7ff fd95 	bl	8001754 <setSegments>
            	break;
 8001c2a:	e003      	b.n	8001c34 <Segment_Display+0x36c>
            default:
            	setSegments(0x00);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fd91 	bl	8001754 <setSegments>
                break;
 8001c32:	bf00      	nop
        }
        HAL_Delay(5);
 8001c34:	2005      	movs	r0, #5
 8001c36:	f000 f87f 	bl	8001d38 <HAL_Delay>
    for(uint8_t i = 0; i < 4; i++) {
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	f67f ae50 	bls.w	80018e8 <Segment_Display+0x20>
 8001c48:	e000      	b.n	8001c4c <Segment_Display+0x384>
        		return;
 8001c4a:	bf00      	nop
    }
}
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f94f 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff faca 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f967 	bl	8001f8a <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 f92f 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	20000014 	.word	0x20000014
 8001cf4:	20000010 	.word	0x20000010

08001cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000014 	.word	0x20000014
 8001d1c:	20000250 	.word	0x20000250

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000250 	.word	0x20000250

08001d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff ffee 	bl	8001d20 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d005      	beq.n	8001d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_Delay+0x44>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5e:	bf00      	nop
 8001d60:	f7ff ffde 	bl	8001d20 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <HAL_Delay+0x28>
  {
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000014 	.word	0x20000014

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4907      	ldr	r1, [pc, #28]	@ (8001e1c <__NVIC_EnableIRQ+0x38>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	@ (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	@ (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f7ff ff8e 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff29 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff3e 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff8e 	bl	8001e74 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5d 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff31 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa2 	bl	8001edc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff feb6 	bl	8001d20 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e099      	b.n	80020f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	e00f      	b.n	8002002 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe2:	f7ff fe9d 	bl	8001d20 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d908      	bls.n	8002002 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e078      	b.n	80020f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e8      	bne.n	8001fe2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4b38      	ldr	r3, [pc, #224]	@ (80020fc <HAL_DMA_Init+0x158>)
 800201c:	4013      	ands	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	2b04      	cmp	r3, #4
 800205a:	d107      	bne.n	800206c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4313      	orrs	r3, r2
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f023 0307 	bic.w	r3, r3, #7
 8002082:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	2b04      	cmp	r3, #4
 8002094:	d117      	bne.n	80020c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fa91 	bl	80025d0 <DMA_CheckFifoParam>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2240      	movs	r2, #64	@ 0x40
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020c2:	2301      	movs	r3, #1
 80020c4:	e016      	b.n	80020f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fa48 	bl	8002564 <DMA_CalcBaseAndBitshift>
 80020d4:	4603      	mov	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	223f      	movs	r2, #63	@ 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	f010803f 	.word	0xf010803f

08002100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_DMA_Start_IT+0x26>
 8002122:	2302      	movs	r3, #2
 8002124:	e040      	b.n	80021a8 <HAL_DMA_Start_IT+0xa8>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d12f      	bne.n	800219a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f9da 	bl	8002508 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	223f      	movs	r2, #63	@ 0x3f
 800215a:	409a      	lsls	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0216 	orr.w	r2, r2, #22
 800216e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e005      	b.n	80021a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021a2:	2302      	movs	r3, #2
 80021a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d004      	beq.n	80021ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2280      	movs	r2, #128	@ 0x80
 80021c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00c      	b.n	80021e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2205      	movs	r2, #5
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002200:	4b8e      	ldr	r3, [pc, #568]	@ (800243c <HAL_DMA_IRQHandler+0x248>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a8e      	ldr	r2, [pc, #568]	@ (8002440 <HAL_DMA_IRQHandler+0x24c>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	2208      	movs	r2, #8
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01a      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224c:	2208      	movs	r2, #8
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	2201      	movs	r2, #1
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002282:	2201      	movs	r2, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229a:	2204      	movs	r2, #4
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	2204      	movs	r2, #4
 80022ba:	409a      	lsls	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d0:	2210      	movs	r2, #16
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d043      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d03c      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	2210      	movs	r2, #16
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d024      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e01f      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
 8002334:	e016      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0208 	bic.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002368:	2220      	movs	r2, #32
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 808f 	beq.w	8002494 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8087 	beq.w	8002494 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238a:	2220      	movs	r2, #32
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b05      	cmp	r3, #5
 800239c:	d136      	bne.n	800240c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0216 	bic.w	r2, r2, #22
 80023ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_DMA_IRQHandler+0x1da>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0208 	bic.w	r2, r2, #8
 80023dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	223f      	movs	r2, #63	@ 0x3f
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d07e      	beq.n	8002500 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
        }
        return;
 800240a:	e079      	b.n	8002500 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01d      	beq.n	8002456 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242c:	2b00      	cmp	r3, #0
 800242e:	d031      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e02c      	b.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
 800243a:	bf00      	nop
 800243c:	2000000c 	.word	0x2000000c
 8002440:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
 8002454:	e01e      	b.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d032      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d022      	beq.n	80024ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2205      	movs	r2, #5
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d307      	bcc.n	80024dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f2      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x2cc>
 80024da:	e000      	b.n	80024de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
 80024fe:	e000      	b.n	8002502 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002500:	bf00      	nop
    }
  }
}
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002524:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b40      	cmp	r3, #64	@ 0x40
 8002534:	d108      	bne.n	8002548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002546:	e007      	b.n	8002558 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	60da      	str	r2, [r3, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3b10      	subs	r3, #16
 8002574:	4a14      	ldr	r2, [pc, #80]	@ (80025c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800257e:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <DMA_CalcBaseAndBitshift+0x68>)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d909      	bls.n	80025a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80025a4:	e007      	b.n	80025b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	aaaaaaab 	.word	0xaaaaaaab
 80025cc:	08006a78 	.word	0x08006a78

080025d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11f      	bne.n	800262a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d856      	bhi.n	800269e <DMA_CheckFifoParam+0xce>
 80025f0:	a201      	add	r2, pc, #4	@ (adr r2, 80025f8 <DMA_CheckFifoParam+0x28>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	08002609 	.word	0x08002609
 80025fc:	0800261b 	.word	0x0800261b
 8002600:	08002609 	.word	0x08002609
 8002604:	0800269f 	.word	0x0800269f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d046      	beq.n	80026a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002618:	e043      	b.n	80026a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002622:	d140      	bne.n	80026a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002628:	e03d      	b.n	80026a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002632:	d121      	bne.n	8002678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d837      	bhi.n	80026aa <DMA_CheckFifoParam+0xda>
 800263a:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <DMA_CheckFifoParam+0x70>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	08002651 	.word	0x08002651
 8002644:	08002657 	.word	0x08002657
 8002648:	08002651 	.word	0x08002651
 800264c:	08002669 	.word	0x08002669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
      break;
 8002654:	e030      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d025      	beq.n	80026ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e022      	b.n	80026ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002670:	d11f      	bne.n	80026b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002676:	e01c      	b.n	80026b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d903      	bls.n	8002686 <DMA_CheckFifoParam+0xb6>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d003      	beq.n	800268c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002684:	e018      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      break;
 800268a:	e015      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e00b      	b.n	80026b6 <DMA_CheckFifoParam+0xe6>
      break;
 800269e:	bf00      	nop
 80026a0:	e00a      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026a2:	bf00      	nop
 80026a4:	e008      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026a6:	bf00      	nop
 80026a8:	e006      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e004      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e002      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026b2:	bf00      	nop
 80026b4:	e000      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
    }
  } 
  
  return status; 
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e159      	b.n	8002998 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8148 	bne.w	8002992 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d005      	beq.n	800271a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	2b02      	cmp	r3, #2
 8002718:	d130      	bne.n	800277c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b03      	cmp	r3, #3
 8002786:	d017      	beq.n	80027b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a2 	beq.w	8002992 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b57      	ldr	r3, [pc, #348]	@ (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	4a56      	ldr	r2, [pc, #344]	@ (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800285c:	6453      	str	r3, [r2, #68]	@ 0x44
 800285e:	4b54      	ldr	r3, [pc, #336]	@ (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286a:	4a52      	ldr	r2, [pc, #328]	@ (80029b4 <HAL_GPIO_Init+0x2ec>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a49      	ldr	r2, [pc, #292]	@ (80029b8 <HAL_GPIO_Init+0x2f0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d019      	beq.n	80028ca <HAL_GPIO_Init+0x202>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a48      	ldr	r2, [pc, #288]	@ (80029bc <HAL_GPIO_Init+0x2f4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_GPIO_Init+0x1fe>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a47      	ldr	r2, [pc, #284]	@ (80029c0 <HAL_GPIO_Init+0x2f8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00d      	beq.n	80028c2 <HAL_GPIO_Init+0x1fa>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a46      	ldr	r2, [pc, #280]	@ (80029c4 <HAL_GPIO_Init+0x2fc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x1f6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a45      	ldr	r2, [pc, #276]	@ (80029c8 <HAL_GPIO_Init+0x300>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_GPIO_Init+0x1f2>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028ba:	2307      	movs	r3, #7
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028ca:	2300      	movs	r3, #0
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028dc:	4935      	ldr	r1, [pc, #212]	@ (80029b4 <HAL_GPIO_Init+0x2ec>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ea:	4b38      	ldr	r3, [pc, #224]	@ (80029cc <HAL_GPIO_Init+0x304>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290e:	4a2f      	ldr	r2, [pc, #188]	@ (80029cc <HAL_GPIO_Init+0x304>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002914:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <HAL_GPIO_Init+0x304>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002938:	4a24      	ldr	r2, [pc, #144]	@ (80029cc <HAL_GPIO_Init+0x304>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800293e:	4b23      	ldr	r3, [pc, #140]	@ (80029cc <HAL_GPIO_Init+0x304>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002962:	4a1a      	ldr	r2, [pc, #104]	@ (80029cc <HAL_GPIO_Init+0x304>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_GPIO_Init+0x304>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298c:	4a0f      	ldr	r2, [pc, #60]	@ (80029cc <HAL_GPIO_Init+0x304>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	f67f aea2 	bls.w	80026e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e001      	b.n	80029f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a1c:	e003      	b.n	8002a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e267      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d075      	beq.n	8002b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a52:	4b88      	ldr	r3, [pc, #544]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b85      	ldr	r3, [pc, #532]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d112      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6a:	4b82      	ldr	r3, [pc, #520]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a76:	d10b      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	4b7e      	ldr	r3, [pc, #504]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05b      	beq.n	8002b3c <HAL_RCC_OscConfig+0x108>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d157      	bne.n	8002b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e242      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a98:	d106      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x74>
 8002a9a:	4b76      	ldr	r3, [pc, #472]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b70      	ldr	r3, [pc, #448]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6f      	ldr	r2, [pc, #444]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6d      	ldr	r3, [pc, #436]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6c      	ldr	r2, [pc, #432]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002acc:	4b69      	ldr	r3, [pc, #420]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b66      	ldr	r3, [pc, #408]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a65      	ldr	r2, [pc, #404]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff f918 	bl	8001d20 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7ff f914 	bl	8001d20 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	@ 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e207      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b5b      	ldr	r3, [pc, #364]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xc0>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff f904 	bl	8001d20 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff f900 	bl	8001d20 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	@ 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1f3      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b51      	ldr	r3, [pc, #324]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0xe8>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b44      	ldr	r3, [pc, #272]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b41      	ldr	r3, [pc, #260]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c7      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b3b      	ldr	r3, [pc, #236]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4937      	ldr	r1, [pc, #220]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b34      	ldr	r3, [pc, #208]	@ (8002c78 <HAL_RCC_OscConfig+0x244>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7ff f8b9 	bl	8001d20 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7ff f8b5 	bl	8001d20 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a8      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b28      	ldr	r3, [pc, #160]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4925      	ldr	r1, [pc, #148]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_OscConfig+0x244>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7ff f898 	bl	8001d20 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7ff f894 	bl	8001d20 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e187      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d036      	beq.n	8002c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <HAL_RCC_OscConfig+0x248>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7ff f878 	bl	8001d20 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7ff f874 	bl	8001d20 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e167      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x200>
 8002c52:	e01b      	b.n	8002c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_OscConfig+0x248>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7ff f861 	bl	8001d20 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e00e      	b.n	8002c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c62:	f7ff f85d 	bl	8001d20 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d907      	bls.n	8002c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e150      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470000 	.word	0x42470000
 8002c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b88      	ldr	r3, [pc, #544]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ea      	bne.n	8002c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8097 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b81      	ldr	r3, [pc, #516]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b7d      	ldr	r3, [pc, #500]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cba:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b77      	ldr	r3, [pc, #476]	@ (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd6:	4b74      	ldr	r3, [pc, #464]	@ (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a73      	ldr	r2, [pc, #460]	@ (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f81d 	bl	8001d20 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7ff f819 	bl	8001d20 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e10c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2ea>
 8002d10:	4b64      	ldr	r3, [pc, #400]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	4a63      	ldr	r2, [pc, #396]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCC_OscConfig+0x324>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x30c>
 8002d26:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d32:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0x324>
 8002d40:	4b58      	ldr	r3, [pc, #352]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	4a57      	ldr	r2, [pc, #348]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d50:	4a54      	ldr	r2, [pc, #336]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d015      	beq.n	8002d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe ffde 	bl	8001d20 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe ffda 	bl	8001d20 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0cb      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0ee      	beq.n	8002d68 <HAL_RCC_OscConfig+0x334>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe ffc8 	bl	8001d20 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe ffc4 	bl	8001d20 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0b5      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002daa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ee      	bne.n	8002d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4b39      	ldr	r3, [pc, #228]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	4a38      	ldr	r2, [pc, #224]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a1 	beq.w	8002f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd2:	4b34      	ldr	r3, [pc, #208]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d05c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d141      	bne.n	8002e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_RCC_OscConfig+0x478>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe ff98 	bl	8001d20 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe ff94 	bl	8001d20 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e087      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	491b      	ldr	r1, [pc, #108]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_RCC_OscConfig+0x478>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe ff6d 	bl	8001d20 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe ff69 	bl	8001d20 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e05c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x416>
 8002e68:	e054      	b.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <HAL_RCC_OscConfig+0x478>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe ff56 	bl	8001d20 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe ff52 	bl	8001d20 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e045      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x444>
 8002e96:	e03d      	b.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e038      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d028      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d121      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d111      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0cc      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b68      	ldr	r3, [pc, #416]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d90c      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b65      	ldr	r3, [pc, #404]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d044      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d119      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e067      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b37      	ldr	r3, [pc, #220]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4934      	ldr	r1, [pc, #208]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7fe fe84 	bl	8001d20 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fe fe80 	bl	8001d20 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e04f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d20c      	bcs.n	800306c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fde4 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08006a68 	.word	0x08006a68
 80030e8:	2000000c 	.word	0x2000000c
 80030ec:	20000010 	.word	0x20000010

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b090      	sub	sp, #64	@ 0x40
 80030f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80030fc:	2300      	movs	r3, #0
 80030fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003108:	4b59      	ldr	r3, [pc, #356]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x180>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d00d      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 8003114:	2b08      	cmp	r3, #8
 8003116:	f200 80a1 	bhi.w	800325c <HAL_RCC_GetSysClockFreq+0x16c>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x34>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x3a>
 8003122:	e09b      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x184>)
 8003126:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003128:	e09b      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312a:	4b53      	ldr	r3, [pc, #332]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x188>)
 800312c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800312e:	e098      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003130:	4b4f      	ldr	r3, [pc, #316]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x180>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003138:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313a:	4b4d      	ldr	r3, [pc, #308]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x180>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d028      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x180>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	2200      	movs	r2, #0
 800314e:	623b      	str	r3, [r7, #32]
 8003150:	627a      	str	r2, [r7, #36]	@ 0x24
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003158:	2100      	movs	r1, #0
 800315a:	4b47      	ldr	r3, [pc, #284]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x188>)
 800315c:	fb03 f201 	mul.w	r2, r3, r1
 8003160:	2300      	movs	r3, #0
 8003162:	fb00 f303 	mul.w	r3, r0, r3
 8003166:	4413      	add	r3, r2
 8003168:	4a43      	ldr	r2, [pc, #268]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x188>)
 800316a:	fba0 1202 	umull	r1, r2, r0, r2
 800316e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003170:	460a      	mov	r2, r1
 8003172:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003176:	4413      	add	r3, r2
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317c:	2200      	movs	r2, #0
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	61fa      	str	r2, [r7, #28]
 8003182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003186:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800318a:	f7fd f879 	bl	8000280 <__aeabi_uldivmod>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4613      	mov	r3, r2
 8003194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003196:	e053      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003198:	4b35      	ldr	r3, [pc, #212]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x180>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	2200      	movs	r2, #0
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	617a      	str	r2, [r7, #20]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031aa:	f04f 0b00 	mov.w	fp, #0
 80031ae:	4652      	mov	r2, sl
 80031b0:	465b      	mov	r3, fp
 80031b2:	f04f 0000 	mov.w	r0, #0
 80031b6:	f04f 0100 	mov.w	r1, #0
 80031ba:	0159      	lsls	r1, r3, #5
 80031bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c0:	0150      	lsls	r0, r2, #5
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	ebb2 080a 	subs.w	r8, r2, sl
 80031ca:	eb63 090b 	sbc.w	r9, r3, fp
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031e2:	ebb2 0408 	subs.w	r4, r2, r8
 80031e6:	eb63 0509 	sbc.w	r5, r3, r9
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	00eb      	lsls	r3, r5, #3
 80031f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f8:	00e2      	lsls	r2, r4, #3
 80031fa:	4614      	mov	r4, r2
 80031fc:	461d      	mov	r5, r3
 80031fe:	eb14 030a 	adds.w	r3, r4, sl
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	eb45 030b 	adc.w	r3, r5, fp
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003216:	4629      	mov	r1, r5
 8003218:	028b      	lsls	r3, r1, #10
 800321a:	4621      	mov	r1, r4
 800321c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003220:	4621      	mov	r1, r4
 8003222:	028a      	lsls	r2, r1, #10
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322a:	2200      	movs	r2, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	60fa      	str	r2, [r7, #12]
 8003230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003234:	f7fd f824 	bl	8000280 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4613      	mov	r3, r2
 800323e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003240:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x180>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	3301      	adds	r3, #1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003250:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800325a:	e002      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x184>)
 800325e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003264:	4618      	mov	r0, r3
 8003266:	3740      	adds	r7, #64	@ 0x40
 8003268:	46bd      	mov	sp, r7
 800326a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	00f42400 	.word	0x00f42400
 8003278:	016e3600 	.word	0x016e3600

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d038      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032a4:	4b68      	ldr	r3, [pc, #416]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032aa:	f7fe fd39 	bl	8001d20 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032b2:	f7fe fd35 	bl	8001d20 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0bd      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032c4:	4b61      	ldr	r3, [pc, #388]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	071b      	lsls	r3, r3, #28
 80032e2:	495a      	ldr	r1, [pc, #360]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032ea:	4b57      	ldr	r3, [pc, #348]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032f0:	f7fe fd16 	bl	8001d20 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032f8:	f7fe fd12 	bl	8001d20 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e09a      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800330a:	4b50      	ldr	r3, [pc, #320]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8083 	beq.w	800342a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b48      	ldr	r3, [pc, #288]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	4a47      	ldr	r2, [pc, #284]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003332:	6413      	str	r3, [r2, #64]	@ 0x40
 8003334:	4b45      	ldr	r3, [pc, #276]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003340:	4b43      	ldr	r3, [pc, #268]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a42      	ldr	r2, [pc, #264]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800334c:	f7fe fce8 	bl	8001d20 <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7fe fce4 	bl	8001d20 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e06c      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003366:	4b3a      	ldr	r3, [pc, #232]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003372:	4b36      	ldr	r3, [pc, #216]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d02f      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	429a      	cmp	r2, r3
 800338e:	d028      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003390:	4b2e      	ldr	r3, [pc, #184]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003398:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339a:	4b2e      	ldr	r3, [pc, #184]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033a6:	4a29      	ldr	r2, [pc, #164]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033ac:	4b27      	ldr	r3, [pc, #156]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d114      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe fcb2 	bl	8001d20 <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe fcae 	bl	8001d20 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e034      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ee      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ee:	d10d      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x190>
 80033f0:	4b16      	ldr	r3, [pc, #88]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003404:	4911      	ldr	r1, [pc, #68]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
 800340a:	e005      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800340c:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a0e      	ldr	r2, [pc, #56]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003416:	6093      	str	r3, [r2, #8]
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	4909      	ldr	r1, [pc, #36]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	4313      	orrs	r3, r2
 8003428:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7d1a      	ldrb	r2, [r3, #20]
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800343c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	42470068 	.word	0x42470068
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000
 8003454:	42470e40 	.word	0x42470e40
 8003458:	424711e0 	.word	0x424711e0

0800345c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e073      	b.n	800355a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7f5b      	ldrb	r3, [r3, #29]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd ff16 	bl	80012b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d055      	beq.n	8003548 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	22ca      	movs	r2, #202	@ 0xca
 80034a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2253      	movs	r2, #83	@ 0x53
 80034aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fa49 	bl	8003944 <RTC_EnterInitMode>
 80034b2:	4603      	mov	r3, r0
 80034b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d12c      	bne.n	8003516 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80034ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6919      	ldr	r1, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	041a      	lsls	r2, r3, #16
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fa50 	bl	80039b2 <RTC_ExitInitMode>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d110      	bne.n	800353e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800352a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	22ff      	movs	r2, #255	@ 0xff
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24
 8003546:	e001      	b.n	800354c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003562:	b590      	push	{r4, r7, lr}
 8003564:	b087      	sub	sp, #28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	7f1b      	ldrb	r3, [r3, #28]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_RTC_SetTime+0x1c>
 800357a:	2302      	movs	r3, #2
 800357c:	e087      	b.n	800368e <HAL_RTC_SetTime+0x12c>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2202      	movs	r2, #2
 8003588:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d126      	bne.n	80035de <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fa27 	bl	80039fc <RTC_ByteToBcd2>
 80035ae:	4603      	mov	r3, r0
 80035b0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fa20 	bl	80039fc <RTC_ByteToBcd2>
 80035bc:	4603      	mov	r3, r0
 80035be:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035c0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	789b      	ldrb	r3, [r3, #2]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fa18 	bl	80039fc <RTC_ByteToBcd2>
 80035cc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035ce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	78db      	ldrb	r3, [r3, #3]
 80035d6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e018      	b.n	8003610 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2200      	movs	r2, #0
 80035f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035fe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003604:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	78db      	ldrb	r3, [r3, #3]
 800360a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	22ca      	movs	r2, #202	@ 0xca
 8003616:	625a      	str	r2, [r3, #36]	@ 0x24
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2253      	movs	r2, #83	@ 0x53
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f98f 	bl	8003944 <RTC_EnterInitMode>
 8003626:	4603      	mov	r3, r0
 8003628:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d120      	bne.n	8003672 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800363a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800363e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800364e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f9a2 	bl	80039b2 <RTC_ExitInitMode>
 800366e:	4603      	mov	r3, r0
 8003670:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	22ff      	movs	r2, #255	@ 0xff
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]

  return status;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
}
 800368e:	4618      	mov	r0, r3
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}

08003696 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80036c8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80036cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	0d9b      	lsrs	r3, r3, #22
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	b2da      	uxtb	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11a      	bne.n	8003748 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f98e 	bl	8003a38 <RTC_Bcd2ToByte>
 800371c:	4603      	mov	r3, r0
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	785b      	ldrb	r3, [r3, #1]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f985 	bl	8003a38 <RTC_Bcd2ToByte>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	789b      	ldrb	r3, [r3, #2]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f97c 	bl	8003a38 <RTC_Bcd2ToByte>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003752:	b590      	push	{r4, r7, lr}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	7f1b      	ldrb	r3, [r3, #28]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_RTC_SetDate+0x1c>
 800376a:	2302      	movs	r3, #2
 800376c:	e071      	b.n	8003852 <HAL_RTC_SetDate+0x100>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2202      	movs	r2, #2
 8003778:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10e      	bne.n	800379e <HAL_RTC_SetDate+0x4c>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	f023 0310 	bic.w	r3, r3, #16
 8003794:	b2db      	uxtb	r3, r3
 8003796:	330a      	adds	r3, #10
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11c      	bne.n	80037de <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	78db      	ldrb	r3, [r3, #3]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f927 	bl	80039fc <RTC_ByteToBcd2>
 80037ae:	4603      	mov	r3, r0
 80037b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f920 	bl	80039fc <RTC_ByteToBcd2>
 80037bc:	4603      	mov	r3, r0
 80037be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	789b      	ldrb	r3, [r3, #2]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f918 	bl	80039fc <RTC_ByteToBcd2>
 80037cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80037ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e00e      	b.n	80037fc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	78db      	ldrb	r3, [r3, #3]
 80037e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037ea:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80037f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	22ca      	movs	r2, #202	@ 0xca
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2253      	movs	r2, #83	@ 0x53
 800380a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f899 	bl	8003944 <RTC_EnterInitMode>
 8003812:	4603      	mov	r3, r0
 8003814:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10c      	bne.n	8003836 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003826:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800382a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f8c0 	bl	80039b2 <RTC_ExitInitMode>
 8003832:	4603      	mov	r3, r0
 8003834:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	22ff      	movs	r2, #255	@ 0xff
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]

  return status;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
}
 8003852:	4618      	mov	r0, r3
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}

0800385a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003874:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003878:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	b2da      	uxtb	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	0b5b      	lsrs	r3, r3, #13
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11a      	bne.n	80038ee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	78db      	ldrb	r3, [r3, #3]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f8bb 	bl	8003a38 <RTC_Bcd2ToByte>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f8b2 	bl	8003a38 <RTC_Bcd2ToByte>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	789b      	ldrb	r3, [r3, #2]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 f8a9 	bl	8003a38 <RTC_Bcd2ToByte>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0d      	ldr	r2, [pc, #52]	@ (8003940 <HAL_RTC_WaitForSynchro+0x48>)
 800390a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800390c:	f7fe fa08 	bl	8001d20 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003912:	e009      	b.n	8003928 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003914:	f7fe fa04 	bl	8001d20 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003922:	d901      	bls.n	8003928 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e007      	b.n	8003938 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ee      	beq.n	8003914 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	00013f5f 	.word	0x00013f5f

08003944 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d122      	bne.n	80039a8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003970:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003972:	f7fe f9d5 	bl	8001d20 <HAL_GetTick>
 8003976:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003978:	e00c      	b.n	8003994 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800397a:	f7fe f9d1 	bl	8001d20 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003988:	d904      	bls.n	8003994 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2204      	movs	r2, #4
 800398e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <RTC_EnterInitMode+0x64>
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d1e8      	bne.n	800397a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039cc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff8b 	bl	80038f8 <HAL_RTC_WaitForSynchro>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2204      	movs	r2, #4
 80039ec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003a0a:	e005      	b.n	8003a18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	3b0a      	subs	r3, #10
 8003a16:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	2b09      	cmp	r3, #9
 8003a1c:	d8f6      	bhi.n	8003a0c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	b2db      	uxtb	r3, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	b2db      	uxtb	r3, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e041      	b.n	8003b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd fc36 	bl	800130c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f000 ffb6 	bl	8004a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e041      	b.n	8003ba8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f839 	bl	8003bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f000 ff67 	bl	8004a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e022      	b.n	8003c36 <HAL_TIM_PWM_Start_DMA+0x72>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d109      	bne.n	8003c0a <HAL_TIM_PWM_Start_DMA+0x46>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e015      	b.n	8003c36 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d109      	bne.n	8003c24 <HAL_TIM_PWM_Start_DMA+0x60>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e008      	b.n	8003c36 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e15d      	b.n	8003efa <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_TIM_PWM_Start_DMA+0x94>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e022      	b.n	8003c9e <HAL_TIM_PWM_Start_DMA+0xda>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d109      	bne.n	8003c72 <HAL_TIM_PWM_Start_DMA+0xae>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e015      	b.n	8003c9e <HAL_TIM_PWM_Start_DMA+0xda>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d109      	bne.n	8003c8c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e008      	b.n	8003c9e <HAL_TIM_PWM_Start_DMA+0xda>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d024      	beq.n	8003cec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_TIM_PWM_Start_DMA+0xea>
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e123      	b.n	8003efa <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc0:	e016      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd0:	e00e      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce0:	e006      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cea:	e001      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e104      	b.n	8003efa <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	f200 80ae 	bhi.w	8003e54 <HAL_TIM_PWM_Start_DMA+0x290>
 8003cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003e55 	.word	0x08003e55
 8003d08:	08003e55 	.word	0x08003e55
 8003d0c:	08003e55 	.word	0x08003e55
 8003d10:	08003d7d 	.word	0x08003d7d
 8003d14:	08003e55 	.word	0x08003e55
 8003d18:	08003e55 	.word	0x08003e55
 8003d1c:	08003e55 	.word	0x08003e55
 8003d20:	08003dc5 	.word	0x08003dc5
 8003d24:	08003e55 	.word	0x08003e55
 8003d28:	08003e55 	.word	0x08003e55
 8003d2c:	08003e55 	.word	0x08003e55
 8003d30:	08003e0d 	.word	0x08003e0d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	4a72      	ldr	r2, [pc, #456]	@ (8003f04 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	4a71      	ldr	r2, [pc, #452]	@ (8003f08 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003d42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	4a70      	ldr	r2, [pc, #448]	@ (8003f0c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3334      	adds	r3, #52	@ 0x34
 8003d58:	461a      	mov	r2, r3
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	f7fe f9d0 	bl	8002100 <HAL_DMA_Start_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0c7      	b.n	8003efa <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d78:	60da      	str	r2, [r3, #12]
      break;
 8003d7a:	e06e      	b.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	4a60      	ldr	r2, [pc, #384]	@ (8003f04 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003d82:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	4a5f      	ldr	r2, [pc, #380]	@ (8003f08 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	4a5e      	ldr	r2, [pc, #376]	@ (8003f0c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003d92:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3338      	adds	r3, #56	@ 0x38
 8003da0:	461a      	mov	r2, r3
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	f7fe f9ac 	bl	8002100 <HAL_DMA_Start_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0a3      	b.n	8003efa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e04a      	b.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8003f04 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003dca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8003f08 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8003f0c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003dda:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	333c      	adds	r3, #60	@ 0x3c
 8003de8:	461a      	mov	r2, r3
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	f7fe f988 	bl	8002100 <HAL_DMA_Start_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e08:	60da      	str	r2, [r3, #12]
      break;
 8003e0a:	e026      	b.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	4a3c      	ldr	r2, [pc, #240]	@ (8003f04 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003e12:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e18:	4a3b      	ldr	r2, [pc, #236]	@ (8003f08 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	4a3a      	ldr	r2, [pc, #232]	@ (8003f0c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003e22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3340      	adds	r3, #64	@ 0x40
 8003e30:	461a      	mov	r2, r3
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	f7fe f964 	bl	8002100 <HAL_DMA_Start_IT>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e05b      	b.n	8003efa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e50:	60da      	str	r2, [r3, #12]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d14b      	bne.n	8003ef8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 f88d 	bl	8004f88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a27      	ldr	r2, [pc, #156]	@ (8003f10 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a20      	ldr	r2, [pc, #128]	@ (8003f10 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d018      	beq.n	8003ec4 <HAL_TIM_PWM_Start_DMA+0x300>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9a:	d013      	beq.n	8003ec4 <HAL_TIM_PWM_Start_DMA+0x300>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_TIM_PWM_Start_DMA+0x300>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f18 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_TIM_PWM_Start_DMA+0x300>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a19      	ldr	r2, [pc, #100]	@ (8003f1c <HAL_TIM_PWM_Start_DMA+0x358>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_TIM_PWM_Start_DMA+0x300>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a18      	ldr	r2, [pc, #96]	@ (8003f20 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d111      	bne.n	8003ee8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d010      	beq.n	8003ef8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	e007      	b.n	8003ef8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	08004915 	.word	0x08004915
 8003f08:	080049bd 	.word	0x080049bd
 8003f0c:	08004883 	.word	0x08004883
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000

08003f24 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	d855      	bhi.n	8003fe4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003f38:	a201      	add	r2, pc, #4	@ (adr r2, 8003f40 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003fe5 	.word	0x08003fe5
 8003f48:	08003fe5 	.word	0x08003fe5
 8003f4c:	08003fe5 	.word	0x08003fe5
 8003f50:	08003f91 	.word	0x08003f91
 8003f54:	08003fe5 	.word	0x08003fe5
 8003f58:	08003fe5 	.word	0x08003fe5
 8003f5c:	08003fe5 	.word	0x08003fe5
 8003f60:	08003fad 	.word	0x08003fad
 8003f64:	08003fe5 	.word	0x08003fe5
 8003f68:	08003fe5 	.word	0x08003fe5
 8003f6c:	08003fe5 	.word	0x08003fe5
 8003f70:	08003fc9 	.word	0x08003fc9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe f911 	bl	80021b0 <HAL_DMA_Abort_IT>
      break;
 8003f8e:	e02c      	b.n	8003fea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe f903 	bl	80021b0 <HAL_DMA_Abort_IT>
      break;
 8003faa:	e01e      	b.n	8003fea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe f8f5 	bl	80021b0 <HAL_DMA_Abort_IT>
      break;
 8003fc6:	e010      	b.n	8003fea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe f8e7 	bl	80021b0 <HAL_DMA_Abort_IT>
      break;
 8003fe2:	e002      	b.n	8003fea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d157      	bne.n	80040a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 ffc5 	bl	8004f88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2a      	ldr	r2, [pc, #168]	@ (80040ac <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d117      	bne.n	8004038 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10f      	bne.n	8004068 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a1a      	ldr	r2, [r3, #32]
 800404e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <HAL_TIM_PWM_Stop_DMA+0x154>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004076:	e013      	b.n	80040a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b04      	cmp	r3, #4
 800407c:	d104      	bne.n	8004088 <HAL_TIM_PWM_Stop_DMA+0x164>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004086:	e00b      	b.n	80040a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b08      	cmp	r3, #8
 800408c:	d104      	bne.n	8004098 <HAL_TIM_PWM_Stop_DMA+0x174>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004096:	e003      	b.n	80040a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000

080040b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e097      	b.n	80041f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fd f96b 	bl	80013b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040f4:	f023 0307 	bic.w	r3, r3, #7
 80040f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fc8d 	bl	8004a24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	4313      	orrs	r3, r2
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004150:	f023 030c 	bic.w	r3, r3, #12
 8004154:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800415c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	4313      	orrs	r3, r2
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	011a      	lsls	r2, r3, #4
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	031b      	lsls	r3, r3, #12
 8004180:	4313      	orrs	r3, r2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800418e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	4313      	orrs	r3, r2
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800420c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004214:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800421c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004224:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d110      	bne.n	800424e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d102      	bne.n	8004238 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004232:	7b7b      	ldrb	r3, [r7, #13]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e069      	b.n	8004310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800424c:	e031      	b.n	80042b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d110      	bne.n	8004276 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d102      	bne.n	8004260 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800425a:	7b3b      	ldrb	r3, [r7, #12]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d001      	beq.n	8004264 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e055      	b.n	8004310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004274:	e01d      	b.n	80042b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d108      	bne.n	800428e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800427c:	7bbb      	ldrb	r3, [r7, #14]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004282:	7b7b      	ldrb	r3, [r7, #13]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d102      	bne.n	800428e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004288:	7b3b      	ldrb	r3, [r7, #12]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e03e      	b.n	8004310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_TIM_Encoder_Start+0xc4>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d008      	beq.n	80042d0 <HAL_TIM_Encoder_Start+0xd4>
 80042be:	e00f      	b.n	80042e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fe5d 	bl	8004f88 <TIM_CCxChannelCmd>
      break;
 80042ce:	e016      	b.n	80042fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	2104      	movs	r1, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fe55 	bl	8004f88 <TIM_CCxChannelCmd>
      break;
 80042de:	e00e      	b.n	80042fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2201      	movs	r2, #1
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fe4d 	bl	8004f88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2201      	movs	r2, #1
 80042f4:	2104      	movs	r1, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fe46 	bl	8004f88 <TIM_CCxChannelCmd>
      break;
 80042fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d020      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0202 	mvn.w	r2, #2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fa65 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa57 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f001 f9f1 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0204 	mvn.w	r2, #4
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa3f 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa31 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f001 f9cb 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0208 	mvn.w	r2, #8
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa19 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa0b 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f001 f9a5 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2208      	movs	r2, #8
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9f3 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9e5 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f001 f97f 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0201 	mvn.w	r2, #1
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9c3 	bl	800480a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fe60 	bl	8005168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f9c7 	bl	800485a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0220 	mvn.w	r2, #32
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fe32 	bl	8005154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004512:	2302      	movs	r3, #2
 8004514:	e0ae      	b.n	8004674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	f200 809f 	bhi.w	8004664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004526:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004561 	.word	0x08004561
 8004530:	08004665 	.word	0x08004665
 8004534:	08004665 	.word	0x08004665
 8004538:	08004665 	.word	0x08004665
 800453c:	080045a1 	.word	0x080045a1
 8004540:	08004665 	.word	0x08004665
 8004544:	08004665 	.word	0x08004665
 8004548:	08004665 	.word	0x08004665
 800454c:	080045e3 	.word	0x080045e3
 8004550:	08004665 	.word	0x08004665
 8004554:	08004665 	.word	0x08004665
 8004558:	08004665 	.word	0x08004665
 800455c:	08004623 	.word	0x08004623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fae8 	bl	8004b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0204 	bic.w	r2, r2, #4
 800458a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	619a      	str	r2, [r3, #24]
      break;
 800459e:	e064      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fb2e 	bl	8004c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6999      	ldr	r1, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	619a      	str	r2, [r3, #24]
      break;
 80045e0:	e043      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fb79 	bl	8004ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0208 	orr.w	r2, r2, #8
 80045fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0204 	bic.w	r2, r2, #4
 800460c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	61da      	str	r2, [r3, #28]
      break;
 8004620:	e023      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fbc3 	bl	8004db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800463c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	021a      	lsls	r2, r3, #8
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	61da      	str	r2, [r3, #28]
      break;
 8004662:	e002      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
      break;
 8004668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_TIM_ConfigClockSource+0x1c>
 8004694:	2302      	movs	r3, #2
 8004696:	e0b4      	b.n	8004802 <HAL_TIM_ConfigClockSource+0x186>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d0:	d03e      	beq.n	8004750 <HAL_TIM_ConfigClockSource+0xd4>
 80046d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d6:	f200 8087 	bhi.w	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046de:	f000 8086 	beq.w	80047ee <HAL_TIM_ConfigClockSource+0x172>
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	d87f      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b70      	cmp	r3, #112	@ 0x70
 80046ea:	d01a      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0xa6>
 80046ec:	2b70      	cmp	r3, #112	@ 0x70
 80046ee:	d87b      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b60      	cmp	r3, #96	@ 0x60
 80046f2:	d050      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x11a>
 80046f4:	2b60      	cmp	r3, #96	@ 0x60
 80046f6:	d877      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b50      	cmp	r3, #80	@ 0x50
 80046fa:	d03c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0xfa>
 80046fc:	2b50      	cmp	r3, #80	@ 0x50
 80046fe:	d873      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	d058      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004704:	2b40      	cmp	r3, #64	@ 0x40
 8004706:	d86f      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b30      	cmp	r3, #48	@ 0x30
 800470a:	d064      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	2b30      	cmp	r3, #48	@ 0x30
 800470e:	d86b      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d060      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004714:	2b20      	cmp	r3, #32
 8004716:	d867      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15a>
 800471c:	2b10      	cmp	r3, #16
 800471e:	d05a      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004720:	e062      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004732:	f000 fc09 	bl	8004f48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	609a      	str	r2, [r3, #8]
      break;
 800474e:	e04f      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004760:	f000 fbf2 	bl	8004f48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004772:	609a      	str	r2, [r3, #8]
      break;
 8004774:	e03c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	461a      	mov	r2, r3
 8004784:	f000 fb66 	bl	8004e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2150      	movs	r1, #80	@ 0x50
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fbbf 	bl	8004f12 <TIM_ITRx_SetConfig>
      break;
 8004794:	e02c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a2:	461a      	mov	r2, r3
 80047a4:	f000 fb85 	bl	8004eb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2160      	movs	r1, #96	@ 0x60
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fbaf 	bl	8004f12 <TIM_ITRx_SetConfig>
      break;
 80047b4:	e01c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	461a      	mov	r2, r3
 80047c4:	f000 fb46 	bl	8004e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2140      	movs	r1, #64	@ 0x40
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fb9f 	bl	8004f12 <TIM_ITRx_SetConfig>
      break;
 80047d4:	e00c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f000 fb96 	bl	8004f12 <TIM_ITRx_SetConfig>
      break;
 80047e6:	e003      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      break;
 80047ec:	e000      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d107      	bne.n	80048aa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a8:	e02a      	b.n	8004900 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2202      	movs	r2, #2
 80048b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048c2:	e01d      	b.n	8004900 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d107      	bne.n	80048de <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2204      	movs	r2, #4
 80048d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048dc:	e010      	b.n	8004900 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d107      	bne.n	80048f8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2208      	movs	r2, #8
 80048ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048f6:	e003      	b.n	8004900 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff ffb4 	bl	800486e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004920:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d10b      	bne.n	8004944 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d136      	bne.n	80049a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004942:	e031      	b.n	80049a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d10b      	bne.n	8004966 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d125      	bne.n	80049a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004964:	e020      	b.n	80049a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	429a      	cmp	r2, r3
 800496e:	d10b      	bne.n	8004988 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2204      	movs	r2, #4
 8004974:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d114      	bne.n	80049a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004986:	e00f      	b.n	80049a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d10a      	bne.n	80049a8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2208      	movs	r2, #8
 8004996:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fed5 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d103      	bne.n	80049dc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	771a      	strb	r2, [r3, #28]
 80049da:	e019      	b.n	8004a10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d103      	bne.n	80049ee <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2202      	movs	r2, #2
 80049ea:	771a      	strb	r2, [r3, #28]
 80049ec:	e010      	b.n	8004a10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d103      	bne.n	8004a00 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2204      	movs	r2, #4
 80049fc:	771a      	strb	r2, [r3, #28]
 80049fe:	e007      	b.n	8004a10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d102      	bne.n	8004a10 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ff18 	bl	8004846 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a3a      	ldr	r2, [pc, #232]	@ (8004b20 <TIM_Base_SetConfig+0xfc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00f      	beq.n	8004a5c <TIM_Base_SetConfig+0x38>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a42:	d00b      	beq.n	8004a5c <TIM_Base_SetConfig+0x38>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a37      	ldr	r2, [pc, #220]	@ (8004b24 <TIM_Base_SetConfig+0x100>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d007      	beq.n	8004a5c <TIM_Base_SetConfig+0x38>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a36      	ldr	r2, [pc, #216]	@ (8004b28 <TIM_Base_SetConfig+0x104>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_Base_SetConfig+0x38>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a35      	ldr	r2, [pc, #212]	@ (8004b2c <TIM_Base_SetConfig+0x108>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d108      	bne.n	8004a6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	@ (8004b20 <TIM_Base_SetConfig+0xfc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01b      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a7c:	d017      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a28      	ldr	r2, [pc, #160]	@ (8004b24 <TIM_Base_SetConfig+0x100>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a27      	ldr	r2, [pc, #156]	@ (8004b28 <TIM_Base_SetConfig+0x104>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00f      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a26      	ldr	r2, [pc, #152]	@ (8004b2c <TIM_Base_SetConfig+0x108>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a25      	ldr	r2, [pc, #148]	@ (8004b30 <TIM_Base_SetConfig+0x10c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a24      	ldr	r2, [pc, #144]	@ (8004b34 <TIM_Base_SetConfig+0x110>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	@ (8004b38 <TIM_Base_SetConfig+0x114>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8004b20 <TIM_Base_SetConfig+0xfc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d103      	bne.n	8004af4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]
  }
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40010000 	.word	0x40010000
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800

08004b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 0201 	bic.w	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 0302 	bic.w	r3, r3, #2
 8004b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1c      	ldr	r2, [pc, #112]	@ (8004c04 <TIM_OC1_SetConfig+0xc8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0308 	bic.w	r3, r3, #8
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 0304 	bic.w	r3, r3, #4
 8004bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a13      	ldr	r2, [pc, #76]	@ (8004c04 <TIM_OC1_SetConfig+0xc8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d111      	bne.n	8004bde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40010000 	.word	0x40010000

08004c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f023 0210 	bic.w	r2, r3, #16
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f023 0320 	bic.w	r3, r3, #32
 8004c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <TIM_OC2_SetConfig+0xd4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d10d      	bne.n	8004c84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a15      	ldr	r2, [pc, #84]	@ (8004cdc <TIM_OC2_SetConfig+0xd4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d113      	bne.n	8004cb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40010000 	.word	0x40010000

08004ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1d      	ldr	r2, [pc, #116]	@ (8004db0 <TIM_OC3_SetConfig+0xd0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10d      	bne.n	8004d5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a14      	ldr	r2, [pc, #80]	@ (8004db0 <TIM_OC3_SetConfig+0xd0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d113      	bne.n	8004d8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	621a      	str	r2, [r3, #32]
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40010000 	.word	0x40010000

08004db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	031b      	lsls	r3, r3, #12
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a10      	ldr	r2, [pc, #64]	@ (8004e50 <TIM_OC4_SetConfig+0x9c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d109      	bne.n	8004e28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000

08004e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0201 	bic.w	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f023 030a 	bic.w	r3, r3, #10
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f023 0210 	bic.w	r2, r3, #16
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	031b      	lsls	r3, r3, #12
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004eee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f043 0307 	orr.w	r3, r3, #7
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	021a      	lsls	r2, r3, #8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	401a      	ands	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e050      	b.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1c      	ldr	r2, [pc, #112]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d018      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005038:	d013      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a18      	ldr	r2, [pc, #96]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a16      	ldr	r2, [pc, #88]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a15      	ldr	r2, [pc, #84]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a13      	ldr	r2, [pc, #76]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10c      	bne.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4313      	orrs	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40014000 	.word	0x40014000

080050b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e03d      	b.n	8005148 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <addBitmapToNextFrame>:
 *
 * @param[in] bitmap     Bitmap representing LED layout.
 * @param[in] color      24-bit color value (0xRRGGBB).
 * @param[in] brightness Brightness level (0-255).
 */
void addBitmapToNextFrame(const uint16_t matrix[MATRIX_HEIGHT], uint8_t red, uint8_t green, uint8_t blue, uint8_t brightness) {
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	4608      	mov	r0, r1
 8005186:	4611      	mov	r1, r2
 8005188:	461a      	mov	r2, r3
 800518a:	4603      	mov	r3, r0
 800518c:	70fb      	strb	r3, [r7, #3]
 800518e:	460b      	mov	r3, r1
 8005190:	70bb      	strb	r3, [r7, #2]
 8005192:	4613      	mov	r3, r2
 8005194:	707b      	strb	r3, [r7, #1]

    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e03b      	b.n	8005214 <addBitmapToNextFrame+0x98>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e032      	b.n	8005208 <addBitmapToNextFrame+0x8c>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	0092      	lsls	r2, r2, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	0052      	lsls	r2, r2, #1
 80051ae:	4413      	add	r3, r2
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4413      	add	r3, r2
 80051b8:	73fb      	strb	r3, [r7, #15]

            if(matrix[i] & (1 << j)) {
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	fa42 f303 	asr.w	r3, r2, r3
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d016      	beq.n	8005202 <addBitmapToNextFrame+0x86>
                nextFrame[ledNumber].red = red;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4914      	ldr	r1, [pc, #80]	@ (8005228 <addBitmapToNextFrame+0xac>)
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
                nextFrame[ledNumber].green = green;
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	4a11      	ldr	r2, [pc, #68]	@ (8005228 <addBitmapToNextFrame+0xac>)
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	78ba      	ldrb	r2, [r7, #2]
 80051e8:	705a      	strb	r2, [r3, #1]
                nextFrame[ledNumber].blue = blue;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	4a0e      	ldr	r2, [pc, #56]	@ (8005228 <addBitmapToNextFrame+0xac>)
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	787a      	ldrb	r2, [r7, #1]
 80051f4:	709a      	strb	r2, [r3, #2]
                nextFrame[ledNumber].draw = true;
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005228 <addBitmapToNextFrame+0xac>)
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	2201      	movs	r2, #1
 8005200:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	3301      	adds	r3, #1
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b0a      	cmp	r3, #10
 800520c:	ddc9      	ble.n	80051a2 <addBitmapToNextFrame+0x26>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b0c      	cmp	r3, #12
 8005218:	ddc0      	ble.n	800519c <addBitmapToNextFrame+0x20>
            }

        }
    }
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	20000258 	.word	0x20000258

0800522c <getLitCurrentFrame>:
 * @param   arr Pointer to an array for storing indices of lit LEDs.
 *            This array should be preallocated by the caller.
 *
 * @return  Number of lit LEDs found. This value represents the size of the updated array.
 */
uint8_t getLitCurrentFrame(uint8_t *arr) {
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

    uint32_t index = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8005238:	2300      	movs	r3, #0
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	e01f      	b.n	800527e <getLitCurrentFrame+0x52>
        if(currentFrame[i].red != 0 || currentFrame[i].green != 0 || currentFrame[i].blue != 0) {
 800523e:	4a16      	ldr	r2, [pc, #88]	@ (8005298 <getLitCurrentFrame+0x6c>)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <getLitCurrentFrame+0x3a>
 800524a:	4a13      	ldr	r2, [pc, #76]	@ (8005298 <getLitCurrentFrame+0x6c>)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <getLitCurrentFrame+0x3a>
 8005258:	4a0f      	ldr	r2, [pc, #60]	@ (8005298 <getLitCurrentFrame+0x6c>)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	789b      	ldrb	r3, [r3, #2]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <getLitCurrentFrame+0x4c>
            arr[index] = i;
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
            index++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	3301      	adds	r3, #1
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b8e      	cmp	r3, #142	@ 0x8e
 8005282:	dddc      	ble.n	800523e <getLitCurrentFrame+0x12>
        }
    }

    return index + 1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3301      	adds	r3, #1
 800528a:	b2db      	uxtb	r3, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000494 	.word	0x20000494

0800529c <turnOnLED>:
/**
 * @brief   Turns on an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn on.
 */
void turnOnLED(uint8_t number) {
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
	currentFrame[number].draw = true;
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	4a05      	ldr	r2, [pc, #20]	@ (80052c0 <turnOnLED+0x24>)
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	2201      	movs	r2, #1
 80052b0:	70da      	strb	r2, [r3, #3]
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000494 	.word	0x20000494

080052c4 <turnOffLED>:
/**
 * @brief   Turns off an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn off.
 */
void turnOffLED(uint8_t number) {
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
	currentFrame[number].draw = false;
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	4a05      	ldr	r2, [pc, #20]	@ (80052e8 <turnOffLED+0x24>)
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	2200      	movs	r2, #0
 80052d8:	70da      	strb	r2, [r3, #3]
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000494 	.word	0x20000494

080052ec <shuffle>:
 * @param   size  Number of elements in the array.
 *
 * @note    The array must be non-empty and contain at least two elements for shuffling to occur.
 *          Otherwise, the function does nothing.
 */
void shuffle(uint8_t *array, uint32_t size) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
    if (size > 1) {
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d92d      	bls.n	8005358 <shuffle+0x6c>
        for (uint32_t i = 0; i < size - 1; i++) {
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e025      	b.n	800534e <shuffle+0x62>
            uint32_t j = i + rand() / (RAND_MAX / (size - i) + 1);
 8005302:	f000 fa3b 	bl	800577c <rand>
 8005306:	4603      	mov	r3, r0
 8005308:	4619      	mov	r1, r3
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	3301      	adds	r3, #1
 800531a:	fbb1 f3f3 	udiv	r3, r1, r3
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
            uint8_t t = array[j];
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	73fb      	strb	r3, [r7, #15]
            array[j] = array[i];
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	441a      	add	r2, r3
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	440b      	add	r3, r1
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	701a      	strb	r2, [r3, #0]
            array[i] = t;
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	7bfa      	ldrb	r2, [r7, #15]
 8005346:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size - 1; i++) {
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3301      	adds	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	3b01      	subs	r3, #1
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	429a      	cmp	r2, r3
 8005356:	d3d4      	bcc.n	8005302 <shuffle+0x16>
        }
    }
}
 8005358:	bf00      	nop
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <randomInRange>:

int randomInRange(int min, int max) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
    return min + rand() % (max - min + 1);
 800536a:	f000 fa07 	bl	800577c <rand>
 800536e:	4602      	mov	r2, r0
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	1acb      	subs	r3, r1, r3
 8005376:	3301      	adds	r3, #1
 8005378:	fb92 f1f3 	sdiv	r1, r2, r3
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	1ad2      	subs	r2, r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4413      	add	r3, r2
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <wipeNextFrame>:
		currentFrame[i].green = 0;
		currentFrame[i].red = 0;
	}
}

void wipeNextFrame() {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	e013      	b.n	80053c4 <wipeNextFrame+0x34>
		nextFrame[i].blue = 0;
 800539c:	4a0e      	ldr	r2, [pc, #56]	@ (80053d8 <wipeNextFrame+0x48>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	2200      	movs	r2, #0
 80053a6:	709a      	strb	r2, [r3, #2]
		nextFrame[i].green = 0;
 80053a8:	4a0b      	ldr	r2, [pc, #44]	@ (80053d8 <wipeNextFrame+0x48>)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	2200      	movs	r2, #0
 80053b2:	705a      	strb	r2, [r3, #1]
		nextFrame[i].red = 0;
 80053b4:	4a08      	ldr	r2, [pc, #32]	@ (80053d8 <wipeNextFrame+0x48>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2100      	movs	r1, #0
 80053ba:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3301      	adds	r3, #1
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b8e      	cmp	r3, #142	@ 0x8e
 80053c8:	dde8      	ble.n	800539c <wipeNextFrame+0xc>
	}
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	20000258 	.word	0x20000258

080053dc <advanceFrame>:

void advanceFrame() {
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
    memcpy(currentFrame, nextFrame, sizeof(currentFrame));
 80053e0:	4a06      	ldr	r2, [pc, #24]	@ (80053fc <advanceFrame+0x20>)
 80053e2:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <advanceFrame+0x24>)
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	f44f 730f 	mov.w	r3, #572	@ 0x23c
 80053ec:	461a      	mov	r2, r3
 80053ee:	f000 fb96 	bl	8005b1e <memcpy>
    wipeNextFrame();
 80053f2:	f7ff ffcd 	bl	8005390 <wipeNextFrame>
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000494 	.word	0x20000494
 8005400:	20000258 	.word	0x20000258

08005404 <flickerOutEffect>:

void flickerOutEffect() {
 8005404:	b580      	push	{r7, lr}
 8005406:	b0a6      	sub	sp, #152	@ 0x98
 8005408:	af00      	add	r7, sp, #0
    uint8_t litLEDs[MATRIX_SIZE] = {0};
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	f107 0308 	add.w	r3, r7, #8
 8005412:	228b      	movs	r2, #139	@ 0x8b
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f000 faf3 	bl	8005a02 <memset>
    uint8_t numLit = getLitCurrentFrame(litLEDs);
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff ff04 	bl	800522c <getLitCurrentFrame>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    const uint8_t flickerLoops = 10;
 800542a:	230a      	movs	r3, #10
 800542c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8005436:	e03f      	b.n	80054b8 <flickerOutEffect+0xb4>
        shuffle(litLEDs, numLit);
 8005438:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ff53 	bl	80052ec <shuffle>
        for (uint8_t i = 0; i < numLit; ++i) {
 8005446:	2300      	movs	r3, #0
 8005448:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800544c:	e022      	b.n	8005494 <flickerOutEffect+0x90>
            // Invert the logic here: As loop increases,
            // it becomes more likely to turn off the LED.
            // This is done by comparing the random value
            // against a decreasing threshold.
            if (randomInRange(0, flickerLoops) < loop) {
 800544e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8005452:	4619      	mov	r1, r3
 8005454:	2000      	movs	r0, #0
 8005456:	f7ff ff83 	bl	8005360 <randomInRange>
 800545a:	4602      	mov	r2, r0
 800545c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005460:	429a      	cmp	r2, r3
 8005462:	da09      	bge.n	8005478 <flickerOutEffect+0x74>
                turnOffLED(litLEDs[i]);
 8005464:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8005468:	3398      	adds	r3, #152	@ 0x98
 800546a:	443b      	add	r3, r7
 800546c:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ff27 	bl	80052c4 <turnOffLED>
 8005476:	e008      	b.n	800548a <flickerOutEffect+0x86>
            } else {
                // Only explicitly turn on LEDs if there's a reason
                // they might be off from a previous iteration.
                // Depending on the initial state, this might not be necessary.
                turnOnLED(litLEDs[i]);
 8005478:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800547c:	3398      	adds	r3, #152	@ 0x98
 800547e:	443b      	add	r3, r7
 8005480:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff ff09 	bl	800529c <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 800548a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800548e:	3301      	adds	r3, #1
 8005490:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8005494:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8005498:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800549c:	429a      	cmp	r2, r3
 800549e:	d3d6      	bcc.n	800544e <flickerOutEffect+0x4a>
            }
        }
        updatePwmBuffer();
 80054a0:	f000 f8cc 	bl	800563c <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 80054a4:	f000 f93e 	bl	8005724 <DMA_Send>
        HAL_Delay(50); // Adjust delay as necessary for visual effect
 80054a8:	2032      	movs	r0, #50	@ 0x32
 80054aa:	f7fc fc45 	bl	8001d38 <HAL_Delay>
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 80054ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80054b2:	3301      	adds	r3, #1
 80054b4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80054b8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80054bc:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d3b9      	bcc.n	8005438 <flickerOutEffect+0x34>
    }

    // Ensure all LEDs are turned off at the end
    for (uint8_t i = 0; i < numLit; ++i) {
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80054ca:	e00d      	b.n	80054e8 <flickerOutEffect+0xe4>
        turnOffLED(litLEDs[i]);
 80054cc:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80054d0:	3398      	adds	r3, #152	@ 0x98
 80054d2:	443b      	add	r3, r7
 80054d4:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fef3 	bl	80052c4 <turnOffLED>
    for (uint8_t i = 0; i < numLit; ++i) {
 80054de:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80054e2:	3301      	adds	r3, #1
 80054e4:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80054e8:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 80054ec:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d3eb      	bcc.n	80054cc <flickerOutEffect+0xc8>
    }
    updatePwmBuffer();
 80054f4:	f000 f8a2 	bl	800563c <updatePwmBuffer>
    DMA_Send(); // Update LEDs through DMA
 80054f8:	f000 f914 	bl	8005724 <DMA_Send>
}
 80054fc:	bf00      	nop
 80054fe:	3798      	adds	r7, #152	@ 0x98
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <flickerInEffect>:

void flickerInEffect() {
 8005504:	b580      	push	{r7, lr}
 8005506:	b0a6      	sub	sp, #152	@ 0x98
 8005508:	af00      	add	r7, sp, #0
    uint8_t litLEDs[MATRIX_SIZE] = {0};
 800550a:	2300      	movs	r3, #0
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	228b      	movs	r2, #139	@ 0x8b
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fa73 	bl	8005a02 <memset>
    uint8_t numLit = getLitCurrentFrame(litLEDs);
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fe84 	bl	800522c <getLitCurrentFrame>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    const uint8_t flickerLoops = 10;
 800552a:	230a      	movs	r3, #10
 800552c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 8005530:	2300      	movs	r3, #0
 8005532:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8005536:	e03f      	b.n	80055b8 <flickerInEffect+0xb4>
        shuffle(litLEDs, numLit);
 8005538:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fed3 	bl	80052ec <shuffle>
        for (uint8_t i = 0; i < numLit; ++i) {
 8005546:	2300      	movs	r3, #0
 8005548:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800554c:	e022      	b.n	8005594 <flickerInEffect+0x90>
            if (randomInRange(0, flickerLoops) > loop) {
 800554e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8005552:	4619      	mov	r1, r3
 8005554:	2000      	movs	r0, #0
 8005556:	f7ff ff03 	bl	8005360 <randomInRange>
 800555a:	4602      	mov	r2, r0
 800555c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005560:	429a      	cmp	r2, r3
 8005562:	dd09      	ble.n	8005578 <flickerInEffect+0x74>
                turnOffLED(litLEDs[i]);
 8005564:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8005568:	3398      	adds	r3, #152	@ 0x98
 800556a:	443b      	add	r3, r7
 800556c:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fea7 	bl	80052c4 <turnOffLED>
 8005576:	e008      	b.n	800558a <flickerInEffect+0x86>
            } else {
                turnOnLED(litLEDs[i]);
 8005578:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800557c:	3398      	adds	r3, #152	@ 0x98
 800557e:	443b      	add	r3, r7
 8005580:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff fe89 	bl	800529c <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 800558a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800558e:	3301      	adds	r3, #1
 8005590:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8005594:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8005598:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800559c:	429a      	cmp	r2, r3
 800559e:	d3d6      	bcc.n	800554e <flickerInEffect+0x4a>
            }
        }
        updatePwmBuffer();
 80055a0:	f000 f84c 	bl	800563c <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 80055a4:	f000 f8be 	bl	8005724 <DMA_Send>
        HAL_Delay(50); // Adjust delay as necessary for visual effect
 80055a8:	2032      	movs	r0, #50	@ 0x32
 80055aa:	f7fc fbc5 	bl	8001d38 <HAL_Delay>
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 80055ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80055b2:	3301      	adds	r3, #1
 80055b4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80055b8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80055bc:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3b9      	bcc.n	8005538 <flickerInEffect+0x34>
    }

    // Ensure all LEDs are turned on at the end
    for (uint8_t i = 0; i < numLit; ++i) {
 80055c4:	2300      	movs	r3, #0
 80055c6:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80055ca:	e00d      	b.n	80055e8 <flickerInEffect+0xe4>
        turnOnLED(litLEDs[i]);
 80055cc:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80055d0:	3398      	adds	r3, #152	@ 0x98
 80055d2:	443b      	add	r3, r7
 80055d4:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fe5f 	bl	800529c <turnOnLED>
    for (uint8_t i = 0; i < numLit; ++i) {
 80055de:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80055e2:	3301      	adds	r3, #1
 80055e4:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80055e8:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 80055ec:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d3eb      	bcc.n	80055cc <flickerInEffect+0xc8>
    }
    updatePwmBuffer();
 80055f4:	f000 f822 	bl	800563c <updatePwmBuffer>
    DMA_Send(); // Update LEDs through DMA
 80055f8:	f000 f894 	bl	8005724 <DMA_Send>
}
 80055fc:	bf00      	nop
 80055fe:	3798      	adds	r7, #152	@ 0x98
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <wipePWMBuffer>:
 * @brief Converts a bitmap to PWM data for WS2812B LEDs.
 *
 * Wipes PWM Buffer by filling it with user defined ZERO PWM values.
 *
 */
void wipePWMBuffer(void) {
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	e007      	b.n	8005620 <wipePWMBuffer+0x1c>
        pwmBuffer[i] = ZERO;
 8005610:	4a09      	ldr	r2, [pc, #36]	@ (8005638 <wipePWMBuffer+0x34>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	211b      	movs	r1, #27
 8005616:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3301      	adds	r3, #1
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f640 5299 	movw	r2, #3481	@ 0xd99
 8005626:	4293      	cmp	r3, r2
 8005628:	ddf2      	ble.n	8005610 <wipePWMBuffer+0xc>
    }
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	200006d0 	.word	0x200006d0

0800563c <updatePwmBuffer>:
 * (green, red, blue) order.
 *
 * @note    The PWM buffer must be appropriately sized to accommodate the
 *          LED data. Each LED requires 24 bits in the PWM buffer.
 */
void updatePwmBuffer(void) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0

    wipePWMBuffer();
 8005642:	f7ff ffdf 	bl	8005604 <wipePWMBuffer>

    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e05e      	b.n	800570a <updatePwmBuffer+0xce>

        if(!currentFrame[ledNumber].draw) {
 800564c:	4a33      	ldr	r2, [pc, #204]	@ (800571c <updatePwmBuffer+0xe0>)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	78db      	ldrb	r3, [r3, #3]
 8005656:	f083 0301 	eor.w	r3, r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d150      	bne.n	8005702 <updatePwmBuffer+0xc6>
            continue;
        }


        uint8_t red     = currentFrame[ledNumber].red;
 8005660:	4a2e      	ldr	r2, [pc, #184]	@ (800571c <updatePwmBuffer+0xe0>)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8005668:	71fb      	strb	r3, [r7, #7]
        uint8_t green   = currentFrame[ledNumber].green;
 800566a:	4a2c      	ldr	r2, [pc, #176]	@ (800571c <updatePwmBuffer+0xe0>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	71bb      	strb	r3, [r7, #6]
        uint8_t blue    = currentFrame[ledNumber].blue;
 8005676:	4a29      	ldr	r2, [pc, #164]	@ (800571c <updatePwmBuffer+0xe0>)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	789b      	ldrb	r3, [r3, #2]
 8005680:	717b      	strb	r3, [r7, #5]
        uint32_t arrayIndex = ledNumber * 24;
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4613      	mov	r3, r2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	603b      	str	r3, [r7, #0]

        // ws2812b is GRB, so we swap the positions of red and green
        for(int bit = 0; bit < 8; bit++) {
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	e032      	b.n	80056fa <updatePwmBuffer+0xbe>

            if(green & (1 << bit)) {
 8005694:	79ba      	ldrb	r2, [r7, #6]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	fa42 f303 	asr.w	r3, r2, r3
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <updatePwmBuffer+0x78>
                pwmBuffer[arrayIndex + 16 + (7 - bit)] = ONE;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	3317      	adds	r3, #23
 80056ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005720 <updatePwmBuffer+0xe4>)
 80056ae:	2136      	movs	r1, #54	@ 0x36
 80056b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(red & (1 << bit)) {
 80056b4:	79fa      	ldrb	r2, [r7, #7]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	fa42 f303 	asr.w	r3, r2, r3
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <updatePwmBuffer+0x98>
                pwmBuffer[arrayIndex + 8 + (7 - bit)] = ONE;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	330f      	adds	r3, #15
 80056cc:	4a14      	ldr	r2, [pc, #80]	@ (8005720 <updatePwmBuffer+0xe4>)
 80056ce:	2136      	movs	r1, #54	@ 0x36
 80056d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(blue & (1 << bit)) {
 80056d4:	797a      	ldrb	r2, [r7, #5]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	fa42 f303 	asr.w	r3, r2, r3
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <updatePwmBuffer+0xb8>
                pwmBuffer[arrayIndex + (7 - bit)] = ONE;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	3307      	adds	r3, #7
 80056ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <updatePwmBuffer+0xe4>)
 80056ee:	2136      	movs	r1, #54	@ 0x36
 80056f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(int bit = 0; bit < 8; bit++) {
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b07      	cmp	r3, #7
 80056fe:	ddc9      	ble.n	8005694 <updatePwmBuffer+0x58>
 8005700:	e000      	b.n	8005704 <updatePwmBuffer+0xc8>
            continue;
 8005702:	bf00      	nop
    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b8e      	cmp	r3, #142	@ 0x8e
 800570e:	dd9d      	ble.n	800564c <updatePwmBuffer+0x10>
            }
        }

    }
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000494 	.word	0x20000494
 8005720:	200006d0 	.word	0x200006d0

08005724 <DMA_Send>:


void DMA_Send() {
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0

	//FIXME: The data is 1 bit too far to the left.
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmBuffer, PWM_ARRAY_SIZE + 1);
 8005728:	f640 539b 	movw	r3, #3483	@ 0xd9b
 800572c:	4a07      	ldr	r2, [pc, #28]	@ (800574c <DMA_Send+0x28>)
 800572e:	2100      	movs	r1, #0
 8005730:	4807      	ldr	r0, [pc, #28]	@ (8005750 <DMA_Send+0x2c>)
 8005732:	f7fe fa47 	bl	8003bc4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 8005736:	bf00      	nop
 8005738:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <DMA_Send+0x30>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0fb      	beq.n	8005738 <DMA_Send+0x14>
	datasentflag = 0;
 8005740:	4b04      	ldr	r3, [pc, #16]	@ (8005754 <DMA_Send+0x30>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]

}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200006d0 	.word	0x200006d0
 8005750:	200000b0 	.word	0x200000b0
 8005754:	20000254 	.word	0x20000254

08005758 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8005760:	2100      	movs	r1, #0
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fe fbde 	bl	8003f24 <HAL_TIM_PWM_Stop_DMA>
    datasentflag = 1;
 8005768:	4b03      	ldr	r3, [pc, #12]	@ (8005778 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]

}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000254 	.word	0x20000254

0800577c <rand>:
 800577c:	4b16      	ldr	r3, [pc, #88]	@ (80057d8 <rand+0x5c>)
 800577e:	b510      	push	{r4, lr}
 8005780:	681c      	ldr	r4, [r3, #0]
 8005782:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005784:	b9b3      	cbnz	r3, 80057b4 <rand+0x38>
 8005786:	2018      	movs	r0, #24
 8005788:	f000 fa40 	bl	8005c0c <malloc>
 800578c:	4602      	mov	r2, r0
 800578e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005790:	b920      	cbnz	r0, 800579c <rand+0x20>
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <rand+0x60>)
 8005794:	4812      	ldr	r0, [pc, #72]	@ (80057e0 <rand+0x64>)
 8005796:	2152      	movs	r1, #82	@ 0x52
 8005798:	f000 f9d0 	bl	8005b3c <__assert_func>
 800579c:	4911      	ldr	r1, [pc, #68]	@ (80057e4 <rand+0x68>)
 800579e:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <rand+0x6c>)
 80057a0:	e9c0 1300 	strd	r1, r3, [r0]
 80057a4:	4b11      	ldr	r3, [pc, #68]	@ (80057ec <rand+0x70>)
 80057a6:	6083      	str	r3, [r0, #8]
 80057a8:	230b      	movs	r3, #11
 80057aa:	8183      	strh	r3, [r0, #12]
 80057ac:	2100      	movs	r1, #0
 80057ae:	2001      	movs	r0, #1
 80057b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80057b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80057b6:	480e      	ldr	r0, [pc, #56]	@ (80057f0 <rand+0x74>)
 80057b8:	690b      	ldr	r3, [r1, #16]
 80057ba:	694c      	ldr	r4, [r1, #20]
 80057bc:	4a0d      	ldr	r2, [pc, #52]	@ (80057f4 <rand+0x78>)
 80057be:	4358      	muls	r0, r3
 80057c0:	fb02 0004 	mla	r0, r2, r4, r0
 80057c4:	fba3 3202 	umull	r3, r2, r3, r2
 80057c8:	3301      	adds	r3, #1
 80057ca:	eb40 0002 	adc.w	r0, r0, r2
 80057ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80057d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80057d6:	bd10      	pop	{r4, pc}
 80057d8:	20000024 	.word	0x20000024
 80057dc:	08006a80 	.word	0x08006a80
 80057e0:	08006a97 	.word	0x08006a97
 80057e4:	abcd330e 	.word	0xabcd330e
 80057e8:	e66d1234 	.word	0xe66d1234
 80057ec:	0005deec 	.word	0x0005deec
 80057f0:	5851f42d 	.word	0x5851f42d
 80057f4:	4c957f2d 	.word	0x4c957f2d

080057f8 <std>:
 80057f8:	2300      	movs	r3, #0
 80057fa:	b510      	push	{r4, lr}
 80057fc:	4604      	mov	r4, r0
 80057fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005806:	6083      	str	r3, [r0, #8]
 8005808:	8181      	strh	r1, [r0, #12]
 800580a:	6643      	str	r3, [r0, #100]	@ 0x64
 800580c:	81c2      	strh	r2, [r0, #14]
 800580e:	6183      	str	r3, [r0, #24]
 8005810:	4619      	mov	r1, r3
 8005812:	2208      	movs	r2, #8
 8005814:	305c      	adds	r0, #92	@ 0x5c
 8005816:	f000 f8f4 	bl	8005a02 <memset>
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <std+0x58>)
 800581c:	6263      	str	r3, [r4, #36]	@ 0x24
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <std+0x5c>)
 8005820:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <std+0x60>)
 8005824:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <std+0x64>)
 8005828:	6323      	str	r3, [r4, #48]	@ 0x30
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <std+0x68>)
 800582c:	6224      	str	r4, [r4, #32]
 800582e:	429c      	cmp	r4, r3
 8005830:	d006      	beq.n	8005840 <std+0x48>
 8005832:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005836:	4294      	cmp	r4, r2
 8005838:	d002      	beq.n	8005840 <std+0x48>
 800583a:	33d0      	adds	r3, #208	@ 0xd0
 800583c:	429c      	cmp	r4, r3
 800583e:	d105      	bne.n	800584c <std+0x54>
 8005840:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005848:	f000 b966 	b.w	8005b18 <__retarget_lock_init_recursive>
 800584c:	bd10      	pop	{r4, pc}
 800584e:	bf00      	nop
 8005850:	0800597d 	.word	0x0800597d
 8005854:	0800599f 	.word	0x0800599f
 8005858:	080059d7 	.word	0x080059d7
 800585c:	080059fb 	.word	0x080059fb
 8005860:	20002204 	.word	0x20002204

08005864 <stdio_exit_handler>:
 8005864:	4a02      	ldr	r2, [pc, #8]	@ (8005870 <stdio_exit_handler+0xc>)
 8005866:	4903      	ldr	r1, [pc, #12]	@ (8005874 <stdio_exit_handler+0x10>)
 8005868:	4803      	ldr	r0, [pc, #12]	@ (8005878 <stdio_exit_handler+0x14>)
 800586a:	f000 b869 	b.w	8005940 <_fwalk_sglue>
 800586e:	bf00      	nop
 8005870:	20000018 	.word	0x20000018
 8005874:	08005e81 	.word	0x08005e81
 8005878:	20000028 	.word	0x20000028

0800587c <cleanup_stdio>:
 800587c:	6841      	ldr	r1, [r0, #4]
 800587e:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <cleanup_stdio+0x34>)
 8005880:	4299      	cmp	r1, r3
 8005882:	b510      	push	{r4, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	d001      	beq.n	800588c <cleanup_stdio+0x10>
 8005888:	f000 fafa 	bl	8005e80 <_fflush_r>
 800588c:	68a1      	ldr	r1, [r4, #8]
 800588e:	4b09      	ldr	r3, [pc, #36]	@ (80058b4 <cleanup_stdio+0x38>)
 8005890:	4299      	cmp	r1, r3
 8005892:	d002      	beq.n	800589a <cleanup_stdio+0x1e>
 8005894:	4620      	mov	r0, r4
 8005896:	f000 faf3 	bl	8005e80 <_fflush_r>
 800589a:	68e1      	ldr	r1, [r4, #12]
 800589c:	4b06      	ldr	r3, [pc, #24]	@ (80058b8 <cleanup_stdio+0x3c>)
 800589e:	4299      	cmp	r1, r3
 80058a0:	d004      	beq.n	80058ac <cleanup_stdio+0x30>
 80058a2:	4620      	mov	r0, r4
 80058a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a8:	f000 baea 	b.w	8005e80 <_fflush_r>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	bf00      	nop
 80058b0:	20002204 	.word	0x20002204
 80058b4:	2000226c 	.word	0x2000226c
 80058b8:	200022d4 	.word	0x200022d4

080058bc <global_stdio_init.part.0>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <global_stdio_init.part.0+0x30>)
 80058c0:	4c0b      	ldr	r4, [pc, #44]	@ (80058f0 <global_stdio_init.part.0+0x34>)
 80058c2:	4a0c      	ldr	r2, [pc, #48]	@ (80058f4 <global_stdio_init.part.0+0x38>)
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	4620      	mov	r0, r4
 80058c8:	2200      	movs	r2, #0
 80058ca:	2104      	movs	r1, #4
 80058cc:	f7ff ff94 	bl	80057f8 <std>
 80058d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058d4:	2201      	movs	r2, #1
 80058d6:	2109      	movs	r1, #9
 80058d8:	f7ff ff8e 	bl	80057f8 <std>
 80058dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058e0:	2202      	movs	r2, #2
 80058e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e6:	2112      	movs	r1, #18
 80058e8:	f7ff bf86 	b.w	80057f8 <std>
 80058ec:	2000233c 	.word	0x2000233c
 80058f0:	20002204 	.word	0x20002204
 80058f4:	08005865 	.word	0x08005865

080058f8 <__sfp_lock_acquire>:
 80058f8:	4801      	ldr	r0, [pc, #4]	@ (8005900 <__sfp_lock_acquire+0x8>)
 80058fa:	f000 b90e 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 80058fe:	bf00      	nop
 8005900:	20002345 	.word	0x20002345

08005904 <__sfp_lock_release>:
 8005904:	4801      	ldr	r0, [pc, #4]	@ (800590c <__sfp_lock_release+0x8>)
 8005906:	f000 b909 	b.w	8005b1c <__retarget_lock_release_recursive>
 800590a:	bf00      	nop
 800590c:	20002345 	.word	0x20002345

08005910 <__sinit>:
 8005910:	b510      	push	{r4, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	f7ff fff0 	bl	80058f8 <__sfp_lock_acquire>
 8005918:	6a23      	ldr	r3, [r4, #32]
 800591a:	b11b      	cbz	r3, 8005924 <__sinit+0x14>
 800591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005920:	f7ff bff0 	b.w	8005904 <__sfp_lock_release>
 8005924:	4b04      	ldr	r3, [pc, #16]	@ (8005938 <__sinit+0x28>)
 8005926:	6223      	str	r3, [r4, #32]
 8005928:	4b04      	ldr	r3, [pc, #16]	@ (800593c <__sinit+0x2c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f5      	bne.n	800591c <__sinit+0xc>
 8005930:	f7ff ffc4 	bl	80058bc <global_stdio_init.part.0>
 8005934:	e7f2      	b.n	800591c <__sinit+0xc>
 8005936:	bf00      	nop
 8005938:	0800587d 	.word	0x0800587d
 800593c:	2000233c 	.word	0x2000233c

08005940 <_fwalk_sglue>:
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	4607      	mov	r7, r0
 8005946:	4688      	mov	r8, r1
 8005948:	4614      	mov	r4, r2
 800594a:	2600      	movs	r6, #0
 800594c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005950:	f1b9 0901 	subs.w	r9, r9, #1
 8005954:	d505      	bpl.n	8005962 <_fwalk_sglue+0x22>
 8005956:	6824      	ldr	r4, [r4, #0]
 8005958:	2c00      	cmp	r4, #0
 800595a:	d1f7      	bne.n	800594c <_fwalk_sglue+0xc>
 800595c:	4630      	mov	r0, r6
 800595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005962:	89ab      	ldrh	r3, [r5, #12]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d907      	bls.n	8005978 <_fwalk_sglue+0x38>
 8005968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800596c:	3301      	adds	r3, #1
 800596e:	d003      	beq.n	8005978 <_fwalk_sglue+0x38>
 8005970:	4629      	mov	r1, r5
 8005972:	4638      	mov	r0, r7
 8005974:	47c0      	blx	r8
 8005976:	4306      	orrs	r6, r0
 8005978:	3568      	adds	r5, #104	@ 0x68
 800597a:	e7e9      	b.n	8005950 <_fwalk_sglue+0x10>

0800597c <__sread>:
 800597c:	b510      	push	{r4, lr}
 800597e:	460c      	mov	r4, r1
 8005980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005984:	f000 f87a 	bl	8005a7c <_read_r>
 8005988:	2800      	cmp	r0, #0
 800598a:	bfab      	itete	ge
 800598c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800598e:	89a3      	ldrhlt	r3, [r4, #12]
 8005990:	181b      	addge	r3, r3, r0
 8005992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005996:	bfac      	ite	ge
 8005998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800599a:	81a3      	strhlt	r3, [r4, #12]
 800599c:	bd10      	pop	{r4, pc}

0800599e <__swrite>:
 800599e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a2:	461f      	mov	r7, r3
 80059a4:	898b      	ldrh	r3, [r1, #12]
 80059a6:	05db      	lsls	r3, r3, #23
 80059a8:	4605      	mov	r5, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	4616      	mov	r6, r2
 80059ae:	d505      	bpl.n	80059bc <__swrite+0x1e>
 80059b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b4:	2302      	movs	r3, #2
 80059b6:	2200      	movs	r2, #0
 80059b8:	f000 f84e 	bl	8005a58 <_lseek_r>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	4632      	mov	r2, r6
 80059ca:	463b      	mov	r3, r7
 80059cc:	4628      	mov	r0, r5
 80059ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059d2:	f000 b865 	b.w	8005aa0 <_write_r>

080059d6 <__sseek>:
 80059d6:	b510      	push	{r4, lr}
 80059d8:	460c      	mov	r4, r1
 80059da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059de:	f000 f83b 	bl	8005a58 <_lseek_r>
 80059e2:	1c43      	adds	r3, r0, #1
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	bf15      	itete	ne
 80059e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059f2:	81a3      	strheq	r3, [r4, #12]
 80059f4:	bf18      	it	ne
 80059f6:	81a3      	strhne	r3, [r4, #12]
 80059f8:	bd10      	pop	{r4, pc}

080059fa <__sclose>:
 80059fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fe:	f000 b81b 	b.w	8005a38 <_close_r>

08005a02 <memset>:
 8005a02:	4402      	add	r2, r0
 8005a04:	4603      	mov	r3, r0
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d100      	bne.n	8005a0c <memset+0xa>
 8005a0a:	4770      	bx	lr
 8005a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a10:	e7f9      	b.n	8005a06 <memset+0x4>

08005a12 <strncpy>:
 8005a12:	b510      	push	{r4, lr}
 8005a14:	3901      	subs	r1, #1
 8005a16:	4603      	mov	r3, r0
 8005a18:	b132      	cbz	r2, 8005a28 <strncpy+0x16>
 8005a1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a1e:	f803 4b01 	strb.w	r4, [r3], #1
 8005a22:	3a01      	subs	r2, #1
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	d1f7      	bne.n	8005a18 <strncpy+0x6>
 8005a28:	441a      	add	r2, r3
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <strncpy+0x20>
 8005a30:	bd10      	pop	{r4, pc}
 8005a32:	f803 1b01 	strb.w	r1, [r3], #1
 8005a36:	e7f9      	b.n	8005a2c <strncpy+0x1a>

08005a38 <_close_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	@ (8005a54 <_close_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7fb fde0 	bl	8001608 <_close>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_close_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_close_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	20002340 	.word	0x20002340

08005a58 <_lseek_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d07      	ldr	r5, [pc, #28]	@ (8005a78 <_lseek_r+0x20>)
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fb fdf5 	bl	8001656 <_lseek>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_lseek_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_lseek_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20002340 	.word	0x20002340

08005a7c <_read_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	@ (8005a9c <_read_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb fd83 	bl	8001596 <_read>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_read_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_read_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20002340 	.word	0x20002340

08005aa0 <_write_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	@ (8005ac0 <_write_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fb fd8e 	bl	80015d0 <_write>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_write_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_write_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20002340 	.word	0x20002340

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	@ (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000024 	.word	0x20000024

08005ad0 <__libc_init_array>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b08 <__libc_init_array+0x38>)
 8005ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8005b0c <__libc_init_array+0x3c>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	2600      	movs	r6, #0
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	d109      	bne.n	8005af4 <__libc_init_array+0x24>
 8005ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8005b10 <__libc_init_array+0x40>)
 8005ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8005b14 <__libc_init_array+0x44>)
 8005ae4:	f000 fe48 	bl	8006778 <_init>
 8005ae8:	1b64      	subs	r4, r4, r5
 8005aea:	10a4      	asrs	r4, r4, #2
 8005aec:	2600      	movs	r6, #0
 8005aee:	42a6      	cmp	r6, r4
 8005af0:	d105      	bne.n	8005afe <__libc_init_array+0x2e>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af8:	4798      	blx	r3
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7ee      	b.n	8005adc <__libc_init_array+0xc>
 8005afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b02:	4798      	blx	r3
 8005b04:	3601      	adds	r6, #1
 8005b06:	e7f2      	b.n	8005aee <__libc_init_array+0x1e>
 8005b08:	08006b68 	.word	0x08006b68
 8005b0c:	08006b68 	.word	0x08006b68
 8005b10:	08006b68 	.word	0x08006b68
 8005b14:	08006b6c 	.word	0x08006b6c

08005b18 <__retarget_lock_init_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_acquire_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <__retarget_lock_release_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <memcpy>:
 8005b1e:	440a      	add	r2, r1
 8005b20:	4291      	cmp	r1, r2
 8005b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b26:	d100      	bne.n	8005b2a <memcpy+0xc>
 8005b28:	4770      	bx	lr
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b34:	4291      	cmp	r1, r2
 8005b36:	d1f9      	bne.n	8005b2c <memcpy+0xe>
 8005b38:	bd10      	pop	{r4, pc}
	...

08005b3c <__assert_func>:
 8005b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b3e:	4614      	mov	r4, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <__assert_func+0x2c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4605      	mov	r5, r0
 8005b48:	68d8      	ldr	r0, [r3, #12]
 8005b4a:	b954      	cbnz	r4, 8005b62 <__assert_func+0x26>
 8005b4c:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <__assert_func+0x30>)
 8005b4e:	461c      	mov	r4, r3
 8005b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b54:	9100      	str	r1, [sp, #0]
 8005b56:	462b      	mov	r3, r5
 8005b58:	4905      	ldr	r1, [pc, #20]	@ (8005b70 <__assert_func+0x34>)
 8005b5a:	f000 f9b9 	bl	8005ed0 <fiprintf>
 8005b5e:	f000 f9d9 	bl	8005f14 <abort>
 8005b62:	4b04      	ldr	r3, [pc, #16]	@ (8005b74 <__assert_func+0x38>)
 8005b64:	e7f4      	b.n	8005b50 <__assert_func+0x14>
 8005b66:	bf00      	nop
 8005b68:	20000024 	.word	0x20000024
 8005b6c:	08006b2a 	.word	0x08006b2a
 8005b70:	08006afc 	.word	0x08006afc
 8005b74:	08006aef 	.word	0x08006aef

08005b78 <_free_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	d041      	beq.n	8005c04 <_free_r+0x8c>
 8005b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b84:	1f0c      	subs	r4, r1, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfb8      	it	lt
 8005b8a:	18e4      	addlt	r4, r4, r3
 8005b8c:	f000 f8e8 	bl	8005d60 <__malloc_lock>
 8005b90:	4a1d      	ldr	r2, [pc, #116]	@ (8005c08 <_free_r+0x90>)
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	b933      	cbnz	r3, 8005ba4 <_free_r+0x2c>
 8005b96:	6063      	str	r3, [r4, #4]
 8005b98:	6014      	str	r4, [r2, #0]
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba0:	f000 b8e4 	b.w	8005d6c <__malloc_unlock>
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d908      	bls.n	8005bba <_free_r+0x42>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	1821      	adds	r1, r4, r0
 8005bac:	428b      	cmp	r3, r1
 8005bae:	bf01      	itttt	eq
 8005bb0:	6819      	ldreq	r1, [r3, #0]
 8005bb2:	685b      	ldreq	r3, [r3, #4]
 8005bb4:	1809      	addeq	r1, r1, r0
 8005bb6:	6021      	streq	r1, [r4, #0]
 8005bb8:	e7ed      	b.n	8005b96 <_free_r+0x1e>
 8005bba:	461a      	mov	r2, r3
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	b10b      	cbz	r3, 8005bc4 <_free_r+0x4c>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d9fa      	bls.n	8005bba <_free_r+0x42>
 8005bc4:	6811      	ldr	r1, [r2, #0]
 8005bc6:	1850      	adds	r0, r2, r1
 8005bc8:	42a0      	cmp	r0, r4
 8005bca:	d10b      	bne.n	8005be4 <_free_r+0x6c>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	4401      	add	r1, r0
 8005bd0:	1850      	adds	r0, r2, r1
 8005bd2:	4283      	cmp	r3, r0
 8005bd4:	6011      	str	r1, [r2, #0]
 8005bd6:	d1e0      	bne.n	8005b9a <_free_r+0x22>
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	6053      	str	r3, [r2, #4]
 8005bde:	4408      	add	r0, r1
 8005be0:	6010      	str	r0, [r2, #0]
 8005be2:	e7da      	b.n	8005b9a <_free_r+0x22>
 8005be4:	d902      	bls.n	8005bec <_free_r+0x74>
 8005be6:	230c      	movs	r3, #12
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	e7d6      	b.n	8005b9a <_free_r+0x22>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	1821      	adds	r1, r4, r0
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf04      	itt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	6063      	str	r3, [r4, #4]
 8005bfa:	bf04      	itt	eq
 8005bfc:	1809      	addeq	r1, r1, r0
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	6054      	str	r4, [r2, #4]
 8005c02:	e7ca      	b.n	8005b9a <_free_r+0x22>
 8005c04:	bd38      	pop	{r3, r4, r5, pc}
 8005c06:	bf00      	nop
 8005c08:	2000234c 	.word	0x2000234c

08005c0c <malloc>:
 8005c0c:	4b02      	ldr	r3, [pc, #8]	@ (8005c18 <malloc+0xc>)
 8005c0e:	4601      	mov	r1, r0
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	f000 b825 	b.w	8005c60 <_malloc_r>
 8005c16:	bf00      	nop
 8005c18:	20000024 	.word	0x20000024

08005c1c <sbrk_aligned>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c5c <sbrk_aligned+0x40>)
 8005c20:	460c      	mov	r4, r1
 8005c22:	6831      	ldr	r1, [r6, #0]
 8005c24:	4605      	mov	r5, r0
 8005c26:	b911      	cbnz	r1, 8005c2e <sbrk_aligned+0x12>
 8005c28:	f000 f964 	bl	8005ef4 <_sbrk_r>
 8005c2c:	6030      	str	r0, [r6, #0]
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f000 f95f 	bl	8005ef4 <_sbrk_r>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	d103      	bne.n	8005c42 <sbrk_aligned+0x26>
 8005c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c3e:	4620      	mov	r0, r4
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	1cc4      	adds	r4, r0, #3
 8005c44:	f024 0403 	bic.w	r4, r4, #3
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d0f8      	beq.n	8005c3e <sbrk_aligned+0x22>
 8005c4c:	1a21      	subs	r1, r4, r0
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f950 	bl	8005ef4 <_sbrk_r>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d1f2      	bne.n	8005c3e <sbrk_aligned+0x22>
 8005c58:	e7ef      	b.n	8005c3a <sbrk_aligned+0x1e>
 8005c5a:	bf00      	nop
 8005c5c:	20002348 	.word	0x20002348

08005c60 <_malloc_r>:
 8005c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c64:	1ccd      	adds	r5, r1, #3
 8005c66:	f025 0503 	bic.w	r5, r5, #3
 8005c6a:	3508      	adds	r5, #8
 8005c6c:	2d0c      	cmp	r5, #12
 8005c6e:	bf38      	it	cc
 8005c70:	250c      	movcc	r5, #12
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	4606      	mov	r6, r0
 8005c76:	db01      	blt.n	8005c7c <_malloc_r+0x1c>
 8005c78:	42a9      	cmp	r1, r5
 8005c7a:	d904      	bls.n	8005c86 <_malloc_r+0x26>
 8005c7c:	230c      	movs	r3, #12
 8005c7e:	6033      	str	r3, [r6, #0]
 8005c80:	2000      	movs	r0, #0
 8005c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d5c <_malloc_r+0xfc>
 8005c8a:	f000 f869 	bl	8005d60 <__malloc_lock>
 8005c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c92:	461c      	mov	r4, r3
 8005c94:	bb44      	cbnz	r4, 8005ce8 <_malloc_r+0x88>
 8005c96:	4629      	mov	r1, r5
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff ffbf 	bl	8005c1c <sbrk_aligned>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	d158      	bne.n	8005d56 <_malloc_r+0xf6>
 8005ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ca8:	4627      	mov	r7, r4
 8005caa:	2f00      	cmp	r7, #0
 8005cac:	d143      	bne.n	8005d36 <_malloc_r+0xd6>
 8005cae:	2c00      	cmp	r4, #0
 8005cb0:	d04b      	beq.n	8005d4a <_malloc_r+0xea>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	eb04 0903 	add.w	r9, r4, r3
 8005cbc:	f000 f91a 	bl	8005ef4 <_sbrk_r>
 8005cc0:	4581      	cmp	r9, r0
 8005cc2:	d142      	bne.n	8005d4a <_malloc_r+0xea>
 8005cc4:	6821      	ldr	r1, [r4, #0]
 8005cc6:	1a6d      	subs	r5, r5, r1
 8005cc8:	4629      	mov	r1, r5
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7ff ffa6 	bl	8005c1c <sbrk_aligned>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d03a      	beq.n	8005d4a <_malloc_r+0xea>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	442b      	add	r3, r5
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	f8d8 3000 	ldr.w	r3, [r8]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	bb62      	cbnz	r2, 8005d3c <_malloc_r+0xdc>
 8005ce2:	f8c8 7000 	str.w	r7, [r8]
 8005ce6:	e00f      	b.n	8005d08 <_malloc_r+0xa8>
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	1b52      	subs	r2, r2, r5
 8005cec:	d420      	bmi.n	8005d30 <_malloc_r+0xd0>
 8005cee:	2a0b      	cmp	r2, #11
 8005cf0:	d917      	bls.n	8005d22 <_malloc_r+0xc2>
 8005cf2:	1961      	adds	r1, r4, r5
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	6025      	str	r5, [r4, #0]
 8005cf8:	bf18      	it	ne
 8005cfa:	6059      	strne	r1, [r3, #4]
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	bf08      	it	eq
 8005d00:	f8c8 1000 	streq.w	r1, [r8]
 8005d04:	5162      	str	r2, [r4, r5]
 8005d06:	604b      	str	r3, [r1, #4]
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 f82f 	bl	8005d6c <__malloc_unlock>
 8005d0e:	f104 000b 	add.w	r0, r4, #11
 8005d12:	1d23      	adds	r3, r4, #4
 8005d14:	f020 0007 	bic.w	r0, r0, #7
 8005d18:	1ac2      	subs	r2, r0, r3
 8005d1a:	bf1c      	itt	ne
 8005d1c:	1a1b      	subne	r3, r3, r0
 8005d1e:	50a3      	strne	r3, [r4, r2]
 8005d20:	e7af      	b.n	8005c82 <_malloc_r+0x22>
 8005d22:	6862      	ldr	r2, [r4, #4]
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	bf0c      	ite	eq
 8005d28:	f8c8 2000 	streq.w	r2, [r8]
 8005d2c:	605a      	strne	r2, [r3, #4]
 8005d2e:	e7eb      	b.n	8005d08 <_malloc_r+0xa8>
 8005d30:	4623      	mov	r3, r4
 8005d32:	6864      	ldr	r4, [r4, #4]
 8005d34:	e7ae      	b.n	8005c94 <_malloc_r+0x34>
 8005d36:	463c      	mov	r4, r7
 8005d38:	687f      	ldr	r7, [r7, #4]
 8005d3a:	e7b6      	b.n	8005caa <_malloc_r+0x4a>
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	d1fb      	bne.n	8005d3c <_malloc_r+0xdc>
 8005d44:	2300      	movs	r3, #0
 8005d46:	6053      	str	r3, [r2, #4]
 8005d48:	e7de      	b.n	8005d08 <_malloc_r+0xa8>
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f000 f80c 	bl	8005d6c <__malloc_unlock>
 8005d54:	e794      	b.n	8005c80 <_malloc_r+0x20>
 8005d56:	6005      	str	r5, [r0, #0]
 8005d58:	e7d6      	b.n	8005d08 <_malloc_r+0xa8>
 8005d5a:	bf00      	nop
 8005d5c:	2000234c 	.word	0x2000234c

08005d60 <__malloc_lock>:
 8005d60:	4801      	ldr	r0, [pc, #4]	@ (8005d68 <__malloc_lock+0x8>)
 8005d62:	f7ff beda 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 8005d66:	bf00      	nop
 8005d68:	20002344 	.word	0x20002344

08005d6c <__malloc_unlock>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	@ (8005d74 <__malloc_unlock+0x8>)
 8005d6e:	f7ff bed5 	b.w	8005b1c <__retarget_lock_release_recursive>
 8005d72:	bf00      	nop
 8005d74:	20002344 	.word	0x20002344

08005d78 <__sflush_r>:
 8005d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d80:	0716      	lsls	r6, r2, #28
 8005d82:	4605      	mov	r5, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	d454      	bmi.n	8005e32 <__sflush_r+0xba>
 8005d88:	684b      	ldr	r3, [r1, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dc02      	bgt.n	8005d94 <__sflush_r+0x1c>
 8005d8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	dd48      	ble.n	8005e26 <__sflush_r+0xae>
 8005d94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d96:	2e00      	cmp	r6, #0
 8005d98:	d045      	beq.n	8005e26 <__sflush_r+0xae>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005da0:	682f      	ldr	r7, [r5, #0]
 8005da2:	6a21      	ldr	r1, [r4, #32]
 8005da4:	602b      	str	r3, [r5, #0]
 8005da6:	d030      	beq.n	8005e0a <__sflush_r+0x92>
 8005da8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	0759      	lsls	r1, r3, #29
 8005dae:	d505      	bpl.n	8005dbc <__sflush_r+0x44>
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005db6:	b10b      	cbz	r3, 8005dbc <__sflush_r+0x44>
 8005db8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dc0:	6a21      	ldr	r1, [r4, #32]
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b0      	blx	r6
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	d106      	bne.n	8005dda <__sflush_r+0x62>
 8005dcc:	6829      	ldr	r1, [r5, #0]
 8005dce:	291d      	cmp	r1, #29
 8005dd0:	d82b      	bhi.n	8005e2a <__sflush_r+0xb2>
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8005e7c <__sflush_r+0x104>)
 8005dd4:	410a      	asrs	r2, r1
 8005dd6:	07d6      	lsls	r6, r2, #31
 8005dd8:	d427      	bmi.n	8005e2a <__sflush_r+0xb2>
 8005dda:	2200      	movs	r2, #0
 8005ddc:	6062      	str	r2, [r4, #4]
 8005dde:	04d9      	lsls	r1, r3, #19
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	6022      	str	r2, [r4, #0]
 8005de4:	d504      	bpl.n	8005df0 <__sflush_r+0x78>
 8005de6:	1c42      	adds	r2, r0, #1
 8005de8:	d101      	bne.n	8005dee <__sflush_r+0x76>
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	b903      	cbnz	r3, 8005df0 <__sflush_r+0x78>
 8005dee:	6560      	str	r0, [r4, #84]	@ 0x54
 8005df0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005df2:	602f      	str	r7, [r5, #0]
 8005df4:	b1b9      	cbz	r1, 8005e26 <__sflush_r+0xae>
 8005df6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dfa:	4299      	cmp	r1, r3
 8005dfc:	d002      	beq.n	8005e04 <__sflush_r+0x8c>
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f7ff feba 	bl	8005b78 <_free_r>
 8005e04:	2300      	movs	r3, #0
 8005e06:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e08:	e00d      	b.n	8005e26 <__sflush_r+0xae>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	47b0      	blx	r6
 8005e10:	4602      	mov	r2, r0
 8005e12:	1c50      	adds	r0, r2, #1
 8005e14:	d1c9      	bne.n	8005daa <__sflush_r+0x32>
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0c6      	beq.n	8005daa <__sflush_r+0x32>
 8005e1c:	2b1d      	cmp	r3, #29
 8005e1e:	d001      	beq.n	8005e24 <__sflush_r+0xac>
 8005e20:	2b16      	cmp	r3, #22
 8005e22:	d11e      	bne.n	8005e62 <__sflush_r+0xea>
 8005e24:	602f      	str	r7, [r5, #0]
 8005e26:	2000      	movs	r0, #0
 8005e28:	e022      	b.n	8005e70 <__sflush_r+0xf8>
 8005e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e2e:	b21b      	sxth	r3, r3
 8005e30:	e01b      	b.n	8005e6a <__sflush_r+0xf2>
 8005e32:	690f      	ldr	r7, [r1, #16]
 8005e34:	2f00      	cmp	r7, #0
 8005e36:	d0f6      	beq.n	8005e26 <__sflush_r+0xae>
 8005e38:	0793      	lsls	r3, r2, #30
 8005e3a:	680e      	ldr	r6, [r1, #0]
 8005e3c:	bf08      	it	eq
 8005e3e:	694b      	ldreq	r3, [r1, #20]
 8005e40:	600f      	str	r7, [r1, #0]
 8005e42:	bf18      	it	ne
 8005e44:	2300      	movne	r3, #0
 8005e46:	eba6 0807 	sub.w	r8, r6, r7
 8005e4a:	608b      	str	r3, [r1, #8]
 8005e4c:	f1b8 0f00 	cmp.w	r8, #0
 8005e50:	dde9      	ble.n	8005e26 <__sflush_r+0xae>
 8005e52:	6a21      	ldr	r1, [r4, #32]
 8005e54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e56:	4643      	mov	r3, r8
 8005e58:	463a      	mov	r2, r7
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b0      	blx	r6
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	dc08      	bgt.n	8005e74 <__sflush_r+0xfc>
 8005e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e74:	4407      	add	r7, r0
 8005e76:	eba8 0800 	sub.w	r8, r8, r0
 8005e7a:	e7e7      	b.n	8005e4c <__sflush_r+0xd4>
 8005e7c:	dfbffffe 	.word	0xdfbffffe

08005e80 <_fflush_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	4605      	mov	r5, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	b913      	cbnz	r3, 8005e90 <_fflush_r+0x10>
 8005e8a:	2500      	movs	r5, #0
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	b118      	cbz	r0, 8005e9a <_fflush_r+0x1a>
 8005e92:	6a03      	ldr	r3, [r0, #32]
 8005e94:	b90b      	cbnz	r3, 8005e9a <_fflush_r+0x1a>
 8005e96:	f7ff fd3b 	bl	8005910 <__sinit>
 8005e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f3      	beq.n	8005e8a <_fflush_r+0xa>
 8005ea2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ea4:	07d0      	lsls	r0, r2, #31
 8005ea6:	d404      	bmi.n	8005eb2 <_fflush_r+0x32>
 8005ea8:	0599      	lsls	r1, r3, #22
 8005eaa:	d402      	bmi.n	8005eb2 <_fflush_r+0x32>
 8005eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eae:	f7ff fe34 	bl	8005b1a <__retarget_lock_acquire_recursive>
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	f7ff ff5f 	bl	8005d78 <__sflush_r>
 8005eba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ebc:	07da      	lsls	r2, r3, #31
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	d4e4      	bmi.n	8005e8c <_fflush_r+0xc>
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	059b      	lsls	r3, r3, #22
 8005ec6:	d4e1      	bmi.n	8005e8c <_fflush_r+0xc>
 8005ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eca:	f7ff fe27 	bl	8005b1c <__retarget_lock_release_recursive>
 8005ece:	e7dd      	b.n	8005e8c <_fflush_r+0xc>

08005ed0 <fiprintf>:
 8005ed0:	b40e      	push	{r1, r2, r3}
 8005ed2:	b503      	push	{r0, r1, lr}
 8005ed4:	4601      	mov	r1, r0
 8005ed6:	ab03      	add	r3, sp, #12
 8005ed8:	4805      	ldr	r0, [pc, #20]	@ (8005ef0 <fiprintf+0x20>)
 8005eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ede:	6800      	ldr	r0, [r0, #0]
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	f000 f847 	bl	8005f74 <_vfiprintf_r>
 8005ee6:	b002      	add	sp, #8
 8005ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eec:	b003      	add	sp, #12
 8005eee:	4770      	bx	lr
 8005ef0:	20000024 	.word	0x20000024

08005ef4 <_sbrk_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4d06      	ldr	r5, [pc, #24]	@ (8005f10 <_sbrk_r+0x1c>)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4604      	mov	r4, r0
 8005efc:	4608      	mov	r0, r1
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	f7fb fbb6 	bl	8001670 <_sbrk>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_sbrk_r+0x1a>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_sbrk_r+0x1a>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	20002340 	.word	0x20002340

08005f14 <abort>:
 8005f14:	b508      	push	{r3, lr}
 8005f16:	2006      	movs	r0, #6
 8005f18:	f000 fb8e 	bl	8006638 <raise>
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	f7fb fb2f 	bl	8001580 <_exit>

08005f22 <__sfputc_r>:
 8005f22:	6893      	ldr	r3, [r2, #8]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	b410      	push	{r4}
 8005f2a:	6093      	str	r3, [r2, #8]
 8005f2c:	da08      	bge.n	8005f40 <__sfputc_r+0x1e>
 8005f2e:	6994      	ldr	r4, [r2, #24]
 8005f30:	42a3      	cmp	r3, r4
 8005f32:	db01      	blt.n	8005f38 <__sfputc_r+0x16>
 8005f34:	290a      	cmp	r1, #10
 8005f36:	d103      	bne.n	8005f40 <__sfputc_r+0x1e>
 8005f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f3c:	f000 bac0 	b.w	80064c0 <__swbuf_r>
 8005f40:	6813      	ldr	r3, [r2, #0]
 8005f42:	1c58      	adds	r0, r3, #1
 8005f44:	6010      	str	r0, [r2, #0]
 8005f46:	7019      	strb	r1, [r3, #0]
 8005f48:	4608      	mov	r0, r1
 8005f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <__sfputs_r>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	4606      	mov	r6, r0
 8005f54:	460f      	mov	r7, r1
 8005f56:	4614      	mov	r4, r2
 8005f58:	18d5      	adds	r5, r2, r3
 8005f5a:	42ac      	cmp	r4, r5
 8005f5c:	d101      	bne.n	8005f62 <__sfputs_r+0x12>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e007      	b.n	8005f72 <__sfputs_r+0x22>
 8005f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f66:	463a      	mov	r2, r7
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff ffda 	bl	8005f22 <__sfputc_r>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	d1f3      	bne.n	8005f5a <__sfputs_r+0xa>
 8005f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f74 <_vfiprintf_r>:
 8005f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	460d      	mov	r5, r1
 8005f7a:	b09d      	sub	sp, #116	@ 0x74
 8005f7c:	4614      	mov	r4, r2
 8005f7e:	4698      	mov	r8, r3
 8005f80:	4606      	mov	r6, r0
 8005f82:	b118      	cbz	r0, 8005f8c <_vfiprintf_r+0x18>
 8005f84:	6a03      	ldr	r3, [r0, #32]
 8005f86:	b90b      	cbnz	r3, 8005f8c <_vfiprintf_r+0x18>
 8005f88:	f7ff fcc2 	bl	8005910 <__sinit>
 8005f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f8e:	07d9      	lsls	r1, r3, #31
 8005f90:	d405      	bmi.n	8005f9e <_vfiprintf_r+0x2a>
 8005f92:	89ab      	ldrh	r3, [r5, #12]
 8005f94:	059a      	lsls	r2, r3, #22
 8005f96:	d402      	bmi.n	8005f9e <_vfiprintf_r+0x2a>
 8005f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f9a:	f7ff fdbe 	bl	8005b1a <__retarget_lock_acquire_recursive>
 8005f9e:	89ab      	ldrh	r3, [r5, #12]
 8005fa0:	071b      	lsls	r3, r3, #28
 8005fa2:	d501      	bpl.n	8005fa8 <_vfiprintf_r+0x34>
 8005fa4:	692b      	ldr	r3, [r5, #16]
 8005fa6:	b99b      	cbnz	r3, 8005fd0 <_vfiprintf_r+0x5c>
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 fac6 	bl	800653c <__swsetup_r>
 8005fb0:	b170      	cbz	r0, 8005fd0 <_vfiprintf_r+0x5c>
 8005fb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fb4:	07dc      	lsls	r4, r3, #31
 8005fb6:	d504      	bpl.n	8005fc2 <_vfiprintf_r+0x4e>
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbc:	b01d      	add	sp, #116	@ 0x74
 8005fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc2:	89ab      	ldrh	r3, [r5, #12]
 8005fc4:	0598      	lsls	r0, r3, #22
 8005fc6:	d4f7      	bmi.n	8005fb8 <_vfiprintf_r+0x44>
 8005fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fca:	f7ff fda7 	bl	8005b1c <__retarget_lock_release_recursive>
 8005fce:	e7f3      	b.n	8005fb8 <_vfiprintf_r+0x44>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fde:	2330      	movs	r3, #48	@ 0x30
 8005fe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006190 <_vfiprintf_r+0x21c>
 8005fe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fe8:	f04f 0901 	mov.w	r9, #1
 8005fec:	4623      	mov	r3, r4
 8005fee:	469a      	mov	sl, r3
 8005ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ff4:	b10a      	cbz	r2, 8005ffa <_vfiprintf_r+0x86>
 8005ff6:	2a25      	cmp	r2, #37	@ 0x25
 8005ff8:	d1f9      	bne.n	8005fee <_vfiprintf_r+0x7a>
 8005ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8005ffe:	d00b      	beq.n	8006018 <_vfiprintf_r+0xa4>
 8006000:	465b      	mov	r3, fp
 8006002:	4622      	mov	r2, r4
 8006004:	4629      	mov	r1, r5
 8006006:	4630      	mov	r0, r6
 8006008:	f7ff ffa2 	bl	8005f50 <__sfputs_r>
 800600c:	3001      	adds	r0, #1
 800600e:	f000 80a7 	beq.w	8006160 <_vfiprintf_r+0x1ec>
 8006012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006014:	445a      	add	r2, fp
 8006016:	9209      	str	r2, [sp, #36]	@ 0x24
 8006018:	f89a 3000 	ldrb.w	r3, [sl]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 809f 	beq.w	8006160 <_vfiprintf_r+0x1ec>
 8006022:	2300      	movs	r3, #0
 8006024:	f04f 32ff 	mov.w	r2, #4294967295
 8006028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800602c:	f10a 0a01 	add.w	sl, sl, #1
 8006030:	9304      	str	r3, [sp, #16]
 8006032:	9307      	str	r3, [sp, #28]
 8006034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006038:	931a      	str	r3, [sp, #104]	@ 0x68
 800603a:	4654      	mov	r4, sl
 800603c:	2205      	movs	r2, #5
 800603e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006042:	4853      	ldr	r0, [pc, #332]	@ (8006190 <_vfiprintf_r+0x21c>)
 8006044:	f7fa f8cc 	bl	80001e0 <memchr>
 8006048:	9a04      	ldr	r2, [sp, #16]
 800604a:	b9d8      	cbnz	r0, 8006084 <_vfiprintf_r+0x110>
 800604c:	06d1      	lsls	r1, r2, #27
 800604e:	bf44      	itt	mi
 8006050:	2320      	movmi	r3, #32
 8006052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006056:	0713      	lsls	r3, r2, #28
 8006058:	bf44      	itt	mi
 800605a:	232b      	movmi	r3, #43	@ 0x2b
 800605c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006060:	f89a 3000 	ldrb.w	r3, [sl]
 8006064:	2b2a      	cmp	r3, #42	@ 0x2a
 8006066:	d015      	beq.n	8006094 <_vfiprintf_r+0x120>
 8006068:	9a07      	ldr	r2, [sp, #28]
 800606a:	4654      	mov	r4, sl
 800606c:	2000      	movs	r0, #0
 800606e:	f04f 0c0a 	mov.w	ip, #10
 8006072:	4621      	mov	r1, r4
 8006074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006078:	3b30      	subs	r3, #48	@ 0x30
 800607a:	2b09      	cmp	r3, #9
 800607c:	d94b      	bls.n	8006116 <_vfiprintf_r+0x1a2>
 800607e:	b1b0      	cbz	r0, 80060ae <_vfiprintf_r+0x13a>
 8006080:	9207      	str	r2, [sp, #28]
 8006082:	e014      	b.n	80060ae <_vfiprintf_r+0x13a>
 8006084:	eba0 0308 	sub.w	r3, r0, r8
 8006088:	fa09 f303 	lsl.w	r3, r9, r3
 800608c:	4313      	orrs	r3, r2
 800608e:	9304      	str	r3, [sp, #16]
 8006090:	46a2      	mov	sl, r4
 8006092:	e7d2      	b.n	800603a <_vfiprintf_r+0xc6>
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	1d19      	adds	r1, r3, #4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	9103      	str	r1, [sp, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfbb      	ittet	lt
 80060a0:	425b      	neglt	r3, r3
 80060a2:	f042 0202 	orrlt.w	r2, r2, #2
 80060a6:	9307      	strge	r3, [sp, #28]
 80060a8:	9307      	strlt	r3, [sp, #28]
 80060aa:	bfb8      	it	lt
 80060ac:	9204      	strlt	r2, [sp, #16]
 80060ae:	7823      	ldrb	r3, [r4, #0]
 80060b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80060b2:	d10a      	bne.n	80060ca <_vfiprintf_r+0x156>
 80060b4:	7863      	ldrb	r3, [r4, #1]
 80060b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80060b8:	d132      	bne.n	8006120 <_vfiprintf_r+0x1ac>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	9203      	str	r2, [sp, #12]
 80060c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060c6:	3402      	adds	r4, #2
 80060c8:	9305      	str	r3, [sp, #20]
 80060ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061a0 <_vfiprintf_r+0x22c>
 80060ce:	7821      	ldrb	r1, [r4, #0]
 80060d0:	2203      	movs	r2, #3
 80060d2:	4650      	mov	r0, sl
 80060d4:	f7fa f884 	bl	80001e0 <memchr>
 80060d8:	b138      	cbz	r0, 80060ea <_vfiprintf_r+0x176>
 80060da:	9b04      	ldr	r3, [sp, #16]
 80060dc:	eba0 000a 	sub.w	r0, r0, sl
 80060e0:	2240      	movs	r2, #64	@ 0x40
 80060e2:	4082      	lsls	r2, r0
 80060e4:	4313      	orrs	r3, r2
 80060e6:	3401      	adds	r4, #1
 80060e8:	9304      	str	r3, [sp, #16]
 80060ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ee:	4829      	ldr	r0, [pc, #164]	@ (8006194 <_vfiprintf_r+0x220>)
 80060f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060f4:	2206      	movs	r2, #6
 80060f6:	f7fa f873 	bl	80001e0 <memchr>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d03f      	beq.n	800617e <_vfiprintf_r+0x20a>
 80060fe:	4b26      	ldr	r3, [pc, #152]	@ (8006198 <_vfiprintf_r+0x224>)
 8006100:	bb1b      	cbnz	r3, 800614a <_vfiprintf_r+0x1d6>
 8006102:	9b03      	ldr	r3, [sp, #12]
 8006104:	3307      	adds	r3, #7
 8006106:	f023 0307 	bic.w	r3, r3, #7
 800610a:	3308      	adds	r3, #8
 800610c:	9303      	str	r3, [sp, #12]
 800610e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006110:	443b      	add	r3, r7
 8006112:	9309      	str	r3, [sp, #36]	@ 0x24
 8006114:	e76a      	b.n	8005fec <_vfiprintf_r+0x78>
 8006116:	fb0c 3202 	mla	r2, ip, r2, r3
 800611a:	460c      	mov	r4, r1
 800611c:	2001      	movs	r0, #1
 800611e:	e7a8      	b.n	8006072 <_vfiprintf_r+0xfe>
 8006120:	2300      	movs	r3, #0
 8006122:	3401      	adds	r4, #1
 8006124:	9305      	str	r3, [sp, #20]
 8006126:	4619      	mov	r1, r3
 8006128:	f04f 0c0a 	mov.w	ip, #10
 800612c:	4620      	mov	r0, r4
 800612e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006132:	3a30      	subs	r2, #48	@ 0x30
 8006134:	2a09      	cmp	r2, #9
 8006136:	d903      	bls.n	8006140 <_vfiprintf_r+0x1cc>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0c6      	beq.n	80060ca <_vfiprintf_r+0x156>
 800613c:	9105      	str	r1, [sp, #20]
 800613e:	e7c4      	b.n	80060ca <_vfiprintf_r+0x156>
 8006140:	fb0c 2101 	mla	r1, ip, r1, r2
 8006144:	4604      	mov	r4, r0
 8006146:	2301      	movs	r3, #1
 8006148:	e7f0      	b.n	800612c <_vfiprintf_r+0x1b8>
 800614a:	ab03      	add	r3, sp, #12
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	462a      	mov	r2, r5
 8006150:	4b12      	ldr	r3, [pc, #72]	@ (800619c <_vfiprintf_r+0x228>)
 8006152:	a904      	add	r1, sp, #16
 8006154:	4630      	mov	r0, r6
 8006156:	f3af 8000 	nop.w
 800615a:	4607      	mov	r7, r0
 800615c:	1c78      	adds	r0, r7, #1
 800615e:	d1d6      	bne.n	800610e <_vfiprintf_r+0x19a>
 8006160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006162:	07d9      	lsls	r1, r3, #31
 8006164:	d405      	bmi.n	8006172 <_vfiprintf_r+0x1fe>
 8006166:	89ab      	ldrh	r3, [r5, #12]
 8006168:	059a      	lsls	r2, r3, #22
 800616a:	d402      	bmi.n	8006172 <_vfiprintf_r+0x1fe>
 800616c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800616e:	f7ff fcd5 	bl	8005b1c <__retarget_lock_release_recursive>
 8006172:	89ab      	ldrh	r3, [r5, #12]
 8006174:	065b      	lsls	r3, r3, #25
 8006176:	f53f af1f 	bmi.w	8005fb8 <_vfiprintf_r+0x44>
 800617a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800617c:	e71e      	b.n	8005fbc <_vfiprintf_r+0x48>
 800617e:	ab03      	add	r3, sp, #12
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	462a      	mov	r2, r5
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <_vfiprintf_r+0x228>)
 8006186:	a904      	add	r1, sp, #16
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f879 	bl	8006280 <_printf_i>
 800618e:	e7e4      	b.n	800615a <_vfiprintf_r+0x1e6>
 8006190:	08006b2b 	.word	0x08006b2b
 8006194:	08006b35 	.word	0x08006b35
 8006198:	00000000 	.word	0x00000000
 800619c:	08005f51 	.word	0x08005f51
 80061a0:	08006b31 	.word	0x08006b31

080061a4 <_printf_common>:
 80061a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a8:	4616      	mov	r6, r2
 80061aa:	4698      	mov	r8, r3
 80061ac:	688a      	ldr	r2, [r1, #8]
 80061ae:	690b      	ldr	r3, [r1, #16]
 80061b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061b4:	4293      	cmp	r3, r2
 80061b6:	bfb8      	it	lt
 80061b8:	4613      	movlt	r3, r2
 80061ba:	6033      	str	r3, [r6, #0]
 80061bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061c0:	4607      	mov	r7, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	b10a      	cbz	r2, 80061ca <_printf_common+0x26>
 80061c6:	3301      	adds	r3, #1
 80061c8:	6033      	str	r3, [r6, #0]
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	0699      	lsls	r1, r3, #26
 80061ce:	bf42      	ittt	mi
 80061d0:	6833      	ldrmi	r3, [r6, #0]
 80061d2:	3302      	addmi	r3, #2
 80061d4:	6033      	strmi	r3, [r6, #0]
 80061d6:	6825      	ldr	r5, [r4, #0]
 80061d8:	f015 0506 	ands.w	r5, r5, #6
 80061dc:	d106      	bne.n	80061ec <_printf_common+0x48>
 80061de:	f104 0a19 	add.w	sl, r4, #25
 80061e2:	68e3      	ldr	r3, [r4, #12]
 80061e4:	6832      	ldr	r2, [r6, #0]
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	42ab      	cmp	r3, r5
 80061ea:	dc26      	bgt.n	800623a <_printf_common+0x96>
 80061ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061f0:	6822      	ldr	r2, [r4, #0]
 80061f2:	3b00      	subs	r3, #0
 80061f4:	bf18      	it	ne
 80061f6:	2301      	movne	r3, #1
 80061f8:	0692      	lsls	r2, r2, #26
 80061fa:	d42b      	bmi.n	8006254 <_printf_common+0xb0>
 80061fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006200:	4641      	mov	r1, r8
 8006202:	4638      	mov	r0, r7
 8006204:	47c8      	blx	r9
 8006206:	3001      	adds	r0, #1
 8006208:	d01e      	beq.n	8006248 <_printf_common+0xa4>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	6922      	ldr	r2, [r4, #16]
 800620e:	f003 0306 	and.w	r3, r3, #6
 8006212:	2b04      	cmp	r3, #4
 8006214:	bf02      	ittt	eq
 8006216:	68e5      	ldreq	r5, [r4, #12]
 8006218:	6833      	ldreq	r3, [r6, #0]
 800621a:	1aed      	subeq	r5, r5, r3
 800621c:	68a3      	ldr	r3, [r4, #8]
 800621e:	bf0c      	ite	eq
 8006220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006224:	2500      	movne	r5, #0
 8006226:	4293      	cmp	r3, r2
 8006228:	bfc4      	itt	gt
 800622a:	1a9b      	subgt	r3, r3, r2
 800622c:	18ed      	addgt	r5, r5, r3
 800622e:	2600      	movs	r6, #0
 8006230:	341a      	adds	r4, #26
 8006232:	42b5      	cmp	r5, r6
 8006234:	d11a      	bne.n	800626c <_printf_common+0xc8>
 8006236:	2000      	movs	r0, #0
 8006238:	e008      	b.n	800624c <_printf_common+0xa8>
 800623a:	2301      	movs	r3, #1
 800623c:	4652      	mov	r2, sl
 800623e:	4641      	mov	r1, r8
 8006240:	4638      	mov	r0, r7
 8006242:	47c8      	blx	r9
 8006244:	3001      	adds	r0, #1
 8006246:	d103      	bne.n	8006250 <_printf_common+0xac>
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006250:	3501      	adds	r5, #1
 8006252:	e7c6      	b.n	80061e2 <_printf_common+0x3e>
 8006254:	18e1      	adds	r1, r4, r3
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	2030      	movs	r0, #48	@ 0x30
 800625a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800625e:	4422      	add	r2, r4
 8006260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006268:	3302      	adds	r3, #2
 800626a:	e7c7      	b.n	80061fc <_printf_common+0x58>
 800626c:	2301      	movs	r3, #1
 800626e:	4622      	mov	r2, r4
 8006270:	4641      	mov	r1, r8
 8006272:	4638      	mov	r0, r7
 8006274:	47c8      	blx	r9
 8006276:	3001      	adds	r0, #1
 8006278:	d0e6      	beq.n	8006248 <_printf_common+0xa4>
 800627a:	3601      	adds	r6, #1
 800627c:	e7d9      	b.n	8006232 <_printf_common+0x8e>
	...

08006280 <_printf_i>:
 8006280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006284:	7e0f      	ldrb	r7, [r1, #24]
 8006286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006288:	2f78      	cmp	r7, #120	@ 0x78
 800628a:	4691      	mov	r9, r2
 800628c:	4680      	mov	r8, r0
 800628e:	460c      	mov	r4, r1
 8006290:	469a      	mov	sl, r3
 8006292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006296:	d807      	bhi.n	80062a8 <_printf_i+0x28>
 8006298:	2f62      	cmp	r7, #98	@ 0x62
 800629a:	d80a      	bhi.n	80062b2 <_printf_i+0x32>
 800629c:	2f00      	cmp	r7, #0
 800629e:	f000 80d2 	beq.w	8006446 <_printf_i+0x1c6>
 80062a2:	2f58      	cmp	r7, #88	@ 0x58
 80062a4:	f000 80b9 	beq.w	800641a <_printf_i+0x19a>
 80062a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062b0:	e03a      	b.n	8006328 <_printf_i+0xa8>
 80062b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062b6:	2b15      	cmp	r3, #21
 80062b8:	d8f6      	bhi.n	80062a8 <_printf_i+0x28>
 80062ba:	a101      	add	r1, pc, #4	@ (adr r1, 80062c0 <_printf_i+0x40>)
 80062bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062c0:	08006319 	.word	0x08006319
 80062c4:	0800632d 	.word	0x0800632d
 80062c8:	080062a9 	.word	0x080062a9
 80062cc:	080062a9 	.word	0x080062a9
 80062d0:	080062a9 	.word	0x080062a9
 80062d4:	080062a9 	.word	0x080062a9
 80062d8:	0800632d 	.word	0x0800632d
 80062dc:	080062a9 	.word	0x080062a9
 80062e0:	080062a9 	.word	0x080062a9
 80062e4:	080062a9 	.word	0x080062a9
 80062e8:	080062a9 	.word	0x080062a9
 80062ec:	0800642d 	.word	0x0800642d
 80062f0:	08006357 	.word	0x08006357
 80062f4:	080063e7 	.word	0x080063e7
 80062f8:	080062a9 	.word	0x080062a9
 80062fc:	080062a9 	.word	0x080062a9
 8006300:	0800644f 	.word	0x0800644f
 8006304:	080062a9 	.word	0x080062a9
 8006308:	08006357 	.word	0x08006357
 800630c:	080062a9 	.word	0x080062a9
 8006310:	080062a9 	.word	0x080062a9
 8006314:	080063ef 	.word	0x080063ef
 8006318:	6833      	ldr	r3, [r6, #0]
 800631a:	1d1a      	adds	r2, r3, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6032      	str	r2, [r6, #0]
 8006320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006328:	2301      	movs	r3, #1
 800632a:	e09d      	b.n	8006468 <_printf_i+0x1e8>
 800632c:	6833      	ldr	r3, [r6, #0]
 800632e:	6820      	ldr	r0, [r4, #0]
 8006330:	1d19      	adds	r1, r3, #4
 8006332:	6031      	str	r1, [r6, #0]
 8006334:	0606      	lsls	r6, r0, #24
 8006336:	d501      	bpl.n	800633c <_printf_i+0xbc>
 8006338:	681d      	ldr	r5, [r3, #0]
 800633a:	e003      	b.n	8006344 <_printf_i+0xc4>
 800633c:	0645      	lsls	r5, r0, #25
 800633e:	d5fb      	bpl.n	8006338 <_printf_i+0xb8>
 8006340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006344:	2d00      	cmp	r5, #0
 8006346:	da03      	bge.n	8006350 <_printf_i+0xd0>
 8006348:	232d      	movs	r3, #45	@ 0x2d
 800634a:	426d      	negs	r5, r5
 800634c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006350:	4859      	ldr	r0, [pc, #356]	@ (80064b8 <_printf_i+0x238>)
 8006352:	230a      	movs	r3, #10
 8006354:	e011      	b.n	800637a <_printf_i+0xfa>
 8006356:	6821      	ldr	r1, [r4, #0]
 8006358:	6833      	ldr	r3, [r6, #0]
 800635a:	0608      	lsls	r0, r1, #24
 800635c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006360:	d402      	bmi.n	8006368 <_printf_i+0xe8>
 8006362:	0649      	lsls	r1, r1, #25
 8006364:	bf48      	it	mi
 8006366:	b2ad      	uxthmi	r5, r5
 8006368:	2f6f      	cmp	r7, #111	@ 0x6f
 800636a:	4853      	ldr	r0, [pc, #332]	@ (80064b8 <_printf_i+0x238>)
 800636c:	6033      	str	r3, [r6, #0]
 800636e:	bf14      	ite	ne
 8006370:	230a      	movne	r3, #10
 8006372:	2308      	moveq	r3, #8
 8006374:	2100      	movs	r1, #0
 8006376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800637a:	6866      	ldr	r6, [r4, #4]
 800637c:	60a6      	str	r6, [r4, #8]
 800637e:	2e00      	cmp	r6, #0
 8006380:	bfa2      	ittt	ge
 8006382:	6821      	ldrge	r1, [r4, #0]
 8006384:	f021 0104 	bicge.w	r1, r1, #4
 8006388:	6021      	strge	r1, [r4, #0]
 800638a:	b90d      	cbnz	r5, 8006390 <_printf_i+0x110>
 800638c:	2e00      	cmp	r6, #0
 800638e:	d04b      	beq.n	8006428 <_printf_i+0x1a8>
 8006390:	4616      	mov	r6, r2
 8006392:	fbb5 f1f3 	udiv	r1, r5, r3
 8006396:	fb03 5711 	mls	r7, r3, r1, r5
 800639a:	5dc7      	ldrb	r7, [r0, r7]
 800639c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063a0:	462f      	mov	r7, r5
 80063a2:	42bb      	cmp	r3, r7
 80063a4:	460d      	mov	r5, r1
 80063a6:	d9f4      	bls.n	8006392 <_printf_i+0x112>
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d10b      	bne.n	80063c4 <_printf_i+0x144>
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	07df      	lsls	r7, r3, #31
 80063b0:	d508      	bpl.n	80063c4 <_printf_i+0x144>
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	6861      	ldr	r1, [r4, #4]
 80063b6:	4299      	cmp	r1, r3
 80063b8:	bfde      	ittt	le
 80063ba:	2330      	movle	r3, #48	@ 0x30
 80063bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063c4:	1b92      	subs	r2, r2, r6
 80063c6:	6122      	str	r2, [r4, #16]
 80063c8:	f8cd a000 	str.w	sl, [sp]
 80063cc:	464b      	mov	r3, r9
 80063ce:	aa03      	add	r2, sp, #12
 80063d0:	4621      	mov	r1, r4
 80063d2:	4640      	mov	r0, r8
 80063d4:	f7ff fee6 	bl	80061a4 <_printf_common>
 80063d8:	3001      	adds	r0, #1
 80063da:	d14a      	bne.n	8006472 <_printf_i+0x1f2>
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	b004      	add	sp, #16
 80063e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	f043 0320 	orr.w	r3, r3, #32
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	4833      	ldr	r0, [pc, #204]	@ (80064bc <_printf_i+0x23c>)
 80063f0:	2778      	movs	r7, #120	@ 0x78
 80063f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	6831      	ldr	r1, [r6, #0]
 80063fa:	061f      	lsls	r7, r3, #24
 80063fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006400:	d402      	bmi.n	8006408 <_printf_i+0x188>
 8006402:	065f      	lsls	r7, r3, #25
 8006404:	bf48      	it	mi
 8006406:	b2ad      	uxthmi	r5, r5
 8006408:	6031      	str	r1, [r6, #0]
 800640a:	07d9      	lsls	r1, r3, #31
 800640c:	bf44      	itt	mi
 800640e:	f043 0320 	orrmi.w	r3, r3, #32
 8006412:	6023      	strmi	r3, [r4, #0]
 8006414:	b11d      	cbz	r5, 800641e <_printf_i+0x19e>
 8006416:	2310      	movs	r3, #16
 8006418:	e7ac      	b.n	8006374 <_printf_i+0xf4>
 800641a:	4827      	ldr	r0, [pc, #156]	@ (80064b8 <_printf_i+0x238>)
 800641c:	e7e9      	b.n	80063f2 <_printf_i+0x172>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	f023 0320 	bic.w	r3, r3, #32
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	e7f6      	b.n	8006416 <_printf_i+0x196>
 8006428:	4616      	mov	r6, r2
 800642a:	e7bd      	b.n	80063a8 <_printf_i+0x128>
 800642c:	6833      	ldr	r3, [r6, #0]
 800642e:	6825      	ldr	r5, [r4, #0]
 8006430:	6961      	ldr	r1, [r4, #20]
 8006432:	1d18      	adds	r0, r3, #4
 8006434:	6030      	str	r0, [r6, #0]
 8006436:	062e      	lsls	r6, r5, #24
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	d501      	bpl.n	8006440 <_printf_i+0x1c0>
 800643c:	6019      	str	r1, [r3, #0]
 800643e:	e002      	b.n	8006446 <_printf_i+0x1c6>
 8006440:	0668      	lsls	r0, r5, #25
 8006442:	d5fb      	bpl.n	800643c <_printf_i+0x1bc>
 8006444:	8019      	strh	r1, [r3, #0]
 8006446:	2300      	movs	r3, #0
 8006448:	6123      	str	r3, [r4, #16]
 800644a:	4616      	mov	r6, r2
 800644c:	e7bc      	b.n	80063c8 <_printf_i+0x148>
 800644e:	6833      	ldr	r3, [r6, #0]
 8006450:	1d1a      	adds	r2, r3, #4
 8006452:	6032      	str	r2, [r6, #0]
 8006454:	681e      	ldr	r6, [r3, #0]
 8006456:	6862      	ldr	r2, [r4, #4]
 8006458:	2100      	movs	r1, #0
 800645a:	4630      	mov	r0, r6
 800645c:	f7f9 fec0 	bl	80001e0 <memchr>
 8006460:	b108      	cbz	r0, 8006466 <_printf_i+0x1e6>
 8006462:	1b80      	subs	r0, r0, r6
 8006464:	6060      	str	r0, [r4, #4]
 8006466:	6863      	ldr	r3, [r4, #4]
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	2300      	movs	r3, #0
 800646c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006470:	e7aa      	b.n	80063c8 <_printf_i+0x148>
 8006472:	6923      	ldr	r3, [r4, #16]
 8006474:	4632      	mov	r2, r6
 8006476:	4649      	mov	r1, r9
 8006478:	4640      	mov	r0, r8
 800647a:	47d0      	blx	sl
 800647c:	3001      	adds	r0, #1
 800647e:	d0ad      	beq.n	80063dc <_printf_i+0x15c>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	079b      	lsls	r3, r3, #30
 8006484:	d413      	bmi.n	80064ae <_printf_i+0x22e>
 8006486:	68e0      	ldr	r0, [r4, #12]
 8006488:	9b03      	ldr	r3, [sp, #12]
 800648a:	4298      	cmp	r0, r3
 800648c:	bfb8      	it	lt
 800648e:	4618      	movlt	r0, r3
 8006490:	e7a6      	b.n	80063e0 <_printf_i+0x160>
 8006492:	2301      	movs	r3, #1
 8006494:	4632      	mov	r2, r6
 8006496:	4649      	mov	r1, r9
 8006498:	4640      	mov	r0, r8
 800649a:	47d0      	blx	sl
 800649c:	3001      	adds	r0, #1
 800649e:	d09d      	beq.n	80063dc <_printf_i+0x15c>
 80064a0:	3501      	adds	r5, #1
 80064a2:	68e3      	ldr	r3, [r4, #12]
 80064a4:	9903      	ldr	r1, [sp, #12]
 80064a6:	1a5b      	subs	r3, r3, r1
 80064a8:	42ab      	cmp	r3, r5
 80064aa:	dcf2      	bgt.n	8006492 <_printf_i+0x212>
 80064ac:	e7eb      	b.n	8006486 <_printf_i+0x206>
 80064ae:	2500      	movs	r5, #0
 80064b0:	f104 0619 	add.w	r6, r4, #25
 80064b4:	e7f5      	b.n	80064a2 <_printf_i+0x222>
 80064b6:	bf00      	nop
 80064b8:	08006b3c 	.word	0x08006b3c
 80064bc:	08006b4d 	.word	0x08006b4d

080064c0 <__swbuf_r>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	460e      	mov	r6, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	4605      	mov	r5, r0
 80064c8:	b118      	cbz	r0, 80064d2 <__swbuf_r+0x12>
 80064ca:	6a03      	ldr	r3, [r0, #32]
 80064cc:	b90b      	cbnz	r3, 80064d2 <__swbuf_r+0x12>
 80064ce:	f7ff fa1f 	bl	8005910 <__sinit>
 80064d2:	69a3      	ldr	r3, [r4, #24]
 80064d4:	60a3      	str	r3, [r4, #8]
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	071a      	lsls	r2, r3, #28
 80064da:	d501      	bpl.n	80064e0 <__swbuf_r+0x20>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	b943      	cbnz	r3, 80064f2 <__swbuf_r+0x32>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	f000 f82a 	bl	800653c <__swsetup_r>
 80064e8:	b118      	cbz	r0, 80064f2 <__swbuf_r+0x32>
 80064ea:	f04f 37ff 	mov.w	r7, #4294967295
 80064ee:	4638      	mov	r0, r7
 80064f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	6922      	ldr	r2, [r4, #16]
 80064f6:	1a98      	subs	r0, r3, r2
 80064f8:	6963      	ldr	r3, [r4, #20]
 80064fa:	b2f6      	uxtb	r6, r6
 80064fc:	4283      	cmp	r3, r0
 80064fe:	4637      	mov	r7, r6
 8006500:	dc05      	bgt.n	800650e <__swbuf_r+0x4e>
 8006502:	4621      	mov	r1, r4
 8006504:	4628      	mov	r0, r5
 8006506:	f7ff fcbb 	bl	8005e80 <_fflush_r>
 800650a:	2800      	cmp	r0, #0
 800650c:	d1ed      	bne.n	80064ea <__swbuf_r+0x2a>
 800650e:	68a3      	ldr	r3, [r4, #8]
 8006510:	3b01      	subs	r3, #1
 8006512:	60a3      	str	r3, [r4, #8]
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	6022      	str	r2, [r4, #0]
 800651a:	701e      	strb	r6, [r3, #0]
 800651c:	6962      	ldr	r2, [r4, #20]
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	429a      	cmp	r2, r3
 8006522:	d004      	beq.n	800652e <__swbuf_r+0x6e>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	07db      	lsls	r3, r3, #31
 8006528:	d5e1      	bpl.n	80064ee <__swbuf_r+0x2e>
 800652a:	2e0a      	cmp	r6, #10
 800652c:	d1df      	bne.n	80064ee <__swbuf_r+0x2e>
 800652e:	4621      	mov	r1, r4
 8006530:	4628      	mov	r0, r5
 8006532:	f7ff fca5 	bl	8005e80 <_fflush_r>
 8006536:	2800      	cmp	r0, #0
 8006538:	d0d9      	beq.n	80064ee <__swbuf_r+0x2e>
 800653a:	e7d6      	b.n	80064ea <__swbuf_r+0x2a>

0800653c <__swsetup_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4b29      	ldr	r3, [pc, #164]	@ (80065e4 <__swsetup_r+0xa8>)
 8006540:	4605      	mov	r5, r0
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	460c      	mov	r4, r1
 8006546:	b118      	cbz	r0, 8006550 <__swsetup_r+0x14>
 8006548:	6a03      	ldr	r3, [r0, #32]
 800654a:	b90b      	cbnz	r3, 8006550 <__swsetup_r+0x14>
 800654c:	f7ff f9e0 	bl	8005910 <__sinit>
 8006550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006554:	0719      	lsls	r1, r3, #28
 8006556:	d422      	bmi.n	800659e <__swsetup_r+0x62>
 8006558:	06da      	lsls	r2, r3, #27
 800655a:	d407      	bmi.n	800656c <__swsetup_r+0x30>
 800655c:	2209      	movs	r2, #9
 800655e:	602a      	str	r2, [r5, #0]
 8006560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	e033      	b.n	80065d4 <__swsetup_r+0x98>
 800656c:	0758      	lsls	r0, r3, #29
 800656e:	d512      	bpl.n	8006596 <__swsetup_r+0x5a>
 8006570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006572:	b141      	cbz	r1, 8006586 <__swsetup_r+0x4a>
 8006574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006578:	4299      	cmp	r1, r3
 800657a:	d002      	beq.n	8006582 <__swsetup_r+0x46>
 800657c:	4628      	mov	r0, r5
 800657e:	f7ff fafb 	bl	8005b78 <_free_r>
 8006582:	2300      	movs	r3, #0
 8006584:	6363      	str	r3, [r4, #52]	@ 0x34
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	2300      	movs	r3, #0
 8006590:	6063      	str	r3, [r4, #4]
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	f043 0308 	orr.w	r3, r3, #8
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	b94b      	cbnz	r3, 80065b6 <__swsetup_r+0x7a>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ac:	d003      	beq.n	80065b6 <__swsetup_r+0x7a>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f883 	bl	80066bc <__smakebuf_r>
 80065b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ba:	f013 0201 	ands.w	r2, r3, #1
 80065be:	d00a      	beq.n	80065d6 <__swsetup_r+0x9a>
 80065c0:	2200      	movs	r2, #0
 80065c2:	60a2      	str	r2, [r4, #8]
 80065c4:	6962      	ldr	r2, [r4, #20]
 80065c6:	4252      	negs	r2, r2
 80065c8:	61a2      	str	r2, [r4, #24]
 80065ca:	6922      	ldr	r2, [r4, #16]
 80065cc:	b942      	cbnz	r2, 80065e0 <__swsetup_r+0xa4>
 80065ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80065d2:	d1c5      	bne.n	8006560 <__swsetup_r+0x24>
 80065d4:	bd38      	pop	{r3, r4, r5, pc}
 80065d6:	0799      	lsls	r1, r3, #30
 80065d8:	bf58      	it	pl
 80065da:	6962      	ldrpl	r2, [r4, #20]
 80065dc:	60a2      	str	r2, [r4, #8]
 80065de:	e7f4      	b.n	80065ca <__swsetup_r+0x8e>
 80065e0:	2000      	movs	r0, #0
 80065e2:	e7f7      	b.n	80065d4 <__swsetup_r+0x98>
 80065e4:	20000024 	.word	0x20000024

080065e8 <_raise_r>:
 80065e8:	291f      	cmp	r1, #31
 80065ea:	b538      	push	{r3, r4, r5, lr}
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	d904      	bls.n	80065fc <_raise_r+0x14>
 80065f2:	2316      	movs	r3, #22
 80065f4:	6003      	str	r3, [r0, #0]
 80065f6:	f04f 30ff 	mov.w	r0, #4294967295
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
 80065fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065fe:	b112      	cbz	r2, 8006606 <_raise_r+0x1e>
 8006600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006604:	b94b      	cbnz	r3, 800661a <_raise_r+0x32>
 8006606:	4628      	mov	r0, r5
 8006608:	f000 f830 	bl	800666c <_getpid_r>
 800660c:	4622      	mov	r2, r4
 800660e:	4601      	mov	r1, r0
 8006610:	4628      	mov	r0, r5
 8006612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006616:	f000 b817 	b.w	8006648 <_kill_r>
 800661a:	2b01      	cmp	r3, #1
 800661c:	d00a      	beq.n	8006634 <_raise_r+0x4c>
 800661e:	1c59      	adds	r1, r3, #1
 8006620:	d103      	bne.n	800662a <_raise_r+0x42>
 8006622:	2316      	movs	r3, #22
 8006624:	6003      	str	r3, [r0, #0]
 8006626:	2001      	movs	r0, #1
 8006628:	e7e7      	b.n	80065fa <_raise_r+0x12>
 800662a:	2100      	movs	r1, #0
 800662c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006630:	4620      	mov	r0, r4
 8006632:	4798      	blx	r3
 8006634:	2000      	movs	r0, #0
 8006636:	e7e0      	b.n	80065fa <_raise_r+0x12>

08006638 <raise>:
 8006638:	4b02      	ldr	r3, [pc, #8]	@ (8006644 <raise+0xc>)
 800663a:	4601      	mov	r1, r0
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	f7ff bfd3 	b.w	80065e8 <_raise_r>
 8006642:	bf00      	nop
 8006644:	20000024 	.word	0x20000024

08006648 <_kill_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d07      	ldr	r5, [pc, #28]	@ (8006668 <_kill_r+0x20>)
 800664c:	2300      	movs	r3, #0
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	4611      	mov	r1, r2
 8006654:	602b      	str	r3, [r5, #0]
 8006656:	f7fa ff83 	bl	8001560 <_kill>
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d102      	bne.n	8006664 <_kill_r+0x1c>
 800665e:	682b      	ldr	r3, [r5, #0]
 8006660:	b103      	cbz	r3, 8006664 <_kill_r+0x1c>
 8006662:	6023      	str	r3, [r4, #0]
 8006664:	bd38      	pop	{r3, r4, r5, pc}
 8006666:	bf00      	nop
 8006668:	20002340 	.word	0x20002340

0800666c <_getpid_r>:
 800666c:	f7fa bf70 	b.w	8001550 <_getpid>

08006670 <__swhatbuf_r>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	460c      	mov	r4, r1
 8006674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006678:	2900      	cmp	r1, #0
 800667a:	b096      	sub	sp, #88	@ 0x58
 800667c:	4615      	mov	r5, r2
 800667e:	461e      	mov	r6, r3
 8006680:	da0d      	bge.n	800669e <__swhatbuf_r+0x2e>
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	bf14      	ite	ne
 800668e:	2340      	movne	r3, #64	@ 0x40
 8006690:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006694:	2000      	movs	r0, #0
 8006696:	6031      	str	r1, [r6, #0]
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	b016      	add	sp, #88	@ 0x58
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	466a      	mov	r2, sp
 80066a0:	f000 f848 	bl	8006734 <_fstat_r>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	dbec      	blt.n	8006682 <__swhatbuf_r+0x12>
 80066a8:	9901      	ldr	r1, [sp, #4]
 80066aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066b2:	4259      	negs	r1, r3
 80066b4:	4159      	adcs	r1, r3
 80066b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066ba:	e7eb      	b.n	8006694 <__swhatbuf_r+0x24>

080066bc <__smakebuf_r>:
 80066bc:	898b      	ldrh	r3, [r1, #12]
 80066be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066c0:	079d      	lsls	r5, r3, #30
 80066c2:	4606      	mov	r6, r0
 80066c4:	460c      	mov	r4, r1
 80066c6:	d507      	bpl.n	80066d8 <__smakebuf_r+0x1c>
 80066c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	2301      	movs	r3, #1
 80066d2:	6163      	str	r3, [r4, #20]
 80066d4:	b003      	add	sp, #12
 80066d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d8:	ab01      	add	r3, sp, #4
 80066da:	466a      	mov	r2, sp
 80066dc:	f7ff ffc8 	bl	8006670 <__swhatbuf_r>
 80066e0:	9f00      	ldr	r7, [sp, #0]
 80066e2:	4605      	mov	r5, r0
 80066e4:	4639      	mov	r1, r7
 80066e6:	4630      	mov	r0, r6
 80066e8:	f7ff faba 	bl	8005c60 <_malloc_r>
 80066ec:	b948      	cbnz	r0, 8006702 <__smakebuf_r+0x46>
 80066ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f2:	059a      	lsls	r2, r3, #22
 80066f4:	d4ee      	bmi.n	80066d4 <__smakebuf_r+0x18>
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	f043 0302 	orr.w	r3, r3, #2
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	e7e2      	b.n	80066c8 <__smakebuf_r+0xc>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	6020      	str	r0, [r4, #0]
 8006706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	9b01      	ldr	r3, [sp, #4]
 800670e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006712:	b15b      	cbz	r3, 800672c <__smakebuf_r+0x70>
 8006714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006718:	4630      	mov	r0, r6
 800671a:	f000 f81d 	bl	8006758 <_isatty_r>
 800671e:	b128      	cbz	r0, 800672c <__smakebuf_r+0x70>
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	81a3      	strh	r3, [r4, #12]
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	431d      	orrs	r5, r3
 8006730:	81a5      	strh	r5, [r4, #12]
 8006732:	e7cf      	b.n	80066d4 <__smakebuf_r+0x18>

08006734 <_fstat_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	@ (8006754 <_fstat_r+0x20>)
 8006738:	2300      	movs	r3, #0
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	f7fa ff6d 	bl	8001620 <_fstat>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d102      	bne.n	8006750 <_fstat_r+0x1c>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	b103      	cbz	r3, 8006750 <_fstat_r+0x1c>
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	bf00      	nop
 8006754:	20002340 	.word	0x20002340

08006758 <_isatty_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d06      	ldr	r5, [pc, #24]	@ (8006774 <_isatty_r+0x1c>)
 800675c:	2300      	movs	r3, #0
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	f7fa ff6c 	bl	8001640 <_isatty>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_isatty_r+0x1a>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_isatty_r+0x1a>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	20002340 	.word	0x20002340

08006778 <_init>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr

08006784 <_fini>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr
