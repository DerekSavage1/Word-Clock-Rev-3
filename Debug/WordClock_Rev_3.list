
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080070c8  080070c8  000080c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074fc  080074fc  000090c0  2**0
                  CONTENTS
  4 .ARM          00000008  080074fc  080074fc  000084fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007504  08007504  000090c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007504  08007504  00008504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007508  08007508  00008508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800750c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e0  200000c0  080075cc  000090c0  2**2
                  ALLOC
 10 ._user_heap_stack 00010400  200025a0  080075cc  000095a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1a7  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032cb  00000000  00000000  00018297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001b568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b63  00000000  00000000  0001c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae6d  00000000  00000000  0001cfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b95  00000000  00000000  00037e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095915  00000000  00000000  0004d9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004620  00000000  00000000  000e3348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e7968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070b0 	.word	0x080070b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	080070b0 	.word	0x080070b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	2104      	movs	r1, #4
 800058e:	4830      	ldr	r0, [pc, #192]	@ (8000650 <setSegments+0xe0>)
 8000590:	f002 fff0 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	2b00      	cmp	r3, #0
 800059c:	bf0c      	ite	eq
 800059e:	2301      	moveq	r3, #1
 80005a0:	2300      	movne	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	2101      	movs	r1, #1
 80005a8:	4829      	ldr	r0, [pc, #164]	@ (8000650 <setSegments+0xe0>)
 80005aa:	f002 ffe3 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf0c      	ite	eq
 80005b8:	2301      	moveq	r3, #1
 80005ba:	2300      	movne	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	2108      	movs	r1, #8
 80005c2:	4823      	ldr	r0, [pc, #140]	@ (8000650 <setSegments+0xe0>)
 80005c4:	f002 ffd6 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	2104      	movs	r1, #4
 80005dc:	481d      	ldr	r0, [pc, #116]	@ (8000654 <setSegments+0xe4>)
 80005de:	f002 ffc9 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 0310 	and.w	r3, r3, #16
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2101      	movs	r1, #1
 80005f6:	4817      	ldr	r0, [pc, #92]	@ (8000654 <setSegments+0xe4>)
 80005f8:	f002 ffbc 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	2110      	movs	r1, #16
 8000610:	480f      	ldr	r0, [pc, #60]	@ (8000650 <setSegments+0xe0>)
 8000612:	f002 ffaf 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	2102      	movs	r1, #2
 800062a:	4809      	ldr	r0, [pc, #36]	@ (8000650 <setSegments+0xe0>)
 800062c:	f002 ffa2 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	43db      	mvns	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	09db      	lsrs	r3, r3, #7
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	2140      	movs	r1, #64	@ 0x40
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <setSegments+0xe0>)
 8000642:	f002 ff97 	bl	8003574 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400

08000658 <wipeSegments>:

void wipeSegments(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2104      	movs	r1, #4
 8000660:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <wipeSegments+0x58>)
 8000662:	f002 ff87 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2101      	movs	r1, #1
 800066a:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <wipeSegments+0x58>)
 800066c:	f002 ff82 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2108      	movs	r1, #8
 8000674:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <wipeSegments+0x58>)
 8000676:	f002 ff7d 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2104      	movs	r1, #4
 800067e:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <wipeSegments+0x5c>)
 8000680:	f002 ff78 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <wipeSegments+0x5c>)
 800068a:	f002 ff73 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2110      	movs	r1, #16
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <wipeSegments+0x58>)
 8000694:	f002 ff6e 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2102      	movs	r1, #2
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <wipeSegments+0x58>)
 800069e:	f002 ff69 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2140      	movs	r1, #64	@ 0x40
 80006a6:	4802      	ldr	r0, [pc, #8]	@ (80006b0 <wipeSegments+0x58>)
 80006a8:	f002 ff64 	bl	8003574 <HAL_GPIO_WritePin>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400

080006b8 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	bf0c      	ite	eq
 80006c8:	2301      	moveq	r3, #1
 80006ca:	2300      	movne	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d4:	4819      	ldr	r0, [pc, #100]	@ (800073c <activateDigit+0x84>)
 80006d6:	f002 ff4d 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	bf0c      	ite	eq
 80006e0:	2301      	moveq	r3, #1
 80006e2:	2300      	movne	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ec:	4813      	ldr	r0, [pc, #76]	@ (800073c <activateDigit+0x84>)
 80006ee:	f002 ff41 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	bf0c      	ite	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	2300      	movne	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	480f      	ldr	r0, [pc, #60]	@ (8000740 <activateDigit+0x88>)
 8000704:	f002 ff36 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf0c      	ite	eq
 800070e:	2301      	moveq	r3, #1
 8000710:	2300      	movne	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	2120      	movs	r1, #32
 8000718:	4809      	ldr	r0, [pc, #36]	@ (8000740 <activateDigit+0x88>)
 800071a:	f002 ff2b 	bl	8003574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b05      	cmp	r3, #5
 8000722:	bf0c      	ite	eq
 8000724:	2301      	moveq	r3, #1
 8000726:	2300      	movne	r3, #0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	2102      	movs	r1, #2
 800072e:	4803      	ldr	r0, [pc, #12]	@ (800073c <activateDigit+0x84>)
 8000730:	f002 ff20 	bl	8003574 <HAL_GPIO_WritePin>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020400 	.word	0x40020400
 8000740:	40020000 	.word	0x40020000

08000744 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2204      	movs	r2, #4
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f005 fc4f 	bl	8005ff8 <strncpy>
    truncatedInput[4] = '\0';
 800075a:	2300      	movs	r3, #0
 800075c:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	e1ad      	b.n	8000ac0 <Segment_Display+0x37c>
        activateDigit(i + 1);
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	3301      	adds	r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ffa4 	bl	80006b8 <activateDigit>

		char ch = truncatedInput[i];
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	3310      	adds	r3, #16
 8000774:	443b      	add	r3, r7
 8000776:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800077a:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 800077c:	7bbb      	ldrb	r3, [r7, #14]
 800077e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000780:	f200 8192 	bhi.w	8000aa8 <Segment_Display+0x364>
 8000784:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <Segment_Display+0x48>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	08000acb 	.word	0x08000acb
 8000790:	08000aa9 	.word	0x08000aa9
 8000794:	08000aa9 	.word	0x08000aa9
 8000798:	08000aa9 	.word	0x08000aa9
 800079c:	08000aa9 	.word	0x08000aa9
 80007a0:	08000aa9 	.word	0x08000aa9
 80007a4:	08000aa9 	.word	0x08000aa9
 80007a8:	08000aa9 	.word	0x08000aa9
 80007ac:	08000aa9 	.word	0x08000aa9
 80007b0:	08000aa9 	.word	0x08000aa9
 80007b4:	08000aa9 	.word	0x08000aa9
 80007b8:	08000aa9 	.word	0x08000aa9
 80007bc:	08000aa9 	.word	0x08000aa9
 80007c0:	08000aa9 	.word	0x08000aa9
 80007c4:	08000aa9 	.word	0x08000aa9
 80007c8:	08000aa9 	.word	0x08000aa9
 80007cc:	08000aa9 	.word	0x08000aa9
 80007d0:	08000aa9 	.word	0x08000aa9
 80007d4:	08000aa9 	.word	0x08000aa9
 80007d8:	08000aa9 	.word	0x08000aa9
 80007dc:	08000aa9 	.word	0x08000aa9
 80007e0:	08000aa9 	.word	0x08000aa9
 80007e4:	08000aa9 	.word	0x08000aa9
 80007e8:	08000aa9 	.word	0x08000aa9
 80007ec:	08000aa9 	.word	0x08000aa9
 80007f0:	08000aa9 	.word	0x08000aa9
 80007f4:	08000aa9 	.word	0x08000aa9
 80007f8:	08000aa9 	.word	0x08000aa9
 80007fc:	08000aa9 	.word	0x08000aa9
 8000800:	08000aa9 	.word	0x08000aa9
 8000804:	08000aa9 	.word	0x08000aa9
 8000808:	08000aa9 	.word	0x08000aa9
 800080c:	08000a99 	.word	0x08000a99
 8000810:	08000aa9 	.word	0x08000aa9
 8000814:	08000aa9 	.word	0x08000aa9
 8000818:	08000aa9 	.word	0x08000aa9
 800081c:	08000aa9 	.word	0x08000aa9
 8000820:	08000aa9 	.word	0x08000aa9
 8000824:	08000aa9 	.word	0x08000aa9
 8000828:	08000aa9 	.word	0x08000aa9
 800082c:	08000aa9 	.word	0x08000aa9
 8000830:	08000aa9 	.word	0x08000aa9
 8000834:	08000aa9 	.word	0x08000aa9
 8000838:	08000aa9 	.word	0x08000aa9
 800083c:	08000aa9 	.word	0x08000aa9
 8000840:	08000aa1 	.word	0x08000aa1
 8000844:	08000aa9 	.word	0x08000aa9
 8000848:	08000aa9 	.word	0x08000aa9
 800084c:	08000979 	.word	0x08000979
 8000850:	08000981 	.word	0x08000981
 8000854:	08000989 	.word	0x08000989
 8000858:	08000991 	.word	0x08000991
 800085c:	08000999 	.word	0x08000999
 8000860:	080009a1 	.word	0x080009a1
 8000864:	080009a9 	.word	0x080009a9
 8000868:	080009b1 	.word	0x080009b1
 800086c:	080009b9 	.word	0x080009b9
 8000870:	080009c1 	.word	0x080009c1
 8000874:	08000aa9 	.word	0x08000aa9
 8000878:	08000aa9 	.word	0x08000aa9
 800087c:	08000aa9 	.word	0x08000aa9
 8000880:	08000aa9 	.word	0x08000aa9
 8000884:	08000aa9 	.word	0x08000aa9
 8000888:	08000aa9 	.word	0x08000aa9
 800088c:	08000aa9 	.word	0x08000aa9
 8000890:	080009c9 	.word	0x080009c9
 8000894:	080009d1 	.word	0x080009d1
 8000898:	080009d9 	.word	0x080009d9
 800089c:	080009e1 	.word	0x080009e1
 80008a0:	080009e9 	.word	0x080009e9
 80008a4:	080009f1 	.word	0x080009f1
 80008a8:	080009f9 	.word	0x080009f9
 80008ac:	08000a01 	.word	0x08000a01
 80008b0:	08000a09 	.word	0x08000a09
 80008b4:	08000a11 	.word	0x08000a11
 80008b8:	08000a19 	.word	0x08000a19
 80008bc:	08000a21 	.word	0x08000a21
 80008c0:	08000a29 	.word	0x08000a29
 80008c4:	08000a31 	.word	0x08000a31
 80008c8:	08000a39 	.word	0x08000a39
 80008cc:	08000a41 	.word	0x08000a41
 80008d0:	08000a49 	.word	0x08000a49
 80008d4:	08000a51 	.word	0x08000a51
 80008d8:	08000a59 	.word	0x08000a59
 80008dc:	08000a61 	.word	0x08000a61
 80008e0:	08000a69 	.word	0x08000a69
 80008e4:	08000a71 	.word	0x08000a71
 80008e8:	08000a79 	.word	0x08000a79
 80008ec:	08000a81 	.word	0x08000a81
 80008f0:	08000a89 	.word	0x08000a89
 80008f4:	08000a91 	.word	0x08000a91
 80008f8:	08000aa9 	.word	0x08000aa9
 80008fc:	08000aa9 	.word	0x08000aa9
 8000900:	08000aa9 	.word	0x08000aa9
 8000904:	08000aa9 	.word	0x08000aa9
 8000908:	08000aa9 	.word	0x08000aa9
 800090c:	08000aa9 	.word	0x08000aa9
 8000910:	080009c9 	.word	0x080009c9
 8000914:	080009d1 	.word	0x080009d1
 8000918:	080009d9 	.word	0x080009d9
 800091c:	080009e1 	.word	0x080009e1
 8000920:	080009e9 	.word	0x080009e9
 8000924:	080009f1 	.word	0x080009f1
 8000928:	080009f9 	.word	0x080009f9
 800092c:	08000a01 	.word	0x08000a01
 8000930:	08000a09 	.word	0x08000a09
 8000934:	08000a11 	.word	0x08000a11
 8000938:	08000a19 	.word	0x08000a19
 800093c:	08000a21 	.word	0x08000a21
 8000940:	08000a29 	.word	0x08000a29
 8000944:	08000a31 	.word	0x08000a31
 8000948:	08000a39 	.word	0x08000a39
 800094c:	08000a41 	.word	0x08000a41
 8000950:	08000a49 	.word	0x08000a49
 8000954:	08000a51 	.word	0x08000a51
 8000958:	08000a59 	.word	0x08000a59
 800095c:	08000a61 	.word	0x08000a61
 8000960:	08000a69 	.word	0x08000a69
 8000964:	08000a71 	.word	0x08000a71
 8000968:	08000a79 	.word	0x08000a79
 800096c:	08000a81 	.word	0x08000a81
 8000970:	08000a89 	.word	0x08000a89
 8000974:	08000a91 	.word	0x08000a91
        	case '\0':
        		return;
            case '0':
                setSegments(0x3F);
 8000978:	203f      	movs	r0, #63	@ 0x3f
 800097a:	f7ff fdf9 	bl	8000570 <setSegments>
                break;
 800097e:	e097      	b.n	8000ab0 <Segment_Display+0x36c>
            case '1':
                setSegments(0x06);
 8000980:	2006      	movs	r0, #6
 8000982:	f7ff fdf5 	bl	8000570 <setSegments>
                break;
 8000986:	e093      	b.n	8000ab0 <Segment_Display+0x36c>
            case '2':
                setSegments(0x5B);
 8000988:	205b      	movs	r0, #91	@ 0x5b
 800098a:	f7ff fdf1 	bl	8000570 <setSegments>
                break;
 800098e:	e08f      	b.n	8000ab0 <Segment_Display+0x36c>
            case '3':
                setSegments(0x4F);
 8000990:	204f      	movs	r0, #79	@ 0x4f
 8000992:	f7ff fded 	bl	8000570 <setSegments>
                break;
 8000996:	e08b      	b.n	8000ab0 <Segment_Display+0x36c>
            case '4':
                setSegments(0x66);
 8000998:	2066      	movs	r0, #102	@ 0x66
 800099a:	f7ff fde9 	bl	8000570 <setSegments>
                break;
 800099e:	e087      	b.n	8000ab0 <Segment_Display+0x36c>
            case '5':
                setSegments(0x6D);
 80009a0:	206d      	movs	r0, #109	@ 0x6d
 80009a2:	f7ff fde5 	bl	8000570 <setSegments>
                break;
 80009a6:	e083      	b.n	8000ab0 <Segment_Display+0x36c>
            case '6':
                setSegments(0x7D);
 80009a8:	207d      	movs	r0, #125	@ 0x7d
 80009aa:	f7ff fde1 	bl	8000570 <setSegments>
                break;
 80009ae:	e07f      	b.n	8000ab0 <Segment_Display+0x36c>
            case '7':
                setSegments(0x07);
 80009b0:	2007      	movs	r0, #7
 80009b2:	f7ff fddd 	bl	8000570 <setSegments>
                break;
 80009b6:	e07b      	b.n	8000ab0 <Segment_Display+0x36c>
            case '8':
                setSegments(0x7F);
 80009b8:	207f      	movs	r0, #127	@ 0x7f
 80009ba:	f7ff fdd9 	bl	8000570 <setSegments>
                break;
 80009be:	e077      	b.n	8000ab0 <Segment_Display+0x36c>
            case '9':
                setSegments(0x6F);
 80009c0:	206f      	movs	r0, #111	@ 0x6f
 80009c2:	f7ff fdd5 	bl	8000570 <setSegments>
                break;
 80009c6:	e073      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'a':
            case 'A':
                setSegments(0x77);
 80009c8:	2077      	movs	r0, #119	@ 0x77
 80009ca:	f7ff fdd1 	bl	8000570 <setSegments>
                break;
 80009ce:	e06f      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'b':
            case 'B':
                setSegments(0x7C);
 80009d0:	207c      	movs	r0, #124	@ 0x7c
 80009d2:	f7ff fdcd 	bl	8000570 <setSegments>
                break;
 80009d6:	e06b      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'c':
            case 'C':
                setSegments(0x39);
 80009d8:	2039      	movs	r0, #57	@ 0x39
 80009da:	f7ff fdc9 	bl	8000570 <setSegments>
                break;
 80009de:	e067      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'd':
            case 'D':
                setSegments(0x5E);
 80009e0:	205e      	movs	r0, #94	@ 0x5e
 80009e2:	f7ff fdc5 	bl	8000570 <setSegments>
                break;
 80009e6:	e063      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'e':
            case 'E':
                setSegments(0x79);
 80009e8:	2079      	movs	r0, #121	@ 0x79
 80009ea:	f7ff fdc1 	bl	8000570 <setSegments>
                break;
 80009ee:	e05f      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'f':
            case 'F':
                setSegments(0x71);
 80009f0:	2071      	movs	r0, #113	@ 0x71
 80009f2:	f7ff fdbd 	bl	8000570 <setSegments>
                break;
 80009f6:	e05b      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'g':
            case 'G':
                setSegments(0x3D);
 80009f8:	203d      	movs	r0, #61	@ 0x3d
 80009fa:	f7ff fdb9 	bl	8000570 <setSegments>
                break;
 80009fe:	e057      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'h':
            case 'H':
                setSegments(0x76);
 8000a00:	2076      	movs	r0, #118	@ 0x76
 8000a02:	f7ff fdb5 	bl	8000570 <setSegments>
                break;
 8000a06:	e053      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'i':
            case 'I':
                setSegments(0x30);
 8000a08:	2030      	movs	r0, #48	@ 0x30
 8000a0a:	f7ff fdb1 	bl	8000570 <setSegments>
                break;
 8000a0e:	e04f      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'j':
            case 'J':
                setSegments(0x1E);
 8000a10:	201e      	movs	r0, #30
 8000a12:	f7ff fdad 	bl	8000570 <setSegments>
                break;
 8000a16:	e04b      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 8000a18:	2076      	movs	r0, #118	@ 0x76
 8000a1a:	f7ff fda9 	bl	8000570 <setSegments>
                break;
 8000a1e:	e047      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'l':
            case 'L':
                setSegments(0x38);
 8000a20:	2038      	movs	r0, #56	@ 0x38
 8000a22:	f7ff fda5 	bl	8000570 <setSegments>
                break;
 8000a26:	e043      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 8000a28:	2037      	movs	r0, #55	@ 0x37
 8000a2a:	f7ff fda1 	bl	8000570 <setSegments>
                break;
 8000a2e:	e03f      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'n':
            case 'N':
                setSegments(0x54);
 8000a30:	2054      	movs	r0, #84	@ 0x54
 8000a32:	f7ff fd9d 	bl	8000570 <setSegments>
                break;
 8000a36:	e03b      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'o':
            case 'O':
                setSegments(0x3F);
 8000a38:	203f      	movs	r0, #63	@ 0x3f
 8000a3a:	f7ff fd99 	bl	8000570 <setSegments>
                break;
 8000a3e:	e037      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'p':
            case 'P':
                setSegments(0x73);
 8000a40:	2073      	movs	r0, #115	@ 0x73
 8000a42:	f7ff fd95 	bl	8000570 <setSegments>
                break;
 8000a46:	e033      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'q':
            case 'Q':
                setSegments(0x67);
 8000a48:	2067      	movs	r0, #103	@ 0x67
 8000a4a:	f7ff fd91 	bl	8000570 <setSegments>
                break;
 8000a4e:	e02f      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'r':
            case 'R':
                setSegments(0x50);
 8000a50:	2050      	movs	r0, #80	@ 0x50
 8000a52:	f7ff fd8d 	bl	8000570 <setSegments>
                break;
 8000a56:	e02b      	b.n	8000ab0 <Segment_Display+0x36c>
            case 's':
            case 'S':
                setSegments(0x6D);
 8000a58:	206d      	movs	r0, #109	@ 0x6d
 8000a5a:	f7ff fd89 	bl	8000570 <setSegments>
                break;
 8000a5e:	e027      	b.n	8000ab0 <Segment_Display+0x36c>
            case 't':
            case 'T':
                setSegments(0x78);
 8000a60:	2078      	movs	r0, #120	@ 0x78
 8000a62:	f7ff fd85 	bl	8000570 <setSegments>
                break;
 8000a66:	e023      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'u':
            case 'U':
                setSegments(0x3E);
 8000a68:	203e      	movs	r0, #62	@ 0x3e
 8000a6a:	f7ff fd81 	bl	8000570 <setSegments>
                break;
 8000a6e:	e01f      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8000a70:	203e      	movs	r0, #62	@ 0x3e
 8000a72:	f7ff fd7d 	bl	8000570 <setSegments>
                break;
 8000a76:	e01b      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 8000a78:	202a      	movs	r0, #42	@ 0x2a
 8000a7a:	f7ff fd79 	bl	8000570 <setSegments>
                break;
 8000a7e:	e017      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8000a80:	2076      	movs	r0, #118	@ 0x76
 8000a82:	f7ff fd75 	bl	8000570 <setSegments>
                break;
 8000a86:	e013      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 8000a88:	206e      	movs	r0, #110	@ 0x6e
 8000a8a:	f7ff fd71 	bl	8000570 <setSegments>
                break;
 8000a8e:	e00f      	b.n	8000ab0 <Segment_Display+0x36c>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8000a90:	205b      	movs	r0, #91	@ 0x5b
 8000a92:	f7ff fd6d 	bl	8000570 <setSegments>
                break;
 8000a96:	e00b      	b.n	8000ab0 <Segment_Display+0x36c>
            case ' ':
                // Blank character
                setSegments(0x00);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fd69 	bl	8000570 <setSegments>
                break;
 8000a9e:	e007      	b.n	8000ab0 <Segment_Display+0x36c>
            case '-':
            	setSegments(0x04);
 8000aa0:	2004      	movs	r0, #4
 8000aa2:	f7ff fd65 	bl	8000570 <setSegments>
            	break;
 8000aa6:	e003      	b.n	8000ab0 <Segment_Display+0x36c>
            default:
            	setSegments(0x00);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fd61 	bl	8000570 <setSegments>
                break;
 8000aae:	bf00      	nop
        }
        HAL_Delay(2);
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f001 fefb 	bl	80028ac <HAL_Delay>
        wipeSegments();
 8000ab6:	f7ff fdcf 	bl	8000658 <wipeSegments>
    for(uint8_t i = 0; i < 4; i++) {
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	3301      	adds	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	f67f ae4e 	bls.w	8000764 <Segment_Display+0x20>
 8000ac8:	e000      	b.n	8000acc <Segment_Display+0x388>
        		return;
 8000aca:	bf00      	nop
    }
}
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop

08000ad4 <turnOnLED>:
/**
 * @brief   Turns on an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn on.
 */
void turnOnLED(LED *frame, uint8_t index) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	frame[index].on = true;
 8000ae0:	78fa      	ldrb	r2, [r7, #3]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	2201      	movs	r2, #1
 8000aee:	711a      	strb	r2, [r3, #4]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <turnOffLED>:
/**
 * @brief   Turns off an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn off.
 */
void turnOffLED(LED *frame, uint8_t index) {
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
	frame[index].on = false;
 8000b08:	78fa      	ldrb	r2, [r7, #3]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	711a      	strb	r2, [r3, #4]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <getLEDsWithEffect>:
 * @param   arr Pointer to an array for storing indices of lit LEDs.
 *            This array should be preallocated by the caller.
 *
 * @return  Number of lit LEDs found. This value represents the size of the updated array.
 */
uint8_t getLEDsWithEffect(uint8_t *result, LED *display, Effect effect) {
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	71fb      	strb	r3, [r7, #7]

    uint32_t index = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	e015      	b.n	8000b68 <getLEDsWithEffect+0x44>
    	if(display[i].effect == effect) {
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	68ba      	ldr	r2, [r7, #8]
 8000b46:	4413      	add	r3, r2
 8000b48:	78db      	ldrb	r3, [r3, #3]
 8000b4a:	79fa      	ldrb	r2, [r7, #7]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d108      	bne.n	8000b62 <getLEDsWithEffect+0x3e>
    		result[index] = i;
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	701a      	strb	r2, [r3, #0]
            index++;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	3301      	adds	r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	2b8e      	cmp	r3, #142	@ 0x8e
 8000b6c:	dde6      	ble.n	8000b3c <getLEDsWithEffect+0x18>
    	}
    }

    return index++;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	617a      	str	r2, [r7, #20]
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <wipePWMBuffer>:
 * @brief Converts a bitmap to PWM data for WS2812B LEDs.
 *
 * Wipes PWM Buffer by filling it with user defined ZERO PWM values.
 *
 */
void wipePWMBuffer(void) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	e007      	b.n	8000ba0 <wipePWMBuffer+0x1c>
        pwmBuffer[i] = ZERO;
 8000b90:	4a09      	ldr	r2, [pc, #36]	@ (8000bb8 <wipePWMBuffer+0x34>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	211b      	movs	r1, #27
 8000b96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f640 5299 	movw	r2, #3481	@ 0xd99
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	ddf2      	ble.n	8000b90 <wipePWMBuffer+0xc>
    }
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	200000e0 	.word	0x200000e0

08000bbc <updatePwmBuffer>:
 * (green, red, blue) order.
 *
 * @note    The PWM buffer must be appropriately sized to accommodate the
 *          LED data. Each LED requires 24 bits in the PWM buffer.
 */
void updatePwmBuffer(LED *currentFrame) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

    wipePWMBuffer();
 8000bc4:	f7ff ffde 	bl	8000b84 <wipePWMBuffer>

    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e067      	b.n	8000c9e <updatePwmBuffer+0xe2>

        if(!currentFrame[ledNumber].on) {
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	f083 0301 	eor.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d157      	bne.n	8000c96 <updatePwmBuffer+0xda>
            continue;
        }


        uint8_t red     = currentFrame[ledNumber].red;
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	73fb      	strb	r3, [r7, #15]
        uint8_t green   = currentFrame[ledNumber].green;
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	73bb      	strb	r3, [r7, #14]
        uint8_t blue    = currentFrame[ledNumber].blue;
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	737b      	strb	r3, [r7, #13]
        uint32_t arrayIndex = ledNumber * 24;
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	60bb      	str	r3, [r7, #8]

        // ws2812b is GRB, so we swap the positions of red and green
        for(int bit = 0; bit < 8; bit++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	e032      	b.n	8000c8e <updatePwmBuffer+0xd2>

            if(green & (1 << bit)) {
 8000c28:	7bba      	ldrb	r2, [r7, #14]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	fa42 f303 	asr.w	r3, r2, r3
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d007      	beq.n	8000c48 <updatePwmBuffer+0x8c>
                pwmBuffer[arrayIndex + 16 + (7 - bit)] = ONE;
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	3317      	adds	r3, #23
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <updatePwmBuffer+0xf4>)
 8000c42:	2136      	movs	r1, #54	@ 0x36
 8000c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(red & (1 << bit)) {
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa42 f303 	asr.w	r3, r2, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d007      	beq.n	8000c68 <updatePwmBuffer+0xac>
                pwmBuffer[arrayIndex + 8 + (7 - bit)] = ONE;
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	330f      	adds	r3, #15
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <updatePwmBuffer+0xf4>)
 8000c62:	2136      	movs	r1, #54	@ 0x36
 8000c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(blue & (1 << bit)) {
 8000c68:	7b7a      	ldrb	r2, [r7, #13]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fa42 f303 	asr.w	r3, r2, r3
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d007      	beq.n	8000c88 <updatePwmBuffer+0xcc>
                pwmBuffer[arrayIndex + (7 - bit)] = ONE;
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	3307      	adds	r3, #7
 8000c80:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <updatePwmBuffer+0xf4>)
 8000c82:	2136      	movs	r1, #54	@ 0x36
 8000c84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(int bit = 0; bit < 8; bit++) {
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	ddc9      	ble.n	8000c28 <updatePwmBuffer+0x6c>
 8000c94:	e000      	b.n	8000c98 <updatePwmBuffer+0xdc>
            continue;
 8000c96:	bf00      	nop
    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b8e      	cmp	r3, #142	@ 0x8e
 8000ca2:	dd94      	ble.n	8000bce <updatePwmBuffer+0x12>
            }
        }

    }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000e0 	.word	0x200000e0

08000cb4 <DMA_Send>:


void DMA_Send() {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmBuffer, PWM_ARRAY_SIZE + 1);
 8000cb8:	f640 539b 	movw	r3, #3483	@ 0xd9b
 8000cbc:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <DMA_Send+0x28>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <DMA_Send+0x2c>)
 8000cc2:	f003 fd39 	bl	8004738 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 8000cc6:	bf00      	nop
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <DMA_Send+0x30>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0fb      	beq.n	8000cc8 <DMA_Send+0x14>
	datasentflag = 0;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <DMA_Send+0x30>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000e0 	.word	0x200000e0
 8000ce0:	20002338 	.word	0x20002338
 8000ce4:	200000dc 	.word	0x200000dc

08000ce8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f003 fed0 	bl	8004a98 <HAL_TIM_PWM_Stop_DMA>
    datasentflag = 1;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]

}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000dc 	.word	0x200000dc

08000d0c <HsvToRgb>:
 */

#include "color.h"

RgbColor HsvToRgb(HsvColor hsv)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    RgbColor rgb;
    unsigned char region, remainder, p, q, t;

    if (hsv.s == 0)
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d110      	bne.n	8000d3c <HsvToRgb+0x30>
    {
        rgb.r = hsv.v;
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	733b      	strb	r3, [r7, #12]
        rgb.g = hsv.v;
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	737b      	strb	r3, [r7, #13]
        rgb.b = hsv.v;
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	73bb      	strb	r3, [r7, #14]
        return rgb;
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	f107 020c 	add.w	r2, r7, #12
 8000d2e:	6812      	ldr	r2, [r2, #0]
 8000d30:	4611      	mov	r1, r2
 8000d32:	8019      	strh	r1, [r3, #0]
 8000d34:	3302      	adds	r3, #2
 8000d36:	0c12      	lsrs	r2, r2, #16
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e07f      	b.n	8000e3c <HsvToRgb+0x130>
    }

    region = hsv.h / 43;
 8000d3c:	793b      	ldrb	r3, [r7, #4]
 8000d3e:	4a47      	ldr	r2, [pc, #284]	@ (8000e5c <HsvToRgb+0x150>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	75fb      	strb	r3, [r7, #23]
    remainder = (hsv.h - (region * 43)) * 6;
 8000d48:	793b      	ldrb	r3, [r7, #4]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	f06f 022a 	mvn.w	r2, #42	@ 0x2a
 8000d52:	fb02 f303 	mul.w	r3, r2, r3
 8000d56:	440b      	add	r3, r1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	0052      	lsls	r2, r2, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	75bb      	strb	r3, [r7, #22]

    p = (hsv.v * (255 - hsv.s)) >> 8;
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	461a      	mov	r2, r3
 8000d68:	797b      	ldrb	r3, [r7, #5]
 8000d6a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000d6e:	fb02 f303 	mul.w	r3, r2, r3
 8000d72:	121b      	asrs	r3, r3, #8
 8000d74:	757b      	strb	r3, [r7, #21]
    q = (hsv.v * (255 - ((hsv.s * remainder) >> 8))) >> 8;
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	797b      	ldrb	r3, [r7, #5]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	7dbb      	ldrb	r3, [r7, #22]
 8000d80:	fb01 f303 	mul.w	r3, r1, r3
 8000d84:	121b      	asrs	r3, r3, #8
 8000d86:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	121b      	asrs	r3, r3, #8
 8000d90:	753b      	strb	r3, [r7, #20]
    t = (hsv.v * (255 - ((hsv.s * (255 - remainder)) >> 8))) >> 8;
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	461a      	mov	r2, r3
 8000d96:	797b      	ldrb	r3, [r7, #5]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	7dbb      	ldrb	r3, [r7, #22]
 8000d9c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000da0:	fb01 f303 	mul.w	r3, r1, r3
 8000da4:	121b      	asrs	r3, r3, #8
 8000da6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	121b      	asrs	r3, r3, #8
 8000db0:	74fb      	strb	r3, [r7, #19]

    switch (region)
 8000db2:	7dfb      	ldrb	r3, [r7, #23]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d830      	bhi.n	8000e1a <HsvToRgb+0x10e>
 8000db8:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <HsvToRgb+0xb4>)
 8000dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbe:	bf00      	nop
 8000dc0:	08000dd5 	.word	0x08000dd5
 8000dc4:	08000de3 	.word	0x08000de3
 8000dc8:	08000df1 	.word	0x08000df1
 8000dcc:	08000dff 	.word	0x08000dff
 8000dd0:	08000e0d 	.word	0x08000e0d
    {
        case 0:
            rgb.r = hsv.v; rgb.g = t; rgb.b = p;
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	733b      	strb	r3, [r7, #12]
 8000dd8:	7cfb      	ldrb	r3, [r7, #19]
 8000dda:	737b      	strb	r3, [r7, #13]
 8000ddc:	7d7b      	ldrb	r3, [r7, #21]
 8000dde:	73bb      	strb	r3, [r7, #14]
            break;
 8000de0:	e022      	b.n	8000e28 <HsvToRgb+0x11c>
        case 1:
            rgb.r = q; rgb.g = hsv.v; rgb.b = p;
 8000de2:	7d3b      	ldrb	r3, [r7, #20]
 8000de4:	733b      	strb	r3, [r7, #12]
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	737b      	strb	r3, [r7, #13]
 8000dea:	7d7b      	ldrb	r3, [r7, #21]
 8000dec:	73bb      	strb	r3, [r7, #14]
            break;
 8000dee:	e01b      	b.n	8000e28 <HsvToRgb+0x11c>
        case 2:
            rgb.r = p; rgb.g = hsv.v; rgb.b = t;
 8000df0:	7d7b      	ldrb	r3, [r7, #21]
 8000df2:	733b      	strb	r3, [r7, #12]
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	737b      	strb	r3, [r7, #13]
 8000df8:	7cfb      	ldrb	r3, [r7, #19]
 8000dfa:	73bb      	strb	r3, [r7, #14]
            break;
 8000dfc:	e014      	b.n	8000e28 <HsvToRgb+0x11c>
        case 3:
            rgb.r = p; rgb.g = q; rgb.b = hsv.v;
 8000dfe:	7d7b      	ldrb	r3, [r7, #21]
 8000e00:	733b      	strb	r3, [r7, #12]
 8000e02:	7d3b      	ldrb	r3, [r7, #20]
 8000e04:	737b      	strb	r3, [r7, #13]
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	73bb      	strb	r3, [r7, #14]
            break;
 8000e0a:	e00d      	b.n	8000e28 <HsvToRgb+0x11c>
        case 4:
            rgb.r = t; rgb.g = p; rgb.b = hsv.v;
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	733b      	strb	r3, [r7, #12]
 8000e10:	7d7b      	ldrb	r3, [r7, #21]
 8000e12:	737b      	strb	r3, [r7, #13]
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	73bb      	strb	r3, [r7, #14]
            break;
 8000e18:	e006      	b.n	8000e28 <HsvToRgb+0x11c>
        default:
            rgb.r = hsv.v; rgb.g = p; rgb.b = q;
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	733b      	strb	r3, [r7, #12]
 8000e1e:	7d7b      	ldrb	r3, [r7, #21]
 8000e20:	737b      	strb	r3, [r7, #13]
 8000e22:	7d3b      	ldrb	r3, [r7, #20]
 8000e24:	73bb      	strb	r3, [r7, #14]
            break;
 8000e26:	bf00      	nop
    }

    return rgb;
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	f107 020c 	add.w	r2, r7, #12
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	4611      	mov	r1, r2
 8000e34:	8019      	strh	r1, [r3, #0]
 8000e36:	3302      	adds	r3, #2
 8000e38:	0c12      	lsrs	r2, r2, #16
 8000e3a:	701a      	strb	r2, [r3, #0]
}
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	7c3a      	ldrb	r2, [r7, #16]
 8000e40:	f362 0307 	bfi	r3, r2, #0, #8
 8000e44:	7c7a      	ldrb	r2, [r7, #17]
 8000e46:	f362 230f 	bfi	r3, r2, #8, #8
 8000e4a:	7cba      	ldrb	r2, [r7, #18]
 8000e4c:	f362 4317 	bfi	r3, r2, #16, #8
 8000e50:	4618      	mov	r0, r3
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	2fa0be83 	.word	0x2fa0be83

08000e60 <addBitmapToDisplay>:
#include "display.h"

LED targetDisplay[MATRIX_SIZE];
LED currentDisplay[MATRIX_SIZE];

void addBitmapToDisplay(const uint16_t matrix[MATRIX_HEIGHT], LED *display, RgbColor color, Effect effect) {
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	70fb      	strb	r3, [r7, #3]

    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e04c      	b.n	8000f0e <addBitmapToDisplay+0xae>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	e043      	b.n	8000f02 <addBitmapToDisplay+0xa2>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	441a      	add	r2, r3
 8000e84:	0052      	lsls	r2, r2, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	75fb      	strb	r3, [r7, #23]

            if(matrix[i] & (1 << j)) {
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	fa42 f303 	asr.w	r3, r2, r3
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d027      	beq.n	8000efc <addBitmapToDisplay+0x9c>
            	display[ledNumber].red = color.r;
 8000eac:	7dfa      	ldrb	r2, [r7, #23]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	793a      	ldrb	r2, [r7, #4]
 8000eba:	701a      	strb	r2, [r3, #0]
            	display[ledNumber].green = color.g;
 8000ebc:	7dfa      	ldrb	r2, [r7, #23]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	797a      	ldrb	r2, [r7, #5]
 8000eca:	705a      	strb	r2, [r3, #1]
            	display[ledNumber].blue = color.b;
 8000ecc:	7dfa      	ldrb	r2, [r7, #23]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	79ba      	ldrb	r2, [r7, #6]
 8000eda:	709a      	strb	r2, [r3, #2]
            	display[ledNumber].on = true;
 8000edc:	7dfa      	ldrb	r2, [r7, #23]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2201      	movs	r2, #1
 8000eea:	711a      	strb	r2, [r3, #4]
            	display[ledNumber].effect = effect;
 8000eec:	7dfa      	ldrb	r2, [r7, #23]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	78fa      	ldrb	r2, [r7, #3]
 8000efa:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	3301      	adds	r3, #1
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b0a      	cmp	r3, #10
 8000f06:	ddb8      	ble.n	8000e7a <addBitmapToDisplay+0x1a>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b0c      	cmp	r3, #12
 8000f12:	ddaf      	ble.n	8000e74 <addBitmapToDisplay+0x14>
            }

        }
    }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <wipeDisplay>:

void wipeDisplay(LED *display) {
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e022      	b.n	8000f76 <wipeDisplay+0x54>
		display[i].blue = 0;
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	709a      	strb	r2, [r3, #2]
		display[i].green = 0;
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	705a      	strb	r2, [r3, #1]
		display[i].red = 0;
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
		display[i].effect = NONE;
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b8e      	cmp	r3, #142	@ 0x8e
 8000f7a:	ddd9      	ble.n	8000f30 <wipeDisplay+0xe>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <advanceDisplay>:

void advanceDisplay() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    memcpy(currentDisplay, targetDisplay, sizeof(currentDisplay));
 8000f90:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <advanceDisplay+0x20>)
 8000f92:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <advanceDisplay+0x24>)
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f240 23cb 	movw	r3, #715	@ 0x2cb
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f005 f8b2 	bl	8006106 <memcpy>
    wipeDisplay((LED *) targetDisplay);
 8000fa2:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <advanceDisplay+0x24>)
 8000fa4:	f7ff ffbd 	bl	8000f22 <wipeDisplay>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20001ee0 	.word	0x20001ee0
 8000fb0:	20001c14 	.word	0x20001c14

08000fb4 <sendDisplayToDMA>:

void sendDisplayToDMA() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	updatePwmBuffer((LED *) currentDisplay);
 8000fb8:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <sendDisplayToDMA+0x14>)
 8000fba:	f7ff fdff 	bl	8000bbc <updatePwmBuffer>
	DMA_Send();
 8000fbe:	f7ff fe79 	bl	8000cb4 <DMA_Send>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20001ee0 	.word	0x20001ee0

08000fcc <checkUpdateTime>:
FlickerState currentFlickerState = STATE_IDLE;
static RTC_TimeTypeDef previousDisplayedTime = {0}; // Initialize to some value
bool needToUpdateDisplay = true;
bool isFlickering = false;

void checkUpdateTime(RTC_TimeTypeDef currentTime) {
 8000fcc:	b084      	sub	sp, #16
 8000fce:	b490      	push	{r4, r7}
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	f107 0408 	add.w	r4, r7, #8
 8000fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Check if minute ends in 5 and is different from the previous time
    if ((currentTime.Minutes % 5 == 0) && ((currentTime.Minutes != previousDisplayedTime.Minutes) || (currentTime.Hours != previousDisplayedTime.Hours))) {
 8000fda:	7a7a      	ldrb	r2, [r7, #9]
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <checkUpdateTime+0x4c>)
 8000fde:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe2:	0899      	lsrs	r1, r3, #2
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <checkUpdateTime+0x40>
 8000ff2:	7a7a      	ldrb	r2, [r7, #9]
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <checkUpdateTime+0x50>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d104      	bne.n	8001006 <checkUpdateTime+0x3a>
 8000ffc:	7a3a      	ldrb	r2, [r7, #8]
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <checkUpdateTime+0x50>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	429a      	cmp	r2, r3
 8001004:	d002      	beq.n	800100c <checkUpdateTime+0x40>
        needToUpdateDisplay = true;
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <checkUpdateTime+0x54>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
    }
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc90      	pop	{r4, r7}
 8001012:	b004      	add	sp, #16
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	cccccccd 	.word	0xcccccccd
 800101c:	200021ac 	.word	0x200021ac
 8001020:	20000000 	.word	0x20000000

08001024 <updateDisplay>:

void updateDisplay(RTC_TimeTypeDef currentTime) {
 8001024:	b084      	sub	sp, #16
 8001026:	b5b0      	push	{r4, r5, r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	f107 0418 	add.w	r4, r7, #24
 8001030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Call flicker effects based on the state
    switch (currentFlickerState) {
 8001034:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <updateDisplay+0xcc>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d02e      	beq.n	800109a <updateDisplay+0x76>
 800103c:	2b02      	cmp	r3, #2
 800103e:	dc48      	bgt.n	80010d2 <updateDisplay+0xae>
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <updateDisplay+0x26>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d008      	beq.n	800105a <updateDisplay+0x36>
                needToUpdateDisplay = false;
                previousDisplayedTime = currentTime; // Update the time once the whole effect is done
            }
            break;
        default:
        	break;
 8001048:	e043      	b.n	80010d2 <updateDisplay+0xae>
            if (needToUpdateDisplay) {
 800104a:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <updateDisplay+0xd0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d041      	beq.n	80010d6 <updateDisplay+0xb2>
                currentFlickerState = STATE_FLICKER_OUT; // Start the flicker out effect
 8001052:	4b27      	ldr	r3, [pc, #156]	@ (80010f0 <updateDisplay+0xcc>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
            break;
 8001058:	e03d      	b.n	80010d6 <updateDisplay+0xb2>
            isFlickering = flickerOut(); // This function automatically resets its state when done
 800105a:	f000 f851 	bl	8001100 <flickerOut>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <updateDisplay+0xd4>)
 8001064:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) { // Assume you have a way to check if flickering out has finished
 8001066:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <updateDisplay+0xd4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	f083 0301 	eor.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d032      	beq.n	80010da <updateDisplay+0xb6>
                currentFlickerState = STATE_FLICKER_IN; // Proceed to flicker in the new display
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <updateDisplay+0xcc>)
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
                color.r = 5;
 800107a:	2305      	movs	r3, #5
 800107c:	713b      	strb	r3, [r7, #4]
                color.g = 5;
 800107e:	2305      	movs	r3, #5
 8001080:	717b      	strb	r3, [r7, #5]
                color.b = 5;
 8001082:	2305      	movs	r3, #5
 8001084:	71bb      	strb	r3, [r7, #6]
                display_time(currentTime.Hours, currentTime.Minutes, color); // Update the nextFrame for flicker in
 8001086:	7e3b      	ldrb	r3, [r7, #24]
 8001088:	4618      	mov	r0, r3
 800108a:	7e7b      	ldrb	r3, [r7, #25]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4619      	mov	r1, r3
 8001090:	f000 fa3c 	bl	800150c <display_time>
                advanceDisplay();
 8001094:	f7ff ff7a 	bl	8000f8c <advanceDisplay>
            break;
 8001098:	e01f      	b.n	80010da <updateDisplay+0xb6>
        	isFlickering = flickerIn(); // This function automatically resets its state when done
 800109a:	f000 f8c9 	bl	8001230 <flickerIn>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <updateDisplay+0xd4>)
 80010a4:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) { // Assume you have a way to check if flickering in has finished
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <updateDisplay+0xd4>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d014      	beq.n	80010de <updateDisplay+0xba>
                currentFlickerState = STATE_IDLE; // Go back to idle state
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <updateDisplay+0xcc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
                needToUpdateDisplay = false;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <updateDisplay+0xd0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
                previousDisplayedTime = currentTime; // Update the time once the whole effect is done
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <updateDisplay+0xd8>)
 80010c2:	461d      	mov	r5, r3
 80010c4:	f107 0418 	add.w	r4, r7, #24
 80010c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	602b      	str	r3, [r5, #0]
            break;
 80010d0:	e005      	b.n	80010de <updateDisplay+0xba>
        	break;
 80010d2:	bf00      	nop
 80010d4:	e004      	b.n	80010e0 <updateDisplay+0xbc>
            break;
 80010d6:	bf00      	nop
 80010d8:	e002      	b.n	80010e0 <updateDisplay+0xbc>
            break;
 80010da:	bf00      	nop
 80010dc:	e000      	b.n	80010e0 <updateDisplay+0xbc>
            break;
 80010de:	bf00      	nop
    }
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80010ea:	b004      	add	sp, #16
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200021ab 	.word	0x200021ab
 80010f4:	20000000 	.word	0x20000000
 80010f8:	200021c0 	.word	0x200021c0
 80010fc:	200021ac 	.word	0x200021ac

08001100 <flickerOut>:

uint32_t lastTickFlicker;

bool flickerOut(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
    static uint8_t litLEDs[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 8001106:	230a      	movs	r3, #10
 8001108:	717b      	strb	r3, [r7, #5]
    const uint32_t delayInterval = 50; // milliseconds
 800110a:	2332      	movs	r3, #50	@ 0x32
 800110c:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 800110e:	4b42      	ldr	r3, [pc, #264]	@ (8001218 <flickerOut+0x118>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d019      	beq.n	8001150 <flickerOut+0x50>
        numLit = getLEDsWithEffect(litLEDs, (LED *) currentDisplay, FLICKER);
 800111c:	2202      	movs	r2, #2
 800111e:	493f      	ldr	r1, [pc, #252]	@ (800121c <flickerOut+0x11c>)
 8001120:	483f      	ldr	r0, [pc, #252]	@ (8001220 <flickerOut+0x120>)
 8001122:	f7ff fcff 	bl	8000b24 <getLEDsWithEffect>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b3e      	ldr	r3, [pc, #248]	@ (8001224 <flickerOut+0x124>)
 800112c:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 800112e:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <flickerOut+0x124>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <flickerOut+0x3a>
            return true; // Function did not start flickering, return false
 8001136:	2301      	movs	r3, #1
 8001138:	e069      	b.n	800120e <flickerOut+0x10e>
        }
        loop = 0;
 800113a:	4b3b      	ldr	r3, [pc, #236]	@ (8001228 <flickerOut+0x128>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 8001140:	f001 fba8 	bl	8002894 <HAL_GetTick>
 8001144:	4603      	mov	r3, r0
 8001146:	4a39      	ldr	r2, [pc, #228]	@ (800122c <flickerOut+0x12c>)
 8001148:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 800114a:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <flickerOut+0x118>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayInterval) {
 8001150:	f001 fba0 	bl	8002894 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b35      	ldr	r3, [pc, #212]	@ (800122c <flickerOut+0x12c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d854      	bhi.n	800120c <flickerOut+0x10c>
        if (loop >= flickerLoops) {
 8001162:	4b31      	ldr	r3, [pc, #196]	@ (8001228 <flickerOut+0x128>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	797a      	ldrb	r2, [r7, #5]
 8001168:	429a      	cmp	r2, r3
 800116a:	d816      	bhi.n	800119a <flickerOut+0x9a>
            // Ensure all LEDs are turned off at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 800116c:	2300      	movs	r3, #0
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	e009      	b.n	8001186 <flickerOut+0x86>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4a2a      	ldr	r2, [pc, #168]	@ (8001220 <flickerOut+0x120>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	4619      	mov	r1, r3
 800117a:	4828      	ldr	r0, [pc, #160]	@ (800121c <flickerOut+0x11c>)
 800117c:	f7ff fcbe 	bl	8000afc <turnOffLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	3301      	adds	r3, #1
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <flickerOut+0x124>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3f0      	bcc.n	8001172 <flickerOut+0x72>
            }
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 8001190:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <flickerOut+0x118>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 8001196:	2300      	movs	r3, #0
 8001198:	e039      	b.n	800120e <flickerOut+0x10e>
        }

        shuffleArray(litLEDs, numLit);
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <flickerOut+0x124>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	481f      	ldr	r0, [pc, #124]	@ (8001220 <flickerOut+0x120>)
 80011a2:	f000 f979 	bl	8001498 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	71bb      	strb	r3, [r7, #6]
 80011aa:	e01f      	b.n	80011ec <flickerOut+0xec>
            if (RANDOM_IN_RANGE(0, flickerLoops) < loop) {
 80011ac:	f004 fda0 	bl	8005cf0 <rand>
 80011b0:	4602      	mov	r2, r0
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	3301      	adds	r3, #1
 80011b6:	fb92 f1f3 	sdiv	r1, r2, r3
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4a19      	ldr	r2, [pc, #100]	@ (8001228 <flickerOut+0x128>)
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	4293      	cmp	r3, r2
 80011c6:	da07      	bge.n	80011d8 <flickerOut+0xd8>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <flickerOut+0x120>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4812      	ldr	r0, [pc, #72]	@ (800121c <flickerOut+0x11c>)
 80011d2:	f7ff fc93 	bl	8000afc <turnOffLED>
 80011d6:	e006      	b.n	80011e6 <flickerOut+0xe6>
            } else {
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	4a11      	ldr	r2, [pc, #68]	@ (8001220 <flickerOut+0x120>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	4619      	mov	r1, r3
 80011e0:	480e      	ldr	r0, [pc, #56]	@ (800121c <flickerOut+0x11c>)
 80011e2:	f7ff fc77 	bl	8000ad4 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	3301      	adds	r3, #1
 80011ea:	71bb      	strb	r3, [r7, #6]
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <flickerOut+0x124>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	79ba      	ldrb	r2, [r7, #6]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3da      	bcc.n	80011ac <flickerOut+0xac>
            }
        }
        lastTickEffect = HAL_GetTick();
 80011f6:	f001 fb4d 	bl	8002894 <HAL_GetTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <flickerOut+0x12c>)
 80011fe:	6013      	str	r3, [r2, #0]
        loop++;
 8001200:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <flickerOut+0x128>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <flickerOut+0x128>)
 800120a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800120c:	2301      	movs	r3, #1
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200021c1 	.word	0x200021c1
 800121c:	20001ee0 	.word	0x20001ee0
 8001220:	200021c4 	.word	0x200021c4
 8001224:	20002253 	.word	0x20002253
 8001228:	20002254 	.word	0x20002254
 800122c:	20002258 	.word	0x20002258

08001230 <flickerIn>:

bool flickerIn(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
    static uint8_t litLEDs[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 8001236:	230a      	movs	r3, #10
 8001238:	717b      	strb	r3, [r7, #5]
    const uint32_t delayInterval = 50; // milliseconds
 800123a:	2332      	movs	r3, #50	@ 0x32
 800123c:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 800123e:	4b42      	ldr	r3, [pc, #264]	@ (8001348 <flickerIn+0x118>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	f083 0301 	eor.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d019      	beq.n	8001280 <flickerIn+0x50>
        numLit = getLEDsWithEffect(litLEDs, (LED *) currentDisplay, FLICKER);
 800124c:	2202      	movs	r2, #2
 800124e:	493f      	ldr	r1, [pc, #252]	@ (800134c <flickerIn+0x11c>)
 8001250:	483f      	ldr	r0, [pc, #252]	@ (8001350 <flickerIn+0x120>)
 8001252:	f7ff fc67 	bl	8000b24 <getLEDsWithEffect>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <flickerIn+0x124>)
 800125c:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 800125e:	4b3d      	ldr	r3, [pc, #244]	@ (8001354 <flickerIn+0x124>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <flickerIn+0x3a>
            return true;
 8001266:	2301      	movs	r3, #1
 8001268:	e069      	b.n	800133e <flickerIn+0x10e>
        }
        loop = 0;
 800126a:	4b3b      	ldr	r3, [pc, #236]	@ (8001358 <flickerIn+0x128>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 8001270:	f001 fb10 	bl	8002894 <HAL_GetTick>
 8001274:	4603      	mov	r3, r0
 8001276:	4a39      	ldr	r2, [pc, #228]	@ (800135c <flickerIn+0x12c>)
 8001278:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <flickerIn+0x118>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayInterval) {
 8001280:	f001 fb08 	bl	8002894 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	4b35      	ldr	r3, [pc, #212]	@ (800135c <flickerIn+0x12c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d854      	bhi.n	800133c <flickerIn+0x10c>
        if (loop >= flickerLoops) {
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <flickerIn+0x128>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	797a      	ldrb	r2, [r7, #5]
 8001298:	429a      	cmp	r2, r3
 800129a:	d816      	bhi.n	80012ca <flickerIn+0x9a>
            // Ensure all LEDs are turned on at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 800129c:	2300      	movs	r3, #0
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	e009      	b.n	80012b6 <flickerIn+0x86>
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001350 <flickerIn+0x120>)
 80012a6:	5cd3      	ldrb	r3, [r2, r3]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4828      	ldr	r0, [pc, #160]	@ (800134c <flickerIn+0x11c>)
 80012ac:	f7ff fc12 	bl	8000ad4 <turnOnLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	3301      	adds	r3, #1
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <flickerIn+0x124>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3f0      	bcc.n	80012a2 <flickerIn+0x72>
            }
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <flickerIn+0x118>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 80012c6:	2300      	movs	r3, #0
 80012c8:	e039      	b.n	800133e <flickerIn+0x10e>
        }

        shuffleArray(litLEDs, numLit);
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <flickerIn+0x124>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4619      	mov	r1, r3
 80012d0:	481f      	ldr	r0, [pc, #124]	@ (8001350 <flickerIn+0x120>)
 80012d2:	f000 f8e1 	bl	8001498 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	71bb      	strb	r3, [r7, #6]
 80012da:	e01f      	b.n	800131c <flickerIn+0xec>
            if (RANDOM_IN_RANGE(0, flickerLoops) > loop) {
 80012dc:	f004 fd08 	bl	8005cf0 <rand>
 80012e0:	4602      	mov	r2, r0
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	3301      	adds	r3, #1
 80012e6:	fb92 f1f3 	sdiv	r1, r2, r3
 80012ea:	fb01 f303 	mul.w	r3, r1, r3
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	4a19      	ldr	r2, [pc, #100]	@ (8001358 <flickerIn+0x128>)
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	4293      	cmp	r3, r2
 80012f6:	dd07      	ble.n	8001308 <flickerIn+0xd8>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	4a15      	ldr	r2, [pc, #84]	@ (8001350 <flickerIn+0x120>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	4619      	mov	r1, r3
 8001300:	4812      	ldr	r0, [pc, #72]	@ (800134c <flickerIn+0x11c>)
 8001302:	f7ff fbfb 	bl	8000afc <turnOffLED>
 8001306:	e006      	b.n	8001316 <flickerIn+0xe6>
            } else {
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	4a11      	ldr	r2, [pc, #68]	@ (8001350 <flickerIn+0x120>)
 800130c:	5cd3      	ldrb	r3, [r2, r3]
 800130e:	4619      	mov	r1, r3
 8001310:	480e      	ldr	r0, [pc, #56]	@ (800134c <flickerIn+0x11c>)
 8001312:	f7ff fbdf 	bl	8000ad4 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	3301      	adds	r3, #1
 800131a:	71bb      	strb	r3, [r7, #6]
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <flickerIn+0x124>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	79ba      	ldrb	r2, [r7, #6]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3da      	bcc.n	80012dc <flickerIn+0xac>
            }
        }
        lastTickEffect = HAL_GetTick();
 8001326:	f001 fab5 	bl	8002894 <HAL_GetTick>
 800132a:	4603      	mov	r3, r0
 800132c:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <flickerIn+0x12c>)
 800132e:	6013      	str	r3, [r2, #0]
        loop++;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <flickerIn+0x128>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <flickerIn+0x128>)
 800133a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000225c 	.word	0x2000225c
 800134c:	20001ee0 	.word	0x20001ee0
 8001350:	20002260 	.word	0x20002260
 8001354:	200022ef 	.word	0x200022ef
 8001358:	200022f0 	.word	0x200022f0
 800135c:	200022f4 	.word	0x200022f4

08001360 <setupRainbow>:


static HsvColor lastColor = {0};
bool init = false;

void setupRainbow(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b0a8      	sub	sp, #160	@ 0xa0
 8001364:	af00      	add	r7, sp, #0
	uint8_t rainbow[MATRIX_SIZE];
	uint32_t size = getLEDsWithEffect(rainbow, (LED *) currentDisplay, RAINBOW);
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	2201      	movs	r2, #1
 800136c:	492e      	ldr	r1, [pc, #184]	@ (8001428 <setupRainbow+0xc8>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fbd8 	bl	8000b24 <getLEDsWithEffect>
 8001374:	4603      	mov	r3, r0
 8001376:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	for(uint8_t i = 0; i < size; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001380:	e046      	b.n	8001410 <setupRainbow+0xb0>
		lastColor.h++;
 8001382:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <setupRainbow+0xcc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b28      	ldr	r3, [pc, #160]	@ (800142c <setupRainbow+0xcc>)
 800138c:	701a      	strb	r2, [r3, #0]
		RgbColor rgb = HsvToRgb(lastColor);
 800138e:	4b27      	ldr	r3, [pc, #156]	@ (800142c <setupRainbow+0xcc>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f7ff fcbb 	bl	8000d0c <HsvToRgb>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	713a      	strb	r2, [r7, #4]
 800139c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80013a0:	717a      	strb	r2, [r7, #5]
 80013a2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80013a6:	71bb      	strb	r3, [r7, #6]
		currentDisplay[rainbow[i]].red = rgb.r;
 80013a8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80013ac:	33a0      	adds	r3, #160	@ 0xa0
 80013ae:	443b      	add	r3, r7
 80013b0:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80013b4:	4619      	mov	r1, r3
 80013b6:	7938      	ldrb	r0, [r7, #4]
 80013b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <setupRainbow+0xc8>)
 80013ba:	460b      	mov	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	4413      	add	r3, r2
 80013c2:	4602      	mov	r2, r0
 80013c4:	701a      	strb	r2, [r3, #0]
		currentDisplay[rainbow[i]].blue = rgb.g;
 80013c6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80013ca:	33a0      	adds	r3, #160	@ 0xa0
 80013cc:	443b      	add	r3, r7
 80013ce:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80013d2:	4619      	mov	r1, r3
 80013d4:	7978      	ldrb	r0, [r7, #5]
 80013d6:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <setupRainbow+0xc8>)
 80013d8:	460b      	mov	r3, r1
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	4413      	add	r3, r2
 80013e0:	3302      	adds	r3, #2
 80013e2:	4602      	mov	r2, r0
 80013e4:	701a      	strb	r2, [r3, #0]
		currentDisplay[rainbow[i]].green = rgb.b;
 80013e6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80013ea:	33a0      	adds	r3, #160	@ 0xa0
 80013ec:	443b      	add	r3, r7
 80013ee:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80013f2:	4619      	mov	r1, r3
 80013f4:	79b8      	ldrb	r0, [r7, #6]
 80013f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001428 <setupRainbow+0xc8>)
 80013f8:	460b      	mov	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	4413      	add	r3, r2
 8001400:	3301      	adds	r3, #1
 8001402:	4602      	mov	r2, r0
 8001404:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++) {
 8001406:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800140a:	3301      	adds	r3, #1
 800140c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001410:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001414:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001418:	429a      	cmp	r2, r3
 800141a:	d8b2      	bhi.n	8001382 <setupRainbow+0x22>
	}

}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	37a0      	adds	r7, #160	@ 0xa0
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20001ee0 	.word	0x20001ee0
 800142c:	200022f8 	.word	0x200022f8

08001430 <rainbow>:
		currentDisplay[rainbow[i]].green = rgb.g;

	}
}

void rainbow(uint8_t brightness) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]

	if(!init) {
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <rainbow+0x5c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f083 0301 	eor.w	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d017      	beq.n	8001478 <rainbow+0x48>
		lastColor.s = 255;
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <rainbow+0x60>)
 800144a:	22ff      	movs	r2, #255	@ 0xff
 800144c:	705a      	strb	r2, [r3, #1]
		lastColor.v = brightness;
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <rainbow+0x60>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	7093      	strb	r3, [r2, #2]
		setupRainbow();
 8001454:	f7ff ff84 	bl	8001360 <setupRainbow>
		init = !init;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <rainbow+0x5c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf14      	ite	ne
 8001460:	2301      	movne	r3, #1
 8001462:	2300      	moveq	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f083 0301 	eor.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <rainbow+0x5c>)
 8001474:	701a      	strb	r2, [r3, #0]
		return;
 8001476:	e006      	b.n	8001486 <rainbow+0x56>
	}

	setupRainbow();
 8001478:	f7ff ff72 	bl	8001360 <setupRainbow>
//	advanceRainbow(brightness);

	updatePwmBuffer((LED *) currentDisplay);
 800147c:	4805      	ldr	r0, [pc, #20]	@ (8001494 <rainbow+0x64>)
 800147e:	f7ff fb9d 	bl	8000bbc <updatePwmBuffer>
	DMA_Send();
 8001482:	f7ff fc17 	bl	8000cb4 <DMA_Send>
}
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200022fb 	.word	0x200022fb
 8001490:	200022f8 	.word	0x200022f8
 8001494:	20001ee0 	.word	0x20001ee0

08001498 <shuffleArray>:
 * @param   size  Number of elements in the array.
 *
 * @note    The array must be non-empty and contain at least two elements for shuffling to occur.
 *          Otherwise, the function does nothing.
 */
void shuffleArray(uint8_t *array, uint32_t size) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
    if (size > 1) {
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d92d      	bls.n	8001504 <shuffleArray+0x6c>
        for (uint32_t i = 0; i < size - 1; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e025      	b.n	80014fa <shuffleArray+0x62>
            uint32_t j = i + (uint32_t) rand() / (RAND_MAX / (size - i) + 1);
 80014ae:	f004 fc1f 	bl	8005cf0 <rand>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4619      	mov	r1, r3
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4413      	add	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
            uint8_t t = array[j];
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	73fb      	strb	r3, [r7, #15]
            array[j] = array[i];
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	441a      	add	r2, r3
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	440b      	add	r3, r1
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	701a      	strb	r2, [r3, #0]
            array[i] = t;
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4413      	add	r3, r2
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size - 1; i++) {
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3d4      	bcc.n	80014ae <shuffleArray+0x16>
        }
    }
}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <display_time>:
		MINUTE_TWENTY,
		MINUTE_TWENTYFIVE,
		MINUTE_THIRTY
};

void display_time(int hour, int minute, RgbColor color) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
    addBitmapToDisplay(BMP_ITS, (LED *) targetDisplay, color, FLICKER);
 8001518:	2302      	movs	r3, #2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4943      	ldr	r1, [pc, #268]	@ (800162c <display_time+0x120>)
 800151e:	4844      	ldr	r0, [pc, #272]	@ (8001630 <display_time+0x124>)
 8001520:	f7ff fc9e 	bl	8000e60 <addBitmapToDisplay>

    // Round down to the nearest five minutes and determine if it is 'past' or 'to' the hour
    int roundedMinute = (minute / 5) * 5;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4a43      	ldr	r2, [pc, #268]	@ (8001634 <display_time+0x128>)
 8001528:	fb82 1203 	smull	r1, r2, r2, r3
 800152c:	1052      	asrs	r2, r2, #1
 800152e:	17db      	asrs	r3, r3, #31
 8001530:	1ad2      	subs	r2, r2, r3
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
    if (roundedMinute > 0) {
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b00      	cmp	r3, #0
 800153e:	dd16      	ble.n	800156e <display_time+0x62>
        if (roundedMinute < 35) {
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b22      	cmp	r3, #34	@ 0x22
 8001544:	dc06      	bgt.n	8001554 <display_time+0x48>
            addBitmapToDisplay(BMP_PAST, (LED *) targetDisplay, color, FLICKER);
 8001546:	2302      	movs	r3, #2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4938      	ldr	r1, [pc, #224]	@ (800162c <display_time+0x120>)
 800154c:	483a      	ldr	r0, [pc, #232]	@ (8001638 <display_time+0x12c>)
 800154e:	f7ff fc87 	bl	8000e60 <addBitmapToDisplay>
 8001552:	e00c      	b.n	800156e <display_time+0x62>
        } else {
            roundedMinute = 60 - roundedMinute;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800155a:	617b      	str	r3, [r7, #20]
            hour++;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3301      	adds	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
            addBitmapToDisplay(BMP_TILL, (LED *) targetDisplay, color, FLICKER);
 8001562:	2302      	movs	r3, #2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4931      	ldr	r1, [pc, #196]	@ (800162c <display_time+0x120>)
 8001568:	4834      	ldr	r0, [pc, #208]	@ (800163c <display_time+0x130>)
 800156a:	f7ff fc79 	bl	8000e60 <addBitmapToDisplay>
        }
    }

    // Normalize the hour to a 12-hour format and display AM/PM where applicable
    hour %= 24; // Normalize hour to 0-23
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <display_time+0x134>)
 8001572:	fb83 1302 	smull	r1, r3, r3, r2
 8001576:	1099      	asrs	r1, r3, #2
 8001578:	17d3      	asrs	r3, r2, #31
 800157a:	1ac9      	subs	r1, r1, r3
 800157c:	460b      	mov	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	440b      	add	r3, r1
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	60fb      	str	r3, [r7, #12]
    if(hour == 0 || hour == 12) {
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d012      	beq.n	80015b4 <display_time+0xa8>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d00f      	beq.n	80015b4 <display_time+0xa8>
        // It's exactly midnight or noon, so we will handle it in the hour display section.
    } else if (hour < 12) {
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b0b      	cmp	r3, #11
 8001598:	dc06      	bgt.n	80015a8 <display_time+0x9c>
        addBitmapToDisplay(BMP_AM, (LED *) targetDisplay, color, FLICKER);
 800159a:	2302      	movs	r3, #2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4923      	ldr	r1, [pc, #140]	@ (800162c <display_time+0x120>)
 80015a0:	4828      	ldr	r0, [pc, #160]	@ (8001644 <display_time+0x138>)
 80015a2:	f7ff fc5d 	bl	8000e60 <addBitmapToDisplay>
 80015a6:	e005      	b.n	80015b4 <display_time+0xa8>
    } else {
        addBitmapToDisplay(BMP_PM, (LED *) targetDisplay, color, FLICKER);
 80015a8:	2302      	movs	r3, #2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	491f      	ldr	r1, [pc, #124]	@ (800162c <display_time+0x120>)
 80015ae:	4826      	ldr	r0, [pc, #152]	@ (8001648 <display_time+0x13c>)
 80015b0:	f7ff fc56 	bl	8000e60 <addBitmapToDisplay>
    }

    // Display the hour, normalizing hour again for 12-hour format with special cases for noon and midnight
    if (hour > 12) {
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	dd02      	ble.n	80015c0 <display_time+0xb4>
        hour -= 12; // Convert to 12-hour format
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b0c      	subs	r3, #12
 80015be:	60fb      	str	r3, [r7, #12]
    }
    if (hour == 0) {
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <display_time+0xbe>
        hour = 12; // Adjust for midnight/noon display
 80015c6:	230c      	movs	r3, #12
 80015c8:	60fb      	str	r3, [r7, #12]
    }

    // Use an array to simplify hour display logic
    if(hour >= 1 && hour <= 12) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dd16      	ble.n	80015fe <display_time+0xf2>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	dc13      	bgt.n	80015fe <display_time+0xf2>
        addBitmapToDisplay(hourBitmaps[hour % 12], (LED *) targetDisplay, color, FLICKER);
 80015d6:	68f9      	ldr	r1, [r7, #12]
 80015d8:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <display_time+0x134>)
 80015da:	fb83 2301 	smull	r2, r3, r3, r1
 80015de:	105a      	asrs	r2, r3, #1
 80015e0:	17cb      	asrs	r3, r1, #31
 80015e2:	1ad2      	subs	r2, r2, r3
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	1aca      	subs	r2, r1, r3
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <display_time+0x140>)
 80015f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80015f4:	2302      	movs	r3, #2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	490c      	ldr	r1, [pc, #48]	@ (800162c <display_time+0x120>)
 80015fa:	f7ff fc31 	bl	8000e60 <addBitmapToDisplay>
    }

    // Display the minute in intervals of five using an array pointing to the bitmaps
    if (roundedMinute > 0) {
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	dd0f      	ble.n	8001624 <display_time+0x118>
        addBitmapToDisplay(minuteBitmaps[(roundedMinute / 5) - 1], (LED *) targetDisplay, color, FLICKER);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <display_time+0x128>)
 8001608:	fb82 1203 	smull	r1, r2, r2, r3
 800160c:	1052      	asrs	r2, r2, #1
 800160e:	17db      	asrs	r3, r3, #31
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	3b01      	subs	r3, #1
 8001614:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <display_time+0x144>)
 8001616:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800161a:	2302      	movs	r3, #2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4903      	ldr	r1, [pc, #12]	@ (800162c <display_time+0x120>)
 8001620:	f7ff fc1e 	bl	8000e60 <addBitmapToDisplay>
    }
}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20001c14 	.word	0x20001c14
 8001630:	080072e6 	.word	0x080072e6
 8001634:	66666667 	.word	0x66666667
 8001638:	08007300 	.word	0x08007300
 800163c:	0800731a 	.word	0x0800731a
 8001640:	2aaaaaab 	.word	0x2aaaaaab
 8001644:	0800739c 	.word	0x0800739c
 8001648:	080073b6 	.word	0x080073b6
 800164c:	20000004 	.word	0x20000004
 8001650:	20000038 	.word	0x20000038

08001654 <display_birthday>:
	addBitmapToDisplay(BMP_HAPPY, (LED *) currentDisplay, color, RAINBOW);
	addBitmapToDisplay(BMP_ANNIVERSARY, (LED *) currentDisplay, color, RAINBOW);
	addBitmapToDisplay(BMP_KATIEDEREK, (LED *) currentDisplay, color, RAINBOW);
}

void display_birthday(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
	RgbColor color;
	color.r = 5;
 800165a:	2305      	movs	r3, #5
 800165c:	713b      	strb	r3, [r7, #4]
	color.b = 5;
 800165e:	2305      	movs	r3, #5
 8001660:	71bb      	strb	r3, [r7, #6]
	color.g = 5;
 8001662:	2305      	movs	r3, #5
 8001664:	717b      	strb	r3, [r7, #5]
	addBitmapToDisplay(BMP_HAPPY, (LED *) currentDisplay, color, RAINBOW);
 8001666:	2301      	movs	r3, #1
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	490a      	ldr	r1, [pc, #40]	@ (8001694 <display_birthday+0x40>)
 800166c:	480a      	ldr	r0, [pc, #40]	@ (8001698 <display_birthday+0x44>)
 800166e:	f7ff fbf7 	bl	8000e60 <addBitmapToDisplay>
	addBitmapToDisplay(BMP_BIRTHDAY, (LED *) currentDisplay, color, RAINBOW);
 8001672:	2301      	movs	r3, #1
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4907      	ldr	r1, [pc, #28]	@ (8001694 <display_birthday+0x40>)
 8001678:	4808      	ldr	r0, [pc, #32]	@ (800169c <display_birthday+0x48>)
 800167a:	f7ff fbf1 	bl	8000e60 <addBitmapToDisplay>
	addBitmapToDisplay(BMP_DEREK, (LED *) currentDisplay, color, RAINBOW);
 800167e:	2301      	movs	r3, #1
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4904      	ldr	r1, [pc, #16]	@ (8001694 <display_birthday+0x40>)
 8001684:	4806      	ldr	r0, [pc, #24]	@ (80016a0 <display_birthday+0x4c>)
 8001686:	f7ff fbeb 	bl	8000e60 <addBitmapToDisplay>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20001ee0 	.word	0x20001ee0
 8001698:	08007334 	.word	0x08007334
 800169c:	08007368 	.word	0x08007368
 80016a0:	080073d0 	.word	0x080073d0

080016a4 <twinkle>:
    newColor.b = (uint8_t) newBlue;

    return newColor;
}

void twinkle() {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0a6      	sub	sp, #152	@ 0x98
 80016a8:	af00      	add	r7, sp, #0

	uint8_t userBrightness = getBrightness();
 80016aa:	f000 facd 	bl	8001c48 <getBrightness>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

	uint8_t twinkleLEDs[MATRIX_SIZE];

	uint32_t numTwinleLEDs = getLEDsWithEffect((uint8_t *) twinkleLEDs, currentDisplay, TWINKLE);
 80016b4:	463b      	mov	r3, r7
 80016b6:	2203      	movs	r2, #3
 80016b8:	4909      	ldr	r1, [pc, #36]	@ (80016e0 <twinkle+0x3c>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fa32 	bl	8000b24 <getLEDsWithEffect>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	shuffleArray(twinkleLEDs, numTwinleLEDs);
 80016c6:	463b      	mov	r3, r7
 80016c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fee3 	bl	8001498 <shuffleArray>

	//if arrays are not equal, copy elements to other array

	if(HAL_GetTick() - lastTickTwinkle <= twinkleDelay) {
 80016d2:	f001 f8df 	bl	8002894 <HAL_GetTick>
//			//keep a limit
//		}
	}


}
 80016d6:	bf00      	nop
 80016d8:	3798      	adds	r7, #152	@ 0x98
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20001ee0 	.word	0x20001ee0

080016e4 <checkButtonPress>:
 *      Author: dsava
 */

#include "button.h"

bool checkButtonPress(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 80016ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <checkButtonPress+0x3c>)
 80016f0:	f001 ff28 	bl	8003544 <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <checkButtonPress+0x40>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d107      	bne.n	8001710 <checkButtonPress+0x2c>
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d104      	bne.n	8001710 <checkButtonPress+0x2c>
        // Button was pressed - perform actions here.
        lastButtonState = currentButtonState; // Update the last button state.
 8001706:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <checkButtonPress+0x40>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	7013      	strb	r3, [r2, #0]
        return true;
 800170c:	2301      	movs	r3, #1
 800170e:	e003      	b.n	8001718 <checkButtonPress+0x34>
    } else {
        // Update the last button state.
        lastButtonState = currentButtonState;
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <checkButtonPress+0x40>)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	7013      	strb	r3, [r2, #0]
        return false;
 8001716:	2300      	movs	r3, #0
    }
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40020400 	.word	0x40020400
 8001724:	20000050 	.word	0x20000050

08001728 <switchState>:

void switchState() {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
    switch(getDeviceState()) {
 800172c:	f000 f9e0 	bl	8001af0 <getDeviceState>
 8001730:	4603      	mov	r3, r0
 8001732:	2b09      	cmp	r3, #9
 8001734:	f200 80ab 	bhi.w	800188e <switchState+0x166>
 8001738:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <switchState+0x18>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001769 	.word	0x08001769
 8001744:	08001771 	.word	0x08001771
 8001748:	08001779 	.word	0x08001779
 800174c:	08001801 	.word	0x08001801
 8001750:	08001817 	.word	0x08001817
 8001754:	08001873 	.word	0x08001873
 8001758:	08001887 	.word	0x08001887
 800175c:	0800182f 	.word	0x0800182f
 8001760:	0800184d 	.word	0x0800184d
 8001764:	0800186b 	.word	0x0800186b
        case SLEEP:
            setDeviceState(WAKE);
 8001768:	2001      	movs	r0, #1
 800176a:	f000 f9cd 	bl	8001b08 <setDeviceState>
            break;
 800176e:	e092      	b.n	8001896 <switchState+0x16e>
        case WAKE:
            setDeviceState(SELECT);
 8001770:	2002      	movs	r0, #2
 8001772:	f000 f9c9 	bl	8001b08 <setDeviceState>
            break;
 8001776:	e08e      	b.n	8001896 <switchState+0x16e>
        case SELECT:
        	switch(getCounterWithinBounds(0, 3)){
 8001778:	2103      	movs	r1, #3
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f9d4 	bl	8001b28 <getCounterWithinBounds>
 8001780:	4603      	mov	r3, r0
 8001782:	2b03      	cmp	r3, #3
 8001784:	d83a      	bhi.n	80017fc <switchState+0xd4>
 8001786:	a201      	add	r2, pc, #4	@ (adr r2, 800178c <switchState+0x64>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017b3 	.word	0x080017b3
 8001794:	080017c1 	.word	0x080017c1
 8001798:	080017df 	.word	0x080017df
        	case 0:
        		setCounter(getTime()->Hours);
 800179c:	f000 fa0c 	bl	8001bb8 <getTime>
 80017a0:	4603      	mov	r3, r0
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f9df 	bl	8001b68 <setCounter>
        		setDeviceState(SET_HOURS);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f000 f9ac 	bl	8001b08 <setDeviceState>
        		break;
 80017b0:	e025      	b.n	80017fe <switchState+0xd6>
        	case 1:
        		setDeviceState(SET_COLOR);
 80017b2:	2005      	movs	r0, #5
 80017b4:	f000 f9a8 	bl	8001b08 <setDeviceState>
        		setCounter(16); //16 presets
 80017b8:	2010      	movs	r0, #16
 80017ba:	f000 f9d5 	bl	8001b68 <setCounter>
        		break;
 80017be:	e01e      	b.n	80017fe <switchState+0xd6>
        	case 2:
        		setDateState(ANNIVERSARY_DATE);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f000 fa31 	bl	8001c28 <setDateState>
            	setCounter(getDate(ANNIVERSARY_DATE)->Month);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f000 fa00 	bl	8001bcc <getDate>
 80017cc:	4603      	mov	r3, r0
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f9c9 	bl	8001b68 <setCounter>
            	setDeviceState(SET_MONTH);
 80017d6:	2007      	movs	r0, #7
 80017d8:	f000 f996 	bl	8001b08 <setDeviceState>
        		break;
 80017dc:	e00f      	b.n	80017fe <switchState+0xd6>
        	case 3:
        		setDateState(BIRTHDAY_DATE);
 80017de:	2002      	movs	r0, #2
 80017e0:	f000 fa22 	bl	8001c28 <setDateState>
            	setCounter(getDate(BIRTHDAY_DATE)->Month);
 80017e4:	2002      	movs	r0, #2
 80017e6:	f000 f9f1 	bl	8001bcc <getDate>
 80017ea:	4603      	mov	r3, r0
 80017ec:	785b      	ldrb	r3, [r3, #1]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f9ba 	bl	8001b68 <setCounter>
            	setDeviceState(SET_MONTH);
 80017f4:	2007      	movs	r0, #7
 80017f6:	f000 f987 	bl	8001b08 <setDeviceState>
        		break;
 80017fa:	e000      	b.n	80017fe <switchState+0xd6>
        	default:
        		break;
 80017fc:	bf00      	nop
        	}
            break;
 80017fe:	e04a      	b.n	8001896 <switchState+0x16e>
        case SET_HOURS:
        	setCounter(getTime()->Minutes);
 8001800:	f000 f9da 	bl	8001bb8 <getTime>
 8001804:	4603      	mov	r3, r0
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f9ad 	bl	8001b68 <setCounter>
            setDeviceState(SET_MINUTES);
 800180e:	2004      	movs	r0, #4
 8001810:	f000 f97a 	bl	8001b08 <setDeviceState>
            break;
 8001814:	e03f      	b.n	8001896 <switchState+0x16e>
        case SET_MINUTES:
        	setCounter(getDate(SYSTEM_DATE)->Month);
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f9d8 	bl	8001bcc <getDate>
 800181c:	4603      	mov	r3, r0
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f9a1 	bl	8001b68 <setCounter>
            setDeviceState(SET_MONTH);
 8001826:	2007      	movs	r0, #7
 8001828:	f000 f96e 	bl	8001b08 <setDeviceState>
            break;
 800182c:	e033      	b.n	8001896 <switchState+0x16e>
        case SET_MONTH:
        	setCounter(getDate(getDateState())->Date);
 800182e:	f000 f9ef 	bl	8001c10 <getDateState>
 8001832:	4603      	mov	r3, r0
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f9c9 	bl	8001bcc <getDate>
 800183a:	4603      	mov	r3, r0
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f992 	bl	8001b68 <setCounter>
        	setDeviceState(SET_DAY);
 8001844:	2008      	movs	r0, #8
 8001846:	f000 f95f 	bl	8001b08 <setDeviceState>
        	break;
 800184a:	e024      	b.n	8001896 <switchState+0x16e>
        case SET_DAY:
        	setCounter(getDate(getDateState())->Year);
 800184c:	f000 f9e0 	bl	8001c10 <getDateState>
 8001850:	4603      	mov	r3, r0
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f9ba 	bl	8001bcc <getDate>
 8001858:	4603      	mov	r3, r0
 800185a:	78db      	ldrb	r3, [r3, #3]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f983 	bl	8001b68 <setCounter>
        	setDeviceState(SET_YEAR);
 8001862:	2009      	movs	r0, #9
 8001864:	f000 f950 	bl	8001b08 <setDeviceState>
        	break;
 8001868:	e015      	b.n	8001896 <switchState+0x16e>
        case SET_YEAR:
        	setDeviceState(SLEEP);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f94c 	bl	8001b08 <setDeviceState>
        	break;
 8001870:	e011      	b.n	8001896 <switchState+0x16e>
        case SET_COLOR:
        	setCounter(getBrightness());
 8001872:	f000 f9e9 	bl	8001c48 <getBrightness>
 8001876:	4603      	mov	r3, r0
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f975 	bl	8001b68 <setCounter>
            setDeviceState(SET_BRIGHTNESS); // After color, set brightness
 800187e:	2006      	movs	r0, #6
 8001880:	f000 f942 	bl	8001b08 <setDeviceState>
            break;
 8001884:	e007      	b.n	8001896 <switchState+0x16e>
        case SET_BRIGHTNESS:
            setDeviceState(SLEEP); // Return to SLEEP after setting LED features
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f93e 	bl	8001b08 <setDeviceState>
            break;
 800188c:	e003      	b.n	8001896 <switchState+0x16e>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            setDeviceState(SLEEP);
 800188e:	2000      	movs	r0, #0
 8001890:	f000 f93a 	bl	8001b08 <setDeviceState>
            break;
 8001894:	bf00      	nop
    }
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop

0800189c <configureSettings>:
 *      Author: dsava
 */

#include "menu.h"

void configureSettings(void) {
 800189c:	b598      	push	{r3, r4, r7, lr}
 800189e:	af00      	add	r7, sp, #0

	switch(getDeviceState()) {
 80018a0:	f000 f926 	bl	8001af0 <getDeviceState>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b09      	cmp	r3, #9
 80018a8:	f200 80f1 	bhi.w	8001a8e <configureSettings+0x1f2>
 80018ac:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <configureSettings+0x18>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018dd 	.word	0x080018dd
 80018b8:	080018f1 	.word	0x080018f1
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800192f 	.word	0x0800192f
 80018c4:	08001961 	.word	0x08001961
 80018c8:	08001a5f 	.word	0x08001a5f
 80018cc:	08001a77 	.word	0x08001a77
 80018d0:	08001995 	.word	0x08001995
 80018d4:	080019df 	.word	0x080019df
 80018d8:	08001a23 	.word	0x08001a23
		case SLEEP:
			setDisplayString("%d", getCounterWithinBounds(0, 50));
 80018dc:	2132      	movs	r1, #50	@ 0x32
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f922 	bl	8001b28 <getCounterWithinBounds>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4619      	mov	r1, r3
 80018e8:	486a      	ldr	r0, [pc, #424]	@ (8001a94 <configureSettings+0x1f8>)
 80018ea:	f000 f9d3 	bl	8001c94 <setDisplayString>
			break;
 80018ee:	e0cf      	b.n	8001a90 <configureSettings+0x1f4>
		case WAKE:
			if(getCounterWithinBounds(0, 1)) {
 80018f0:	2101      	movs	r1, #1
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f918 	bl	8001b28 <getCounterWithinBounds>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <configureSettings+0x70>
				setDisplayString("SET");
 80018fe:	4866      	ldr	r0, [pc, #408]	@ (8001a98 <configureSettings+0x1fc>)
 8001900:	f000 f9c8 	bl	8001c94 <setDisplayString>
				setMode(SET_MODE);
 8001904:	2001      	movs	r0, #1
 8001906:	f000 f9ab 	bl	8001c60 <setMode>
			} else {
				setDisplayString("DEL");
				setMode(DELETE_MODE);
			}
			break;
 800190a:	e0c1      	b.n	8001a90 <configureSettings+0x1f4>
				setDisplayString("DEL");
 800190c:	4863      	ldr	r0, [pc, #396]	@ (8001a9c <configureSettings+0x200>)
 800190e:	f000 f9c1 	bl	8001c94 <setDisplayString>
				setMode(DELETE_MODE);
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f9a4 	bl	8001c60 <setMode>
			break;
 8001918:	e0ba      	b.n	8001a90 <configureSettings+0x1f4>
		case SELECT:
			setDisplayString("%d", getCounterWithinBounds(0, 3));
 800191a:	2103      	movs	r1, #3
 800191c:	2000      	movs	r0, #0
 800191e:	f000 f903 	bl	8001b28 <getCounterWithinBounds>
 8001922:	4603      	mov	r3, r0
 8001924:	4619      	mov	r1, r3
 8001926:	485b      	ldr	r0, [pc, #364]	@ (8001a94 <configureSettings+0x1f8>)
 8001928:	f000 f9b4 	bl	8001c94 <setDisplayString>
			break;
 800192c:	e0b0      	b.n	8001a90 <configureSettings+0x1f4>
		case SET_HOURS:
			setDisplayString("%02d%02d", getCounterWithinBounds(0, 23), getTime()->Minutes);
 800192e:	2117      	movs	r1, #23
 8001930:	2000      	movs	r0, #0
 8001932:	f000 f8f9 	bl	8001b28 <getCounterWithinBounds>
 8001936:	4604      	mov	r4, r0
 8001938:	f000 f93e 	bl	8001bb8 <getTime>
 800193c:	4603      	mov	r3, r0
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	461a      	mov	r2, r3
 8001942:	4621      	mov	r1, r4
 8001944:	4856      	ldr	r0, [pc, #344]	@ (8001aa0 <configureSettings+0x204>)
 8001946:	f000 f9a5 	bl	8001c94 <setDisplayString>
		    getTime()->Hours = (uint8_t) getCounterWithinBounds(0, 23);
 800194a:	2117      	movs	r1, #23
 800194c:	2000      	movs	r0, #0
 800194e:	f000 f8eb 	bl	8001b28 <getCounterWithinBounds>
 8001952:	4604      	mov	r4, r0
 8001954:	f000 f930 	bl	8001bb8 <getTime>
 8001958:	4603      	mov	r3, r0
 800195a:	b2e2      	uxtb	r2, r4
 800195c:	701a      	strb	r2, [r3, #0]
			break;
 800195e:	e097      	b.n	8001a90 <configureSettings+0x1f4>
		case SET_MINUTES:
			setDisplayString("%02d%02d", getTime()->Hours, getCounterWithinBounds(0, 59));
 8001960:	f000 f92a 	bl	8001bb8 <getTime>
 8001964:	4603      	mov	r3, r0
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461c      	mov	r4, r3
 800196a:	213b      	movs	r1, #59	@ 0x3b
 800196c:	2000      	movs	r0, #0
 800196e:	f000 f8db 	bl	8001b28 <getCounterWithinBounds>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4621      	mov	r1, r4
 8001978:	4849      	ldr	r0, [pc, #292]	@ (8001aa0 <configureSettings+0x204>)
 800197a:	f000 f98b 	bl	8001c94 <setDisplayString>
		    getTime()->Minutes = (uint8_t) getCounterWithinBounds(0, 59);
 800197e:	213b      	movs	r1, #59	@ 0x3b
 8001980:	2000      	movs	r0, #0
 8001982:	f000 f8d1 	bl	8001b28 <getCounterWithinBounds>
 8001986:	4604      	mov	r4, r0
 8001988:	f000 f916 	bl	8001bb8 <getTime>
 800198c:	4603      	mov	r3, r0
 800198e:	b2e2      	uxtb	r2, r4
 8001990:	705a      	strb	r2, [r3, #1]
			break;
 8001992:	e07d      	b.n	8001a90 <configureSettings+0x1f4>
		case SET_MONTH:
			getCounterWithinBounds(0, 12);
 8001994:	210c      	movs	r1, #12
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f8c6 	bl	8001b28 <getCounterWithinBounds>
			setDisplayString("%02d%02d", getCounterWithinBounds(0, 12), getDate(getDateState())->Date);
 800199c:	210c      	movs	r1, #12
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 f8c2 	bl	8001b28 <getCounterWithinBounds>
 80019a4:	4604      	mov	r4, r0
 80019a6:	f000 f933 	bl	8001c10 <getDateState>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f90d 	bl	8001bcc <getDate>
 80019b2:	4603      	mov	r3, r0
 80019b4:	789b      	ldrb	r3, [r3, #2]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4621      	mov	r1, r4
 80019ba:	4839      	ldr	r0, [pc, #228]	@ (8001aa0 <configureSettings+0x204>)
 80019bc:	f000 f96a 	bl	8001c94 <setDisplayString>
		    getDate(getDateState())->Month = (uint8_t) getCounterWithinBounds(0, 12);
 80019c0:	210c      	movs	r1, #12
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f8b0 	bl	8001b28 <getCounterWithinBounds>
 80019c8:	4604      	mov	r4, r0
 80019ca:	f000 f921 	bl	8001c10 <getDateState>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f8fb 	bl	8001bcc <getDate>
 80019d6:	4603      	mov	r3, r0
 80019d8:	b2e2      	uxtb	r2, r4
 80019da:	705a      	strb	r2, [r3, #1]
			break;
 80019dc:	e058      	b.n	8001a90 <configureSettings+0x1f4>
		case SET_DAY:
			setDisplayString("%02d%02d", getDate(getDateState())->Month, getCounterWithinBounds(0, 31));
 80019de:	f000 f917 	bl	8001c10 <getDateState>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f8f1 	bl	8001bcc <getDate>
 80019ea:	4603      	mov	r3, r0
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	461c      	mov	r4, r3
 80019f0:	211f      	movs	r1, #31
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 f898 	bl	8001b28 <getCounterWithinBounds>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4621      	mov	r1, r4
 80019fe:	4828      	ldr	r0, [pc, #160]	@ (8001aa0 <configureSettings+0x204>)
 8001a00:	f000 f948 	bl	8001c94 <setDisplayString>
		    //FIXME: user could enter February 31 which is wrong
		    getDate(getDateState())->Date = (uint8_t) getCounterWithinBounds(0, 31);
 8001a04:	211f      	movs	r1, #31
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f88e 	bl	8001b28 <getCounterWithinBounds>
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	f000 f8ff 	bl	8001c10 <getDateState>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f8d9 	bl	8001bcc <getDate>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b2e2      	uxtb	r2, r4
 8001a1e:	709a      	strb	r2, [r3, #2]
			break;
 8001a20:	e036      	b.n	8001a90 <configureSettings+0x1f4>
		case SET_YEAR:
			setDisplayString("20%02d", getTime()->Hours, getCounterWithinBounds(0, 99));
 8001a22:	f000 f8c9 	bl	8001bb8 <getTime>
 8001a26:	4603      	mov	r3, r0
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461c      	mov	r4, r3
 8001a2c:	2163      	movs	r1, #99	@ 0x63
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 f87a 	bl	8001b28 <getCounterWithinBounds>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4621      	mov	r1, r4
 8001a3a:	481a      	ldr	r0, [pc, #104]	@ (8001aa4 <configureSettings+0x208>)
 8001a3c:	f000 f92a 	bl	8001c94 <setDisplayString>
		    getDate(getDateState())->Year = (uint8_t) getCounterWithinBounds(0, 99);
 8001a40:	2163      	movs	r1, #99	@ 0x63
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 f870 	bl	8001b28 <getCounterWithinBounds>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	f000 f8e1 	bl	8001c10 <getDateState>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f8bb 	bl	8001bcc <getDate>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b2e2      	uxtb	r2, r4
 8001a5a:	70da      	strb	r2, [r3, #3]
			break;
 8001a5c:	e018      	b.n	8001a90 <configureSettings+0x1f4>
		case SET_COLOR:
			setDisplayString("COLOR");
 8001a5e:	4812      	ldr	r0, [pc, #72]	@ (8001aa8 <configureSettings+0x20c>)
 8001a60:	f000 f918 	bl	8001c94 <setDisplayString>
			setCounter(getCounterWithinBounds(0, 16)); //16 color presets
 8001a64:	2110      	movs	r1, #16
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f85e 	bl	8001b28 <getCounterWithinBounds>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f87a 	bl	8001b68 <setCounter>
			break;
 8001a74:	e00c      	b.n	8001a90 <configureSettings+0x1f4>
		case SET_BRIGHTNESS:
			setDisplayString("BRIGHT");
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <configureSettings+0x210>)
 8001a78:	f000 f90c 	bl	8001c94 <setDisplayString>
			setCounter(getCounterWithinBounds(0, 255));
 8001a7c:	21ff      	movs	r1, #255	@ 0xff
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 f852 	bl	8001b28 <getCounterWithinBounds>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f86e 	bl	8001b68 <setCounter>
			break;
 8001a8c:	e000      	b.n	8001a90 <configureSettings+0x1f4>
		default:
			break;
 8001a8e:	bf00      	nop
	}

}
 8001a90:	bf00      	nop
 8001a92:	bd98      	pop	{r3, r4, r7, pc}
 8001a94:	080070c8 	.word	0x080070c8
 8001a98:	080070cc 	.word	0x080070cc
 8001a9c:	080070d0 	.word	0x080070d0
 8001aa0:	080070d4 	.word	0x080070d4
 8001aa4:	080070e0 	.word	0x080070e0
 8001aa8:	080070e8 	.word	0x080070e8
 8001aac:	080070f0 	.word	0x080070f0

08001ab0 <clamp>:
static uint32_t minVal = 0;
static uint32_t maxVal = 2000; // (2^32 - 1)

#define UNDERFLOW_TRIGGER 65500

uint32_t clamp(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]

	if(value > UNDERFLOW_TRIGGER) return minVal;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <clamp+0x1a>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	e00c      	b.n	8001ae4 <clamp+0x34>

	if (value < minVal) return minVal;
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d201      	bcs.n	8001ad6 <clamp+0x26>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	e006      	b.n	8001ae4 <clamp+0x34>
	if (value > maxVal) return maxVal;
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d901      	bls.n	8001ae2 <clamp+0x32>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	e000      	b.n	8001ae4 <clamp+0x34>
	return value;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <getDeviceState>:
void setCounterBounds(uint32_t _minVal, uint32_t _maxVal) {
	minVal = _minVal;
	maxVal = _maxVal;
}

DeviceState getDeviceState(void) {
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
	return currentState;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <getDeviceState+0x14>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200022fc 	.word	0x200022fc

08001b08 <setDeviceState>:

void setDeviceState(DeviceState _currentState) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	currentState = _currentState;
 8001b12:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <setDeviceState+0x1c>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	7013      	strb	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	200022fc 	.word	0x200022fc

08001b28 <getCounterWithinBounds>:

uint32_t getCounter(void) {
	return clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal);
}

uint32_t getCounterWithinBounds(uint32_t _minVal, uint32_t _maxVal) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	minVal = _minVal;
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <getCounterWithinBounds+0x34>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6013      	str	r3, [r2, #0]
	maxVal = _maxVal;
 8001b38:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <getCounterWithinBounds+0x38>)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6013      	str	r3, [r2, #0]
	return clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <getCounterWithinBounds+0x3c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <getCounterWithinBounds+0x34>)
 8001b46:	6811      	ldr	r1, [r2, #0]
 8001b48:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <getCounterWithinBounds+0x38>)
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ffaf 	bl	8001ab0 <clamp>
 8001b52:	4603      	mov	r3, r0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20002314 	.word	0x20002314
 8001b60:	20000054 	.word	0x20000054
 8001b64:	20002380 	.word	0x20002380

08001b68 <setCounter>:

void setCounter(uint32_t _counter) {
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	counter = clamp(_counter, minVal, maxVal);
 8001b70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <setCounter+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <setCounter+0x44>)
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff98 	bl	8001ab0 <clamp>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb0 <setCounter+0x48>)
 8001b84:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, clamp(_counter, minVal, maxVal));
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <setCounter+0x40>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <setCounter+0x44>)
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	4909      	ldr	r1, [pc, #36]	@ (8001bb4 <setCounter+0x4c>)
 8001b90:	680c      	ldr	r4, [r1, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff8b 	bl	8001ab0 <clamp>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20002314 	.word	0x20002314
 8001bac:	20000054 	.word	0x20000054
 8001bb0:	20002300 	.word	0x20002300
 8001bb4:	20002380 	.word	0x20002380

08001bb8 <getTime>:

uint32_t getSelected(void) {
	return counter;
}

RTC_TimeTypeDef* getTime(void) {
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	return &sTime;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	@ (8001bc8 <getTime+0x10>)
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	20002428 	.word	0x20002428

08001bcc <getDate>:

RTC_DateTypeDef* getDate(DateType type) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	switch(type) {
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d00a      	beq.n	8001bf2 <getDate+0x26>
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	dc0a      	bgt.n	8001bf6 <getDate+0x2a>
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <getDate+0x1e>
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d002      	beq.n	8001bee <getDate+0x22>
 8001be8:	e005      	b.n	8001bf6 <getDate+0x2a>
		case SYSTEM_DATE:
			return &sDate;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <getDate+0x38>)
 8001bec:	e004      	b.n	8001bf8 <getDate+0x2c>
		case ANNIVERSARY_DATE:
			return &aDate;
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <getDate+0x3c>)
 8001bf0:	e002      	b.n	8001bf8 <getDate+0x2c>
		case BIRTHDAY_DATE:
			return &bDate;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <getDate+0x40>)
 8001bf4:	e000      	b.n	8001bf8 <getDate+0x2c>
		default:
			return &sDate;
 8001bf6:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <getDate+0x38>)
	}
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	2000243c 	.word	0x2000243c
 8001c08:	20002440 	.word	0x20002440
 8001c0c:	20002444 	.word	0x20002444

08001c10 <getDateState>:

RgbColor getColor(void) {
	return color;
}

DateType getDateState(void) {
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	return dateState;
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <getDateState+0x14>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20002304 	.word	0x20002304

08001c28 <setDateState>:

void setDateState(DateType _dateState) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	dateState = _dateState;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <setDateState+0x1c>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	7013      	strb	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	20002304 	.word	0x20002304

08001c48 <getBrightness>:

uint8_t getBrightness(void) {
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
	return brightness;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <getBrightness+0x14>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000052 	.word	0x20000052

08001c60 <setMode>:

void setBrightness(uint8_t _brightness) {
	brightness = _brightness;
}

void setMode(Mode _mode) {
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	mode = _mode;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <setMode+0x1c>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	7013      	strb	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	20000051 	.word	0x20000051

08001c80 <getDisplayString>:

Mode getMode(void) {
	return mode;
}

char *getDisplayString(void) {
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	return (char *) displayStr;
 8001c84:	4b02      	ldr	r3, [pc, #8]	@ (8001c90 <getDisplayString+0x10>)
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	20002308 	.word	0x20002308

08001c94 <setDisplayString>:

void setDisplayString(const char *format, ...) {
 8001c94:	b40f      	push	{r0, r1, r2, r3}
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	607b      	str	r3, [r7, #4]
    vsnprintf(displayStr, MAX_STRING_LENGTH, format, args);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	210a      	movs	r1, #10
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <setDisplayString+0x28>)
 8001caa:	f004 f98f 	bl	8005fcc <vsniprintf>
    va_end(args);
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cb8:	b004      	add	sp, #16
 8001cba:	4770      	bx	lr
 8001cbc:	20002308 	.word	0x20002308

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc6:	f000 fd7f 	bl	80027c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cca:	f000 f881 	bl	8001dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cce:	f000 fa57 	bl	8002180 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cd2:	f000 fa35 	bl	8002140 <MX_DMA_Init>
  MX_TIM1_Init();
 8001cd6:	f000 f93f 	bl	8001f58 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001cda:	f000 f9dd 	bl	8002098 <MX_TIM3_Init>
  MX_RTC_Init();
 8001cde:	f000 f8e1 	bl	8001ea4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 8001ce2:	213c      	movs	r1, #60	@ 0x3c
 8001ce4:	4835      	ldr	r0, [pc, #212]	@ (8001dbc <main+0xfc>)
 8001ce6:	f003 f843 	bl	8004d70 <HAL_TIM_Encoder_Start>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001cea:	2200      	movs	r2, #0
 8001cec:	4934      	ldr	r1, [pc, #208]	@ (8001dc0 <main+0x100>)
 8001cee:	4835      	ldr	r0, [pc, #212]	@ (8001dc4 <main+0x104>)
 8001cf0:	f002 fa8b 	bl	800420a <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4934      	ldr	r1, [pc, #208]	@ (8001dc8 <main+0x108>)
 8001cf8:	4832      	ldr	r0, [pc, #200]	@ (8001dc4 <main+0x104>)
 8001cfa:	f002 fb68 	bl	80043ce <HAL_RTC_GetDate>
  RgbColor color;
  color.r = 5;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	713b      	strb	r3, [r7, #4]
  color.g = 5;
 8001d02:	2305      	movs	r3, #5
 8001d04:	717b      	strb	r3, [r7, #5]
  color.b = 5;
 8001d06:	2305      	movs	r3, #5
 8001d08:	71bb      	strb	r3, [r7, #6]
  display_time(sTime.Hours, sTime.Minutes, color);
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc0 <main+0x100>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <main+0x100>)
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7ff fbf8 	bl	800150c <display_time>
  advanceDisplay();
 8001d1c:	f7ff f936 	bl	8000f8c <advanceDisplay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(checkButtonPress()){
 8001d20:	f7ff fce0 	bl	80016e4 <checkButtonPress>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <main+0x6e>
		switchState();
 8001d2a:	f7ff fcfd 	bl	8001728 <switchState>
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4923      	ldr	r1, [pc, #140]	@ (8001dc0 <main+0x100>)
 8001d32:	4824      	ldr	r0, [pc, #144]	@ (8001dc4 <main+0x104>)
 8001d34:	f002 fa69 	bl	800420a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4923      	ldr	r1, [pc, #140]	@ (8001dc8 <main+0x108>)
 8001d3c:	4821      	ldr	r0, [pc, #132]	@ (8001dc4 <main+0x104>)
 8001d3e:	f002 fb46 	bl	80043ce <HAL_RTC_GetDate>

	configureSettings();
 8001d42:	f7ff fdab 	bl	800189c <configureSettings>


	Segment_Display(getDisplayString());
 8001d46:	f7ff ff9b 	bl	8001c80 <getDisplayString>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fcf9 	bl	8000744 <Segment_Display>

	display_birthday();
 8001d52:	f7ff fc7f 	bl	8001654 <display_birthday>

	rainbow(5);
 8001d56:	2005      	movs	r0, #5
 8001d58:	f7ff fb6a 	bl	8001430 <rainbow>
	twinkle();
 8001d5c:	f7ff fca2 	bl	80016a4 <twinkle>

	checkUpdateTime(sTime);
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <main+0x100>)
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d68:	f7ff f930 	bl	8000fcc <checkUpdateTime>
	updateDisplay(sTime);
 8001d6c:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <main+0x100>)
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	9200      	str	r2, [sp, #0]
 8001d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d74:	f7ff f956 	bl	8001024 <updateDisplay>

//	setAnniversary(5);

	if(HAL_GetTick() - lastTick > 1000) {
 8001d78:	f000 fd8c 	bl	8002894 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <main+0x10c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d88:	d90a      	bls.n	8001da0 <main+0xe0>
		sTime.Minutes = sTime.Minutes + 1;
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <main+0x100>)
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <main+0x100>)
 8001d94:	705a      	strb	r2, [r3, #1]
		lastTick = HAL_GetTick();
 8001d96:	f000 fd7d 	bl	8002894 <HAL_GetTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dcc <main+0x10c>)
 8001d9e:	6013      	str	r3, [r2, #0]
	}

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001da0:	2200      	movs	r2, #0
 8001da2:	4907      	ldr	r1, [pc, #28]	@ (8001dc0 <main+0x100>)
 8001da4:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <main+0x104>)
 8001da6:	f002 f996 	bl	80040d6 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001daa:	2200      	movs	r2, #0
 8001dac:	4906      	ldr	r1, [pc, #24]	@ (8001dc8 <main+0x108>)
 8001dae:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <main+0x104>)
 8001db0:	f002 fa89 	bl	80042c6 <HAL_RTC_SetDate>

	sendDisplayToDMA();
 8001db4:	f7ff f8fe 	bl	8000fb4 <sendDisplayToDMA>
	if(checkButtonPress()){
 8001db8:	e7b2      	b.n	8001d20 <main+0x60>
 8001dba:	bf00      	nop
 8001dbc:	20002380 	.word	0x20002380
 8001dc0:	20002428 	.word	0x20002428
 8001dc4:	20002318 	.word	0x20002318
 8001dc8:	2000243c 	.word	0x2000243c
 8001dcc:	20002448 	.word	0x20002448

08001dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b094      	sub	sp, #80	@ 0x50
 8001dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 0320 	add.w	r3, r7, #32
 8001dda:	2230      	movs	r2, #48	@ 0x30
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 f902 	bl	8005fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <SystemClock_Config+0xcc>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	4a27      	ldr	r2, [pc, #156]	@ (8001e9c <SystemClock_Config+0xcc>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e04:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <SystemClock_Config+0xcc>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <SystemClock_Config+0xd0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a21      	ldr	r2, [pc, #132]	@ (8001ea0 <SystemClock_Config+0xd0>)
 8001e1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <SystemClock_Config+0xd0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001e2c:	2305      	movs	r3, #5
 8001e2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e36:	2301      	movs	r3, #1
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001e44:	230c      	movs	r3, #12
 8001e46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e48:	2348      	movs	r3, #72	@ 0x48
 8001e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e50:	2304      	movs	r3, #4
 8001e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e54:	f107 0320 	add.w	r3, r7, #32
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fba5 	bl	80035a8 <HAL_RCC_OscConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e64:	f000 fa10 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e68:	230f      	movs	r3, #15
 8001e6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	2102      	movs	r1, #2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 fe07 	bl	8003a98 <HAL_RCC_ClockConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e90:	f000 f9fa 	bl	8002288 <Error_Handler>
  }
}
 8001e94:	bf00      	nop
 8001e96:	3750      	adds	r7, #80	@ 0x50
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001eb8:	2300      	movs	r3, #0
 8001eba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ebc:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001ebe:	4a25      	ldr	r2, [pc, #148]	@ (8001f54 <MX_RTC_Init+0xb0>)
 8001ec0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ec2:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001eca:	227f      	movs	r2, #127	@ 0x7f
 8001ecc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001ed0:	22ff      	movs	r2, #255	@ 0xff
 8001ed2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ee6:	481a      	ldr	r0, [pc, #104]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001ee8:	f002 f872 	bl	8003fd0 <HAL_RTC_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ef2:	f000 f9c9 	bl	8002288 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 8001efa:	2359      	movs	r3, #89	@ 0x59
 8001efc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 8001efe:	2350      	movs	r3, #80	@ 0x50
 8001f00:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480f      	ldr	r0, [pc, #60]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001f12:	f002 f8e0 	bl	80040d6 <HAL_RTC_SetTime>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f1c:	f000 f9b4 	bl	8002288 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f20:	2301      	movs	r3, #1
 8001f22:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f24:	2301      	movs	r3, #1
 8001f26:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f30:	463b      	mov	r3, r7
 8001f32:	2201      	movs	r2, #1
 8001f34:	4619      	mov	r1, r3
 8001f36:	4806      	ldr	r0, [pc, #24]	@ (8001f50 <MX_RTC_Init+0xac>)
 8001f38:	f002 f9c5 	bl	80042c6 <HAL_RTC_SetDate>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f42:	f000 f9a1 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20002318 	.word	0x20002318
 8001f54:	40002800 	.word	0x40002800

08001f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b096      	sub	sp, #88	@ 0x58
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	615a      	str	r2, [r3, #20]
 8001f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 f829 	bl	8005fe8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f96:	4b3e      	ldr	r3, [pc, #248]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001f98:	4a3e      	ldr	r2, [pc, #248]	@ (8002094 <MX_TIM1_Init+0x13c>)
 8001f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001fa8:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001faa:	2259      	movs	r2, #89	@ 0x59
 8001fac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fae:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb4:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b35      	ldr	r3, [pc, #212]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fc0:	4833      	ldr	r0, [pc, #204]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fc2:	f002 fb11 	bl	80045e8 <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001fcc:	f000 f95c 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fd6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fda:	4619      	mov	r1, r3
 8001fdc:	482c      	ldr	r0, [pc, #176]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fde:	f003 f907 	bl	80051f0 <HAL_TIM_ConfigClockSource>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fe8:	f000 f94e 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fec:	4828      	ldr	r0, [pc, #160]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fee:	f002 fb4a 	bl	8004686 <HAL_TIM_PWM_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ff8:	f000 f946 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002004:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002008:	4619      	mov	r1, r3
 800200a:	4821      	ldr	r0, [pc, #132]	@ (8002090 <MX_TIM1_Init+0x138>)
 800200c:	f003 fd9c 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002016:	f000 f937 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201a:	2360      	movs	r3, #96	@ 0x60
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002026:	2300      	movs	r3, #0
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203a:	2200      	movs	r2, #0
 800203c:	4619      	mov	r1, r3
 800203e:	4814      	ldr	r0, [pc, #80]	@ (8002090 <MX_TIM1_Init+0x138>)
 8002040:	f003 f814 	bl	800506c <HAL_TIM_PWM_ConfigChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800204a:	f000 f91d 	bl	8002288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002066:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4807      	ldr	r0, [pc, #28]	@ (8002090 <MX_TIM1_Init+0x138>)
 8002072:	f003 fdd7 	bl	8005c24 <HAL_TIMEx_ConfigBreakDeadTime>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800207c:	f000 f904 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <MX_TIM1_Init+0x138>)
 8002082:	f000 fa21 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 8002086:	bf00      	nop
 8002088:	3758      	adds	r7, #88	@ 0x58
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20002338 	.word	0x20002338
 8002094:	40010000 	.word	0x40010000

08002098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08c      	sub	sp, #48	@ 0x30
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	2224      	movs	r2, #36	@ 0x24
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 ff9e 	bl	8005fe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b4:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <MX_TIM3_Init+0xa0>)
 80020b6:	4a21      	ldr	r2, [pc, #132]	@ (800213c <MX_TIM3_Init+0xa4>)
 80020b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80020ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <MX_TIM3_Init+0xa0>)
 80020bc:	2204      	movs	r2, #4
 80020be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <MX_TIM3_Init+0xa0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <MX_TIM3_Init+0xa0>)
 80020c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <MX_TIM3_Init+0xa0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d4:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <MX_TIM3_Init+0xa0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020da:	2303      	movs	r3, #3
 80020dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020de:	2302      	movs	r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020e2:	2301      	movs	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020ee:	2302      	movs	r3, #2
 80020f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020f2:	2301      	movs	r3, #1
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	4619      	mov	r1, r3
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <MX_TIM3_Init+0xa0>)
 8002106:	f002 fd8d 	bl	8004c24 <HAL_TIM_Encoder_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002110:	f000 f8ba 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_TIM3_Init+0xa0>)
 8002122:	f003 fd11 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800212c:	f000 f8ac 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	3730      	adds	r7, #48	@ 0x30
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20002380 	.word	0x20002380
 800213c:	40000400 	.word	0x40000400

08002140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_DMA_Init+0x3c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a0b      	ldr	r2, [pc, #44]	@ (800217c <MX_DMA_Init+0x3c>)
 8002150:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_DMA_Init+0x3c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2108      	movs	r1, #8
 8002166:	2039      	movs	r0, #57	@ 0x39
 8002168:	f000 fc9f 	bl	8002aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800216c:	2039      	movs	r0, #57	@ 0x39
 800216e:	f000 fcb8 	bl	8002ae2 <HAL_NVIC_EnableIRQ>

}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	@ 0x28
 8002184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b38      	ldr	r3, [pc, #224]	@ (800227c <MX_GPIO_Init+0xfc>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a37      	ldr	r2, [pc, #220]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b35      	ldr	r3, [pc, #212]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b31      	ldr	r3, [pc, #196]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a30      	ldr	r2, [pc, #192]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a29      	ldr	r2, [pc, #164]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b27      	ldr	r3, [pc, #156]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b23      	ldr	r3, [pc, #140]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a22      	ldr	r2, [pc, #136]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4b20      	ldr	r3, [pc, #128]	@ (800227c <MX_GPIO_Init+0xfc>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8002206:	2200      	movs	r2, #0
 8002208:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 800220c:	481c      	ldr	r0, [pc, #112]	@ (8002280 <MX_GPIO_Init+0x100>)
 800220e:	f001 f9b1 	bl	8003574 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8002212:	2200      	movs	r2, #0
 8002214:	f241 4107 	movw	r1, #5127	@ 0x1407
 8002218:	481a      	ldr	r0, [pc, #104]	@ (8002284 <MX_GPIO_Init+0x104>)
 800221a:	f001 f9ab 	bl	8003574 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800221e:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8002222:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	4812      	ldr	r0, [pc, #72]	@ (8002280 <MX_GPIO_Init+0x100>)
 8002238:	f001 f800 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 800223c:	f241 4307 	movw	r3, #5127	@ 0x1407
 8002240:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002242:	2301      	movs	r3, #1
 8002244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	480b      	ldr	r0, [pc, #44]	@ (8002284 <MX_GPIO_Init+0x104>)
 8002256:	f000 fff1 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800225a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800225e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002264:	2301      	movs	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_GPIO_Init+0x104>)
 8002270:	f000 ffe4 	bl	800323c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	@ 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <Error_Handler+0x8>

08002294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <HAL_MspInit+0x90>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a20      	ldr	r2, [pc, #128]	@ (8002324 <HAL_MspInit+0x90>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <HAL_MspInit+0x90>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <HAL_MspInit+0x90>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_MspInit+0x90>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <HAL_MspInit+0x90>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2101      	movs	r1, #1
 80022d6:	f06f 000b 	mvn.w	r0, #11
 80022da:	f000 fbe6 	bl	8002aaa <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2102      	movs	r1, #2
 80022e2:	f06f 000a 	mvn.w	r0, #10
 80022e6:	f000 fbe0 	bl	8002aaa <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2103      	movs	r1, #3
 80022ee:	f06f 0009 	mvn.w	r0, #9
 80022f2:	f000 fbda 	bl	8002aaa <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2104      	movs	r1, #4
 80022fa:	f06f 0004 	mvn.w	r0, #4
 80022fe:	f000 fbd4 	bl	8002aaa <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2105      	movs	r1, #5
 8002306:	f06f 0003 	mvn.w	r0, #3
 800230a:	f000 fbce 	bl	8002aaa <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2106      	movs	r1, #6
 8002312:	f06f 0001 	mvn.w	r0, #1
 8002316:	f000 fbc8 	bl	8002aaa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
 8002340:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a0c      	ldr	r2, [pc, #48]	@ (8002378 <HAL_RTC_MspInit+0x50>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d111      	bne.n	8002370 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800234c:	2302      	movs	r3, #2
 800234e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002354:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fd48 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002366:	f7ff ff8f 	bl	8002288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <HAL_RTC_MspInit+0x54>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40002800 	.word	0x40002800
 800237c:	42470e3c 	.word	0x42470e3c

08002380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	@ (8002418 <HAL_TIM_Base_MspInit+0x98>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d13d      	bne.n	800240e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_TIM_Base_MspInit+0x9c>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	4a20      	ldr	r2, [pc, #128]	@ (800241c <HAL_TIM_Base_MspInit+0x9c>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a2:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <HAL_TIM_Base_MspInit+0x9c>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002424 <HAL_TIM_Base_MspInit+0xa4>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023b6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80023ba:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023bc:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023be:	2240      	movs	r2, #64	@ 0x40
 80023c0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c2:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023c8:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ce:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023d0:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023d6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023de:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80023f2:	480b      	ldr	r0, [pc, #44]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 80023f4:	f000 fb90 	bl	8002b18 <HAL_DMA_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80023fe:	f7ff ff43 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a06      	ldr	r2, [pc, #24]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24
 8002408:	4a05      	ldr	r2, [pc, #20]	@ (8002420 <HAL_TIM_Base_MspInit+0xa0>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40010000 	.word	0x40010000
 800241c:	40023800 	.word	0x40023800
 8002420:	200023c8 	.word	0x200023c8
 8002424:	40026428 	.word	0x40026428

08002428 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <HAL_TIM_Encoder_MspInit+0x94>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d133      	bne.n	80024b2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6413      	str	r3, [r2, #64]	@ 0x40
 800245a:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_TIM_Encoder_MspInit+0x98>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_TIM_Encoder_MspInit+0x98>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a14      	ldr	r2, [pc, #80]	@ (80024c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002482:	2330      	movs	r3, #48	@ 0x30
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002492:	2302      	movs	r3, #2
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4809      	ldr	r0, [pc, #36]	@ (80024c4 <HAL_TIM_Encoder_MspInit+0x9c>)
 800249e:	f000 fecd 	bl	800323c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2109      	movs	r1, #9
 80024a6:	201d      	movs	r0, #29
 80024a8:	f000 faff 	bl	8002aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024ac:	201d      	movs	r0, #29
 80024ae:	f000 fb18 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	@ 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020400 	.word	0x40020400

080024c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <HAL_TIM_MspPostInit+0x68>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d11e      	bne.n	8002528 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_TIM_MspPostInit+0x6c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	4a10      	ldr	r2, [pc, #64]	@ (8002534 <HAL_TIM_MspPostInit+0x6c>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_TIM_MspPostInit+0x6c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002506:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800250a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002518:	2301      	movs	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	4619      	mov	r1, r3
 8002522:	4805      	ldr	r0, [pc, #20]	@ (8002538 <HAL_TIM_MspPostInit+0x70>)
 8002524:	f000 fe8a 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40010000 	.word	0x40010000
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <NMI_Handler+0x4>

08002544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <MemManage_Handler+0x4>

08002554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <UsageFault_Handler+0x4>

08002564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002592:	f000 f96b 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <TIM3_IRQHandler+0x10>)
 80025a2:	f002 fc73 	bl	8004e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20002380 	.word	0x20002380

080025b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <DMA2_Stream1_IRQHandler+0x10>)
 80025b6:	f000 fbd7 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200023c8 	.word	0x200023c8

080025c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_kill>:

int _kill(int pid, int sig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025de:	f003 fd65 	bl	80060ac <__errno>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2216      	movs	r2, #22
 80025e6:	601a      	str	r2, [r3, #0]
  return -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_exit>:

void _exit (int status)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ffe7 	bl	80025d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002606:	bf00      	nop
 8002608:	e7fd      	b.n	8002606 <_exit+0x12>

0800260a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e00a      	b.n	8002632 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800261c:	f3af 8000 	nop.w
 8002620:	4601      	mov	r1, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	60ba      	str	r2, [r7, #8]
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	dbf0      	blt.n	800261c <_read+0x12>
  }

  return len;
 800263a:	687b      	ldr	r3, [r7, #4]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e009      	b.n	800266a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	60ba      	str	r2, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	dbf1      	blt.n	8002656 <_write+0x12>
  }
  return len;
 8002672:	687b      	ldr	r3, [r7, #4]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_close>:

int _close(int file)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026a4:	605a      	str	r2, [r3, #4]
  return 0;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_isatty>:

int _isatty(int file)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ec:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <_sbrk+0x5c>)
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <_sbrk+0x60>)
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f8:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <_sbrk+0x64>)
 8002702:	4a12      	ldr	r2, [pc, #72]	@ (800274c <_sbrk+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002714:	f003 fcca 	bl	80060ac <__errno>
 8002718:	4603      	mov	r3, r0
 800271a:	220c      	movs	r2, #12
 800271c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	e009      	b.n	8002738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	4a05      	ldr	r2, [pc, #20]	@ (8002748 <_sbrk+0x64>)
 8002734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20020000 	.word	0x20020000
 8002744:	00010000 	.word	0x00010000
 8002748:	2000244c 	.word	0x2000244c
 800274c:	200025a0 	.word	0x200025a0

08002750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <SystemInit+0x20>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <SystemInit+0x20>)
 800275c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002778:	480d      	ldr	r0, [pc, #52]	@ (80027b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800277a:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800277c:	4a0e      	ldr	r2, [pc, #56]	@ (80027b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278e:	4a0b      	ldr	r2, [pc, #44]	@ (80027bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002790:	4c0b      	ldr	r4, [pc, #44]	@ (80027c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800279e:	f7ff ffd7 	bl	8002750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a2:	f003 fc89 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a6:	f7ff fa8b 	bl	8001cc0 <main>
  bx  lr    
 80027aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80027b8:	0800750c 	.word	0x0800750c
  ldr r2, =_sbss
 80027bc:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80027c0:	200025a0 	.word	0x200025a0

080027c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC_IRQHandler>
	...

080027c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <HAL_Init+0x40>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <HAL_Init+0x40>)
 80027d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <HAL_Init+0x40>)
 80027de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <HAL_Init+0x40>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f94f 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f6:	200f      	movs	r0, #15
 80027f8:	f000 f808 	bl	800280c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fc:	f7ff fd4a 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002814:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <HAL_InitTick+0x54>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_InitTick+0x58>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002822:	fbb3 f3f1 	udiv	r3, r3, r1
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f967 	bl	8002afe <HAL_SYSTICK_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00e      	b.n	8002858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d80a      	bhi.n	8002856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f000 f92f 	bl	8002aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800284c:	4a06      	ldr	r2, [pc, #24]	@ (8002868 <HAL_InitTick+0x5c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000058 	.word	0x20000058
 8002864:	20000060 	.word	0x20000060
 8002868:	2000005c 	.word	0x2000005c

0800286c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_IncTick+0x20>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_IncTick+0x24>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <HAL_IncTick+0x24>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000060 	.word	0x20000060
 8002890:	20002450 	.word	0x20002450

08002894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return uwTick;
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <HAL_GetTick+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20002450 	.word	0x20002450

080028ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff ffee 	bl	8002894 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d005      	beq.n	80028d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_Delay+0x44>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d2:	bf00      	nop
 80028d4:	f7ff ffde 	bl	8002894 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d8f7      	bhi.n	80028d4 <HAL_Delay+0x28>
  {
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000060 	.word	0x20000060

080028f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db0b      	blt.n	8002982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4907      	ldr	r1, [pc, #28]	@ (8002990 <__NVIC_EnableIRQ+0x38>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2001      	movs	r0, #1
 800297a:	fa00 f202 	lsl.w	r2, r0, r2
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	@ (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	@ 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a60:	d301      	bcc.n	8002a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a66:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <SysTick_Config+0x40>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6e:	210f      	movs	r1, #15
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f7ff ff8e 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <SysTick_Config+0x40>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <SysTick_Config+0x40>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff29 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002abc:	f7ff ff3e 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff8e 	bl	80029e8 <NVIC_EncodePriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff5d 	bl	8002994 <__NVIC_SetPriority>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff31 	bl	8002958 <__NVIC_EnableIRQ>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ffa2 	bl	8002a50 <SysTick_Config>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff feb6 	bl	8002894 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e099      	b.n	8002c68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b54:	e00f      	b.n	8002b76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b56:	f7ff fe9d 	bl	8002894 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d908      	bls.n	8002b76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e078      	b.n	8002c68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e8      	bne.n	8002b56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4b38      	ldr	r3, [pc, #224]	@ (8002c70 <HAL_DMA_Init+0x158>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0307 	bic.w	r3, r3, #7
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d117      	bne.n	8002c3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa91 	bl	8003144 <DMA_CheckFifoParam>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2240      	movs	r2, #64	@ 0x40
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c36:	2301      	movs	r3, #1
 8002c38:	e016      	b.n	8002c68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa48 	bl	80030d8 <DMA_CalcBaseAndBitshift>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	223f      	movs	r2, #63	@ 0x3f
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	f010803f 	.word	0xf010803f

08002c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_DMA_Start_IT+0x26>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e040      	b.n	8002d1c <HAL_DMA_Start_IT+0xa8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d12f      	bne.n	8002d0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f9da 	bl	800307c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	223f      	movs	r2, #63	@ 0x3f
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0216 	orr.w	r2, r2, #22
 8002ce2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0208 	orr.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e005      	b.n	8002d1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d004      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2280      	movs	r2, #128	@ 0x80
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00c      	b.n	8002d5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2205      	movs	r2, #5
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d74:	4b8e      	ldr	r3, [pc, #568]	@ (8002fb0 <HAL_DMA_IRQHandler+0x248>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a8e      	ldr	r2, [pc, #568]	@ (8002fb4 <HAL_DMA_IRQHandler+0x24c>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	2208      	movs	r2, #8
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0204 	bic.w	r2, r2, #4
 8002dba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df6:	2201      	movs	r2, #1
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	f043 0202 	orr.w	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	2204      	movs	r2, #4
 8002e10:	409a      	lsls	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	2210      	movs	r2, #16
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d043      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03c      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	2210      	movs	r2, #16
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d024      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
 8002e96:	e01f      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e016      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0208 	bic.w	r2, r2, #8
 8002ec6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	2220      	movs	r2, #32
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 808f 	beq.w	8003008 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8087 	beq.w	8003008 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efe:	2220      	movs	r2, #32
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d136      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0216 	bic.w	r2, r2, #22
 8002f20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_DMA_IRQHandler+0x1da>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0208 	bic.w	r2, r2, #8
 8002f50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	223f      	movs	r2, #63	@ 0x3f
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d07e      	beq.n	8003074 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
        }
        return;
 8002f7e:	e079      	b.n	8003074 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d031      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
 8002fac:	e02c      	b.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
 8002fae:	bf00      	nop
 8002fb0:	20000058 	.word	0x20000058
 8002fb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
 8002fc8:	e01e      	b.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0210 	bic.w	r2, r2, #16
 8002fe6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	2b00      	cmp	r3, #0
 800300e:	d032      	beq.n	8003076 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d022      	beq.n	8003062 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2205      	movs	r2, #5
 8003020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	3301      	adds	r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	d307      	bcc.n	8003050 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f2      	bne.n	8003034 <HAL_DMA_IRQHandler+0x2cc>
 800304e:	e000      	b.n	8003052 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003050:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
 8003072:	e000      	b.n	8003076 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003074:	bf00      	nop
    }
  }
}
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003098:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b40      	cmp	r3, #64	@ 0x40
 80030a8:	d108      	bne.n	80030bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ba:	e007      	b.n	80030cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3b10      	subs	r3, #16
 80030e8:	4a14      	ldr	r2, [pc, #80]	@ (800313c <DMA_CalcBaseAndBitshift+0x64>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f2:	4a13      	ldr	r2, [pc, #76]	@ (8003140 <DMA_CalcBaseAndBitshift+0x68>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d909      	bls.n	800311a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	659a      	str	r2, [r3, #88]	@ 0x58
 8003118:	e007      	b.n	800312a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	aaaaaaab 	.word	0xaaaaaaab
 8003140:	08007414 	.word	0x08007414

08003144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11f      	bne.n	800319e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d856      	bhi.n	8003212 <DMA_CheckFifoParam+0xce>
 8003164:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <DMA_CheckFifoParam+0x28>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318f 	.word	0x0800318f
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003213 	.word	0x08003213
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d046      	beq.n	8003216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318c:	e043      	b.n	8003216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003196:	d140      	bne.n	800321a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319c:	e03d      	b.n	800321a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a6:	d121      	bne.n	80031ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d837      	bhi.n	800321e <DMA_CheckFifoParam+0xda>
 80031ae:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <DMA_CheckFifoParam+0x70>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031cb 	.word	0x080031cb
 80031bc:	080031c5 	.word	0x080031c5
 80031c0:	080031dd 	.word	0x080031dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e030      	b.n	800322c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d025      	beq.n	8003222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e022      	b.n	8003222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031e4:	d11f      	bne.n	8003226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ea:	e01c      	b.n	8003226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d903      	bls.n	80031fa <DMA_CheckFifoParam+0xb6>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d003      	beq.n	8003200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031f8:	e018      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      break;
 80031fe:	e015      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e00b      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 8003212:	bf00      	nop
 8003214:	e00a      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 8003216:	bf00      	nop
 8003218:	e008      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e006      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;   
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
    }
  } 
  
  return status; 
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e159      	b.n	800350c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003258:	2201      	movs	r2, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	429a      	cmp	r2, r3
 8003272:	f040 8148 	bne.w	8003506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d005      	beq.n	800328e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328a:	2b02      	cmp	r3, #2
 800328c:	d130      	bne.n	80032f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	2203      	movs	r2, #3
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c4:	2201      	movs	r2, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 0201 	and.w	r2, r3, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d017      	beq.n	800332c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d123      	bne.n	8003380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	08da      	lsrs	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3208      	adds	r2, #8
 8003340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	69b9      	ldr	r1, [r7, #24]
 800337c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80a2 	beq.w	8003506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b57      	ldr	r3, [pc, #348]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	4a56      	ldr	r2, [pc, #344]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d2:	4b54      	ldr	r3, [pc, #336]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033de:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_GPIO_Init+0x2ec>)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	220f      	movs	r2, #15
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a49      	ldr	r2, [pc, #292]	@ (800352c <HAL_GPIO_Init+0x2f0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d019      	beq.n	800343e <HAL_GPIO_Init+0x202>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a48      	ldr	r2, [pc, #288]	@ (8003530 <HAL_GPIO_Init+0x2f4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_GPIO_Init+0x1fe>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a47      	ldr	r2, [pc, #284]	@ (8003534 <HAL_GPIO_Init+0x2f8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00d      	beq.n	8003436 <HAL_GPIO_Init+0x1fa>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a46      	ldr	r2, [pc, #280]	@ (8003538 <HAL_GPIO_Init+0x2fc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <HAL_GPIO_Init+0x1f6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a45      	ldr	r2, [pc, #276]	@ (800353c <HAL_GPIO_Init+0x300>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <HAL_GPIO_Init+0x1f2>
 800342a:	2304      	movs	r3, #4
 800342c:	e008      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800342e:	2307      	movs	r3, #7
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x204>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x204>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800343e:	2300      	movs	r3, #0
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f002 0203 	and.w	r2, r2, #3
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4093      	lsls	r3, r2
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003450:	4935      	ldr	r1, [pc, #212]	@ (8003528 <HAL_GPIO_Init+0x2ec>)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345e:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003482:	4a2f      	ldr	r2, [pc, #188]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003488:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <HAL_GPIO_Init+0x304>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034ac:	4a24      	ldr	r2, [pc, #144]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b2:	4b23      	ldr	r3, [pc, #140]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034dc:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003500:	4a0f      	ldr	r2, [pc, #60]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3301      	adds	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	f67f aea2 	bls.w	8003258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3724      	adds	r7, #36	@ 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	40013800 	.word	0x40013800
 800352c:	40020000 	.word	0x40020000
 8003530:	40020400 	.word	0x40020400
 8003534:	40020800 	.word	0x40020800
 8003538:	40020c00 	.word	0x40020c00
 800353c:	40021000 	.word	0x40021000
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e001      	b.n	8003566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
 8003580:	4613      	mov	r3, r2
 8003582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003584:	787b      	ldrb	r3, [r7, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003590:	e003      	b.n	800359a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003592:	887b      	ldrh	r3, [r7, #2]
 8003594:	041a      	lsls	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	619a      	str	r2, [r3, #24]
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e267      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d075      	beq.n	80036b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035c6:	4b88      	ldr	r3, [pc, #544]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d00c      	beq.n	80035ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d2:	4b85      	ldr	r3, [pc, #532]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d112      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035de:	4b82      	ldr	r3, [pc, #520]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b7e      	ldr	r3, [pc, #504]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d05b      	beq.n	80036b0 <HAL_RCC_OscConfig+0x108>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d157      	bne.n	80036b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e242      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x74>
 800360e:	4b76      	ldr	r3, [pc, #472]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a75      	ldr	r2, [pc, #468]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0xb0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x98>
 8003626:	4b70      	ldr	r3, [pc, #448]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6f      	ldr	r2, [pc, #444]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b6d      	ldr	r3, [pc, #436]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6c      	ldr	r2, [pc, #432]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0xb0>
 8003640:	4b69      	ldr	r3, [pc, #420]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a68      	ldr	r2, [pc, #416]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b66      	ldr	r3, [pc, #408]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a65      	ldr	r2, [pc, #404]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7ff f918 	bl	8002894 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7ff f914 	bl	8002894 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e207      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b5b      	ldr	r3, [pc, #364]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0xc0>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7ff f904 	bl	8002894 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7ff f900 	bl	8002894 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	@ 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1f3      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	4b51      	ldr	r3, [pc, #324]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0xe8>
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036be:	4b4a      	ldr	r3, [pc, #296]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ca:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d11c      	bne.n	8003710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d6:	4b44      	ldr	r3, [pc, #272]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d116      	bne.n	8003710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	4b41      	ldr	r3, [pc, #260]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e1c7      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fa:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4937      	ldr	r1, [pc, #220]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	e03a      	b.n	8003786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003718:	4b34      	ldr	r3, [pc, #208]	@ (80037ec <HAL_RCC_OscConfig+0x244>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7ff f8b9 	bl	8002894 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003726:	f7ff f8b5 	bl	8002894 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e1a8      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b28      	ldr	r3, [pc, #160]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4925      	ldr	r1, [pc, #148]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
 8003758:	e015      	b.n	8003786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375a:	4b24      	ldr	r3, [pc, #144]	@ (80037ec <HAL_RCC_OscConfig+0x244>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7ff f898 	bl	8002894 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003768:	f7ff f894 	bl	8002894 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e187      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d036      	beq.n	8003800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <HAL_RCC_OscConfig+0x248>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7ff f878 	bl	8002894 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a8:	f7ff f874 	bl	8002894 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e167      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_OscConfig+0x240>)
 80037bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x200>
 80037c6:	e01b      	b.n	8003800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c8:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_RCC_OscConfig+0x248>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7ff f861 	bl	8002894 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	e00e      	b.n	80037f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d6:	f7ff f85d 	bl	8002894 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d907      	bls.n	80037f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e150      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	42470000 	.word	0x42470000
 80037f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	4b88      	ldr	r3, [pc, #544]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ea      	bne.n	80037d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8097 	beq.w	800393c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b81      	ldr	r3, [pc, #516]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	4b7d      	ldr	r3, [pc, #500]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	4a7c      	ldr	r2, [pc, #496]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800382c:	6413      	str	r3, [r2, #64]	@ 0x40
 800382e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b77      	ldr	r3, [pc, #476]	@ (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d118      	bne.n	800387c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b74      	ldr	r3, [pc, #464]	@ (8003a1c <HAL_RCC_OscConfig+0x474>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	@ (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7ff f81d 	bl	8002894 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7ff f819 	bl	8002894 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e10c      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b6a      	ldr	r3, [pc, #424]	@ (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x2ea>
 8003884:	4b64      	ldr	r3, [pc, #400]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003888:	4a63      	ldr	r2, [pc, #396]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003890:	e01c      	b.n	80038cc <HAL_RCC_OscConfig+0x324>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x30c>
 800389a:	4b5f      	ldr	r3, [pc, #380]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	4a5e      	ldr	r2, [pc, #376]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0x324>
 80038b4:	4b58      	ldr	r3, [pc, #352]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b8:	4a57      	ldr	r2, [pc, #348]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c0:	4b55      	ldr	r3, [pc, #340]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c4:	4a54      	ldr	r2, [pc, #336]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f023 0304 	bic.w	r3, r3, #4
 80038ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe ffde 	bl	8002894 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe ffda 	bl	8002894 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0cb      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f2:	4b49      	ldr	r3, [pc, #292]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ee      	beq.n	80038dc <HAL_RCC_OscConfig+0x334>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003900:	f7fe ffc8 	bl	8002894 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003906:	e00a      	b.n	800391e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fe ffc4 	bl	8002894 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0b5      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1ee      	bne.n	8003908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003930:	4b39      	ldr	r3, [pc, #228]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	4a38      	ldr	r2, [pc, #224]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a1 	beq.w	8003a88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003946:	4b34      	ldr	r3, [pc, #208]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b08      	cmp	r3, #8
 8003950:	d05c      	beq.n	8003a0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d141      	bne.n	80039de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b31      	ldr	r3, [pc, #196]	@ (8003a20 <HAL_RCC_OscConfig+0x478>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fe ff98 	bl	8002894 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe ff94 	bl	8002894 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e087      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	491b      	ldr	r1, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <HAL_RCC_OscConfig+0x478>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fe ff6d 	bl	8002894 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7fe ff69 	bl	8002894 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e05c      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x416>
 80039dc:	e054      	b.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_RCC_OscConfig+0x478>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe ff56 	bl	8002894 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fe ff52 	bl	8002894 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e045      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x444>
 8003a0a:	e03d      	b.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e038      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCC_OscConfig+0x4ec>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d028      	beq.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d121      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d11a      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d111      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0cc      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b68      	ldr	r3, [pc, #416]	@ (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d90c      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b65      	ldr	r3, [pc, #404]	@ (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b63      	ldr	r3, [pc, #396]	@ (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0b8      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aec:	4b59      	ldr	r3, [pc, #356]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a58      	ldr	r2, [pc, #352]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b04:	4b53      	ldr	r3, [pc, #332]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a52      	ldr	r2, [pc, #328]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b50      	ldr	r3, [pc, #320]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	494d      	ldr	r1, [pc, #308]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d044      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b47      	ldr	r3, [pc, #284]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d119      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e07f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b3f      	ldr	r3, [pc, #252]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e06f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b66:	4b3b      	ldr	r3, [pc, #236]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e067      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b37      	ldr	r3, [pc, #220]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4934      	ldr	r1, [pc, #208]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f7fe fe84 	bl	8002894 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fe fe80 	bl	8002894 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e04f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b25      	ldr	r3, [pc, #148]	@ (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d20c      	bcs.n	8003be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e032      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bec:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4916      	ldr	r1, [pc, #88]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0a:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	490e      	ldr	r1, [pc, #56]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c1e:	f000 f821 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	490a      	ldr	r1, [pc, #40]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	5ccb      	ldrb	r3, [r1, r3]
 8003c32:	fa22 f303 	lsr.w	r3, r2, r3
 8003c36:	4a09      	ldr	r2, [pc, #36]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c3a:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fde4 	bl	800280c <HAL_InitTick>

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023c00 	.word	0x40023c00
 8003c54:	40023800 	.word	0x40023800
 8003c58:	08007404 	.word	0x08007404
 8003c5c:	20000058 	.word	0x20000058
 8003c60:	2000005c 	.word	0x2000005c

08003c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b090      	sub	sp, #64	@ 0x40
 8003c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c70:	2300      	movs	r3, #0
 8003c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c74:	2300      	movs	r3, #0
 8003c76:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c7c:	4b59      	ldr	r3, [pc, #356]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d00d      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	f200 80a1 	bhi.w	8003dd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x34>
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d003      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c96:	e09b      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b53      	ldr	r3, [pc, #332]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003c9c:	e09b      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c9e:	4b53      	ldr	r3, [pc, #332]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ca2:	e098      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cae:	4b4d      	ldr	r3, [pc, #308]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cba:	4b4a      	ldr	r3, [pc, #296]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4b47      	ldr	r3, [pc, #284]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003cd0:	fb03 f201 	mul.w	r2, r3, r1
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	fb00 f303 	mul.w	r3, r0, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a43      	ldr	r2, [pc, #268]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003cde:	fba0 1202 	umull	r1, r2, r0, r2
 8003ce2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cea:	4413      	add	r3, r2
 8003cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	61fa      	str	r2, [r7, #28]
 8003cf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cfe:	f7fc fabf 	bl	8000280 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4613      	mov	r3, r2
 8003d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d0a:	e053      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0c:	4b35      	ldr	r3, [pc, #212]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	2200      	movs	r2, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	617a      	str	r2, [r7, #20]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d1e:	f04f 0b00 	mov.w	fp, #0
 8003d22:	4652      	mov	r2, sl
 8003d24:	465b      	mov	r3, fp
 8003d26:	f04f 0000 	mov.w	r0, #0
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	0159      	lsls	r1, r3, #5
 8003d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d34:	0150      	lsls	r0, r2, #5
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	ebb2 080a 	subs.w	r8, r2, sl
 8003d3e:	eb63 090b 	sbc.w	r9, r3, fp
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d56:	ebb2 0408 	subs.w	r4, r2, r8
 8003d5a:	eb63 0509 	sbc.w	r5, r3, r9
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	00eb      	lsls	r3, r5, #3
 8003d68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6c:	00e2      	lsls	r2, r4, #3
 8003d6e:	4614      	mov	r4, r2
 8003d70:	461d      	mov	r5, r3
 8003d72:	eb14 030a 	adds.w	r3, r4, sl
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	eb45 030b 	adc.w	r3, r5, fp
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	028b      	lsls	r3, r1, #10
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d94:	4621      	mov	r1, r4
 8003d96:	028a      	lsls	r2, r1, #10
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9e:	2200      	movs	r2, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	60fa      	str	r2, [r7, #12]
 8003da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003da8:	f7fc fa6a 	bl	8000280 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3740      	adds	r7, #64	@ 0x40
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	016e3600 	.word	0x016e3600

08003df0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d038      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e18:	4b68      	ldr	r3, [pc, #416]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1e:	f7fe fd39 	bl	8002894 <HAL_GetTick>
 8003e22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e26:	f7fe fd35 	bl	8002894 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0bd      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e38:	4b61      	ldr	r3, [pc, #388]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	019b      	lsls	r3, r3, #6
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	071b      	lsls	r3, r3, #28
 8003e56:	495a      	ldr	r1, [pc, #360]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e5e:	4b57      	ldr	r3, [pc, #348]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e64:	f7fe fd16 	bl	8002894 <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e6c:	f7fe fd12 	bl	8002894 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e09a      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e7e:	4b50      	ldr	r3, [pc, #320]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8083 	beq.w	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	4b48      	ldr	r3, [pc, #288]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	4a47      	ldr	r2, [pc, #284]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ea8:	4b45      	ldr	r3, [pc, #276]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003eb4:	4b43      	ldr	r3, [pc, #268]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a42      	ldr	r2, [pc, #264]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ec0:	f7fe fce8 	bl	8002894 <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fe fce4 	bl	8002894 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e06c      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003eda:	4b3a      	ldr	r3, [pc, #232]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ee6:	4b36      	ldr	r3, [pc, #216]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02f      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d028      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f04:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f14:	4b2c      	ldr	r3, [pc, #176]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f1a:	4a29      	ldr	r2, [pc, #164]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f20:	4b27      	ldr	r3, [pc, #156]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d114      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fcb2 	bl	8002894 <HAL_GetTick>
 8003f30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fe fcae 	bl	8002894 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e034      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0ee      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f62:	d10d      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003f64:	4b16      	ldr	r3, [pc, #88]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f78:	4911      	ldr	r1, [pc, #68]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
 8003f7e:	e005      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003f80:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f8a:	6093      	str	r3, [r2, #8]
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f98:	4909      	ldr	r1, [pc, #36]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7d1a      	ldrb	r2, [r3, #20]
 8003fae:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003fb0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	42470068 	.word	0x42470068
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	42470e40 	.word	0x42470e40
 8003fcc:	424711e0 	.word	0x424711e0

08003fd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e073      	b.n	80040ce <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7f5b      	ldrb	r3, [r3, #29]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d105      	bne.n	8003ffc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fe f996 	bl	8002328 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d055      	beq.n	80040bc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	22ca      	movs	r2, #202	@ 0xca
 8004016:	625a      	str	r2, [r3, #36]	@ 0x24
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2253      	movs	r2, #83	@ 0x53
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa49 	bl	80044b8 <RTC_EnterInitMode>
 8004026:	4603      	mov	r3, r0
 8004028:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d12c      	bne.n	800408a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800403e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004042:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68d2      	ldr	r2, [r2, #12]
 800406a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6919      	ldr	r1, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	041a      	lsls	r2, r3, #16
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fa50 	bl	8004526 <RTC_ExitInitMode>
 8004086:	4603      	mov	r3, r0
 8004088:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d110      	bne.n	80040b2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	22ff      	movs	r2, #255	@ 0xff
 80040b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80040ba:	e001      	b.n	80040c0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040d6:	b590      	push	{r4, r7, lr}
 80040d8:	b087      	sub	sp, #28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	7f1b      	ldrb	r3, [r3, #28]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_RTC_SetTime+0x1c>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e087      	b.n	8004202 <HAL_RTC_SetTime+0x12c>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2202      	movs	r2, #2
 80040fc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d126      	bne.n	8004152 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fa27 	bl	8004570 <RTC_ByteToBcd2>
 8004122:	4603      	mov	r3, r0
 8004124:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fa20 	bl	8004570 <RTC_ByteToBcd2>
 8004130:	4603      	mov	r3, r0
 8004132:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004134:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	789b      	ldrb	r3, [r3, #2]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fa18 	bl	8004570 <RTC_ByteToBcd2>
 8004140:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004142:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	78db      	ldrb	r3, [r3, #3]
 800414a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	e018      	b.n	8004184 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2200      	movs	r2, #0
 8004164:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004172:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004178:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	78db      	ldrb	r3, [r3, #3]
 800417e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	22ca      	movs	r2, #202	@ 0xca
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2253      	movs	r2, #83	@ 0x53
 8004192:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f98f 	bl	80044b8 <RTC_EnterInitMode>
 800419a:	4603      	mov	r3, r0
 800419c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d120      	bne.n	80041e6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80041ae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80041b2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6899      	ldr	r1, [r3, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f9a2 	bl	8004526 <RTC_ExitInitMode>
 80041e2:	4603      	mov	r3, r0
 80041e4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	22ff      	movs	r2, #255	@ 0xff
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]

  return status;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
}
 8004202:	4618      	mov	r0, r3
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bd90      	pop	{r4, r7, pc}

0800420a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800423c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004240:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	0d9b      	lsrs	r3, r3, #22
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11a      	bne.n	80042bc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f98e 	bl	80045ac <RTC_Bcd2ToByte>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	785b      	ldrb	r3, [r3, #1]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f985 	bl	80045ac <RTC_Bcd2ToByte>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	789b      	ldrb	r3, [r3, #2]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f97c 	bl	80045ac <RTC_Bcd2ToByte>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042c6:	b590      	push	{r4, r7, lr}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	7f1b      	ldrb	r3, [r3, #28]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_RTC_SetDate+0x1c>
 80042de:	2302      	movs	r3, #2
 80042e0:	e071      	b.n	80043c6 <HAL_RTC_SetDate+0x100>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2202      	movs	r2, #2
 80042ec:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10e      	bne.n	8004312 <HAL_RTC_SetDate+0x4c>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	f023 0310 	bic.w	r3, r3, #16
 8004308:	b2db      	uxtb	r3, r3
 800430a:	330a      	adds	r3, #10
 800430c:	b2da      	uxtb	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11c      	bne.n	8004352 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	78db      	ldrb	r3, [r3, #3]
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f927 	bl	8004570 <RTC_ByteToBcd2>
 8004322:	4603      	mov	r3, r0
 8004324:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f920 	bl	8004570 <RTC_ByteToBcd2>
 8004330:	4603      	mov	r3, r0
 8004332:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004334:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	789b      	ldrb	r3, [r3, #2]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f918 	bl	8004570 <RTC_ByteToBcd2>
 8004340:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004342:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e00e      	b.n	8004370 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	78db      	ldrb	r3, [r3, #3]
 8004356:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800435e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004364:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	22ca      	movs	r2, #202	@ 0xca
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2253      	movs	r2, #83	@ 0x53
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f899 	bl	80044b8 <RTC_EnterInitMode>
 8004386:	4603      	mov	r3, r0
 8004388:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10c      	bne.n	80043aa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800439a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800439e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f8c0 	bl	8004526 <RTC_ExitInitMode>
 80043a6:	4603      	mov	r3, r0
 80043a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	22ff      	movs	r2, #255	@ 0xff
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]

  return status;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd90      	pop	{r4, r7, pc}

080043ce <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80043ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	0b5b      	lsrs	r3, r3, #13
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11a      	bne.n	8004462 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	78db      	ldrb	r3, [r3, #3]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f8bb 	bl	80045ac <RTC_Bcd2ToByte>
 8004436:	4603      	mov	r3, r0
 8004438:	461a      	mov	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	785b      	ldrb	r3, [r3, #1]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f8b2 	bl	80045ac <RTC_Bcd2ToByte>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	789b      	ldrb	r3, [r3, #2]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 f8a9 	bl	80045ac <RTC_Bcd2ToByte>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0d      	ldr	r2, [pc, #52]	@ (80044b4 <HAL_RTC_WaitForSynchro+0x48>)
 800447e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004480:	f7fe fa08 	bl	8002894 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004486:	e009      	b.n	800449c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004488:	f7fe fa04 	bl	8002894 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004496:	d901      	bls.n	800449c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e007      	b.n	80044ac <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0ee      	beq.n	8004488 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	00013f5f 	.word	0x00013f5f

080044b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d122      	bne.n	800451c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044e6:	f7fe f9d5 	bl	8002894 <HAL_GetTick>
 80044ea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044ec:	e00c      	b.n	8004508 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ee:	f7fe f9d1 	bl	8002894 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044fc:	d904      	bls.n	8004508 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2204      	movs	r2, #4
 8004502:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <RTC_EnterInitMode+0x64>
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d1e8      	bne.n	80044ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004540:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff8b 	bl	800446c <HAL_RTC_WaitForSynchro>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2204      	movs	r2, #4
 8004560:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800457e:	e005      	b.n	800458c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	3b0a      	subs	r3, #10
 800458a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	2b09      	cmp	r3, #9
 8004590:	d8f6      	bhi.n	8004580 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	b2da      	uxtb	r2, r3
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	4313      	orrs	r3, r2
 800459e:	b2db      	uxtb	r3, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	4413      	add	r3, r2
 80045da:	b2db      	uxtb	r3, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e041      	b.n	800467e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fd feb6 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 ffb6 	bl	8005598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e041      	b.n	800471c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f839 	bl	8004724 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f000 ff67 	bl	8005598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e022      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x72>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b04      	cmp	r3, #4
 8004768:	d109      	bne.n	800477e <HAL_TIM_PWM_Start_DMA+0x46>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e015      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x72>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d109      	bne.n	8004798 <HAL_TIM_PWM_Start_DMA+0x60>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e008      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x72>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	e15d      	b.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start_DMA+0x94>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e022      	b.n	8004812 <HAL_TIM_PWM_Start_DMA+0xda>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d109      	bne.n	80047e6 <HAL_TIM_PWM_Start_DMA+0xae>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	e015      	b.n	8004812 <HAL_TIM_PWM_Start_DMA+0xda>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_PWM_Start_DMA+0xc8>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e008      	b.n	8004812 <HAL_TIM_PWM_Start_DMA+0xda>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d024      	beq.n	8004860 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_TIM_PWM_Start_DMA+0xea>
 800481c:	887b      	ldrh	r3, [r7, #2]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e123      	b.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start_DMA+0xfe>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004834:	e016      	b.n	8004864 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b04      	cmp	r3, #4
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start_DMA+0x10e>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004844:	e00e      	b.n	8004864 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start_DMA+0x11e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004854:	e006      	b.n	8004864 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800485e:	e001      	b.n	8004864 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e104      	b.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b0c      	cmp	r3, #12
 8004868:	f200 80ae 	bhi.w	80049c8 <HAL_TIM_PWM_Start_DMA+0x290>
 800486c:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	080048a9 	.word	0x080048a9
 8004878:	080049c9 	.word	0x080049c9
 800487c:	080049c9 	.word	0x080049c9
 8004880:	080049c9 	.word	0x080049c9
 8004884:	080048f1 	.word	0x080048f1
 8004888:	080049c9 	.word	0x080049c9
 800488c:	080049c9 	.word	0x080049c9
 8004890:	080049c9 	.word	0x080049c9
 8004894:	08004939 	.word	0x08004939
 8004898:	080049c9 	.word	0x080049c9
 800489c:	080049c9 	.word	0x080049c9
 80048a0:	080049c9 	.word	0x080049c9
 80048a4:	08004981 	.word	0x08004981
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	4a72      	ldr	r2, [pc, #456]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x340>)
 80048ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	4a71      	ldr	r2, [pc, #452]	@ (8004a7c <HAL_TIM_PWM_Start_DMA+0x344>)
 80048b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	4a70      	ldr	r2, [pc, #448]	@ (8004a80 <HAL_TIM_PWM_Start_DMA+0x348>)
 80048be:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3334      	adds	r3, #52	@ 0x34
 80048cc:	461a      	mov	r2, r3
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	f7fe f9d0 	bl	8002c74 <HAL_DMA_Start_IT>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0c7      	b.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ec:	60da      	str	r2, [r3, #12]
      break;
 80048ee:	e06e      	b.n	80049ce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	4a60      	ldr	r2, [pc, #384]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x340>)
 80048f6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	4a5f      	ldr	r2, [pc, #380]	@ (8004a7c <HAL_TIM_PWM_Start_DMA+0x344>)
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	4a5e      	ldr	r2, [pc, #376]	@ (8004a80 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004906:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3338      	adds	r3, #56	@ 0x38
 8004914:	461a      	mov	r2, r3
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	f7fe f9ac 	bl	8002c74 <HAL_DMA_Start_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0a3      	b.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004934:	60da      	str	r2, [r3, #12]
      break;
 8004936:	e04a      	b.n	80049ce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4a4e      	ldr	r2, [pc, #312]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x340>)
 800493e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	4a4d      	ldr	r2, [pc, #308]	@ (8004a7c <HAL_TIM_PWM_Start_DMA+0x344>)
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	4a4c      	ldr	r2, [pc, #304]	@ (8004a80 <HAL_TIM_PWM_Start_DMA+0x348>)
 800494e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	333c      	adds	r3, #60	@ 0x3c
 800495c:	461a      	mov	r2, r3
 800495e:	887b      	ldrh	r3, [r7, #2]
 8004960:	f7fe f988 	bl	8002c74 <HAL_DMA_Start_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e07f      	b.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800497c:	60da      	str	r2, [r3, #12]
      break;
 800497e:	e026      	b.n	80049ce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	4a3c      	ldr	r2, [pc, #240]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004986:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	4a3b      	ldr	r2, [pc, #236]	@ (8004a7c <HAL_TIM_PWM_Start_DMA+0x344>)
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	4a3a      	ldr	r2, [pc, #232]	@ (8004a80 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004996:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3340      	adds	r3, #64	@ 0x40
 80049a4:	461a      	mov	r2, r3
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	f7fe f964 	bl	8002c74 <HAL_DMA_Start_IT>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e05b      	b.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049c4:	60da      	str	r2, [r3, #12]
      break;
 80049c6:	e002      	b.n	80049ce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
      break;
 80049cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d14b      	bne.n	8004a6c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 f88d 	bl	8005afc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a27      	ldr	r2, [pc, #156]	@ (8004a84 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d107      	bne.n	80049fc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a20      	ldr	r2, [pc, #128]	@ (8004a84 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0e:	d013      	beq.n	8004a38 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1c      	ldr	r2, [pc, #112]	@ (8004a88 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004a8c <HAL_TIM_PWM_Start_DMA+0x354>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a19      	ldr	r2, [pc, #100]	@ (8004a90 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a18      	ldr	r2, [pc, #96]	@ (8004a94 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d111      	bne.n	8004a5c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d010      	beq.n	8004a6c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0201 	orr.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	e007      	b.n	8004a6c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	08005489 	.word	0x08005489
 8004a7c:	08005531 	.word	0x08005531
 8004a80:	080053f7 	.word	0x080053f7
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40014000 	.word	0x40014000

08004a98 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	d855      	bhi.n	8004b58 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004aac:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004b59 	.word	0x08004b59
 8004abc:	08004b59 	.word	0x08004b59
 8004ac0:	08004b59 	.word	0x08004b59
 8004ac4:	08004b05 	.word	0x08004b05
 8004ac8:	08004b59 	.word	0x08004b59
 8004acc:	08004b59 	.word	0x08004b59
 8004ad0:	08004b59 	.word	0x08004b59
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004b59 	.word	0x08004b59
 8004adc:	08004b59 	.word	0x08004b59
 8004ae0:	08004b59 	.word	0x08004b59
 8004ae4:	08004b3d 	.word	0x08004b3d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004af6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe f911 	bl	8002d24 <HAL_DMA_Abort_IT>
      break;
 8004b02:	e02c      	b.n	8004b5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe f903 	bl	8002d24 <HAL_DMA_Abort_IT>
      break;
 8004b1e:	e01e      	b.n	8004b5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe f8f5 	bl	8002d24 <HAL_DMA_Abort_IT>
      break;
 8004b3a:	e010      	b.n	8004b5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe f8e7 	bl	8002d24 <HAL_DMA_Abort_IT>
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d157      	bne.n	8004c14 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 ffc5 	bl	8005afc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a2a      	ldr	r2, [pc, #168]	@ (8004c20 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d117      	bne.n	8004bac <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a1a      	ldr	r2, [r3, #32]
 8004b82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10f      	bne.n	8004bac <HAL_TIM_PWM_Stop_DMA+0x114>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6a1a      	ldr	r2, [r3, #32]
 8004b92:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <HAL_TIM_PWM_Stop_DMA+0x114>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004baa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10f      	bne.n	8004bdc <HAL_TIM_PWM_Stop_DMA+0x144>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_PWM_Stop_DMA+0x144>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_TIM_PWM_Stop_DMA+0x154>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bea:	e013      	b.n	8004c14 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d104      	bne.n	8004bfc <HAL_TIM_PWM_Stop_DMA+0x164>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bfa:	e00b      	b.n	8004c14 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d104      	bne.n	8004c0c <HAL_TIM_PWM_Stop_DMA+0x174>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c0a:	e003      	b.n	8004c14 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40010000 	.word	0x40010000

08004c24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e097      	b.n	8004d68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fd fbeb 	bl	8002428 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c68:	f023 0307 	bic.w	r3, r3, #7
 8004c6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f000 fc8d 	bl	8005598 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004cc4:	f023 030c 	bic.w	r3, r3, #12
 8004cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	011a      	lsls	r2, r3, #4
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	031b      	lsls	r3, r3, #12
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4313      	orrs	r3, r2
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d110      	bne.n	8004dc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d102      	bne.n	8004dac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004da6:	7b7b      	ldrb	r3, [r7, #13]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d001      	beq.n	8004db0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e069      	b.n	8004e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dc0:	e031      	b.n	8004e26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d110      	bne.n	8004dea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d102      	bne.n	8004dd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dce:	7b3b      	ldrb	r3, [r7, #12]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d001      	beq.n	8004dd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e055      	b.n	8004e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004de8:	e01d      	b.n	8004e26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d108      	bne.n	8004e02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df0:	7bbb      	ldrb	r3, [r7, #14]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d105      	bne.n	8004e02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df6:	7b7b      	ldrb	r3, [r7, #13]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d102      	bne.n	8004e02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dfc:	7b3b      	ldrb	r3, [r7, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d001      	beq.n	8004e06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e03e      	b.n	8004e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_TIM_Encoder_Start+0xc4>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d008      	beq.n	8004e44 <HAL_TIM_Encoder_Start+0xd4>
 8004e32:	e00f      	b.n	8004e54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fe5d 	bl	8005afc <TIM_CCxChannelCmd>
      break;
 8004e42:	e016      	b.n	8004e72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	2104      	movs	r1, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fe55 	bl	8005afc <TIM_CCxChannelCmd>
      break;
 8004e52:	e00e      	b.n	8004e72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fe4d 	bl	8005afc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2201      	movs	r2, #1
 8004e68:	2104      	movs	r1, #4
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fe46 	bl	8005afc <TIM_CCxChannelCmd>
      break;
 8004e70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d020      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0202 	mvn.w	r2, #2
 8004ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa65 	bl	80053a6 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fa57 	bl	8005392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fb feff 	bl	8000ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d020      	beq.n	8004f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01b      	beq.n	8004f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0204 	mvn.w	r2, #4
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa3f 	bl	80053a6 <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fa31 	bl	8005392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7fb fed9 	bl	8000ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d020      	beq.n	8004f88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01b      	beq.n	8004f88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0208 	mvn.w	r2, #8
 8004f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fa19 	bl	80053a6 <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa0b 	bl	8005392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fb feb3 	bl	8000ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d020      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0210 	mvn.w	r2, #16
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9f3 	bl	80053a6 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9e5 	bl	8005392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fb fe8d 	bl	8000ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0201 	mvn.w	r2, #1
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f9c3 	bl	800537e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00c      	beq.n	800501c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fe60 	bl	8005cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9c7 	bl	80053ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00c      	beq.n	8005064 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0220 	mvn.w	r2, #32
 800505c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fe32 	bl	8005cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005086:	2302      	movs	r3, #2
 8005088:	e0ae      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b0c      	cmp	r3, #12
 8005096:	f200 809f 	bhi.w	80051d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800509a:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080051d9 	.word	0x080051d9
 80050a8:	080051d9 	.word	0x080051d9
 80050ac:	080051d9 	.word	0x080051d9
 80050b0:	08005115 	.word	0x08005115
 80050b4:	080051d9 	.word	0x080051d9
 80050b8:	080051d9 	.word	0x080051d9
 80050bc:	080051d9 	.word	0x080051d9
 80050c0:	08005157 	.word	0x08005157
 80050c4:	080051d9 	.word	0x080051d9
 80050c8:	080051d9 	.word	0x080051d9
 80050cc:	080051d9 	.word	0x080051d9
 80050d0:	08005197 	.word	0x08005197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fae8 	bl	80056b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0208 	orr.w	r2, r2, #8
 80050ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0204 	bic.w	r2, r2, #4
 80050fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6999      	ldr	r1, [r3, #24]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	619a      	str	r2, [r3, #24]
      break;
 8005112:	e064      	b.n	80051de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb2e 	bl	800577c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800512e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800513e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6999      	ldr	r1, [r3, #24]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	021a      	lsls	r2, r3, #8
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	619a      	str	r2, [r3, #24]
      break;
 8005154:	e043      	b.n	80051de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fb79 	bl	8005854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0208 	orr.w	r2, r2, #8
 8005170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0204 	bic.w	r2, r2, #4
 8005180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69d9      	ldr	r1, [r3, #28]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	61da      	str	r2, [r3, #28]
      break;
 8005194:	e023      	b.n	80051de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fbc3 	bl	8005928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69d9      	ldr	r1, [r3, #28]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	021a      	lsls	r2, r3, #8
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	61da      	str	r2, [r3, #28]
      break;
 80051d6:	e002      	b.n	80051de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	75fb      	strb	r3, [r7, #23]
      break;
 80051dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIM_ConfigClockSource+0x1c>
 8005208:	2302      	movs	r3, #2
 800520a:	e0b4      	b.n	8005376 <HAL_TIM_ConfigClockSource+0x186>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800522a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005244:	d03e      	beq.n	80052c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800524a:	f200 8087 	bhi.w	800535c <HAL_TIM_ConfigClockSource+0x16c>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005252:	f000 8086 	beq.w	8005362 <HAL_TIM_ConfigClockSource+0x172>
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525a:	d87f      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b70      	cmp	r3, #112	@ 0x70
 800525e:	d01a      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0xa6>
 8005260:	2b70      	cmp	r3, #112	@ 0x70
 8005262:	d87b      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b60      	cmp	r3, #96	@ 0x60
 8005266:	d050      	beq.n	800530a <HAL_TIM_ConfigClockSource+0x11a>
 8005268:	2b60      	cmp	r3, #96	@ 0x60
 800526a:	d877      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b50      	cmp	r3, #80	@ 0x50
 800526e:	d03c      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0xfa>
 8005270:	2b50      	cmp	r3, #80	@ 0x50
 8005272:	d873      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b40      	cmp	r3, #64	@ 0x40
 8005276:	d058      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x13a>
 8005278:	2b40      	cmp	r3, #64	@ 0x40
 800527a:	d86f      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b30      	cmp	r3, #48	@ 0x30
 800527e:	d064      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	2b30      	cmp	r3, #48	@ 0x30
 8005282:	d86b      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b20      	cmp	r3, #32
 8005286:	d060      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x15a>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d867      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b00      	cmp	r3, #0
 800528e:	d05c      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x15a>
 8005290:	2b10      	cmp	r3, #16
 8005292:	d05a      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x15a>
 8005294:	e062      	b.n	800535c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a6:	f000 fc09 	bl	8005abc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	609a      	str	r2, [r3, #8]
      break;
 80052c2:	e04f      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d4:	f000 fbf2 	bl	8005abc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052e6:	609a      	str	r2, [r3, #8]
      break;
 80052e8:	e03c      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	461a      	mov	r2, r3
 80052f8:	f000 fb66 	bl	80059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2150      	movs	r1, #80	@ 0x50
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fbbf 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005308:	e02c      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005316:	461a      	mov	r2, r3
 8005318:	f000 fb85 	bl	8005a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2160      	movs	r1, #96	@ 0x60
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fbaf 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005328:	e01c      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005336:	461a      	mov	r2, r3
 8005338:	f000 fb46 	bl	80059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2140      	movs	r1, #64	@ 0x40
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fb9f 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005348:	e00c      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f000 fb96 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 800535a:	e003      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
      break;
 8005360:	e000      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d107      	bne.n	800541e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800541c:	e02a      	b.n	8005474 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d107      	bne.n	8005438 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2202      	movs	r2, #2
 800542c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005436:	e01d      	b.n	8005474 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d107      	bne.n	8005452 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2204      	movs	r2, #4
 8005446:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005450:	e010      	b.n	8005474 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d107      	bne.n	800546c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2208      	movs	r2, #8
 8005460:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800546a:	e003      	b.n	8005474 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff ffb4 	bl	80053e2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d10b      	bne.n	80054b8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2201      	movs	r2, #1
 80054a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d136      	bne.n	800551c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054b6:	e031      	b.n	800551c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d10b      	bne.n	80054da <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2202      	movs	r2, #2
 80054c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d125      	bne.n	800551c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054d8:	e020      	b.n	800551c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d10b      	bne.n	80054fc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2204      	movs	r2, #4
 80054e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d114      	bne.n	800551c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fa:	e00f      	b.n	800551c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d10a      	bne.n	800551c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2208      	movs	r2, #8
 800550a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7fb fbe3 	bl	8000ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d103      	bne.n	8005550 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	771a      	strb	r2, [r3, #28]
 800554e:	e019      	b.n	8005584 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d103      	bne.n	8005562 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2202      	movs	r2, #2
 800555e:	771a      	strb	r2, [r3, #28]
 8005560:	e010      	b.n	8005584 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	429a      	cmp	r2, r3
 800556a:	d103      	bne.n	8005574 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2204      	movs	r2, #4
 8005570:	771a      	strb	r2, [r3, #28]
 8005572:	e007      	b.n	8005584 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d102      	bne.n	8005584 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2208      	movs	r2, #8
 8005582:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff ff18 	bl	80053ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3a      	ldr	r2, [pc, #232]	@ (8005694 <TIM_Base_SetConfig+0xfc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00f      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b6:	d00b      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a37      	ldr	r2, [pc, #220]	@ (8005698 <TIM_Base_SetConfig+0x100>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a36      	ldr	r2, [pc, #216]	@ (800569c <TIM_Base_SetConfig+0x104>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a35      	ldr	r2, [pc, #212]	@ (80056a0 <TIM_Base_SetConfig+0x108>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d108      	bne.n	80055e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005694 <TIM_Base_SetConfig+0xfc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01b      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f0:	d017      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a28      	ldr	r2, [pc, #160]	@ (8005698 <TIM_Base_SetConfig+0x100>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a27      	ldr	r2, [pc, #156]	@ (800569c <TIM_Base_SetConfig+0x104>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00f      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a26      	ldr	r2, [pc, #152]	@ (80056a0 <TIM_Base_SetConfig+0x108>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00b      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a25      	ldr	r2, [pc, #148]	@ (80056a4 <TIM_Base_SetConfig+0x10c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d007      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a24      	ldr	r2, [pc, #144]	@ (80056a8 <TIM_Base_SetConfig+0x110>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d003      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a23      	ldr	r2, [pc, #140]	@ (80056ac <TIM_Base_SetConfig+0x114>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d108      	bne.n	8005634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0e      	ldr	r2, [pc, #56]	@ (8005694 <TIM_Base_SetConfig+0xfc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d103      	bne.n	8005668 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d105      	bne.n	8005686 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]
  }
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f023 0201 	bic.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0302 	bic.w	r3, r3, #2
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <TIM_OC1_SetConfig+0xc8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0308 	bic.w	r3, r3, #8
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a13      	ldr	r2, [pc, #76]	@ (8005778 <TIM_OC1_SetConfig+0xc8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d111      	bne.n	8005752 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40010000 	.word	0x40010000

0800577c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f023 0210 	bic.w	r2, r3, #16
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0320 	bic.w	r3, r3, #32
 80057c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005850 <TIM_OC2_SetConfig+0xd4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10d      	bne.n	80057f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a15      	ldr	r2, [pc, #84]	@ (8005850 <TIM_OC2_SetConfig+0xd4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d113      	bne.n	8005828 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40010000 	.word	0x40010000

08005854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800589c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005924 <TIM_OC3_SetConfig+0xd0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d10d      	bne.n	80058ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a14      	ldr	r2, [pc, #80]	@ (8005924 <TIM_OC3_SetConfig+0xd0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d113      	bne.n	80058fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	40010000 	.word	0x40010000

08005928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	031b      	lsls	r3, r3, #12
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a10      	ldr	r2, [pc, #64]	@ (80059c4 <TIM_OC4_SetConfig+0x9c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d109      	bne.n	800599c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800598e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	019b      	lsls	r3, r3, #6
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40010000 	.word	0x40010000

080059c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 030a 	bic.w	r3, r3, #10
 8005a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b087      	sub	sp, #28
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f023 0210 	bic.w	r2, r3, #16
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	031b      	lsls	r3, r3, #12
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f043 0307 	orr.w	r3, r3, #7
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	021a      	lsls	r2, r3, #8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2201      	movs	r2, #1
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1a      	ldr	r2, [r3, #32]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	401a      	ands	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1a      	ldr	r2, [r3, #32]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	371c      	adds	r7, #28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e050      	b.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bac:	d013      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40010000 	.word	0x40010000
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800
 8005c1c:	40000c00 	.word	0x40000c00
 8005c20:	40014000 	.word	0x40014000

08005c24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e03d      	b.n	8005cbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <rand>:
 8005cf0:	4b16      	ldr	r3, [pc, #88]	@ (8005d4c <rand+0x5c>)
 8005cf2:	b510      	push	{r4, lr}
 8005cf4:	681c      	ldr	r4, [r3, #0]
 8005cf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005cf8:	b9b3      	cbnz	r3, 8005d28 <rand+0x38>
 8005cfa:	2018      	movs	r0, #24
 8005cfc:	f000 fa7a 	bl	80061f4 <malloc>
 8005d00:	4602      	mov	r2, r0
 8005d02:	6320      	str	r0, [r4, #48]	@ 0x30
 8005d04:	b920      	cbnz	r0, 8005d10 <rand+0x20>
 8005d06:	4b12      	ldr	r3, [pc, #72]	@ (8005d50 <rand+0x60>)
 8005d08:	4812      	ldr	r0, [pc, #72]	@ (8005d54 <rand+0x64>)
 8005d0a:	2152      	movs	r1, #82	@ 0x52
 8005d0c:	f000 fa0a 	bl	8006124 <__assert_func>
 8005d10:	4911      	ldr	r1, [pc, #68]	@ (8005d58 <rand+0x68>)
 8005d12:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <rand+0x6c>)
 8005d14:	e9c0 1300 	strd	r1, r3, [r0]
 8005d18:	4b11      	ldr	r3, [pc, #68]	@ (8005d60 <rand+0x70>)
 8005d1a:	6083      	str	r3, [r0, #8]
 8005d1c:	230b      	movs	r3, #11
 8005d1e:	8183      	strh	r3, [r0, #12]
 8005d20:	2100      	movs	r1, #0
 8005d22:	2001      	movs	r0, #1
 8005d24:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d2a:	480e      	ldr	r0, [pc, #56]	@ (8005d64 <rand+0x74>)
 8005d2c:	690b      	ldr	r3, [r1, #16]
 8005d2e:	694c      	ldr	r4, [r1, #20]
 8005d30:	4a0d      	ldr	r2, [pc, #52]	@ (8005d68 <rand+0x78>)
 8005d32:	4358      	muls	r0, r3
 8005d34:	fb02 0004 	mla	r0, r2, r4, r0
 8005d38:	fba3 3202 	umull	r3, r2, r3, r2
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	eb40 0002 	adc.w	r0, r0, r2
 8005d42:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005d46:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005d4a:	bd10      	pop	{r4, pc}
 8005d4c:	20000070 	.word	0x20000070
 8005d50:	0800741c 	.word	0x0800741c
 8005d54:	08007433 	.word	0x08007433
 8005d58:	abcd330e 	.word	0xabcd330e
 8005d5c:	e66d1234 	.word	0xe66d1234
 8005d60:	0005deec 	.word	0x0005deec
 8005d64:	5851f42d 	.word	0x5851f42d
 8005d68:	4c957f2d 	.word	0x4c957f2d

08005d6c <std>:
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	4604      	mov	r4, r0
 8005d72:	e9c0 3300 	strd	r3, r3, [r0]
 8005d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d7a:	6083      	str	r3, [r0, #8]
 8005d7c:	8181      	strh	r1, [r0, #12]
 8005d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d80:	81c2      	strh	r2, [r0, #14]
 8005d82:	6183      	str	r3, [r0, #24]
 8005d84:	4619      	mov	r1, r3
 8005d86:	2208      	movs	r2, #8
 8005d88:	305c      	adds	r0, #92	@ 0x5c
 8005d8a:	f000 f92d 	bl	8005fe8 <memset>
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <std+0x58>)
 8005d90:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d92:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc8 <std+0x5c>)
 8005d94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d96:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <std+0x60>)
 8005d98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <std+0x64>)
 8005d9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd4 <std+0x68>)
 8005da0:	6224      	str	r4, [r4, #32]
 8005da2:	429c      	cmp	r4, r3
 8005da4:	d006      	beq.n	8005db4 <std+0x48>
 8005da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005daa:	4294      	cmp	r4, r2
 8005dac:	d002      	beq.n	8005db4 <std+0x48>
 8005dae:	33d0      	adds	r3, #208	@ 0xd0
 8005db0:	429c      	cmp	r4, r3
 8005db2:	d105      	bne.n	8005dc0 <std+0x54>
 8005db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbc:	f000 b9a0 	b.w	8006100 <__retarget_lock_init_recursive>
 8005dc0:	bd10      	pop	{r4, pc}
 8005dc2:	bf00      	nop
 8005dc4:	08005ef1 	.word	0x08005ef1
 8005dc8:	08005f13 	.word	0x08005f13
 8005dcc:	08005f4b 	.word	0x08005f4b
 8005dd0:	08005f6f 	.word	0x08005f6f
 8005dd4:	20002454 	.word	0x20002454

08005dd8 <stdio_exit_handler>:
 8005dd8:	4a02      	ldr	r2, [pc, #8]	@ (8005de4 <stdio_exit_handler+0xc>)
 8005dda:	4903      	ldr	r1, [pc, #12]	@ (8005de8 <stdio_exit_handler+0x10>)
 8005ddc:	4803      	ldr	r0, [pc, #12]	@ (8005dec <stdio_exit_handler+0x14>)
 8005dde:	f000 b869 	b.w	8005eb4 <_fwalk_sglue>
 8005de2:	bf00      	nop
 8005de4:	20000064 	.word	0x20000064
 8005de8:	08006a35 	.word	0x08006a35
 8005dec:	20000074 	.word	0x20000074

08005df0 <cleanup_stdio>:
 8005df0:	6841      	ldr	r1, [r0, #4]
 8005df2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <cleanup_stdio+0x34>)
 8005df4:	4299      	cmp	r1, r3
 8005df6:	b510      	push	{r4, lr}
 8005df8:	4604      	mov	r4, r0
 8005dfa:	d001      	beq.n	8005e00 <cleanup_stdio+0x10>
 8005dfc:	f000 fe1a 	bl	8006a34 <_fflush_r>
 8005e00:	68a1      	ldr	r1, [r4, #8]
 8005e02:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <cleanup_stdio+0x38>)
 8005e04:	4299      	cmp	r1, r3
 8005e06:	d002      	beq.n	8005e0e <cleanup_stdio+0x1e>
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fe13 	bl	8006a34 <_fflush_r>
 8005e0e:	68e1      	ldr	r1, [r4, #12]
 8005e10:	4b06      	ldr	r3, [pc, #24]	@ (8005e2c <cleanup_stdio+0x3c>)
 8005e12:	4299      	cmp	r1, r3
 8005e14:	d004      	beq.n	8005e20 <cleanup_stdio+0x30>
 8005e16:	4620      	mov	r0, r4
 8005e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1c:	f000 be0a 	b.w	8006a34 <_fflush_r>
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	bf00      	nop
 8005e24:	20002454 	.word	0x20002454
 8005e28:	200024bc 	.word	0x200024bc
 8005e2c:	20002524 	.word	0x20002524

08005e30 <global_stdio_init.part.0>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <global_stdio_init.part.0+0x30>)
 8005e34:	4c0b      	ldr	r4, [pc, #44]	@ (8005e64 <global_stdio_init.part.0+0x34>)
 8005e36:	4a0c      	ldr	r2, [pc, #48]	@ (8005e68 <global_stdio_init.part.0+0x38>)
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2104      	movs	r1, #4
 8005e40:	f7ff ff94 	bl	8005d6c <std>
 8005e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2109      	movs	r1, #9
 8005e4c:	f7ff ff8e 	bl	8005d6c <std>
 8005e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e54:	2202      	movs	r2, #2
 8005e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e5a:	2112      	movs	r1, #18
 8005e5c:	f7ff bf86 	b.w	8005d6c <std>
 8005e60:	2000258c 	.word	0x2000258c
 8005e64:	20002454 	.word	0x20002454
 8005e68:	08005dd9 	.word	0x08005dd9

08005e6c <__sfp_lock_acquire>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	@ (8005e74 <__sfp_lock_acquire+0x8>)
 8005e6e:	f000 b948 	b.w	8006102 <__retarget_lock_acquire_recursive>
 8005e72:	bf00      	nop
 8005e74:	20002595 	.word	0x20002595

08005e78 <__sfp_lock_release>:
 8005e78:	4801      	ldr	r0, [pc, #4]	@ (8005e80 <__sfp_lock_release+0x8>)
 8005e7a:	f000 b943 	b.w	8006104 <__retarget_lock_release_recursive>
 8005e7e:	bf00      	nop
 8005e80:	20002595 	.word	0x20002595

08005e84 <__sinit>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4604      	mov	r4, r0
 8005e88:	f7ff fff0 	bl	8005e6c <__sfp_lock_acquire>
 8005e8c:	6a23      	ldr	r3, [r4, #32]
 8005e8e:	b11b      	cbz	r3, 8005e98 <__sinit+0x14>
 8005e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e94:	f7ff bff0 	b.w	8005e78 <__sfp_lock_release>
 8005e98:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <__sinit+0x28>)
 8005e9a:	6223      	str	r3, [r4, #32]
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <__sinit+0x2c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f5      	bne.n	8005e90 <__sinit+0xc>
 8005ea4:	f7ff ffc4 	bl	8005e30 <global_stdio_init.part.0>
 8005ea8:	e7f2      	b.n	8005e90 <__sinit+0xc>
 8005eaa:	bf00      	nop
 8005eac:	08005df1 	.word	0x08005df1
 8005eb0:	2000258c 	.word	0x2000258c

08005eb4 <_fwalk_sglue>:
 8005eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb8:	4607      	mov	r7, r0
 8005eba:	4688      	mov	r8, r1
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	2600      	movs	r6, #0
 8005ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ec8:	d505      	bpl.n	8005ed6 <_fwalk_sglue+0x22>
 8005eca:	6824      	ldr	r4, [r4, #0]
 8005ecc:	2c00      	cmp	r4, #0
 8005ece:	d1f7      	bne.n	8005ec0 <_fwalk_sglue+0xc>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed6:	89ab      	ldrh	r3, [r5, #12]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d907      	bls.n	8005eec <_fwalk_sglue+0x38>
 8005edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	d003      	beq.n	8005eec <_fwalk_sglue+0x38>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	47c0      	blx	r8
 8005eea:	4306      	orrs	r6, r0
 8005eec:	3568      	adds	r5, #104	@ 0x68
 8005eee:	e7e9      	b.n	8005ec4 <_fwalk_sglue+0x10>

08005ef0 <__sread>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef8:	f000 f8b4 	bl	8006064 <_read_r>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	bfab      	itete	ge
 8005f00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f02:	89a3      	ldrhlt	r3, [r4, #12]
 8005f04:	181b      	addge	r3, r3, r0
 8005f06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f0a:	bfac      	ite	ge
 8005f0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f0e:	81a3      	strhlt	r3, [r4, #12]
 8005f10:	bd10      	pop	{r4, pc}

08005f12 <__swrite>:
 8005f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f16:	461f      	mov	r7, r3
 8005f18:	898b      	ldrh	r3, [r1, #12]
 8005f1a:	05db      	lsls	r3, r3, #23
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	4616      	mov	r6, r2
 8005f22:	d505      	bpl.n	8005f30 <__swrite+0x1e>
 8005f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f28:	2302      	movs	r3, #2
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f000 f888 	bl	8006040 <_lseek_r>
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	463b      	mov	r3, r7
 8005f40:	4628      	mov	r0, r5
 8005f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f46:	f000 b89f 	b.w	8006088 <_write_r>

08005f4a <__sseek>:
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f52:	f000 f875 	bl	8006040 <_lseek_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	bf15      	itete	ne
 8005f5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f66:	81a3      	strheq	r3, [r4, #12]
 8005f68:	bf18      	it	ne
 8005f6a:	81a3      	strhne	r3, [r4, #12]
 8005f6c:	bd10      	pop	{r4, pc}

08005f6e <__sclose>:
 8005f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f72:	f000 b855 	b.w	8006020 <_close_r>

08005f76 <_vsniprintf_r>:
 8005f76:	b530      	push	{r4, r5, lr}
 8005f78:	4614      	mov	r4, r2
 8005f7a:	2c00      	cmp	r4, #0
 8005f7c:	b09b      	sub	sp, #108	@ 0x6c
 8005f7e:	4605      	mov	r5, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	da05      	bge.n	8005f90 <_vsniprintf_r+0x1a>
 8005f84:	238b      	movs	r3, #139	@ 0x8b
 8005f86:	6003      	str	r3, [r0, #0]
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	b01b      	add	sp, #108	@ 0x6c
 8005f8e:	bd30      	pop	{r4, r5, pc}
 8005f90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005f94:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005f98:	bf14      	ite	ne
 8005f9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f9e:	4623      	moveq	r3, r4
 8005fa0:	9302      	str	r3, [sp, #8]
 8005fa2:	9305      	str	r3, [sp, #20]
 8005fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fa8:	9100      	str	r1, [sp, #0]
 8005faa:	9104      	str	r1, [sp, #16]
 8005fac:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005fb0:	4669      	mov	r1, sp
 8005fb2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005fb4:	f000 fa30 	bl	8006418 <_svfiprintf_r>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	bfbc      	itt	lt
 8005fbc:	238b      	movlt	r3, #139	@ 0x8b
 8005fbe:	602b      	strlt	r3, [r5, #0]
 8005fc0:	2c00      	cmp	r4, #0
 8005fc2:	d0e3      	beq.n	8005f8c <_vsniprintf_r+0x16>
 8005fc4:	9b00      	ldr	r3, [sp, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e7df      	b.n	8005f8c <_vsniprintf_r+0x16>

08005fcc <vsniprintf>:
 8005fcc:	b507      	push	{r0, r1, r2, lr}
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	460a      	mov	r2, r1
 8005fd4:	4601      	mov	r1, r0
 8005fd6:	4803      	ldr	r0, [pc, #12]	@ (8005fe4 <vsniprintf+0x18>)
 8005fd8:	6800      	ldr	r0, [r0, #0]
 8005fda:	f7ff ffcc 	bl	8005f76 <_vsniprintf_r>
 8005fde:	b003      	add	sp, #12
 8005fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fe4:	20000070 	.word	0x20000070

08005fe8 <memset>:
 8005fe8:	4402      	add	r2, r0
 8005fea:	4603      	mov	r3, r0
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d100      	bne.n	8005ff2 <memset+0xa>
 8005ff0:	4770      	bx	lr
 8005ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff6:	e7f9      	b.n	8005fec <memset+0x4>

08005ff8 <strncpy>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	3901      	subs	r1, #1
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	b132      	cbz	r2, 800600e <strncpy+0x16>
 8006000:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006004:	f803 4b01 	strb.w	r4, [r3], #1
 8006008:	3a01      	subs	r2, #1
 800600a:	2c00      	cmp	r4, #0
 800600c:	d1f7      	bne.n	8005ffe <strncpy+0x6>
 800600e:	441a      	add	r2, r3
 8006010:	2100      	movs	r1, #0
 8006012:	4293      	cmp	r3, r2
 8006014:	d100      	bne.n	8006018 <strncpy+0x20>
 8006016:	bd10      	pop	{r4, pc}
 8006018:	f803 1b01 	strb.w	r1, [r3], #1
 800601c:	e7f9      	b.n	8006012 <strncpy+0x1a>
	...

08006020 <_close_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d06      	ldr	r5, [pc, #24]	@ (800603c <_close_r+0x1c>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	f7fc fb26 	bl	800267c <_close>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_close_r+0x1a>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_close_r+0x1a>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	20002590 	.word	0x20002590

08006040 <_lseek_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d07      	ldr	r5, [pc, #28]	@ (8006060 <_lseek_r+0x20>)
 8006044:	4604      	mov	r4, r0
 8006046:	4608      	mov	r0, r1
 8006048:	4611      	mov	r1, r2
 800604a:	2200      	movs	r2, #0
 800604c:	602a      	str	r2, [r5, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f7fc fb3b 	bl	80026ca <_lseek>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_lseek_r+0x1e>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_lseek_r+0x1e>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	20002590 	.word	0x20002590

08006064 <_read_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d07      	ldr	r5, [pc, #28]	@ (8006084 <_read_r+0x20>)
 8006068:	4604      	mov	r4, r0
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	2200      	movs	r2, #0
 8006070:	602a      	str	r2, [r5, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f7fc fac9 	bl	800260a <_read>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_read_r+0x1e>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_read_r+0x1e>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20002590 	.word	0x20002590

08006088 <_write_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d07      	ldr	r5, [pc, #28]	@ (80060a8 <_write_r+0x20>)
 800608c:	4604      	mov	r4, r0
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	2200      	movs	r2, #0
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f7fc fad4 	bl	8002644 <_write>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_write_r+0x1e>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_write_r+0x1e>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20002590 	.word	0x20002590

080060ac <__errno>:
 80060ac:	4b01      	ldr	r3, [pc, #4]	@ (80060b4 <__errno+0x8>)
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000070 	.word	0x20000070

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	4d0d      	ldr	r5, [pc, #52]	@ (80060f0 <__libc_init_array+0x38>)
 80060bc:	4c0d      	ldr	r4, [pc, #52]	@ (80060f4 <__libc_init_array+0x3c>)
 80060be:	1b64      	subs	r4, r4, r5
 80060c0:	10a4      	asrs	r4, r4, #2
 80060c2:	2600      	movs	r6, #0
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	4d0b      	ldr	r5, [pc, #44]	@ (80060f8 <__libc_init_array+0x40>)
 80060ca:	4c0c      	ldr	r4, [pc, #48]	@ (80060fc <__libc_init_array+0x44>)
 80060cc:	f000 fff0 	bl	80070b0 <_init>
 80060d0:	1b64      	subs	r4, r4, r5
 80060d2:	10a4      	asrs	r4, r4, #2
 80060d4:	2600      	movs	r6, #0
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	08007504 	.word	0x08007504
 80060f4:	08007504 	.word	0x08007504
 80060f8:	08007504 	.word	0x08007504
 80060fc:	08007508 	.word	0x08007508

08006100 <__retarget_lock_init_recursive>:
 8006100:	4770      	bx	lr

08006102 <__retarget_lock_acquire_recursive>:
 8006102:	4770      	bx	lr

08006104 <__retarget_lock_release_recursive>:
 8006104:	4770      	bx	lr

08006106 <memcpy>:
 8006106:	440a      	add	r2, r1
 8006108:	4291      	cmp	r1, r2
 800610a:	f100 33ff 	add.w	r3, r0, #4294967295
 800610e:	d100      	bne.n	8006112 <memcpy+0xc>
 8006110:	4770      	bx	lr
 8006112:	b510      	push	{r4, lr}
 8006114:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800611c:	4291      	cmp	r1, r2
 800611e:	d1f9      	bne.n	8006114 <memcpy+0xe>
 8006120:	bd10      	pop	{r4, pc}
	...

08006124 <__assert_func>:
 8006124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006126:	4614      	mov	r4, r2
 8006128:	461a      	mov	r2, r3
 800612a:	4b09      	ldr	r3, [pc, #36]	@ (8006150 <__assert_func+0x2c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4605      	mov	r5, r0
 8006130:	68d8      	ldr	r0, [r3, #12]
 8006132:	b954      	cbnz	r4, 800614a <__assert_func+0x26>
 8006134:	4b07      	ldr	r3, [pc, #28]	@ (8006154 <__assert_func+0x30>)
 8006136:	461c      	mov	r4, r3
 8006138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800613c:	9100      	str	r1, [sp, #0]
 800613e:	462b      	mov	r3, r5
 8006140:	4905      	ldr	r1, [pc, #20]	@ (8006158 <__assert_func+0x34>)
 8006142:	f000 fc9f 	bl	8006a84 <fiprintf>
 8006146:	f000 fcd9 	bl	8006afc <abort>
 800614a:	4b04      	ldr	r3, [pc, #16]	@ (800615c <__assert_func+0x38>)
 800614c:	e7f4      	b.n	8006138 <__assert_func+0x14>
 800614e:	bf00      	nop
 8006150:	20000070 	.word	0x20000070
 8006154:	080074c6 	.word	0x080074c6
 8006158:	08007498 	.word	0x08007498
 800615c:	0800748b 	.word	0x0800748b

08006160 <_free_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4605      	mov	r5, r0
 8006164:	2900      	cmp	r1, #0
 8006166:	d041      	beq.n	80061ec <_free_r+0x8c>
 8006168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800616c:	1f0c      	subs	r4, r1, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfb8      	it	lt
 8006172:	18e4      	addlt	r4, r4, r3
 8006174:	f000 f8e8 	bl	8006348 <__malloc_lock>
 8006178:	4a1d      	ldr	r2, [pc, #116]	@ (80061f0 <_free_r+0x90>)
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	b933      	cbnz	r3, 800618c <_free_r+0x2c>
 800617e:	6063      	str	r3, [r4, #4]
 8006180:	6014      	str	r4, [r2, #0]
 8006182:	4628      	mov	r0, r5
 8006184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006188:	f000 b8e4 	b.w	8006354 <__malloc_unlock>
 800618c:	42a3      	cmp	r3, r4
 800618e:	d908      	bls.n	80061a2 <_free_r+0x42>
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	1821      	adds	r1, r4, r0
 8006194:	428b      	cmp	r3, r1
 8006196:	bf01      	itttt	eq
 8006198:	6819      	ldreq	r1, [r3, #0]
 800619a:	685b      	ldreq	r3, [r3, #4]
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	e7ed      	b.n	800617e <_free_r+0x1e>
 80061a2:	461a      	mov	r2, r3
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b10b      	cbz	r3, 80061ac <_free_r+0x4c>
 80061a8:	42a3      	cmp	r3, r4
 80061aa:	d9fa      	bls.n	80061a2 <_free_r+0x42>
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	1850      	adds	r0, r2, r1
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d10b      	bne.n	80061cc <_free_r+0x6c>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	4401      	add	r1, r0
 80061b8:	1850      	adds	r0, r2, r1
 80061ba:	4283      	cmp	r3, r0
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	d1e0      	bne.n	8006182 <_free_r+0x22>
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	6053      	str	r3, [r2, #4]
 80061c6:	4408      	add	r0, r1
 80061c8:	6010      	str	r0, [r2, #0]
 80061ca:	e7da      	b.n	8006182 <_free_r+0x22>
 80061cc:	d902      	bls.n	80061d4 <_free_r+0x74>
 80061ce:	230c      	movs	r3, #12
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	e7d6      	b.n	8006182 <_free_r+0x22>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	1821      	adds	r1, r4, r0
 80061d8:	428b      	cmp	r3, r1
 80061da:	bf04      	itt	eq
 80061dc:	6819      	ldreq	r1, [r3, #0]
 80061de:	685b      	ldreq	r3, [r3, #4]
 80061e0:	6063      	str	r3, [r4, #4]
 80061e2:	bf04      	itt	eq
 80061e4:	1809      	addeq	r1, r1, r0
 80061e6:	6021      	streq	r1, [r4, #0]
 80061e8:	6054      	str	r4, [r2, #4]
 80061ea:	e7ca      	b.n	8006182 <_free_r+0x22>
 80061ec:	bd38      	pop	{r3, r4, r5, pc}
 80061ee:	bf00      	nop
 80061f0:	2000259c 	.word	0x2000259c

080061f4 <malloc>:
 80061f4:	4b02      	ldr	r3, [pc, #8]	@ (8006200 <malloc+0xc>)
 80061f6:	4601      	mov	r1, r0
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	f000 b825 	b.w	8006248 <_malloc_r>
 80061fe:	bf00      	nop
 8006200:	20000070 	.word	0x20000070

08006204 <sbrk_aligned>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	4e0f      	ldr	r6, [pc, #60]	@ (8006244 <sbrk_aligned+0x40>)
 8006208:	460c      	mov	r4, r1
 800620a:	6831      	ldr	r1, [r6, #0]
 800620c:	4605      	mov	r5, r0
 800620e:	b911      	cbnz	r1, 8006216 <sbrk_aligned+0x12>
 8006210:	f000 fc64 	bl	8006adc <_sbrk_r>
 8006214:	6030      	str	r0, [r6, #0]
 8006216:	4621      	mov	r1, r4
 8006218:	4628      	mov	r0, r5
 800621a:	f000 fc5f 	bl	8006adc <_sbrk_r>
 800621e:	1c43      	adds	r3, r0, #1
 8006220:	d103      	bne.n	800622a <sbrk_aligned+0x26>
 8006222:	f04f 34ff 	mov.w	r4, #4294967295
 8006226:	4620      	mov	r0, r4
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	1cc4      	adds	r4, r0, #3
 800622c:	f024 0403 	bic.w	r4, r4, #3
 8006230:	42a0      	cmp	r0, r4
 8006232:	d0f8      	beq.n	8006226 <sbrk_aligned+0x22>
 8006234:	1a21      	subs	r1, r4, r0
 8006236:	4628      	mov	r0, r5
 8006238:	f000 fc50 	bl	8006adc <_sbrk_r>
 800623c:	3001      	adds	r0, #1
 800623e:	d1f2      	bne.n	8006226 <sbrk_aligned+0x22>
 8006240:	e7ef      	b.n	8006222 <sbrk_aligned+0x1e>
 8006242:	bf00      	nop
 8006244:	20002598 	.word	0x20002598

08006248 <_malloc_r>:
 8006248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800624c:	1ccd      	adds	r5, r1, #3
 800624e:	f025 0503 	bic.w	r5, r5, #3
 8006252:	3508      	adds	r5, #8
 8006254:	2d0c      	cmp	r5, #12
 8006256:	bf38      	it	cc
 8006258:	250c      	movcc	r5, #12
 800625a:	2d00      	cmp	r5, #0
 800625c:	4606      	mov	r6, r0
 800625e:	db01      	blt.n	8006264 <_malloc_r+0x1c>
 8006260:	42a9      	cmp	r1, r5
 8006262:	d904      	bls.n	800626e <_malloc_r+0x26>
 8006264:	230c      	movs	r3, #12
 8006266:	6033      	str	r3, [r6, #0]
 8006268:	2000      	movs	r0, #0
 800626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006344 <_malloc_r+0xfc>
 8006272:	f000 f869 	bl	8006348 <__malloc_lock>
 8006276:	f8d8 3000 	ldr.w	r3, [r8]
 800627a:	461c      	mov	r4, r3
 800627c:	bb44      	cbnz	r4, 80062d0 <_malloc_r+0x88>
 800627e:	4629      	mov	r1, r5
 8006280:	4630      	mov	r0, r6
 8006282:	f7ff ffbf 	bl	8006204 <sbrk_aligned>
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	4604      	mov	r4, r0
 800628a:	d158      	bne.n	800633e <_malloc_r+0xf6>
 800628c:	f8d8 4000 	ldr.w	r4, [r8]
 8006290:	4627      	mov	r7, r4
 8006292:	2f00      	cmp	r7, #0
 8006294:	d143      	bne.n	800631e <_malloc_r+0xd6>
 8006296:	2c00      	cmp	r4, #0
 8006298:	d04b      	beq.n	8006332 <_malloc_r+0xea>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	4639      	mov	r1, r7
 800629e:	4630      	mov	r0, r6
 80062a0:	eb04 0903 	add.w	r9, r4, r3
 80062a4:	f000 fc1a 	bl	8006adc <_sbrk_r>
 80062a8:	4581      	cmp	r9, r0
 80062aa:	d142      	bne.n	8006332 <_malloc_r+0xea>
 80062ac:	6821      	ldr	r1, [r4, #0]
 80062ae:	1a6d      	subs	r5, r5, r1
 80062b0:	4629      	mov	r1, r5
 80062b2:	4630      	mov	r0, r6
 80062b4:	f7ff ffa6 	bl	8006204 <sbrk_aligned>
 80062b8:	3001      	adds	r0, #1
 80062ba:	d03a      	beq.n	8006332 <_malloc_r+0xea>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	442b      	add	r3, r5
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	f8d8 3000 	ldr.w	r3, [r8]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	bb62      	cbnz	r2, 8006324 <_malloc_r+0xdc>
 80062ca:	f8c8 7000 	str.w	r7, [r8]
 80062ce:	e00f      	b.n	80062f0 <_malloc_r+0xa8>
 80062d0:	6822      	ldr	r2, [r4, #0]
 80062d2:	1b52      	subs	r2, r2, r5
 80062d4:	d420      	bmi.n	8006318 <_malloc_r+0xd0>
 80062d6:	2a0b      	cmp	r2, #11
 80062d8:	d917      	bls.n	800630a <_malloc_r+0xc2>
 80062da:	1961      	adds	r1, r4, r5
 80062dc:	42a3      	cmp	r3, r4
 80062de:	6025      	str	r5, [r4, #0]
 80062e0:	bf18      	it	ne
 80062e2:	6059      	strne	r1, [r3, #4]
 80062e4:	6863      	ldr	r3, [r4, #4]
 80062e6:	bf08      	it	eq
 80062e8:	f8c8 1000 	streq.w	r1, [r8]
 80062ec:	5162      	str	r2, [r4, r5]
 80062ee:	604b      	str	r3, [r1, #4]
 80062f0:	4630      	mov	r0, r6
 80062f2:	f000 f82f 	bl	8006354 <__malloc_unlock>
 80062f6:	f104 000b 	add.w	r0, r4, #11
 80062fa:	1d23      	adds	r3, r4, #4
 80062fc:	f020 0007 	bic.w	r0, r0, #7
 8006300:	1ac2      	subs	r2, r0, r3
 8006302:	bf1c      	itt	ne
 8006304:	1a1b      	subne	r3, r3, r0
 8006306:	50a3      	strne	r3, [r4, r2]
 8006308:	e7af      	b.n	800626a <_malloc_r+0x22>
 800630a:	6862      	ldr	r2, [r4, #4]
 800630c:	42a3      	cmp	r3, r4
 800630e:	bf0c      	ite	eq
 8006310:	f8c8 2000 	streq.w	r2, [r8]
 8006314:	605a      	strne	r2, [r3, #4]
 8006316:	e7eb      	b.n	80062f0 <_malloc_r+0xa8>
 8006318:	4623      	mov	r3, r4
 800631a:	6864      	ldr	r4, [r4, #4]
 800631c:	e7ae      	b.n	800627c <_malloc_r+0x34>
 800631e:	463c      	mov	r4, r7
 8006320:	687f      	ldr	r7, [r7, #4]
 8006322:	e7b6      	b.n	8006292 <_malloc_r+0x4a>
 8006324:	461a      	mov	r2, r3
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	42a3      	cmp	r3, r4
 800632a:	d1fb      	bne.n	8006324 <_malloc_r+0xdc>
 800632c:	2300      	movs	r3, #0
 800632e:	6053      	str	r3, [r2, #4]
 8006330:	e7de      	b.n	80062f0 <_malloc_r+0xa8>
 8006332:	230c      	movs	r3, #12
 8006334:	6033      	str	r3, [r6, #0]
 8006336:	4630      	mov	r0, r6
 8006338:	f000 f80c 	bl	8006354 <__malloc_unlock>
 800633c:	e794      	b.n	8006268 <_malloc_r+0x20>
 800633e:	6005      	str	r5, [r0, #0]
 8006340:	e7d6      	b.n	80062f0 <_malloc_r+0xa8>
 8006342:	bf00      	nop
 8006344:	2000259c 	.word	0x2000259c

08006348 <__malloc_lock>:
 8006348:	4801      	ldr	r0, [pc, #4]	@ (8006350 <__malloc_lock+0x8>)
 800634a:	f7ff beda 	b.w	8006102 <__retarget_lock_acquire_recursive>
 800634e:	bf00      	nop
 8006350:	20002594 	.word	0x20002594

08006354 <__malloc_unlock>:
 8006354:	4801      	ldr	r0, [pc, #4]	@ (800635c <__malloc_unlock+0x8>)
 8006356:	f7ff bed5 	b.w	8006104 <__retarget_lock_release_recursive>
 800635a:	bf00      	nop
 800635c:	20002594 	.word	0x20002594

08006360 <__ssputs_r>:
 8006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	688e      	ldr	r6, [r1, #8]
 8006366:	461f      	mov	r7, r3
 8006368:	42be      	cmp	r6, r7
 800636a:	680b      	ldr	r3, [r1, #0]
 800636c:	4682      	mov	sl, r0
 800636e:	460c      	mov	r4, r1
 8006370:	4690      	mov	r8, r2
 8006372:	d82d      	bhi.n	80063d0 <__ssputs_r+0x70>
 8006374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006378:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800637c:	d026      	beq.n	80063cc <__ssputs_r+0x6c>
 800637e:	6965      	ldr	r5, [r4, #20]
 8006380:	6909      	ldr	r1, [r1, #16]
 8006382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006386:	eba3 0901 	sub.w	r9, r3, r1
 800638a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800638e:	1c7b      	adds	r3, r7, #1
 8006390:	444b      	add	r3, r9
 8006392:	106d      	asrs	r5, r5, #1
 8006394:	429d      	cmp	r5, r3
 8006396:	bf38      	it	cc
 8006398:	461d      	movcc	r5, r3
 800639a:	0553      	lsls	r3, r2, #21
 800639c:	d527      	bpl.n	80063ee <__ssputs_r+0x8e>
 800639e:	4629      	mov	r1, r5
 80063a0:	f7ff ff52 	bl	8006248 <_malloc_r>
 80063a4:	4606      	mov	r6, r0
 80063a6:	b360      	cbz	r0, 8006402 <__ssputs_r+0xa2>
 80063a8:	6921      	ldr	r1, [r4, #16]
 80063aa:	464a      	mov	r2, r9
 80063ac:	f7ff feab 	bl	8006106 <memcpy>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	6126      	str	r6, [r4, #16]
 80063be:	6165      	str	r5, [r4, #20]
 80063c0:	444e      	add	r6, r9
 80063c2:	eba5 0509 	sub.w	r5, r5, r9
 80063c6:	6026      	str	r6, [r4, #0]
 80063c8:	60a5      	str	r5, [r4, #8]
 80063ca:	463e      	mov	r6, r7
 80063cc:	42be      	cmp	r6, r7
 80063ce:	d900      	bls.n	80063d2 <__ssputs_r+0x72>
 80063d0:	463e      	mov	r6, r7
 80063d2:	6820      	ldr	r0, [r4, #0]
 80063d4:	4632      	mov	r2, r6
 80063d6:	4641      	mov	r1, r8
 80063d8:	f000 fb66 	bl	8006aa8 <memmove>
 80063dc:	68a3      	ldr	r3, [r4, #8]
 80063de:	1b9b      	subs	r3, r3, r6
 80063e0:	60a3      	str	r3, [r4, #8]
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	4433      	add	r3, r6
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	2000      	movs	r0, #0
 80063ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ee:	462a      	mov	r2, r5
 80063f0:	f000 fb8b 	bl	8006b0a <_realloc_r>
 80063f4:	4606      	mov	r6, r0
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d1e0      	bne.n	80063bc <__ssputs_r+0x5c>
 80063fa:	6921      	ldr	r1, [r4, #16]
 80063fc:	4650      	mov	r0, sl
 80063fe:	f7ff feaf 	bl	8006160 <_free_r>
 8006402:	230c      	movs	r3, #12
 8006404:	f8ca 3000 	str.w	r3, [sl]
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	e7e9      	b.n	80063ea <__ssputs_r+0x8a>
	...

08006418 <_svfiprintf_r>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	4698      	mov	r8, r3
 800641e:	898b      	ldrh	r3, [r1, #12]
 8006420:	061b      	lsls	r3, r3, #24
 8006422:	b09d      	sub	sp, #116	@ 0x74
 8006424:	4607      	mov	r7, r0
 8006426:	460d      	mov	r5, r1
 8006428:	4614      	mov	r4, r2
 800642a:	d510      	bpl.n	800644e <_svfiprintf_r+0x36>
 800642c:	690b      	ldr	r3, [r1, #16]
 800642e:	b973      	cbnz	r3, 800644e <_svfiprintf_r+0x36>
 8006430:	2140      	movs	r1, #64	@ 0x40
 8006432:	f7ff ff09 	bl	8006248 <_malloc_r>
 8006436:	6028      	str	r0, [r5, #0]
 8006438:	6128      	str	r0, [r5, #16]
 800643a:	b930      	cbnz	r0, 800644a <_svfiprintf_r+0x32>
 800643c:	230c      	movs	r3, #12
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	b01d      	add	sp, #116	@ 0x74
 8006446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644a:	2340      	movs	r3, #64	@ 0x40
 800644c:	616b      	str	r3, [r5, #20]
 800644e:	2300      	movs	r3, #0
 8006450:	9309      	str	r3, [sp, #36]	@ 0x24
 8006452:	2320      	movs	r3, #32
 8006454:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006458:	f8cd 800c 	str.w	r8, [sp, #12]
 800645c:	2330      	movs	r3, #48	@ 0x30
 800645e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80065fc <_svfiprintf_r+0x1e4>
 8006462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006466:	f04f 0901 	mov.w	r9, #1
 800646a:	4623      	mov	r3, r4
 800646c:	469a      	mov	sl, r3
 800646e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006472:	b10a      	cbz	r2, 8006478 <_svfiprintf_r+0x60>
 8006474:	2a25      	cmp	r2, #37	@ 0x25
 8006476:	d1f9      	bne.n	800646c <_svfiprintf_r+0x54>
 8006478:	ebba 0b04 	subs.w	fp, sl, r4
 800647c:	d00b      	beq.n	8006496 <_svfiprintf_r+0x7e>
 800647e:	465b      	mov	r3, fp
 8006480:	4622      	mov	r2, r4
 8006482:	4629      	mov	r1, r5
 8006484:	4638      	mov	r0, r7
 8006486:	f7ff ff6b 	bl	8006360 <__ssputs_r>
 800648a:	3001      	adds	r0, #1
 800648c:	f000 80a7 	beq.w	80065de <_svfiprintf_r+0x1c6>
 8006490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006492:	445a      	add	r2, fp
 8006494:	9209      	str	r2, [sp, #36]	@ 0x24
 8006496:	f89a 3000 	ldrb.w	r3, [sl]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 809f 	beq.w	80065de <_svfiprintf_r+0x1c6>
 80064a0:	2300      	movs	r3, #0
 80064a2:	f04f 32ff 	mov.w	r2, #4294967295
 80064a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064aa:	f10a 0a01 	add.w	sl, sl, #1
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	9307      	str	r3, [sp, #28]
 80064b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80064b8:	4654      	mov	r4, sl
 80064ba:	2205      	movs	r2, #5
 80064bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c0:	484e      	ldr	r0, [pc, #312]	@ (80065fc <_svfiprintf_r+0x1e4>)
 80064c2:	f7f9 fe8d 	bl	80001e0 <memchr>
 80064c6:	9a04      	ldr	r2, [sp, #16]
 80064c8:	b9d8      	cbnz	r0, 8006502 <_svfiprintf_r+0xea>
 80064ca:	06d0      	lsls	r0, r2, #27
 80064cc:	bf44      	itt	mi
 80064ce:	2320      	movmi	r3, #32
 80064d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064d4:	0711      	lsls	r1, r2, #28
 80064d6:	bf44      	itt	mi
 80064d8:	232b      	movmi	r3, #43	@ 0x2b
 80064da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064de:	f89a 3000 	ldrb.w	r3, [sl]
 80064e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e4:	d015      	beq.n	8006512 <_svfiprintf_r+0xfa>
 80064e6:	9a07      	ldr	r2, [sp, #28]
 80064e8:	4654      	mov	r4, sl
 80064ea:	2000      	movs	r0, #0
 80064ec:	f04f 0c0a 	mov.w	ip, #10
 80064f0:	4621      	mov	r1, r4
 80064f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064f6:	3b30      	subs	r3, #48	@ 0x30
 80064f8:	2b09      	cmp	r3, #9
 80064fa:	d94b      	bls.n	8006594 <_svfiprintf_r+0x17c>
 80064fc:	b1b0      	cbz	r0, 800652c <_svfiprintf_r+0x114>
 80064fe:	9207      	str	r2, [sp, #28]
 8006500:	e014      	b.n	800652c <_svfiprintf_r+0x114>
 8006502:	eba0 0308 	sub.w	r3, r0, r8
 8006506:	fa09 f303 	lsl.w	r3, r9, r3
 800650a:	4313      	orrs	r3, r2
 800650c:	9304      	str	r3, [sp, #16]
 800650e:	46a2      	mov	sl, r4
 8006510:	e7d2      	b.n	80064b8 <_svfiprintf_r+0xa0>
 8006512:	9b03      	ldr	r3, [sp, #12]
 8006514:	1d19      	adds	r1, r3, #4
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	9103      	str	r1, [sp, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	bfbb      	ittet	lt
 800651e:	425b      	neglt	r3, r3
 8006520:	f042 0202 	orrlt.w	r2, r2, #2
 8006524:	9307      	strge	r3, [sp, #28]
 8006526:	9307      	strlt	r3, [sp, #28]
 8006528:	bfb8      	it	lt
 800652a:	9204      	strlt	r2, [sp, #16]
 800652c:	7823      	ldrb	r3, [r4, #0]
 800652e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006530:	d10a      	bne.n	8006548 <_svfiprintf_r+0x130>
 8006532:	7863      	ldrb	r3, [r4, #1]
 8006534:	2b2a      	cmp	r3, #42	@ 0x2a
 8006536:	d132      	bne.n	800659e <_svfiprintf_r+0x186>
 8006538:	9b03      	ldr	r3, [sp, #12]
 800653a:	1d1a      	adds	r2, r3, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	9203      	str	r2, [sp, #12]
 8006540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006544:	3402      	adds	r4, #2
 8006546:	9305      	str	r3, [sp, #20]
 8006548:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800660c <_svfiprintf_r+0x1f4>
 800654c:	7821      	ldrb	r1, [r4, #0]
 800654e:	2203      	movs	r2, #3
 8006550:	4650      	mov	r0, sl
 8006552:	f7f9 fe45 	bl	80001e0 <memchr>
 8006556:	b138      	cbz	r0, 8006568 <_svfiprintf_r+0x150>
 8006558:	9b04      	ldr	r3, [sp, #16]
 800655a:	eba0 000a 	sub.w	r0, r0, sl
 800655e:	2240      	movs	r2, #64	@ 0x40
 8006560:	4082      	lsls	r2, r0
 8006562:	4313      	orrs	r3, r2
 8006564:	3401      	adds	r4, #1
 8006566:	9304      	str	r3, [sp, #16]
 8006568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800656c:	4824      	ldr	r0, [pc, #144]	@ (8006600 <_svfiprintf_r+0x1e8>)
 800656e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006572:	2206      	movs	r2, #6
 8006574:	f7f9 fe34 	bl	80001e0 <memchr>
 8006578:	2800      	cmp	r0, #0
 800657a:	d036      	beq.n	80065ea <_svfiprintf_r+0x1d2>
 800657c:	4b21      	ldr	r3, [pc, #132]	@ (8006604 <_svfiprintf_r+0x1ec>)
 800657e:	bb1b      	cbnz	r3, 80065c8 <_svfiprintf_r+0x1b0>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	3307      	adds	r3, #7
 8006584:	f023 0307 	bic.w	r3, r3, #7
 8006588:	3308      	adds	r3, #8
 800658a:	9303      	str	r3, [sp, #12]
 800658c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800658e:	4433      	add	r3, r6
 8006590:	9309      	str	r3, [sp, #36]	@ 0x24
 8006592:	e76a      	b.n	800646a <_svfiprintf_r+0x52>
 8006594:	fb0c 3202 	mla	r2, ip, r2, r3
 8006598:	460c      	mov	r4, r1
 800659a:	2001      	movs	r0, #1
 800659c:	e7a8      	b.n	80064f0 <_svfiprintf_r+0xd8>
 800659e:	2300      	movs	r3, #0
 80065a0:	3401      	adds	r4, #1
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	4619      	mov	r1, r3
 80065a6:	f04f 0c0a 	mov.w	ip, #10
 80065aa:	4620      	mov	r0, r4
 80065ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065b0:	3a30      	subs	r2, #48	@ 0x30
 80065b2:	2a09      	cmp	r2, #9
 80065b4:	d903      	bls.n	80065be <_svfiprintf_r+0x1a6>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0c6      	beq.n	8006548 <_svfiprintf_r+0x130>
 80065ba:	9105      	str	r1, [sp, #20]
 80065bc:	e7c4      	b.n	8006548 <_svfiprintf_r+0x130>
 80065be:	fb0c 2101 	mla	r1, ip, r1, r2
 80065c2:	4604      	mov	r4, r0
 80065c4:	2301      	movs	r3, #1
 80065c6:	e7f0      	b.n	80065aa <_svfiprintf_r+0x192>
 80065c8:	ab03      	add	r3, sp, #12
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	462a      	mov	r2, r5
 80065ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006608 <_svfiprintf_r+0x1f0>)
 80065d0:	a904      	add	r1, sp, #16
 80065d2:	4638      	mov	r0, r7
 80065d4:	f3af 8000 	nop.w
 80065d8:	1c42      	adds	r2, r0, #1
 80065da:	4606      	mov	r6, r0
 80065dc:	d1d6      	bne.n	800658c <_svfiprintf_r+0x174>
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	065b      	lsls	r3, r3, #25
 80065e2:	f53f af2d 	bmi.w	8006440 <_svfiprintf_r+0x28>
 80065e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065e8:	e72c      	b.n	8006444 <_svfiprintf_r+0x2c>
 80065ea:	ab03      	add	r3, sp, #12
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	462a      	mov	r2, r5
 80065f0:	4b05      	ldr	r3, [pc, #20]	@ (8006608 <_svfiprintf_r+0x1f0>)
 80065f2:	a904      	add	r1, sp, #16
 80065f4:	4638      	mov	r0, r7
 80065f6:	f000 f879 	bl	80066ec <_printf_i>
 80065fa:	e7ed      	b.n	80065d8 <_svfiprintf_r+0x1c0>
 80065fc:	080074c7 	.word	0x080074c7
 8006600:	080074d1 	.word	0x080074d1
 8006604:	00000000 	.word	0x00000000
 8006608:	08006361 	.word	0x08006361
 800660c:	080074cd 	.word	0x080074cd

08006610 <_printf_common>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	4616      	mov	r6, r2
 8006616:	4698      	mov	r8, r3
 8006618:	688a      	ldr	r2, [r1, #8]
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006620:	4293      	cmp	r3, r2
 8006622:	bfb8      	it	lt
 8006624:	4613      	movlt	r3, r2
 8006626:	6033      	str	r3, [r6, #0]
 8006628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800662c:	4607      	mov	r7, r0
 800662e:	460c      	mov	r4, r1
 8006630:	b10a      	cbz	r2, 8006636 <_printf_common+0x26>
 8006632:	3301      	adds	r3, #1
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	0699      	lsls	r1, r3, #26
 800663a:	bf42      	ittt	mi
 800663c:	6833      	ldrmi	r3, [r6, #0]
 800663e:	3302      	addmi	r3, #2
 8006640:	6033      	strmi	r3, [r6, #0]
 8006642:	6825      	ldr	r5, [r4, #0]
 8006644:	f015 0506 	ands.w	r5, r5, #6
 8006648:	d106      	bne.n	8006658 <_printf_common+0x48>
 800664a:	f104 0a19 	add.w	sl, r4, #25
 800664e:	68e3      	ldr	r3, [r4, #12]
 8006650:	6832      	ldr	r2, [r6, #0]
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	42ab      	cmp	r3, r5
 8006656:	dc26      	bgt.n	80066a6 <_printf_common+0x96>
 8006658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800665c:	6822      	ldr	r2, [r4, #0]
 800665e:	3b00      	subs	r3, #0
 8006660:	bf18      	it	ne
 8006662:	2301      	movne	r3, #1
 8006664:	0692      	lsls	r2, r2, #26
 8006666:	d42b      	bmi.n	80066c0 <_printf_common+0xb0>
 8006668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800666c:	4641      	mov	r1, r8
 800666e:	4638      	mov	r0, r7
 8006670:	47c8      	blx	r9
 8006672:	3001      	adds	r0, #1
 8006674:	d01e      	beq.n	80066b4 <_printf_common+0xa4>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	6922      	ldr	r2, [r4, #16]
 800667a:	f003 0306 	and.w	r3, r3, #6
 800667e:	2b04      	cmp	r3, #4
 8006680:	bf02      	ittt	eq
 8006682:	68e5      	ldreq	r5, [r4, #12]
 8006684:	6833      	ldreq	r3, [r6, #0]
 8006686:	1aed      	subeq	r5, r5, r3
 8006688:	68a3      	ldr	r3, [r4, #8]
 800668a:	bf0c      	ite	eq
 800668c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006690:	2500      	movne	r5, #0
 8006692:	4293      	cmp	r3, r2
 8006694:	bfc4      	itt	gt
 8006696:	1a9b      	subgt	r3, r3, r2
 8006698:	18ed      	addgt	r5, r5, r3
 800669a:	2600      	movs	r6, #0
 800669c:	341a      	adds	r4, #26
 800669e:	42b5      	cmp	r5, r6
 80066a0:	d11a      	bne.n	80066d8 <_printf_common+0xc8>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e008      	b.n	80066b8 <_printf_common+0xa8>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4652      	mov	r2, sl
 80066aa:	4641      	mov	r1, r8
 80066ac:	4638      	mov	r0, r7
 80066ae:	47c8      	blx	r9
 80066b0:	3001      	adds	r0, #1
 80066b2:	d103      	bne.n	80066bc <_printf_common+0xac>
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	3501      	adds	r5, #1
 80066be:	e7c6      	b.n	800664e <_printf_common+0x3e>
 80066c0:	18e1      	adds	r1, r4, r3
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	2030      	movs	r0, #48	@ 0x30
 80066c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066ca:	4422      	add	r2, r4
 80066cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066d4:	3302      	adds	r3, #2
 80066d6:	e7c7      	b.n	8006668 <_printf_common+0x58>
 80066d8:	2301      	movs	r3, #1
 80066da:	4622      	mov	r2, r4
 80066dc:	4641      	mov	r1, r8
 80066de:	4638      	mov	r0, r7
 80066e0:	47c8      	blx	r9
 80066e2:	3001      	adds	r0, #1
 80066e4:	d0e6      	beq.n	80066b4 <_printf_common+0xa4>
 80066e6:	3601      	adds	r6, #1
 80066e8:	e7d9      	b.n	800669e <_printf_common+0x8e>
	...

080066ec <_printf_i>:
 80066ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	7e0f      	ldrb	r7, [r1, #24]
 80066f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066f4:	2f78      	cmp	r7, #120	@ 0x78
 80066f6:	4691      	mov	r9, r2
 80066f8:	4680      	mov	r8, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	469a      	mov	sl, r3
 80066fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006702:	d807      	bhi.n	8006714 <_printf_i+0x28>
 8006704:	2f62      	cmp	r7, #98	@ 0x62
 8006706:	d80a      	bhi.n	800671e <_printf_i+0x32>
 8006708:	2f00      	cmp	r7, #0
 800670a:	f000 80d2 	beq.w	80068b2 <_printf_i+0x1c6>
 800670e:	2f58      	cmp	r7, #88	@ 0x58
 8006710:	f000 80b9 	beq.w	8006886 <_printf_i+0x19a>
 8006714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800671c:	e03a      	b.n	8006794 <_printf_i+0xa8>
 800671e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006722:	2b15      	cmp	r3, #21
 8006724:	d8f6      	bhi.n	8006714 <_printf_i+0x28>
 8006726:	a101      	add	r1, pc, #4	@ (adr r1, 800672c <_printf_i+0x40>)
 8006728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800672c:	08006785 	.word	0x08006785
 8006730:	08006799 	.word	0x08006799
 8006734:	08006715 	.word	0x08006715
 8006738:	08006715 	.word	0x08006715
 800673c:	08006715 	.word	0x08006715
 8006740:	08006715 	.word	0x08006715
 8006744:	08006799 	.word	0x08006799
 8006748:	08006715 	.word	0x08006715
 800674c:	08006715 	.word	0x08006715
 8006750:	08006715 	.word	0x08006715
 8006754:	08006715 	.word	0x08006715
 8006758:	08006899 	.word	0x08006899
 800675c:	080067c3 	.word	0x080067c3
 8006760:	08006853 	.word	0x08006853
 8006764:	08006715 	.word	0x08006715
 8006768:	08006715 	.word	0x08006715
 800676c:	080068bb 	.word	0x080068bb
 8006770:	08006715 	.word	0x08006715
 8006774:	080067c3 	.word	0x080067c3
 8006778:	08006715 	.word	0x08006715
 800677c:	08006715 	.word	0x08006715
 8006780:	0800685b 	.word	0x0800685b
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6032      	str	r2, [r6, #0]
 800678c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006794:	2301      	movs	r3, #1
 8006796:	e09d      	b.n	80068d4 <_printf_i+0x1e8>
 8006798:	6833      	ldr	r3, [r6, #0]
 800679a:	6820      	ldr	r0, [r4, #0]
 800679c:	1d19      	adds	r1, r3, #4
 800679e:	6031      	str	r1, [r6, #0]
 80067a0:	0606      	lsls	r6, r0, #24
 80067a2:	d501      	bpl.n	80067a8 <_printf_i+0xbc>
 80067a4:	681d      	ldr	r5, [r3, #0]
 80067a6:	e003      	b.n	80067b0 <_printf_i+0xc4>
 80067a8:	0645      	lsls	r5, r0, #25
 80067aa:	d5fb      	bpl.n	80067a4 <_printf_i+0xb8>
 80067ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	da03      	bge.n	80067bc <_printf_i+0xd0>
 80067b4:	232d      	movs	r3, #45	@ 0x2d
 80067b6:	426d      	negs	r5, r5
 80067b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067bc:	4859      	ldr	r0, [pc, #356]	@ (8006924 <_printf_i+0x238>)
 80067be:	230a      	movs	r3, #10
 80067c0:	e011      	b.n	80067e6 <_printf_i+0xfa>
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	6833      	ldr	r3, [r6, #0]
 80067c6:	0608      	lsls	r0, r1, #24
 80067c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80067cc:	d402      	bmi.n	80067d4 <_printf_i+0xe8>
 80067ce:	0649      	lsls	r1, r1, #25
 80067d0:	bf48      	it	mi
 80067d2:	b2ad      	uxthmi	r5, r5
 80067d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80067d6:	4853      	ldr	r0, [pc, #332]	@ (8006924 <_printf_i+0x238>)
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	bf14      	ite	ne
 80067dc:	230a      	movne	r3, #10
 80067de:	2308      	moveq	r3, #8
 80067e0:	2100      	movs	r1, #0
 80067e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067e6:	6866      	ldr	r6, [r4, #4]
 80067e8:	60a6      	str	r6, [r4, #8]
 80067ea:	2e00      	cmp	r6, #0
 80067ec:	bfa2      	ittt	ge
 80067ee:	6821      	ldrge	r1, [r4, #0]
 80067f0:	f021 0104 	bicge.w	r1, r1, #4
 80067f4:	6021      	strge	r1, [r4, #0]
 80067f6:	b90d      	cbnz	r5, 80067fc <_printf_i+0x110>
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	d04b      	beq.n	8006894 <_printf_i+0x1a8>
 80067fc:	4616      	mov	r6, r2
 80067fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006802:	fb03 5711 	mls	r7, r3, r1, r5
 8006806:	5dc7      	ldrb	r7, [r0, r7]
 8006808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800680c:	462f      	mov	r7, r5
 800680e:	42bb      	cmp	r3, r7
 8006810:	460d      	mov	r5, r1
 8006812:	d9f4      	bls.n	80067fe <_printf_i+0x112>
 8006814:	2b08      	cmp	r3, #8
 8006816:	d10b      	bne.n	8006830 <_printf_i+0x144>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	07df      	lsls	r7, r3, #31
 800681c:	d508      	bpl.n	8006830 <_printf_i+0x144>
 800681e:	6923      	ldr	r3, [r4, #16]
 8006820:	6861      	ldr	r1, [r4, #4]
 8006822:	4299      	cmp	r1, r3
 8006824:	bfde      	ittt	le
 8006826:	2330      	movle	r3, #48	@ 0x30
 8006828:	f806 3c01 	strble.w	r3, [r6, #-1]
 800682c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006830:	1b92      	subs	r2, r2, r6
 8006832:	6122      	str	r2, [r4, #16]
 8006834:	f8cd a000 	str.w	sl, [sp]
 8006838:	464b      	mov	r3, r9
 800683a:	aa03      	add	r2, sp, #12
 800683c:	4621      	mov	r1, r4
 800683e:	4640      	mov	r0, r8
 8006840:	f7ff fee6 	bl	8006610 <_printf_common>
 8006844:	3001      	adds	r0, #1
 8006846:	d14a      	bne.n	80068de <_printf_i+0x1f2>
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	b004      	add	sp, #16
 800684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	f043 0320 	orr.w	r3, r3, #32
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	4833      	ldr	r0, [pc, #204]	@ (8006928 <_printf_i+0x23c>)
 800685c:	2778      	movs	r7, #120	@ 0x78
 800685e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	6831      	ldr	r1, [r6, #0]
 8006866:	061f      	lsls	r7, r3, #24
 8006868:	f851 5b04 	ldr.w	r5, [r1], #4
 800686c:	d402      	bmi.n	8006874 <_printf_i+0x188>
 800686e:	065f      	lsls	r7, r3, #25
 8006870:	bf48      	it	mi
 8006872:	b2ad      	uxthmi	r5, r5
 8006874:	6031      	str	r1, [r6, #0]
 8006876:	07d9      	lsls	r1, r3, #31
 8006878:	bf44      	itt	mi
 800687a:	f043 0320 	orrmi.w	r3, r3, #32
 800687e:	6023      	strmi	r3, [r4, #0]
 8006880:	b11d      	cbz	r5, 800688a <_printf_i+0x19e>
 8006882:	2310      	movs	r3, #16
 8006884:	e7ac      	b.n	80067e0 <_printf_i+0xf4>
 8006886:	4827      	ldr	r0, [pc, #156]	@ (8006924 <_printf_i+0x238>)
 8006888:	e7e9      	b.n	800685e <_printf_i+0x172>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	f023 0320 	bic.w	r3, r3, #32
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	e7f6      	b.n	8006882 <_printf_i+0x196>
 8006894:	4616      	mov	r6, r2
 8006896:	e7bd      	b.n	8006814 <_printf_i+0x128>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	6825      	ldr	r5, [r4, #0]
 800689c:	6961      	ldr	r1, [r4, #20]
 800689e:	1d18      	adds	r0, r3, #4
 80068a0:	6030      	str	r0, [r6, #0]
 80068a2:	062e      	lsls	r6, r5, #24
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	d501      	bpl.n	80068ac <_printf_i+0x1c0>
 80068a8:	6019      	str	r1, [r3, #0]
 80068aa:	e002      	b.n	80068b2 <_printf_i+0x1c6>
 80068ac:	0668      	lsls	r0, r5, #25
 80068ae:	d5fb      	bpl.n	80068a8 <_printf_i+0x1bc>
 80068b0:	8019      	strh	r1, [r3, #0]
 80068b2:	2300      	movs	r3, #0
 80068b4:	6123      	str	r3, [r4, #16]
 80068b6:	4616      	mov	r6, r2
 80068b8:	e7bc      	b.n	8006834 <_printf_i+0x148>
 80068ba:	6833      	ldr	r3, [r6, #0]
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	6032      	str	r2, [r6, #0]
 80068c0:	681e      	ldr	r6, [r3, #0]
 80068c2:	6862      	ldr	r2, [r4, #4]
 80068c4:	2100      	movs	r1, #0
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7f9 fc8a 	bl	80001e0 <memchr>
 80068cc:	b108      	cbz	r0, 80068d2 <_printf_i+0x1e6>
 80068ce:	1b80      	subs	r0, r0, r6
 80068d0:	6060      	str	r0, [r4, #4]
 80068d2:	6863      	ldr	r3, [r4, #4]
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	2300      	movs	r3, #0
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068dc:	e7aa      	b.n	8006834 <_printf_i+0x148>
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	4632      	mov	r2, r6
 80068e2:	4649      	mov	r1, r9
 80068e4:	4640      	mov	r0, r8
 80068e6:	47d0      	blx	sl
 80068e8:	3001      	adds	r0, #1
 80068ea:	d0ad      	beq.n	8006848 <_printf_i+0x15c>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	079b      	lsls	r3, r3, #30
 80068f0:	d413      	bmi.n	800691a <_printf_i+0x22e>
 80068f2:	68e0      	ldr	r0, [r4, #12]
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	4298      	cmp	r0, r3
 80068f8:	bfb8      	it	lt
 80068fa:	4618      	movlt	r0, r3
 80068fc:	e7a6      	b.n	800684c <_printf_i+0x160>
 80068fe:	2301      	movs	r3, #1
 8006900:	4632      	mov	r2, r6
 8006902:	4649      	mov	r1, r9
 8006904:	4640      	mov	r0, r8
 8006906:	47d0      	blx	sl
 8006908:	3001      	adds	r0, #1
 800690a:	d09d      	beq.n	8006848 <_printf_i+0x15c>
 800690c:	3501      	adds	r5, #1
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	9903      	ldr	r1, [sp, #12]
 8006912:	1a5b      	subs	r3, r3, r1
 8006914:	42ab      	cmp	r3, r5
 8006916:	dcf2      	bgt.n	80068fe <_printf_i+0x212>
 8006918:	e7eb      	b.n	80068f2 <_printf_i+0x206>
 800691a:	2500      	movs	r5, #0
 800691c:	f104 0619 	add.w	r6, r4, #25
 8006920:	e7f5      	b.n	800690e <_printf_i+0x222>
 8006922:	bf00      	nop
 8006924:	080074d8 	.word	0x080074d8
 8006928:	080074e9 	.word	0x080074e9

0800692c <__sflush_r>:
 800692c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006934:	0716      	lsls	r6, r2, #28
 8006936:	4605      	mov	r5, r0
 8006938:	460c      	mov	r4, r1
 800693a:	d454      	bmi.n	80069e6 <__sflush_r+0xba>
 800693c:	684b      	ldr	r3, [r1, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	dc02      	bgt.n	8006948 <__sflush_r+0x1c>
 8006942:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd48      	ble.n	80069da <__sflush_r+0xae>
 8006948:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800694a:	2e00      	cmp	r6, #0
 800694c:	d045      	beq.n	80069da <__sflush_r+0xae>
 800694e:	2300      	movs	r3, #0
 8006950:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006954:	682f      	ldr	r7, [r5, #0]
 8006956:	6a21      	ldr	r1, [r4, #32]
 8006958:	602b      	str	r3, [r5, #0]
 800695a:	d030      	beq.n	80069be <__sflush_r+0x92>
 800695c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	0759      	lsls	r1, r3, #29
 8006962:	d505      	bpl.n	8006970 <__sflush_r+0x44>
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800696a:	b10b      	cbz	r3, 8006970 <__sflush_r+0x44>
 800696c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	2300      	movs	r3, #0
 8006972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006974:	6a21      	ldr	r1, [r4, #32]
 8006976:	4628      	mov	r0, r5
 8006978:	47b0      	blx	r6
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	d106      	bne.n	800698e <__sflush_r+0x62>
 8006980:	6829      	ldr	r1, [r5, #0]
 8006982:	291d      	cmp	r1, #29
 8006984:	d82b      	bhi.n	80069de <__sflush_r+0xb2>
 8006986:	4a2a      	ldr	r2, [pc, #168]	@ (8006a30 <__sflush_r+0x104>)
 8006988:	410a      	asrs	r2, r1
 800698a:	07d6      	lsls	r6, r2, #31
 800698c:	d427      	bmi.n	80069de <__sflush_r+0xb2>
 800698e:	2200      	movs	r2, #0
 8006990:	6062      	str	r2, [r4, #4]
 8006992:	04d9      	lsls	r1, r3, #19
 8006994:	6922      	ldr	r2, [r4, #16]
 8006996:	6022      	str	r2, [r4, #0]
 8006998:	d504      	bpl.n	80069a4 <__sflush_r+0x78>
 800699a:	1c42      	adds	r2, r0, #1
 800699c:	d101      	bne.n	80069a2 <__sflush_r+0x76>
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	b903      	cbnz	r3, 80069a4 <__sflush_r+0x78>
 80069a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80069a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069a6:	602f      	str	r7, [r5, #0]
 80069a8:	b1b9      	cbz	r1, 80069da <__sflush_r+0xae>
 80069aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069ae:	4299      	cmp	r1, r3
 80069b0:	d002      	beq.n	80069b8 <__sflush_r+0x8c>
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7ff fbd4 	bl	8006160 <_free_r>
 80069b8:	2300      	movs	r3, #0
 80069ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80069bc:	e00d      	b.n	80069da <__sflush_r+0xae>
 80069be:	2301      	movs	r3, #1
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b0      	blx	r6
 80069c4:	4602      	mov	r2, r0
 80069c6:	1c50      	adds	r0, r2, #1
 80069c8:	d1c9      	bne.n	800695e <__sflush_r+0x32>
 80069ca:	682b      	ldr	r3, [r5, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0c6      	beq.n	800695e <__sflush_r+0x32>
 80069d0:	2b1d      	cmp	r3, #29
 80069d2:	d001      	beq.n	80069d8 <__sflush_r+0xac>
 80069d4:	2b16      	cmp	r3, #22
 80069d6:	d11e      	bne.n	8006a16 <__sflush_r+0xea>
 80069d8:	602f      	str	r7, [r5, #0]
 80069da:	2000      	movs	r0, #0
 80069dc:	e022      	b.n	8006a24 <__sflush_r+0xf8>
 80069de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069e2:	b21b      	sxth	r3, r3
 80069e4:	e01b      	b.n	8006a1e <__sflush_r+0xf2>
 80069e6:	690f      	ldr	r7, [r1, #16]
 80069e8:	2f00      	cmp	r7, #0
 80069ea:	d0f6      	beq.n	80069da <__sflush_r+0xae>
 80069ec:	0793      	lsls	r3, r2, #30
 80069ee:	680e      	ldr	r6, [r1, #0]
 80069f0:	bf08      	it	eq
 80069f2:	694b      	ldreq	r3, [r1, #20]
 80069f4:	600f      	str	r7, [r1, #0]
 80069f6:	bf18      	it	ne
 80069f8:	2300      	movne	r3, #0
 80069fa:	eba6 0807 	sub.w	r8, r6, r7
 80069fe:	608b      	str	r3, [r1, #8]
 8006a00:	f1b8 0f00 	cmp.w	r8, #0
 8006a04:	dde9      	ble.n	80069da <__sflush_r+0xae>
 8006a06:	6a21      	ldr	r1, [r4, #32]
 8006a08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a0a:	4643      	mov	r3, r8
 8006a0c:	463a      	mov	r2, r7
 8006a0e:	4628      	mov	r0, r5
 8006a10:	47b0      	blx	r6
 8006a12:	2800      	cmp	r0, #0
 8006a14:	dc08      	bgt.n	8006a28 <__sflush_r+0xfc>
 8006a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a28:	4407      	add	r7, r0
 8006a2a:	eba8 0800 	sub.w	r8, r8, r0
 8006a2e:	e7e7      	b.n	8006a00 <__sflush_r+0xd4>
 8006a30:	dfbffffe 	.word	0xdfbffffe

08006a34 <_fflush_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	690b      	ldr	r3, [r1, #16]
 8006a38:	4605      	mov	r5, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	b913      	cbnz	r3, 8006a44 <_fflush_r+0x10>
 8006a3e:	2500      	movs	r5, #0
 8006a40:	4628      	mov	r0, r5
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	b118      	cbz	r0, 8006a4e <_fflush_r+0x1a>
 8006a46:	6a03      	ldr	r3, [r0, #32]
 8006a48:	b90b      	cbnz	r3, 8006a4e <_fflush_r+0x1a>
 8006a4a:	f7ff fa1b 	bl	8005e84 <__sinit>
 8006a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0f3      	beq.n	8006a3e <_fflush_r+0xa>
 8006a56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a58:	07d0      	lsls	r0, r2, #31
 8006a5a:	d404      	bmi.n	8006a66 <_fflush_r+0x32>
 8006a5c:	0599      	lsls	r1, r3, #22
 8006a5e:	d402      	bmi.n	8006a66 <_fflush_r+0x32>
 8006a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a62:	f7ff fb4e 	bl	8006102 <__retarget_lock_acquire_recursive>
 8006a66:	4628      	mov	r0, r5
 8006a68:	4621      	mov	r1, r4
 8006a6a:	f7ff ff5f 	bl	800692c <__sflush_r>
 8006a6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a70:	07da      	lsls	r2, r3, #31
 8006a72:	4605      	mov	r5, r0
 8006a74:	d4e4      	bmi.n	8006a40 <_fflush_r+0xc>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	059b      	lsls	r3, r3, #22
 8006a7a:	d4e1      	bmi.n	8006a40 <_fflush_r+0xc>
 8006a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a7e:	f7ff fb41 	bl	8006104 <__retarget_lock_release_recursive>
 8006a82:	e7dd      	b.n	8006a40 <_fflush_r+0xc>

08006a84 <fiprintf>:
 8006a84:	b40e      	push	{r1, r2, r3}
 8006a86:	b503      	push	{r0, r1, lr}
 8006a88:	4601      	mov	r1, r0
 8006a8a:	ab03      	add	r3, sp, #12
 8006a8c:	4805      	ldr	r0, [pc, #20]	@ (8006aa4 <fiprintf+0x20>)
 8006a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a92:	6800      	ldr	r0, [r0, #0]
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	f000 f88f 	bl	8006bb8 <_vfiprintf_r>
 8006a9a:	b002      	add	sp, #8
 8006a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa0:	b003      	add	sp, #12
 8006aa2:	4770      	bx	lr
 8006aa4:	20000070 	.word	0x20000070

08006aa8 <memmove>:
 8006aa8:	4288      	cmp	r0, r1
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	eb01 0402 	add.w	r4, r1, r2
 8006ab0:	d902      	bls.n	8006ab8 <memmove+0x10>
 8006ab2:	4284      	cmp	r4, r0
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	d807      	bhi.n	8006ac8 <memmove+0x20>
 8006ab8:	1e43      	subs	r3, r0, #1
 8006aba:	42a1      	cmp	r1, r4
 8006abc:	d008      	beq.n	8006ad0 <memmove+0x28>
 8006abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ac6:	e7f8      	b.n	8006aba <memmove+0x12>
 8006ac8:	4402      	add	r2, r0
 8006aca:	4601      	mov	r1, r0
 8006acc:	428a      	cmp	r2, r1
 8006ace:	d100      	bne.n	8006ad2 <memmove+0x2a>
 8006ad0:	bd10      	pop	{r4, pc}
 8006ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ada:	e7f7      	b.n	8006acc <memmove+0x24>

08006adc <_sbrk_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d06      	ldr	r5, [pc, #24]	@ (8006af8 <_sbrk_r+0x1c>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	602b      	str	r3, [r5, #0]
 8006ae8:	f7fb fdfc 	bl	80026e4 <_sbrk>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_sbrk_r+0x1a>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_sbrk_r+0x1a>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20002590 	.word	0x20002590

08006afc <abort>:
 8006afc:	b508      	push	{r3, lr}
 8006afe:	2006      	movs	r0, #6
 8006b00:	f000 fa2e 	bl	8006f60 <raise>
 8006b04:	2001      	movs	r0, #1
 8006b06:	f7fb fd75 	bl	80025f4 <_exit>

08006b0a <_realloc_r>:
 8006b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4615      	mov	r5, r2
 8006b12:	460c      	mov	r4, r1
 8006b14:	b921      	cbnz	r1, 8006b20 <_realloc_r+0x16>
 8006b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	f7ff bb94 	b.w	8006248 <_malloc_r>
 8006b20:	b92a      	cbnz	r2, 8006b2e <_realloc_r+0x24>
 8006b22:	f7ff fb1d 	bl	8006160 <_free_r>
 8006b26:	2400      	movs	r4, #0
 8006b28:	4620      	mov	r0, r4
 8006b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2e:	f000 fa33 	bl	8006f98 <_malloc_usable_size_r>
 8006b32:	4285      	cmp	r5, r0
 8006b34:	4606      	mov	r6, r0
 8006b36:	d802      	bhi.n	8006b3e <_realloc_r+0x34>
 8006b38:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b3c:	d8f4      	bhi.n	8006b28 <_realloc_r+0x1e>
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4640      	mov	r0, r8
 8006b42:	f7ff fb81 	bl	8006248 <_malloc_r>
 8006b46:	4607      	mov	r7, r0
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d0ec      	beq.n	8006b26 <_realloc_r+0x1c>
 8006b4c:	42b5      	cmp	r5, r6
 8006b4e:	462a      	mov	r2, r5
 8006b50:	4621      	mov	r1, r4
 8006b52:	bf28      	it	cs
 8006b54:	4632      	movcs	r2, r6
 8006b56:	f7ff fad6 	bl	8006106 <memcpy>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	f7ff faff 	bl	8006160 <_free_r>
 8006b62:	463c      	mov	r4, r7
 8006b64:	e7e0      	b.n	8006b28 <_realloc_r+0x1e>

08006b66 <__sfputc_r>:
 8006b66:	6893      	ldr	r3, [r2, #8]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	b410      	push	{r4}
 8006b6e:	6093      	str	r3, [r2, #8]
 8006b70:	da08      	bge.n	8006b84 <__sfputc_r+0x1e>
 8006b72:	6994      	ldr	r4, [r2, #24]
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	db01      	blt.n	8006b7c <__sfputc_r+0x16>
 8006b78:	290a      	cmp	r1, #10
 8006b7a:	d103      	bne.n	8006b84 <__sfputc_r+0x1e>
 8006b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b80:	f000 b932 	b.w	8006de8 <__swbuf_r>
 8006b84:	6813      	ldr	r3, [r2, #0]
 8006b86:	1c58      	adds	r0, r3, #1
 8006b88:	6010      	str	r0, [r2, #0]
 8006b8a:	7019      	strb	r1, [r3, #0]
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <__sfputs_r>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	4606      	mov	r6, r0
 8006b98:	460f      	mov	r7, r1
 8006b9a:	4614      	mov	r4, r2
 8006b9c:	18d5      	adds	r5, r2, r3
 8006b9e:	42ac      	cmp	r4, r5
 8006ba0:	d101      	bne.n	8006ba6 <__sfputs_r+0x12>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e007      	b.n	8006bb6 <__sfputs_r+0x22>
 8006ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006baa:	463a      	mov	r2, r7
 8006bac:	4630      	mov	r0, r6
 8006bae:	f7ff ffda 	bl	8006b66 <__sfputc_r>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	d1f3      	bne.n	8006b9e <__sfputs_r+0xa>
 8006bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bb8 <_vfiprintf_r>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	460d      	mov	r5, r1
 8006bbe:	b09d      	sub	sp, #116	@ 0x74
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	4698      	mov	r8, r3
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	b118      	cbz	r0, 8006bd0 <_vfiprintf_r+0x18>
 8006bc8:	6a03      	ldr	r3, [r0, #32]
 8006bca:	b90b      	cbnz	r3, 8006bd0 <_vfiprintf_r+0x18>
 8006bcc:	f7ff f95a 	bl	8005e84 <__sinit>
 8006bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bd2:	07d9      	lsls	r1, r3, #31
 8006bd4:	d405      	bmi.n	8006be2 <_vfiprintf_r+0x2a>
 8006bd6:	89ab      	ldrh	r3, [r5, #12]
 8006bd8:	059a      	lsls	r2, r3, #22
 8006bda:	d402      	bmi.n	8006be2 <_vfiprintf_r+0x2a>
 8006bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bde:	f7ff fa90 	bl	8006102 <__retarget_lock_acquire_recursive>
 8006be2:	89ab      	ldrh	r3, [r5, #12]
 8006be4:	071b      	lsls	r3, r3, #28
 8006be6:	d501      	bpl.n	8006bec <_vfiprintf_r+0x34>
 8006be8:	692b      	ldr	r3, [r5, #16]
 8006bea:	b99b      	cbnz	r3, 8006c14 <_vfiprintf_r+0x5c>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f000 f938 	bl	8006e64 <__swsetup_r>
 8006bf4:	b170      	cbz	r0, 8006c14 <_vfiprintf_r+0x5c>
 8006bf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bf8:	07dc      	lsls	r4, r3, #31
 8006bfa:	d504      	bpl.n	8006c06 <_vfiprintf_r+0x4e>
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	b01d      	add	sp, #116	@ 0x74
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	89ab      	ldrh	r3, [r5, #12]
 8006c08:	0598      	lsls	r0, r3, #22
 8006c0a:	d4f7      	bmi.n	8006bfc <_vfiprintf_r+0x44>
 8006c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c0e:	f7ff fa79 	bl	8006104 <__retarget_lock_release_recursive>
 8006c12:	e7f3      	b.n	8006bfc <_vfiprintf_r+0x44>
 8006c14:	2300      	movs	r3, #0
 8006c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c18:	2320      	movs	r3, #32
 8006c1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c22:	2330      	movs	r3, #48	@ 0x30
 8006c24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006dd4 <_vfiprintf_r+0x21c>
 8006c28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c2c:	f04f 0901 	mov.w	r9, #1
 8006c30:	4623      	mov	r3, r4
 8006c32:	469a      	mov	sl, r3
 8006c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c38:	b10a      	cbz	r2, 8006c3e <_vfiprintf_r+0x86>
 8006c3a:	2a25      	cmp	r2, #37	@ 0x25
 8006c3c:	d1f9      	bne.n	8006c32 <_vfiprintf_r+0x7a>
 8006c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c42:	d00b      	beq.n	8006c5c <_vfiprintf_r+0xa4>
 8006c44:	465b      	mov	r3, fp
 8006c46:	4622      	mov	r2, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7ff ffa2 	bl	8006b94 <__sfputs_r>
 8006c50:	3001      	adds	r0, #1
 8006c52:	f000 80a7 	beq.w	8006da4 <_vfiprintf_r+0x1ec>
 8006c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c58:	445a      	add	r2, fp
 8006c5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 809f 	beq.w	8006da4 <_vfiprintf_r+0x1ec>
 8006c66:	2300      	movs	r3, #0
 8006c68:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c70:	f10a 0a01 	add.w	sl, sl, #1
 8006c74:	9304      	str	r3, [sp, #16]
 8006c76:	9307      	str	r3, [sp, #28]
 8006c78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c7e:	4654      	mov	r4, sl
 8006c80:	2205      	movs	r2, #5
 8006c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c86:	4853      	ldr	r0, [pc, #332]	@ (8006dd4 <_vfiprintf_r+0x21c>)
 8006c88:	f7f9 faaa 	bl	80001e0 <memchr>
 8006c8c:	9a04      	ldr	r2, [sp, #16]
 8006c8e:	b9d8      	cbnz	r0, 8006cc8 <_vfiprintf_r+0x110>
 8006c90:	06d1      	lsls	r1, r2, #27
 8006c92:	bf44      	itt	mi
 8006c94:	2320      	movmi	r3, #32
 8006c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c9a:	0713      	lsls	r3, r2, #28
 8006c9c:	bf44      	itt	mi
 8006c9e:	232b      	movmi	r3, #43	@ 0x2b
 8006ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006caa:	d015      	beq.n	8006cd8 <_vfiprintf_r+0x120>
 8006cac:	9a07      	ldr	r2, [sp, #28]
 8006cae:	4654      	mov	r4, sl
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	f04f 0c0a 	mov.w	ip, #10
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cbc:	3b30      	subs	r3, #48	@ 0x30
 8006cbe:	2b09      	cmp	r3, #9
 8006cc0:	d94b      	bls.n	8006d5a <_vfiprintf_r+0x1a2>
 8006cc2:	b1b0      	cbz	r0, 8006cf2 <_vfiprintf_r+0x13a>
 8006cc4:	9207      	str	r2, [sp, #28]
 8006cc6:	e014      	b.n	8006cf2 <_vfiprintf_r+0x13a>
 8006cc8:	eba0 0308 	sub.w	r3, r0, r8
 8006ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	46a2      	mov	sl, r4
 8006cd6:	e7d2      	b.n	8006c7e <_vfiprintf_r+0xc6>
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	1d19      	adds	r1, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	9103      	str	r1, [sp, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bfbb      	ittet	lt
 8006ce4:	425b      	neglt	r3, r3
 8006ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cea:	9307      	strge	r3, [sp, #28]
 8006cec:	9307      	strlt	r3, [sp, #28]
 8006cee:	bfb8      	it	lt
 8006cf0:	9204      	strlt	r2, [sp, #16]
 8006cf2:	7823      	ldrb	r3, [r4, #0]
 8006cf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cf6:	d10a      	bne.n	8006d0e <_vfiprintf_r+0x156>
 8006cf8:	7863      	ldrb	r3, [r4, #1]
 8006cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cfc:	d132      	bne.n	8006d64 <_vfiprintf_r+0x1ac>
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	1d1a      	adds	r2, r3, #4
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	9203      	str	r2, [sp, #12]
 8006d06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d0a:	3402      	adds	r4, #2
 8006d0c:	9305      	str	r3, [sp, #20]
 8006d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006de4 <_vfiprintf_r+0x22c>
 8006d12:	7821      	ldrb	r1, [r4, #0]
 8006d14:	2203      	movs	r2, #3
 8006d16:	4650      	mov	r0, sl
 8006d18:	f7f9 fa62 	bl	80001e0 <memchr>
 8006d1c:	b138      	cbz	r0, 8006d2e <_vfiprintf_r+0x176>
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	eba0 000a 	sub.w	r0, r0, sl
 8006d24:	2240      	movs	r2, #64	@ 0x40
 8006d26:	4082      	lsls	r2, r0
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	3401      	adds	r4, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	4829      	ldr	r0, [pc, #164]	@ (8006dd8 <_vfiprintf_r+0x220>)
 8006d34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d38:	2206      	movs	r2, #6
 8006d3a:	f7f9 fa51 	bl	80001e0 <memchr>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d03f      	beq.n	8006dc2 <_vfiprintf_r+0x20a>
 8006d42:	4b26      	ldr	r3, [pc, #152]	@ (8006ddc <_vfiprintf_r+0x224>)
 8006d44:	bb1b      	cbnz	r3, 8006d8e <_vfiprintf_r+0x1d6>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	3307      	adds	r3, #7
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	3308      	adds	r3, #8
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d54:	443b      	add	r3, r7
 8006d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d58:	e76a      	b.n	8006c30 <_vfiprintf_r+0x78>
 8006d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d5e:	460c      	mov	r4, r1
 8006d60:	2001      	movs	r0, #1
 8006d62:	e7a8      	b.n	8006cb6 <_vfiprintf_r+0xfe>
 8006d64:	2300      	movs	r3, #0
 8006d66:	3401      	adds	r4, #1
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f04f 0c0a 	mov.w	ip, #10
 8006d70:	4620      	mov	r0, r4
 8006d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d76:	3a30      	subs	r2, #48	@ 0x30
 8006d78:	2a09      	cmp	r2, #9
 8006d7a:	d903      	bls.n	8006d84 <_vfiprintf_r+0x1cc>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0c6      	beq.n	8006d0e <_vfiprintf_r+0x156>
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	e7c4      	b.n	8006d0e <_vfiprintf_r+0x156>
 8006d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d88:	4604      	mov	r4, r0
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e7f0      	b.n	8006d70 <_vfiprintf_r+0x1b8>
 8006d8e:	ab03      	add	r3, sp, #12
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	462a      	mov	r2, r5
 8006d94:	4b12      	ldr	r3, [pc, #72]	@ (8006de0 <_vfiprintf_r+0x228>)
 8006d96:	a904      	add	r1, sp, #16
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f3af 8000 	nop.w
 8006d9e:	4607      	mov	r7, r0
 8006da0:	1c78      	adds	r0, r7, #1
 8006da2:	d1d6      	bne.n	8006d52 <_vfiprintf_r+0x19a>
 8006da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006da6:	07d9      	lsls	r1, r3, #31
 8006da8:	d405      	bmi.n	8006db6 <_vfiprintf_r+0x1fe>
 8006daa:	89ab      	ldrh	r3, [r5, #12]
 8006dac:	059a      	lsls	r2, r3, #22
 8006dae:	d402      	bmi.n	8006db6 <_vfiprintf_r+0x1fe>
 8006db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006db2:	f7ff f9a7 	bl	8006104 <__retarget_lock_release_recursive>
 8006db6:	89ab      	ldrh	r3, [r5, #12]
 8006db8:	065b      	lsls	r3, r3, #25
 8006dba:	f53f af1f 	bmi.w	8006bfc <_vfiprintf_r+0x44>
 8006dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dc0:	e71e      	b.n	8006c00 <_vfiprintf_r+0x48>
 8006dc2:	ab03      	add	r3, sp, #12
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4b05      	ldr	r3, [pc, #20]	@ (8006de0 <_vfiprintf_r+0x228>)
 8006dca:	a904      	add	r1, sp, #16
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f7ff fc8d 	bl	80066ec <_printf_i>
 8006dd2:	e7e4      	b.n	8006d9e <_vfiprintf_r+0x1e6>
 8006dd4:	080074c7 	.word	0x080074c7
 8006dd8:	080074d1 	.word	0x080074d1
 8006ddc:	00000000 	.word	0x00000000
 8006de0:	08006b95 	.word	0x08006b95
 8006de4:	080074cd 	.word	0x080074cd

08006de8 <__swbuf_r>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	460e      	mov	r6, r1
 8006dec:	4614      	mov	r4, r2
 8006dee:	4605      	mov	r5, r0
 8006df0:	b118      	cbz	r0, 8006dfa <__swbuf_r+0x12>
 8006df2:	6a03      	ldr	r3, [r0, #32]
 8006df4:	b90b      	cbnz	r3, 8006dfa <__swbuf_r+0x12>
 8006df6:	f7ff f845 	bl	8005e84 <__sinit>
 8006dfa:	69a3      	ldr	r3, [r4, #24]
 8006dfc:	60a3      	str	r3, [r4, #8]
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	071a      	lsls	r2, r3, #28
 8006e02:	d501      	bpl.n	8006e08 <__swbuf_r+0x20>
 8006e04:	6923      	ldr	r3, [r4, #16]
 8006e06:	b943      	cbnz	r3, 8006e1a <__swbuf_r+0x32>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 f82a 	bl	8006e64 <__swsetup_r>
 8006e10:	b118      	cbz	r0, 8006e1a <__swbuf_r+0x32>
 8006e12:	f04f 37ff 	mov.w	r7, #4294967295
 8006e16:	4638      	mov	r0, r7
 8006e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	6922      	ldr	r2, [r4, #16]
 8006e1e:	1a98      	subs	r0, r3, r2
 8006e20:	6963      	ldr	r3, [r4, #20]
 8006e22:	b2f6      	uxtb	r6, r6
 8006e24:	4283      	cmp	r3, r0
 8006e26:	4637      	mov	r7, r6
 8006e28:	dc05      	bgt.n	8006e36 <__swbuf_r+0x4e>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f7ff fe01 	bl	8006a34 <_fflush_r>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d1ed      	bne.n	8006e12 <__swbuf_r+0x2a>
 8006e36:	68a3      	ldr	r3, [r4, #8]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	60a3      	str	r3, [r4, #8]
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	6022      	str	r2, [r4, #0]
 8006e42:	701e      	strb	r6, [r3, #0]
 8006e44:	6962      	ldr	r2, [r4, #20]
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d004      	beq.n	8006e56 <__swbuf_r+0x6e>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	07db      	lsls	r3, r3, #31
 8006e50:	d5e1      	bpl.n	8006e16 <__swbuf_r+0x2e>
 8006e52:	2e0a      	cmp	r6, #10
 8006e54:	d1df      	bne.n	8006e16 <__swbuf_r+0x2e>
 8006e56:	4621      	mov	r1, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f7ff fdeb 	bl	8006a34 <_fflush_r>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d0d9      	beq.n	8006e16 <__swbuf_r+0x2e>
 8006e62:	e7d6      	b.n	8006e12 <__swbuf_r+0x2a>

08006e64 <__swsetup_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4b29      	ldr	r3, [pc, #164]	@ (8006f0c <__swsetup_r+0xa8>)
 8006e68:	4605      	mov	r5, r0
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	b118      	cbz	r0, 8006e78 <__swsetup_r+0x14>
 8006e70:	6a03      	ldr	r3, [r0, #32]
 8006e72:	b90b      	cbnz	r3, 8006e78 <__swsetup_r+0x14>
 8006e74:	f7ff f806 	bl	8005e84 <__sinit>
 8006e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7c:	0719      	lsls	r1, r3, #28
 8006e7e:	d422      	bmi.n	8006ec6 <__swsetup_r+0x62>
 8006e80:	06da      	lsls	r2, r3, #27
 8006e82:	d407      	bmi.n	8006e94 <__swsetup_r+0x30>
 8006e84:	2209      	movs	r2, #9
 8006e86:	602a      	str	r2, [r5, #0]
 8006e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e8c:	81a3      	strh	r3, [r4, #12]
 8006e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e92:	e033      	b.n	8006efc <__swsetup_r+0x98>
 8006e94:	0758      	lsls	r0, r3, #29
 8006e96:	d512      	bpl.n	8006ebe <__swsetup_r+0x5a>
 8006e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e9a:	b141      	cbz	r1, 8006eae <__swsetup_r+0x4a>
 8006e9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	d002      	beq.n	8006eaa <__swsetup_r+0x46>
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f7ff f95b 	bl	8006160 <_free_r>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	6063      	str	r3, [r4, #4]
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	f043 0308 	orr.w	r3, r3, #8
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	6923      	ldr	r3, [r4, #16]
 8006ec8:	b94b      	cbnz	r3, 8006ede <__swsetup_r+0x7a>
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ed4:	d003      	beq.n	8006ede <__swsetup_r+0x7a>
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f000 f88b 	bl	8006ff4 <__smakebuf_r>
 8006ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee2:	f013 0201 	ands.w	r2, r3, #1
 8006ee6:	d00a      	beq.n	8006efe <__swsetup_r+0x9a>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	60a2      	str	r2, [r4, #8]
 8006eec:	6962      	ldr	r2, [r4, #20]
 8006eee:	4252      	negs	r2, r2
 8006ef0:	61a2      	str	r2, [r4, #24]
 8006ef2:	6922      	ldr	r2, [r4, #16]
 8006ef4:	b942      	cbnz	r2, 8006f08 <__swsetup_r+0xa4>
 8006ef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006efa:	d1c5      	bne.n	8006e88 <__swsetup_r+0x24>
 8006efc:	bd38      	pop	{r3, r4, r5, pc}
 8006efe:	0799      	lsls	r1, r3, #30
 8006f00:	bf58      	it	pl
 8006f02:	6962      	ldrpl	r2, [r4, #20]
 8006f04:	60a2      	str	r2, [r4, #8]
 8006f06:	e7f4      	b.n	8006ef2 <__swsetup_r+0x8e>
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e7f7      	b.n	8006efc <__swsetup_r+0x98>
 8006f0c:	20000070 	.word	0x20000070

08006f10 <_raise_r>:
 8006f10:	291f      	cmp	r1, #31
 8006f12:	b538      	push	{r3, r4, r5, lr}
 8006f14:	4605      	mov	r5, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	d904      	bls.n	8006f24 <_raise_r+0x14>
 8006f1a:	2316      	movs	r3, #22
 8006f1c:	6003      	str	r3, [r0, #0]
 8006f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f26:	b112      	cbz	r2, 8006f2e <_raise_r+0x1e>
 8006f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f2c:	b94b      	cbnz	r3, 8006f42 <_raise_r+0x32>
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 f830 	bl	8006f94 <_getpid_r>
 8006f34:	4622      	mov	r2, r4
 8006f36:	4601      	mov	r1, r0
 8006f38:	4628      	mov	r0, r5
 8006f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f3e:	f000 b817 	b.w	8006f70 <_kill_r>
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d00a      	beq.n	8006f5c <_raise_r+0x4c>
 8006f46:	1c59      	adds	r1, r3, #1
 8006f48:	d103      	bne.n	8006f52 <_raise_r+0x42>
 8006f4a:	2316      	movs	r3, #22
 8006f4c:	6003      	str	r3, [r0, #0]
 8006f4e:	2001      	movs	r0, #1
 8006f50:	e7e7      	b.n	8006f22 <_raise_r+0x12>
 8006f52:	2100      	movs	r1, #0
 8006f54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4798      	blx	r3
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e7e0      	b.n	8006f22 <_raise_r+0x12>

08006f60 <raise>:
 8006f60:	4b02      	ldr	r3, [pc, #8]	@ (8006f6c <raise+0xc>)
 8006f62:	4601      	mov	r1, r0
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	f7ff bfd3 	b.w	8006f10 <_raise_r>
 8006f6a:	bf00      	nop
 8006f6c:	20000070 	.word	0x20000070

08006f70 <_kill_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	@ (8006f90 <_kill_r+0x20>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	602b      	str	r3, [r5, #0]
 8006f7e:	f7fb fb29 	bl	80025d4 <_kill>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	d102      	bne.n	8006f8c <_kill_r+0x1c>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	b103      	cbz	r3, 8006f8c <_kill_r+0x1c>
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
 8006f8e:	bf00      	nop
 8006f90:	20002590 	.word	0x20002590

08006f94 <_getpid_r>:
 8006f94:	f7fb bb16 	b.w	80025c4 <_getpid>

08006f98 <_malloc_usable_size_r>:
 8006f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9c:	1f18      	subs	r0, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bfbc      	itt	lt
 8006fa2:	580b      	ldrlt	r3, [r1, r0]
 8006fa4:	18c0      	addlt	r0, r0, r3
 8006fa6:	4770      	bx	lr

08006fa8 <__swhatbuf_r>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	460c      	mov	r4, r1
 8006fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	b096      	sub	sp, #88	@ 0x58
 8006fb4:	4615      	mov	r5, r2
 8006fb6:	461e      	mov	r6, r3
 8006fb8:	da0d      	bge.n	8006fd6 <__swhatbuf_r+0x2e>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fc0:	f04f 0100 	mov.w	r1, #0
 8006fc4:	bf14      	ite	ne
 8006fc6:	2340      	movne	r3, #64	@ 0x40
 8006fc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fcc:	2000      	movs	r0, #0
 8006fce:	6031      	str	r1, [r6, #0]
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	b016      	add	sp, #88	@ 0x58
 8006fd4:	bd70      	pop	{r4, r5, r6, pc}
 8006fd6:	466a      	mov	r2, sp
 8006fd8:	f000 f848 	bl	800706c <_fstat_r>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	dbec      	blt.n	8006fba <__swhatbuf_r+0x12>
 8006fe0:	9901      	ldr	r1, [sp, #4]
 8006fe2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fe6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fea:	4259      	negs	r1, r3
 8006fec:	4159      	adcs	r1, r3
 8006fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ff2:	e7eb      	b.n	8006fcc <__swhatbuf_r+0x24>

08006ff4 <__smakebuf_r>:
 8006ff4:	898b      	ldrh	r3, [r1, #12]
 8006ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ff8:	079d      	lsls	r5, r3, #30
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	d507      	bpl.n	8007010 <__smakebuf_r+0x1c>
 8007000:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	2301      	movs	r3, #1
 800700a:	6163      	str	r3, [r4, #20]
 800700c:	b003      	add	sp, #12
 800700e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007010:	ab01      	add	r3, sp, #4
 8007012:	466a      	mov	r2, sp
 8007014:	f7ff ffc8 	bl	8006fa8 <__swhatbuf_r>
 8007018:	9f00      	ldr	r7, [sp, #0]
 800701a:	4605      	mov	r5, r0
 800701c:	4639      	mov	r1, r7
 800701e:	4630      	mov	r0, r6
 8007020:	f7ff f912 	bl	8006248 <_malloc_r>
 8007024:	b948      	cbnz	r0, 800703a <__smakebuf_r+0x46>
 8007026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800702a:	059a      	lsls	r2, r3, #22
 800702c:	d4ee      	bmi.n	800700c <__smakebuf_r+0x18>
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	f043 0302 	orr.w	r3, r3, #2
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	e7e2      	b.n	8007000 <__smakebuf_r+0xc>
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	6020      	str	r0, [r4, #0]
 800703e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007042:	81a3      	strh	r3, [r4, #12]
 8007044:	9b01      	ldr	r3, [sp, #4]
 8007046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800704a:	b15b      	cbz	r3, 8007064 <__smakebuf_r+0x70>
 800704c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007050:	4630      	mov	r0, r6
 8007052:	f000 f81d 	bl	8007090 <_isatty_r>
 8007056:	b128      	cbz	r0, 8007064 <__smakebuf_r+0x70>
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	f023 0303 	bic.w	r3, r3, #3
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	431d      	orrs	r5, r3
 8007068:	81a5      	strh	r5, [r4, #12]
 800706a:	e7cf      	b.n	800700c <__smakebuf_r+0x18>

0800706c <_fstat_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d07      	ldr	r5, [pc, #28]	@ (800708c <_fstat_r+0x20>)
 8007070:	2300      	movs	r3, #0
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	f7fb fb0b 	bl	8002694 <_fstat>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	d102      	bne.n	8007088 <_fstat_r+0x1c>
 8007082:	682b      	ldr	r3, [r5, #0]
 8007084:	b103      	cbz	r3, 8007088 <_fstat_r+0x1c>
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	bd38      	pop	{r3, r4, r5, pc}
 800708a:	bf00      	nop
 800708c:	20002590 	.word	0x20002590

08007090 <_isatty_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d06      	ldr	r5, [pc, #24]	@ (80070ac <_isatty_r+0x1c>)
 8007094:	2300      	movs	r3, #0
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	f7fb fb0a 	bl	80026b4 <_isatty>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_isatty_r+0x1a>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_isatty_r+0x1a>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20002590 	.word	0x20002590

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
