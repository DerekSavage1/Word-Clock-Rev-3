
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000856c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800870c  0800870c  0000970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d3c  08008d3c  0000a0cc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d3c  08008d3c  00009d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d44  08008d44  0000a0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d44  08008d44  00009d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d48  08008d48  00009d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08008d4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d8  200000cc  08008e18  0000a0cc  2**2
                  ALLOC
 10 ._user_heap_stack 00010404  200025a4  08008e18  0000a5a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe0a  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000376f  00000000  00000000  00019f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc4  00000000  00000000  0001e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb75  00000000  00000000  0001f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178f9  00000000  00000000  0003ad69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c2f  00000000  00000000  00052662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8291  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004948  00000000  00000000  000e82d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ecc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000cc 	.word	0x200000cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086f4 	.word	0x080086f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d0 	.word	0x200000d0
 80001dc:	080086f4 	.word	0x080086f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf0c      	ite	eq
 8000d60:	2301      	moveq	r3, #1
 8000d62:	2300      	movne	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4830      	ldr	r0, [pc, #192]	@ (8000e2c <setSegments+0xe0>)
 8000d6c:	f003 ff24 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bf0c      	ite	eq
 8000d7a:	2301      	moveq	r3, #1
 8000d7c:	2300      	movne	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	2101      	movs	r1, #1
 8000d84:	4829      	ldr	r0, [pc, #164]	@ (8000e2c <setSegments+0xe0>)
 8000d86:	f003 ff17 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2108      	movs	r1, #8
 8000d9e:	4823      	ldr	r0, [pc, #140]	@ (8000e2c <setSegments+0xe0>)
 8000da0:	f003 ff0a 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf0c      	ite	eq
 8000dae:	2301      	moveq	r3, #1
 8000db0:	2300      	movne	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	2104      	movs	r1, #4
 8000db8:	481d      	ldr	r0, [pc, #116]	@ (8000e30 <setSegments+0xe4>)
 8000dba:	f003 fefd 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4817      	ldr	r0, [pc, #92]	@ (8000e30 <setSegments+0xe4>)
 8000dd4:	f003 fef0 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 0320 	and.w	r3, r3, #32
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	bf0c      	ite	eq
 8000de2:	2301      	moveq	r3, #1
 8000de4:	2300      	movne	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	2110      	movs	r1, #16
 8000dec:	480f      	ldr	r0, [pc, #60]	@ (8000e2c <setSegments+0xe0>)
 8000dee:	f003 fee3 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	2102      	movs	r1, #2
 8000e06:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <setSegments+0xe0>)
 8000e08:	f003 fed6 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	09db      	lsrs	r3, r3, #7
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2140      	movs	r1, #64	@ 0x40
 8000e1c:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <setSegments+0xe0>)
 8000e1e:	f003 fecb 	bl	8004bb8 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400

08000e34 <wipeSegments>:

void wipeSegments(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <wipeSegments+0x58>)
 8000e3e:	f003 febb 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2101      	movs	r1, #1
 8000e46:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <wipeSegments+0x58>)
 8000e48:	f003 feb6 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2108      	movs	r1, #8
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <wipeSegments+0x58>)
 8000e52:	f003 feb1 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2104      	movs	r1, #4
 8000e5a:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <wipeSegments+0x5c>)
 8000e5c:	f003 feac 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2101      	movs	r1, #1
 8000e64:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <wipeSegments+0x5c>)
 8000e66:	f003 fea7 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <wipeSegments+0x58>)
 8000e70:	f003 fea2 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2102      	movs	r1, #2
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <wipeSegments+0x58>)
 8000e7a:	f003 fe9d 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2140      	movs	r1, #64	@ 0x40
 8000e82:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <wipeSegments+0x58>)
 8000e84:	f003 fe98 	bl	8004bb8 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400

08000e94 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb0:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <activateDigit+0x84>)
 8000eb2:	f003 fe81 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ec8:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <activateDigit+0x84>)
 8000eca:	f003 fe75 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2301      	moveq	r3, #1
 8000ed6:	2300      	movne	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	480f      	ldr	r0, [pc, #60]	@ (8000f1c <activateDigit+0x88>)
 8000ee0:	f003 fe6a 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <activateDigit+0x88>)
 8000ef6:	f003 fe5f 	bl	8004bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <activateDigit+0x84>)
 8000f0c:	f003 fe54 	bl	8004bb8 <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020000 	.word	0x40020000

08000f20 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fb83 	bl	800763c <strncpy>
    truncatedInput[4] = '\0';
 8000f36:	2300      	movs	r3, #0
 8000f38:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e1af      	b.n	80012a0 <Segment_Display+0x380>
        activateDigit(i + 1);
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffa4 	bl	8000e94 <activateDigit>

		char ch = truncatedInput[i];
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	3310      	adds	r3, #16
 8000f50:	443b      	add	r3, r7
 8000f52:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000f56:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f5c:	f200 8195 	bhi.w	800128a <Segment_Display+0x36a>
 8000f60:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <Segment_Display+0x48>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08001155 	.word	0x08001155
 8000f6c:	0800128b 	.word	0x0800128b
 8000f70:	0800128b 	.word	0x0800128b
 8000f74:	0800128b 	.word	0x0800128b
 8000f78:	0800128b 	.word	0x0800128b
 8000f7c:	0800128b 	.word	0x0800128b
 8000f80:	0800128b 	.word	0x0800128b
 8000f84:	0800128b 	.word	0x0800128b
 8000f88:	0800128b 	.word	0x0800128b
 8000f8c:	0800128b 	.word	0x0800128b
 8000f90:	0800128b 	.word	0x0800128b
 8000f94:	0800128b 	.word	0x0800128b
 8000f98:	0800128b 	.word	0x0800128b
 8000f9c:	0800128b 	.word	0x0800128b
 8000fa0:	0800128b 	.word	0x0800128b
 8000fa4:	0800128b 	.word	0x0800128b
 8000fa8:	0800128b 	.word	0x0800128b
 8000fac:	0800128b 	.word	0x0800128b
 8000fb0:	0800128b 	.word	0x0800128b
 8000fb4:	0800128b 	.word	0x0800128b
 8000fb8:	0800128b 	.word	0x0800128b
 8000fbc:	0800128b 	.word	0x0800128b
 8000fc0:	0800128b 	.word	0x0800128b
 8000fc4:	0800128b 	.word	0x0800128b
 8000fc8:	0800128b 	.word	0x0800128b
 8000fcc:	0800128b 	.word	0x0800128b
 8000fd0:	0800128b 	.word	0x0800128b
 8000fd4:	0800128b 	.word	0x0800128b
 8000fd8:	0800128b 	.word	0x0800128b
 8000fdc:	0800128b 	.word	0x0800128b
 8000fe0:	0800128b 	.word	0x0800128b
 8000fe4:	0800128b 	.word	0x0800128b
 8000fe8:	0800127b 	.word	0x0800127b
 8000fec:	0800128b 	.word	0x0800128b
 8000ff0:	0800128b 	.word	0x0800128b
 8000ff4:	0800128b 	.word	0x0800128b
 8000ff8:	0800128b 	.word	0x0800128b
 8000ffc:	0800128b 	.word	0x0800128b
 8001000:	0800128b 	.word	0x0800128b
 8001004:	0800128b 	.word	0x0800128b
 8001008:	0800128b 	.word	0x0800128b
 800100c:	0800128b 	.word	0x0800128b
 8001010:	0800128b 	.word	0x0800128b
 8001014:	0800128b 	.word	0x0800128b
 8001018:	0800128b 	.word	0x0800128b
 800101c:	08001283 	.word	0x08001283
 8001020:	0800128b 	.word	0x0800128b
 8001024:	0800128b 	.word	0x0800128b
 8001028:	0800115b 	.word	0x0800115b
 800102c:	08001163 	.word	0x08001163
 8001030:	0800116b 	.word	0x0800116b
 8001034:	08001173 	.word	0x08001173
 8001038:	0800117b 	.word	0x0800117b
 800103c:	08001183 	.word	0x08001183
 8001040:	0800118b 	.word	0x0800118b
 8001044:	08001193 	.word	0x08001193
 8001048:	0800119b 	.word	0x0800119b
 800104c:	080011a3 	.word	0x080011a3
 8001050:	0800128b 	.word	0x0800128b
 8001054:	0800128b 	.word	0x0800128b
 8001058:	0800128b 	.word	0x0800128b
 800105c:	0800128b 	.word	0x0800128b
 8001060:	0800128b 	.word	0x0800128b
 8001064:	0800128b 	.word	0x0800128b
 8001068:	0800128b 	.word	0x0800128b
 800106c:	080011ab 	.word	0x080011ab
 8001070:	080011b3 	.word	0x080011b3
 8001074:	080011bb 	.word	0x080011bb
 8001078:	080011c3 	.word	0x080011c3
 800107c:	080011cb 	.word	0x080011cb
 8001080:	080011d3 	.word	0x080011d3
 8001084:	080011db 	.word	0x080011db
 8001088:	080011e3 	.word	0x080011e3
 800108c:	080011eb 	.word	0x080011eb
 8001090:	080011f3 	.word	0x080011f3
 8001094:	080011fb 	.word	0x080011fb
 8001098:	08001203 	.word	0x08001203
 800109c:	0800120b 	.word	0x0800120b
 80010a0:	08001213 	.word	0x08001213
 80010a4:	0800121b 	.word	0x0800121b
 80010a8:	08001223 	.word	0x08001223
 80010ac:	0800122b 	.word	0x0800122b
 80010b0:	08001233 	.word	0x08001233
 80010b4:	0800123b 	.word	0x0800123b
 80010b8:	08001243 	.word	0x08001243
 80010bc:	0800124b 	.word	0x0800124b
 80010c0:	08001253 	.word	0x08001253
 80010c4:	0800125b 	.word	0x0800125b
 80010c8:	08001263 	.word	0x08001263
 80010cc:	0800126b 	.word	0x0800126b
 80010d0:	08001273 	.word	0x08001273
 80010d4:	0800128b 	.word	0x0800128b
 80010d8:	0800128b 	.word	0x0800128b
 80010dc:	0800128b 	.word	0x0800128b
 80010e0:	0800128b 	.word	0x0800128b
 80010e4:	0800128b 	.word	0x0800128b
 80010e8:	0800128b 	.word	0x0800128b
 80010ec:	080011ab 	.word	0x080011ab
 80010f0:	080011b3 	.word	0x080011b3
 80010f4:	080011bb 	.word	0x080011bb
 80010f8:	080011c3 	.word	0x080011c3
 80010fc:	080011cb 	.word	0x080011cb
 8001100:	080011d3 	.word	0x080011d3
 8001104:	080011db 	.word	0x080011db
 8001108:	080011e3 	.word	0x080011e3
 800110c:	080011eb 	.word	0x080011eb
 8001110:	080011f3 	.word	0x080011f3
 8001114:	080011fb 	.word	0x080011fb
 8001118:	08001203 	.word	0x08001203
 800111c:	0800120b 	.word	0x0800120b
 8001120:	08001213 	.word	0x08001213
 8001124:	0800121b 	.word	0x0800121b
 8001128:	08001223 	.word	0x08001223
 800112c:	0800122b 	.word	0x0800122b
 8001130:	08001233 	.word	0x08001233
 8001134:	0800123b 	.word	0x0800123b
 8001138:	08001243 	.word	0x08001243
 800113c:	0800124b 	.word	0x0800124b
 8001140:	08001253 	.word	0x08001253
 8001144:	0800125b 	.word	0x0800125b
 8001148:	08001263 	.word	0x08001263
 800114c:	0800126b 	.word	0x0800126b
 8001150:	08001273 	.word	0x08001273
        	case '\0':
        		wipeSegments();
 8001154:	f7ff fe6e 	bl	8000e34 <wipeSegments>
        		return;
 8001158:	e0a6      	b.n	80012a8 <Segment_Display+0x388>
            case '0':
                setSegments(0x3F);
 800115a:	203f      	movs	r0, #63	@ 0x3f
 800115c:	f7ff fdf6 	bl	8000d4c <setSegments>
                break;
 8001160:	e096      	b.n	8001290 <Segment_Display+0x370>
            case '1':
                setSegments(0x06);
 8001162:	2006      	movs	r0, #6
 8001164:	f7ff fdf2 	bl	8000d4c <setSegments>
                break;
 8001168:	e092      	b.n	8001290 <Segment_Display+0x370>
            case '2':
                setSegments(0x5B);
 800116a:	205b      	movs	r0, #91	@ 0x5b
 800116c:	f7ff fdee 	bl	8000d4c <setSegments>
                break;
 8001170:	e08e      	b.n	8001290 <Segment_Display+0x370>
            case '3':
                setSegments(0x4F);
 8001172:	204f      	movs	r0, #79	@ 0x4f
 8001174:	f7ff fdea 	bl	8000d4c <setSegments>
                break;
 8001178:	e08a      	b.n	8001290 <Segment_Display+0x370>
            case '4':
                setSegments(0x66);
 800117a:	2066      	movs	r0, #102	@ 0x66
 800117c:	f7ff fde6 	bl	8000d4c <setSegments>
                break;
 8001180:	e086      	b.n	8001290 <Segment_Display+0x370>
            case '5':
                setSegments(0x6D);
 8001182:	206d      	movs	r0, #109	@ 0x6d
 8001184:	f7ff fde2 	bl	8000d4c <setSegments>
                break;
 8001188:	e082      	b.n	8001290 <Segment_Display+0x370>
            case '6':
                setSegments(0x7D);
 800118a:	207d      	movs	r0, #125	@ 0x7d
 800118c:	f7ff fdde 	bl	8000d4c <setSegments>
                break;
 8001190:	e07e      	b.n	8001290 <Segment_Display+0x370>
            case '7':
                setSegments(0x07);
 8001192:	2007      	movs	r0, #7
 8001194:	f7ff fdda 	bl	8000d4c <setSegments>
                break;
 8001198:	e07a      	b.n	8001290 <Segment_Display+0x370>
            case '8':
                setSegments(0x7F);
 800119a:	207f      	movs	r0, #127	@ 0x7f
 800119c:	f7ff fdd6 	bl	8000d4c <setSegments>
                break;
 80011a0:	e076      	b.n	8001290 <Segment_Display+0x370>
            case '9':
                setSegments(0x6F);
 80011a2:	206f      	movs	r0, #111	@ 0x6f
 80011a4:	f7ff fdd2 	bl	8000d4c <setSegments>
                break;
 80011a8:	e072      	b.n	8001290 <Segment_Display+0x370>
            case 'a':
            case 'A':
                setSegments(0x77);
 80011aa:	2077      	movs	r0, #119	@ 0x77
 80011ac:	f7ff fdce 	bl	8000d4c <setSegments>
                break;
 80011b0:	e06e      	b.n	8001290 <Segment_Display+0x370>
            case 'b':
            case 'B':
                setSegments(0x7C);
 80011b2:	207c      	movs	r0, #124	@ 0x7c
 80011b4:	f7ff fdca 	bl	8000d4c <setSegments>
                break;
 80011b8:	e06a      	b.n	8001290 <Segment_Display+0x370>
            case 'c':
            case 'C':
                setSegments(0x39);
 80011ba:	2039      	movs	r0, #57	@ 0x39
 80011bc:	f7ff fdc6 	bl	8000d4c <setSegments>
                break;
 80011c0:	e066      	b.n	8001290 <Segment_Display+0x370>
            case 'd':
            case 'D':
                setSegments(0x5E);
 80011c2:	205e      	movs	r0, #94	@ 0x5e
 80011c4:	f7ff fdc2 	bl	8000d4c <setSegments>
                break;
 80011c8:	e062      	b.n	8001290 <Segment_Display+0x370>
            case 'e':
            case 'E':
                setSegments(0x79);
 80011ca:	2079      	movs	r0, #121	@ 0x79
 80011cc:	f7ff fdbe 	bl	8000d4c <setSegments>
                break;
 80011d0:	e05e      	b.n	8001290 <Segment_Display+0x370>
            case 'f':
            case 'F':
                setSegments(0x71);
 80011d2:	2071      	movs	r0, #113	@ 0x71
 80011d4:	f7ff fdba 	bl	8000d4c <setSegments>
                break;
 80011d8:	e05a      	b.n	8001290 <Segment_Display+0x370>
            case 'g':
            case 'G':
                setSegments(0x3D);
 80011da:	203d      	movs	r0, #61	@ 0x3d
 80011dc:	f7ff fdb6 	bl	8000d4c <setSegments>
                break;
 80011e0:	e056      	b.n	8001290 <Segment_Display+0x370>
            case 'h':
            case 'H':
                setSegments(0x76);
 80011e2:	2076      	movs	r0, #118	@ 0x76
 80011e4:	f7ff fdb2 	bl	8000d4c <setSegments>
                break;
 80011e8:	e052      	b.n	8001290 <Segment_Display+0x370>
            case 'i':
            case 'I':
                setSegments(0x30);
 80011ea:	2030      	movs	r0, #48	@ 0x30
 80011ec:	f7ff fdae 	bl	8000d4c <setSegments>
                break;
 80011f0:	e04e      	b.n	8001290 <Segment_Display+0x370>
            case 'j':
            case 'J':
                setSegments(0x1E);
 80011f2:	201e      	movs	r0, #30
 80011f4:	f7ff fdaa 	bl	8000d4c <setSegments>
                break;
 80011f8:	e04a      	b.n	8001290 <Segment_Display+0x370>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 80011fa:	2076      	movs	r0, #118	@ 0x76
 80011fc:	f7ff fda6 	bl	8000d4c <setSegments>
                break;
 8001200:	e046      	b.n	8001290 <Segment_Display+0x370>
            case 'l':
            case 'L':
                setSegments(0x38);
 8001202:	2038      	movs	r0, #56	@ 0x38
 8001204:	f7ff fda2 	bl	8000d4c <setSegments>
                break;
 8001208:	e042      	b.n	8001290 <Segment_Display+0x370>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 800120a:	2037      	movs	r0, #55	@ 0x37
 800120c:	f7ff fd9e 	bl	8000d4c <setSegments>
                break;
 8001210:	e03e      	b.n	8001290 <Segment_Display+0x370>
            case 'n':
            case 'N':
                setSegments(0x54);
 8001212:	2054      	movs	r0, #84	@ 0x54
 8001214:	f7ff fd9a 	bl	8000d4c <setSegments>
                break;
 8001218:	e03a      	b.n	8001290 <Segment_Display+0x370>
            case 'o':
            case 'O':
                setSegments(0x3F);
 800121a:	203f      	movs	r0, #63	@ 0x3f
 800121c:	f7ff fd96 	bl	8000d4c <setSegments>
                break;
 8001220:	e036      	b.n	8001290 <Segment_Display+0x370>
            case 'p':
            case 'P':
                setSegments(0x73);
 8001222:	2073      	movs	r0, #115	@ 0x73
 8001224:	f7ff fd92 	bl	8000d4c <setSegments>
                break;
 8001228:	e032      	b.n	8001290 <Segment_Display+0x370>
            case 'q':
            case 'Q':
                setSegments(0x67);
 800122a:	2067      	movs	r0, #103	@ 0x67
 800122c:	f7ff fd8e 	bl	8000d4c <setSegments>
                break;
 8001230:	e02e      	b.n	8001290 <Segment_Display+0x370>
            case 'r':
            case 'R':
                setSegments(0x50);
 8001232:	2050      	movs	r0, #80	@ 0x50
 8001234:	f7ff fd8a 	bl	8000d4c <setSegments>
                break;
 8001238:	e02a      	b.n	8001290 <Segment_Display+0x370>
            case 's':
            case 'S':
                setSegments(0x6D);
 800123a:	206d      	movs	r0, #109	@ 0x6d
 800123c:	f7ff fd86 	bl	8000d4c <setSegments>
                break;
 8001240:	e026      	b.n	8001290 <Segment_Display+0x370>
            case 't':
            case 'T':
                setSegments(0x78);
 8001242:	2078      	movs	r0, #120	@ 0x78
 8001244:	f7ff fd82 	bl	8000d4c <setSegments>
                break;
 8001248:	e022      	b.n	8001290 <Segment_Display+0x370>
            case 'u':
            case 'U':
                setSegments(0x3E);
 800124a:	203e      	movs	r0, #62	@ 0x3e
 800124c:	f7ff fd7e 	bl	8000d4c <setSegments>
                break;
 8001250:	e01e      	b.n	8001290 <Segment_Display+0x370>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8001252:	203e      	movs	r0, #62	@ 0x3e
 8001254:	f7ff fd7a 	bl	8000d4c <setSegments>
                break;
 8001258:	e01a      	b.n	8001290 <Segment_Display+0x370>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 800125a:	202a      	movs	r0, #42	@ 0x2a
 800125c:	f7ff fd76 	bl	8000d4c <setSegments>
                break;
 8001260:	e016      	b.n	8001290 <Segment_Display+0x370>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8001262:	2076      	movs	r0, #118	@ 0x76
 8001264:	f7ff fd72 	bl	8000d4c <setSegments>
                break;
 8001268:	e012      	b.n	8001290 <Segment_Display+0x370>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 800126a:	206e      	movs	r0, #110	@ 0x6e
 800126c:	f7ff fd6e 	bl	8000d4c <setSegments>
                break;
 8001270:	e00e      	b.n	8001290 <Segment_Display+0x370>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8001272:	205b      	movs	r0, #91	@ 0x5b
 8001274:	f7ff fd6a 	bl	8000d4c <setSegments>
                break;
 8001278:	e00a      	b.n	8001290 <Segment_Display+0x370>
            case ' ':
                // Blank character
                setSegments(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fd66 	bl	8000d4c <setSegments>
                break;
 8001280:	e006      	b.n	8001290 <Segment_Display+0x370>
            case '-':
            	setSegments(0x04);
 8001282:	2004      	movs	r0, #4
 8001284:	f7ff fd62 	bl	8000d4c <setSegments>
            	break;
 8001288:	e002      	b.n	8001290 <Segment_Display+0x370>
            default:
            	wipeSegments();
 800128a:	f7ff fdd3 	bl	8000e34 <wipeSegments>
                break;
 800128e:	bf00      	nop
        }
        HAL_Delay(2);
 8001290:	2002      	movs	r0, #2
 8001292:	f002 fe2d 	bl	8003ef0 <HAL_Delay>
        wipeSegments();
 8001296:	f7ff fdcd 	bl	8000e34 <wipeSegments>
    for(uint8_t i = 0; i < 4; i++) {
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	3301      	adds	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	f67f ae4c 	bls.w	8000f40 <Segment_Display+0x20>
    }
}
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop

080012b0 <turnOnLED>:
/**
 * @brief   Turns on an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn on.
 */
void turnOnLED(LED *frame, uint8_t index) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
	frame[index].on = true;
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	2201      	movs	r2, #1
 80012ca:	711a      	strb	r2, [r3, #4]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <turnOffLED>:
/**
 * @brief   Turns off an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn off.
 */
void turnOffLED(LED *frame, uint8_t index) {
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	frame[index].on = false;
 80012e4:	78fa      	ldrb	r2, [r7, #3]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	2200      	movs	r2, #0
 80012f2:	711a      	strb	r2, [r3, #4]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <toggleLED>:

void toggleLED(LED *frame, uint8_t index) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
	frame[index].on = !frame[index].on;
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f083 0301 	eor.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4619      	mov	r1, r3
 800132c:	78fa      	ldrb	r2, [r7, #3]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	460a      	mov	r2, r1
 800133a:	f002 0201 	and.w	r2, r2, #1
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	711a      	strb	r2, [r3, #4]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <getLEDsWithEffect>:
 * @param   arr Pointer to an array for storing indices of lit LEDs.
 *            This array should be preallocated by the caller.
 *
 * @return  Number of lit LEDs found. This value represents the size of the updated array.
 */
uint8_t getLEDsWithEffect(uint8_t *result, LED *display, Effect effect) {
 800134e:	b480      	push	{r7}
 8001350:	b087      	sub	sp, #28
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	4613      	mov	r3, r2
 800135a:	71fb      	strb	r3, [r7, #7]

    uint32_t index = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	e015      	b.n	8001392 <getLEDsWithEffect+0x44>
    	if(display[i].effect == effect) {
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	78db      	ldrb	r3, [r3, #3]
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	429a      	cmp	r2, r3
 8001378:	d108      	bne.n	800138c <getLEDsWithEffect+0x3e>
    		result[index] = i;
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4413      	add	r3, r2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]
            index++;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3301      	adds	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b8e      	cmp	r3, #142	@ 0x8e
 8001396:	dde6      	ble.n	8001366 <getLEDsWithEffect+0x18>
    	}
    }

    return index++;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	617a      	str	r2, [r7, #20]
 800139e:	b2db      	uxtb	r3, r3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <removeLED>:

void removeLED(LED *frame, uint8_t index) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
	frame[index].blue = 0;
 80013b8:	78fa      	ldrb	r2, [r7, #3]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	2200      	movs	r2, #0
 80013c6:	709a      	strb	r2, [r3, #2]
	frame[index].red = 0;
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	frame[index].green = 0;
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	705a      	strb	r2, [r3, #1]
	frame[index].effect = NONE;
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	2200      	movs	r2, #0
 80013f6:	70da      	strb	r2, [r3, #3]
	frame[index].on = false;
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	2200      	movs	r2, #0
 8001406:	711a      	strb	r2, [r3, #4]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <wipePWMBuffer>:
 * @brief Converts a bitmap to PWM data for WS2812B LEDs.
 *
 * Wipes PWM Buffer by filling it with user defined ZERO PWM values.
 *
 */
void wipePWMBuffer(void) {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	e007      	b.n	8001430 <wipePWMBuffer+0x1c>
        pwmBuffer[i] = ZERO;
 8001420:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <wipePWMBuffer+0x34>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	211b      	movs	r1, #27
 8001426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3301      	adds	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f640 5299 	movw	r2, #3481	@ 0xd99
 8001436:	4293      	cmp	r3, r2
 8001438:	ddf2      	ble.n	8001420 <wipePWMBuffer+0xc>
    }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200000ec 	.word	0x200000ec

0800144c <updatePwmBuffer>:
 * (green, red, blue) order.
 *
 * @note    The PWM buffer must be appropriately sized to accommodate the
 *          LED data. Each LED requires 24 bits in the PWM buffer.
 */
void updatePwmBuffer(LED *currentFrame) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

    wipePWMBuffer();
 8001454:	f7ff ffde 	bl	8001414 <wipePWMBuffer>

    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e067      	b.n	800152e <updatePwmBuffer+0xe2>

        if(!currentFrame[ledNumber].on) {
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	791b      	ldrb	r3, [r3, #4]
 800146c:	f083 0301 	eor.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d157      	bne.n	8001526 <updatePwmBuffer+0xda>
            continue;
        }


        uint8_t red     = currentFrame[ledNumber].red;
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	73fb      	strb	r3, [r7, #15]
        uint8_t green   = currentFrame[ledNumber].green;
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	73bb      	strb	r3, [r7, #14]
        uint8_t blue    = currentFrame[ledNumber].blue;
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	789b      	ldrb	r3, [r3, #2]
 80014a4:	737b      	strb	r3, [r7, #13]
        uint32_t arrayIndex = ledNumber * 24;
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	60bb      	str	r3, [r7, #8]

        // ws2812b is GRB, so we swap the positions of red and green
        for(int bit = 0; bit < 8; bit++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e032      	b.n	800151e <updatePwmBuffer+0xd2>

            if(green & (1 << bit)) {
 80014b8:	7bba      	ldrb	r2, [r7, #14]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa42 f303 	asr.w	r3, r2, r3
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <updatePwmBuffer+0x8c>
                pwmBuffer[arrayIndex + 16 + (7 - bit)] = ONE;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	3317      	adds	r3, #23
 80014d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001540 <updatePwmBuffer+0xf4>)
 80014d2:	2136      	movs	r1, #54	@ 0x36
 80014d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(red & (1 << bit)) {
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	fa42 f303 	asr.w	r3, r2, r3
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <updatePwmBuffer+0xac>
                pwmBuffer[arrayIndex + 8 + (7 - bit)] = ONE;
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	330f      	adds	r3, #15
 80014f0:	4a13      	ldr	r2, [pc, #76]	@ (8001540 <updatePwmBuffer+0xf4>)
 80014f2:	2136      	movs	r1, #54	@ 0x36
 80014f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(blue & (1 << bit)) {
 80014f8:	7b7a      	ldrb	r2, [r7, #13]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	fa42 f303 	asr.w	r3, r2, r3
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <updatePwmBuffer+0xcc>
                pwmBuffer[arrayIndex + (7 - bit)] = ONE;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	3307      	adds	r3, #7
 8001510:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <updatePwmBuffer+0xf4>)
 8001512:	2136      	movs	r1, #54	@ 0x36
 8001514:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(int bit = 0; bit < 8; bit++) {
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	3301      	adds	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2b07      	cmp	r3, #7
 8001522:	ddc9      	ble.n	80014b8 <updatePwmBuffer+0x6c>
 8001524:	e000      	b.n	8001528 <updatePwmBuffer+0xdc>
            continue;
 8001526:	bf00      	nop
    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b8e      	cmp	r3, #142	@ 0x8e
 8001532:	dd94      	ble.n	800145e <updatePwmBuffer+0x12>
            }
        }

    }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000ec 	.word	0x200000ec

08001544 <DMA_Send>:


void DMA_Send() {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmBuffer, PWM_ARRAY_SIZE);
 8001548:	f640 539a 	movw	r3, #3482	@ 0xd9a
 800154c:	4a07      	ldr	r2, [pc, #28]	@ (800156c <DMA_Send+0x28>)
 800154e:	2100      	movs	r1, #0
 8001550:	4807      	ldr	r0, [pc, #28]	@ (8001570 <DMA_Send+0x2c>)
 8001552:	f004 fc13 	bl	8005d7c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 8001556:	bf00      	nop
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <DMA_Send+0x30>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0fb      	beq.n	8001558 <DMA_Send+0x14>
	datasentflag = 0;
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <DMA_Send+0x30>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200000ec 	.word	0x200000ec
 8001570:	2000234c 	.word	0x2000234c
 8001574:	200000e8 	.word	0x200000e8

08001578 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8001580:	2100      	movs	r1, #0
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f004 fdaa 	bl	80060dc <HAL_TIM_PWM_Stop_DMA>
    datasentflag = 1;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000e8 	.word	0x200000e8

0800159c <blink>:
extern LED currentDisplay[MATRIX_SIZE];

uint32_t lastTickBlink = 0;
uint16_t blinkDelay = 375;

void blink(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b0a6      	sub	sp, #152	@ 0x98
 80015a0:	af00      	add	r7, sp, #0

	uint8_t leds[MATRIX_SIZE];
	uint32_t size = getLEDsWithEffect((uint8_t *) leds, (LED *) currentDisplay, BLINK);
 80015a2:	463b      	mov	r3, r7
 80015a4:	2204      	movs	r2, #4
 80015a6:	4919      	ldr	r1, [pc, #100]	@ (800160c <blink+0x70>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fed0 	bl	800134e <getLEDsWithEffect>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if(HAL_GetTick() - lastTickBlink > blinkDelay) {
 80015b4:	f002 fc90 	bl	8003ed8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <blink+0x74>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <blink+0x78>)
 80015c2:	8812      	ldrh	r2, [r2, #0]
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d91c      	bls.n	8001602 <blink+0x66>
		for(int i = 0; i < size; i++) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ce:	e00d      	b.n	80015ec <blink+0x50>
			toggleLED(currentDisplay, leds[i]);
 80015d0:	463a      	mov	r2, r7
 80015d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <blink+0x70>)
 80015de:	f7ff fe8f 	bl	8001300 <toggleLED>
		for(int i = 0; i < size; i++) {
 80015e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015e6:	3301      	adds	r3, #1
 80015e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8eb      	bhi.n	80015d0 <blink+0x34>
		}
		lastTickBlink = HAL_GetTick();
 80015f8:	f002 fc6e 	bl	8003ed8 <HAL_GetTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <blink+0x74>)
 8001600:	6013      	str	r3, [r2, #0]
	}

}
 8001602:	bf00      	nop
 8001604:	3798      	adds	r7, #152	@ 0x98
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20002044 	.word	0x20002044
 8001610:	20001c20 	.word	0x20001c20
 8001614:	20000000 	.word	0x20000000

08001618 <constant>:
 *  Created on: Apr 4, 2024
 *      Author: dsava
 */
#include "constant.h"

void constant(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b0a6      	sub	sp, #152	@ 0x98
 800161c:	af00      	add	r7, sp, #0

	uint8_t leds[MATRIX_SIZE];
	uint32_t size = getLEDsWithEffect((uint8_t *) leds, (LED *) currentDisplay, CONSTANT);
 800161e:	463b      	mov	r3, r7
 8001620:	2205      	movs	r2, #5
 8001622:	4912      	ldr	r1, [pc, #72]	@ (800166c <constant+0x54>)
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe92 	bl	800134e <getLEDsWithEffect>
 800162a:	4603      	mov	r3, r0
 800162c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	for(int i = 0; i < size; i++) {
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001636:	e00d      	b.n	8001654 <constant+0x3c>
		turnOnLED(currentDisplay, leds[i]);
 8001638:	463a      	mov	r2, r7
 800163a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <constant+0x54>)
 8001646:	f7ff fe33 	bl	80012b0 <turnOnLED>
	for(int i = 0; i < size; i++) {
 800164a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800164e:	3301      	adds	r3, #1
 8001650:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001654:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001658:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800165c:	429a      	cmp	r2, r3
 800165e:	d8eb      	bhi.n	8001638 <constant+0x20>
	}

}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3798      	adds	r7, #152	@ 0x98
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20002044 	.word	0x20002044

08001670 <updateDisplay>:
FlickerState currentFlickerState = STATE_IDLE;
static RTC_TimeTypeDef previousDisplayedTime = {0}; // Initialize to some value
bool needToUpdateDisplay = true;
bool isFlickering = false;

void updateDisplay(RTC_TimeTypeDef currentTime) {
 8001670:	b084      	sub	sp, #16
 8001672:	b5b0      	push	{r4, r5, r7, lr}
 8001674:	af00      	add	r7, sp, #0
 8001676:	f107 0410 	add.w	r4, r7, #16
 800167a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	display_time(currentTime.Hours, currentTime.Minutes);
 800167e:	7c3b      	ldrb	r3, [r7, #16]
 8001680:	7c7a      	ldrb	r2, [r7, #17]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fdd7 	bl	8002238 <display_time>

	if(displaysAreDifferent(FLICKER) && currentFlickerState != STATE_FLICKER_IN) {
 800168a:	2002      	movs	r0, #2
 800168c:	f000 fbf2 	bl	8001e74 <displaysAreDifferent>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <updateDisplay+0x34>
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <updateDisplay+0xb8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d002      	beq.n	80016a4 <updateDisplay+0x34>
		currentFlickerState = STATE_FLICKER_OUT;
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <updateDisplay+0xb8>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
	}

    switch (currentFlickerState) {
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <updateDisplay+0xb8>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d017      	beq.n	80016dc <updateDisplay+0x6c>
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	dc2e      	bgt.n	800170e <updateDisplay+0x9e>
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d02e      	beq.n	8001712 <updateDisplay+0xa2>
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d000      	beq.n	80016ba <updateDisplay+0x4a>
                currentFlickerState = STATE_IDLE;
                previousDisplayedTime = currentTime;
            }
            break;
        default:
        	break;
 80016b8:	e029      	b.n	800170e <updateDisplay+0x9e>
            isFlickering = flickerOut();
 80016ba:	f000 f83b 	bl	8001734 <flickerOut>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <updateDisplay+0xbc>)
 80016c4:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) {
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <updateDisplay+0xbc>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	f083 0301 	eor.w	r3, r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <updateDisplay+0xa6>
                currentFlickerState = STATE_FLICKER_IN;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <updateDisplay+0xb8>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
            break;
 80016da:	e01c      	b.n	8001716 <updateDisplay+0xa6>
        	isFlickering = flickerIn();
 80016dc:	f000 f8ca 	bl	8001874 <flickerIn>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <updateDisplay+0xbc>)
 80016e6:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) {
 80016e8:	4b10      	ldr	r3, [pc, #64]	@ (800172c <updateDisplay+0xbc>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d011      	beq.n	800171a <updateDisplay+0xaa>
                currentFlickerState = STATE_IDLE;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <updateDisplay+0xb8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
                previousDisplayedTime = currentTime;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <updateDisplay+0xc0>)
 80016fe:	461d      	mov	r5, r3
 8001700:	f107 0410 	add.w	r4, r7, #16
 8001704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	602b      	str	r3, [r5, #0]
            break;
 800170c:	e005      	b.n	800171a <updateDisplay+0xaa>
        	break;
 800170e:	bf00      	nop
 8001710:	e004      	b.n	800171c <updateDisplay+0xac>
            break;
 8001712:	bf00      	nop
 8001714:	e002      	b.n	800171c <updateDisplay+0xac>
            break;
 8001716:	bf00      	nop
 8001718:	e000      	b.n	800171c <updateDisplay+0xac>
            break;
 800171a:	bf00      	nop
    }
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001724:	b004      	add	sp, #16
 8001726:	4770      	bx	lr
 8001728:	20001c24 	.word	0x20001c24
 800172c:	20001c3c 	.word	0x20001c3c
 8001730:	20001c28 	.word	0x20001c28

08001734 <flickerOut>:

uint32_t lastTickFlicker;

bool flickerOut(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
    static uint8_t ledsToFlickerOff[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 800173a:	230a      	movs	r3, #10
 800173c:	717b      	strb	r3, [r7, #5]
    const uint32_t delayIntervalMs = 50;
 800173e:	2332      	movs	r3, #50	@ 0x32
 8001740:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 8001742:	4b46      	ldr	r3, [pc, #280]	@ (800185c <flickerOut+0x128>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f083 0301 	eor.w	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d021      	beq.n	8001794 <flickerOut+0x60>
    	numLit = getChangedPixels(ledsToFlickerOff, FLICKER);
 8001750:	2102      	movs	r1, #2
 8001752:	4843      	ldr	r0, [pc, #268]	@ (8001860 <flickerOut+0x12c>)
 8001754:	f000 fc18 	bl	8001f88 <getChangedPixels>
 8001758:	4603      	mov	r3, r0
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <flickerOut+0x130>)
 800175e:	701a      	strb	r2, [r3, #0]
        numLit = getLEDsWithEffect(ledsToFlickerOff, (LED *) currentDisplay, FLICKER);
 8001760:	2202      	movs	r2, #2
 8001762:	4941      	ldr	r1, [pc, #260]	@ (8001868 <flickerOut+0x134>)
 8001764:	483e      	ldr	r0, [pc, #248]	@ (8001860 <flickerOut+0x12c>)
 8001766:	f7ff fdf2 	bl	800134e <getLEDsWithEffect>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b3d      	ldr	r3, [pc, #244]	@ (8001864 <flickerOut+0x130>)
 8001770:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 8001772:	4b3c      	ldr	r3, [pc, #240]	@ (8001864 <flickerOut+0x130>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <flickerOut+0x4a>
            return false; // Function did not start flickering, return false
 800177a:	2300      	movs	r3, #0
 800177c:	e069      	b.n	8001852 <flickerOut+0x11e>
        }
        loop = 0;
 800177e:	4b3b      	ldr	r3, [pc, #236]	@ (800186c <flickerOut+0x138>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 8001784:	f002 fba8 	bl	8003ed8 <HAL_GetTick>
 8001788:	4603      	mov	r3, r0
 800178a:	4a39      	ldr	r2, [pc, #228]	@ (8001870 <flickerOut+0x13c>)
 800178c:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 800178e:	4b33      	ldr	r3, [pc, #204]	@ (800185c <flickerOut+0x128>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayIntervalMs) {
 8001794:	f002 fba0 	bl	8003ed8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <flickerOut+0x13c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d854      	bhi.n	8001850 <flickerOut+0x11c>
        if (loop >= flickerLoops) {
 80017a6:	4b31      	ldr	r3, [pc, #196]	@ (800186c <flickerOut+0x138>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	797a      	ldrb	r2, [r7, #5]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d816      	bhi.n	80017de <flickerOut+0xaa>
            // Ensure all LEDs are turned off at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	e009      	b.n	80017ca <flickerOut+0x96>
                removeLED((LED *) currentDisplay, ledsToFlickerOff[i]);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <flickerOut+0x12c>)
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	4619      	mov	r1, r3
 80017be:	482a      	ldr	r0, [pc, #168]	@ (8001868 <flickerOut+0x134>)
 80017c0:	f7ff fdf4 	bl	80013ac <removeLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	3301      	adds	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <flickerOut+0x130>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d3f0      	bcc.n	80017b6 <flickerOut+0x82>
            }
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 80017d4:	4b21      	ldr	r3, [pc, #132]	@ (800185c <flickerOut+0x128>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 80017da:	2300      	movs	r3, #0
 80017dc:	e039      	b.n	8001852 <flickerOut+0x11e>
        }

        shuffleArray(ledsToFlickerOff, numLit);
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <flickerOut+0x130>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	481e      	ldr	r0, [pc, #120]	@ (8001860 <flickerOut+0x12c>)
 80017e6:	f000 fced 	bl	80021c4 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	e01f      	b.n	8001830 <flickerOut+0xfc>
            if (RANDOM_IN_RANGE(0, flickerLoops) < loop) {
 80017f0:	f005 fda0 	bl	8007334 <rand>
 80017f4:	4602      	mov	r2, r0
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	3301      	adds	r3, #1
 80017fa:	fb92 f1f3 	sdiv	r1, r2, r3
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	4a19      	ldr	r2, [pc, #100]	@ (800186c <flickerOut+0x138>)
 8001806:	7812      	ldrb	r2, [r2, #0]
 8001808:	4293      	cmp	r3, r2
 800180a:	da07      	bge.n	800181c <flickerOut+0xe8>
                turnOffLED((LED *) currentDisplay, ledsToFlickerOff[i]);
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <flickerOut+0x12c>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	4619      	mov	r1, r3
 8001814:	4814      	ldr	r0, [pc, #80]	@ (8001868 <flickerOut+0x134>)
 8001816:	f7ff fd5f 	bl	80012d8 <turnOffLED>
 800181a:	e006      	b.n	800182a <flickerOut+0xf6>
            } else {
                turnOnLED((LED *) currentDisplay, ledsToFlickerOff[i]);
 800181c:	79bb      	ldrb	r3, [r7, #6]
 800181e:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <flickerOut+0x12c>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	4619      	mov	r1, r3
 8001824:	4810      	ldr	r0, [pc, #64]	@ (8001868 <flickerOut+0x134>)
 8001826:	f7ff fd43 	bl	80012b0 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	3301      	adds	r3, #1
 800182e:	71bb      	strb	r3, [r7, #6]
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <flickerOut+0x130>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	79ba      	ldrb	r2, [r7, #6]
 8001836:	429a      	cmp	r2, r3
 8001838:	d3da      	bcc.n	80017f0 <flickerOut+0xbc>
            }
        }
        lastTickEffect = HAL_GetTick();
 800183a:	f002 fb4d 	bl	8003ed8 <HAL_GetTick>
 800183e:	4603      	mov	r3, r0
 8001840:	4a0b      	ldr	r2, [pc, #44]	@ (8001870 <flickerOut+0x13c>)
 8001842:	6013      	str	r3, [r2, #0]
        loop++;
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <flickerOut+0x138>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <flickerOut+0x138>)
 800184e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20001c3d 	.word	0x20001c3d
 8001860:	20001c40 	.word	0x20001c40
 8001864:	20001ccf 	.word	0x20001ccf
 8001868:	20002044 	.word	0x20002044
 800186c:	20001cd0 	.word	0x20001cd0
 8001870:	20001cd4 	.word	0x20001cd4

08001874 <flickerIn>:

bool flickerIn(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
    static uint8_t ledsToFlickerIn[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 800187a:	230a      	movs	r3, #10
 800187c:	717b      	strb	r3, [r7, #5]
    const uint32_t delayInterval = 50; // milliseconds
 800187e:	2332      	movs	r3, #50	@ 0x32
 8001880:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 8001882:	4b59      	ldr	r3, [pc, #356]	@ (80019e8 <flickerIn+0x174>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f083 0301 	eor.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d018      	beq.n	80018c2 <flickerIn+0x4e>
        numLit = getChangedPixels(ledsToFlickerIn, FLICKER);
 8001890:	2102      	movs	r1, #2
 8001892:	4856      	ldr	r0, [pc, #344]	@ (80019ec <flickerIn+0x178>)
 8001894:	f000 fb78 	bl	8001f88 <getChangedPixels>
 8001898:	4603      	mov	r3, r0
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b54      	ldr	r3, [pc, #336]	@ (80019f0 <flickerIn+0x17c>)
 800189e:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 80018a0:	4b53      	ldr	r3, [pc, #332]	@ (80019f0 <flickerIn+0x17c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <flickerIn+0x38>
            return false;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e098      	b.n	80019de <flickerIn+0x16a>
        }
        loop = 0;
 80018ac:	4b51      	ldr	r3, [pc, #324]	@ (80019f4 <flickerIn+0x180>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 80018b2:	f002 fb11 	bl	8003ed8 <HAL_GetTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a4f      	ldr	r2, [pc, #316]	@ (80019f8 <flickerIn+0x184>)
 80018ba:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 80018bc:	4b4a      	ldr	r3, [pc, #296]	@ (80019e8 <flickerIn+0x174>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayInterval) {
 80018c2:	f002 fb09 	bl	8003ed8 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b4b      	ldr	r3, [pc, #300]	@ (80019f8 <flickerIn+0x184>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f200 8083 	bhi.w	80019dc <flickerIn+0x168>
        if (loop >= flickerLoops) {
 80018d6:	4b47      	ldr	r3, [pc, #284]	@ (80019f4 <flickerIn+0x180>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	797a      	ldrb	r2, [r7, #5]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d82d      	bhi.n	800193c <flickerIn+0xc8>
            // Ensure all LEDs are turned on at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	e020      	b.n	8001928 <flickerIn+0xb4>
            	currentDisplay[ledsToFlickerIn[i]] = targetDisplay[ledsToFlickerIn[i]];
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4a40      	ldr	r2, [pc, #256]	@ (80019ec <flickerIn+0x178>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	4619      	mov	r1, r3
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	4a3e      	ldr	r2, [pc, #248]	@ (80019ec <flickerIn+0x178>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	4618      	mov	r0, r3
 80018f6:	4a41      	ldr	r2, [pc, #260]	@ (80019fc <flickerIn+0x188>)
 80018f8:	4603      	mov	r3, r0
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4403      	add	r3, r0
 80018fe:	18d0      	adds	r0, r2, r3
 8001900:	4a3f      	ldr	r2, [pc, #252]	@ (8001a00 <flickerIn+0x18c>)
 8001902:	460b      	mov	r3, r1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	441a      	add	r2, r3
 800190a:	4603      	mov	r3, r0
 800190c:	6811      	ldr	r1, [r2, #0]
 800190e:	6019      	str	r1, [r3, #0]
 8001910:	7912      	ldrb	r2, [r2, #4]
 8001912:	711a      	strb	r2, [r3, #4]
                turnOnLED((LED *) currentDisplay, ledsToFlickerIn[i]);
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4a35      	ldr	r2, [pc, #212]	@ (80019ec <flickerIn+0x178>)
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	4619      	mov	r1, r3
 800191c:	4837      	ldr	r0, [pc, #220]	@ (80019fc <flickerIn+0x188>)
 800191e:	f7ff fcc7 	bl	80012b0 <turnOnLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3301      	adds	r3, #1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <flickerIn+0x17c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	79fa      	ldrb	r2, [r7, #7]
 800192e:	429a      	cmp	r2, r3
 8001930:	d3d9      	bcc.n	80018e6 <flickerIn+0x72>
            }
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 8001932:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <flickerIn+0x174>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 8001938:	2300      	movs	r3, #0
 800193a:	e050      	b.n	80019de <flickerIn+0x16a>
        }

        shuffleArray(ledsToFlickerIn, numLit);
 800193c:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <flickerIn+0x17c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	482a      	ldr	r0, [pc, #168]	@ (80019ec <flickerIn+0x178>)
 8001944:	f000 fc3e 	bl	80021c4 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001948:	2300      	movs	r3, #0
 800194a:	71bb      	strb	r3, [r7, #6]
 800194c:	e036      	b.n	80019bc <flickerIn+0x148>
        	currentDisplay[ledsToFlickerIn[i]] = targetDisplay[ledsToFlickerIn[i]];
 800194e:	79bb      	ldrb	r3, [r7, #6]
 8001950:	4a26      	ldr	r2, [pc, #152]	@ (80019ec <flickerIn+0x178>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	4619      	mov	r1, r3
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	4a24      	ldr	r2, [pc, #144]	@ (80019ec <flickerIn+0x178>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	4618      	mov	r0, r3
 800195e:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <flickerIn+0x188>)
 8001960:	4603      	mov	r3, r0
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4403      	add	r3, r0
 8001966:	18d0      	adds	r0, r2, r3
 8001968:	4a25      	ldr	r2, [pc, #148]	@ (8001a00 <flickerIn+0x18c>)
 800196a:	460b      	mov	r3, r1
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	441a      	add	r2, r3
 8001972:	4603      	mov	r3, r0
 8001974:	6811      	ldr	r1, [r2, #0]
 8001976:	6019      	str	r1, [r3, #0]
 8001978:	7912      	ldrb	r2, [r2, #4]
 800197a:	711a      	strb	r2, [r3, #4]
            if (RANDOM_IN_RANGE(0, flickerLoops) > loop) {
 800197c:	f005 fcda 	bl	8007334 <rand>
 8001980:	4602      	mov	r2, r0
 8001982:	797b      	ldrb	r3, [r7, #5]
 8001984:	3301      	adds	r3, #1
 8001986:	fb92 f1f3 	sdiv	r1, r2, r3
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <flickerIn+0x180>)
 8001992:	7812      	ldrb	r2, [r2, #0]
 8001994:	4293      	cmp	r3, r2
 8001996:	dd07      	ble.n	80019a8 <flickerIn+0x134>
                turnOffLED((LED *) currentDisplay, ledsToFlickerIn[i]);
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <flickerIn+0x178>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	4619      	mov	r1, r3
 80019a0:	4816      	ldr	r0, [pc, #88]	@ (80019fc <flickerIn+0x188>)
 80019a2:	f7ff fc99 	bl	80012d8 <turnOffLED>
 80019a6:	e006      	b.n	80019b6 <flickerIn+0x142>
            } else {
                turnOnLED((LED *) currentDisplay, ledsToFlickerIn[i]);
 80019a8:	79bb      	ldrb	r3, [r7, #6]
 80019aa:	4a10      	ldr	r2, [pc, #64]	@ (80019ec <flickerIn+0x178>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4812      	ldr	r0, [pc, #72]	@ (80019fc <flickerIn+0x188>)
 80019b2:	f7ff fc7d 	bl	80012b0 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	3301      	adds	r3, #1
 80019ba:	71bb      	strb	r3, [r7, #6]
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <flickerIn+0x17c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	79ba      	ldrb	r2, [r7, #6]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3c3      	bcc.n	800194e <flickerIn+0xda>
            }
        }
        lastTickEffect = HAL_GetTick();
 80019c6:	f002 fa87 	bl	8003ed8 <HAL_GetTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <flickerIn+0x184>)
 80019ce:	6013      	str	r3, [r2, #0]
        loop++;
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <flickerIn+0x180>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <flickerIn+0x180>)
 80019da:	701a      	strb	r2, [r3, #0]
    }


    return true;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20001cd8 	.word	0x20001cd8
 80019ec:	20001cdc 	.word	0x20001cdc
 80019f0:	20001d6b 	.word	0x20001d6b
 80019f4:	20001d6c 	.word	0x20001d6c
 80019f8:	20001d70 	.word	0x20001d70
 80019fc:	20002044 	.word	0x20002044
 8001a00:	20001d78 	.word	0x20001d78

08001a04 <setupRainbow>:


static HsvColor lastColor = {0};
bool init = false;

void setupRainbow(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0a8      	sub	sp, #160	@ 0xa0
 8001a08:	af00      	add	r7, sp, #0
	uint8_t rainbow[MATRIX_SIZE];
	uint32_t size = getLEDsWithEffect(rainbow, (LED *) currentDisplay, RAINBOW);
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	2201      	movs	r2, #1
 8001a10:	492e      	ldr	r1, [pc, #184]	@ (8001acc <setupRainbow+0xc8>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fc9b 	bl	800134e <getLEDsWithEffect>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	for(uint8_t i = 0; i < size; i++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001a24:	e046      	b.n	8001ab4 <setupRainbow+0xb0>
		lastColor.h++;
 8001a26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <setupRainbow+0xcc>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b28      	ldr	r3, [pc, #160]	@ (8001ad0 <setupRainbow+0xcc>)
 8001a30:	701a      	strb	r2, [r3, #0]
		RgbColor rgb = hsvToRgb(lastColor);
 8001a32:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <setupRainbow+0xcc>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f000 f8a1 	bl	8001b7c <hsvToRgb>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	713a      	strb	r2, [r7, #4]
 8001a40:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001a44:	717a      	strb	r2, [r7, #5]
 8001a46:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001a4a:	71bb      	strb	r3, [r7, #6]
		currentDisplay[rainbow[i]].red = rgb.r;
 8001a4c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001a50:	33a0      	adds	r3, #160	@ 0xa0
 8001a52:	443b      	add	r3, r7
 8001a54:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	7938      	ldrb	r0, [r7, #4]
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <setupRainbow+0xc8>)
 8001a5e:	460b      	mov	r3, r1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	4413      	add	r3, r2
 8001a66:	4602      	mov	r2, r0
 8001a68:	701a      	strb	r2, [r3, #0]
		currentDisplay[rainbow[i]].blue = rgb.g;
 8001a6a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001a6e:	33a0      	adds	r3, #160	@ 0xa0
 8001a70:	443b      	add	r3, r7
 8001a72:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001a76:	4619      	mov	r1, r3
 8001a78:	7978      	ldrb	r0, [r7, #5]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <setupRainbow+0xc8>)
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	4413      	add	r3, r2
 8001a84:	3302      	adds	r3, #2
 8001a86:	4602      	mov	r2, r0
 8001a88:	701a      	strb	r2, [r3, #0]
		currentDisplay[rainbow[i]].green = rgb.b;
 8001a8a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001a8e:	33a0      	adds	r3, #160	@ 0xa0
 8001a90:	443b      	add	r3, r7
 8001a92:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001a96:	4619      	mov	r1, r3
 8001a98:	79b8      	ldrb	r0, [r7, #6]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <setupRainbow+0xc8>)
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++) {
 8001aaa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001ab4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001ab8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8b2      	bhi.n	8001a26 <setupRainbow+0x22>
	}

}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	37a0      	adds	r7, #160	@ 0xa0
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20002044 	.word	0x20002044
 8001ad0:	20001d74 	.word	0x20001d74

08001ad4 <rainbow>:
		currentDisplay[rainbow[i]].green = rgb.g;

	}
}

void rainbow(uint8_t brightness) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]

	if(!init) {
 8001ade:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <rainbow+0x5c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	f083 0301 	eor.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d017      	beq.n	8001b1c <rainbow+0x48>
		lastColor.s = 255;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <rainbow+0x60>)
 8001aee:	22ff      	movs	r2, #255	@ 0xff
 8001af0:	705a      	strb	r2, [r3, #1]
		lastColor.v = brightness;
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <rainbow+0x60>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	7093      	strb	r3, [r2, #2]
		setupRainbow();
 8001af8:	f7ff ff84 	bl	8001a04 <setupRainbow>
		init = !init;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <rainbow+0x5c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f083 0301 	eor.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <rainbow+0x5c>)
 8001b18:	701a      	strb	r2, [r3, #0]
		return;
 8001b1a:	e006      	b.n	8001b2a <rainbow+0x56>
	}

	setupRainbow();
 8001b1c:	f7ff ff72 	bl	8001a04 <setupRainbow>
//	advanceRainbow(brightness);

	updatePwmBuffer((LED *) currentDisplay);
 8001b20:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <rainbow+0x64>)
 8001b22:	f7ff fc93 	bl	800144c <updatePwmBuffer>
	DMA_Send();
 8001b26:	f7ff fd0d 	bl	8001544 <DMA_Send>
}
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20001d77 	.word	0x20001d77
 8001b34:	20001d74 	.word	0x20001d74
 8001b38:	20002044 	.word	0x20002044

08001b3c <twinkle>:
	DMA_Send();

    return newColor;
}

void twinkle() {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0a6      	sub	sp, #152	@ 0x98
 8001b40:	af00      	add	r7, sp, #0

	uint8_t userBrightness = getBrightness();
 8001b42:	f001 fa73 	bl	800302c <getBrightness>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

	uint8_t twinkleLEDs[MATRIX_SIZE];

	uint32_t numTwinleLEDs = getLEDsWithEffect((uint8_t *) twinkleLEDs, currentDisplay, TWINKLE);
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2203      	movs	r2, #3
 8001b50:	4909      	ldr	r1, [pc, #36]	@ (8001b78 <twinkle+0x3c>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fbfb 	bl	800134e <getLEDsWithEffect>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	shuffleArray(twinkleLEDs, numTwinleLEDs);
 8001b5e:	463b      	mov	r3, r7
 8001b60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fb2d 	bl	80021c4 <shuffleArray>

	//if arrays are not equal, copy elements to other array

	if(HAL_GetTick() - lastTickTwinkle <= twinkleDelay) {
 8001b6a:	f002 f9b5 	bl	8003ed8 <HAL_GetTick>
//			//keep a limit
//		}
	}


}
 8001b6e:	bf00      	nop
 8001b70:	3798      	adds	r7, #152	@ 0x98
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20002044 	.word	0x20002044

08001b7c <hsvToRgb>:
 */

#include "color.h"

RgbColor hsvToRgb(HsvColor hsv)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    RgbColor rgb;
    unsigned char region, remainder, p, q, t;

    if (hsv.s == 0)
 8001b84:	797b      	ldrb	r3, [r7, #5]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d110      	bne.n	8001bac <hsvToRgb+0x30>
    {
        rgb.r = hsv.v;
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	733b      	strb	r3, [r7, #12]
        rgb.g = hsv.v;
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	737b      	strb	r3, [r7, #13]
        rgb.b = hsv.v;
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	73bb      	strb	r3, [r7, #14]
        return rgb;
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	f107 020c 	add.w	r2, r7, #12
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	8019      	strh	r1, [r3, #0]
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	0c12      	lsrs	r2, r2, #16
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e07f      	b.n	8001cac <hsvToRgb+0x130>
    }

    region = hsv.h / 43;
 8001bac:	793b      	ldrb	r3, [r7, #4]
 8001bae:	4a47      	ldr	r2, [pc, #284]	@ (8001ccc <hsvToRgb+0x150>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	75fb      	strb	r3, [r7, #23]
    remainder = (hsv.h - (region * 43)) * 6;
 8001bb8:	793b      	ldrb	r3, [r7, #4]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	f06f 022a 	mvn.w	r2, #42	@ 0x2a
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	75bb      	strb	r3, [r7, #22]

    p = (hsv.v * (255 - hsv.s)) >> 8;
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	121b      	asrs	r3, r3, #8
 8001be4:	757b      	strb	r3, [r7, #21]
    q = (hsv.v * (255 - ((hsv.s * remainder) >> 8))) >> 8;
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	461a      	mov	r2, r3
 8001bea:	797b      	ldrb	r3, [r7, #5]
 8001bec:	4619      	mov	r1, r3
 8001bee:	7dbb      	ldrb	r3, [r7, #22]
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	121b      	asrs	r3, r3, #8
 8001bf6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	121b      	asrs	r3, r3, #8
 8001c00:	753b      	strb	r3, [r7, #20]
    t = (hsv.v * (255 - ((hsv.s * (255 - remainder)) >> 8))) >> 8;
 8001c02:	79bb      	ldrb	r3, [r7, #6]
 8001c04:	461a      	mov	r2, r3
 8001c06:	797b      	ldrb	r3, [r7, #5]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	7dbb      	ldrb	r3, [r7, #22]
 8001c0c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	121b      	asrs	r3, r3, #8
 8001c16:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	121b      	asrs	r3, r3, #8
 8001c20:	74fb      	strb	r3, [r7, #19]

    switch (region)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d830      	bhi.n	8001c8a <hsvToRgb+0x10e>
 8001c28:	a201      	add	r2, pc, #4	@ (adr r2, 8001c30 <hsvToRgb+0xb4>)
 8001c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2e:	bf00      	nop
 8001c30:	08001c45 	.word	0x08001c45
 8001c34:	08001c53 	.word	0x08001c53
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	08001c6f 	.word	0x08001c6f
 8001c40:	08001c7d 	.word	0x08001c7d
    {
        case 0:
            rgb.r = hsv.v; rgb.g = t; rgb.b = p;
 8001c44:	79bb      	ldrb	r3, [r7, #6]
 8001c46:	733b      	strb	r3, [r7, #12]
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	737b      	strb	r3, [r7, #13]
 8001c4c:	7d7b      	ldrb	r3, [r7, #21]
 8001c4e:	73bb      	strb	r3, [r7, #14]
            break;
 8001c50:	e022      	b.n	8001c98 <hsvToRgb+0x11c>
        case 1:
            rgb.r = q; rgb.g = hsv.v; rgb.b = p;
 8001c52:	7d3b      	ldrb	r3, [r7, #20]
 8001c54:	733b      	strb	r3, [r7, #12]
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	737b      	strb	r3, [r7, #13]
 8001c5a:	7d7b      	ldrb	r3, [r7, #21]
 8001c5c:	73bb      	strb	r3, [r7, #14]
            break;
 8001c5e:	e01b      	b.n	8001c98 <hsvToRgb+0x11c>
        case 2:
            rgb.r = p; rgb.g = hsv.v; rgb.b = t;
 8001c60:	7d7b      	ldrb	r3, [r7, #21]
 8001c62:	733b      	strb	r3, [r7, #12]
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	737b      	strb	r3, [r7, #13]
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	73bb      	strb	r3, [r7, #14]
            break;
 8001c6c:	e014      	b.n	8001c98 <hsvToRgb+0x11c>
        case 3:
            rgb.r = p; rgb.g = q; rgb.b = hsv.v;
 8001c6e:	7d7b      	ldrb	r3, [r7, #21]
 8001c70:	733b      	strb	r3, [r7, #12]
 8001c72:	7d3b      	ldrb	r3, [r7, #20]
 8001c74:	737b      	strb	r3, [r7, #13]
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	73bb      	strb	r3, [r7, #14]
            break;
 8001c7a:	e00d      	b.n	8001c98 <hsvToRgb+0x11c>
        case 4:
            rgb.r = t; rgb.g = p; rgb.b = hsv.v;
 8001c7c:	7cfb      	ldrb	r3, [r7, #19]
 8001c7e:	733b      	strb	r3, [r7, #12]
 8001c80:	7d7b      	ldrb	r3, [r7, #21]
 8001c82:	737b      	strb	r3, [r7, #13]
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	73bb      	strb	r3, [r7, #14]
            break;
 8001c88:	e006      	b.n	8001c98 <hsvToRgb+0x11c>
        default:
            rgb.r = hsv.v; rgb.g = p; rgb.b = q;
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	733b      	strb	r3, [r7, #12]
 8001c8e:	7d7b      	ldrb	r3, [r7, #21]
 8001c90:	737b      	strb	r3, [r7, #13]
 8001c92:	7d3b      	ldrb	r3, [r7, #20]
 8001c94:	73bb      	strb	r3, [r7, #14]
            break;
 8001c96:	bf00      	nop
    }

    return rgb;
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	f107 020c 	add.w	r2, r7, #12
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	8019      	strh	r1, [r3, #0]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	0c12      	lsrs	r2, r2, #16
 8001caa:	701a      	strb	r2, [r3, #0]
}
 8001cac:	2300      	movs	r3, #0
 8001cae:	7c3a      	ldrb	r2, [r7, #16]
 8001cb0:	f362 0307 	bfi	r3, r2, #0, #8
 8001cb4:	7c7a      	ldrb	r2, [r7, #17]
 8001cb6:	f362 230f 	bfi	r3, r2, #8, #8
 8001cba:	7cba      	ldrb	r2, [r7, #18]
 8001cbc:	f362 4317 	bfi	r3, r2, #16, #8
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	2fa0be83 	.word	0x2fa0be83

08001cd0 <addBitmapToDisplay>:
#include "display.h"

LED targetDisplay[MATRIX_SIZE];
LED currentDisplay[MATRIX_SIZE];

void addBitmapToDisplay(const uint16_t matrix[MATRIX_HEIGHT], LED *display, Effect effect) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	71fb      	strb	r3, [r7, #7]

	RgbColor color = getColor();
 8001cde:	f001 f8c7 	bl	8002e70 <getColor>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	753a      	strb	r2, [r7, #20]
 8001ce8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001cec:	757a      	strb	r2, [r7, #21]
 8001cee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001cf2:	75bb      	strb	r3, [r7, #22]

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	e04c      	b.n	8001d94 <addBitmapToDisplay+0xc4>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	e043      	b.n	8001d88 <addBitmapToDisplay+0xb8>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	441a      	add	r2, r3
 8001d0a:	0052      	lsls	r2, r2, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	75fb      	strb	r3, [r7, #23]

            if(matrix[i] & (1 << j)) {
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa42 f303 	asr.w	r3, r2, r3
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d027      	beq.n	8001d82 <addBitmapToDisplay+0xb2>
            	display[ledNumber].red = color.r;
 8001d32:	7dfa      	ldrb	r2, [r7, #23]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	7d3a      	ldrb	r2, [r7, #20]
 8001d40:	701a      	strb	r2, [r3, #0]
            	display[ledNumber].green = color.g;
 8001d42:	7dfa      	ldrb	r2, [r7, #23]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	7d7a      	ldrb	r2, [r7, #21]
 8001d50:	705a      	strb	r2, [r3, #1]
            	display[ledNumber].blue = color.b;
 8001d52:	7dfa      	ldrb	r2, [r7, #23]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	7dba      	ldrb	r2, [r7, #22]
 8001d60:	709a      	strb	r2, [r3, #2]
            	display[ledNumber].effect = effect;
 8001d62:	7dfa      	ldrb	r2, [r7, #23]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	70da      	strb	r2, [r3, #3]
            	display[ledNumber].on = true;
 8001d72:	7dfa      	ldrb	r2, [r7, #23]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	2201      	movs	r2, #1
 8001d80:	711a      	strb	r2, [r3, #4]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	3301      	adds	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b0a      	cmp	r3, #10
 8001d8c:	ddb8      	ble.n	8001d00 <addBitmapToDisplay+0x30>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	ddaf      	ble.n	8001cfa <addBitmapToDisplay+0x2a>
            }

        }
    }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <removeBitmapFromDisplay>:

void removeBitmapFromDisplay(const uint16_t matrix[MATRIX_HEIGHT], LED *display) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]

	RgbColor color = getColor();
 8001dae:	f001 f85f 	bl	8002e70 <getColor>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	733a      	strb	r2, [r7, #12]
 8001db8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001dbc:	737a      	strb	r2, [r7, #13]
 8001dbe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001dc2:	73bb      	strb	r3, [r7, #14]
    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e04c      	b.n	8001e64 <removeBitmapFromDisplay+0xc0>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e043      	b.n	8001e58 <removeBitmapFromDisplay+0xb4>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	73fb      	strb	r3, [r7, #15]

            if(matrix[i] & (1 << j)) {
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	fa42 f303 	asr.w	r3, r2, r3
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d027      	beq.n	8001e52 <removeBitmapFromDisplay+0xae>
            	display[ledNumber].red = color.r;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	7b3a      	ldrb	r2, [r7, #12]
 8001e10:	701a      	strb	r2, [r3, #0]
            	display[ledNumber].green = color.g;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	7b7a      	ldrb	r2, [r7, #13]
 8001e20:	705a      	strb	r2, [r3, #1]
            	display[ledNumber].blue = color.b;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	7bba      	ldrb	r2, [r7, #14]
 8001e30:	709a      	strb	r2, [r3, #2]
            	display[ledNumber].on = false;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2200      	movs	r2, #0
 8001e40:	711a      	strb	r2, [r3, #4]
            	display[ledNumber].effect = NONE;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	2200      	movs	r2, #0
 8001e50:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	3301      	adds	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0a      	cmp	r3, #10
 8001e5c:	ddb8      	ble.n	8001dd0 <removeBitmapFromDisplay+0x2c>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	ddaf      	ble.n	8001dca <removeBitmapFromDisplay+0x26>
            }

        }
    }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <displaysAreDifferent>:

bool displaysAreDifferent(Effect effect) {
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e073      	b.n	8001f6c <displaysAreDifferent+0xf8>
    	if(targetDisplay[i].effect != effect && currentDisplay[i].effect != effect) {
 8001e84:	493e      	ldr	r1, [pc, #248]	@ (8001f80 <displaysAreDifferent+0x10c>)
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3303      	adds	r3, #3
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	79fa      	ldrb	r2, [r7, #7]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d00a      	beq.n	8001eb0 <displaysAreDifferent+0x3c>
 8001e9a:	493a      	ldr	r1, [pc, #232]	@ (8001f84 <displaysAreDifferent+0x110>)
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3303      	adds	r3, #3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	79fa      	ldrb	r2, [r7, #7]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d159      	bne.n	8001f64 <displaysAreDifferent+0xf0>
    		continue;
    	}

		if(currentDisplay[i].red != targetDisplay[i].red
 8001eb0:	4934      	ldr	r1, [pc, #208]	@ (8001f84 <displaysAreDifferent+0x110>)
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	7819      	ldrb	r1, [r3, #0]
 8001ebe:	4830      	ldr	r0, [pc, #192]	@ (8001f80 <displaysAreDifferent+0x10c>)
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4403      	add	r3, r0
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4299      	cmp	r1, r3
 8001ece:	d147      	bne.n	8001f60 <displaysAreDifferent+0xec>
				|| currentDisplay[i].green != targetDisplay[i].green
 8001ed0:	492c      	ldr	r1, [pc, #176]	@ (8001f84 <displaysAreDifferent+0x110>)
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	3301      	adds	r3, #1
 8001ede:	7819      	ldrb	r1, [r3, #0]
 8001ee0:	4827      	ldr	r0, [pc, #156]	@ (8001f80 <displaysAreDifferent+0x10c>)
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	4403      	add	r3, r0
 8001eec:	3301      	adds	r3, #1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4299      	cmp	r1, r3
 8001ef2:	d135      	bne.n	8001f60 <displaysAreDifferent+0xec>
				|| currentDisplay[i].blue != targetDisplay[i].blue
 8001ef4:	4923      	ldr	r1, [pc, #140]	@ (8001f84 <displaysAreDifferent+0x110>)
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	3302      	adds	r3, #2
 8001f02:	7819      	ldrb	r1, [r3, #0]
 8001f04:	481e      	ldr	r0, [pc, #120]	@ (8001f80 <displaysAreDifferent+0x10c>)
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4403      	add	r3, r0
 8001f10:	3302      	adds	r3, #2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4299      	cmp	r1, r3
 8001f16:	d123      	bne.n	8001f60 <displaysAreDifferent+0xec>
				|| currentDisplay[i].effect != targetDisplay[i].effect
 8001f18:	491a      	ldr	r1, [pc, #104]	@ (8001f84 <displaysAreDifferent+0x110>)
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	3303      	adds	r3, #3
 8001f26:	7819      	ldrb	r1, [r3, #0]
 8001f28:	4815      	ldr	r0, [pc, #84]	@ (8001f80 <displaysAreDifferent+0x10c>)
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	4403      	add	r3, r0
 8001f34:	3303      	adds	r3, #3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4299      	cmp	r1, r3
 8001f3a:	d111      	bne.n	8001f60 <displaysAreDifferent+0xec>
				|| currentDisplay[i].on != targetDisplay[i].on) {
 8001f3c:	4911      	ldr	r1, [pc, #68]	@ (8001f84 <displaysAreDifferent+0x110>)
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	3304      	adds	r3, #4
 8001f4a:	7819      	ldrb	r1, [r3, #0]
 8001f4c:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <displaysAreDifferent+0x10c>)
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	4403      	add	r3, r0
 8001f58:	3304      	adds	r3, #4
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4299      	cmp	r1, r3
 8001f5e:	d002      	beq.n	8001f66 <displaysAreDifferent+0xf2>
			return true;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e007      	b.n	8001f74 <displaysAreDifferent+0x100>
    		continue;
 8001f64:	bf00      	nop
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b8e      	cmp	r3, #142	@ 0x8e
 8001f70:	dd88      	ble.n	8001e84 <displaysAreDifferent+0x10>
    	}
    }
    return false;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	20001d78 	.word	0x20001d78
 8001f84:	20002044 	.word	0x20002044

08001f88 <getChangedPixels>:
uint32_t getChangedPixels(uint8_t *result, Effect effect) {
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
    uint32_t changedPixels = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	e05b      	b.n	8002056 <getChangedPixels+0xce>

        if(currentDisplay[i].red != targetDisplay[i].red
 8001f9e:	4933      	ldr	r1, [pc, #204]	@ (800206c <getChangedPixels+0xe4>)
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	7819      	ldrb	r1, [r3, #0]
 8001fac:	4830      	ldr	r0, [pc, #192]	@ (8002070 <getChangedPixels+0xe8>)
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4403      	add	r3, r0
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4299      	cmp	r1, r3
 8001fbc:	d135      	bne.n	800202a <getChangedPixels+0xa2>
           || currentDisplay[i].green != targetDisplay[i].green
 8001fbe:	492b      	ldr	r1, [pc, #172]	@ (800206c <getChangedPixels+0xe4>)
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3301      	adds	r3, #1
 8001fcc:	7819      	ldrb	r1, [r3, #0]
 8001fce:	4828      	ldr	r0, [pc, #160]	@ (8002070 <getChangedPixels+0xe8>)
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4403      	add	r3, r0
 8001fda:	3301      	adds	r3, #1
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	4299      	cmp	r1, r3
 8001fe0:	d123      	bne.n	800202a <getChangedPixels+0xa2>
           || currentDisplay[i].blue != targetDisplay[i].blue
 8001fe2:	4922      	ldr	r1, [pc, #136]	@ (800206c <getChangedPixels+0xe4>)
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	3302      	adds	r3, #2
 8001ff0:	7819      	ldrb	r1, [r3, #0]
 8001ff2:	481f      	ldr	r0, [pc, #124]	@ (8002070 <getChangedPixels+0xe8>)
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4403      	add	r3, r0
 8001ffe:	3302      	adds	r3, #2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4299      	cmp	r1, r3
 8002004:	d111      	bne.n	800202a <getChangedPixels+0xa2>
           || currentDisplay[i].on != targetDisplay[i].on) {
 8002006:	4919      	ldr	r1, [pc, #100]	@ (800206c <getChangedPixels+0xe4>)
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	440b      	add	r3, r1
 8002012:	3304      	adds	r3, #4
 8002014:	7819      	ldrb	r1, [r3, #0]
 8002016:	4816      	ldr	r0, [pc, #88]	@ (8002070 <getChangedPixels+0xe8>)
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	4403      	add	r3, r0
 8002022:	3304      	adds	r3, #4
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4299      	cmp	r1, r3
 8002028:	d012      	beq.n	8002050 <getChangedPixels+0xc8>
        	if(targetDisplay[i].effect == effect
 800202a:	4911      	ldr	r1, [pc, #68]	@ (8002070 <getChangedPixels+0xe8>)
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	440b      	add	r3, r1
 8002036:	3303      	adds	r3, #3
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	429a      	cmp	r2, r3
        			||currentDisplay[i].effect == effect); {
                result[changedPixels] = i;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
                changedPixels++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3301      	adds	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b8e      	cmp	r3, #142	@ 0x8e
 800205a:	dda0      	ble.n	8001f9e <getChangedPixels+0x16>
        	}
        }
    }

    return changedPixels;
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20002044 	.word	0x20002044
 8002070:	20001d78 	.word	0x20001d78

08002074 <updateDisplayColor>:


void updateDisplayColor(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0

	RgbColor color = getColor();
 800207a:	f000 fef9 	bl	8002e70 <getColor>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	713a      	strb	r2, [r7, #4]
 8002084:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002088:	717a      	strb	r2, [r7, #5]
 800208a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800208e:	71bb      	strb	r3, [r7, #6]

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e04c      	b.n	8002130 <updateDisplayColor+0xbc>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	e043      	b.n	8002124 <updateDisplayColor+0xb0>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	441a      	add	r2, r3
 80020a6:	0052      	lsls	r2, r2, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	71fb      	strb	r3, [r7, #7]

        	if(currentDisplay[ledNumber].effect == RAINBOW) {
 80020b4:	79fa      	ldrb	r2, [r7, #7]
 80020b6:	4922      	ldr	r1, [pc, #136]	@ (8002140 <updateDisplayColor+0xcc>)
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	440b      	add	r3, r1
 80020c0:	3303      	adds	r3, #3
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d027      	beq.n	8002118 <updateDisplayColor+0xa4>
        		continue;
        	}

        	if(currentDisplay[ledNumber].effect == NONE) {
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	491d      	ldr	r1, [pc, #116]	@ (8002140 <updateDisplayColor+0xcc>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	3303      	adds	r3, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01f      	beq.n	800211c <updateDisplayColor+0xa8>
        		continue;
        	}

			currentDisplay[ledNumber].red = color.r;
 80020dc:	79fa      	ldrb	r2, [r7, #7]
 80020de:	7938      	ldrb	r0, [r7, #4]
 80020e0:	4917      	ldr	r1, [pc, #92]	@ (8002140 <updateDisplayColor+0xcc>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	4602      	mov	r2, r0
 80020ec:	701a      	strb	r2, [r3, #0]
			currentDisplay[ledNumber].green = color.g;
 80020ee:	79fa      	ldrb	r2, [r7, #7]
 80020f0:	7978      	ldrb	r0, [r7, #5]
 80020f2:	4913      	ldr	r1, [pc, #76]	@ (8002140 <updateDisplayColor+0xcc>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	3301      	adds	r3, #1
 80020fe:	4602      	mov	r2, r0
 8002100:	701a      	strb	r2, [r3, #0]
			currentDisplay[ledNumber].blue = color.b;
 8002102:	79fa      	ldrb	r2, [r7, #7]
 8002104:	79b8      	ldrb	r0, [r7, #6]
 8002106:	490e      	ldr	r1, [pc, #56]	@ (8002140 <updateDisplayColor+0xcc>)
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	440b      	add	r3, r1
 8002110:	3302      	adds	r3, #2
 8002112:	4602      	mov	r2, r0
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e002      	b.n	800211e <updateDisplayColor+0xaa>
        		continue;
 8002118:	bf00      	nop
 800211a:	e000      	b.n	800211e <updateDisplayColor+0xaa>
        		continue;
 800211c:	bf00      	nop
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3301      	adds	r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b0a      	cmp	r3, #10
 8002128:	ddb8      	ble.n	800209c <updateDisplayColor+0x28>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3301      	adds	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	ddaf      	ble.n	8002096 <updateDisplayColor+0x22>
        }
    }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20002044 	.word	0x20002044

08002144 <wipeDisplay>:

void wipeDisplay(LED *display) {
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e022      	b.n	8002198 <wipeDisplay+0x54>
		display[i].blue = 0;
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	2200      	movs	r2, #0
 8002160:	709a      	strb	r2, [r3, #2]
		display[i].green = 0;
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	2200      	movs	r2, #0
 8002170:	705a      	strb	r2, [r3, #1]
		display[i].red = 0;
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
		display[i].effect = NONE;
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	2200      	movs	r2, #0
 8002190:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b8e      	cmp	r3, #142	@ 0x8e
 800219c:	ddd9      	ble.n	8002152 <wipeDisplay+0xe>
	}
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <sendDisplayToDMA>:
	}
    memcpy(currentDisplay, targetDisplay, sizeof(currentDisplay));
    wipeDisplay((LED *) targetDisplay);
}

void sendDisplayToDMA() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	updatePwmBuffer((LED *) currentDisplay);
 80021b0:	4803      	ldr	r0, [pc, #12]	@ (80021c0 <sendDisplayToDMA+0x14>)
 80021b2:	f7ff f94b 	bl	800144c <updatePwmBuffer>
	DMA_Send();
 80021b6:	f7ff f9c5 	bl	8001544 <DMA_Send>
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20002044 	.word	0x20002044

080021c4 <shuffleArray>:
 * @param   size  Number of elements in the array.
 *
 * @note    The array must be non-empty and contain at least two elements for shuffling to occur.
 *          Otherwise, the function does nothing.
 */
void shuffleArray(uint8_t *array, uint32_t size) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    if (size > 1) {
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d92d      	bls.n	8002230 <shuffleArray+0x6c>
        for (uint32_t i = 0; i < size - 1; i++) {
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e025      	b.n	8002226 <shuffleArray+0x62>
            uint32_t j = i + (uint32_t) rand() / (RAND_MAX / (size - i) + 1);
 80021da:	f005 f8ab 	bl	8007334 <rand>
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4413      	add	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
            uint8_t t = array[j];
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	73fb      	strb	r3, [r7, #15]
            array[j] = array[i];
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	441a      	add	r2, r3
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	440b      	add	r3, r1
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
            array[i] = t;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	4413      	add	r3, r2
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size - 1; i++) {
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	3b01      	subs	r3, #1
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3d4      	bcc.n	80021da <shuffleArray+0x16>
        }
    }
}
 8002230:	bf00      	nop
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <display_time>:
		MINUTE_TWENTY,
		MINUTE_TWENTYFIVE,
		MINUTE_THIRTY
};

void display_time(uint8_t hour, uint8_t minute) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	460a      	mov	r2, r1
 8002242:	71fb      	strb	r3, [r7, #7]
 8002244:	4613      	mov	r3, r2
 8002246:	71bb      	strb	r3, [r7, #6]

	wipeDisplay((LED *) targetDisplay);
 8002248:	4842      	ldr	r0, [pc, #264]	@ (8002354 <display_time+0x11c>)
 800224a:	f7ff ff7b 	bl	8002144 <wipeDisplay>
    addBitmapToDisplay(BMP_ITS, (LED *) targetDisplay, FLICKER);
 800224e:	2202      	movs	r2, #2
 8002250:	4940      	ldr	r1, [pc, #256]	@ (8002354 <display_time+0x11c>)
 8002252:	4841      	ldr	r0, [pc, #260]	@ (8002358 <display_time+0x120>)
 8002254:	f7ff fd3c 	bl	8001cd0 <addBitmapToDisplay>

    // Round down to the nearest five minutes and determine if it is 'past' or 'to' the hour
    int roundedMinute = (minute / 5) * 5;
 8002258:	79bb      	ldrb	r3, [r7, #6]
 800225a:	4a40      	ldr	r2, [pc, #256]	@ (800235c <display_time+0x124>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
    if (roundedMinute > 0) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	dd14      	ble.n	800229e <display_time+0x66>
        if (roundedMinute < 35) {
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b22      	cmp	r3, #34	@ 0x22
 8002278:	dc05      	bgt.n	8002286 <display_time+0x4e>
            addBitmapToDisplay(BMP_PAST, (LED *) targetDisplay, FLICKER);
 800227a:	2202      	movs	r2, #2
 800227c:	4935      	ldr	r1, [pc, #212]	@ (8002354 <display_time+0x11c>)
 800227e:	4838      	ldr	r0, [pc, #224]	@ (8002360 <display_time+0x128>)
 8002280:	f7ff fd26 	bl	8001cd0 <addBitmapToDisplay>
 8002284:	e00b      	b.n	800229e <display_time+0x66>
        } else {
            roundedMinute = 60 - roundedMinute;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800228c:	60fb      	str	r3, [r7, #12]
            hour++;
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	3301      	adds	r3, #1
 8002292:	71fb      	strb	r3, [r7, #7]
            addBitmapToDisplay(BMP_TILL, (LED *) targetDisplay, FLICKER);
 8002294:	2202      	movs	r2, #2
 8002296:	492f      	ldr	r1, [pc, #188]	@ (8002354 <display_time+0x11c>)
 8002298:	4832      	ldr	r0, [pc, #200]	@ (8002364 <display_time+0x12c>)
 800229a:	f7ff fd19 	bl	8001cd0 <addBitmapToDisplay>
        }
    }

    // Normalize the hour to a 12-hour format and display AM/PM where applicable
    hour %= 24; // Normalize hour to 0-23
 800229e:	79fa      	ldrb	r2, [r7, #7]
 80022a0:	4b31      	ldr	r3, [pc, #196]	@ (8002368 <display_time+0x130>)
 80022a2:	fba3 1302 	umull	r1, r3, r3, r2
 80022a6:	0919      	lsrs	r1, r3, #4
 80022a8:	460b      	mov	r3, r1
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	440b      	add	r3, r1
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	71fb      	strb	r3, [r7, #7]
    if(hour == 0 || hour == 12) {
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <display_time+0xa4>
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	d00d      	beq.n	80022dc <display_time+0xa4>
        // It's exactly midnight or noon, so we will handle it in the hour display section.
    } else if (hour < 12) {
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b0b      	cmp	r3, #11
 80022c4:	d805      	bhi.n	80022d2 <display_time+0x9a>
        addBitmapToDisplay(BMP_AM, (LED *) targetDisplay, FLICKER);
 80022c6:	2202      	movs	r2, #2
 80022c8:	4922      	ldr	r1, [pc, #136]	@ (8002354 <display_time+0x11c>)
 80022ca:	4828      	ldr	r0, [pc, #160]	@ (800236c <display_time+0x134>)
 80022cc:	f7ff fd00 	bl	8001cd0 <addBitmapToDisplay>
 80022d0:	e004      	b.n	80022dc <display_time+0xa4>
    } else {
        addBitmapToDisplay(BMP_PM, (LED *) targetDisplay, FLICKER);
 80022d2:	2202      	movs	r2, #2
 80022d4:	491f      	ldr	r1, [pc, #124]	@ (8002354 <display_time+0x11c>)
 80022d6:	4826      	ldr	r0, [pc, #152]	@ (8002370 <display_time+0x138>)
 80022d8:	f7ff fcfa 	bl	8001cd0 <addBitmapToDisplay>
    }

    // Display the hour, normalizing hour again for 12-hour format with special cases for noon and midnight
    if (hour > 12) {
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d902      	bls.n	80022e8 <display_time+0xb0>
        hour -= 12; // Convert to 12-hour format
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	3b0c      	subs	r3, #12
 80022e6:	71fb      	strb	r3, [r7, #7]
    }
    if (hour == 0) {
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <display_time+0xba>
        hour = 12; // Adjust for midnight/noon display
 80022ee:	230c      	movs	r3, #12
 80022f0:	71fb      	strb	r3, [r7, #7]
    }

    // Use an array to simplify hour display logic
    if(hour >= 1 && hour <= 12) {
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d016      	beq.n	8002326 <display_time+0xee>
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d813      	bhi.n	8002326 <display_time+0xee>
        addBitmapToDisplay(hourBitmaps[hour % 12], (LED *) targetDisplay, FLICKER);
 80022fe:	79fa      	ldrb	r2, [r7, #7]
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <display_time+0x130>)
 8002302:	fba3 1302 	umull	r1, r3, r3, r2
 8002306:	08d9      	lsrs	r1, r3, #3
 8002308:	460b      	mov	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	440b      	add	r3, r1
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <display_time+0x13c>)
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	2202      	movs	r2, #2
 800231e:	490d      	ldr	r1, [pc, #52]	@ (8002354 <display_time+0x11c>)
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fcd5 	bl	8001cd0 <addBitmapToDisplay>
    }

    // Display the minute in intervals of five using an array pointing to the bitmaps
    if (roundedMinute > 0) {
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	dd0f      	ble.n	800234c <display_time+0x114>
        addBitmapToDisplay(minuteBitmaps[(roundedMinute / 5) - 1], (LED *) targetDisplay, FLICKER);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <display_time+0x140>)
 8002330:	fb82 1203 	smull	r1, r2, r2, r3
 8002334:	1052      	asrs	r2, r2, #1
 8002336:	17db      	asrs	r3, r3, #31
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <display_time+0x144>)
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	2202      	movs	r2, #2
 8002344:	4903      	ldr	r1, [pc, #12]	@ (8002354 <display_time+0x11c>)
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fcc2 	bl	8001cd0 <addBitmapToDisplay>
    }
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20001d78 	.word	0x20001d78
 8002358:	08008a22 	.word	0x08008a22
 800235c:	cccccccd 	.word	0xcccccccd
 8002360:	08008a3c 	.word	0x08008a3c
 8002364:	08008a56 	.word	0x08008a56
 8002368:	aaaaaaab 	.word	0xaaaaaaab
 800236c:	08008ad8 	.word	0x08008ad8
 8002370:	08008af2 	.word	0x08008af2
 8002374:	20000004 	.word	0x20000004
 8002378:	66666667 	.word	0x66666667
 800237c:	20000038 	.word	0x20000038

08002380 <checkButtonPress>:
 *      Author: dsava
 */

#include "button.h"

bool checkButtonPress(void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 8002386:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800238a:	480c      	ldr	r0, [pc, #48]	@ (80023bc <checkButtonPress+0x3c>)
 800238c:	f002 fbfc 	bl	8004b88 <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8002394:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <checkButtonPress+0x40>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d107      	bne.n	80023ac <checkButtonPress+0x2c>
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <checkButtonPress+0x2c>
        // Button was pressed - perform actions here.
        lastButtonState = currentButtonState; // Update the last button state.
 80023a2:	4a07      	ldr	r2, [pc, #28]	@ (80023c0 <checkButtonPress+0x40>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	7013      	strb	r3, [r2, #0]
        return true;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e003      	b.n	80023b4 <checkButtonPress+0x34>
    } else {
        // Update the last button state.
        lastButtonState = currentButtonState;
 80023ac:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <checkButtonPress+0x40>)
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	7013      	strb	r3, [r2, #0]
        return false;
 80023b2:	2300      	movs	r3, #0
    }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40020400 	.word	0x40020400
 80023c0:	20000050 	.word	0x20000050

080023c4 <switchState>:

void switchState() {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
    switch(getDeviceState()) {
 80023ca:	f000 fc55 	bl	8002c78 <getDeviceState>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	f200 8195 	bhi.w	8002700 <switchState+0x33c>
 80023d6:	a201      	add	r2, pc, #4	@ (adr r2, 80023dc <switchState+0x18>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	08002405 	.word	0x08002405
 80023e0:	08002413 	.word	0x08002413
 80023e4:	08002421 	.word	0x08002421
 80023e8:	080025eb 	.word	0x080025eb
 80023ec:	08002601 	.word	0x08002601
 80023f0:	080026dd 	.word	0x080026dd
 80023f4:	080026f9 	.word	0x080026f9
 80023f8:	08002619 	.word	0x08002619
 80023fc:	08002663 	.word	0x08002663
 8002400:	080026a9 	.word	0x080026a9
        case SLEEP:
            setDeviceState(WAKE);
 8002404:	2001      	movs	r0, #1
 8002406:	f000 fc43 	bl	8002c90 <setDeviceState>
        	setCounter(0);
 800240a:	2000      	movs	r0, #0
 800240c:	f000 fca2 	bl	8002d54 <setCounter>
            break;
 8002410:	e17a      	b.n	8002708 <switchState+0x344>
        case WAKE:
            setDeviceState(SELECT);
 8002412:	2002      	movs	r0, #2
 8002414:	f000 fc3c 	bl	8002c90 <setDeviceState>
        	setCounter(0);
 8002418:	2000      	movs	r0, #0
 800241a:	f000 fc9b 	bl	8002d54 <setCounter>
            break;
 800241e:	e173      	b.n	8002708 <switchState+0x344>
        case SELECT:
        	switch(3-getCounterWithinBounds(0, 3)){
 8002420:	2103      	movs	r1, #3
 8002422:	2000      	movs	r0, #0
 8002424:	f000 fc68 	bl	8002cf8 <getCounterWithinBounds>
 8002428:	4603      	mov	r3, r0
 800242a:	f1c3 0303 	rsb	r3, r3, #3
 800242e:	2b03      	cmp	r3, #3
 8002430:	f200 80d9 	bhi.w	80025e6 <switchState+0x222>
 8002434:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <switchState+0x78>)
 8002436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243a:	bf00      	nop
 800243c:	08002575 	.word	0x08002575
 8002440:	08002503 	.word	0x08002503
 8002444:	0800249d 	.word	0x0800249d
 8002448:	0800244d 	.word	0x0800244d
        	case 3:

				addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, CONSTANT);
 800244c:	2205      	movs	r2, #5
 800244e:	49b0      	ldr	r1, [pc, #704]	@ (8002710 <switchState+0x34c>)
 8002450:	48b0      	ldr	r0, [pc, #704]	@ (8002714 <switchState+0x350>)
 8002452:	f7ff fc3d 	bl	8001cd0 <addBitmapToDisplay>
				if(getMode() == SET_MODE) {
 8002456:	f000 fe05 	bl	8003064 <getMode>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d109      	bne.n	8002474 <switchState+0xb0>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002460:	2205      	movs	r2, #5
 8002462:	49ab      	ldr	r1, [pc, #684]	@ (8002710 <switchState+0x34c>)
 8002464:	48ac      	ldr	r0, [pc, #688]	@ (8002718 <switchState+0x354>)
 8002466:	f7ff fc33 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 800246a:	49a9      	ldr	r1, [pc, #676]	@ (8002710 <switchState+0x34c>)
 800246c:	48ab      	ldr	r0, [pc, #684]	@ (800271c <switchState+0x358>)
 800246e:	f7ff fc99 	bl	8001da4 <removeBitmapFromDisplay>
 8002472:	e008      	b.n	8002486 <switchState+0xc2>
				} else {
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 8002474:	2205      	movs	r2, #5
 8002476:	49a6      	ldr	r1, [pc, #664]	@ (8002710 <switchState+0x34c>)
 8002478:	48a8      	ldr	r0, [pc, #672]	@ (800271c <switchState+0x358>)
 800247a:	f7ff fc29 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 800247e:	49a4      	ldr	r1, [pc, #656]	@ (8002710 <switchState+0x34c>)
 8002480:	48a5      	ldr	r0, [pc, #660]	@ (8002718 <switchState+0x354>)
 8002482:	f7ff fc8f 	bl	8001da4 <removeBitmapFromDisplay>
				}

				setCounter(getTime()->Hours);
 8002486:	f000 fc91 	bl	8002dac <getTime>
 800248a:	4603      	mov	r3, r0
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fc60 	bl	8002d54 <setCounter>
        		setDeviceState(SET_HOURS);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 fbfb 	bl	8002c90 <setDeviceState>

        		break;
 800249a:	e0a5      	b.n	80025e8 <switchState+0x224>
        	case 2:

				addBitmapToDisplay(MENU_COLOR, (LED *) currentDisplay, CONSTANT);
 800249c:	2205      	movs	r2, #5
 800249e:	499c      	ldr	r1, [pc, #624]	@ (8002710 <switchState+0x34c>)
 80024a0:	489f      	ldr	r0, [pc, #636]	@ (8002720 <switchState+0x35c>)
 80024a2:	f7ff fc15 	bl	8001cd0 <addBitmapToDisplay>
				if(getMode() == SET_MODE) {
 80024a6:	f000 fddd 	bl	8003064 <getMode>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d109      	bne.n	80024c4 <switchState+0x100>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 80024b0:	2205      	movs	r2, #5
 80024b2:	4997      	ldr	r1, [pc, #604]	@ (8002710 <switchState+0x34c>)
 80024b4:	4898      	ldr	r0, [pc, #608]	@ (8002718 <switchState+0x354>)
 80024b6:	f7ff fc0b 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 80024ba:	4995      	ldr	r1, [pc, #596]	@ (8002710 <switchState+0x34c>)
 80024bc:	4897      	ldr	r0, [pc, #604]	@ (800271c <switchState+0x358>)
 80024be:	f7ff fc71 	bl	8001da4 <removeBitmapFromDisplay>
 80024c2:	e008      	b.n	80024d6 <switchState+0x112>
				} else {
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 80024c4:	2205      	movs	r2, #5
 80024c6:	4992      	ldr	r1, [pc, #584]	@ (8002710 <switchState+0x34c>)
 80024c8:	4894      	ldr	r0, [pc, #592]	@ (800271c <switchState+0x358>)
 80024ca:	f7ff fc01 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 80024ce:	4990      	ldr	r1, [pc, #576]	@ (8002710 <switchState+0x34c>)
 80024d0:	4891      	ldr	r0, [pc, #580]	@ (8002718 <switchState+0x354>)
 80024d2:	f7ff fc67 	bl	8001da4 <removeBitmapFromDisplay>
				}
				removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 80024d6:	498e      	ldr	r1, [pc, #568]	@ (8002710 <switchState+0x34c>)
 80024d8:	4891      	ldr	r0, [pc, #580]	@ (8002720 <switchState+0x35c>)
 80024da:	f7ff fc63 	bl	8001da4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 80024de:	498c      	ldr	r1, [pc, #560]	@ (8002710 <switchState+0x34c>)
 80024e0:	4890      	ldr	r0, [pc, #576]	@ (8002724 <switchState+0x360>)
 80024e2:	f7ff fc5f 	bl	8001da4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 80024e6:	498a      	ldr	r1, [pc, #552]	@ (8002710 <switchState+0x34c>)
 80024e8:	488a      	ldr	r0, [pc, #552]	@ (8002714 <switchState+0x350>)
 80024ea:	f7ff fc5b 	bl	8001da4 <removeBitmapFromDisplay>

				setCounter(getColorPreset());
 80024ee:	f000 fde5 	bl	80030bc <getColorPreset>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fc2d 	bl	8002d54 <setCounter>
        		setDeviceState(SET_COLOR);
 80024fa:	2005      	movs	r0, #5
 80024fc:	f000 fbc8 	bl	8002c90 <setDeviceState>

        		break;
 8002500:	e072      	b.n	80025e8 <switchState+0x224>
        	case 1:


				addBitmapToDisplay(MENU_BIRTHDAY, (LED *) currentDisplay, CONSTANT);
 8002502:	2205      	movs	r2, #5
 8002504:	4982      	ldr	r1, [pc, #520]	@ (8002710 <switchState+0x34c>)
 8002506:	4888      	ldr	r0, [pc, #544]	@ (8002728 <switchState+0x364>)
 8002508:	f7ff fbe2 	bl	8001cd0 <addBitmapToDisplay>
				if(getMode() == SET_MODE) {
 800250c:	f000 fdaa 	bl	8003064 <getMode>
 8002510:	4603      	mov	r3, r0
 8002512:	2b01      	cmp	r3, #1
 8002514:	d117      	bne.n	8002546 <switchState+0x182>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002516:	2205      	movs	r2, #5
 8002518:	497d      	ldr	r1, [pc, #500]	@ (8002710 <switchState+0x34c>)
 800251a:	487f      	ldr	r0, [pc, #508]	@ (8002718 <switchState+0x354>)
 800251c:	f7ff fbd8 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002520:	497b      	ldr	r1, [pc, #492]	@ (8002710 <switchState+0x34c>)
 8002522:	487e      	ldr	r0, [pc, #504]	@ (800271c <switchState+0x358>)
 8002524:	f7ff fc3e 	bl	8001da4 <removeBitmapFromDisplay>
	        		setDateState(BIRTHDAY_DATE);
 8002528:	2002      	movs	r0, #2
 800252a:	f000 fd6f 	bl	800300c <setDateState>
	            	setCounter(getDate(BIRTHDAY_DATE)->Month);
 800252e:	2002      	movs	r0, #2
 8002530:	f000 fc46 	bl	8002dc0 <getDate>
 8002534:	4603      	mov	r3, r0
 8002536:	785b      	ldrb	r3, [r3, #1]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fc0b 	bl	8002d54 <setCounter>
	            	setDeviceState(SET_MONTH);
 800253e:	2007      	movs	r0, #7
 8002540:	f000 fba6 	bl	8002c90 <setDeviceState>
 8002544:	e00d      	b.n	8002562 <switchState+0x19e>
				} else {
					deleteBirthday();
 8002546:	f000 fef7 	bl	8003338 <deleteBirthday>
					setDeviceState(SLEEP);
 800254a:	2000      	movs	r0, #0
 800254c:	f000 fba0 	bl	8002c90 <setDeviceState>
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 8002550:	2205      	movs	r2, #5
 8002552:	496f      	ldr	r1, [pc, #444]	@ (8002710 <switchState+0x34c>)
 8002554:	4871      	ldr	r0, [pc, #452]	@ (800271c <switchState+0x358>)
 8002556:	f7ff fbbb 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 800255a:	496d      	ldr	r1, [pc, #436]	@ (8002710 <switchState+0x34c>)
 800255c:	486e      	ldr	r0, [pc, #440]	@ (8002718 <switchState+0x354>)
 800255e:	f7ff fc21 	bl	8001da4 <removeBitmapFromDisplay>
				}
				removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002562:	496b      	ldr	r1, [pc, #428]	@ (8002710 <switchState+0x34c>)
 8002564:	486b      	ldr	r0, [pc, #428]	@ (8002714 <switchState+0x350>)
 8002566:	f7ff fc1d 	bl	8001da4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 800256a:	4969      	ldr	r1, [pc, #420]	@ (8002710 <switchState+0x34c>)
 800256c:	486d      	ldr	r0, [pc, #436]	@ (8002724 <switchState+0x360>)
 800256e:	f7ff fc19 	bl	8001da4 <removeBitmapFromDisplay>


        		break;
 8002572:	e039      	b.n	80025e8 <switchState+0x224>
        	case 0:


				addBitmapToDisplay(MENU_ANNIVERSARY, (LED *) currentDisplay, CONSTANT);
 8002574:	2205      	movs	r2, #5
 8002576:	4966      	ldr	r1, [pc, #408]	@ (8002710 <switchState+0x34c>)
 8002578:	486a      	ldr	r0, [pc, #424]	@ (8002724 <switchState+0x360>)
 800257a:	f7ff fba9 	bl	8001cd0 <addBitmapToDisplay>
				if(getMode() == SET_MODE) {
 800257e:	f000 fd71 	bl	8003064 <getMode>
 8002582:	4603      	mov	r3, r0
 8002584:	2b01      	cmp	r3, #1
 8002586:	d117      	bne.n	80025b8 <switchState+0x1f4>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002588:	2205      	movs	r2, #5
 800258a:	4961      	ldr	r1, [pc, #388]	@ (8002710 <switchState+0x34c>)
 800258c:	4862      	ldr	r0, [pc, #392]	@ (8002718 <switchState+0x354>)
 800258e:	f7ff fb9f 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002592:	495f      	ldr	r1, [pc, #380]	@ (8002710 <switchState+0x34c>)
 8002594:	4861      	ldr	r0, [pc, #388]	@ (800271c <switchState+0x358>)
 8002596:	f7ff fc05 	bl	8001da4 <removeBitmapFromDisplay>
	        		setDateState(ANNIVERSARY_DATE);
 800259a:	2001      	movs	r0, #1
 800259c:	f000 fd36 	bl	800300c <setDateState>
	            	setCounter(getDate(ANNIVERSARY_DATE)->Month);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f000 fc0d 	bl	8002dc0 <getDate>
 80025a6:	4603      	mov	r3, r0
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fbd2 	bl	8002d54 <setCounter>
	            	setDeviceState(SET_MONTH);
 80025b0:	2007      	movs	r0, #7
 80025b2:	f000 fb6d 	bl	8002c90 <setDeviceState>
 80025b6:	e00d      	b.n	80025d4 <switchState+0x210>
				} else {
					deleteAnniversary();
 80025b8:	f000 fea6 	bl	8003308 <deleteAnniversary>
					setDeviceState(SLEEP);
 80025bc:	2000      	movs	r0, #0
 80025be:	f000 fb67 	bl	8002c90 <setDeviceState>
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 80025c2:	2205      	movs	r2, #5
 80025c4:	4952      	ldr	r1, [pc, #328]	@ (8002710 <switchState+0x34c>)
 80025c6:	4855      	ldr	r0, [pc, #340]	@ (800271c <switchState+0x358>)
 80025c8:	f7ff fb82 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 80025cc:	4950      	ldr	r1, [pc, #320]	@ (8002710 <switchState+0x34c>)
 80025ce:	4852      	ldr	r0, [pc, #328]	@ (8002718 <switchState+0x354>)
 80025d0:	f7ff fbe8 	bl	8001da4 <removeBitmapFromDisplay>
				}
				removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 80025d4:	494e      	ldr	r1, [pc, #312]	@ (8002710 <switchState+0x34c>)
 80025d6:	4852      	ldr	r0, [pc, #328]	@ (8002720 <switchState+0x35c>)
 80025d8:	f7ff fbe4 	bl	8001da4 <removeBitmapFromDisplay>
				removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 80025dc:	494c      	ldr	r1, [pc, #304]	@ (8002710 <switchState+0x34c>)
 80025de:	4852      	ldr	r0, [pc, #328]	@ (8002728 <switchState+0x364>)
 80025e0:	f7ff fbe0 	bl	8001da4 <removeBitmapFromDisplay>

        		break;
 80025e4:	e000      	b.n	80025e8 <switchState+0x224>
        	default:
        		break;
 80025e6:	bf00      	nop
        	}
            break;
 80025e8:	e08e      	b.n	8002708 <switchState+0x344>
        case SET_HOURS:

        	setCounter(getTime()->Minutes);
 80025ea:	f000 fbdf 	bl	8002dac <getTime>
 80025ee:	4603      	mov	r3, r0
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fbae 	bl	8002d54 <setCounter>
            setDeviceState(SET_MINUTES);
 80025f8:	2004      	movs	r0, #4
 80025fa:	f000 fb49 	bl	8002c90 <setDeviceState>
            break;
 80025fe:	e083      	b.n	8002708 <switchState+0x344>
        case SET_MINUTES:
        	setCounter(getDate(SYSTEM_DATE)->Month);
 8002600:	2000      	movs	r0, #0
 8002602:	f000 fbdd 	bl	8002dc0 <getDate>
 8002606:	4603      	mov	r3, r0
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fba2 	bl	8002d54 <setCounter>
            setDeviceState(SET_MONTH);
 8002610:	2007      	movs	r0, #7
 8002612:	f000 fb3d 	bl	8002c90 <setDeviceState>
            break;
 8002616:	e077      	b.n	8002708 <switchState+0x344>
        case SET_MONTH:;
        	RTC_DateTypeDef nDate = *getDate(getDateState());
 8002618:	f000 fcec 	bl	8002ff4 <getDateState>
 800261c:	4603      	mov	r3, r0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fbce 	bl	8002dc0 <getDate>
 8002624:	4602      	mov	r2, r0
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	6810      	ldr	r0, [r2, #0]
 800262a:	6018      	str	r0, [r3, #0]
        	nDate.Month = (uint8_t) getCounter();
 800262c:	f000 fb40 	bl	8002cb0 <getCounter>
 8002630:	4603      	mov	r3, r0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	717b      	strb	r3, [r7, #5]
        	setDate(nDate, getDateState());
 8002636:	f000 fcdd 	bl	8002ff4 <getDateState>
 800263a:	4603      	mov	r3, r0
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fbe0 	bl	8002e04 <setDate>
        	setCounter(getDate(getDateState())->Date);
 8002644:	f000 fcd6 	bl	8002ff4 <getDateState>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fbb8 	bl	8002dc0 <getDate>
 8002650:	4603      	mov	r3, r0
 8002652:	789b      	ldrb	r3, [r3, #2]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fb7d 	bl	8002d54 <setCounter>

        	setDeviceState(SET_DAY);
 800265a:	2008      	movs	r0, #8
 800265c:	f000 fb18 	bl	8002c90 <setDeviceState>

        	break;
 8002660:	e052      	b.n	8002708 <switchState+0x344>
        case SET_DAY:
        	nDate = *getDate(getDateState());
 8002662:	f000 fcc7 	bl	8002ff4 <getDateState>
 8002666:	4603      	mov	r3, r0
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fba9 	bl	8002dc0 <getDate>
 800266e:	4602      	mov	r2, r0
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	6810      	ldr	r0, [r2, #0]
 8002674:	6018      	str	r0, [r3, #0]
        	nDate.Date = (uint8_t) getCounter();
 8002676:	f000 fb1b 	bl	8002cb0 <getCounter>
 800267a:	4603      	mov	r3, r0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	71bb      	strb	r3, [r7, #6]
        	setDate(nDate, getDateState());
 8002680:	f000 fcb8 	bl	8002ff4 <getDateState>
 8002684:	4603      	mov	r3, r0
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fbbb 	bl	8002e04 <setDate>
        	if (getDateState() != SYSTEM_DATE) {
 800268e:	f000 fcb1 	bl	8002ff4 <getDateState>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <switchState+0x2dc>
        		setDeviceState(SLEEP);
 8002698:	2000      	movs	r0, #0
 800269a:	f000 faf9 	bl	8002c90 <setDeviceState>
 800269e:	e033      	b.n	8002708 <switchState+0x344>
        		return;
        	}
        	setDeviceState(SET_YEAR);
 80026a0:	2009      	movs	r0, #9
 80026a2:	f000 faf5 	bl	8002c90 <setDeviceState>
        	break;
 80026a6:	e02f      	b.n	8002708 <switchState+0x344>
        case SET_YEAR:
        	nDate = *getDate(getDateState());
 80026a8:	f000 fca4 	bl	8002ff4 <getDateState>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fb86 	bl	8002dc0 <getDate>
 80026b4:	4602      	mov	r2, r0
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	6810      	ldr	r0, [r2, #0]
 80026ba:	6018      	str	r0, [r3, #0]
        	nDate.Year = (uint8_t) getCounter();
 80026bc:	f000 faf8 	bl	8002cb0 <getCounter>
 80026c0:	4603      	mov	r3, r0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	71fb      	strb	r3, [r7, #7]
        	setDate(nDate, getDateState());
 80026c6:	f000 fc95 	bl	8002ff4 <getDateState>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fb98 	bl	8002e04 <setDate>
        	setDeviceState(SLEEP);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f000 fadb 	bl	8002c90 <setDeviceState>
        	break;
 80026da:	e015      	b.n	8002708 <switchState+0x344>
        case SET_COLOR:
        	setCounterBounds(0,100);
 80026dc:	2164      	movs	r1, #100	@ 0x64
 80026de:	2000      	movs	r0, #0
 80026e0:	f000 fab4 	bl	8002c4c <setCounterBounds>
        	setCounter(getBrightness());
 80026e4:	f000 fca2 	bl	800302c <getBrightness>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fb32 	bl	8002d54 <setCounter>
            setDeviceState(SET_BRIGHTNESS); // After color, set brightness
 80026f0:	2006      	movs	r0, #6
 80026f2:	f000 facd 	bl	8002c90 <setDeviceState>
            break;
 80026f6:	e007      	b.n	8002708 <switchState+0x344>
        case SET_BRIGHTNESS:
            setDeviceState(SLEEP); // Return to SLEEP after setting LED features
 80026f8:	2000      	movs	r0, #0
 80026fa:	f000 fac9 	bl	8002c90 <setDeviceState>
            break;
 80026fe:	e003      	b.n	8002708 <switchState+0x344>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            setDeviceState(SLEEP);
 8002700:	2000      	movs	r0, #0
 8002702:	f000 fac5 	bl	8002c90 <setDeviceState>
            break;
 8002706:	bf00      	nop
    }
}
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20002044 	.word	0x20002044
 8002714:	08008bdc 	.word	0x08008bdc
 8002718:	08008ba8 	.word	0x08008ba8
 800271c:	08008bc2 	.word	0x08008bc2
 8002720:	08008bf6 	.word	0x08008bf6
 8002724:	08008c2a 	.word	0x08008c2a
 8002728:	08008c10 	.word	0x08008c10

0800272c <configureSettings>:
 *      Author: dsava
 */

#include "menu.h"

void configureSettings(void) {
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0

	switch(getDeviceState()) {
 8002732:	f000 faa1 	bl	8002c78 <getDeviceState>
 8002736:	4603      	mov	r3, r0
 8002738:	2b09      	cmp	r3, #9
 800273a:	f200 8251 	bhi.w	8002be0 <configureSettings+0x4b4>
 800273e:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <configureSettings+0x18>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	0800276d 	.word	0x0800276d
 8002748:	080027a5 	.word	0x080027a5
 800274c:	0800281d 	.word	0x0800281d
 8002750:	080029c7 	.word	0x080029c7
 8002754:	08002a39 	.word	0x08002a39
 8002758:	08002b67 	.word	0x08002b67
 800275c:	08002ba3 	.word	0x08002ba3
 8002760:	08002a81 	.word	0x08002a81
 8002764:	08002adf 	.word	0x08002adf
 8002768:	08002b37 	.word	0x08002b37
		case SLEEP:
			removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 800276c:	49a7      	ldr	r1, [pc, #668]	@ (8002a0c <configureSettings+0x2e0>)
 800276e:	48a8      	ldr	r0, [pc, #672]	@ (8002a10 <configureSettings+0x2e4>)
 8002770:	f7ff fb18 	bl	8001da4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002774:	49a5      	ldr	r1, [pc, #660]	@ (8002a0c <configureSettings+0x2e0>)
 8002776:	48a7      	ldr	r0, [pc, #668]	@ (8002a14 <configureSettings+0x2e8>)
 8002778:	f7ff fb14 	bl	8001da4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_SET, currentDisplay);
 800277c:	49a3      	ldr	r1, [pc, #652]	@ (8002a0c <configureSettings+0x2e0>)
 800277e:	48a6      	ldr	r0, [pc, #664]	@ (8002a18 <configureSettings+0x2ec>)
 8002780:	f7ff fb10 	bl	8001da4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002784:	49a1      	ldr	r1, [pc, #644]	@ (8002a0c <configureSettings+0x2e0>)
 8002786:	48a5      	ldr	r0, [pc, #660]	@ (8002a1c <configureSettings+0x2f0>)
 8002788:	f7ff fb0c 	bl	8001da4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 800278c:	499f      	ldr	r1, [pc, #636]	@ (8002a0c <configureSettings+0x2e0>)
 800278e:	48a4      	ldr	r0, [pc, #656]	@ (8002a20 <configureSettings+0x2f4>)
 8002790:	f7ff fb08 	bl	8001da4 <removeBitmapFromDisplay>
			removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002794:	499d      	ldr	r1, [pc, #628]	@ (8002a0c <configureSettings+0x2e0>)
 8002796:	48a3      	ldr	r0, [pc, #652]	@ (8002a24 <configureSettings+0x2f8>)
 8002798:	f7ff fb04 	bl	8001da4 <removeBitmapFromDisplay>
			setDisplayString("");
 800279c:	48a2      	ldr	r0, [pc, #648]	@ (8002a28 <configureSettings+0x2fc>)
 800279e:	f000 fc77 	bl	8003090 <setDisplayString>
			break;
 80027a2:	e220      	b.n	8002be6 <configureSettings+0x4ba>
		case WAKE:;


			uint8_t upperBound = 1;
 80027a4:	2301      	movs	r3, #1
 80027a6:	71fb      	strb	r3, [r7, #7]

			if(!isBirthdaySet() && !isAnniversarySet())
 80027a8:	f000 fd9e 	bl	80032e8 <isBirthdaySet>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f083 0301 	eor.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d009      	beq.n	80027cc <configureSettings+0xa0>
 80027b8:	f000 fd86 	bl	80032c8 <isAnniversarySet>
 80027bc:	4603      	mov	r3, r0
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <configureSettings+0xa0>
				upperBound = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	71fb      	strb	r3, [r7, #7]

			if(!getCounterWithinBounds(0, upperBound)) {
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4619      	mov	r1, r3
 80027d0:	2000      	movs	r0, #0
 80027d2:	f000 fa91 	bl	8002cf8 <getCounterWithinBounds>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <configureSettings+0xd0>
				setDisplayString("SET");
 80027dc:	4893      	ldr	r0, [pc, #588]	@ (8002a2c <configureSettings+0x300>)
 80027de:	f000 fc57 	bl	8003090 <setDisplayString>
				addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, BLINK);
 80027e2:	2204      	movs	r2, #4
 80027e4:	4989      	ldr	r1, [pc, #548]	@ (8002a0c <configureSettings+0x2e0>)
 80027e6:	488c      	ldr	r0, [pc, #560]	@ (8002a18 <configureSettings+0x2ec>)
 80027e8:	f7ff fa72 	bl	8001cd0 <addBitmapToDisplay>
				removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 80027ec:	4987      	ldr	r1, [pc, #540]	@ (8002a0c <configureSettings+0x2e0>)
 80027ee:	4889      	ldr	r0, [pc, #548]	@ (8002a14 <configureSettings+0x2e8>)
 80027f0:	f7ff fad8 	bl	8001da4 <removeBitmapFromDisplay>
				setMode(SET_MODE);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f000 fc25 	bl	8003044 <setMode>
				setDisplayString("DEL");
				addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, BLINK);
				removeBitmapFromDisplay(MENU_SET, currentDisplay);
				setMode(DELETE_MODE);
			}
			break;
 80027fa:	e1f4      	b.n	8002be6 <configureSettings+0x4ba>
				setDisplayString("DEL");
 80027fc:	488c      	ldr	r0, [pc, #560]	@ (8002a30 <configureSettings+0x304>)
 80027fe:	f000 fc47 	bl	8003090 <setDisplayString>
				addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, BLINK);
 8002802:	2204      	movs	r2, #4
 8002804:	4981      	ldr	r1, [pc, #516]	@ (8002a0c <configureSettings+0x2e0>)
 8002806:	4883      	ldr	r0, [pc, #524]	@ (8002a14 <configureSettings+0x2e8>)
 8002808:	f7ff fa62 	bl	8001cd0 <addBitmapToDisplay>
				removeBitmapFromDisplay(MENU_SET, currentDisplay);
 800280c:	497f      	ldr	r1, [pc, #508]	@ (8002a0c <configureSettings+0x2e0>)
 800280e:	4882      	ldr	r0, [pc, #520]	@ (8002a18 <configureSettings+0x2ec>)
 8002810:	f7ff fac8 	bl	8001da4 <removeBitmapFromDisplay>
				setMode(DELETE_MODE);
 8002814:	2000      	movs	r0, #0
 8002816:	f000 fc15 	bl	8003044 <setMode>
			break;
 800281a:	e1e4      	b.n	8002be6 <configureSettings+0x4ba>
		case SELECT:
			if(getMode() == SET_MODE) {
 800281c:	f000 fc22 	bl	8003064 <getMode>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d17e      	bne.n	8002924 <configureSettings+0x1f8>
				switch(getCounterWithinBounds(0, 3)) {
 8002826:	2103      	movs	r1, #3
 8002828:	2000      	movs	r0, #0
 800282a:	f000 fa65 	bl	8002cf8 <getCounterWithinBounds>
 800282e:	4603      	mov	r3, r0
 8002830:	2b03      	cmp	r3, #3
 8002832:	f200 80c6 	bhi.w	80029c2 <configureSettings+0x296>
 8002836:	a201      	add	r2, pc, #4	@ (adr r2, 800283c <configureSettings+0x110>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	080028ef 	.word	0x080028ef
 8002840:	080028b9 	.word	0x080028b9
 8002844:	08002883 	.word	0x08002883
 8002848:	0800284d 	.word	0x0800284d
				case 3:
					addBitmapToDisplay(MENU_ANNIVERSARY, (LED *) currentDisplay, BLINK);
 800284c:	2204      	movs	r2, #4
 800284e:	496f      	ldr	r1, [pc, #444]	@ (8002a0c <configureSettings+0x2e0>)
 8002850:	486f      	ldr	r0, [pc, #444]	@ (8002a10 <configureSettings+0x2e4>)
 8002852:	f7ff fa3d 	bl	8001cd0 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002856:	2205      	movs	r2, #5
 8002858:	496c      	ldr	r1, [pc, #432]	@ (8002a0c <configureSettings+0x2e0>)
 800285a:	486f      	ldr	r0, [pc, #444]	@ (8002a18 <configureSettings+0x2ec>)
 800285c:	f7ff fa38 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002860:	496a      	ldr	r1, [pc, #424]	@ (8002a0c <configureSettings+0x2e0>)
 8002862:	486c      	ldr	r0, [pc, #432]	@ (8002a14 <configureSettings+0x2e8>)
 8002864:	f7ff fa9e 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002868:	4968      	ldr	r1, [pc, #416]	@ (8002a0c <configureSettings+0x2e0>)
 800286a:	486c      	ldr	r0, [pc, #432]	@ (8002a1c <configureSettings+0x2f0>)
 800286c:	f7ff fa9a 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 8002870:	4966      	ldr	r1, [pc, #408]	@ (8002a0c <configureSettings+0x2e0>)
 8002872:	486b      	ldr	r0, [pc, #428]	@ (8002a20 <configureSettings+0x2f4>)
 8002874:	f7ff fa96 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002878:	4964      	ldr	r1, [pc, #400]	@ (8002a0c <configureSettings+0x2e0>)
 800287a:	486a      	ldr	r0, [pc, #424]	@ (8002a24 <configureSettings+0x2f8>)
 800287c:	f7ff fa92 	bl	8001da4 <removeBitmapFromDisplay>
					break;
 8002880:	e0a0      	b.n	80029c4 <configureSettings+0x298>
				case 2:
					addBitmapToDisplay(MENU_BIRTHDAY, (LED *) currentDisplay, BLINK);
 8002882:	2204      	movs	r2, #4
 8002884:	4961      	ldr	r1, [pc, #388]	@ (8002a0c <configureSettings+0x2e0>)
 8002886:	4866      	ldr	r0, [pc, #408]	@ (8002a20 <configureSettings+0x2f4>)
 8002888:	f7ff fa22 	bl	8001cd0 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 800288c:	2205      	movs	r2, #5
 800288e:	495f      	ldr	r1, [pc, #380]	@ (8002a0c <configureSettings+0x2e0>)
 8002890:	4861      	ldr	r0, [pc, #388]	@ (8002a18 <configureSettings+0x2ec>)
 8002892:	f7ff fa1d 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002896:	495d      	ldr	r1, [pc, #372]	@ (8002a0c <configureSettings+0x2e0>)
 8002898:	485e      	ldr	r0, [pc, #376]	@ (8002a14 <configureSettings+0x2e8>)
 800289a:	f7ff fa83 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 800289e:	495b      	ldr	r1, [pc, #364]	@ (8002a0c <configureSettings+0x2e0>)
 80028a0:	485e      	ldr	r0, [pc, #376]	@ (8002a1c <configureSettings+0x2f0>)
 80028a2:	f7ff fa7f 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 80028a6:	4959      	ldr	r1, [pc, #356]	@ (8002a0c <configureSettings+0x2e0>)
 80028a8:	4859      	ldr	r0, [pc, #356]	@ (8002a10 <configureSettings+0x2e4>)
 80028aa:	f7ff fa7b 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 80028ae:	4957      	ldr	r1, [pc, #348]	@ (8002a0c <configureSettings+0x2e0>)
 80028b0:	485c      	ldr	r0, [pc, #368]	@ (8002a24 <configureSettings+0x2f8>)
 80028b2:	f7ff fa77 	bl	8001da4 <removeBitmapFromDisplay>
					break;
 80028b6:	e085      	b.n	80029c4 <configureSettings+0x298>
				case 1:
					addBitmapToDisplay(MENU_COLOR, (LED *) currentDisplay, BLINK);
 80028b8:	2204      	movs	r2, #4
 80028ba:	4954      	ldr	r1, [pc, #336]	@ (8002a0c <configureSettings+0x2e0>)
 80028bc:	4857      	ldr	r0, [pc, #348]	@ (8002a1c <configureSettings+0x2f0>)
 80028be:	f7ff fa07 	bl	8001cd0 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 80028c2:	2205      	movs	r2, #5
 80028c4:	4951      	ldr	r1, [pc, #324]	@ (8002a0c <configureSettings+0x2e0>)
 80028c6:	4854      	ldr	r0, [pc, #336]	@ (8002a18 <configureSettings+0x2ec>)
 80028c8:	f7ff fa02 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 80028cc:	494f      	ldr	r1, [pc, #316]	@ (8002a0c <configureSettings+0x2e0>)
 80028ce:	4851      	ldr	r0, [pc, #324]	@ (8002a14 <configureSettings+0x2e8>)
 80028d0:	f7ff fa68 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 80028d4:	494d      	ldr	r1, [pc, #308]	@ (8002a0c <configureSettings+0x2e0>)
 80028d6:	484e      	ldr	r0, [pc, #312]	@ (8002a10 <configureSettings+0x2e4>)
 80028d8:	f7ff fa64 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 80028dc:	494b      	ldr	r1, [pc, #300]	@ (8002a0c <configureSettings+0x2e0>)
 80028de:	4850      	ldr	r0, [pc, #320]	@ (8002a20 <configureSettings+0x2f4>)
 80028e0:	f7ff fa60 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 80028e4:	4949      	ldr	r1, [pc, #292]	@ (8002a0c <configureSettings+0x2e0>)
 80028e6:	484f      	ldr	r0, [pc, #316]	@ (8002a24 <configureSettings+0x2f8>)
 80028e8:	f7ff fa5c 	bl	8001da4 <removeBitmapFromDisplay>

					break;
 80028ec:	e06a      	b.n	80029c4 <configureSettings+0x298>
				case 0:
					addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, BLINK);
 80028ee:	2204      	movs	r2, #4
 80028f0:	4946      	ldr	r1, [pc, #280]	@ (8002a0c <configureSettings+0x2e0>)
 80028f2:	484c      	ldr	r0, [pc, #304]	@ (8002a24 <configureSettings+0x2f8>)
 80028f4:	f7ff f9ec 	bl	8001cd0 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 80028f8:	2205      	movs	r2, #5
 80028fa:	4944      	ldr	r1, [pc, #272]	@ (8002a0c <configureSettings+0x2e0>)
 80028fc:	4846      	ldr	r0, [pc, #280]	@ (8002a18 <configureSettings+0x2ec>)
 80028fe:	f7ff f9e7 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_DELETE, currentDisplay);
 8002902:	4942      	ldr	r1, [pc, #264]	@ (8002a0c <configureSettings+0x2e0>)
 8002904:	4843      	ldr	r0, [pc, #268]	@ (8002a14 <configureSettings+0x2e8>)
 8002906:	f7ff fa4d 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 800290a:	4940      	ldr	r1, [pc, #256]	@ (8002a0c <configureSettings+0x2e0>)
 800290c:	4843      	ldr	r0, [pc, #268]	@ (8002a1c <configureSettings+0x2f0>)
 800290e:	f7ff fa49 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 8002912:	493e      	ldr	r1, [pc, #248]	@ (8002a0c <configureSettings+0x2e0>)
 8002914:	4842      	ldr	r0, [pc, #264]	@ (8002a20 <configureSettings+0x2f4>)
 8002916:	f7ff fa45 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 800291a:	493c      	ldr	r1, [pc, #240]	@ (8002a0c <configureSettings+0x2e0>)
 800291c:	483c      	ldr	r0, [pc, #240]	@ (8002a10 <configureSettings+0x2e4>)
 800291e:	f7ff fa41 	bl	8001da4 <removeBitmapFromDisplay>
					break;
 8002922:	e04f      	b.n	80029c4 <configureSettings+0x298>
				default:
					break;
				}
			} else {
				//delete mode
				uint8_t lowerBound = 2 + isAnniversarySet();
 8002924:	f000 fcd0 	bl	80032c8 <isAnniversarySet>
 8002928:	4603      	mov	r3, r0
 800292a:	3302      	adds	r3, #2
 800292c:	713b      	strb	r3, [r7, #4]
				uint8_t upperBound = 2 + !isBirthdaySet();
 800292e:	f000 fcdb 	bl	80032e8 <isBirthdaySet>
 8002932:	4603      	mov	r3, r0
 8002934:	f083 0301 	eor.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3302      	adds	r3, #2
 800293c:	70fb      	strb	r3, [r7, #3]
				switch(getCounterWithinBounds(lowerBound, upperBound)) {
 800293e:	793b      	ldrb	r3, [r7, #4]
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f9d7 	bl	8002cf8 <getCounterWithinBounds>
 800294a:	4603      	mov	r3, r0
 800294c:	2b02      	cmp	r3, #2
 800294e:	d01d      	beq.n	800298c <configureSettings+0x260>
 8002950:	2b03      	cmp	r3, #3
 8002952:	f040 8147 	bne.w	8002be4 <configureSettings+0x4b8>
				case 3: //0 anniversary
					addBitmapToDisplay(MENU_ANNIVERSARY, (LED *) currentDisplay, BLINK);
 8002956:	2204      	movs	r2, #4
 8002958:	492c      	ldr	r1, [pc, #176]	@ (8002a0c <configureSettings+0x2e0>)
 800295a:	482d      	ldr	r0, [pc, #180]	@ (8002a10 <configureSettings+0x2e4>)
 800295c:	f7ff f9b8 	bl	8001cd0 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 8002960:	2205      	movs	r2, #5
 8002962:	492a      	ldr	r1, [pc, #168]	@ (8002a0c <configureSettings+0x2e0>)
 8002964:	482b      	ldr	r0, [pc, #172]	@ (8002a14 <configureSettings+0x2e8>)
 8002966:	f7ff f9b3 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 800296a:	4928      	ldr	r1, [pc, #160]	@ (8002a0c <configureSettings+0x2e0>)
 800296c:	482a      	ldr	r0, [pc, #168]	@ (8002a18 <configureSettings+0x2ec>)
 800296e:	f7ff fa19 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 8002972:	4926      	ldr	r1, [pc, #152]	@ (8002a0c <configureSettings+0x2e0>)
 8002974:	4829      	ldr	r0, [pc, #164]	@ (8002a1c <configureSettings+0x2f0>)
 8002976:	f7ff fa15 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_BIRTHDAY, currentDisplay);
 800297a:	4924      	ldr	r1, [pc, #144]	@ (8002a0c <configureSettings+0x2e0>)
 800297c:	4828      	ldr	r0, [pc, #160]	@ (8002a20 <configureSettings+0x2f4>)
 800297e:	f7ff fa11 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 8002982:	4922      	ldr	r1, [pc, #136]	@ (8002a0c <configureSettings+0x2e0>)
 8002984:	4827      	ldr	r0, [pc, #156]	@ (8002a24 <configureSettings+0x2f8>)
 8002986:	f7ff fa0d 	bl	8001da4 <removeBitmapFromDisplay>
					break;
 800298a:	e01b      	b.n	80029c4 <configureSettings+0x298>
				case 2:
					addBitmapToDisplay(MENU_BIRTHDAY, (LED *) currentDisplay, BLINK);
 800298c:	2204      	movs	r2, #4
 800298e:	491f      	ldr	r1, [pc, #124]	@ (8002a0c <configureSettings+0x2e0>)
 8002990:	4823      	ldr	r0, [pc, #140]	@ (8002a20 <configureSettings+0x2f4>)
 8002992:	f7ff f99d 	bl	8001cd0 <addBitmapToDisplay>
					addBitmapToDisplay(MENU_DELETE, (LED *) currentDisplay, CONSTANT);
 8002996:	2205      	movs	r2, #5
 8002998:	491c      	ldr	r1, [pc, #112]	@ (8002a0c <configureSettings+0x2e0>)
 800299a:	481e      	ldr	r0, [pc, #120]	@ (8002a14 <configureSettings+0x2e8>)
 800299c:	f7ff f998 	bl	8001cd0 <addBitmapToDisplay>
					removeBitmapFromDisplay(MENU_SET, currentDisplay);
 80029a0:	491a      	ldr	r1, [pc, #104]	@ (8002a0c <configureSettings+0x2e0>)
 80029a2:	481d      	ldr	r0, [pc, #116]	@ (8002a18 <configureSettings+0x2ec>)
 80029a4:	f7ff f9fe 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_COLOR, currentDisplay);
 80029a8:	4918      	ldr	r1, [pc, #96]	@ (8002a0c <configureSettings+0x2e0>)
 80029aa:	481c      	ldr	r0, [pc, #112]	@ (8002a1c <configureSettings+0x2f0>)
 80029ac:	f7ff f9fa 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_ANNIVERSARY, currentDisplay);
 80029b0:	4916      	ldr	r1, [pc, #88]	@ (8002a0c <configureSettings+0x2e0>)
 80029b2:	4817      	ldr	r0, [pc, #92]	@ (8002a10 <configureSettings+0x2e4>)
 80029b4:	f7ff f9f6 	bl	8001da4 <removeBitmapFromDisplay>
					removeBitmapFromDisplay(MENU_TIME, currentDisplay);
 80029b8:	4914      	ldr	r1, [pc, #80]	@ (8002a0c <configureSettings+0x2e0>)
 80029ba:	481a      	ldr	r0, [pc, #104]	@ (8002a24 <configureSettings+0x2f8>)
 80029bc:	f7ff f9f2 	bl	8001da4 <removeBitmapFromDisplay>
					break;
 80029c0:	e000      	b.n	80029c4 <configureSettings+0x298>
					break;
 80029c2:	bf00      	nop
				}
			}
			break;
 80029c4:	e10e      	b.n	8002be4 <configureSettings+0x4b8>
		case SET_HOURS:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 80029c6:	2205      	movs	r2, #5
 80029c8:	4910      	ldr	r1, [pc, #64]	@ (8002a0c <configureSettings+0x2e0>)
 80029ca:	4813      	ldr	r0, [pc, #76]	@ (8002a18 <configureSettings+0x2ec>)
 80029cc:	f7ff f980 	bl	8001cd0 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, CONSTANT);
 80029d0:	2205      	movs	r2, #5
 80029d2:	490e      	ldr	r1, [pc, #56]	@ (8002a0c <configureSettings+0x2e0>)
 80029d4:	4813      	ldr	r0, [pc, #76]	@ (8002a24 <configureSettings+0x2f8>)
 80029d6:	f7ff f97b 	bl	8001cd0 <addBitmapToDisplay>
			setDisplayString("%02d%02d", getCounterWithinBounds(0, 23), getTime()->Minutes);
 80029da:	2117      	movs	r1, #23
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 f98b 	bl	8002cf8 <getCounterWithinBounds>
 80029e2:	4604      	mov	r4, r0
 80029e4:	f000 f9e2 	bl	8002dac <getTime>
 80029e8:	4603      	mov	r3, r0
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4621      	mov	r1, r4
 80029f0:	4810      	ldr	r0, [pc, #64]	@ (8002a34 <configureSettings+0x308>)
 80029f2:	f000 fb4d 	bl	8003090 <setDisplayString>
		    getTime()->Hours = (uint8_t) getCounterWithinBounds(0, 23);
 80029f6:	2117      	movs	r1, #23
 80029f8:	2000      	movs	r0, #0
 80029fa:	f000 f97d 	bl	8002cf8 <getCounterWithinBounds>
 80029fe:	4604      	mov	r4, r0
 8002a00:	f000 f9d4 	bl	8002dac <getTime>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b2e2      	uxtb	r2, r4
 8002a08:	701a      	strb	r2, [r3, #0]
			break;
 8002a0a:	e0ec      	b.n	8002be6 <configureSettings+0x4ba>
 8002a0c:	20002044 	.word	0x20002044
 8002a10:	08008c2a 	.word	0x08008c2a
 8002a14:	08008bc2 	.word	0x08008bc2
 8002a18:	08008ba8 	.word	0x08008ba8
 8002a1c:	08008bf6 	.word	0x08008bf6
 8002a20:	08008c10 	.word	0x08008c10
 8002a24:	08008bdc 	.word	0x08008bdc
 8002a28:	0800870c 	.word	0x0800870c
 8002a2c:	08008710 	.word	0x08008710
 8002a30:	08008714 	.word	0x08008714
 8002a34:	08008718 	.word	0x08008718
		case SET_MINUTES:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002a38:	2205      	movs	r2, #5
 8002a3a:	496d      	ldr	r1, [pc, #436]	@ (8002bf0 <configureSettings+0x4c4>)
 8002a3c:	486d      	ldr	r0, [pc, #436]	@ (8002bf4 <configureSettings+0x4c8>)
 8002a3e:	f7ff f947 	bl	8001cd0 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, CONSTANT);
 8002a42:	2205      	movs	r2, #5
 8002a44:	496a      	ldr	r1, [pc, #424]	@ (8002bf0 <configureSettings+0x4c4>)
 8002a46:	486c      	ldr	r0, [pc, #432]	@ (8002bf8 <configureSettings+0x4cc>)
 8002a48:	f7ff f942 	bl	8001cd0 <addBitmapToDisplay>
			setDisplayString("%02d%02d", getTime()->Hours, getCounterWithinBounds(0, 59));
 8002a4c:	f000 f9ae 	bl	8002dac <getTime>
 8002a50:	4603      	mov	r3, r0
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461c      	mov	r4, r3
 8002a56:	213b      	movs	r1, #59	@ 0x3b
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f000 f94d 	bl	8002cf8 <getCounterWithinBounds>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4621      	mov	r1, r4
 8002a64:	4865      	ldr	r0, [pc, #404]	@ (8002bfc <configureSettings+0x4d0>)
 8002a66:	f000 fb13 	bl	8003090 <setDisplayString>
		    getTime()->Minutes = (uint8_t) getCounterWithinBounds(0, 59);
 8002a6a:	213b      	movs	r1, #59	@ 0x3b
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f000 f943 	bl	8002cf8 <getCounterWithinBounds>
 8002a72:	4604      	mov	r4, r0
 8002a74:	f000 f99a 	bl	8002dac <getTime>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	b2e2      	uxtb	r2, r4
 8002a7c:	705a      	strb	r2, [r3, #1]
			break;
 8002a7e:	e0b2      	b.n	8002be6 <configureSettings+0x4ba>
		case SET_MONTH:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002a80:	2205      	movs	r2, #5
 8002a82:	495b      	ldr	r1, [pc, #364]	@ (8002bf0 <configureSettings+0x4c4>)
 8002a84:	485b      	ldr	r0, [pc, #364]	@ (8002bf4 <configureSettings+0x4c8>)
 8002a86:	f7ff f923 	bl	8001cd0 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_TIME, (LED *) currentDisplay, CONSTANT);
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	4958      	ldr	r1, [pc, #352]	@ (8002bf0 <configureSettings+0x4c4>)
 8002a8e:	485a      	ldr	r0, [pc, #360]	@ (8002bf8 <configureSettings+0x4cc>)
 8002a90:	f7ff f91e 	bl	8001cd0 <addBitmapToDisplay>
			getCounterWithinBounds(0, 12);
 8002a94:	210c      	movs	r1, #12
 8002a96:	2000      	movs	r0, #0
 8002a98:	f000 f92e 	bl	8002cf8 <getCounterWithinBounds>
			setDisplayString("%02d%02d", getCounterWithinBounds(1, 12), getDate(getDateState())->Date);
 8002a9c:	210c      	movs	r1, #12
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f000 f92a 	bl	8002cf8 <getCounterWithinBounds>
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	f000 faa5 	bl	8002ff4 <getDateState>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f987 	bl	8002dc0 <getDate>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	789b      	ldrb	r3, [r3, #2]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4621      	mov	r1, r4
 8002aba:	4850      	ldr	r0, [pc, #320]	@ (8002bfc <configureSettings+0x4d0>)
 8002abc:	f000 fae8 	bl	8003090 <setDisplayString>
		    getDate(getDateState())->Month = (uint8_t) getCounterWithinBounds(0, 12);
 8002ac0:	210c      	movs	r1, #12
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f000 f918 	bl	8002cf8 <getCounterWithinBounds>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	f000 fa93 	bl	8002ff4 <getDateState>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f975 	bl	8002dc0 <getDate>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b2e2      	uxtb	r2, r4
 8002ada:	705a      	strb	r2, [r3, #1]
			break;
 8002adc:	e083      	b.n	8002be6 <configureSettings+0x4ba>
		case SET_DAY:;
		//FIXME: if the time changes to a 5m interval it will advance frame and erase the menu selections
		    uint8_t maxDay;
		    uint8_t selectedMonth = getDate(getDateState())->Month;
 8002ade:	f000 fa89 	bl	8002ff4 <getDateState>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f96b 	bl	8002dc0 <getDate>
 8002aea:	4603      	mov	r3, r0
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	717b      	strb	r3, [r7, #5]

		    if(selectedMonth == 2) {
 8002af0:	797b      	ldrb	r3, [r7, #5]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d102      	bne.n	8002afc <configureSettings+0x3d0>
		    	maxDay = 29;
 8002af6:	231d      	movs	r3, #29
 8002af8:	71bb      	strb	r3, [r7, #6]
 8002afa:	e010      	b.n	8002b1e <configureSettings+0x3f2>
		    } else if(selectedMonth == 4 || selectedMonth == 6 || selectedMonth == 9 || selectedMonth == 11) {
 8002afc:	797b      	ldrb	r3, [r7, #5]
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d008      	beq.n	8002b14 <configureSettings+0x3e8>
 8002b02:	797b      	ldrb	r3, [r7, #5]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d005      	beq.n	8002b14 <configureSettings+0x3e8>
 8002b08:	797b      	ldrb	r3, [r7, #5]
 8002b0a:	2b09      	cmp	r3, #9
 8002b0c:	d002      	beq.n	8002b14 <configureSettings+0x3e8>
 8002b0e:	797b      	ldrb	r3, [r7, #5]
 8002b10:	2b0b      	cmp	r3, #11
 8002b12:	d102      	bne.n	8002b1a <configureSettings+0x3ee>
		        maxDay = 30;
 8002b14:	231e      	movs	r3, #30
 8002b16:	71bb      	strb	r3, [r7, #6]
 8002b18:	e001      	b.n	8002b1e <configureSettings+0x3f2>
		    } else {
		        maxDay = 31;
 8002b1a:	231f      	movs	r3, #31
 8002b1c:	71bb      	strb	r3, [r7, #6]
		    }

		    setDisplayString("%02d%02d", selectedMonth, getCounterWithinBounds(0, maxDay));
 8002b1e:	797c      	ldrb	r4, [r7, #5]
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	4619      	mov	r1, r3
 8002b24:	2000      	movs	r0, #0
 8002b26:	f000 f8e7 	bl	8002cf8 <getCounterWithinBounds>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4621      	mov	r1, r4
 8002b30:	4832      	ldr	r0, [pc, #200]	@ (8002bfc <configureSettings+0x4d0>)
 8002b32:	f000 faad 	bl	8003090 <setDisplayString>

		case SET_YEAR:
			setDisplayString("20%02d", getCounterWithinBounds(0, 99));
 8002b36:	2163      	movs	r1, #99	@ 0x63
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f000 f8dd 	bl	8002cf8 <getCounterWithinBounds>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4619      	mov	r1, r3
 8002b42:	482f      	ldr	r0, [pc, #188]	@ (8002c00 <configureSettings+0x4d4>)
 8002b44:	f000 faa4 	bl	8003090 <setDisplayString>
		    getDate(getDateState())->Year = (uint8_t) getCounterWithinBounds(0, 99);
 8002b48:	2163      	movs	r1, #99	@ 0x63
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f000 f8d4 	bl	8002cf8 <getCounterWithinBounds>
 8002b50:	4604      	mov	r4, r0
 8002b52:	f000 fa4f 	bl	8002ff4 <getDateState>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f931 	bl	8002dc0 <getDate>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	b2e2      	uxtb	r2, r4
 8002b62:	70da      	strb	r2, [r3, #3]
			break;
 8002b64:	e03f      	b.n	8002be6 <configureSettings+0x4ba>
		case SET_COLOR:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002b66:	2205      	movs	r2, #5
 8002b68:	4921      	ldr	r1, [pc, #132]	@ (8002bf0 <configureSettings+0x4c4>)
 8002b6a:	4822      	ldr	r0, [pc, #136]	@ (8002bf4 <configureSettings+0x4c8>)
 8002b6c:	f7ff f8b0 	bl	8001cd0 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_COLOR, (LED *) currentDisplay, CONSTANT);
 8002b70:	2205      	movs	r2, #5
 8002b72:	491f      	ldr	r1, [pc, #124]	@ (8002bf0 <configureSettings+0x4c4>)
 8002b74:	4823      	ldr	r0, [pc, #140]	@ (8002c04 <configureSettings+0x4d8>)
 8002b76:	f7ff f8ab 	bl	8001cd0 <addBitmapToDisplay>
			setDisplayString("%02d", getCounterWithinBounds(0, 16));
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f000 f8bb 	bl	8002cf8 <getCounterWithinBounds>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4619      	mov	r1, r3
 8002b86:	4820      	ldr	r0, [pc, #128]	@ (8002c08 <configureSettings+0x4dc>)
 8002b88:	f000 fa82 	bl	8003090 <setDisplayString>
			setColorWithPreset(getCounterWithinBounds(0, 16));
 8002b8c:	2110      	movs	r1, #16
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f000 f8b2 	bl	8002cf8 <getCounterWithinBounds>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fa9c 	bl	80030d4 <setColorWithPreset>
			updateDisplayColor();
 8002b9c:	f7ff fa6a 	bl	8002074 <updateDisplayColor>
			break;
 8002ba0:	e021      	b.n	8002be6 <configureSettings+0x4ba>
		case SET_BRIGHTNESS:
			addBitmapToDisplay(MENU_SET, (LED *) currentDisplay, CONSTANT);
 8002ba2:	2205      	movs	r2, #5
 8002ba4:	4912      	ldr	r1, [pc, #72]	@ (8002bf0 <configureSettings+0x4c4>)
 8002ba6:	4813      	ldr	r0, [pc, #76]	@ (8002bf4 <configureSettings+0x4c8>)
 8002ba8:	f7ff f892 	bl	8001cd0 <addBitmapToDisplay>
			addBitmapToDisplay(MENU_COLOR, (LED *) currentDisplay, CONSTANT);
 8002bac:	2205      	movs	r2, #5
 8002bae:	4910      	ldr	r1, [pc, #64]	@ (8002bf0 <configureSettings+0x4c4>)
 8002bb0:	4814      	ldr	r0, [pc, #80]	@ (8002c04 <configureSettings+0x4d8>)
 8002bb2:	f7ff f88d 	bl	8001cd0 <addBitmapToDisplay>
			setDisplayString("%02d", getCounterWithinBounds(1, 100));
 8002bb6:	2164      	movs	r1, #100	@ 0x64
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f000 f89d 	bl	8002cf8 <getCounterWithinBounds>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4811      	ldr	r0, [pc, #68]	@ (8002c08 <configureSettings+0x4dc>)
 8002bc4:	f000 fa64 	bl	8003090 <setDisplayString>
			setBrightness(getCounterWithinBounds(1, 100));
 8002bc8:	2164      	movs	r1, #100	@ 0x64
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f000 f894 	bl	8002cf8 <getCounterWithinBounds>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fb67 	bl	80032a8 <setBrightness>
			updateDisplayColor();
 8002bda:	f7ff fa4b 	bl	8002074 <updateDisplayColor>
			break;
 8002bde:	e002      	b.n	8002be6 <configureSettings+0x4ba>
		default:
			break;
 8002be0:	bf00      	nop
 8002be2:	e000      	b.n	8002be6 <configureSettings+0x4ba>
			break;
 8002be4:	bf00      	nop
	}


}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20002044 	.word	0x20002044
 8002bf4:	08008ba8 	.word	0x08008ba8
 8002bf8:	08008bdc 	.word	0x08008bdc
 8002bfc:	08008718 	.word	0x08008718
 8002c00:	08008724 	.word	0x08008724
 8002c04:	08008bf6 	.word	0x08008bf6
 8002c08:	0800872c 	.word	0x0800872c

08002c0c <clamp>:
RgbColor brightnessColor;
uint8_t colorPreset;

#define UNDERFLOW_TRIGGER 65500

uint32_t clamp(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]

	if(value > UNDERFLOW_TRIGGER) return minVal;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <clamp+0x1a>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	e00c      	b.n	8002c40 <clamp+0x34>
	if (value < minVal) return minVal;
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d201      	bcs.n	8002c32 <clamp+0x26>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	e006      	b.n	8002c40 <clamp+0x34>
	if (value > maxVal) return maxVal;
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d901      	bls.n	8002c3e <clamp+0x32>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	e000      	b.n	8002c40 <clamp+0x34>
	return value;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <setCounterBounds>:

void setCounterBounds(uint32_t _minVal, uint32_t _maxVal) {
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
	minVal = _minVal;
 8002c56:	4a06      	ldr	r2, [pc, #24]	@ (8002c70 <setCounterBounds+0x24>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6013      	str	r3, [r2, #0]
	maxVal = _maxVal;
 8002c5c:	4a05      	ldr	r2, [pc, #20]	@ (8002c74 <setCounterBounds+0x28>)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6013      	str	r3, [r2, #0]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20002324 	.word	0x20002324
 8002c74:	20000054 	.word	0x20000054

08002c78 <getDeviceState>:

DeviceState getDeviceState(void) {
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
	return currentState;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	@ (8002c8c <getDeviceState+0x14>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	2000230f 	.word	0x2000230f

08002c90 <setDeviceState>:

void setDeviceState(DeviceState _currentState) {
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
	currentState = _currentState;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <setDeviceState+0x1c>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	7013      	strb	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	2000230f 	.word	0x2000230f

08002cb0 <getCounter>:

uint32_t getCounter(void) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	setCounter(clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal));
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <getCounter+0x3c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <getCounter+0x40>)
 8002cbc:	6811      	ldr	r1, [r2, #0]
 8002cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <getCounter+0x44>)
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ffa2 	bl	8002c0c <clamp>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f842 	bl	8002d54 <setCounter>
	return clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal);
 8002cd0:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <getCounter+0x3c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	4a06      	ldr	r2, [pc, #24]	@ (8002cf0 <getCounter+0x40>)
 8002cd8:	6811      	ldr	r1, [r2, #0]
 8002cda:	4a06      	ldr	r2, [pc, #24]	@ (8002cf4 <getCounter+0x44>)
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff94 	bl	8002c0c <clamp>
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20002394 	.word	0x20002394
 8002cf0:	20002324 	.word	0x20002324
 8002cf4:	20000054 	.word	0x20000054

08002cf8 <getCounterWithinBounds>:

uint32_t getCounterWithinBounds(uint32_t _minVal, uint32_t _maxVal) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
	minVal = _minVal;
 8002d02:	4a11      	ldr	r2, [pc, #68]	@ (8002d48 <getCounterWithinBounds+0x50>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6013      	str	r3, [r2, #0]
	maxVal = _maxVal;
 8002d08:	4a10      	ldr	r2, [pc, #64]	@ (8002d4c <getCounterWithinBounds+0x54>)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6013      	str	r3, [r2, #0]
	setCounter(clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal));
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <getCounterWithinBounds+0x58>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	4a0c      	ldr	r2, [pc, #48]	@ (8002d48 <getCounterWithinBounds+0x50>)
 8002d16:	6811      	ldr	r1, [r2, #0]
 8002d18:	4a0c      	ldr	r2, [pc, #48]	@ (8002d4c <getCounterWithinBounds+0x54>)
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff75 	bl	8002c0c <clamp>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 f815 	bl	8002d54 <setCounter>
	return clamp(__HAL_TIM_GET_COUNTER(&htim3), minVal, maxVal);
 8002d2a:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <getCounterWithinBounds+0x58>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	4a05      	ldr	r2, [pc, #20]	@ (8002d48 <getCounterWithinBounds+0x50>)
 8002d32:	6811      	ldr	r1, [r2, #0]
 8002d34:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <getCounterWithinBounds+0x54>)
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff67 	bl	8002c0c <clamp>
 8002d3e:	4603      	mov	r3, r0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20002324 	.word	0x20002324
 8002d4c:	20000054 	.word	0x20000054
 8002d50:	20002394 	.word	0x20002394

08002d54 <setCounter>:

void setCounter(uint32_t _counter) {
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	setCounterBounds(0,-1);
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7ff ff73 	bl	8002c4c <setCounterBounds>
	counter = clamp(_counter, minVal, maxVal);
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <setCounter+0x48>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <setCounter+0x4c>)
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff4b 	bl	8002c0c <clamp>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <setCounter+0x50>)
 8002d7a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, clamp(_counter, minVal, maxVal));
 8002d7c:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <setCounter+0x48>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a07      	ldr	r2, [pc, #28]	@ (8002da0 <setCounter+0x4c>)
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	4908      	ldr	r1, [pc, #32]	@ (8002da8 <setCounter+0x54>)
 8002d86:	680c      	ldr	r4, [r1, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff3e 	bl	8002c0c <clamp>
 8002d90:	4603      	mov	r3, r0
 8002d92:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	20002324 	.word	0x20002324
 8002da0:	20000054 	.word	0x20000054
 8002da4:	20002310 	.word	0x20002310
 8002da8:	20002394 	.word	0x20002394

08002dac <getTime>:

uint32_t getSelected(void) {
	return counter;
}

RTC_TimeTypeDef* getTime(void) {
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
	return &sTime;
 8002db0:	4b02      	ldr	r3, [pc, #8]	@ (8002dbc <getTime+0x10>)
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	2000243c 	.word	0x2000243c

08002dc0 <getDate>:

RTC_DateTypeDef* getDate(DateType type) {
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
	switch(type) {
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d00a      	beq.n	8002de6 <getDate+0x26>
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	dc0a      	bgt.n	8002dea <getDate+0x2a>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <getDate+0x1e>
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d002      	beq.n	8002de2 <getDate+0x22>
 8002ddc:	e005      	b.n	8002dea <getDate+0x2a>
		case SYSTEM_DATE:
			return &sDate;
 8002dde:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <getDate+0x38>)
 8002de0:	e004      	b.n	8002dec <getDate+0x2c>
		case ANNIVERSARY_DATE:
			return &aDate;
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <getDate+0x3c>)
 8002de4:	e002      	b.n	8002dec <getDate+0x2c>
		case BIRTHDAY_DATE:
			return &bDate;
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <getDate+0x40>)
 8002de8:	e000      	b.n	8002dec <getDate+0x2c>
		default:
			return &sDate;
 8002dea:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <getDate+0x38>)
	}
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	20000058 	.word	0x20000058
 8002dfc:	2000005c 	.word	0x2000005c
 8002e00:	20000060 	.word	0x20000060

08002e04 <setDate>:

void setDate(RTC_DateTypeDef tDate, DateType type) {
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
    switch(type) {
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d014      	beq.n	8002e40 <setDate+0x3c>
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	dc1a      	bgt.n	8002e50 <setDate+0x4c>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <setDate+0x20>
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d006      	beq.n	8002e30 <setDate+0x2c>
        case BIRTHDAY_DATE:
        	tDate.Year = 0;
            bDate = tDate;
            break;
        default:
        	break;
 8002e22:	e015      	b.n	8002e50 <setDate+0x4c>
            sDate = tDate;
 8002e24:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <setDate+0x5c>)
 8002e26:	461a      	mov	r2, r3
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	6010      	str	r0, [r2, #0]
            break;
 8002e2e:	e010      	b.n	8002e52 <setDate+0x4e>
        	tDate.Year = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	71fb      	strb	r3, [r7, #7]
            aDate = tDate;
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <setDate+0x60>)
 8002e36:	461a      	mov	r2, r3
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	6010      	str	r0, [r2, #0]
            break;
 8002e3e:	e008      	b.n	8002e52 <setDate+0x4e>
        	tDate.Year = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	71fb      	strb	r3, [r7, #7]
            bDate = tDate;
 8002e44:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <setDate+0x64>)
 8002e46:	461a      	mov	r2, r3
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	6010      	str	r0, [r2, #0]
            break;
 8002e4e:	e000      	b.n	8002e52 <setDate+0x4e>
        	break;
 8002e50:	bf00      	nop
    }
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000058 	.word	0x20000058
 8002e64:	2000005c 	.word	0x2000005c
 8002e68:	20000060 	.word	0x20000060
 8002e6c:	00000000 	.word	0x00000000

08002e70 <getColor>:

void setColor(RgbColor _color) {
	color = _color;
}

RgbColor getColor(void) {
 8002e70:	b5b0      	push	{r4, r5, r7, lr}
 8002e72:	b0c2      	sub	sp, #264	@ 0x108
 8002e74:	af00      	add	r7, sp, #0
	const uint8_t gamma_lut[256] = {
 8002e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e7e:	4a5a      	ldr	r2, [pc, #360]	@ (8002fe8 <getColor+0x178>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	4611      	mov	r1, r2
 8002e84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f004 fc5e 	bl	800774a <memcpy>
	   170, 171, 173, 175, 176, 178, 180, 181, 183, 185, 186, 188, 190, 192, 193, 195,
	   197, 199, 200, 202, 204, 206, 207, 209, 211, 213, 215, 217, 218, 220, 222, 224,
	   226, 228, 230, 232, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255,
	  };

	uint8_t corrected_brightness = gamma_lut[brightness];
 8002e8e:	4b57      	ldr	r3, [pc, #348]	@ (8002fec <getColor+0x17c>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e9c:	5c9b      	ldrb	r3, [r3, r2]
 8002e9e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

	RgbColor _color;

	_color.r = (uint8_t) ((double) gamma_lut[color.r] * (double) ((double) corrected_brightness / (double) 255.0));
 8002ea2:	4b53      	ldr	r3, [pc, #332]	@ (8002ff0 <getColor+0x180>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002eac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fb26 	bl	8000504 <__aeabi_ui2d>
 8002eb8:	4604      	mov	r4, r0
 8002eba:	460d      	mov	r5, r1
 8002ebc:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb1f 	bl	8000504 <__aeabi_ui2d>
 8002ec6:	a346      	add	r3, pc, #280	@ (adr r3, 8002fe0 <getColor+0x170>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f7fd fcbe 	bl	800084c <__aeabi_ddiv>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	f7fd fb8e 	bl	80005f8 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f7fd fd9a 	bl	8000a1c <__aeabi_d2uiz>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ef4:	701a      	strb	r2, [r3, #0]
	_color.g = (uint8_t) ((double) gamma_lut[color.g] * (double) ((double) corrected_brightness / (double) 255.0));
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff0 <getColor+0x180>)
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f04:	5c9b      	ldrb	r3, [r3, r2]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fafc 	bl	8000504 <__aeabi_ui2d>
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	460d      	mov	r5, r1
 8002f10:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd faf5 	bl	8000504 <__aeabi_ui2d>
 8002f1a:	a331      	add	r3, pc, #196	@ (adr r3, 8002fe0 <getColor+0x170>)
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f7fd fc94 	bl	800084c <__aeabi_ddiv>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4620      	mov	r0, r4
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	f7fd fb64 	bl	80005f8 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f7fd fd70 	bl	8000a1c <__aeabi_d2uiz>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f48:	705a      	strb	r2, [r3, #1]
	_color.b = (uint8_t) ((double) gamma_lut[color.b] * (double) ((double) corrected_brightness  / (double) 255.0));
 8002f4a:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <getColor+0x180>)
 8002f4c:	789b      	ldrb	r3, [r3, #2]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f58:	5c9b      	ldrb	r3, [r3, r2]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fad2 	bl	8000504 <__aeabi_ui2d>
 8002f60:	4604      	mov	r4, r0
 8002f62:	460d      	mov	r5, r1
 8002f64:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd facb 	bl	8000504 <__aeabi_ui2d>
 8002f6e:	a31c      	add	r3, pc, #112	@ (adr r3, 8002fe0 <getColor+0x170>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f7fd fc6a 	bl	800084c <__aeabi_ddiv>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	4629      	mov	r1, r5
 8002f80:	f7fd fb3a 	bl	80005f8 <__aeabi_dmul>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7fd fd46 	bl	8000a1c <__aeabi_d2uiz>
 8002f90:	4603      	mov	r3, r0
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f9c:	709a      	strb	r2, [r3, #2]

	return _color;
 8002f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fa2:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8002fa6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	4611      	mov	r1, r2
 8002fae:	8019      	strh	r1, [r3, #0]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	0c12      	lsrs	r2, r2, #16
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f897 2104 	ldrb.w	r2, [r7, #260]	@ 0x104
 8002fbc:	f362 0307 	bfi	r3, r2, #0, #8
 8002fc0:	f897 2105 	ldrb.w	r2, [r7, #261]	@ 0x105
 8002fc4:	f362 230f 	bfi	r3, r2, #8, #8
 8002fc8:	f897 2106 	ldrb.w	r2, [r7, #262]	@ 0x106
 8002fcc:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	f3af 8000 	nop.w
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	406fe000 	.word	0x406fe000
 8002fe8:	08008734 	.word	0x08008734
 8002fec:	20000052 	.word	0x20000052
 8002ff0:	20002314 	.word	0x20002314

08002ff4 <getDateState>:

DateType getDateState(void) {
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	return dateState;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	@ (8003008 <getDateState+0x14>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20002317 	.word	0x20002317

0800300c <setDateState>:

void setDateState(DateType _dateState) {
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
	dateState = _dateState;
 8003016:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <setDateState+0x1c>)
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	7013      	strb	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20002317 	.word	0x20002317

0800302c <getBrightness>:

uint8_t getBrightness(void) {
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
	return brightness;
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <getBrightness+0x14>)
 8003032:	781b      	ldrb	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000052 	.word	0x20000052

08003044 <setMode>:

void setMode(Mode _mode) {
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
	mode = _mode;
 800304e:	4a04      	ldr	r2, [pc, #16]	@ (8003060 <setMode+0x1c>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	7013      	strb	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	20000051 	.word	0x20000051

08003064 <getMode>:

Mode getMode(void) {
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
	return mode;
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <getMode+0x14>)
 800306a:	781b      	ldrb	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000051 	.word	0x20000051

0800307c <getDisplayString>:

char *getDisplayString(void) {
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
	return (char *) displayStr;
 8003080:	4b02      	ldr	r3, [pc, #8]	@ (800308c <getDisplayString+0x10>)
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20002318 	.word	0x20002318

08003090 <setDisplayString>:

void setDisplayString(const char *format, ...) {
 8003090:	b40f      	push	{r0, r1, r2, r3}
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	607b      	str	r3, [r7, #4]
    vsnprintf(displayStr, MAX_STRING_LENGTH, format, args);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	210a      	movs	r1, #10
 80030a4:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <setDisplayString+0x28>)
 80030a6:	f004 fab3 	bl	8007610 <vsniprintf>
    va_end(args);
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030b4:	b004      	add	sp, #16
 80030b6:	4770      	bx	lr
 80030b8:	20002318 	.word	0x20002318

080030bc <getColorPreset>:

uint8_t getColorPreset(void) {
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
	return colorPreset;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <getColorPreset+0x14>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20002328 	.word	0x20002328

080030d4 <setColorWithPreset>:

void setColorWithPreset(uint32_t _preset) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	colorPreset = _preset;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b6e      	ldr	r3, [pc, #440]	@ (800329c <setColorWithPreset+0x1c8>)
 80030e2:	701a      	strb	r2, [r3, #0]
    switch (colorPreset) {
 80030e4:	4b6d      	ldr	r3, [pc, #436]	@ (800329c <setColorWithPreset+0x1c8>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	f200 80c4 	bhi.w	8003278 <setColorWithPreset+0x1a4>
 80030f0:	a201      	add	r2, pc, #4	@ (adr r2, 80030f8 <setColorWithPreset+0x24>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	08003139 	.word	0x08003139
 80030fc:	0800314d 	.word	0x0800314d
 8003100:	08003161 	.word	0x08003161
 8003104:	08003175 	.word	0x08003175
 8003108:	08003189 	.word	0x08003189
 800310c:	0800319d 	.word	0x0800319d
 8003110:	080031b1 	.word	0x080031b1
 8003114:	080031c5 	.word	0x080031c5
 8003118:	080031d9 	.word	0x080031d9
 800311c:	080031ed 	.word	0x080031ed
 8003120:	08003201 	.word	0x08003201
 8003124:	08003215 	.word	0x08003215
 8003128:	08003229 	.word	0x08003229
 800312c:	0800323d 	.word	0x0800323d
 8003130:	08003251 	.word	0x08003251
 8003134:	08003265 	.word	0x08003265
        case 1:
            color.r = 255; // r
 8003138:	4b59      	ldr	r3, [pc, #356]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800313a:	22ff      	movs	r2, #255	@ 0xff
 800313c:	701a      	strb	r2, [r3, #0]
            color.g = 0;
 800313e:	4b58      	ldr	r3, [pc, #352]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003140:	2200      	movs	r2, #0
 8003142:	705a      	strb	r2, [r3, #1]
            color.b = 0;
 8003144:	4b56      	ldr	r3, [pc, #344]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003146:	2200      	movs	r2, #0
 8003148:	709a      	strb	r2, [r3, #2]
            break;
 800314a:	e09e      	b.n	800328a <setColorWithPreset+0x1b6>
        case 2:
            color.r = 255; // Orange
 800314c:	4b54      	ldr	r3, [pc, #336]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800314e:	22ff      	movs	r2, #255	@ 0xff
 8003150:	701a      	strb	r2, [r3, #0]
            color.g = 165;
 8003152:	4b53      	ldr	r3, [pc, #332]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003154:	22a5      	movs	r2, #165	@ 0xa5
 8003156:	705a      	strb	r2, [r3, #1]
            color.b = 0;
 8003158:	4b51      	ldr	r3, [pc, #324]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800315a:	2200      	movs	r2, #0
 800315c:	709a      	strb	r2, [r3, #2]
            break;
 800315e:	e094      	b.n	800328a <setColorWithPreset+0x1b6>
        case 3:
            color.r = 255; // Yellow
 8003160:	4b4f      	ldr	r3, [pc, #316]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003162:	22ff      	movs	r2, #255	@ 0xff
 8003164:	701a      	strb	r2, [r3, #0]
            color.g = 255;
 8003166:	4b4e      	ldr	r3, [pc, #312]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003168:	22ff      	movs	r2, #255	@ 0xff
 800316a:	705a      	strb	r2, [r3, #1]
            color.b = 0;
 800316c:	4b4c      	ldr	r3, [pc, #304]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800316e:	2200      	movs	r2, #0
 8003170:	709a      	strb	r2, [r3, #2]
            break;
 8003172:	e08a      	b.n	800328a <setColorWithPreset+0x1b6>
        case 4:
            color.r = 0; // g
 8003174:	4b4a      	ldr	r3, [pc, #296]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
            color.g = 255;
 800317a:	4b49      	ldr	r3, [pc, #292]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800317c:	22ff      	movs	r2, #255	@ 0xff
 800317e:	705a      	strb	r2, [r3, #1]
            color.b = 0;
 8003180:	4b47      	ldr	r3, [pc, #284]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003182:	2200      	movs	r2, #0
 8003184:	709a      	strb	r2, [r3, #2]
            break;
 8003186:	e080      	b.n	800328a <setColorWithPreset+0x1b6>
        case 5:
            color.r = 0; // b
 8003188:	4b45      	ldr	r3, [pc, #276]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
            color.g = 0;
 800318e:	4b44      	ldr	r3, [pc, #272]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
            color.b = 255;
 8003194:	4b42      	ldr	r3, [pc, #264]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003196:	22ff      	movs	r2, #255	@ 0xff
 8003198:	709a      	strb	r2, [r3, #2]
            break;
 800319a:	e076      	b.n	800328a <setColorWithPreset+0x1b6>
        case 6:
            color.r = 75; // Indigo
 800319c:	4b40      	ldr	r3, [pc, #256]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800319e:	224b      	movs	r2, #75	@ 0x4b
 80031a0:	701a      	strb	r2, [r3, #0]
            color.g = 0;
 80031a2:	4b3f      	ldr	r3, [pc, #252]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	705a      	strb	r2, [r3, #1]
            color.b = 130;
 80031a8:	4b3d      	ldr	r3, [pc, #244]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031aa:	2282      	movs	r2, #130	@ 0x82
 80031ac:	709a      	strb	r2, [r3, #2]
            break;
 80031ae:	e06c      	b.n	800328a <setColorWithPreset+0x1b6>
        case 7:
            color.r = 128; // Violet
 80031b0:	4b3b      	ldr	r3, [pc, #236]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	701a      	strb	r2, [r3, #0]
            color.g = 0;
 80031b6:	4b3a      	ldr	r3, [pc, #232]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	705a      	strb	r2, [r3, #1]
            color.b = 128;
 80031bc:	4b38      	ldr	r3, [pc, #224]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031be:	2280      	movs	r2, #128	@ 0x80
 80031c0:	709a      	strb	r2, [r3, #2]
            break;
 80031c2:	e062      	b.n	800328a <setColorWithPreset+0x1b6>
        case 8:
            color.r = 255; // r-Orange
 80031c4:	4b36      	ldr	r3, [pc, #216]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031c6:	22ff      	movs	r2, #255	@ 0xff
 80031c8:	701a      	strb	r2, [r3, #0]
            color.g = 69;
 80031ca:	4b35      	ldr	r3, [pc, #212]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031cc:	2245      	movs	r2, #69	@ 0x45
 80031ce:	705a      	strb	r2, [r3, #1]
            color.b = 0;
 80031d0:	4b33      	ldr	r3, [pc, #204]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	709a      	strb	r2, [r3, #2]
            break;
 80031d6:	e058      	b.n	800328a <setColorWithPreset+0x1b6>
        case 9:
            color.r = 255; // Orange-Yellow
 80031d8:	4b31      	ldr	r3, [pc, #196]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031da:	22ff      	movs	r2, #255	@ 0xff
 80031dc:	701a      	strb	r2, [r3, #0]
            color.g = 215;
 80031de:	4b30      	ldr	r3, [pc, #192]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031e0:	22d7      	movs	r2, #215	@ 0xd7
 80031e2:	705a      	strb	r2, [r3, #1]
            color.b = 0;
 80031e4:	4b2e      	ldr	r3, [pc, #184]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	709a      	strb	r2, [r3, #2]
            break;
 80031ea:	e04e      	b.n	800328a <setColorWithPreset+0x1b6>
        case 10:
            color.r = 154; // Yellow-g
 80031ec:	4b2c      	ldr	r3, [pc, #176]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031ee:	229a      	movs	r2, #154	@ 0x9a
 80031f0:	701a      	strb	r2, [r3, #0]
            color.g = 205;
 80031f2:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031f4:	22cd      	movs	r2, #205	@ 0xcd
 80031f6:	705a      	strb	r2, [r3, #1]
            color.b = 50;
 80031f8:	4b29      	ldr	r3, [pc, #164]	@ (80032a0 <setColorWithPreset+0x1cc>)
 80031fa:	2232      	movs	r2, #50	@ 0x32
 80031fc:	709a      	strb	r2, [r3, #2]
            break;
 80031fe:	e044      	b.n	800328a <setColorWithPreset+0x1b6>
        case 11:
            color.r = 0; // g-b
 8003200:	4b27      	ldr	r3, [pc, #156]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
            color.g = 255;
 8003206:	4b26      	ldr	r3, [pc, #152]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003208:	22ff      	movs	r2, #255	@ 0xff
 800320a:	705a      	strb	r2, [r3, #1]
            color.b = 255;
 800320c:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800320e:	22ff      	movs	r2, #255	@ 0xff
 8003210:	709a      	strb	r2, [r3, #2]
            break;
 8003212:	e03a      	b.n	800328a <setColorWithPreset+0x1b6>
        case 12:
            color.r = 138; // b-Indigo
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003216:	228a      	movs	r2, #138	@ 0x8a
 8003218:	701a      	strb	r2, [r3, #0]
            color.g = 43;
 800321a:	4b21      	ldr	r3, [pc, #132]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800321c:	222b      	movs	r2, #43	@ 0x2b
 800321e:	705a      	strb	r2, [r3, #1]
            color.b = 226;
 8003220:	4b1f      	ldr	r3, [pc, #124]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003222:	22e2      	movs	r2, #226	@ 0xe2
 8003224:	709a      	strb	r2, [r3, #2]
            break;
 8003226:	e030      	b.n	800328a <setColorWithPreset+0x1b6>
        case 13:
            color.r = 186; // Indigo-Violet
 8003228:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800322a:	22ba      	movs	r2, #186	@ 0xba
 800322c:	701a      	strb	r2, [r3, #0]
            color.g = 85;
 800322e:	4b1c      	ldr	r3, [pc, #112]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003230:	2255      	movs	r2, #85	@ 0x55
 8003232:	705a      	strb	r2, [r3, #1]
            color.b = 211;
 8003234:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003236:	22d3      	movs	r2, #211	@ 0xd3
 8003238:	709a      	strb	r2, [r3, #2]
            break;
 800323a:	e026      	b.n	800328a <setColorWithPreset+0x1b6>
        case 14:
            color.r = 255; // Violet-r
 800323c:	4b18      	ldr	r3, [pc, #96]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800323e:	22ff      	movs	r2, #255	@ 0xff
 8003240:	701a      	strb	r2, [r3, #0]
            color.g = 0;
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003244:	2200      	movs	r2, #0
 8003246:	705a      	strb	r2, [r3, #1]
            color.b = 255;
 8003248:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800324a:	22ff      	movs	r2, #255	@ 0xff
 800324c:	709a      	strb	r2, [r3, #2]
            break;
 800324e:	e01c      	b.n	800328a <setColorWithPreset+0x1b6>
        case 15:
            color.r = 255; // Pink
 8003250:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003252:	22ff      	movs	r2, #255	@ 0xff
 8003254:	701a      	strb	r2, [r3, #0]
            color.g = 192;
 8003256:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003258:	22c0      	movs	r2, #192	@ 0xc0
 800325a:	705a      	strb	r2, [r3, #1]
            color.b = 203;
 800325c:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800325e:	22cb      	movs	r2, #203	@ 0xcb
 8003260:	709a      	strb	r2, [r3, #2]
            break;
 8003262:	e012      	b.n	800328a <setColorWithPreset+0x1b6>
        case 16:
            color.r = 255; // White
 8003264:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003266:	22ff      	movs	r2, #255	@ 0xff
 8003268:	701a      	strb	r2, [r3, #0]
            color.g = 255;
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800326c:	22ff      	movs	r2, #255	@ 0xff
 800326e:	705a      	strb	r2, [r3, #1]
            color.b = 255;
 8003270:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003272:	22ff      	movs	r2, #255	@ 0xff
 8003274:	709a      	strb	r2, [r3, #2]
            break;
 8003276:	e008      	b.n	800328a <setColorWithPreset+0x1b6>
        default:
            color.r = 255; // White for an undefined preset
 8003278:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <setColorWithPreset+0x1cc>)
 800327a:	22ff      	movs	r2, #255	@ 0xff
 800327c:	701a      	strb	r2, [r3, #0]
            color.g = 255;
 800327e:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003280:	22ff      	movs	r2, #255	@ 0xff
 8003282:	705a      	strb	r2, [r3, #1]
            color.b = 255;
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <setColorWithPreset+0x1cc>)
 8003286:	22ff      	movs	r2, #255	@ 0xff
 8003288:	709a      	strb	r2, [r3, #2]
    }

	updatePwmBuffer((LED *) currentDisplay);
 800328a:	4806      	ldr	r0, [pc, #24]	@ (80032a4 <setColorWithPreset+0x1d0>)
 800328c:	f7fe f8de 	bl	800144c <updatePwmBuffer>
	DMA_Send();
 8003290:	f7fe f958 	bl	8001544 <DMA_Send>

}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20002328 	.word	0x20002328
 80032a0:	20002314 	.word	0x20002314
 80032a4:	20002044 	.word	0x20002044

080032a8 <setBrightness>:

void setBrightness(uint8_t _brightness) {
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
	brightness = _brightness;
 80032b2:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <setBrightness+0x1c>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	7013      	strb	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	20000052 	.word	0x20000052

080032c8 <isAnniversarySet>:

bool isAnniversarySet(void) {
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
	return !(aDate.Year == 99);
 80032cc:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <isAnniversarySet+0x1c>)
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	2b63      	cmp	r3, #99	@ 0x63
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	2000005c 	.word	0x2000005c

080032e8 <isBirthdaySet>:

bool isBirthdaySet(void) {
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
	return !(bDate.Year == 99);
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <isBirthdaySet+0x1c>)
 80032ee:	78db      	ldrb	r3, [r3, #3]
 80032f0:	2b63      	cmp	r3, #99	@ 0x63
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	20000060 	.word	0x20000060

08003308 <deleteAnniversary>:

void deleteAnniversary(void) {
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
	RTC_DateTypeDef tDate = {0, 0, 0, 99};
 800330e:	2300      	movs	r3, #0
 8003310:	713b      	strb	r3, [r7, #4]
 8003312:	2300      	movs	r3, #0
 8003314:	717b      	strb	r3, [r7, #5]
 8003316:	2300      	movs	r3, #0
 8003318:	71bb      	strb	r3, [r7, #6]
 800331a:	2363      	movs	r3, #99	@ 0x63
 800331c:	71fb      	strb	r3, [r7, #7]
	aDate = tDate;
 800331e:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <deleteAnniversary+0x2c>)
 8003320:	461a      	mov	r2, r3
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	6010      	str	r0, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	2000005c 	.word	0x2000005c

08003338 <deleteBirthday>:

void deleteBirthday(void) {
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
	RTC_DateTypeDef tDate = {0, 0, 0, 99};
 800333e:	2300      	movs	r3, #0
 8003340:	713b      	strb	r3, [r7, #4]
 8003342:	2300      	movs	r3, #0
 8003344:	717b      	strb	r3, [r7, #5]
 8003346:	2300      	movs	r3, #0
 8003348:	71bb      	strb	r3, [r7, #6]
 800334a:	2363      	movs	r3, #99	@ 0x63
 800334c:	71fb      	strb	r3, [r7, #7]
	bDate = tDate;
 800334e:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <deleteBirthday+0x2c>)
 8003350:	461a      	mov	r2, r3
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	6010      	str	r0, [r2, #0]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	20000060 	.word	0x20000060

08003368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800336e:	f000 fd4d 	bl	8003e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003372:	f000 f84f 	bl	8003414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003376:	f000 fa25 	bl	80037c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800337a:	f000 fa03 	bl	8003784 <MX_DMA_Init>
  MX_TIM1_Init();
 800337e:	f000 f90d 	bl	800359c <MX_TIM1_Init>
  MX_TIM3_Init();
 8003382:	f000 f9ab 	bl	80036dc <MX_TIM3_Init>
  MX_RTC_Init();
 8003386:	f000 f8af 	bl	80034e8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 800338a:	213c      	movs	r1, #60	@ 0x3c
 800338c:	481d      	ldr	r0, [pc, #116]	@ (8003404 <main+0x9c>)
 800338e:	f003 f811 	bl	80063b4 <HAL_TIM_Encoder_Start>
  setColorWithPreset(0);
 8003392:	2000      	movs	r0, #0
 8003394:	f7ff fe9e 	bl	80030d4 <setColorWithPreset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(checkButtonPress()){
 8003398:	f7fe fff2 	bl	8002380 <checkButtonPress>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <main+0x3e>
		switchState();
 80033a2:	f7ff f80f 	bl	80023c4 <switchState>
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80033a6:	2200      	movs	r2, #0
 80033a8:	4917      	ldr	r1, [pc, #92]	@ (8003408 <main+0xa0>)
 80033aa:	4818      	ldr	r0, [pc, #96]	@ (800340c <main+0xa4>)
 80033ac:	f002 fa4f 	bl	800584e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80033b0:	2200      	movs	r2, #0
 80033b2:	4917      	ldr	r1, [pc, #92]	@ (8003410 <main+0xa8>)
 80033b4:	4815      	ldr	r0, [pc, #84]	@ (800340c <main+0xa4>)
 80033b6:	f002 fb2c 	bl	8005a12 <HAL_RTC_GetDate>

	configureSettings();
 80033ba:	f7ff f9b7 	bl	800272c <configureSettings>


	Segment_Display(getDisplayString());
 80033be:	f7ff fe5d 	bl	800307c <getDisplayString>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fdab 	bl	8000f20 <Segment_Display>



	updateDisplay(sTime);
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <main+0xa0>)
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	9200      	str	r2, [sp, #0]
 80033d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033d2:	f7fe f94d 	bl	8001670 <updateDisplay>


	rainbow(5);
 80033d6:	2005      	movs	r0, #5
 80033d8:	f7fe fb7c 	bl	8001ad4 <rainbow>
	twinkle();
 80033dc:	f7fe fbae 	bl	8001b3c <twinkle>
	blink();
 80033e0:	f7fe f8dc 	bl	800159c <blink>
	constant();
 80033e4:	f7fe f918 	bl	8001618 <constant>
//	if(HAL_GetTick() - lastTick > 1000) {
//		sTime.Minutes = sTime.Minutes + 1;
//		lastTick = HAL_GetTick();
//	}

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80033e8:	2200      	movs	r2, #0
 80033ea:	4907      	ldr	r1, [pc, #28]	@ (8003408 <main+0xa0>)
 80033ec:	4807      	ldr	r0, [pc, #28]	@ (800340c <main+0xa4>)
 80033ee:	f002 f994 	bl	800571a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80033f2:	2200      	movs	r2, #0
 80033f4:	4906      	ldr	r1, [pc, #24]	@ (8003410 <main+0xa8>)
 80033f6:	4805      	ldr	r0, [pc, #20]	@ (800340c <main+0xa4>)
 80033f8:	f002 fa87 	bl	800590a <HAL_RTC_SetDate>

	sendDisplayToDMA();
 80033fc:	f7fe fed6 	bl	80021ac <sendDisplayToDMA>
	if(checkButtonPress()){
 8003400:	e7ca      	b.n	8003398 <main+0x30>
 8003402:	bf00      	nop
 8003404:	20002394 	.word	0x20002394
 8003408:	2000243c 	.word	0x2000243c
 800340c:	2000232c 	.word	0x2000232c
 8003410:	20000058 	.word	0x20000058

08003414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b094      	sub	sp, #80	@ 0x50
 8003418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341a:	f107 0320 	add.w	r3, r7, #32
 800341e:	2230      	movs	r2, #48	@ 0x30
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f004 f902 	bl	800762c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003428:	f107 030c 	add.w	r3, r7, #12
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <SystemClock_Config+0xcc>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	4a27      	ldr	r2, [pc, #156]	@ (80034e0 <SystemClock_Config+0xcc>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	@ 0x40
 8003448:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <SystemClock_Config+0xcc>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <SystemClock_Config+0xd0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a21      	ldr	r2, [pc, #132]	@ (80034e4 <SystemClock_Config+0xd0>)
 800345e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b1f      	ldr	r3, [pc, #124]	@ (80034e4 <SystemClock_Config+0xd0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003470:	2305      	movs	r3, #5
 8003472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800347a:	2301      	movs	r3, #1
 800347c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800347e:	2302      	movs	r3, #2
 8003480:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003482:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003488:	230c      	movs	r3, #12
 800348a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800348c:	2348      	movs	r3, #72	@ 0x48
 800348e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003490:	2302      	movs	r3, #2
 8003492:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003494:	2304      	movs	r3, #4
 8003496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003498:	f107 0320 	add.w	r3, r7, #32
 800349c:	4618      	mov	r0, r3
 800349e:	f001 fba5 	bl	8004bec <HAL_RCC_OscConfig>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80034a8:	f000 fa10 	bl	80038cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034ac:	230f      	movs	r3, #15
 80034ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b0:	2302      	movs	r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	2102      	movs	r1, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fe07 	bl	80050dc <HAL_RCC_ClockConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80034d4:	f000 f9fa 	bl	80038cc <Error_Handler>
  }
}
 80034d8:	bf00      	nop
 80034da:	3750      	adds	r7, #80	@ 0x50
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40007000 	.word	0x40007000

080034e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034fc:	2300      	movs	r3, #0
 80034fe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003500:	4b24      	ldr	r3, [pc, #144]	@ (8003594 <MX_RTC_Init+0xac>)
 8003502:	4a25      	ldr	r2, [pc, #148]	@ (8003598 <MX_RTC_Init+0xb0>)
 8003504:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003506:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <MX_RTC_Init+0xac>)
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <MX_RTC_Init+0xac>)
 800350e:	227f      	movs	r2, #127	@ 0x7f
 8003510:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003512:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <MX_RTC_Init+0xac>)
 8003514:	22ff      	movs	r2, #255	@ 0xff
 8003516:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003518:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <MX_RTC_Init+0xac>)
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800351e:	4b1d      	ldr	r3, [pc, #116]	@ (8003594 <MX_RTC_Init+0xac>)
 8003520:	2200      	movs	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003524:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <MX_RTC_Init+0xac>)
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800352a:	481a      	ldr	r0, [pc, #104]	@ (8003594 <MX_RTC_Init+0xac>)
 800352c:	f002 f872 	bl	8005614 <HAL_RTC_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003536:	f000 f9c9 	bl	80038cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 800353a:	2303      	movs	r3, #3
 800353c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 800353e:	2359      	movs	r3, #89	@ 0x59
 8003540:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 8003542:	2350      	movs	r3, #80	@ 0x50
 8003544:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	2201      	movs	r2, #1
 8003552:	4619      	mov	r1, r3
 8003554:	480f      	ldr	r0, [pc, #60]	@ (8003594 <MX_RTC_Init+0xac>)
 8003556:	f002 f8e0 	bl	800571a <HAL_RTC_SetTime>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003560:	f000 f9b4 	bl	80038cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003564:	2301      	movs	r3, #1
 8003566:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003568:	2301      	movs	r3, #1
 800356a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800356c:	2301      	movs	r3, #1
 800356e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003570:	2300      	movs	r3, #0
 8003572:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003574:	463b      	mov	r3, r7
 8003576:	2201      	movs	r2, #1
 8003578:	4619      	mov	r1, r3
 800357a:	4806      	ldr	r0, [pc, #24]	@ (8003594 <MX_RTC_Init+0xac>)
 800357c:	f002 f9c5 	bl	800590a <HAL_RTC_SetDate>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003586:	f000 f9a1 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	2000232c 	.word	0x2000232c
 8003598:	40002800 	.word	0x40002800

0800359c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b096      	sub	sp, #88	@ 0x58
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	615a      	str	r2, [r3, #20]
 80035cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	2220      	movs	r2, #32
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f004 f829 	bl	800762c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035da:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <MX_TIM1_Init+0x138>)
 80035dc:	4a3e      	ldr	r2, [pc, #248]	@ (80036d8 <MX_TIM1_Init+0x13c>)
 80035de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035e0:	4b3c      	ldr	r3, [pc, #240]	@ (80036d4 <MX_TIM1_Init+0x138>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e6:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <MX_TIM1_Init+0x138>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80035ec:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <MX_TIM1_Init+0x138>)
 80035ee:	2259      	movs	r2, #89	@ 0x59
 80035f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f2:	4b38      	ldr	r3, [pc, #224]	@ (80036d4 <MX_TIM1_Init+0x138>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035f8:	4b36      	ldr	r3, [pc, #216]	@ (80036d4 <MX_TIM1_Init+0x138>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fe:	4b35      	ldr	r3, [pc, #212]	@ (80036d4 <MX_TIM1_Init+0x138>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003604:	4833      	ldr	r0, [pc, #204]	@ (80036d4 <MX_TIM1_Init+0x138>)
 8003606:	f002 fb11 	bl	8005c2c <HAL_TIM_Base_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003610:	f000 f95c 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003618:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800361a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800361e:	4619      	mov	r1, r3
 8003620:	482c      	ldr	r0, [pc, #176]	@ (80036d4 <MX_TIM1_Init+0x138>)
 8003622:	f003 f907 	bl	8006834 <HAL_TIM_ConfigClockSource>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800362c:	f000 f94e 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003630:	4828      	ldr	r0, [pc, #160]	@ (80036d4 <MX_TIM1_Init+0x138>)
 8003632:	f002 fb4a 	bl	8005cca <HAL_TIM_PWM_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800363c:	f000 f946 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003640:	2300      	movs	r3, #0
 8003642:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003648:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800364c:	4619      	mov	r1, r3
 800364e:	4821      	ldr	r0, [pc, #132]	@ (80036d4 <MX_TIM1_Init+0x138>)
 8003650:	f003 fd9c 	bl	800718c <HAL_TIMEx_MasterConfigSynchronization>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800365a:	f000 f937 	bl	80038cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800365e:	2360      	movs	r3, #96	@ 0x60
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003666:	2300      	movs	r3, #0
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800366a:	2300      	movs	r3, #0
 800366c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800366e:	2300      	movs	r3, #0
 8003670:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800367a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800367e:	2200      	movs	r2, #0
 8003680:	4619      	mov	r1, r3
 8003682:	4814      	ldr	r0, [pc, #80]	@ (80036d4 <MX_TIM1_Init+0x138>)
 8003684:	f003 f814 	bl	80066b0 <HAL_TIM_PWM_ConfigChannel>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800368e:	f000 f91d 	bl	80038cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4807      	ldr	r0, [pc, #28]	@ (80036d4 <MX_TIM1_Init+0x138>)
 80036b6:	f003 fdd7 	bl	8007268 <HAL_TIMEx_ConfigBreakDeadTime>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80036c0:	f000 f904 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036c4:	4803      	ldr	r0, [pc, #12]	@ (80036d4 <MX_TIM1_Init+0x138>)
 80036c6:	f000 fa21 	bl	8003b0c <HAL_TIM_MspPostInit>

}
 80036ca:	bf00      	nop
 80036cc:	3758      	adds	r7, #88	@ 0x58
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	2000234c 	.word	0x2000234c
 80036d8:	40010000 	.word	0x40010000

080036dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	@ 0x30
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	2224      	movs	r2, #36	@ 0x24
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 ff9e 	bl	800762c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036f8:	4b20      	ldr	r3, [pc, #128]	@ (800377c <MX_TIM3_Init+0xa0>)
 80036fa:	4a21      	ldr	r2, [pc, #132]	@ (8003780 <MX_TIM3_Init+0xa4>)
 80036fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80036fe:	4b1f      	ldr	r3, [pc, #124]	@ (800377c <MX_TIM3_Init+0xa0>)
 8003700:	2204      	movs	r2, #4
 8003702:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003704:	4b1d      	ldr	r3, [pc, #116]	@ (800377c <MX_TIM3_Init+0xa0>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800370a:	4b1c      	ldr	r3, [pc, #112]	@ (800377c <MX_TIM3_Init+0xa0>)
 800370c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003710:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003712:	4b1a      	ldr	r3, [pc, #104]	@ (800377c <MX_TIM3_Init+0xa0>)
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003718:	4b18      	ldr	r3, [pc, #96]	@ (800377c <MX_TIM3_Init+0xa0>)
 800371a:	2200      	movs	r2, #0
 800371c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800371e:	2303      	movs	r3, #3
 8003720:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003722:	2302      	movs	r3, #2
 8003724:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003726:	2301      	movs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003732:	2302      	movs	r3, #2
 8003734:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800373a:	2300      	movs	r3, #0
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	4619      	mov	r1, r3
 8003748:	480c      	ldr	r0, [pc, #48]	@ (800377c <MX_TIM3_Init+0xa0>)
 800374a:	f002 fd8d 	bl	8006268 <HAL_TIM_Encoder_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003754:	f000 f8ba 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003758:	2300      	movs	r3, #0
 800375a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4805      	ldr	r0, [pc, #20]	@ (800377c <MX_TIM3_Init+0xa0>)
 8003766:	f003 fd11 	bl	800718c <HAL_TIMEx_MasterConfigSynchronization>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003770:	f000 f8ac 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003774:	bf00      	nop
 8003776:	3730      	adds	r7, #48	@ 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20002394 	.word	0x20002394
 8003780:	40000400 	.word	0x40000400

08003784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <MX_DMA_Init+0x3c>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4a0b      	ldr	r2, [pc, #44]	@ (80037c0 <MX_DMA_Init+0x3c>)
 8003794:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003798:	6313      	str	r3, [r2, #48]	@ 0x30
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <MX_DMA_Init+0x3c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2108      	movs	r1, #8
 80037aa:	2039      	movs	r0, #57	@ 0x39
 80037ac:	f000 fc9f 	bl	80040ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80037b0:	2039      	movs	r0, #57	@ 0x39
 80037b2:	f000 fcb8 	bl	8004126 <HAL_NVIC_EnableIRQ>

}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800

080037c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	@ 0x28
 80037c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	4b38      	ldr	r3, [pc, #224]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	4a37      	ldr	r2, [pc, #220]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ea:	4b35      	ldr	r3, [pc, #212]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b31      	ldr	r3, [pc, #196]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	4a30      	ldr	r2, [pc, #192]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 8003800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003804:	6313      	str	r3, [r2, #48]	@ 0x30
 8003806:	4b2e      	ldr	r3, [pc, #184]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	4b2a      	ldr	r3, [pc, #168]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	4a29      	ldr	r2, [pc, #164]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6313      	str	r3, [r2, #48]	@ 0x30
 8003822:	4b27      	ldr	r3, [pc, #156]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	4a22      	ldr	r2, [pc, #136]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	6313      	str	r3, [r2, #48]	@ 0x30
 800383e:	4b20      	ldr	r3, [pc, #128]	@ (80038c0 <MX_GPIO_Init+0xfc>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800384a:	2200      	movs	r2, #0
 800384c:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 8003850:	481c      	ldr	r0, [pc, #112]	@ (80038c4 <MX_GPIO_Init+0x100>)
 8003852:	f001 f9b1 	bl	8004bb8 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8003856:	2200      	movs	r2, #0
 8003858:	f241 4107 	movw	r1, #5127	@ 0x1407
 800385c:	481a      	ldr	r0, [pc, #104]	@ (80038c8 <MX_GPIO_Init+0x104>)
 800385e:	f001 f9ab 	bl	8004bb8 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8003862:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8003866:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003868:	2301      	movs	r3, #1
 800386a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	4619      	mov	r1, r3
 800387a:	4812      	ldr	r0, [pc, #72]	@ (80038c4 <MX_GPIO_Init+0x100>)
 800387c:	f001 f800 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8003880:	f241 4307 	movw	r3, #5127	@ 0x1407
 8003884:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	4619      	mov	r1, r3
 8003898:	480b      	ldr	r0, [pc, #44]	@ (80038c8 <MX_GPIO_Init+0x104>)
 800389a:	f000 fff1 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800389e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038a8:	2301      	movs	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4619      	mov	r1, r3
 80038b2:	4805      	ldr	r0, [pc, #20]	@ (80038c8 <MX_GPIO_Init+0x104>)
 80038b4:	f000 ffe4 	bl	8004880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038b8:	bf00      	nop
 80038ba:	3728      	adds	r7, #40	@ 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40020000 	.word	0x40020000
 80038c8:	40020400 	.word	0x40020400

080038cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038d0:	b672      	cpsid	i
}
 80038d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038d4:	bf00      	nop
 80038d6:	e7fd      	b.n	80038d4 <Error_Handler+0x8>

080038d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	4b21      	ldr	r3, [pc, #132]	@ (8003968 <HAL_MspInit+0x90>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	4a20      	ldr	r2, [pc, #128]	@ (8003968 <HAL_MspInit+0x90>)
 80038e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003968 <HAL_MspInit+0x90>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <HAL_MspInit+0x90>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	4a19      	ldr	r2, [pc, #100]	@ (8003968 <HAL_MspInit+0x90>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003908:	6413      	str	r3, [r2, #64]	@ 0x40
 800390a:	4b17      	ldr	r3, [pc, #92]	@ (8003968 <HAL_MspInit+0x90>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2101      	movs	r1, #1
 800391a:	f06f 000b 	mvn.w	r0, #11
 800391e:	f000 fbe6 	bl	80040ee <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2102      	movs	r1, #2
 8003926:	f06f 000a 	mvn.w	r0, #10
 800392a:	f000 fbe0 	bl	80040ee <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 800392e:	2200      	movs	r2, #0
 8003930:	2103      	movs	r1, #3
 8003932:	f06f 0009 	mvn.w	r0, #9
 8003936:	f000 fbda 	bl	80040ee <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 800393a:	2200      	movs	r2, #0
 800393c:	2104      	movs	r1, #4
 800393e:	f06f 0004 	mvn.w	r0, #4
 8003942:	f000 fbd4 	bl	80040ee <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2105      	movs	r1, #5
 800394a:	f06f 0003 	mvn.w	r0, #3
 800394e:	f000 fbce 	bl	80040ee <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 8003952:	2200      	movs	r2, #0
 8003954:	2106      	movs	r1, #6
 8003956:	f06f 0001 	mvn.w	r0, #1
 800395a:	f000 fbc8 	bl	80040ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800

0800396c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003974:	f107 0308 	add.w	r3, r7, #8
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
 8003984:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a0c      	ldr	r2, [pc, #48]	@ (80039bc <HAL_RTC_MspInit+0x50>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d111      	bne.n	80039b4 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003990:	2302      	movs	r3, #2
 8003992:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003994:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003998:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 fd48 	bl	8005434 <HAL_RCCEx_PeriphCLKConfig>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80039aa:	f7ff ff8f 	bl	80038cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039ae:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <HAL_RTC_MspInit+0x54>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80039b4:	bf00      	nop
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40002800 	.word	0x40002800
 80039c0:	42470e3c 	.word	0x42470e3c

080039c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a22      	ldr	r2, [pc, #136]	@ (8003a5c <HAL_TIM_Base_MspInit+0x98>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d13d      	bne.n	8003a52 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <HAL_TIM_Base_MspInit+0x9c>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039de:	4a20      	ldr	r2, [pc, #128]	@ (8003a60 <HAL_TIM_Base_MspInit+0x9c>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <HAL_TIM_Base_MspInit+0x9c>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80039f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 80039f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a68 <HAL_TIM_Base_MspInit+0xa4>)
 80039f6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80039f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 80039fa:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80039fe:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a00:	4b18      	ldr	r3, [pc, #96]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a02:	2240      	movs	r2, #64	@ 0x40
 8003a04:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a06:	4b17      	ldr	r3, [pc, #92]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003a0c:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a12:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a14:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a1a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a22:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003a24:	4b0f      	ldr	r3, [pc, #60]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003a36:	480b      	ldr	r0, [pc, #44]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a38:	f000 fb90 	bl	800415c <HAL_DMA_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003a42:	f7ff ff43 	bl	80038cc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a06      	ldr	r2, [pc, #24]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a4c:	4a05      	ldr	r2, [pc, #20]	@ (8003a64 <HAL_TIM_Base_MspInit+0xa0>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40023800 	.word	0x40023800
 8003a64:	200023dc 	.word	0x200023dc
 8003a68:	40026428 	.word	0x40026428

08003a6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	@ 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <HAL_TIM_Encoder_MspInit+0x94>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d133      	bne.n	8003af6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	4b1c      	ldr	r3, [pc, #112]	@ (8003b04 <HAL_TIM_Encoder_MspInit+0x98>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	4a1b      	ldr	r2, [pc, #108]	@ (8003b04 <HAL_TIM_Encoder_MspInit+0x98>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a9e:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_TIM_Encoder_MspInit+0x98>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b15      	ldr	r3, [pc, #84]	@ (8003b04 <HAL_TIM_Encoder_MspInit+0x98>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	4a14      	ldr	r2, [pc, #80]	@ (8003b04 <HAL_TIM_Encoder_MspInit+0x98>)
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_TIM_Encoder_MspInit+0x98>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ac6:	2330      	movs	r3, #48	@ 0x30
 8003ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4809      	ldr	r0, [pc, #36]	@ (8003b08 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003ae2:	f000 fecd 	bl	8004880 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2109      	movs	r1, #9
 8003aea:	201d      	movs	r0, #29
 8003aec:	f000 faff 	bl	80040ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003af0:	201d      	movs	r0, #29
 8003af2:	f000 fb18 	bl	8004126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003af6:	bf00      	nop
 8003af8:	3728      	adds	r7, #40	@ 0x28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40020400 	.word	0x40020400

08003b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b14:	f107 030c 	add.w	r3, r7, #12
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a12      	ldr	r2, [pc, #72]	@ (8003b74 <HAL_TIM_MspPostInit+0x68>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d11e      	bne.n	8003b6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <HAL_TIM_MspPostInit+0x6c>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <HAL_TIM_MspPostInit+0x6c>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <HAL_TIM_MspPostInit+0x6c>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b50:	2302      	movs	r3, #2
 8003b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b60:	f107 030c 	add.w	r3, r7, #12
 8003b64:	4619      	mov	r1, r3
 8003b66:	4805      	ldr	r0, [pc, #20]	@ (8003b7c <HAL_TIM_MspPostInit+0x70>)
 8003b68:	f000 fe8a 	bl	8004880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b6c:	bf00      	nop
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40020000 	.word	0x40020000

08003b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <NMI_Handler+0x4>

08003b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <HardFault_Handler+0x4>

08003b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <MemManage_Handler+0x4>

08003b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <BusFault_Handler+0x4>

08003ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <UsageFault_Handler+0x4>

08003ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bd6:	f000 f96b 	bl	8003eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003be4:	4802      	ldr	r0, [pc, #8]	@ (8003bf0 <TIM3_IRQHandler+0x10>)
 8003be6:	f002 fc73 	bl	80064d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20002394 	.word	0x20002394

08003bf4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003bf8:	4802      	ldr	r0, [pc, #8]	@ (8003c04 <DMA2_Stream1_IRQHandler+0x10>)
 8003bfa:	f000 fbd7 	bl	80043ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	200023dc 	.word	0x200023dc

08003c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return 1;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <_kill>:

int _kill(int pid, int sig)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c22:	f003 fd65 	bl	80076f0 <__errno>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2216      	movs	r2, #22
 8003c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_exit>:

void _exit (int status)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ffe7 	bl	8003c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <_exit+0x12>

08003c4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e00a      	b.n	8003c76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c60:	f3af 8000 	nop.w
 8003c64:	4601      	mov	r1, r0
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	60ba      	str	r2, [r7, #8]
 8003c6c:	b2ca      	uxtb	r2, r1
 8003c6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3301      	adds	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	dbf0      	blt.n	8003c60 <_read+0x12>
  }

  return len;
 8003c7e:	687b      	ldr	r3, [r7, #4]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e009      	b.n	8003cae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	60ba      	str	r2, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3301      	adds	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	dbf1      	blt.n	8003c9a <_write+0x12>
  }
  return len;
 8003cb6:	687b      	ldr	r3, [r7, #4]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <_close>:

int _close(int file)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ce8:	605a      	str	r2, [r3, #4]
  return 0;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_isatty>:

int _isatty(int file)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d30:	4a14      	ldr	r2, [pc, #80]	@ (8003d84 <_sbrk+0x5c>)
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <_sbrk+0x60>)
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d3c:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <_sbrk+0x64>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d44:	4b11      	ldr	r3, [pc, #68]	@ (8003d8c <_sbrk+0x64>)
 8003d46:	4a12      	ldr	r2, [pc, #72]	@ (8003d90 <_sbrk+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <_sbrk+0x64>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d207      	bcs.n	8003d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d58:	f003 fcca 	bl	80076f0 <__errno>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	220c      	movs	r2, #12
 8003d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
 8003d66:	e009      	b.n	8003d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d68:	4b08      	ldr	r3, [pc, #32]	@ (8003d8c <_sbrk+0x64>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d6e:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <_sbrk+0x64>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	4a05      	ldr	r2, [pc, #20]	@ (8003d8c <_sbrk+0x64>)
 8003d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20020000 	.word	0x20020000
 8003d88:	00010000 	.word	0x00010000
 8003d8c:	20002450 	.word	0x20002450
 8003d90:	200025a8 	.word	0x200025a8

08003d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d98:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <SystemInit+0x20>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9e:	4a05      	ldr	r2, [pc, #20]	@ (8003db4 <SystemInit+0x20>)
 8003da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003dbc:	480d      	ldr	r0, [pc, #52]	@ (8003df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003dbe:	490e      	ldr	r1, [pc, #56]	@ (8003df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8003dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dc4:	e002      	b.n	8003dcc <LoopCopyDataInit>

08003dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dca:	3304      	adds	r3, #4

08003dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dd0:	d3f9      	bcc.n	8003dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8003e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8003e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dd8:	e001      	b.n	8003dde <LoopFillZerobss>

08003dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ddc:	3204      	adds	r2, #4

08003dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003de0:	d3fb      	bcc.n	8003dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003de2:	f7ff ffd7 	bl	8003d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003de6:	f003 fc89 	bl	80076fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dea:	f7ff fabd 	bl	8003368 <main>
  bx  lr    
 8003dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003df8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8003dfc:	08008d4c 	.word	0x08008d4c
  ldr r2, =_sbss
 8003e00:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8003e04:	200025a4 	.word	0x200025a4

08003e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e08:	e7fe      	b.n	8003e08 <ADC_IRQHandler>
	...

08003e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e10:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <HAL_Init+0x40>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0d      	ldr	r2, [pc, #52]	@ (8003e4c <HAL_Init+0x40>)
 8003e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_Init+0x40>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a0a      	ldr	r2, [pc, #40]	@ (8003e4c <HAL_Init+0x40>)
 8003e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e28:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <HAL_Init+0x40>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a07      	ldr	r2, [pc, #28]	@ (8003e4c <HAL_Init+0x40>)
 8003e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e34:	2003      	movs	r0, #3
 8003e36:	f000 f94f 	bl	80040d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e3a:	200f      	movs	r0, #15
 8003e3c:	f000 f808 	bl	8003e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e40:	f7ff fd4a 	bl	80038d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023c00 	.word	0x40023c00

08003e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e58:	4b12      	ldr	r3, [pc, #72]	@ (8003ea4 <HAL_InitTick+0x54>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <HAL_InitTick+0x58>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	4619      	mov	r1, r3
 8003e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f967 	bl	8004142 <HAL_SYSTICK_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e00e      	b.n	8003e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b0f      	cmp	r3, #15
 8003e82:	d80a      	bhi.n	8003e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e84:	2200      	movs	r2, #0
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	f000 f92f 	bl	80040ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e90:	4a06      	ldr	r2, [pc, #24]	@ (8003eac <HAL_InitTick+0x5c>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000064 	.word	0x20000064
 8003ea8:	2000006c 	.word	0x2000006c
 8003eac:	20000068 	.word	0x20000068

08003eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eb4:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_IncTick+0x20>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <HAL_IncTick+0x24>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	4a04      	ldr	r2, [pc, #16]	@ (8003ed4 <HAL_IncTick+0x24>)
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	2000006c 	.word	0x2000006c
 8003ed4:	20002454 	.word	0x20002454

08003ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return uwTick;
 8003edc:	4b03      	ldr	r3, [pc, #12]	@ (8003eec <HAL_GetTick+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20002454 	.word	0x20002454

08003ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ef8:	f7ff ffee 	bl	8003ed8 <HAL_GetTick>
 8003efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d005      	beq.n	8003f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <HAL_Delay+0x44>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f16:	bf00      	nop
 8003f18:	f7ff ffde 	bl	8003ed8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d8f7      	bhi.n	8003f18 <HAL_Delay+0x28>
  {
  }
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2000006c 	.word	0x2000006c

08003f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f48:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <__NVIC_SetPriorityGrouping+0x44>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f54:	4013      	ands	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f6a:	4a04      	ldr	r2, [pc, #16]	@ (8003f7c <__NVIC_SetPriorityGrouping+0x44>)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	60d3      	str	r3, [r2, #12]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f84:	4b04      	ldr	r3, [pc, #16]	@ (8003f98 <__NVIC_GetPriorityGrouping+0x18>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	f003 0307 	and.w	r3, r3, #7
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	db0b      	blt.n	8003fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	f003 021f 	and.w	r2, r3, #31
 8003fb4:	4907      	ldr	r1, [pc, #28]	@ (8003fd4 <__NVIC_EnableIRQ+0x38>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000e100 	.word	0xe000e100

08003fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	6039      	str	r1, [r7, #0]
 8003fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	db0a      	blt.n	8004002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	490c      	ldr	r1, [pc, #48]	@ (8004024 <__NVIC_SetPriority+0x4c>)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	0112      	lsls	r2, r2, #4
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004000:	e00a      	b.n	8004018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4908      	ldr	r1, [pc, #32]	@ (8004028 <__NVIC_SetPriority+0x50>)
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	3b04      	subs	r3, #4
 8004010:	0112      	lsls	r2, r2, #4
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	440b      	add	r3, r1
 8004016:	761a      	strb	r2, [r3, #24]
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000e100 	.word	0xe000e100
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	@ 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f1c3 0307 	rsb	r3, r3, #7
 8004046:	2b04      	cmp	r3, #4
 8004048:	bf28      	it	cs
 800404a:	2304      	movcs	r3, #4
 800404c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3304      	adds	r3, #4
 8004052:	2b06      	cmp	r3, #6
 8004054:	d902      	bls.n	800405c <NVIC_EncodePriority+0x30>
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3b03      	subs	r3, #3
 800405a:	e000      	b.n	800405e <NVIC_EncodePriority+0x32>
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004060:	f04f 32ff 	mov.w	r2, #4294967295
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	401a      	ands	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004074:	f04f 31ff 	mov.w	r1, #4294967295
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	43d9      	mvns	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004084:	4313      	orrs	r3, r2
         );
}
 8004086:	4618      	mov	r0, r3
 8004088:	3724      	adds	r7, #36	@ 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3b01      	subs	r3, #1
 80040a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040a4:	d301      	bcc.n	80040aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040a6:	2301      	movs	r3, #1
 80040a8:	e00f      	b.n	80040ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040aa:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <SysTick_Config+0x40>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040b2:	210f      	movs	r1, #15
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295
 80040b8:	f7ff ff8e 	bl	8003fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <SysTick_Config+0x40>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040c2:	4b04      	ldr	r3, [pc, #16]	@ (80040d4 <SysTick_Config+0x40>)
 80040c4:	2207      	movs	r2, #7
 80040c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	e000e010 	.word	0xe000e010

080040d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ff29 	bl	8003f38 <__NVIC_SetPriorityGrouping>
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	4603      	mov	r3, r0
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004100:	f7ff ff3e 	bl	8003f80 <__NVIC_GetPriorityGrouping>
 8004104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	6978      	ldr	r0, [r7, #20]
 800410c:	f7ff ff8e 	bl	800402c <NVIC_EncodePriority>
 8004110:	4602      	mov	r2, r0
 8004112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004116:	4611      	mov	r1, r2
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff5d 	bl	8003fd8 <__NVIC_SetPriority>
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff31 	bl	8003f9c <__NVIC_EnableIRQ>
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ffa2 	bl	8004094 <SysTick_Config>
 8004150:	4603      	mov	r3, r0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004168:	f7ff feb6 	bl	8003ed8 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e099      	b.n	80042ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004198:	e00f      	b.n	80041ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800419a:	f7ff fe9d 	bl	8003ed8 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b05      	cmp	r3, #5
 80041a6:	d908      	bls.n	80041ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2203      	movs	r2, #3
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e078      	b.n	80042ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e8      	bne.n	800419a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4b38      	ldr	r3, [pc, #224]	@ (80042b4 <HAL_DMA_Init+0x158>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	2b04      	cmp	r3, #4
 8004212:	d107      	bne.n	8004224 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	4313      	orrs	r3, r2
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0307 	bic.w	r3, r3, #7
 800423a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	2b04      	cmp	r3, #4
 800424c:	d117      	bne.n	800427e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00e      	beq.n	800427e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fa91 	bl	8004788 <DMA_CheckFifoParam>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2240      	movs	r2, #64	@ 0x40
 8004270:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800427a:	2301      	movs	r3, #1
 800427c:	e016      	b.n	80042ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fa48 	bl	800471c <DMA_CalcBaseAndBitshift>
 800428c:	4603      	mov	r3, r0
 800428e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	223f      	movs	r2, #63	@ 0x3f
 8004296:	409a      	lsls	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	f010803f 	.word	0xf010803f

080042b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_DMA_Start_IT+0x26>
 80042da:	2302      	movs	r3, #2
 80042dc:	e040      	b.n	8004360 <HAL_DMA_Start_IT+0xa8>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d12f      	bne.n	8004352 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f9da 	bl	80046c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004310:	223f      	movs	r2, #63	@ 0x3f
 8004312:	409a      	lsls	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0216 	orr.w	r2, r2, #22
 8004326:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0208 	orr.w	r2, r2, #8
 800433e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e005      	b.n	800435e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800435a:	2302      	movs	r3, #2
 800435c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d004      	beq.n	8004386 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2280      	movs	r2, #128	@ 0x80
 8004380:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e00c      	b.n	80043a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2205      	movs	r2, #5
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043b8:	4b8e      	ldr	r3, [pc, #568]	@ (80045f4 <HAL_DMA_IRQHandler+0x248>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a8e      	ldr	r2, [pc, #568]	@ (80045f8 <HAL_DMA_IRQHandler+0x24c>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	0a9b      	lsrs	r3, r3, #10
 80043c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d6:	2208      	movs	r2, #8
 80043d8:	409a      	lsls	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01a      	beq.n	8004418 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0204 	bic.w	r2, r2, #4
 80043fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	2208      	movs	r2, #8
 8004406:	409a      	lsls	r2, r3
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	2201      	movs	r2, #1
 800441e:	409a      	lsls	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d012      	beq.n	800444e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	2201      	movs	r2, #1
 800443c:	409a      	lsls	r2, r3
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004446:	f043 0202 	orr.w	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004452:	2204      	movs	r2, #4
 8004454:	409a      	lsls	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d012      	beq.n	8004484 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004470:	2204      	movs	r2, #4
 8004472:	409a      	lsls	r2, r3
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447c:	f043 0204 	orr.w	r2, r3, #4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004488:	2210      	movs	r2, #16
 800448a:	409a      	lsls	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d043      	beq.n	800451c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d03c      	beq.n	800451c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	2210      	movs	r2, #16
 80044a8:	409a      	lsls	r2, r3
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d018      	beq.n	80044ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d108      	bne.n	80044dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d024      	beq.n	800451c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
 80044da:	e01f      	b.n	800451c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01b      	beq.n	800451c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
 80044ec:	e016      	b.n	800451c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d107      	bne.n	800450c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0208 	bic.w	r2, r2, #8
 800450a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004520:	2220      	movs	r2, #32
 8004522:	409a      	lsls	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 808f 	beq.w	800464c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8087 	beq.w	800464c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	2220      	movs	r2, #32
 8004544:	409a      	lsls	r2, r3
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b05      	cmp	r3, #5
 8004554:	d136      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0216 	bic.w	r2, r2, #22
 8004564:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695a      	ldr	r2, [r3, #20]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004574:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <HAL_DMA_IRQHandler+0x1da>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0208 	bic.w	r2, r2, #8
 8004594:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	223f      	movs	r2, #63	@ 0x3f
 800459c:	409a      	lsls	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d07e      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
        }
        return;
 80045c2:	e079      	b.n	80046b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01d      	beq.n	800460e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d031      	beq.n	800464c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
 80045f0:	e02c      	b.n	800464c <HAL_DMA_IRQHandler+0x2a0>
 80045f2:	bf00      	nop
 80045f4:	20000064 	.word	0x20000064
 80045f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	2b00      	cmp	r3, #0
 8004602:	d023      	beq.n	800464c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4798      	blx	r3
 800460c:	e01e      	b.n	800464c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10f      	bne.n	800463c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0210 	bic.w	r2, r2, #16
 800462a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004650:	2b00      	cmp	r3, #0
 8004652:	d032      	beq.n	80046ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d022      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2205      	movs	r2, #5
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0201 	bic.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3301      	adds	r3, #1
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	429a      	cmp	r2, r3
 8004682:	d307      	bcc.n	8004694 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f2      	bne.n	8004678 <HAL_DMA_IRQHandler+0x2cc>
 8004692:	e000      	b.n	8004696 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004694:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
 80046b6:	e000      	b.n	80046ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80046b8:	bf00      	nop
    }
  }
}
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b40      	cmp	r3, #64	@ 0x40
 80046ec:	d108      	bne.n	8004700 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046fe:	e007      	b.n	8004710 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	60da      	str	r2, [r3, #12]
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	3b10      	subs	r3, #16
 800472c:	4a14      	ldr	r2, [pc, #80]	@ (8004780 <DMA_CalcBaseAndBitshift+0x64>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004736:	4a13      	ldr	r2, [pc, #76]	@ (8004784 <DMA_CalcBaseAndBitshift+0x68>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d909      	bls.n	800475e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	1d1a      	adds	r2, r3, #4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	659a      	str	r2, [r3, #88]	@ 0x58
 800475c:	e007      	b.n	800476e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	aaaaaaab 	.word	0xaaaaaaab
 8004784:	08008c54 	.word	0x08008c54

08004788 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d11f      	bne.n	80047e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d856      	bhi.n	8004856 <DMA_CheckFifoParam+0xce>
 80047a8:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <DMA_CheckFifoParam+0x28>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047d3 	.word	0x080047d3
 80047b8:	080047c1 	.word	0x080047c1
 80047bc:	08004857 	.word	0x08004857
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d046      	beq.n	800485a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d0:	e043      	b.n	800485a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047da:	d140      	bne.n	800485e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e0:	e03d      	b.n	800485e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ea:	d121      	bne.n	8004830 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d837      	bhi.n	8004862 <DMA_CheckFifoParam+0xda>
 80047f2:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <DMA_CheckFifoParam+0x70>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	08004809 	.word	0x08004809
 80047fc:	0800480f 	.word	0x0800480f
 8004800:	08004809 	.word	0x08004809
 8004804:	08004821 	.word	0x08004821
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      break;
 800480c:	e030      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d025      	beq.n	8004866 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800481e:	e022      	b.n	8004866 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004828:	d11f      	bne.n	800486a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800482e:	e01c      	b.n	800486a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d903      	bls.n	800483e <DMA_CheckFifoParam+0xb6>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d003      	beq.n	8004844 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800483c:	e018      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
      break;
 8004842:	e015      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00e      	beq.n	800486e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      break;
 8004854:	e00b      	b.n	800486e <DMA_CheckFifoParam+0xe6>
      break;
 8004856:	bf00      	nop
 8004858:	e00a      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
      break;
 800485a:	bf00      	nop
 800485c:	e008      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
      break;
 800485e:	bf00      	nop
 8004860:	e006      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
      break;
 8004862:	bf00      	nop
 8004864:	e004      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
      break;
 8004866:	bf00      	nop
 8004868:	e002      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
      break;   
 800486a:	bf00      	nop
 800486c:	e000      	b.n	8004870 <DMA_CheckFifoParam+0xe8>
      break;
 800486e:	bf00      	nop
    }
  } 
  
  return status; 
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop

08004880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	@ 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e159      	b.n	8004b50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800489c:	2201      	movs	r2, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	f040 8148 	bne.w	8004b4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d005      	beq.n	80048d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d130      	bne.n	8004934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	2203      	movs	r2, #3
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43db      	mvns	r3, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004908:	2201      	movs	r2, #1
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 0201 	and.w	r2, r3, #1
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b03      	cmp	r3, #3
 800493e:	d017      	beq.n	8004970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d123      	bne.n	80049c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	08da      	lsrs	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3208      	adds	r2, #8
 8004984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	220f      	movs	r2, #15
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	08da      	lsrs	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3208      	adds	r2, #8
 80049be:	69b9      	ldr	r1, [r7, #24]
 80049c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	2203      	movs	r2, #3
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80a2 	beq.w	8004b4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	4b57      	ldr	r3, [pc, #348]	@ (8004b68 <HAL_GPIO_Init+0x2e8>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0e:	4a56      	ldr	r2, [pc, #344]	@ (8004b68 <HAL_GPIO_Init+0x2e8>)
 8004a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a16:	4b54      	ldr	r3, [pc, #336]	@ (8004b68 <HAL_GPIO_Init+0x2e8>)
 8004a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a22:	4a52      	ldr	r2, [pc, #328]	@ (8004b6c <HAL_GPIO_Init+0x2ec>)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	3302      	adds	r3, #2
 8004a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	220f      	movs	r2, #15
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a49      	ldr	r2, [pc, #292]	@ (8004b70 <HAL_GPIO_Init+0x2f0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d019      	beq.n	8004a82 <HAL_GPIO_Init+0x202>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a48      	ldr	r2, [pc, #288]	@ (8004b74 <HAL_GPIO_Init+0x2f4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <HAL_GPIO_Init+0x1fe>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a47      	ldr	r2, [pc, #284]	@ (8004b78 <HAL_GPIO_Init+0x2f8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00d      	beq.n	8004a7a <HAL_GPIO_Init+0x1fa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a46      	ldr	r2, [pc, #280]	@ (8004b7c <HAL_GPIO_Init+0x2fc>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <HAL_GPIO_Init+0x1f6>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a45      	ldr	r2, [pc, #276]	@ (8004b80 <HAL_GPIO_Init+0x300>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d101      	bne.n	8004a72 <HAL_GPIO_Init+0x1f2>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	e008      	b.n	8004a84 <HAL_GPIO_Init+0x204>
 8004a72:	2307      	movs	r3, #7
 8004a74:	e006      	b.n	8004a84 <HAL_GPIO_Init+0x204>
 8004a76:	2303      	movs	r3, #3
 8004a78:	e004      	b.n	8004a84 <HAL_GPIO_Init+0x204>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e002      	b.n	8004a84 <HAL_GPIO_Init+0x204>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_GPIO_Init+0x204>
 8004a82:	2300      	movs	r3, #0
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	f002 0203 	and.w	r2, r2, #3
 8004a8a:	0092      	lsls	r2, r2, #2
 8004a8c:	4093      	lsls	r3, r2
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a94:	4935      	ldr	r1, [pc, #212]	@ (8004b6c <HAL_GPIO_Init+0x2ec>)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aa2:	4b38      	ldr	r3, [pc, #224]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004acc:	4b2d      	ldr	r3, [pc, #180]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004af0:	4a24      	ldr	r2, [pc, #144]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004af6:	4b23      	ldr	r3, [pc, #140]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b20:	4b18      	ldr	r3, [pc, #96]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b44:	4a0f      	ldr	r2, [pc, #60]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	f67f aea2 	bls.w	800489c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	3724      	adds	r7, #36	@ 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40013800 	.word	0x40013800
 8004b70:	40020000 	.word	0x40020000
 8004b74:	40020400 	.word	0x40020400
 8004b78:	40020800 	.word	0x40020800
 8004b7c:	40020c00 	.word	0x40020c00
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40013c00 	.word	0x40013c00

08004b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	887b      	ldrh	r3, [r7, #2]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
 8004ba4:	e001      	b.n	8004baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	807b      	strh	r3, [r7, #2]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bc8:	787b      	ldrb	r3, [r7, #1]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bd4:	e003      	b.n	8004bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bd6:	887b      	ldrh	r3, [r7, #2]
 8004bd8:	041a      	lsls	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	619a      	str	r2, [r3, #24]
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e267      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d075      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c0a:	4b88      	ldr	r3, [pc, #544]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d00c      	beq.n	8004c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c16:	4b85      	ldr	r3, [pc, #532]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d112      	bne.n	8004c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c22:	4b82      	ldr	r3, [pc, #520]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c2e:	d10b      	bne.n	8004c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	4b7e      	ldr	r3, [pc, #504]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d05b      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x108>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d157      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e242      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c50:	d106      	bne.n	8004c60 <HAL_RCC_OscConfig+0x74>
 8004c52:	4b76      	ldr	r3, [pc, #472]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a75      	ldr	r2, [pc, #468]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e01d      	b.n	8004c9c <HAL_RCC_OscConfig+0xb0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x98>
 8004c6a:	4b70      	ldr	r3, [pc, #448]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	4b6d      	ldr	r3, [pc, #436]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_OscConfig+0xb0>
 8004c84:	4b69      	ldr	r3, [pc, #420]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a68      	ldr	r2, [pc, #416]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	4b66      	ldr	r3, [pc, #408]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a65      	ldr	r2, [pc, #404]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d013      	beq.n	8004ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7ff f918 	bl	8003ed8 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cac:	f7ff f914 	bl	8003ed8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e207      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0xc0>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ccc:	f7ff f904 	bl	8003ed8 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7ff f900 	bl	8003ed8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	@ 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e1f3      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce6:	4b51      	ldr	r3, [pc, #324]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0xe8>
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d063      	beq.n	8004dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d02:	4b4a      	ldr	r3, [pc, #296]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0e:	4b47      	ldr	r3, [pc, #284]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d11c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1a:	4b44      	ldr	r3, [pc, #272]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d116      	bne.n	8004d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d26:	4b41      	ldr	r3, [pc, #260]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_RCC_OscConfig+0x152>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d001      	beq.n	8004d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e1c7      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4937      	ldr	r1, [pc, #220]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d52:	e03a      	b.n	8004dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d5c:	4b34      	ldr	r3, [pc, #208]	@ (8004e30 <HAL_RCC_OscConfig+0x244>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7ff f8b9 	bl	8003ed8 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7ff f8b5 	bl	8003ed8 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e1a8      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d88:	4b28      	ldr	r3, [pc, #160]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4925      	ldr	r1, [pc, #148]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]
 8004d9c:	e015      	b.n	8004dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9e:	4b24      	ldr	r3, [pc, #144]	@ (8004e30 <HAL_RCC_OscConfig+0x244>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7ff f898 	bl	8003ed8 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dac:	f7ff f894 	bl	8003ed8 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e187      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d036      	beq.n	8004e44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dde:	4b15      	ldr	r3, [pc, #84]	@ (8004e34 <HAL_RCC_OscConfig+0x248>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7ff f878 	bl	8003ed8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dec:	f7ff f874 	bl	8003ed8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e167      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_RCC_OscConfig+0x240>)
 8004e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x200>
 8004e0a:	e01b      	b.n	8004e44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e0c:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <HAL_RCC_OscConfig+0x248>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e12:	f7ff f861 	bl	8003ed8 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e18:	e00e      	b.n	8004e38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1a:	f7ff f85d 	bl	8003ed8 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d907      	bls.n	8004e38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e150      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	42470000 	.word	0x42470000
 8004e34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e38:	4b88      	ldr	r3, [pc, #544]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ea      	bne.n	8004e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8097 	beq.w	8004f80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e52:	2300      	movs	r3, #0
 8004e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e56:	4b81      	ldr	r3, [pc, #516]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10f      	bne.n	8004e82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	4b7d      	ldr	r3, [pc, #500]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e72:	4b7a      	ldr	r3, [pc, #488]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e82:	4b77      	ldr	r3, [pc, #476]	@ (8005060 <HAL_RCC_OscConfig+0x474>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d118      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8e:	4b74      	ldr	r3, [pc, #464]	@ (8005060 <HAL_RCC_OscConfig+0x474>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a73      	ldr	r2, [pc, #460]	@ (8005060 <HAL_RCC_OscConfig+0x474>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9a:	f7ff f81d 	bl	8003ed8 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea2:	f7ff f819 	bl	8003ed8 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e10c      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8005060 <HAL_RCC_OscConfig+0x474>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x2ea>
 8004ec8:	4b64      	ldr	r3, [pc, #400]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	4a63      	ldr	r2, [pc, #396]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed4:	e01c      	b.n	8004f10 <HAL_RCC_OscConfig+0x324>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x30c>
 8004ede:	4b5f      	ldr	r3, [pc, #380]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	4a5e      	ldr	r2, [pc, #376]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eea:	4b5c      	ldr	r3, [pc, #368]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	4a5b      	ldr	r2, [pc, #364]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0x324>
 8004ef8:	4b58      	ldr	r3, [pc, #352]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efc:	4a57      	ldr	r2, [pc, #348]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f04:	4b55      	ldr	r3, [pc, #340]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	4a54      	ldr	r2, [pc, #336]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f0a:	f023 0304 	bic.w	r3, r3, #4
 8004f0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fe ffde 	bl	8003ed8 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fe ffda 	bl	8003ed8 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0cb      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	4b49      	ldr	r3, [pc, #292]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ee      	beq.n	8004f20 <HAL_RCC_OscConfig+0x334>
 8004f42:	e014      	b.n	8004f6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f44:	f7fe ffc8 	bl	8003ed8 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4c:	f7fe ffc4 	bl	8003ed8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e0b5      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f62:	4b3e      	ldr	r3, [pc, #248]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1ee      	bne.n	8004f4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d105      	bne.n	8004f80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f74:	4b39      	ldr	r3, [pc, #228]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	4a38      	ldr	r2, [pc, #224]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80a1 	beq.w	80050cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f8a:	4b34      	ldr	r3, [pc, #208]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d05c      	beq.n	8005050 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d141      	bne.n	8005022 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9e:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <HAL_RCC_OscConfig+0x478>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa4:	f7fe ff98 	bl	8003ed8 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fe ff94 	bl	8003ed8 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e087      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbe:	4b27      	ldr	r3, [pc, #156]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	019b      	lsls	r3, r3, #6
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	061b      	lsls	r3, r3, #24
 8004fee:	491b      	ldr	r1, [pc, #108]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8005064 <HAL_RCC_OscConfig+0x478>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffa:	f7fe ff6d 	bl	8003ed8 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005002:	f7fe ff69 	bl	8003ed8 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e05c      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005014:	4b11      	ldr	r3, [pc, #68]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x416>
 8005020:	e054      	b.n	80050cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <HAL_RCC_OscConfig+0x478>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fe ff56 	bl	8003ed8 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005030:	f7fe ff52 	bl	8003ed8 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e045      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <HAL_RCC_OscConfig+0x470>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x444>
 800504e:	e03d      	b.n	80050cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e038      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
 800505c:	40023800 	.word	0x40023800
 8005060:	40007000 	.word	0x40007000
 8005064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005068:	4b1b      	ldr	r3, [pc, #108]	@ (80050d8 <HAL_RCC_OscConfig+0x4ec>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d028      	beq.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d121      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d11a      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800509e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d111      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	3b01      	subs	r3, #1
 80050b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d107      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800

080050dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0cc      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050f0:	4b68      	ldr	r3, [pc, #416]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d90c      	bls.n	8005118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b65      	ldr	r3, [pc, #404]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b63      	ldr	r3, [pc, #396]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0b8      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d020      	beq.n	8005166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005130:	4b59      	ldr	r3, [pc, #356]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a58      	ldr	r2, [pc, #352]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800513a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005148:	4b53      	ldr	r3, [pc, #332]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a52      	ldr	r2, [pc, #328]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005154:	4b50      	ldr	r3, [pc, #320]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	494d      	ldr	r1, [pc, #308]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d044      	beq.n	80051fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d107      	bne.n	800518a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	4b47      	ldr	r3, [pc, #284]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d119      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e07f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d003      	beq.n	800519a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005196:	2b03      	cmp	r3, #3
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519a:	4b3f      	ldr	r3, [pc, #252]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e06f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e067      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ba:	4b37      	ldr	r3, [pc, #220]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 0203 	bic.w	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4934      	ldr	r1, [pc, #208]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051cc:	f7fe fe84 	bl	8003ed8 <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	e00a      	b.n	80051ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d4:	f7fe fe80 	bl	8003ed8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e04f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 020c 	and.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d1eb      	bne.n	80051d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b25      	ldr	r3, [pc, #148]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d20c      	bcs.n	8005224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b22      	ldr	r3, [pc, #136]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b20      	ldr	r3, [pc, #128]	@ (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e032      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005230:	4b19      	ldr	r3, [pc, #100]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4916      	ldr	r1, [pc, #88]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524e:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	490e      	ldr	r1, [pc, #56]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005262:	f000 f821 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 8005266:	4602      	mov	r2, r0
 8005268:	4b0b      	ldr	r3, [pc, #44]	@ (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	490a      	ldr	r1, [pc, #40]	@ (800529c <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	5ccb      	ldrb	r3, [r1, r3]
 8005276:	fa22 f303 	lsr.w	r3, r2, r3
 800527a:	4a09      	ldr	r2, [pc, #36]	@ (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800527e:	4b09      	ldr	r3, [pc, #36]	@ (80052a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fde4 	bl	8003e50 <HAL_InitTick>

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023c00 	.word	0x40023c00
 8005298:	40023800 	.word	0x40023800
 800529c:	08008c44 	.word	0x08008c44
 80052a0:	20000064 	.word	0x20000064
 80052a4:	20000068 	.word	0x20000068

080052a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ac:	b090      	sub	sp, #64	@ 0x40
 80052ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b4:	2300      	movs	r3, #0
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052b8:	2300      	movs	r3, #0
 80052ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c0:	4b59      	ldr	r3, [pc, #356]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 030c 	and.w	r3, r3, #12
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d00d      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0x40>
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	f200 80a1 	bhi.w	8005414 <HAL_RCC_GetSysClockFreq+0x16c>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x34>
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052da:	e09b      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052dc:	4b53      	ldr	r3, [pc, #332]	@ (800542c <HAL_RCC_GetSysClockFreq+0x184>)
 80052de:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80052e0:	e09b      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052e2:	4b53      	ldr	r3, [pc, #332]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x188>)
 80052e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052e6:	e098      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d028      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	099b      	lsrs	r3, r3, #6
 8005304:	2200      	movs	r2, #0
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	627a      	str	r2, [r7, #36]	@ 0x24
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005310:	2100      	movs	r1, #0
 8005312:	4b47      	ldr	r3, [pc, #284]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x188>)
 8005314:	fb03 f201 	mul.w	r2, r3, r1
 8005318:	2300      	movs	r3, #0
 800531a:	fb00 f303 	mul.w	r3, r0, r3
 800531e:	4413      	add	r3, r2
 8005320:	4a43      	ldr	r2, [pc, #268]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x188>)
 8005322:	fba0 1202 	umull	r1, r2, r0, r2
 8005326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005328:	460a      	mov	r2, r1
 800532a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800532c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532e:	4413      	add	r3, r2
 8005330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005334:	2200      	movs	r2, #0
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	61fa      	str	r2, [r7, #28]
 800533a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800533e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005342:	f7fb fb8b 	bl	8000a5c <__aeabi_uldivmod>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4613      	mov	r3, r2
 800534c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800534e:	e053      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005350:	4b35      	ldr	r3, [pc, #212]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	2200      	movs	r2, #0
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	617a      	str	r2, [r7, #20]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005362:	f04f 0b00 	mov.w	fp, #0
 8005366:	4652      	mov	r2, sl
 8005368:	465b      	mov	r3, fp
 800536a:	f04f 0000 	mov.w	r0, #0
 800536e:	f04f 0100 	mov.w	r1, #0
 8005372:	0159      	lsls	r1, r3, #5
 8005374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005378:	0150      	lsls	r0, r2, #5
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	ebb2 080a 	subs.w	r8, r2, sl
 8005382:	eb63 090b 	sbc.w	r9, r3, fp
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005392:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005396:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800539a:	ebb2 0408 	subs.w	r4, r2, r8
 800539e:	eb63 0509 	sbc.w	r5, r3, r9
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	00eb      	lsls	r3, r5, #3
 80053ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053b0:	00e2      	lsls	r2, r4, #3
 80053b2:	4614      	mov	r4, r2
 80053b4:	461d      	mov	r5, r3
 80053b6:	eb14 030a 	adds.w	r3, r4, sl
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	eb45 030b 	adc.w	r3, r5, fp
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ce:	4629      	mov	r1, r5
 80053d0:	028b      	lsls	r3, r1, #10
 80053d2:	4621      	mov	r1, r4
 80053d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053d8:	4621      	mov	r1, r4
 80053da:	028a      	lsls	r2, r1, #10
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e2:	2200      	movs	r2, #0
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	60fa      	str	r2, [r7, #12]
 80053e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053ec:	f7fb fb36 	bl	8000a5c <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4613      	mov	r3, r2
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x180>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005408:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005412:	e002      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <HAL_RCC_GetSysClockFreq+0x184>)
 8005416:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800541c:	4618      	mov	r0, r3
 800541e:	3740      	adds	r7, #64	@ 0x40
 8005420:	46bd      	mov	sp, r7
 8005422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	00f42400 	.word	0x00f42400
 8005430:	016e3600 	.word	0x016e3600

08005434 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005458:	2b00      	cmp	r3, #0
 800545a:	d038      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800545c:	4b68      	ldr	r3, [pc, #416]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005462:	f7fe fd39 	bl	8003ed8 <HAL_GetTick>
 8005466:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005468:	e008      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800546a:	f7fe fd35 	bl	8003ed8 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e0bd      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800547c:	4b61      	ldr	r3, [pc, #388]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f0      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	019b      	lsls	r3, r3, #6
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	071b      	lsls	r3, r3, #28
 800549a:	495a      	ldr	r1, [pc, #360]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054a2:	4b57      	ldr	r3, [pc, #348]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054a8:	f7fe fd16 	bl	8003ed8 <HAL_GetTick>
 80054ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054b0:	f7fe fd12 	bl	8003ed8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e09a      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054c2:	4b50      	ldr	r3, [pc, #320]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8083 	beq.w	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	4b48      	ldr	r3, [pc, #288]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e4:	4a47      	ldr	r2, [pc, #284]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80054ec:	4b45      	ldr	r3, [pc, #276]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054f8:	4b43      	ldr	r3, [pc, #268]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a42      	ldr	r2, [pc, #264]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005502:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005504:	f7fe fce8 	bl	8003ed8 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800550c:	f7fe fce4 	bl	8003ed8 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e06c      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800551e:	4b3a      	ldr	r3, [pc, #232]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800552a:	4b36      	ldr	r3, [pc, #216]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005532:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d02f      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d028      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005548:	4b2e      	ldr	r3, [pc, #184]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005550:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005552:	4b2e      	ldr	r3, [pc, #184]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005558:	4b2c      	ldr	r3, [pc, #176]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800555e:	4a29      	ldr	r2, [pc, #164]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005564:	4b27      	ldr	r3, [pc, #156]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d114      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005570:	f7fe fcb2 	bl	8003ed8 <HAL_GetTick>
 8005574:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005576:	e00a      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fe fcae 	bl	8003ed8 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e034      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0ee      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055a6:	d10d      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80055a8:	4b16      	ldr	r3, [pc, #88]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80055b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055bc:	4911      	ldr	r1, [pc, #68]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
 80055c2:	e005      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80055c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80055ce:	6093      	str	r3, [r2, #8]
 80055d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055dc:	4909      	ldr	r1, [pc, #36]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7d1a      	ldrb	r2, [r3, #20]
 80055f2:	4b07      	ldr	r3, [pc, #28]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80055f4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	42470068 	.word	0x42470068
 8005604:	40023800 	.word	0x40023800
 8005608:	40007000 	.word	0x40007000
 800560c:	42470e40 	.word	0x42470e40
 8005610:	424711e0 	.word	0x424711e0

08005614 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e073      	b.n	8005712 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7f5b      	ldrb	r3, [r3, #29]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fe f996 	bl	800396c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d055      	beq.n	8005700 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	22ca      	movs	r2, #202	@ 0xca
 800565a:	625a      	str	r2, [r3, #36]	@ 0x24
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2253      	movs	r2, #83	@ 0x53
 8005662:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa49 	bl	8005afc <RTC_EnterInitMode>
 800566a:	4603      	mov	r3, r0
 800566c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d12c      	bne.n	80056ce <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005686:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6899      	ldr	r1, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68d2      	ldr	r2, [r2, #12]
 80056ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6919      	ldr	r1, [r3, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	041a      	lsls	r2, r3, #16
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa50 	bl	8005b6a <RTC_ExitInitMode>
 80056ca:	4603      	mov	r3, r0
 80056cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d110      	bne.n	80056f6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	22ff      	movs	r2, #255	@ 0xff
 80056fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80056fe:	e001      	b.n	8005704 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800571a:	b590      	push	{r4, r7, lr}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	7f1b      	ldrb	r3, [r3, #28]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_RTC_SetTime+0x1c>
 8005732:	2302      	movs	r3, #2
 8005734:	e087      	b.n	8005846 <HAL_RTC_SetTime+0x12c>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2202      	movs	r2, #2
 8005740:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d126      	bne.n	8005796 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2200      	movs	r2, #0
 800575a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fa27 	bl	8005bb4 <RTC_ByteToBcd2>
 8005766:	4603      	mov	r3, r0
 8005768:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fa20 	bl	8005bb4 <RTC_ByteToBcd2>
 8005774:	4603      	mov	r3, r0
 8005776:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005778:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	789b      	ldrb	r3, [r3, #2]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fa18 	bl	8005bb4 <RTC_ByteToBcd2>
 8005784:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005786:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	78db      	ldrb	r3, [r3, #3]
 800578e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e018      	b.n	80057c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057b6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80057bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	78db      	ldrb	r3, [r3, #3]
 80057c2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057c4:	4313      	orrs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	22ca      	movs	r2, #202	@ 0xca
 80057ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2253      	movs	r2, #83	@ 0x53
 80057d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f98f 	bl	8005afc <RTC_EnterInitMode>
 80057de:	4603      	mov	r3, r0
 80057e0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d120      	bne.n	800582a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80057f2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80057f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005806:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6899      	ldr	r1, [r3, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	431a      	orrs	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f9a2 	bl	8005b6a <RTC_ExitInitMode>
 8005826:	4603      	mov	r3, r0
 8005828:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	22ff      	movs	r2, #255	@ 0xff
 800583c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]

  return status;
 8005844:	7cfb      	ldrb	r3, [r7, #19]
}
 8005846:	4618      	mov	r0, r3
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}

0800584e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b086      	sub	sp, #24
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005880:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005884:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005890:	b2da      	uxtb	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	0d9b      	lsrs	r3, r3, #22
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11a      	bne.n	8005900 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f98e 	bl	8005bf0 <RTC_Bcd2ToByte>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 f985 	bl	8005bf0 <RTC_Bcd2ToByte>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	789b      	ldrb	r3, [r3, #2]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f97c 	bl	8005bf0 <RTC_Bcd2ToByte>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800590a:	b590      	push	{r4, r7, lr}
 800590c:	b087      	sub	sp, #28
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	7f1b      	ldrb	r3, [r3, #28]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_RTC_SetDate+0x1c>
 8005922:	2302      	movs	r3, #2
 8005924:	e071      	b.n	8005a0a <HAL_RTC_SetDate+0x100>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2202      	movs	r2, #2
 8005930:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10e      	bne.n	8005956 <HAL_RTC_SetDate+0x4c>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	f023 0310 	bic.w	r3, r3, #16
 800594c:	b2db      	uxtb	r3, r3
 800594e:	330a      	adds	r3, #10
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11c      	bne.n	8005996 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	78db      	ldrb	r3, [r3, #3]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f927 	bl	8005bb4 <RTC_ByteToBcd2>
 8005966:	4603      	mov	r3, r0
 8005968:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f920 	bl	8005bb4 <RTC_ByteToBcd2>
 8005974:	4603      	mov	r3, r0
 8005976:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005978:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	789b      	ldrb	r3, [r3, #2]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f918 	bl	8005bb4 <RTC_ByteToBcd2>
 8005984:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005986:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e00e      	b.n	80059b4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	78db      	ldrb	r3, [r3, #3]
 800599a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059a2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80059a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	22ca      	movs	r2, #202	@ 0xca
 80059ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2253      	movs	r2, #83	@ 0x53
 80059c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f899 	bl	8005afc <RTC_EnterInitMode>
 80059ca:	4603      	mov	r3, r0
 80059cc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80059ce:	7cfb      	ldrb	r3, [r7, #19]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10c      	bne.n	80059ee <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80059de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059e2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f8c0 	bl	8005b6a <RTC_ExitInitMode>
 80059ea:	4603      	mov	r3, r0
 80059ec:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	22ff      	movs	r2, #255	@ 0xff
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	771a      	strb	r2, [r3, #28]

  return status;
 8005a08:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd90      	pop	{r4, r7, pc}

08005a12 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005a2c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	0b5b      	lsrs	r3, r3, #13
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d11a      	bne.n	8005aa6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	78db      	ldrb	r3, [r3, #3]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 f8bb 	bl	8005bf0 <RTC_Bcd2ToByte>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 f8b2 	bl	8005bf0 <RTC_Bcd2ToByte>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	789b      	ldrb	r3, [r3, #2]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 f8a9 	bl	8005bf0 <RTC_Bcd2ToByte>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8005af8 <HAL_RTC_WaitForSynchro+0x48>)
 8005ac2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac4:	f7fe fa08 	bl	8003ed8 <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005aca:	e009      	b.n	8005ae0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005acc:	f7fe fa04 	bl	8003ed8 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ada:	d901      	bls.n	8005ae0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e007      	b.n	8005af0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0ee      	beq.n	8005acc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	00013f5f 	.word	0x00013f5f

08005afc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d122      	bne.n	8005b60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b2a:	f7fe f9d5 	bl	8003ed8 <HAL_GetTick>
 8005b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b30:	e00c      	b.n	8005b4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b32:	f7fe f9d1 	bl	8003ed8 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b40:	d904      	bls.n	8005b4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2204      	movs	r2, #4
 8005b46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <RTC_EnterInitMode+0x64>
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d1e8      	bne.n	8005b32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff ff8b 	bl	8005ab0 <HAL_RTC_WaitForSynchro>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005bc2:	e005      	b.n	8005bd0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	3b0a      	subs	r3, #10
 8005bce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	d8f6      	bhi.n	8005bc4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	b2db      	uxtb	r3, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	091b      	lsrs	r3, r3, #4
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	b2db      	uxtb	r3, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e041      	b.n	8005cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fd feb6 	bl	80039c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 ffb6 	bl	8006bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e041      	b.n	8005d60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f839 	bl	8005d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 ff67 	bl	8006bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	e022      	b.n	8005dee <HAL_TIM_PWM_Start_DMA+0x72>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d109      	bne.n	8005dc2 <HAL_TIM_PWM_Start_DMA+0x46>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e015      	b.n	8005dee <HAL_TIM_PWM_Start_DMA+0x72>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d109      	bne.n	8005ddc <HAL_TIM_PWM_Start_DMA+0x60>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e008      	b.n	8005dee <HAL_TIM_PWM_Start_DMA+0x72>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
 8005df4:	e15d      	b.n	80060b2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start_DMA+0x94>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	bf0c      	ite	eq
 8005e08:	2301      	moveq	r3, #1
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e022      	b.n	8005e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d109      	bne.n	8005e2a <HAL_TIM_PWM_Start_DMA+0xae>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e015      	b.n	8005e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d109      	bne.n	8005e44 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2301      	moveq	r3, #1
 8005e3e:	2300      	movne	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e008      	b.n	8005e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d024      	beq.n	8005ea4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <HAL_TIM_PWM_Start_DMA+0xea>
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e123      	b.n	80060b2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PWM_Start_DMA+0xfe>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e78:	e016      	b.n	8005ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Start_DMA+0x10e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e88:	e00e      	b.n	8005ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e98:	e006      	b.n	8005ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea2:	e001      	b.n	8005ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e104      	b.n	80060b2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	f200 80ae 	bhi.w	800600c <HAL_TIM_PWM_Start_DMA+0x290>
 8005eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	0800600d 	.word	0x0800600d
 8005ec0:	0800600d 	.word	0x0800600d
 8005ec4:	0800600d 	.word	0x0800600d
 8005ec8:	08005f35 	.word	0x08005f35
 8005ecc:	0800600d 	.word	0x0800600d
 8005ed0:	0800600d 	.word	0x0800600d
 8005ed4:	0800600d 	.word	0x0800600d
 8005ed8:	08005f7d 	.word	0x08005f7d
 8005edc:	0800600d 	.word	0x0800600d
 8005ee0:	0800600d 	.word	0x0800600d
 8005ee4:	0800600d 	.word	0x0800600d
 8005ee8:	08005fc5 	.word	0x08005fc5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	4a72      	ldr	r2, [pc, #456]	@ (80060bc <HAL_TIM_PWM_Start_DMA+0x340>)
 8005ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	4a71      	ldr	r2, [pc, #452]	@ (80060c0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	4a70      	ldr	r2, [pc, #448]	@ (80060c4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005f02:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3334      	adds	r3, #52	@ 0x34
 8005f10:	461a      	mov	r2, r3
 8005f12:	887b      	ldrh	r3, [r7, #2]
 8005f14:	f7fe f9d0 	bl	80042b8 <HAL_DMA_Start_IT>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e0c7      	b.n	80060b2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f30:	60da      	str	r2, [r3, #12]
      break;
 8005f32:	e06e      	b.n	8006012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	4a60      	ldr	r2, [pc, #384]	@ (80060bc <HAL_TIM_PWM_Start_DMA+0x340>)
 8005f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	4a5f      	ldr	r2, [pc, #380]	@ (80060c0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005f42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	4a5e      	ldr	r2, [pc, #376]	@ (80060c4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005f4a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3338      	adds	r3, #56	@ 0x38
 8005f58:	461a      	mov	r2, r3
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	f7fe f9ac 	bl	80042b8 <HAL_DMA_Start_IT>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0a3      	b.n	80060b2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f78:	60da      	str	r2, [r3, #12]
      break;
 8005f7a:	e04a      	b.n	8006012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	4a4e      	ldr	r2, [pc, #312]	@ (80060bc <HAL_TIM_PWM_Start_DMA+0x340>)
 8005f82:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	4a4d      	ldr	r2, [pc, #308]	@ (80060c0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	4a4c      	ldr	r2, [pc, #304]	@ (80060c4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005f92:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	333c      	adds	r3, #60	@ 0x3c
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	887b      	ldrh	r3, [r7, #2]
 8005fa4:	f7fe f988 	bl	80042b8 <HAL_DMA_Start_IT>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e07f      	b.n	80060b2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fc0:	60da      	str	r2, [r3, #12]
      break;
 8005fc2:	e026      	b.n	8006012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80060bc <HAL_TIM_PWM_Start_DMA+0x340>)
 8005fca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80060c0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80060c4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005fda:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3340      	adds	r3, #64	@ 0x40
 8005fe8:	461a      	mov	r2, r3
 8005fea:	887b      	ldrh	r3, [r7, #2]
 8005fec:	f7fe f964 	bl	80042b8 <HAL_DMA_Start_IT>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e05b      	b.n	80060b2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006008:	60da      	str	r2, [r3, #12]
      break;
 800600a:	e002      	b.n	8006012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
      break;
 8006010:	bf00      	nop
  }

  if (status == HAL_OK)
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d14b      	bne.n	80060b0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2201      	movs	r2, #1
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	4618      	mov	r0, r3
 8006022:	f001 f88d 	bl	8007140 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a27      	ldr	r2, [pc, #156]	@ (80060c8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d107      	bne.n	8006040 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800603e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a20      	ldr	r2, [pc, #128]	@ (80060c8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d018      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0x300>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006052:	d013      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0x300>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1c      	ldr	r2, [pc, #112]	@ (80060cc <HAL_TIM_PWM_Start_DMA+0x350>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00e      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0x300>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1b      	ldr	r2, [pc, #108]	@ (80060d0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0x300>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a19      	ldr	r2, [pc, #100]	@ (80060d4 <HAL_TIM_PWM_Start_DMA+0x358>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0x300>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a18      	ldr	r2, [pc, #96]	@ (80060d8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d111      	bne.n	80060a0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b06      	cmp	r3, #6
 800608c:	d010      	beq.n	80060b0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0201 	orr.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609e:	e007      	b.n	80060b0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	08006acd 	.word	0x08006acd
 80060c0:	08006b75 	.word	0x08006b75
 80060c4:	08006a3b 	.word	0x08006a3b
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40014000 	.word	0x40014000

080060dc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d855      	bhi.n	800619c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80060f0:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	0800612d 	.word	0x0800612d
 80060fc:	0800619d 	.word	0x0800619d
 8006100:	0800619d 	.word	0x0800619d
 8006104:	0800619d 	.word	0x0800619d
 8006108:	08006149 	.word	0x08006149
 800610c:	0800619d 	.word	0x0800619d
 8006110:	0800619d 	.word	0x0800619d
 8006114:	0800619d 	.word	0x0800619d
 8006118:	08006165 	.word	0x08006165
 800611c:	0800619d 	.word	0x0800619d
 8006120:	0800619d 	.word	0x0800619d
 8006124:	0800619d 	.word	0x0800619d
 8006128:	08006181 	.word	0x08006181
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800613a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe f911 	bl	8004368 <HAL_DMA_Abort_IT>
      break;
 8006146:	e02c      	b.n	80061a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006156:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe f903 	bl	8004368 <HAL_DMA_Abort_IT>
      break;
 8006162:	e01e      	b.n	80061a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006172:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe f8f5 	bl	8004368 <HAL_DMA_Abort_IT>
      break;
 800617e:	e010      	b.n	80061a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800618e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe f8e7 	bl	8004368 <HAL_DMA_Abort_IT>
      break;
 800619a:	e002      	b.n	80061a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
      break;
 80061a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d157      	bne.n	8006258 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2200      	movs	r2, #0
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 ffc5 	bl	8007140 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006264 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d117      	bne.n	80061f0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a1a      	ldr	r2, [r3, #32]
 80061c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10f      	bne.n	80061f0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80061da:	4013      	ands	r3, r2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d107      	bne.n	80061f0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6a1a      	ldr	r2, [r3, #32]
 80061f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10f      	bne.n	8006220 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	f240 4344 	movw	r3, #1092	@ 0x444
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d107      	bne.n	8006220 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800622e:	e013      	b.n	8006258 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b04      	cmp	r3, #4
 8006234:	d104      	bne.n	8006240 <HAL_TIM_PWM_Stop_DMA+0x164>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800623e:	e00b      	b.n	8006258 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b08      	cmp	r3, #8
 8006244:	d104      	bne.n	8006250 <HAL_TIM_PWM_Stop_DMA+0x174>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800624e:	e003      	b.n	8006258 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000

08006268 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e097      	b.n	80063ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fd fbeb 	bl	8003a6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f000 fc8d 	bl	8006bdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	4313      	orrs	r3, r2
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006308:	f023 030c 	bic.w	r3, r3, #12
 800630c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006314:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	4313      	orrs	r3, r2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	011a      	lsls	r2, r3, #4
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	031b      	lsls	r3, r3, #12
 8006338:	4313      	orrs	r3, r2
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006346:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	4313      	orrs	r3, r2
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80063dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d110      	bne.n	8006406 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d102      	bne.n	80063f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063ea:	7b7b      	ldrb	r3, [r7, #13]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d001      	beq.n	80063f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e069      	b.n	80064c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006404:	e031      	b.n	800646a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b04      	cmp	r3, #4
 800640a:	d110      	bne.n	800642e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d102      	bne.n	8006418 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006412:	7b3b      	ldrb	r3, [r7, #12]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d001      	beq.n	800641c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e055      	b.n	80064c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800642c:	e01d      	b.n	800646a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d108      	bne.n	8006446 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d105      	bne.n	8006446 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800643a:	7b7b      	ldrb	r3, [r7, #13]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d102      	bne.n	8006446 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006440:	7b3b      	ldrb	r3, [r7, #12]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d001      	beq.n	800644a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e03e      	b.n	80064c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2202      	movs	r2, #2
 8006466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_TIM_Encoder_Start+0xc4>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b04      	cmp	r3, #4
 8006474:	d008      	beq.n	8006488 <HAL_TIM_Encoder_Start+0xd4>
 8006476:	e00f      	b.n	8006498 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fe5d 	bl	8007140 <TIM_CCxChannelCmd>
      break;
 8006486:	e016      	b.n	80064b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2201      	movs	r2, #1
 800648e:	2104      	movs	r1, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fe55 	bl	8007140 <TIM_CCxChannelCmd>
      break;
 8006496:	e00e      	b.n	80064b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fe4d 	bl	8007140 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2201      	movs	r2, #1
 80064ac:	2104      	movs	r1, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fe46 	bl	8007140 <TIM_CCxChannelCmd>
      break;
 80064b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d020      	beq.n	8006534 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01b      	beq.n	8006534 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0202 	mvn.w	r2, #2
 8006504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa65 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fa57 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fb f825 	bl	8001578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	d020      	beq.n	8006580 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01b      	beq.n	8006580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0204 	mvn.w	r2, #4
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa3f 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa31 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fa ffff 	bl	8001578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d020      	beq.n	80065cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0208 	mvn.w	r2, #8
 800659c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2204      	movs	r2, #4
 80065a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa19 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa0b 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fa ffd9 	bl	8001578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d020      	beq.n	8006618 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01b      	beq.n	8006618 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0210 	mvn.w	r2, #16
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2208      	movs	r2, #8
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f9f3 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9e5 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7fa ffb3 	bl	8001578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00c      	beq.n	800663c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0201 	mvn.w	r2, #1
 8006634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f9c3 	bl	80069c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00c      	beq.n	8006660 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fe60 	bl	8007320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00c      	beq.n	8006684 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9c7 	bl	8006a12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0220 	mvn.w	r2, #32
 80066a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fe32 	bl	800730c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e0ae      	b.n	800682c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b0c      	cmp	r3, #12
 80066da:	f200 809f 	bhi.w	800681c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066de:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	08006719 	.word	0x08006719
 80066e8:	0800681d 	.word	0x0800681d
 80066ec:	0800681d 	.word	0x0800681d
 80066f0:	0800681d 	.word	0x0800681d
 80066f4:	08006759 	.word	0x08006759
 80066f8:	0800681d 	.word	0x0800681d
 80066fc:	0800681d 	.word	0x0800681d
 8006700:	0800681d 	.word	0x0800681d
 8006704:	0800679b 	.word	0x0800679b
 8006708:	0800681d 	.word	0x0800681d
 800670c:	0800681d 	.word	0x0800681d
 8006710:	0800681d 	.word	0x0800681d
 8006714:	080067db 	.word	0x080067db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fae8 	bl	8006cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0208 	orr.w	r2, r2, #8
 8006732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0204 	bic.w	r2, r2, #4
 8006742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	619a      	str	r2, [r3, #24]
      break;
 8006756:	e064      	b.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fb2e 	bl	8006dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6999      	ldr	r1, [r3, #24]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	021a      	lsls	r2, r3, #8
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	619a      	str	r2, [r3, #24]
      break;
 8006798:	e043      	b.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fb79 	bl	8006e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0208 	orr.w	r2, r2, #8
 80067b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0204 	bic.w	r2, r2, #4
 80067c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69d9      	ldr	r1, [r3, #28]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	61da      	str	r2, [r3, #28]
      break;
 80067d8:	e023      	b.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fbc3 	bl	8006f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69d9      	ldr	r1, [r3, #28]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	021a      	lsls	r2, r3, #8
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	61da      	str	r2, [r3, #28]
      break;
 800681a:	e002      	b.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	75fb      	strb	r3, [r7, #23]
      break;
 8006820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_TIM_ConfigClockSource+0x1c>
 800684c:	2302      	movs	r3, #2
 800684e:	e0b4      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x186>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800686e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006888:	d03e      	beq.n	8006908 <HAL_TIM_ConfigClockSource+0xd4>
 800688a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800688e:	f200 8087 	bhi.w	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006896:	f000 8086 	beq.w	80069a6 <HAL_TIM_ConfigClockSource+0x172>
 800689a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689e:	d87f      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 80068a0:	2b70      	cmp	r3, #112	@ 0x70
 80068a2:	d01a      	beq.n	80068da <HAL_TIM_ConfigClockSource+0xa6>
 80068a4:	2b70      	cmp	r3, #112	@ 0x70
 80068a6:	d87b      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 80068a8:	2b60      	cmp	r3, #96	@ 0x60
 80068aa:	d050      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x11a>
 80068ac:	2b60      	cmp	r3, #96	@ 0x60
 80068ae:	d877      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b0:	2b50      	cmp	r3, #80	@ 0x50
 80068b2:	d03c      	beq.n	800692e <HAL_TIM_ConfigClockSource+0xfa>
 80068b4:	2b50      	cmp	r3, #80	@ 0x50
 80068b6:	d873      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b8:	2b40      	cmp	r3, #64	@ 0x40
 80068ba:	d058      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x13a>
 80068bc:	2b40      	cmp	r3, #64	@ 0x40
 80068be:	d86f      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b30      	cmp	r3, #48	@ 0x30
 80068c2:	d064      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x15a>
 80068c4:	2b30      	cmp	r3, #48	@ 0x30
 80068c6:	d86b      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d060      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x15a>
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d867      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d05c      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x15a>
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d05a      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x15a>
 80068d8:	e062      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	f000 fc09 	bl	8007100 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	609a      	str	r2, [r3, #8]
      break;
 8006906:	e04f      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006918:	f000 fbf2 	bl	8007100 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800692a:	609a      	str	r2, [r3, #8]
      break;
 800692c:	e03c      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800693a:	461a      	mov	r2, r3
 800693c:	f000 fb66 	bl	800700c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2150      	movs	r1, #80	@ 0x50
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fbbf 	bl	80070ca <TIM_ITRx_SetConfig>
      break;
 800694c:	e02c      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800695a:	461a      	mov	r2, r3
 800695c:	f000 fb85 	bl	800706a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2160      	movs	r1, #96	@ 0x60
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fbaf 	bl	80070ca <TIM_ITRx_SetConfig>
      break;
 800696c:	e01c      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800697a:	461a      	mov	r2, r3
 800697c:	f000 fb46 	bl	800700c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2140      	movs	r1, #64	@ 0x40
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fb9f 	bl	80070ca <TIM_ITRx_SetConfig>
      break;
 800698c:	e00c      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	f000 fb96 	bl	80070ca <TIM_ITRx_SetConfig>
      break;
 800699e:	e003      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
      break;
 80069a4:	e000      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a46:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d107      	bne.n	8006a62 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a60:	e02a      	b.n	8006ab8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d107      	bne.n	8006a7c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a7a:	e01d      	b.n	8006ab8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d107      	bne.n	8006a96 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2204      	movs	r2, #4
 8006a8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a94:	e010      	b.n	8006ab8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d107      	bne.n	8006ab0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006aae:	e003      	b.n	8006ab8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7ff ffb4 	bl	8006a26 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d10b      	bne.n	8006afc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d136      	bne.n	8006b60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006afa:	e031      	b.n	8006b60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d10b      	bne.n	8006b1e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d125      	bne.n	8006b60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b1c:	e020      	b.n	8006b60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d10b      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d114      	bne.n	8006b60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b3e:	e00f      	b.n	8006b60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d10a      	bne.n	8006b60 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f7fa fd09 	bl	8001578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	771a      	strb	r2, [r3, #28]
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d103      	bne.n	8006b94 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	771a      	strb	r2, [r3, #28]
 8006b92:	e019      	b.n	8006bc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d103      	bne.n	8006ba6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	771a      	strb	r2, [r3, #28]
 8006ba4:	e010      	b.n	8006bc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d103      	bne.n	8006bb8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	771a      	strb	r2, [r3, #28]
 8006bb6:	e007      	b.n	8006bc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d102      	bne.n	8006bc8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff ff18 	bl	80069fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	771a      	strb	r2, [r3, #28]
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a3a      	ldr	r2, [pc, #232]	@ (8006cd8 <TIM_Base_SetConfig+0xfc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00f      	beq.n	8006c14 <TIM_Base_SetConfig+0x38>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfa:	d00b      	beq.n	8006c14 <TIM_Base_SetConfig+0x38>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a37      	ldr	r2, [pc, #220]	@ (8006cdc <TIM_Base_SetConfig+0x100>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d007      	beq.n	8006c14 <TIM_Base_SetConfig+0x38>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a36      	ldr	r2, [pc, #216]	@ (8006ce0 <TIM_Base_SetConfig+0x104>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d003      	beq.n	8006c14 <TIM_Base_SetConfig+0x38>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a35      	ldr	r2, [pc, #212]	@ (8006ce4 <TIM_Base_SetConfig+0x108>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d108      	bne.n	8006c26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	@ (8006cd8 <TIM_Base_SetConfig+0xfc>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01b      	beq.n	8006c66 <TIM_Base_SetConfig+0x8a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c34:	d017      	beq.n	8006c66 <TIM_Base_SetConfig+0x8a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a28      	ldr	r2, [pc, #160]	@ (8006cdc <TIM_Base_SetConfig+0x100>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <TIM_Base_SetConfig+0x8a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a27      	ldr	r2, [pc, #156]	@ (8006ce0 <TIM_Base_SetConfig+0x104>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00f      	beq.n	8006c66 <TIM_Base_SetConfig+0x8a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a26      	ldr	r2, [pc, #152]	@ (8006ce4 <TIM_Base_SetConfig+0x108>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <TIM_Base_SetConfig+0x8a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a25      	ldr	r2, [pc, #148]	@ (8006ce8 <TIM_Base_SetConfig+0x10c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d007      	beq.n	8006c66 <TIM_Base_SetConfig+0x8a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a24      	ldr	r2, [pc, #144]	@ (8006cec <TIM_Base_SetConfig+0x110>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <TIM_Base_SetConfig+0x8a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a23      	ldr	r2, [pc, #140]	@ (8006cf0 <TIM_Base_SetConfig+0x114>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d108      	bne.n	8006c78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8006cd8 <TIM_Base_SetConfig+0xfc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d103      	bne.n	8006cac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d105      	bne.n	8006cca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f023 0201 	bic.w	r2, r3, #1
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	611a      	str	r2, [r3, #16]
  }
}
 8006cca:	bf00      	nop
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800
 8006ce4:	40000c00 	.word	0x40000c00
 8006ce8:	40014000 	.word	0x40014000
 8006cec:	40014400 	.word	0x40014400
 8006cf0:	40014800 	.word	0x40014800

08006cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f023 0201 	bic.w	r2, r3, #1
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0303 	bic.w	r3, r3, #3
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 0302 	bic.w	r3, r3, #2
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dbc <TIM_OC1_SetConfig+0xc8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10c      	bne.n	8006d6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0308 	bic.w	r3, r3, #8
 8006d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a13      	ldr	r2, [pc, #76]	@ (8006dbc <TIM_OC1_SetConfig+0xc8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d111      	bne.n	8006d96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	621a      	str	r2, [r3, #32]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40010000 	.word	0x40010000

08006dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f023 0210 	bic.w	r2, r3, #16
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0320 	bic.w	r3, r3, #32
 8006e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006e94 <TIM_OC2_SetConfig+0xd4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10d      	bne.n	8006e3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <TIM_OC2_SetConfig+0xd4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d113      	bne.n	8006e6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40010000 	.word	0x40010000

08006e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f68 <TIM_OC3_SetConfig+0xd0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d10d      	bne.n	8006f12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a14      	ldr	r2, [pc, #80]	@ (8006f68 <TIM_OC3_SetConfig+0xd0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d113      	bne.n	8006f42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40010000 	.word	0x40010000

08006f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	031b      	lsls	r3, r3, #12
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a10      	ldr	r2, [pc, #64]	@ (8007008 <TIM_OC4_SetConfig+0x9c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	019b      	lsls	r3, r3, #6
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40010000 	.word	0x40010000

0800700c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f023 0201 	bic.w	r2, r3, #1
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f023 030a 	bic.w	r3, r3, #10
 8007048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800706a:	b480      	push	{r7}
 800706c:	b087      	sub	sp, #28
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	f023 0210 	bic.w	r2, r3, #16
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	031b      	lsls	r3, r3, #12
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	f043 0307 	orr.w	r3, r3, #7
 80070ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	609a      	str	r2, [r3, #8]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800711a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	021a      	lsls	r2, r3, #8
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	431a      	orrs	r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4313      	orrs	r3, r2
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	609a      	str	r2, [r3, #8]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	2201      	movs	r2, #1
 8007154:	fa02 f303 	lsl.w	r3, r2, r3
 8007158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1a      	ldr	r2, [r3, #32]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	43db      	mvns	r3, r3
 8007162:	401a      	ands	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a1a      	ldr	r2, [r3, #32]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	fa01 f303 	lsl.w	r3, r1, r3
 8007178:	431a      	orrs	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800719c:	2b01      	cmp	r3, #1
 800719e:	d101      	bne.n	80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e050      	b.n	8007246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d018      	beq.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071f0:	d013      	beq.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a18      	ldr	r2, [pc, #96]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00e      	beq.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a16      	ldr	r2, [pc, #88]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d009      	beq.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a15      	ldr	r2, [pc, #84]	@ (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d004      	beq.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a13      	ldr	r2, [pc, #76]	@ (8007264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d10c      	bne.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	4313      	orrs	r3, r2
 800722a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	40010000 	.word	0x40010000
 8007258:	40000400 	.word	0x40000400
 800725c:	40000800 	.word	0x40000800
 8007260:	40000c00 	.word	0x40000c00
 8007264:	40014000 	.word	0x40014000

08007268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007280:	2302      	movs	r3, #2
 8007282:	e03d      	b.n	8007300 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <rand>:
 8007334:	4b16      	ldr	r3, [pc, #88]	@ (8007390 <rand+0x5c>)
 8007336:	b510      	push	{r4, lr}
 8007338:	681c      	ldr	r4, [r3, #0]
 800733a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800733c:	b9b3      	cbnz	r3, 800736c <rand+0x38>
 800733e:	2018      	movs	r0, #24
 8007340:	f000 fa7a 	bl	8007838 <malloc>
 8007344:	4602      	mov	r2, r0
 8007346:	6320      	str	r0, [r4, #48]	@ 0x30
 8007348:	b920      	cbnz	r0, 8007354 <rand+0x20>
 800734a:	4b12      	ldr	r3, [pc, #72]	@ (8007394 <rand+0x60>)
 800734c:	4812      	ldr	r0, [pc, #72]	@ (8007398 <rand+0x64>)
 800734e:	2152      	movs	r1, #82	@ 0x52
 8007350:	f000 fa0a 	bl	8007768 <__assert_func>
 8007354:	4911      	ldr	r1, [pc, #68]	@ (800739c <rand+0x68>)
 8007356:	4b12      	ldr	r3, [pc, #72]	@ (80073a0 <rand+0x6c>)
 8007358:	e9c0 1300 	strd	r1, r3, [r0]
 800735c:	4b11      	ldr	r3, [pc, #68]	@ (80073a4 <rand+0x70>)
 800735e:	6083      	str	r3, [r0, #8]
 8007360:	230b      	movs	r3, #11
 8007362:	8183      	strh	r3, [r0, #12]
 8007364:	2100      	movs	r1, #0
 8007366:	2001      	movs	r0, #1
 8007368:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800736c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800736e:	480e      	ldr	r0, [pc, #56]	@ (80073a8 <rand+0x74>)
 8007370:	690b      	ldr	r3, [r1, #16]
 8007372:	694c      	ldr	r4, [r1, #20]
 8007374:	4a0d      	ldr	r2, [pc, #52]	@ (80073ac <rand+0x78>)
 8007376:	4358      	muls	r0, r3
 8007378:	fb02 0004 	mla	r0, r2, r4, r0
 800737c:	fba3 3202 	umull	r3, r2, r3, r2
 8007380:	3301      	adds	r3, #1
 8007382:	eb40 0002 	adc.w	r0, r0, r2
 8007386:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800738a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800738e:	bd10      	pop	{r4, pc}
 8007390:	2000007c 	.word	0x2000007c
 8007394:	08008c5c 	.word	0x08008c5c
 8007398:	08008c73 	.word	0x08008c73
 800739c:	abcd330e 	.word	0xabcd330e
 80073a0:	e66d1234 	.word	0xe66d1234
 80073a4:	0005deec 	.word	0x0005deec
 80073a8:	5851f42d 	.word	0x5851f42d
 80073ac:	4c957f2d 	.word	0x4c957f2d

080073b0 <std>:
 80073b0:	2300      	movs	r3, #0
 80073b2:	b510      	push	{r4, lr}
 80073b4:	4604      	mov	r4, r0
 80073b6:	e9c0 3300 	strd	r3, r3, [r0]
 80073ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073be:	6083      	str	r3, [r0, #8]
 80073c0:	8181      	strh	r1, [r0, #12]
 80073c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80073c4:	81c2      	strh	r2, [r0, #14]
 80073c6:	6183      	str	r3, [r0, #24]
 80073c8:	4619      	mov	r1, r3
 80073ca:	2208      	movs	r2, #8
 80073cc:	305c      	adds	r0, #92	@ 0x5c
 80073ce:	f000 f92d 	bl	800762c <memset>
 80073d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007408 <std+0x58>)
 80073d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <std+0x5c>)
 80073d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073da:	4b0d      	ldr	r3, [pc, #52]	@ (8007410 <std+0x60>)
 80073dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073de:	4b0d      	ldr	r3, [pc, #52]	@ (8007414 <std+0x64>)
 80073e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80073e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <std+0x68>)
 80073e4:	6224      	str	r4, [r4, #32]
 80073e6:	429c      	cmp	r4, r3
 80073e8:	d006      	beq.n	80073f8 <std+0x48>
 80073ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073ee:	4294      	cmp	r4, r2
 80073f0:	d002      	beq.n	80073f8 <std+0x48>
 80073f2:	33d0      	adds	r3, #208	@ 0xd0
 80073f4:	429c      	cmp	r4, r3
 80073f6:	d105      	bne.n	8007404 <std+0x54>
 80073f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007400:	f000 b9a0 	b.w	8007744 <__retarget_lock_init_recursive>
 8007404:	bd10      	pop	{r4, pc}
 8007406:	bf00      	nop
 8007408:	08007535 	.word	0x08007535
 800740c:	08007557 	.word	0x08007557
 8007410:	0800758f 	.word	0x0800758f
 8007414:	080075b3 	.word	0x080075b3
 8007418:	20002458 	.word	0x20002458

0800741c <stdio_exit_handler>:
 800741c:	4a02      	ldr	r2, [pc, #8]	@ (8007428 <stdio_exit_handler+0xc>)
 800741e:	4903      	ldr	r1, [pc, #12]	@ (800742c <stdio_exit_handler+0x10>)
 8007420:	4803      	ldr	r0, [pc, #12]	@ (8007430 <stdio_exit_handler+0x14>)
 8007422:	f000 b869 	b.w	80074f8 <_fwalk_sglue>
 8007426:	bf00      	nop
 8007428:	20000070 	.word	0x20000070
 800742c:	08008079 	.word	0x08008079
 8007430:	20000080 	.word	0x20000080

08007434 <cleanup_stdio>:
 8007434:	6841      	ldr	r1, [r0, #4]
 8007436:	4b0c      	ldr	r3, [pc, #48]	@ (8007468 <cleanup_stdio+0x34>)
 8007438:	4299      	cmp	r1, r3
 800743a:	b510      	push	{r4, lr}
 800743c:	4604      	mov	r4, r0
 800743e:	d001      	beq.n	8007444 <cleanup_stdio+0x10>
 8007440:	f000 fe1a 	bl	8008078 <_fflush_r>
 8007444:	68a1      	ldr	r1, [r4, #8]
 8007446:	4b09      	ldr	r3, [pc, #36]	@ (800746c <cleanup_stdio+0x38>)
 8007448:	4299      	cmp	r1, r3
 800744a:	d002      	beq.n	8007452 <cleanup_stdio+0x1e>
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fe13 	bl	8008078 <_fflush_r>
 8007452:	68e1      	ldr	r1, [r4, #12]
 8007454:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <cleanup_stdio+0x3c>)
 8007456:	4299      	cmp	r1, r3
 8007458:	d004      	beq.n	8007464 <cleanup_stdio+0x30>
 800745a:	4620      	mov	r0, r4
 800745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007460:	f000 be0a 	b.w	8008078 <_fflush_r>
 8007464:	bd10      	pop	{r4, pc}
 8007466:	bf00      	nop
 8007468:	20002458 	.word	0x20002458
 800746c:	200024c0 	.word	0x200024c0
 8007470:	20002528 	.word	0x20002528

08007474 <global_stdio_init.part.0>:
 8007474:	b510      	push	{r4, lr}
 8007476:	4b0b      	ldr	r3, [pc, #44]	@ (80074a4 <global_stdio_init.part.0+0x30>)
 8007478:	4c0b      	ldr	r4, [pc, #44]	@ (80074a8 <global_stdio_init.part.0+0x34>)
 800747a:	4a0c      	ldr	r2, [pc, #48]	@ (80074ac <global_stdio_init.part.0+0x38>)
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	4620      	mov	r0, r4
 8007480:	2200      	movs	r2, #0
 8007482:	2104      	movs	r1, #4
 8007484:	f7ff ff94 	bl	80073b0 <std>
 8007488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800748c:	2201      	movs	r2, #1
 800748e:	2109      	movs	r1, #9
 8007490:	f7ff ff8e 	bl	80073b0 <std>
 8007494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007498:	2202      	movs	r2, #2
 800749a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800749e:	2112      	movs	r1, #18
 80074a0:	f7ff bf86 	b.w	80073b0 <std>
 80074a4:	20002590 	.word	0x20002590
 80074a8:	20002458 	.word	0x20002458
 80074ac:	0800741d 	.word	0x0800741d

080074b0 <__sfp_lock_acquire>:
 80074b0:	4801      	ldr	r0, [pc, #4]	@ (80074b8 <__sfp_lock_acquire+0x8>)
 80074b2:	f000 b948 	b.w	8007746 <__retarget_lock_acquire_recursive>
 80074b6:	bf00      	nop
 80074b8:	20002599 	.word	0x20002599

080074bc <__sfp_lock_release>:
 80074bc:	4801      	ldr	r0, [pc, #4]	@ (80074c4 <__sfp_lock_release+0x8>)
 80074be:	f000 b943 	b.w	8007748 <__retarget_lock_release_recursive>
 80074c2:	bf00      	nop
 80074c4:	20002599 	.word	0x20002599

080074c8 <__sinit>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	4604      	mov	r4, r0
 80074cc:	f7ff fff0 	bl	80074b0 <__sfp_lock_acquire>
 80074d0:	6a23      	ldr	r3, [r4, #32]
 80074d2:	b11b      	cbz	r3, 80074dc <__sinit+0x14>
 80074d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d8:	f7ff bff0 	b.w	80074bc <__sfp_lock_release>
 80074dc:	4b04      	ldr	r3, [pc, #16]	@ (80074f0 <__sinit+0x28>)
 80074de:	6223      	str	r3, [r4, #32]
 80074e0:	4b04      	ldr	r3, [pc, #16]	@ (80074f4 <__sinit+0x2c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f5      	bne.n	80074d4 <__sinit+0xc>
 80074e8:	f7ff ffc4 	bl	8007474 <global_stdio_init.part.0>
 80074ec:	e7f2      	b.n	80074d4 <__sinit+0xc>
 80074ee:	bf00      	nop
 80074f0:	08007435 	.word	0x08007435
 80074f4:	20002590 	.word	0x20002590

080074f8 <_fwalk_sglue>:
 80074f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	4607      	mov	r7, r0
 80074fe:	4688      	mov	r8, r1
 8007500:	4614      	mov	r4, r2
 8007502:	2600      	movs	r6, #0
 8007504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007508:	f1b9 0901 	subs.w	r9, r9, #1
 800750c:	d505      	bpl.n	800751a <_fwalk_sglue+0x22>
 800750e:	6824      	ldr	r4, [r4, #0]
 8007510:	2c00      	cmp	r4, #0
 8007512:	d1f7      	bne.n	8007504 <_fwalk_sglue+0xc>
 8007514:	4630      	mov	r0, r6
 8007516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751a:	89ab      	ldrh	r3, [r5, #12]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d907      	bls.n	8007530 <_fwalk_sglue+0x38>
 8007520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007524:	3301      	adds	r3, #1
 8007526:	d003      	beq.n	8007530 <_fwalk_sglue+0x38>
 8007528:	4629      	mov	r1, r5
 800752a:	4638      	mov	r0, r7
 800752c:	47c0      	blx	r8
 800752e:	4306      	orrs	r6, r0
 8007530:	3568      	adds	r5, #104	@ 0x68
 8007532:	e7e9      	b.n	8007508 <_fwalk_sglue+0x10>

08007534 <__sread>:
 8007534:	b510      	push	{r4, lr}
 8007536:	460c      	mov	r4, r1
 8007538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753c:	f000 f8b4 	bl	80076a8 <_read_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	bfab      	itete	ge
 8007544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007546:	89a3      	ldrhlt	r3, [r4, #12]
 8007548:	181b      	addge	r3, r3, r0
 800754a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800754e:	bfac      	ite	ge
 8007550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007552:	81a3      	strhlt	r3, [r4, #12]
 8007554:	bd10      	pop	{r4, pc}

08007556 <__swrite>:
 8007556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755a:	461f      	mov	r7, r3
 800755c:	898b      	ldrh	r3, [r1, #12]
 800755e:	05db      	lsls	r3, r3, #23
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	4616      	mov	r6, r2
 8007566:	d505      	bpl.n	8007574 <__swrite+0x1e>
 8007568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756c:	2302      	movs	r3, #2
 800756e:	2200      	movs	r2, #0
 8007570:	f000 f888 	bl	8007684 <_lseek_r>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800757a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	4632      	mov	r2, r6
 8007582:	463b      	mov	r3, r7
 8007584:	4628      	mov	r0, r5
 8007586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	f000 b89f 	b.w	80076cc <_write_r>

0800758e <__sseek>:
 800758e:	b510      	push	{r4, lr}
 8007590:	460c      	mov	r4, r1
 8007592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007596:	f000 f875 	bl	8007684 <_lseek_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	bf15      	itete	ne
 80075a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075aa:	81a3      	strheq	r3, [r4, #12]
 80075ac:	bf18      	it	ne
 80075ae:	81a3      	strhne	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__sclose>:
 80075b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b6:	f000 b855 	b.w	8007664 <_close_r>

080075ba <_vsniprintf_r>:
 80075ba:	b530      	push	{r4, r5, lr}
 80075bc:	4614      	mov	r4, r2
 80075be:	2c00      	cmp	r4, #0
 80075c0:	b09b      	sub	sp, #108	@ 0x6c
 80075c2:	4605      	mov	r5, r0
 80075c4:	461a      	mov	r2, r3
 80075c6:	da05      	bge.n	80075d4 <_vsniprintf_r+0x1a>
 80075c8:	238b      	movs	r3, #139	@ 0x8b
 80075ca:	6003      	str	r3, [r0, #0]
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	b01b      	add	sp, #108	@ 0x6c
 80075d2:	bd30      	pop	{r4, r5, pc}
 80075d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075dc:	bf14      	ite	ne
 80075de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075e2:	4623      	moveq	r3, r4
 80075e4:	9302      	str	r3, [sp, #8]
 80075e6:	9305      	str	r3, [sp, #20]
 80075e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075ec:	9100      	str	r1, [sp, #0]
 80075ee:	9104      	str	r1, [sp, #16]
 80075f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80075f4:	4669      	mov	r1, sp
 80075f6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80075f8:	f000 fa30 	bl	8007a5c <_svfiprintf_r>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	bfbc      	itt	lt
 8007600:	238b      	movlt	r3, #139	@ 0x8b
 8007602:	602b      	strlt	r3, [r5, #0]
 8007604:	2c00      	cmp	r4, #0
 8007606:	d0e3      	beq.n	80075d0 <_vsniprintf_r+0x16>
 8007608:	9b00      	ldr	r3, [sp, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	e7df      	b.n	80075d0 <_vsniprintf_r+0x16>

08007610 <vsniprintf>:
 8007610:	b507      	push	{r0, r1, r2, lr}
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	4613      	mov	r3, r2
 8007616:	460a      	mov	r2, r1
 8007618:	4601      	mov	r1, r0
 800761a:	4803      	ldr	r0, [pc, #12]	@ (8007628 <vsniprintf+0x18>)
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f7ff ffcc 	bl	80075ba <_vsniprintf_r>
 8007622:	b003      	add	sp, #12
 8007624:	f85d fb04 	ldr.w	pc, [sp], #4
 8007628:	2000007c 	.word	0x2000007c

0800762c <memset>:
 800762c:	4402      	add	r2, r0
 800762e:	4603      	mov	r3, r0
 8007630:	4293      	cmp	r3, r2
 8007632:	d100      	bne.n	8007636 <memset+0xa>
 8007634:	4770      	bx	lr
 8007636:	f803 1b01 	strb.w	r1, [r3], #1
 800763a:	e7f9      	b.n	8007630 <memset+0x4>

0800763c <strncpy>:
 800763c:	b510      	push	{r4, lr}
 800763e:	3901      	subs	r1, #1
 8007640:	4603      	mov	r3, r0
 8007642:	b132      	cbz	r2, 8007652 <strncpy+0x16>
 8007644:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007648:	f803 4b01 	strb.w	r4, [r3], #1
 800764c:	3a01      	subs	r2, #1
 800764e:	2c00      	cmp	r4, #0
 8007650:	d1f7      	bne.n	8007642 <strncpy+0x6>
 8007652:	441a      	add	r2, r3
 8007654:	2100      	movs	r1, #0
 8007656:	4293      	cmp	r3, r2
 8007658:	d100      	bne.n	800765c <strncpy+0x20>
 800765a:	bd10      	pop	{r4, pc}
 800765c:	f803 1b01 	strb.w	r1, [r3], #1
 8007660:	e7f9      	b.n	8007656 <strncpy+0x1a>
	...

08007664 <_close_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d06      	ldr	r5, [pc, #24]	@ (8007680 <_close_r+0x1c>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	f7fc fb26 	bl	8003cc0 <_close>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_close_r+0x1a>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_close_r+0x1a>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	20002594 	.word	0x20002594

08007684 <_lseek_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d07      	ldr	r5, [pc, #28]	@ (80076a4 <_lseek_r+0x20>)
 8007688:	4604      	mov	r4, r0
 800768a:	4608      	mov	r0, r1
 800768c:	4611      	mov	r1, r2
 800768e:	2200      	movs	r2, #0
 8007690:	602a      	str	r2, [r5, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	f7fc fb3b 	bl	8003d0e <_lseek>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_lseek_r+0x1e>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_lseek_r+0x1e>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20002594 	.word	0x20002594

080076a8 <_read_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d07      	ldr	r5, [pc, #28]	@ (80076c8 <_read_r+0x20>)
 80076ac:	4604      	mov	r4, r0
 80076ae:	4608      	mov	r0, r1
 80076b0:	4611      	mov	r1, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7fc fac9 	bl	8003c4e <_read>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_read_r+0x1e>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_read_r+0x1e>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20002594 	.word	0x20002594

080076cc <_write_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	@ (80076ec <_write_r+0x20>)
 80076d0:	4604      	mov	r4, r0
 80076d2:	4608      	mov	r0, r1
 80076d4:	4611      	mov	r1, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	602a      	str	r2, [r5, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f7fc fad4 	bl	8003c88 <_write>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_write_r+0x1e>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_write_r+0x1e>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20002594 	.word	0x20002594

080076f0 <__errno>:
 80076f0:	4b01      	ldr	r3, [pc, #4]	@ (80076f8 <__errno+0x8>)
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	2000007c 	.word	0x2000007c

080076fc <__libc_init_array>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007734 <__libc_init_array+0x38>)
 8007700:	4c0d      	ldr	r4, [pc, #52]	@ (8007738 <__libc_init_array+0x3c>)
 8007702:	1b64      	subs	r4, r4, r5
 8007704:	10a4      	asrs	r4, r4, #2
 8007706:	2600      	movs	r6, #0
 8007708:	42a6      	cmp	r6, r4
 800770a:	d109      	bne.n	8007720 <__libc_init_array+0x24>
 800770c:	4d0b      	ldr	r5, [pc, #44]	@ (800773c <__libc_init_array+0x40>)
 800770e:	4c0c      	ldr	r4, [pc, #48]	@ (8007740 <__libc_init_array+0x44>)
 8007710:	f000 fff0 	bl	80086f4 <_init>
 8007714:	1b64      	subs	r4, r4, r5
 8007716:	10a4      	asrs	r4, r4, #2
 8007718:	2600      	movs	r6, #0
 800771a:	42a6      	cmp	r6, r4
 800771c:	d105      	bne.n	800772a <__libc_init_array+0x2e>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	f855 3b04 	ldr.w	r3, [r5], #4
 8007724:	4798      	blx	r3
 8007726:	3601      	adds	r6, #1
 8007728:	e7ee      	b.n	8007708 <__libc_init_array+0xc>
 800772a:	f855 3b04 	ldr.w	r3, [r5], #4
 800772e:	4798      	blx	r3
 8007730:	3601      	adds	r6, #1
 8007732:	e7f2      	b.n	800771a <__libc_init_array+0x1e>
 8007734:	08008d44 	.word	0x08008d44
 8007738:	08008d44 	.word	0x08008d44
 800773c:	08008d44 	.word	0x08008d44
 8007740:	08008d48 	.word	0x08008d48

08007744 <__retarget_lock_init_recursive>:
 8007744:	4770      	bx	lr

08007746 <__retarget_lock_acquire_recursive>:
 8007746:	4770      	bx	lr

08007748 <__retarget_lock_release_recursive>:
 8007748:	4770      	bx	lr

0800774a <memcpy>:
 800774a:	440a      	add	r2, r1
 800774c:	4291      	cmp	r1, r2
 800774e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007752:	d100      	bne.n	8007756 <memcpy+0xc>
 8007754:	4770      	bx	lr
 8007756:	b510      	push	{r4, lr}
 8007758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007760:	4291      	cmp	r1, r2
 8007762:	d1f9      	bne.n	8007758 <memcpy+0xe>
 8007764:	bd10      	pop	{r4, pc}
	...

08007768 <__assert_func>:
 8007768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800776a:	4614      	mov	r4, r2
 800776c:	461a      	mov	r2, r3
 800776e:	4b09      	ldr	r3, [pc, #36]	@ (8007794 <__assert_func+0x2c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4605      	mov	r5, r0
 8007774:	68d8      	ldr	r0, [r3, #12]
 8007776:	b954      	cbnz	r4, 800778e <__assert_func+0x26>
 8007778:	4b07      	ldr	r3, [pc, #28]	@ (8007798 <__assert_func+0x30>)
 800777a:	461c      	mov	r4, r3
 800777c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007780:	9100      	str	r1, [sp, #0]
 8007782:	462b      	mov	r3, r5
 8007784:	4905      	ldr	r1, [pc, #20]	@ (800779c <__assert_func+0x34>)
 8007786:	f000 fc9f 	bl	80080c8 <fiprintf>
 800778a:	f000 fcd9 	bl	8008140 <abort>
 800778e:	4b04      	ldr	r3, [pc, #16]	@ (80077a0 <__assert_func+0x38>)
 8007790:	e7f4      	b.n	800777c <__assert_func+0x14>
 8007792:	bf00      	nop
 8007794:	2000007c 	.word	0x2000007c
 8007798:	08008d06 	.word	0x08008d06
 800779c:	08008cd8 	.word	0x08008cd8
 80077a0:	08008ccb 	.word	0x08008ccb

080077a4 <_free_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4605      	mov	r5, r0
 80077a8:	2900      	cmp	r1, #0
 80077aa:	d041      	beq.n	8007830 <_free_r+0x8c>
 80077ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b0:	1f0c      	subs	r4, r1, #4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	bfb8      	it	lt
 80077b6:	18e4      	addlt	r4, r4, r3
 80077b8:	f000 f8e8 	bl	800798c <__malloc_lock>
 80077bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007834 <_free_r+0x90>)
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	b933      	cbnz	r3, 80077d0 <_free_r+0x2c>
 80077c2:	6063      	str	r3, [r4, #4]
 80077c4:	6014      	str	r4, [r2, #0]
 80077c6:	4628      	mov	r0, r5
 80077c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077cc:	f000 b8e4 	b.w	8007998 <__malloc_unlock>
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	d908      	bls.n	80077e6 <_free_r+0x42>
 80077d4:	6820      	ldr	r0, [r4, #0]
 80077d6:	1821      	adds	r1, r4, r0
 80077d8:	428b      	cmp	r3, r1
 80077da:	bf01      	itttt	eq
 80077dc:	6819      	ldreq	r1, [r3, #0]
 80077de:	685b      	ldreq	r3, [r3, #4]
 80077e0:	1809      	addeq	r1, r1, r0
 80077e2:	6021      	streq	r1, [r4, #0]
 80077e4:	e7ed      	b.n	80077c2 <_free_r+0x1e>
 80077e6:	461a      	mov	r2, r3
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	b10b      	cbz	r3, 80077f0 <_free_r+0x4c>
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	d9fa      	bls.n	80077e6 <_free_r+0x42>
 80077f0:	6811      	ldr	r1, [r2, #0]
 80077f2:	1850      	adds	r0, r2, r1
 80077f4:	42a0      	cmp	r0, r4
 80077f6:	d10b      	bne.n	8007810 <_free_r+0x6c>
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	4401      	add	r1, r0
 80077fc:	1850      	adds	r0, r2, r1
 80077fe:	4283      	cmp	r3, r0
 8007800:	6011      	str	r1, [r2, #0]
 8007802:	d1e0      	bne.n	80077c6 <_free_r+0x22>
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	6053      	str	r3, [r2, #4]
 800780a:	4408      	add	r0, r1
 800780c:	6010      	str	r0, [r2, #0]
 800780e:	e7da      	b.n	80077c6 <_free_r+0x22>
 8007810:	d902      	bls.n	8007818 <_free_r+0x74>
 8007812:	230c      	movs	r3, #12
 8007814:	602b      	str	r3, [r5, #0]
 8007816:	e7d6      	b.n	80077c6 <_free_r+0x22>
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	1821      	adds	r1, r4, r0
 800781c:	428b      	cmp	r3, r1
 800781e:	bf04      	itt	eq
 8007820:	6819      	ldreq	r1, [r3, #0]
 8007822:	685b      	ldreq	r3, [r3, #4]
 8007824:	6063      	str	r3, [r4, #4]
 8007826:	bf04      	itt	eq
 8007828:	1809      	addeq	r1, r1, r0
 800782a:	6021      	streq	r1, [r4, #0]
 800782c:	6054      	str	r4, [r2, #4]
 800782e:	e7ca      	b.n	80077c6 <_free_r+0x22>
 8007830:	bd38      	pop	{r3, r4, r5, pc}
 8007832:	bf00      	nop
 8007834:	200025a0 	.word	0x200025a0

08007838 <malloc>:
 8007838:	4b02      	ldr	r3, [pc, #8]	@ (8007844 <malloc+0xc>)
 800783a:	4601      	mov	r1, r0
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	f000 b825 	b.w	800788c <_malloc_r>
 8007842:	bf00      	nop
 8007844:	2000007c 	.word	0x2000007c

08007848 <sbrk_aligned>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	4e0f      	ldr	r6, [pc, #60]	@ (8007888 <sbrk_aligned+0x40>)
 800784c:	460c      	mov	r4, r1
 800784e:	6831      	ldr	r1, [r6, #0]
 8007850:	4605      	mov	r5, r0
 8007852:	b911      	cbnz	r1, 800785a <sbrk_aligned+0x12>
 8007854:	f000 fc64 	bl	8008120 <_sbrk_r>
 8007858:	6030      	str	r0, [r6, #0]
 800785a:	4621      	mov	r1, r4
 800785c:	4628      	mov	r0, r5
 800785e:	f000 fc5f 	bl	8008120 <_sbrk_r>
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	d103      	bne.n	800786e <sbrk_aligned+0x26>
 8007866:	f04f 34ff 	mov.w	r4, #4294967295
 800786a:	4620      	mov	r0, r4
 800786c:	bd70      	pop	{r4, r5, r6, pc}
 800786e:	1cc4      	adds	r4, r0, #3
 8007870:	f024 0403 	bic.w	r4, r4, #3
 8007874:	42a0      	cmp	r0, r4
 8007876:	d0f8      	beq.n	800786a <sbrk_aligned+0x22>
 8007878:	1a21      	subs	r1, r4, r0
 800787a:	4628      	mov	r0, r5
 800787c:	f000 fc50 	bl	8008120 <_sbrk_r>
 8007880:	3001      	adds	r0, #1
 8007882:	d1f2      	bne.n	800786a <sbrk_aligned+0x22>
 8007884:	e7ef      	b.n	8007866 <sbrk_aligned+0x1e>
 8007886:	bf00      	nop
 8007888:	2000259c 	.word	0x2000259c

0800788c <_malloc_r>:
 800788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007890:	1ccd      	adds	r5, r1, #3
 8007892:	f025 0503 	bic.w	r5, r5, #3
 8007896:	3508      	adds	r5, #8
 8007898:	2d0c      	cmp	r5, #12
 800789a:	bf38      	it	cc
 800789c:	250c      	movcc	r5, #12
 800789e:	2d00      	cmp	r5, #0
 80078a0:	4606      	mov	r6, r0
 80078a2:	db01      	blt.n	80078a8 <_malloc_r+0x1c>
 80078a4:	42a9      	cmp	r1, r5
 80078a6:	d904      	bls.n	80078b2 <_malloc_r+0x26>
 80078a8:	230c      	movs	r3, #12
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	2000      	movs	r0, #0
 80078ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007988 <_malloc_r+0xfc>
 80078b6:	f000 f869 	bl	800798c <__malloc_lock>
 80078ba:	f8d8 3000 	ldr.w	r3, [r8]
 80078be:	461c      	mov	r4, r3
 80078c0:	bb44      	cbnz	r4, 8007914 <_malloc_r+0x88>
 80078c2:	4629      	mov	r1, r5
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7ff ffbf 	bl	8007848 <sbrk_aligned>
 80078ca:	1c43      	adds	r3, r0, #1
 80078cc:	4604      	mov	r4, r0
 80078ce:	d158      	bne.n	8007982 <_malloc_r+0xf6>
 80078d0:	f8d8 4000 	ldr.w	r4, [r8]
 80078d4:	4627      	mov	r7, r4
 80078d6:	2f00      	cmp	r7, #0
 80078d8:	d143      	bne.n	8007962 <_malloc_r+0xd6>
 80078da:	2c00      	cmp	r4, #0
 80078dc:	d04b      	beq.n	8007976 <_malloc_r+0xea>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	4639      	mov	r1, r7
 80078e2:	4630      	mov	r0, r6
 80078e4:	eb04 0903 	add.w	r9, r4, r3
 80078e8:	f000 fc1a 	bl	8008120 <_sbrk_r>
 80078ec:	4581      	cmp	r9, r0
 80078ee:	d142      	bne.n	8007976 <_malloc_r+0xea>
 80078f0:	6821      	ldr	r1, [r4, #0]
 80078f2:	1a6d      	subs	r5, r5, r1
 80078f4:	4629      	mov	r1, r5
 80078f6:	4630      	mov	r0, r6
 80078f8:	f7ff ffa6 	bl	8007848 <sbrk_aligned>
 80078fc:	3001      	adds	r0, #1
 80078fe:	d03a      	beq.n	8007976 <_malloc_r+0xea>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	442b      	add	r3, r5
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	f8d8 3000 	ldr.w	r3, [r8]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	bb62      	cbnz	r2, 8007968 <_malloc_r+0xdc>
 800790e:	f8c8 7000 	str.w	r7, [r8]
 8007912:	e00f      	b.n	8007934 <_malloc_r+0xa8>
 8007914:	6822      	ldr	r2, [r4, #0]
 8007916:	1b52      	subs	r2, r2, r5
 8007918:	d420      	bmi.n	800795c <_malloc_r+0xd0>
 800791a:	2a0b      	cmp	r2, #11
 800791c:	d917      	bls.n	800794e <_malloc_r+0xc2>
 800791e:	1961      	adds	r1, r4, r5
 8007920:	42a3      	cmp	r3, r4
 8007922:	6025      	str	r5, [r4, #0]
 8007924:	bf18      	it	ne
 8007926:	6059      	strne	r1, [r3, #4]
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	bf08      	it	eq
 800792c:	f8c8 1000 	streq.w	r1, [r8]
 8007930:	5162      	str	r2, [r4, r5]
 8007932:	604b      	str	r3, [r1, #4]
 8007934:	4630      	mov	r0, r6
 8007936:	f000 f82f 	bl	8007998 <__malloc_unlock>
 800793a:	f104 000b 	add.w	r0, r4, #11
 800793e:	1d23      	adds	r3, r4, #4
 8007940:	f020 0007 	bic.w	r0, r0, #7
 8007944:	1ac2      	subs	r2, r0, r3
 8007946:	bf1c      	itt	ne
 8007948:	1a1b      	subne	r3, r3, r0
 800794a:	50a3      	strne	r3, [r4, r2]
 800794c:	e7af      	b.n	80078ae <_malloc_r+0x22>
 800794e:	6862      	ldr	r2, [r4, #4]
 8007950:	42a3      	cmp	r3, r4
 8007952:	bf0c      	ite	eq
 8007954:	f8c8 2000 	streq.w	r2, [r8]
 8007958:	605a      	strne	r2, [r3, #4]
 800795a:	e7eb      	b.n	8007934 <_malloc_r+0xa8>
 800795c:	4623      	mov	r3, r4
 800795e:	6864      	ldr	r4, [r4, #4]
 8007960:	e7ae      	b.n	80078c0 <_malloc_r+0x34>
 8007962:	463c      	mov	r4, r7
 8007964:	687f      	ldr	r7, [r7, #4]
 8007966:	e7b6      	b.n	80078d6 <_malloc_r+0x4a>
 8007968:	461a      	mov	r2, r3
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	42a3      	cmp	r3, r4
 800796e:	d1fb      	bne.n	8007968 <_malloc_r+0xdc>
 8007970:	2300      	movs	r3, #0
 8007972:	6053      	str	r3, [r2, #4]
 8007974:	e7de      	b.n	8007934 <_malloc_r+0xa8>
 8007976:	230c      	movs	r3, #12
 8007978:	6033      	str	r3, [r6, #0]
 800797a:	4630      	mov	r0, r6
 800797c:	f000 f80c 	bl	8007998 <__malloc_unlock>
 8007980:	e794      	b.n	80078ac <_malloc_r+0x20>
 8007982:	6005      	str	r5, [r0, #0]
 8007984:	e7d6      	b.n	8007934 <_malloc_r+0xa8>
 8007986:	bf00      	nop
 8007988:	200025a0 	.word	0x200025a0

0800798c <__malloc_lock>:
 800798c:	4801      	ldr	r0, [pc, #4]	@ (8007994 <__malloc_lock+0x8>)
 800798e:	f7ff beda 	b.w	8007746 <__retarget_lock_acquire_recursive>
 8007992:	bf00      	nop
 8007994:	20002598 	.word	0x20002598

08007998 <__malloc_unlock>:
 8007998:	4801      	ldr	r0, [pc, #4]	@ (80079a0 <__malloc_unlock+0x8>)
 800799a:	f7ff bed5 	b.w	8007748 <__retarget_lock_release_recursive>
 800799e:	bf00      	nop
 80079a0:	20002598 	.word	0x20002598

080079a4 <__ssputs_r>:
 80079a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a8:	688e      	ldr	r6, [r1, #8]
 80079aa:	461f      	mov	r7, r3
 80079ac:	42be      	cmp	r6, r7
 80079ae:	680b      	ldr	r3, [r1, #0]
 80079b0:	4682      	mov	sl, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	4690      	mov	r8, r2
 80079b6:	d82d      	bhi.n	8007a14 <__ssputs_r+0x70>
 80079b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079c0:	d026      	beq.n	8007a10 <__ssputs_r+0x6c>
 80079c2:	6965      	ldr	r5, [r4, #20]
 80079c4:	6909      	ldr	r1, [r1, #16]
 80079c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079ca:	eba3 0901 	sub.w	r9, r3, r1
 80079ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079d2:	1c7b      	adds	r3, r7, #1
 80079d4:	444b      	add	r3, r9
 80079d6:	106d      	asrs	r5, r5, #1
 80079d8:	429d      	cmp	r5, r3
 80079da:	bf38      	it	cc
 80079dc:	461d      	movcc	r5, r3
 80079de:	0553      	lsls	r3, r2, #21
 80079e0:	d527      	bpl.n	8007a32 <__ssputs_r+0x8e>
 80079e2:	4629      	mov	r1, r5
 80079e4:	f7ff ff52 	bl	800788c <_malloc_r>
 80079e8:	4606      	mov	r6, r0
 80079ea:	b360      	cbz	r0, 8007a46 <__ssputs_r+0xa2>
 80079ec:	6921      	ldr	r1, [r4, #16]
 80079ee:	464a      	mov	r2, r9
 80079f0:	f7ff feab 	bl	800774a <memcpy>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	6126      	str	r6, [r4, #16]
 8007a02:	6165      	str	r5, [r4, #20]
 8007a04:	444e      	add	r6, r9
 8007a06:	eba5 0509 	sub.w	r5, r5, r9
 8007a0a:	6026      	str	r6, [r4, #0]
 8007a0c:	60a5      	str	r5, [r4, #8]
 8007a0e:	463e      	mov	r6, r7
 8007a10:	42be      	cmp	r6, r7
 8007a12:	d900      	bls.n	8007a16 <__ssputs_r+0x72>
 8007a14:	463e      	mov	r6, r7
 8007a16:	6820      	ldr	r0, [r4, #0]
 8007a18:	4632      	mov	r2, r6
 8007a1a:	4641      	mov	r1, r8
 8007a1c:	f000 fb66 	bl	80080ec <memmove>
 8007a20:	68a3      	ldr	r3, [r4, #8]
 8007a22:	1b9b      	subs	r3, r3, r6
 8007a24:	60a3      	str	r3, [r4, #8]
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	4433      	add	r3, r6
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a32:	462a      	mov	r2, r5
 8007a34:	f000 fb8b 	bl	800814e <_realloc_r>
 8007a38:	4606      	mov	r6, r0
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d1e0      	bne.n	8007a00 <__ssputs_r+0x5c>
 8007a3e:	6921      	ldr	r1, [r4, #16]
 8007a40:	4650      	mov	r0, sl
 8007a42:	f7ff feaf 	bl	80077a4 <_free_r>
 8007a46:	230c      	movs	r3, #12
 8007a48:	f8ca 3000 	str.w	r3, [sl]
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	e7e9      	b.n	8007a2e <__ssputs_r+0x8a>
	...

08007a5c <_svfiprintf_r>:
 8007a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	4698      	mov	r8, r3
 8007a62:	898b      	ldrh	r3, [r1, #12]
 8007a64:	061b      	lsls	r3, r3, #24
 8007a66:	b09d      	sub	sp, #116	@ 0x74
 8007a68:	4607      	mov	r7, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	4614      	mov	r4, r2
 8007a6e:	d510      	bpl.n	8007a92 <_svfiprintf_r+0x36>
 8007a70:	690b      	ldr	r3, [r1, #16]
 8007a72:	b973      	cbnz	r3, 8007a92 <_svfiprintf_r+0x36>
 8007a74:	2140      	movs	r1, #64	@ 0x40
 8007a76:	f7ff ff09 	bl	800788c <_malloc_r>
 8007a7a:	6028      	str	r0, [r5, #0]
 8007a7c:	6128      	str	r0, [r5, #16]
 8007a7e:	b930      	cbnz	r0, 8007a8e <_svfiprintf_r+0x32>
 8007a80:	230c      	movs	r3, #12
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	b01d      	add	sp, #116	@ 0x74
 8007a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8e:	2340      	movs	r3, #64	@ 0x40
 8007a90:	616b      	str	r3, [r5, #20]
 8007a92:	2300      	movs	r3, #0
 8007a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a96:	2320      	movs	r3, #32
 8007a98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa0:	2330      	movs	r3, #48	@ 0x30
 8007aa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c40 <_svfiprintf_r+0x1e4>
 8007aa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007aaa:	f04f 0901 	mov.w	r9, #1
 8007aae:	4623      	mov	r3, r4
 8007ab0:	469a      	mov	sl, r3
 8007ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab6:	b10a      	cbz	r2, 8007abc <_svfiprintf_r+0x60>
 8007ab8:	2a25      	cmp	r2, #37	@ 0x25
 8007aba:	d1f9      	bne.n	8007ab0 <_svfiprintf_r+0x54>
 8007abc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac0:	d00b      	beq.n	8007ada <_svfiprintf_r+0x7e>
 8007ac2:	465b      	mov	r3, fp
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f7ff ff6b 	bl	80079a4 <__ssputs_r>
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f000 80a7 	beq.w	8007c22 <_svfiprintf_r+0x1c6>
 8007ad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ad6:	445a      	add	r2, fp
 8007ad8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ada:	f89a 3000 	ldrb.w	r3, [sl]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 809f 	beq.w	8007c22 <_svfiprintf_r+0x1c6>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aee:	f10a 0a01 	add.w	sl, sl, #1
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	9307      	str	r3, [sp, #28]
 8007af6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007afa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007afc:	4654      	mov	r4, sl
 8007afe:	2205      	movs	r2, #5
 8007b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b04:	484e      	ldr	r0, [pc, #312]	@ (8007c40 <_svfiprintf_r+0x1e4>)
 8007b06:	f7f8 fb6b 	bl	80001e0 <memchr>
 8007b0a:	9a04      	ldr	r2, [sp, #16]
 8007b0c:	b9d8      	cbnz	r0, 8007b46 <_svfiprintf_r+0xea>
 8007b0e:	06d0      	lsls	r0, r2, #27
 8007b10:	bf44      	itt	mi
 8007b12:	2320      	movmi	r3, #32
 8007b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b18:	0711      	lsls	r1, r2, #28
 8007b1a:	bf44      	itt	mi
 8007b1c:	232b      	movmi	r3, #43	@ 0x2b
 8007b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b22:	f89a 3000 	ldrb.w	r3, [sl]
 8007b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b28:	d015      	beq.n	8007b56 <_svfiprintf_r+0xfa>
 8007b2a:	9a07      	ldr	r2, [sp, #28]
 8007b2c:	4654      	mov	r4, sl
 8007b2e:	2000      	movs	r0, #0
 8007b30:	f04f 0c0a 	mov.w	ip, #10
 8007b34:	4621      	mov	r1, r4
 8007b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b3a:	3b30      	subs	r3, #48	@ 0x30
 8007b3c:	2b09      	cmp	r3, #9
 8007b3e:	d94b      	bls.n	8007bd8 <_svfiprintf_r+0x17c>
 8007b40:	b1b0      	cbz	r0, 8007b70 <_svfiprintf_r+0x114>
 8007b42:	9207      	str	r2, [sp, #28]
 8007b44:	e014      	b.n	8007b70 <_svfiprintf_r+0x114>
 8007b46:	eba0 0308 	sub.w	r3, r0, r8
 8007b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	46a2      	mov	sl, r4
 8007b54:	e7d2      	b.n	8007afc <_svfiprintf_r+0xa0>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	1d19      	adds	r1, r3, #4
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	9103      	str	r1, [sp, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfbb      	ittet	lt
 8007b62:	425b      	neglt	r3, r3
 8007b64:	f042 0202 	orrlt.w	r2, r2, #2
 8007b68:	9307      	strge	r3, [sp, #28]
 8007b6a:	9307      	strlt	r3, [sp, #28]
 8007b6c:	bfb8      	it	lt
 8007b6e:	9204      	strlt	r2, [sp, #16]
 8007b70:	7823      	ldrb	r3, [r4, #0]
 8007b72:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b74:	d10a      	bne.n	8007b8c <_svfiprintf_r+0x130>
 8007b76:	7863      	ldrb	r3, [r4, #1]
 8007b78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b7a:	d132      	bne.n	8007be2 <_svfiprintf_r+0x186>
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	1d1a      	adds	r2, r3, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	9203      	str	r2, [sp, #12]
 8007b84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b88:	3402      	adds	r4, #2
 8007b8a:	9305      	str	r3, [sp, #20]
 8007b8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c50 <_svfiprintf_r+0x1f4>
 8007b90:	7821      	ldrb	r1, [r4, #0]
 8007b92:	2203      	movs	r2, #3
 8007b94:	4650      	mov	r0, sl
 8007b96:	f7f8 fb23 	bl	80001e0 <memchr>
 8007b9a:	b138      	cbz	r0, 8007bac <_svfiprintf_r+0x150>
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	eba0 000a 	sub.w	r0, r0, sl
 8007ba2:	2240      	movs	r2, #64	@ 0x40
 8007ba4:	4082      	lsls	r2, r0
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	3401      	adds	r4, #1
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb0:	4824      	ldr	r0, [pc, #144]	@ (8007c44 <_svfiprintf_r+0x1e8>)
 8007bb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bb6:	2206      	movs	r2, #6
 8007bb8:	f7f8 fb12 	bl	80001e0 <memchr>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d036      	beq.n	8007c2e <_svfiprintf_r+0x1d2>
 8007bc0:	4b21      	ldr	r3, [pc, #132]	@ (8007c48 <_svfiprintf_r+0x1ec>)
 8007bc2:	bb1b      	cbnz	r3, 8007c0c <_svfiprintf_r+0x1b0>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	3307      	adds	r3, #7
 8007bc8:	f023 0307 	bic.w	r3, r3, #7
 8007bcc:	3308      	adds	r3, #8
 8007bce:	9303      	str	r3, [sp, #12]
 8007bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd2:	4433      	add	r3, r6
 8007bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bd6:	e76a      	b.n	8007aae <_svfiprintf_r+0x52>
 8007bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bdc:	460c      	mov	r4, r1
 8007bde:	2001      	movs	r0, #1
 8007be0:	e7a8      	b.n	8007b34 <_svfiprintf_r+0xd8>
 8007be2:	2300      	movs	r3, #0
 8007be4:	3401      	adds	r4, #1
 8007be6:	9305      	str	r3, [sp, #20]
 8007be8:	4619      	mov	r1, r3
 8007bea:	f04f 0c0a 	mov.w	ip, #10
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf4:	3a30      	subs	r2, #48	@ 0x30
 8007bf6:	2a09      	cmp	r2, #9
 8007bf8:	d903      	bls.n	8007c02 <_svfiprintf_r+0x1a6>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0c6      	beq.n	8007b8c <_svfiprintf_r+0x130>
 8007bfe:	9105      	str	r1, [sp, #20]
 8007c00:	e7c4      	b.n	8007b8c <_svfiprintf_r+0x130>
 8007c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c06:	4604      	mov	r4, r0
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e7f0      	b.n	8007bee <_svfiprintf_r+0x192>
 8007c0c:	ab03      	add	r3, sp, #12
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	462a      	mov	r2, r5
 8007c12:	4b0e      	ldr	r3, [pc, #56]	@ (8007c4c <_svfiprintf_r+0x1f0>)
 8007c14:	a904      	add	r1, sp, #16
 8007c16:	4638      	mov	r0, r7
 8007c18:	f3af 8000 	nop.w
 8007c1c:	1c42      	adds	r2, r0, #1
 8007c1e:	4606      	mov	r6, r0
 8007c20:	d1d6      	bne.n	8007bd0 <_svfiprintf_r+0x174>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	065b      	lsls	r3, r3, #25
 8007c26:	f53f af2d 	bmi.w	8007a84 <_svfiprintf_r+0x28>
 8007c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c2c:	e72c      	b.n	8007a88 <_svfiprintf_r+0x2c>
 8007c2e:	ab03      	add	r3, sp, #12
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	462a      	mov	r2, r5
 8007c34:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <_svfiprintf_r+0x1f0>)
 8007c36:	a904      	add	r1, sp, #16
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f000 f879 	bl	8007d30 <_printf_i>
 8007c3e:	e7ed      	b.n	8007c1c <_svfiprintf_r+0x1c0>
 8007c40:	08008d07 	.word	0x08008d07
 8007c44:	08008d11 	.word	0x08008d11
 8007c48:	00000000 	.word	0x00000000
 8007c4c:	080079a5 	.word	0x080079a5
 8007c50:	08008d0d 	.word	0x08008d0d

08007c54 <_printf_common>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	4616      	mov	r6, r2
 8007c5a:	4698      	mov	r8, r3
 8007c5c:	688a      	ldr	r2, [r1, #8]
 8007c5e:	690b      	ldr	r3, [r1, #16]
 8007c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	bfb8      	it	lt
 8007c68:	4613      	movlt	r3, r2
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c70:	4607      	mov	r7, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	b10a      	cbz	r2, 8007c7a <_printf_common+0x26>
 8007c76:	3301      	adds	r3, #1
 8007c78:	6033      	str	r3, [r6, #0]
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	0699      	lsls	r1, r3, #26
 8007c7e:	bf42      	ittt	mi
 8007c80:	6833      	ldrmi	r3, [r6, #0]
 8007c82:	3302      	addmi	r3, #2
 8007c84:	6033      	strmi	r3, [r6, #0]
 8007c86:	6825      	ldr	r5, [r4, #0]
 8007c88:	f015 0506 	ands.w	r5, r5, #6
 8007c8c:	d106      	bne.n	8007c9c <_printf_common+0x48>
 8007c8e:	f104 0a19 	add.w	sl, r4, #25
 8007c92:	68e3      	ldr	r3, [r4, #12]
 8007c94:	6832      	ldr	r2, [r6, #0]
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dc26      	bgt.n	8007cea <_printf_common+0x96>
 8007c9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	3b00      	subs	r3, #0
 8007ca4:	bf18      	it	ne
 8007ca6:	2301      	movne	r3, #1
 8007ca8:	0692      	lsls	r2, r2, #26
 8007caa:	d42b      	bmi.n	8007d04 <_printf_common+0xb0>
 8007cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	47c8      	blx	r9
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d01e      	beq.n	8007cf8 <_printf_common+0xa4>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	6922      	ldr	r2, [r4, #16]
 8007cbe:	f003 0306 	and.w	r3, r3, #6
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	bf02      	ittt	eq
 8007cc6:	68e5      	ldreq	r5, [r4, #12]
 8007cc8:	6833      	ldreq	r3, [r6, #0]
 8007cca:	1aed      	subeq	r5, r5, r3
 8007ccc:	68a3      	ldr	r3, [r4, #8]
 8007cce:	bf0c      	ite	eq
 8007cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd4:	2500      	movne	r5, #0
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	bfc4      	itt	gt
 8007cda:	1a9b      	subgt	r3, r3, r2
 8007cdc:	18ed      	addgt	r5, r5, r3
 8007cde:	2600      	movs	r6, #0
 8007ce0:	341a      	adds	r4, #26
 8007ce2:	42b5      	cmp	r5, r6
 8007ce4:	d11a      	bne.n	8007d1c <_printf_common+0xc8>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e008      	b.n	8007cfc <_printf_common+0xa8>
 8007cea:	2301      	movs	r3, #1
 8007cec:	4652      	mov	r2, sl
 8007cee:	4641      	mov	r1, r8
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	47c8      	blx	r9
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d103      	bne.n	8007d00 <_printf_common+0xac>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d00:	3501      	adds	r5, #1
 8007d02:	e7c6      	b.n	8007c92 <_printf_common+0x3e>
 8007d04:	18e1      	adds	r1, r4, r3
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	2030      	movs	r0, #48	@ 0x30
 8007d0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d0e:	4422      	add	r2, r4
 8007d10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d18:	3302      	adds	r3, #2
 8007d1a:	e7c7      	b.n	8007cac <_printf_common+0x58>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	4622      	mov	r2, r4
 8007d20:	4641      	mov	r1, r8
 8007d22:	4638      	mov	r0, r7
 8007d24:	47c8      	blx	r9
 8007d26:	3001      	adds	r0, #1
 8007d28:	d0e6      	beq.n	8007cf8 <_printf_common+0xa4>
 8007d2a:	3601      	adds	r6, #1
 8007d2c:	e7d9      	b.n	8007ce2 <_printf_common+0x8e>
	...

08007d30 <_printf_i>:
 8007d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	7e0f      	ldrb	r7, [r1, #24]
 8007d36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d38:	2f78      	cmp	r7, #120	@ 0x78
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	469a      	mov	sl, r3
 8007d42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d46:	d807      	bhi.n	8007d58 <_printf_i+0x28>
 8007d48:	2f62      	cmp	r7, #98	@ 0x62
 8007d4a:	d80a      	bhi.n	8007d62 <_printf_i+0x32>
 8007d4c:	2f00      	cmp	r7, #0
 8007d4e:	f000 80d2 	beq.w	8007ef6 <_printf_i+0x1c6>
 8007d52:	2f58      	cmp	r7, #88	@ 0x58
 8007d54:	f000 80b9 	beq.w	8007eca <_printf_i+0x19a>
 8007d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d60:	e03a      	b.n	8007dd8 <_printf_i+0xa8>
 8007d62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d66:	2b15      	cmp	r3, #21
 8007d68:	d8f6      	bhi.n	8007d58 <_printf_i+0x28>
 8007d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d70 <_printf_i+0x40>)
 8007d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d70:	08007dc9 	.word	0x08007dc9
 8007d74:	08007ddd 	.word	0x08007ddd
 8007d78:	08007d59 	.word	0x08007d59
 8007d7c:	08007d59 	.word	0x08007d59
 8007d80:	08007d59 	.word	0x08007d59
 8007d84:	08007d59 	.word	0x08007d59
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007d59 	.word	0x08007d59
 8007d90:	08007d59 	.word	0x08007d59
 8007d94:	08007d59 	.word	0x08007d59
 8007d98:	08007d59 	.word	0x08007d59
 8007d9c:	08007edd 	.word	0x08007edd
 8007da0:	08007e07 	.word	0x08007e07
 8007da4:	08007e97 	.word	0x08007e97
 8007da8:	08007d59 	.word	0x08007d59
 8007dac:	08007d59 	.word	0x08007d59
 8007db0:	08007eff 	.word	0x08007eff
 8007db4:	08007d59 	.word	0x08007d59
 8007db8:	08007e07 	.word	0x08007e07
 8007dbc:	08007d59 	.word	0x08007d59
 8007dc0:	08007d59 	.word	0x08007d59
 8007dc4:	08007e9f 	.word	0x08007e9f
 8007dc8:	6833      	ldr	r3, [r6, #0]
 8007dca:	1d1a      	adds	r2, r3, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6032      	str	r2, [r6, #0]
 8007dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e09d      	b.n	8007f18 <_printf_i+0x1e8>
 8007ddc:	6833      	ldr	r3, [r6, #0]
 8007dde:	6820      	ldr	r0, [r4, #0]
 8007de0:	1d19      	adds	r1, r3, #4
 8007de2:	6031      	str	r1, [r6, #0]
 8007de4:	0606      	lsls	r6, r0, #24
 8007de6:	d501      	bpl.n	8007dec <_printf_i+0xbc>
 8007de8:	681d      	ldr	r5, [r3, #0]
 8007dea:	e003      	b.n	8007df4 <_printf_i+0xc4>
 8007dec:	0645      	lsls	r5, r0, #25
 8007dee:	d5fb      	bpl.n	8007de8 <_printf_i+0xb8>
 8007df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007df4:	2d00      	cmp	r5, #0
 8007df6:	da03      	bge.n	8007e00 <_printf_i+0xd0>
 8007df8:	232d      	movs	r3, #45	@ 0x2d
 8007dfa:	426d      	negs	r5, r5
 8007dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e00:	4859      	ldr	r0, [pc, #356]	@ (8007f68 <_printf_i+0x238>)
 8007e02:	230a      	movs	r3, #10
 8007e04:	e011      	b.n	8007e2a <_printf_i+0xfa>
 8007e06:	6821      	ldr	r1, [r4, #0]
 8007e08:	6833      	ldr	r3, [r6, #0]
 8007e0a:	0608      	lsls	r0, r1, #24
 8007e0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e10:	d402      	bmi.n	8007e18 <_printf_i+0xe8>
 8007e12:	0649      	lsls	r1, r1, #25
 8007e14:	bf48      	it	mi
 8007e16:	b2ad      	uxthmi	r5, r5
 8007e18:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e1a:	4853      	ldr	r0, [pc, #332]	@ (8007f68 <_printf_i+0x238>)
 8007e1c:	6033      	str	r3, [r6, #0]
 8007e1e:	bf14      	ite	ne
 8007e20:	230a      	movne	r3, #10
 8007e22:	2308      	moveq	r3, #8
 8007e24:	2100      	movs	r1, #0
 8007e26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e2a:	6866      	ldr	r6, [r4, #4]
 8007e2c:	60a6      	str	r6, [r4, #8]
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	bfa2      	ittt	ge
 8007e32:	6821      	ldrge	r1, [r4, #0]
 8007e34:	f021 0104 	bicge.w	r1, r1, #4
 8007e38:	6021      	strge	r1, [r4, #0]
 8007e3a:	b90d      	cbnz	r5, 8007e40 <_printf_i+0x110>
 8007e3c:	2e00      	cmp	r6, #0
 8007e3e:	d04b      	beq.n	8007ed8 <_printf_i+0x1a8>
 8007e40:	4616      	mov	r6, r2
 8007e42:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e46:	fb03 5711 	mls	r7, r3, r1, r5
 8007e4a:	5dc7      	ldrb	r7, [r0, r7]
 8007e4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e50:	462f      	mov	r7, r5
 8007e52:	42bb      	cmp	r3, r7
 8007e54:	460d      	mov	r5, r1
 8007e56:	d9f4      	bls.n	8007e42 <_printf_i+0x112>
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d10b      	bne.n	8007e74 <_printf_i+0x144>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	07df      	lsls	r7, r3, #31
 8007e60:	d508      	bpl.n	8007e74 <_printf_i+0x144>
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	6861      	ldr	r1, [r4, #4]
 8007e66:	4299      	cmp	r1, r3
 8007e68:	bfde      	ittt	le
 8007e6a:	2330      	movle	r3, #48	@ 0x30
 8007e6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e74:	1b92      	subs	r2, r2, r6
 8007e76:	6122      	str	r2, [r4, #16]
 8007e78:	f8cd a000 	str.w	sl, [sp]
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	aa03      	add	r2, sp, #12
 8007e80:	4621      	mov	r1, r4
 8007e82:	4640      	mov	r0, r8
 8007e84:	f7ff fee6 	bl	8007c54 <_printf_common>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d14a      	bne.n	8007f22 <_printf_i+0x1f2>
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	b004      	add	sp, #16
 8007e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	f043 0320 	orr.w	r3, r3, #32
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	4833      	ldr	r0, [pc, #204]	@ (8007f6c <_printf_i+0x23c>)
 8007ea0:	2778      	movs	r7, #120	@ 0x78
 8007ea2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	6831      	ldr	r1, [r6, #0]
 8007eaa:	061f      	lsls	r7, r3, #24
 8007eac:	f851 5b04 	ldr.w	r5, [r1], #4
 8007eb0:	d402      	bmi.n	8007eb8 <_printf_i+0x188>
 8007eb2:	065f      	lsls	r7, r3, #25
 8007eb4:	bf48      	it	mi
 8007eb6:	b2ad      	uxthmi	r5, r5
 8007eb8:	6031      	str	r1, [r6, #0]
 8007eba:	07d9      	lsls	r1, r3, #31
 8007ebc:	bf44      	itt	mi
 8007ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8007ec2:	6023      	strmi	r3, [r4, #0]
 8007ec4:	b11d      	cbz	r5, 8007ece <_printf_i+0x19e>
 8007ec6:	2310      	movs	r3, #16
 8007ec8:	e7ac      	b.n	8007e24 <_printf_i+0xf4>
 8007eca:	4827      	ldr	r0, [pc, #156]	@ (8007f68 <_printf_i+0x238>)
 8007ecc:	e7e9      	b.n	8007ea2 <_printf_i+0x172>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f023 0320 	bic.w	r3, r3, #32
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	e7f6      	b.n	8007ec6 <_printf_i+0x196>
 8007ed8:	4616      	mov	r6, r2
 8007eda:	e7bd      	b.n	8007e58 <_printf_i+0x128>
 8007edc:	6833      	ldr	r3, [r6, #0]
 8007ede:	6825      	ldr	r5, [r4, #0]
 8007ee0:	6961      	ldr	r1, [r4, #20]
 8007ee2:	1d18      	adds	r0, r3, #4
 8007ee4:	6030      	str	r0, [r6, #0]
 8007ee6:	062e      	lsls	r6, r5, #24
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	d501      	bpl.n	8007ef0 <_printf_i+0x1c0>
 8007eec:	6019      	str	r1, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <_printf_i+0x1c6>
 8007ef0:	0668      	lsls	r0, r5, #25
 8007ef2:	d5fb      	bpl.n	8007eec <_printf_i+0x1bc>
 8007ef4:	8019      	strh	r1, [r3, #0]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	4616      	mov	r6, r2
 8007efc:	e7bc      	b.n	8007e78 <_printf_i+0x148>
 8007efe:	6833      	ldr	r3, [r6, #0]
 8007f00:	1d1a      	adds	r2, r3, #4
 8007f02:	6032      	str	r2, [r6, #0]
 8007f04:	681e      	ldr	r6, [r3, #0]
 8007f06:	6862      	ldr	r2, [r4, #4]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7f8 f968 	bl	80001e0 <memchr>
 8007f10:	b108      	cbz	r0, 8007f16 <_printf_i+0x1e6>
 8007f12:	1b80      	subs	r0, r0, r6
 8007f14:	6060      	str	r0, [r4, #4]
 8007f16:	6863      	ldr	r3, [r4, #4]
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f20:	e7aa      	b.n	8007e78 <_printf_i+0x148>
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	4632      	mov	r2, r6
 8007f26:	4649      	mov	r1, r9
 8007f28:	4640      	mov	r0, r8
 8007f2a:	47d0      	blx	sl
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d0ad      	beq.n	8007e8c <_printf_i+0x15c>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	079b      	lsls	r3, r3, #30
 8007f34:	d413      	bmi.n	8007f5e <_printf_i+0x22e>
 8007f36:	68e0      	ldr	r0, [r4, #12]
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	4298      	cmp	r0, r3
 8007f3c:	bfb8      	it	lt
 8007f3e:	4618      	movlt	r0, r3
 8007f40:	e7a6      	b.n	8007e90 <_printf_i+0x160>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4632      	mov	r2, r6
 8007f46:	4649      	mov	r1, r9
 8007f48:	4640      	mov	r0, r8
 8007f4a:	47d0      	blx	sl
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d09d      	beq.n	8007e8c <_printf_i+0x15c>
 8007f50:	3501      	adds	r5, #1
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	9903      	ldr	r1, [sp, #12]
 8007f56:	1a5b      	subs	r3, r3, r1
 8007f58:	42ab      	cmp	r3, r5
 8007f5a:	dcf2      	bgt.n	8007f42 <_printf_i+0x212>
 8007f5c:	e7eb      	b.n	8007f36 <_printf_i+0x206>
 8007f5e:	2500      	movs	r5, #0
 8007f60:	f104 0619 	add.w	r6, r4, #25
 8007f64:	e7f5      	b.n	8007f52 <_printf_i+0x222>
 8007f66:	bf00      	nop
 8007f68:	08008d18 	.word	0x08008d18
 8007f6c:	08008d29 	.word	0x08008d29

08007f70 <__sflush_r>:
 8007f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	0716      	lsls	r6, r2, #28
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	d454      	bmi.n	800802a <__sflush_r+0xba>
 8007f80:	684b      	ldr	r3, [r1, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dc02      	bgt.n	8007f8c <__sflush_r+0x1c>
 8007f86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dd48      	ble.n	800801e <__sflush_r+0xae>
 8007f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	d045      	beq.n	800801e <__sflush_r+0xae>
 8007f92:	2300      	movs	r3, #0
 8007f94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f98:	682f      	ldr	r7, [r5, #0]
 8007f9a:	6a21      	ldr	r1, [r4, #32]
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	d030      	beq.n	8008002 <__sflush_r+0x92>
 8007fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	0759      	lsls	r1, r3, #29
 8007fa6:	d505      	bpl.n	8007fb4 <__sflush_r+0x44>
 8007fa8:	6863      	ldr	r3, [r4, #4]
 8007faa:	1ad2      	subs	r2, r2, r3
 8007fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fae:	b10b      	cbz	r3, 8007fb4 <__sflush_r+0x44>
 8007fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fb2:	1ad2      	subs	r2, r2, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fb8:	6a21      	ldr	r1, [r4, #32]
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b0      	blx	r6
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	d106      	bne.n	8007fd2 <__sflush_r+0x62>
 8007fc4:	6829      	ldr	r1, [r5, #0]
 8007fc6:	291d      	cmp	r1, #29
 8007fc8:	d82b      	bhi.n	8008022 <__sflush_r+0xb2>
 8007fca:	4a2a      	ldr	r2, [pc, #168]	@ (8008074 <__sflush_r+0x104>)
 8007fcc:	410a      	asrs	r2, r1
 8007fce:	07d6      	lsls	r6, r2, #31
 8007fd0:	d427      	bmi.n	8008022 <__sflush_r+0xb2>
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	6062      	str	r2, [r4, #4]
 8007fd6:	04d9      	lsls	r1, r3, #19
 8007fd8:	6922      	ldr	r2, [r4, #16]
 8007fda:	6022      	str	r2, [r4, #0]
 8007fdc:	d504      	bpl.n	8007fe8 <__sflush_r+0x78>
 8007fde:	1c42      	adds	r2, r0, #1
 8007fe0:	d101      	bne.n	8007fe6 <__sflush_r+0x76>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	b903      	cbnz	r3, 8007fe8 <__sflush_r+0x78>
 8007fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fea:	602f      	str	r7, [r5, #0]
 8007fec:	b1b9      	cbz	r1, 800801e <__sflush_r+0xae>
 8007fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ff2:	4299      	cmp	r1, r3
 8007ff4:	d002      	beq.n	8007ffc <__sflush_r+0x8c>
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7ff fbd4 	bl	80077a4 <_free_r>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008000:	e00d      	b.n	800801e <__sflush_r+0xae>
 8008002:	2301      	movs	r3, #1
 8008004:	4628      	mov	r0, r5
 8008006:	47b0      	blx	r6
 8008008:	4602      	mov	r2, r0
 800800a:	1c50      	adds	r0, r2, #1
 800800c:	d1c9      	bne.n	8007fa2 <__sflush_r+0x32>
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0c6      	beq.n	8007fa2 <__sflush_r+0x32>
 8008014:	2b1d      	cmp	r3, #29
 8008016:	d001      	beq.n	800801c <__sflush_r+0xac>
 8008018:	2b16      	cmp	r3, #22
 800801a:	d11e      	bne.n	800805a <__sflush_r+0xea>
 800801c:	602f      	str	r7, [r5, #0]
 800801e:	2000      	movs	r0, #0
 8008020:	e022      	b.n	8008068 <__sflush_r+0xf8>
 8008022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008026:	b21b      	sxth	r3, r3
 8008028:	e01b      	b.n	8008062 <__sflush_r+0xf2>
 800802a:	690f      	ldr	r7, [r1, #16]
 800802c:	2f00      	cmp	r7, #0
 800802e:	d0f6      	beq.n	800801e <__sflush_r+0xae>
 8008030:	0793      	lsls	r3, r2, #30
 8008032:	680e      	ldr	r6, [r1, #0]
 8008034:	bf08      	it	eq
 8008036:	694b      	ldreq	r3, [r1, #20]
 8008038:	600f      	str	r7, [r1, #0]
 800803a:	bf18      	it	ne
 800803c:	2300      	movne	r3, #0
 800803e:	eba6 0807 	sub.w	r8, r6, r7
 8008042:	608b      	str	r3, [r1, #8]
 8008044:	f1b8 0f00 	cmp.w	r8, #0
 8008048:	dde9      	ble.n	800801e <__sflush_r+0xae>
 800804a:	6a21      	ldr	r1, [r4, #32]
 800804c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800804e:	4643      	mov	r3, r8
 8008050:	463a      	mov	r2, r7
 8008052:	4628      	mov	r0, r5
 8008054:	47b0      	blx	r6
 8008056:	2800      	cmp	r0, #0
 8008058:	dc08      	bgt.n	800806c <__sflush_r+0xfc>
 800805a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	f04f 30ff 	mov.w	r0, #4294967295
 8008068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800806c:	4407      	add	r7, r0
 800806e:	eba8 0800 	sub.w	r8, r8, r0
 8008072:	e7e7      	b.n	8008044 <__sflush_r+0xd4>
 8008074:	dfbffffe 	.word	0xdfbffffe

08008078 <_fflush_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	690b      	ldr	r3, [r1, #16]
 800807c:	4605      	mov	r5, r0
 800807e:	460c      	mov	r4, r1
 8008080:	b913      	cbnz	r3, 8008088 <_fflush_r+0x10>
 8008082:	2500      	movs	r5, #0
 8008084:	4628      	mov	r0, r5
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	b118      	cbz	r0, 8008092 <_fflush_r+0x1a>
 800808a:	6a03      	ldr	r3, [r0, #32]
 800808c:	b90b      	cbnz	r3, 8008092 <_fflush_r+0x1a>
 800808e:	f7ff fa1b 	bl	80074c8 <__sinit>
 8008092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0f3      	beq.n	8008082 <_fflush_r+0xa>
 800809a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800809c:	07d0      	lsls	r0, r2, #31
 800809e:	d404      	bmi.n	80080aa <_fflush_r+0x32>
 80080a0:	0599      	lsls	r1, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_fflush_r+0x32>
 80080a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080a6:	f7ff fb4e 	bl	8007746 <__retarget_lock_acquire_recursive>
 80080aa:	4628      	mov	r0, r5
 80080ac:	4621      	mov	r1, r4
 80080ae:	f7ff ff5f 	bl	8007f70 <__sflush_r>
 80080b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080b4:	07da      	lsls	r2, r3, #31
 80080b6:	4605      	mov	r5, r0
 80080b8:	d4e4      	bmi.n	8008084 <_fflush_r+0xc>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	059b      	lsls	r3, r3, #22
 80080be:	d4e1      	bmi.n	8008084 <_fflush_r+0xc>
 80080c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080c2:	f7ff fb41 	bl	8007748 <__retarget_lock_release_recursive>
 80080c6:	e7dd      	b.n	8008084 <_fflush_r+0xc>

080080c8 <fiprintf>:
 80080c8:	b40e      	push	{r1, r2, r3}
 80080ca:	b503      	push	{r0, r1, lr}
 80080cc:	4601      	mov	r1, r0
 80080ce:	ab03      	add	r3, sp, #12
 80080d0:	4805      	ldr	r0, [pc, #20]	@ (80080e8 <fiprintf+0x20>)
 80080d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d6:	6800      	ldr	r0, [r0, #0]
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	f000 f88f 	bl	80081fc <_vfiprintf_r>
 80080de:	b002      	add	sp, #8
 80080e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e4:	b003      	add	sp, #12
 80080e6:	4770      	bx	lr
 80080e8:	2000007c 	.word	0x2000007c

080080ec <memmove>:
 80080ec:	4288      	cmp	r0, r1
 80080ee:	b510      	push	{r4, lr}
 80080f0:	eb01 0402 	add.w	r4, r1, r2
 80080f4:	d902      	bls.n	80080fc <memmove+0x10>
 80080f6:	4284      	cmp	r4, r0
 80080f8:	4623      	mov	r3, r4
 80080fa:	d807      	bhi.n	800810c <memmove+0x20>
 80080fc:	1e43      	subs	r3, r0, #1
 80080fe:	42a1      	cmp	r1, r4
 8008100:	d008      	beq.n	8008114 <memmove+0x28>
 8008102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800810a:	e7f8      	b.n	80080fe <memmove+0x12>
 800810c:	4402      	add	r2, r0
 800810e:	4601      	mov	r1, r0
 8008110:	428a      	cmp	r2, r1
 8008112:	d100      	bne.n	8008116 <memmove+0x2a>
 8008114:	bd10      	pop	{r4, pc}
 8008116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800811a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800811e:	e7f7      	b.n	8008110 <memmove+0x24>

08008120 <_sbrk_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d06      	ldr	r5, [pc, #24]	@ (800813c <_sbrk_r+0x1c>)
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	602b      	str	r3, [r5, #0]
 800812c:	f7fb fdfc 	bl	8003d28 <_sbrk>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_sbrk_r+0x1a>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_sbrk_r+0x1a>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	20002594 	.word	0x20002594

08008140 <abort>:
 8008140:	b508      	push	{r3, lr}
 8008142:	2006      	movs	r0, #6
 8008144:	f000 fa2e 	bl	80085a4 <raise>
 8008148:	2001      	movs	r0, #1
 800814a:	f7fb fd75 	bl	8003c38 <_exit>

0800814e <_realloc_r>:
 800814e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008152:	4680      	mov	r8, r0
 8008154:	4615      	mov	r5, r2
 8008156:	460c      	mov	r4, r1
 8008158:	b921      	cbnz	r1, 8008164 <_realloc_r+0x16>
 800815a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	4611      	mov	r1, r2
 8008160:	f7ff bb94 	b.w	800788c <_malloc_r>
 8008164:	b92a      	cbnz	r2, 8008172 <_realloc_r+0x24>
 8008166:	f7ff fb1d 	bl	80077a4 <_free_r>
 800816a:	2400      	movs	r4, #0
 800816c:	4620      	mov	r0, r4
 800816e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008172:	f000 fa33 	bl	80085dc <_malloc_usable_size_r>
 8008176:	4285      	cmp	r5, r0
 8008178:	4606      	mov	r6, r0
 800817a:	d802      	bhi.n	8008182 <_realloc_r+0x34>
 800817c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008180:	d8f4      	bhi.n	800816c <_realloc_r+0x1e>
 8008182:	4629      	mov	r1, r5
 8008184:	4640      	mov	r0, r8
 8008186:	f7ff fb81 	bl	800788c <_malloc_r>
 800818a:	4607      	mov	r7, r0
 800818c:	2800      	cmp	r0, #0
 800818e:	d0ec      	beq.n	800816a <_realloc_r+0x1c>
 8008190:	42b5      	cmp	r5, r6
 8008192:	462a      	mov	r2, r5
 8008194:	4621      	mov	r1, r4
 8008196:	bf28      	it	cs
 8008198:	4632      	movcs	r2, r6
 800819a:	f7ff fad6 	bl	800774a <memcpy>
 800819e:	4621      	mov	r1, r4
 80081a0:	4640      	mov	r0, r8
 80081a2:	f7ff faff 	bl	80077a4 <_free_r>
 80081a6:	463c      	mov	r4, r7
 80081a8:	e7e0      	b.n	800816c <_realloc_r+0x1e>

080081aa <__sfputc_r>:
 80081aa:	6893      	ldr	r3, [r2, #8]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	b410      	push	{r4}
 80081b2:	6093      	str	r3, [r2, #8]
 80081b4:	da08      	bge.n	80081c8 <__sfputc_r+0x1e>
 80081b6:	6994      	ldr	r4, [r2, #24]
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	db01      	blt.n	80081c0 <__sfputc_r+0x16>
 80081bc:	290a      	cmp	r1, #10
 80081be:	d103      	bne.n	80081c8 <__sfputc_r+0x1e>
 80081c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c4:	f000 b932 	b.w	800842c <__swbuf_r>
 80081c8:	6813      	ldr	r3, [r2, #0]
 80081ca:	1c58      	adds	r0, r3, #1
 80081cc:	6010      	str	r0, [r2, #0]
 80081ce:	7019      	strb	r1, [r3, #0]
 80081d0:	4608      	mov	r0, r1
 80081d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <__sfputs_r>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	4614      	mov	r4, r2
 80081e0:	18d5      	adds	r5, r2, r3
 80081e2:	42ac      	cmp	r4, r5
 80081e4:	d101      	bne.n	80081ea <__sfputs_r+0x12>
 80081e6:	2000      	movs	r0, #0
 80081e8:	e007      	b.n	80081fa <__sfputs_r+0x22>
 80081ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ee:	463a      	mov	r2, r7
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7ff ffda 	bl	80081aa <__sfputc_r>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	d1f3      	bne.n	80081e2 <__sfputs_r+0xa>
 80081fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081fc <_vfiprintf_r>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	460d      	mov	r5, r1
 8008202:	b09d      	sub	sp, #116	@ 0x74
 8008204:	4614      	mov	r4, r2
 8008206:	4698      	mov	r8, r3
 8008208:	4606      	mov	r6, r0
 800820a:	b118      	cbz	r0, 8008214 <_vfiprintf_r+0x18>
 800820c:	6a03      	ldr	r3, [r0, #32]
 800820e:	b90b      	cbnz	r3, 8008214 <_vfiprintf_r+0x18>
 8008210:	f7ff f95a 	bl	80074c8 <__sinit>
 8008214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008216:	07d9      	lsls	r1, r3, #31
 8008218:	d405      	bmi.n	8008226 <_vfiprintf_r+0x2a>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	059a      	lsls	r2, r3, #22
 800821e:	d402      	bmi.n	8008226 <_vfiprintf_r+0x2a>
 8008220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008222:	f7ff fa90 	bl	8007746 <__retarget_lock_acquire_recursive>
 8008226:	89ab      	ldrh	r3, [r5, #12]
 8008228:	071b      	lsls	r3, r3, #28
 800822a:	d501      	bpl.n	8008230 <_vfiprintf_r+0x34>
 800822c:	692b      	ldr	r3, [r5, #16]
 800822e:	b99b      	cbnz	r3, 8008258 <_vfiprintf_r+0x5c>
 8008230:	4629      	mov	r1, r5
 8008232:	4630      	mov	r0, r6
 8008234:	f000 f938 	bl	80084a8 <__swsetup_r>
 8008238:	b170      	cbz	r0, 8008258 <_vfiprintf_r+0x5c>
 800823a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800823c:	07dc      	lsls	r4, r3, #31
 800823e:	d504      	bpl.n	800824a <_vfiprintf_r+0x4e>
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	b01d      	add	sp, #116	@ 0x74
 8008246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824a:	89ab      	ldrh	r3, [r5, #12]
 800824c:	0598      	lsls	r0, r3, #22
 800824e:	d4f7      	bmi.n	8008240 <_vfiprintf_r+0x44>
 8008250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008252:	f7ff fa79 	bl	8007748 <__retarget_lock_release_recursive>
 8008256:	e7f3      	b.n	8008240 <_vfiprintf_r+0x44>
 8008258:	2300      	movs	r3, #0
 800825a:	9309      	str	r3, [sp, #36]	@ 0x24
 800825c:	2320      	movs	r3, #32
 800825e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008262:	f8cd 800c 	str.w	r8, [sp, #12]
 8008266:	2330      	movs	r3, #48	@ 0x30
 8008268:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008418 <_vfiprintf_r+0x21c>
 800826c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008270:	f04f 0901 	mov.w	r9, #1
 8008274:	4623      	mov	r3, r4
 8008276:	469a      	mov	sl, r3
 8008278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800827c:	b10a      	cbz	r2, 8008282 <_vfiprintf_r+0x86>
 800827e:	2a25      	cmp	r2, #37	@ 0x25
 8008280:	d1f9      	bne.n	8008276 <_vfiprintf_r+0x7a>
 8008282:	ebba 0b04 	subs.w	fp, sl, r4
 8008286:	d00b      	beq.n	80082a0 <_vfiprintf_r+0xa4>
 8008288:	465b      	mov	r3, fp
 800828a:	4622      	mov	r2, r4
 800828c:	4629      	mov	r1, r5
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff ffa2 	bl	80081d8 <__sfputs_r>
 8008294:	3001      	adds	r0, #1
 8008296:	f000 80a7 	beq.w	80083e8 <_vfiprintf_r+0x1ec>
 800829a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800829c:	445a      	add	r2, fp
 800829e:	9209      	str	r2, [sp, #36]	@ 0x24
 80082a0:	f89a 3000 	ldrb.w	r3, [sl]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 809f 	beq.w	80083e8 <_vfiprintf_r+0x1ec>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f04f 32ff 	mov.w	r2, #4294967295
 80082b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b4:	f10a 0a01 	add.w	sl, sl, #1
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	9307      	str	r3, [sp, #28]
 80082bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80082c2:	4654      	mov	r4, sl
 80082c4:	2205      	movs	r2, #5
 80082c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ca:	4853      	ldr	r0, [pc, #332]	@ (8008418 <_vfiprintf_r+0x21c>)
 80082cc:	f7f7 ff88 	bl	80001e0 <memchr>
 80082d0:	9a04      	ldr	r2, [sp, #16]
 80082d2:	b9d8      	cbnz	r0, 800830c <_vfiprintf_r+0x110>
 80082d4:	06d1      	lsls	r1, r2, #27
 80082d6:	bf44      	itt	mi
 80082d8:	2320      	movmi	r3, #32
 80082da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082de:	0713      	lsls	r3, r2, #28
 80082e0:	bf44      	itt	mi
 80082e2:	232b      	movmi	r3, #43	@ 0x2b
 80082e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082e8:	f89a 3000 	ldrb.w	r3, [sl]
 80082ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ee:	d015      	beq.n	800831c <_vfiprintf_r+0x120>
 80082f0:	9a07      	ldr	r2, [sp, #28]
 80082f2:	4654      	mov	r4, sl
 80082f4:	2000      	movs	r0, #0
 80082f6:	f04f 0c0a 	mov.w	ip, #10
 80082fa:	4621      	mov	r1, r4
 80082fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008300:	3b30      	subs	r3, #48	@ 0x30
 8008302:	2b09      	cmp	r3, #9
 8008304:	d94b      	bls.n	800839e <_vfiprintf_r+0x1a2>
 8008306:	b1b0      	cbz	r0, 8008336 <_vfiprintf_r+0x13a>
 8008308:	9207      	str	r2, [sp, #28]
 800830a:	e014      	b.n	8008336 <_vfiprintf_r+0x13a>
 800830c:	eba0 0308 	sub.w	r3, r0, r8
 8008310:	fa09 f303 	lsl.w	r3, r9, r3
 8008314:	4313      	orrs	r3, r2
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	46a2      	mov	sl, r4
 800831a:	e7d2      	b.n	80082c2 <_vfiprintf_r+0xc6>
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	1d19      	adds	r1, r3, #4
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	9103      	str	r1, [sp, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	bfbb      	ittet	lt
 8008328:	425b      	neglt	r3, r3
 800832a:	f042 0202 	orrlt.w	r2, r2, #2
 800832e:	9307      	strge	r3, [sp, #28]
 8008330:	9307      	strlt	r3, [sp, #28]
 8008332:	bfb8      	it	lt
 8008334:	9204      	strlt	r2, [sp, #16]
 8008336:	7823      	ldrb	r3, [r4, #0]
 8008338:	2b2e      	cmp	r3, #46	@ 0x2e
 800833a:	d10a      	bne.n	8008352 <_vfiprintf_r+0x156>
 800833c:	7863      	ldrb	r3, [r4, #1]
 800833e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008340:	d132      	bne.n	80083a8 <_vfiprintf_r+0x1ac>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	1d1a      	adds	r2, r3, #4
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	9203      	str	r2, [sp, #12]
 800834a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800834e:	3402      	adds	r4, #2
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008428 <_vfiprintf_r+0x22c>
 8008356:	7821      	ldrb	r1, [r4, #0]
 8008358:	2203      	movs	r2, #3
 800835a:	4650      	mov	r0, sl
 800835c:	f7f7 ff40 	bl	80001e0 <memchr>
 8008360:	b138      	cbz	r0, 8008372 <_vfiprintf_r+0x176>
 8008362:	9b04      	ldr	r3, [sp, #16]
 8008364:	eba0 000a 	sub.w	r0, r0, sl
 8008368:	2240      	movs	r2, #64	@ 0x40
 800836a:	4082      	lsls	r2, r0
 800836c:	4313      	orrs	r3, r2
 800836e:	3401      	adds	r4, #1
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008376:	4829      	ldr	r0, [pc, #164]	@ (800841c <_vfiprintf_r+0x220>)
 8008378:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800837c:	2206      	movs	r2, #6
 800837e:	f7f7 ff2f 	bl	80001e0 <memchr>
 8008382:	2800      	cmp	r0, #0
 8008384:	d03f      	beq.n	8008406 <_vfiprintf_r+0x20a>
 8008386:	4b26      	ldr	r3, [pc, #152]	@ (8008420 <_vfiprintf_r+0x224>)
 8008388:	bb1b      	cbnz	r3, 80083d2 <_vfiprintf_r+0x1d6>
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	3307      	adds	r3, #7
 800838e:	f023 0307 	bic.w	r3, r3, #7
 8008392:	3308      	adds	r3, #8
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008398:	443b      	add	r3, r7
 800839a:	9309      	str	r3, [sp, #36]	@ 0x24
 800839c:	e76a      	b.n	8008274 <_vfiprintf_r+0x78>
 800839e:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a2:	460c      	mov	r4, r1
 80083a4:	2001      	movs	r0, #1
 80083a6:	e7a8      	b.n	80082fa <_vfiprintf_r+0xfe>
 80083a8:	2300      	movs	r3, #0
 80083aa:	3401      	adds	r4, #1
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	4619      	mov	r1, r3
 80083b0:	f04f 0c0a 	mov.w	ip, #10
 80083b4:	4620      	mov	r0, r4
 80083b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ba:	3a30      	subs	r2, #48	@ 0x30
 80083bc:	2a09      	cmp	r2, #9
 80083be:	d903      	bls.n	80083c8 <_vfiprintf_r+0x1cc>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0c6      	beq.n	8008352 <_vfiprintf_r+0x156>
 80083c4:	9105      	str	r1, [sp, #20]
 80083c6:	e7c4      	b.n	8008352 <_vfiprintf_r+0x156>
 80083c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80083cc:	4604      	mov	r4, r0
 80083ce:	2301      	movs	r3, #1
 80083d0:	e7f0      	b.n	80083b4 <_vfiprintf_r+0x1b8>
 80083d2:	ab03      	add	r3, sp, #12
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	462a      	mov	r2, r5
 80083d8:	4b12      	ldr	r3, [pc, #72]	@ (8008424 <_vfiprintf_r+0x228>)
 80083da:	a904      	add	r1, sp, #16
 80083dc:	4630      	mov	r0, r6
 80083de:	f3af 8000 	nop.w
 80083e2:	4607      	mov	r7, r0
 80083e4:	1c78      	adds	r0, r7, #1
 80083e6:	d1d6      	bne.n	8008396 <_vfiprintf_r+0x19a>
 80083e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083ea:	07d9      	lsls	r1, r3, #31
 80083ec:	d405      	bmi.n	80083fa <_vfiprintf_r+0x1fe>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	059a      	lsls	r2, r3, #22
 80083f2:	d402      	bmi.n	80083fa <_vfiprintf_r+0x1fe>
 80083f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083f6:	f7ff f9a7 	bl	8007748 <__retarget_lock_release_recursive>
 80083fa:	89ab      	ldrh	r3, [r5, #12]
 80083fc:	065b      	lsls	r3, r3, #25
 80083fe:	f53f af1f 	bmi.w	8008240 <_vfiprintf_r+0x44>
 8008402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008404:	e71e      	b.n	8008244 <_vfiprintf_r+0x48>
 8008406:	ab03      	add	r3, sp, #12
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	462a      	mov	r2, r5
 800840c:	4b05      	ldr	r3, [pc, #20]	@ (8008424 <_vfiprintf_r+0x228>)
 800840e:	a904      	add	r1, sp, #16
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff fc8d 	bl	8007d30 <_printf_i>
 8008416:	e7e4      	b.n	80083e2 <_vfiprintf_r+0x1e6>
 8008418:	08008d07 	.word	0x08008d07
 800841c:	08008d11 	.word	0x08008d11
 8008420:	00000000 	.word	0x00000000
 8008424:	080081d9 	.word	0x080081d9
 8008428:	08008d0d 	.word	0x08008d0d

0800842c <__swbuf_r>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	460e      	mov	r6, r1
 8008430:	4614      	mov	r4, r2
 8008432:	4605      	mov	r5, r0
 8008434:	b118      	cbz	r0, 800843e <__swbuf_r+0x12>
 8008436:	6a03      	ldr	r3, [r0, #32]
 8008438:	b90b      	cbnz	r3, 800843e <__swbuf_r+0x12>
 800843a:	f7ff f845 	bl	80074c8 <__sinit>
 800843e:	69a3      	ldr	r3, [r4, #24]
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	071a      	lsls	r2, r3, #28
 8008446:	d501      	bpl.n	800844c <__swbuf_r+0x20>
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	b943      	cbnz	r3, 800845e <__swbuf_r+0x32>
 800844c:	4621      	mov	r1, r4
 800844e:	4628      	mov	r0, r5
 8008450:	f000 f82a 	bl	80084a8 <__swsetup_r>
 8008454:	b118      	cbz	r0, 800845e <__swbuf_r+0x32>
 8008456:	f04f 37ff 	mov.w	r7, #4294967295
 800845a:	4638      	mov	r0, r7
 800845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	1a98      	subs	r0, r3, r2
 8008464:	6963      	ldr	r3, [r4, #20]
 8008466:	b2f6      	uxtb	r6, r6
 8008468:	4283      	cmp	r3, r0
 800846a:	4637      	mov	r7, r6
 800846c:	dc05      	bgt.n	800847a <__swbuf_r+0x4e>
 800846e:	4621      	mov	r1, r4
 8008470:	4628      	mov	r0, r5
 8008472:	f7ff fe01 	bl	8008078 <_fflush_r>
 8008476:	2800      	cmp	r0, #0
 8008478:	d1ed      	bne.n	8008456 <__swbuf_r+0x2a>
 800847a:	68a3      	ldr	r3, [r4, #8]
 800847c:	3b01      	subs	r3, #1
 800847e:	60a3      	str	r3, [r4, #8]
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	6022      	str	r2, [r4, #0]
 8008486:	701e      	strb	r6, [r3, #0]
 8008488:	6962      	ldr	r2, [r4, #20]
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	429a      	cmp	r2, r3
 800848e:	d004      	beq.n	800849a <__swbuf_r+0x6e>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	07db      	lsls	r3, r3, #31
 8008494:	d5e1      	bpl.n	800845a <__swbuf_r+0x2e>
 8008496:	2e0a      	cmp	r6, #10
 8008498:	d1df      	bne.n	800845a <__swbuf_r+0x2e>
 800849a:	4621      	mov	r1, r4
 800849c:	4628      	mov	r0, r5
 800849e:	f7ff fdeb 	bl	8008078 <_fflush_r>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d0d9      	beq.n	800845a <__swbuf_r+0x2e>
 80084a6:	e7d6      	b.n	8008456 <__swbuf_r+0x2a>

080084a8 <__swsetup_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4b29      	ldr	r3, [pc, #164]	@ (8008550 <__swsetup_r+0xa8>)
 80084ac:	4605      	mov	r5, r0
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	460c      	mov	r4, r1
 80084b2:	b118      	cbz	r0, 80084bc <__swsetup_r+0x14>
 80084b4:	6a03      	ldr	r3, [r0, #32]
 80084b6:	b90b      	cbnz	r3, 80084bc <__swsetup_r+0x14>
 80084b8:	f7ff f806 	bl	80074c8 <__sinit>
 80084bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c0:	0719      	lsls	r1, r3, #28
 80084c2:	d422      	bmi.n	800850a <__swsetup_r+0x62>
 80084c4:	06da      	lsls	r2, r3, #27
 80084c6:	d407      	bmi.n	80084d8 <__swsetup_r+0x30>
 80084c8:	2209      	movs	r2, #9
 80084ca:	602a      	str	r2, [r5, #0]
 80084cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084d0:	81a3      	strh	r3, [r4, #12]
 80084d2:	f04f 30ff 	mov.w	r0, #4294967295
 80084d6:	e033      	b.n	8008540 <__swsetup_r+0x98>
 80084d8:	0758      	lsls	r0, r3, #29
 80084da:	d512      	bpl.n	8008502 <__swsetup_r+0x5a>
 80084dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084de:	b141      	cbz	r1, 80084f2 <__swsetup_r+0x4a>
 80084e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084e4:	4299      	cmp	r1, r3
 80084e6:	d002      	beq.n	80084ee <__swsetup_r+0x46>
 80084e8:	4628      	mov	r0, r5
 80084ea:	f7ff f95b 	bl	80077a4 <_free_r>
 80084ee:	2300      	movs	r3, #0
 80084f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	2300      	movs	r3, #0
 80084fc:	6063      	str	r3, [r4, #4]
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f043 0308 	orr.w	r3, r3, #8
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	b94b      	cbnz	r3, 8008522 <__swsetup_r+0x7a>
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008518:	d003      	beq.n	8008522 <__swsetup_r+0x7a>
 800851a:	4621      	mov	r1, r4
 800851c:	4628      	mov	r0, r5
 800851e:	f000 f88b 	bl	8008638 <__smakebuf_r>
 8008522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008526:	f013 0201 	ands.w	r2, r3, #1
 800852a:	d00a      	beq.n	8008542 <__swsetup_r+0x9a>
 800852c:	2200      	movs	r2, #0
 800852e:	60a2      	str	r2, [r4, #8]
 8008530:	6962      	ldr	r2, [r4, #20]
 8008532:	4252      	negs	r2, r2
 8008534:	61a2      	str	r2, [r4, #24]
 8008536:	6922      	ldr	r2, [r4, #16]
 8008538:	b942      	cbnz	r2, 800854c <__swsetup_r+0xa4>
 800853a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800853e:	d1c5      	bne.n	80084cc <__swsetup_r+0x24>
 8008540:	bd38      	pop	{r3, r4, r5, pc}
 8008542:	0799      	lsls	r1, r3, #30
 8008544:	bf58      	it	pl
 8008546:	6962      	ldrpl	r2, [r4, #20]
 8008548:	60a2      	str	r2, [r4, #8]
 800854a:	e7f4      	b.n	8008536 <__swsetup_r+0x8e>
 800854c:	2000      	movs	r0, #0
 800854e:	e7f7      	b.n	8008540 <__swsetup_r+0x98>
 8008550:	2000007c 	.word	0x2000007c

08008554 <_raise_r>:
 8008554:	291f      	cmp	r1, #31
 8008556:	b538      	push	{r3, r4, r5, lr}
 8008558:	4605      	mov	r5, r0
 800855a:	460c      	mov	r4, r1
 800855c:	d904      	bls.n	8008568 <_raise_r+0x14>
 800855e:	2316      	movs	r3, #22
 8008560:	6003      	str	r3, [r0, #0]
 8008562:	f04f 30ff 	mov.w	r0, #4294967295
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800856a:	b112      	cbz	r2, 8008572 <_raise_r+0x1e>
 800856c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008570:	b94b      	cbnz	r3, 8008586 <_raise_r+0x32>
 8008572:	4628      	mov	r0, r5
 8008574:	f000 f830 	bl	80085d8 <_getpid_r>
 8008578:	4622      	mov	r2, r4
 800857a:	4601      	mov	r1, r0
 800857c:	4628      	mov	r0, r5
 800857e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008582:	f000 b817 	b.w	80085b4 <_kill_r>
 8008586:	2b01      	cmp	r3, #1
 8008588:	d00a      	beq.n	80085a0 <_raise_r+0x4c>
 800858a:	1c59      	adds	r1, r3, #1
 800858c:	d103      	bne.n	8008596 <_raise_r+0x42>
 800858e:	2316      	movs	r3, #22
 8008590:	6003      	str	r3, [r0, #0]
 8008592:	2001      	movs	r0, #1
 8008594:	e7e7      	b.n	8008566 <_raise_r+0x12>
 8008596:	2100      	movs	r1, #0
 8008598:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800859c:	4620      	mov	r0, r4
 800859e:	4798      	blx	r3
 80085a0:	2000      	movs	r0, #0
 80085a2:	e7e0      	b.n	8008566 <_raise_r+0x12>

080085a4 <raise>:
 80085a4:	4b02      	ldr	r3, [pc, #8]	@ (80085b0 <raise+0xc>)
 80085a6:	4601      	mov	r1, r0
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	f7ff bfd3 	b.w	8008554 <_raise_r>
 80085ae:	bf00      	nop
 80085b0:	2000007c 	.word	0x2000007c

080085b4 <_kill_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d07      	ldr	r5, [pc, #28]	@ (80085d4 <_kill_r+0x20>)
 80085b8:	2300      	movs	r3, #0
 80085ba:	4604      	mov	r4, r0
 80085bc:	4608      	mov	r0, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	f7fb fb29 	bl	8003c18 <_kill>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	d102      	bne.n	80085d0 <_kill_r+0x1c>
 80085ca:	682b      	ldr	r3, [r5, #0]
 80085cc:	b103      	cbz	r3, 80085d0 <_kill_r+0x1c>
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	bd38      	pop	{r3, r4, r5, pc}
 80085d2:	bf00      	nop
 80085d4:	20002594 	.word	0x20002594

080085d8 <_getpid_r>:
 80085d8:	f7fb bb16 	b.w	8003c08 <_getpid>

080085dc <_malloc_usable_size_r>:
 80085dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e0:	1f18      	subs	r0, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bfbc      	itt	lt
 80085e6:	580b      	ldrlt	r3, [r1, r0]
 80085e8:	18c0      	addlt	r0, r0, r3
 80085ea:	4770      	bx	lr

080085ec <__swhatbuf_r>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	460c      	mov	r4, r1
 80085f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f4:	2900      	cmp	r1, #0
 80085f6:	b096      	sub	sp, #88	@ 0x58
 80085f8:	4615      	mov	r5, r2
 80085fa:	461e      	mov	r6, r3
 80085fc:	da0d      	bge.n	800861a <__swhatbuf_r+0x2e>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008604:	f04f 0100 	mov.w	r1, #0
 8008608:	bf14      	ite	ne
 800860a:	2340      	movne	r3, #64	@ 0x40
 800860c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008610:	2000      	movs	r0, #0
 8008612:	6031      	str	r1, [r6, #0]
 8008614:	602b      	str	r3, [r5, #0]
 8008616:	b016      	add	sp, #88	@ 0x58
 8008618:	bd70      	pop	{r4, r5, r6, pc}
 800861a:	466a      	mov	r2, sp
 800861c:	f000 f848 	bl	80086b0 <_fstat_r>
 8008620:	2800      	cmp	r0, #0
 8008622:	dbec      	blt.n	80085fe <__swhatbuf_r+0x12>
 8008624:	9901      	ldr	r1, [sp, #4]
 8008626:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800862a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800862e:	4259      	negs	r1, r3
 8008630:	4159      	adcs	r1, r3
 8008632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008636:	e7eb      	b.n	8008610 <__swhatbuf_r+0x24>

08008638 <__smakebuf_r>:
 8008638:	898b      	ldrh	r3, [r1, #12]
 800863a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800863c:	079d      	lsls	r5, r3, #30
 800863e:	4606      	mov	r6, r0
 8008640:	460c      	mov	r4, r1
 8008642:	d507      	bpl.n	8008654 <__smakebuf_r+0x1c>
 8008644:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	6123      	str	r3, [r4, #16]
 800864c:	2301      	movs	r3, #1
 800864e:	6163      	str	r3, [r4, #20]
 8008650:	b003      	add	sp, #12
 8008652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008654:	ab01      	add	r3, sp, #4
 8008656:	466a      	mov	r2, sp
 8008658:	f7ff ffc8 	bl	80085ec <__swhatbuf_r>
 800865c:	9f00      	ldr	r7, [sp, #0]
 800865e:	4605      	mov	r5, r0
 8008660:	4639      	mov	r1, r7
 8008662:	4630      	mov	r0, r6
 8008664:	f7ff f912 	bl	800788c <_malloc_r>
 8008668:	b948      	cbnz	r0, 800867e <__smakebuf_r+0x46>
 800866a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800866e:	059a      	lsls	r2, r3, #22
 8008670:	d4ee      	bmi.n	8008650 <__smakebuf_r+0x18>
 8008672:	f023 0303 	bic.w	r3, r3, #3
 8008676:	f043 0302 	orr.w	r3, r3, #2
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	e7e2      	b.n	8008644 <__smakebuf_r+0xc>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	6020      	str	r0, [r4, #0]
 8008682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800868e:	b15b      	cbz	r3, 80086a8 <__smakebuf_r+0x70>
 8008690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008694:	4630      	mov	r0, r6
 8008696:	f000 f81d 	bl	80086d4 <_isatty_r>
 800869a:	b128      	cbz	r0, 80086a8 <__smakebuf_r+0x70>
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	f043 0301 	orr.w	r3, r3, #1
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	431d      	orrs	r5, r3
 80086ac:	81a5      	strh	r5, [r4, #12]
 80086ae:	e7cf      	b.n	8008650 <__smakebuf_r+0x18>

080086b0 <_fstat_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d07      	ldr	r5, [pc, #28]	@ (80086d0 <_fstat_r+0x20>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	4608      	mov	r0, r1
 80086ba:	4611      	mov	r1, r2
 80086bc:	602b      	str	r3, [r5, #0]
 80086be:	f7fb fb0b 	bl	8003cd8 <_fstat>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	d102      	bne.n	80086cc <_fstat_r+0x1c>
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	b103      	cbz	r3, 80086cc <_fstat_r+0x1c>
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	bd38      	pop	{r3, r4, r5, pc}
 80086ce:	bf00      	nop
 80086d0:	20002594 	.word	0x20002594

080086d4 <_isatty_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d06      	ldr	r5, [pc, #24]	@ (80086f0 <_isatty_r+0x1c>)
 80086d8:	2300      	movs	r3, #0
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	f7fb fb0a 	bl	8003cf8 <_isatty>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_isatty_r+0x1a>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_isatty_r+0x1a>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20002594 	.word	0x20002594

080086f4 <_init>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	bf00      	nop
 80086f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fa:	bc08      	pop	{r3}
 80086fc:	469e      	mov	lr, r3
 80086fe:	4770      	bx	lr

08008700 <_fini>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	bf00      	nop
 8008704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008706:	bc08      	pop	{r3}
 8008708:	469e      	mov	lr, r3
 800870a:	4770      	bx	lr
