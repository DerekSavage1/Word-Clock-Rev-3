
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  080070bc  080070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074cc  080074cc  0000908c  2**0
                  CONTENTS
  4 .ARM          00000008  080074cc  080074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074d4  080074d4  0000908c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d4  080074d4  000084d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d8  080074d8  000084d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080074dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022e0  2000008c  08007568  0000908c  2**2
                  ALLOC
 10 ._user_heap_stack 00010404  2000236c  08007568  0000936c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d53f  00000000  00000000  000090bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002728  00000000  00000000  000165fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00018d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7f  00000000  00000000  00019ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ff5  00000000  00000000  0001a55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110f4  00000000  00000000  00033554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095457  00000000  00000000  00044648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042fc  00000000  00000000  000d9ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ddde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070a4 	.word	0x080070a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	080070a4 	.word	0x080070a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <addBitmapToNextFrame>:
 *
 * @param[in] bitmap     Bitmap representing LED layout.
 * @param[in] color      24-bit color value (0xRRGGBB).
 * @param[in] brightness Brightness level (0-255).
 */
void addBitmapToNextFrame(const uint16_t matrix[MATRIX_HEIGHT], uint8_t red, uint8_t green, uint8_t blue, uint8_t brightness) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	4608      	mov	r0, r1
 800057a:	4611      	mov	r1, r2
 800057c:	461a      	mov	r2, r3
 800057e:	4603      	mov	r3, r0
 8000580:	70fb      	strb	r3, [r7, #3]
 8000582:	460b      	mov	r3, r1
 8000584:	70bb      	strb	r3, [r7, #2]
 8000586:	4613      	mov	r3, r2
 8000588:	707b      	strb	r3, [r7, #1]

    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	e03b      	b.n	8000608 <addBitmapToNextFrame+0x98>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	e032      	b.n	80005fc <addBitmapToNextFrame+0x8c>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	441a      	add	r2, r3
 80005a0:	0052      	lsls	r2, r2, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4413      	add	r3, r2
 80005ac:	73fb      	strb	r3, [r7, #15]

            if(matrix[i] & (1 << j)) {
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	fa42 f303 	asr.w	r3, r2, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d016      	beq.n	80005f6 <addBitmapToNextFrame+0x86>
                nextFrame[ledNumber].red = red;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	4914      	ldr	r1, [pc, #80]	@ (800061c <addBitmapToNextFrame+0xac>)
 80005cc:	78fa      	ldrb	r2, [r7, #3]
 80005ce:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
                nextFrame[ledNumber].green = green;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	4a11      	ldr	r2, [pc, #68]	@ (800061c <addBitmapToNextFrame+0xac>)
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	78ba      	ldrb	r2, [r7, #2]
 80005dc:	705a      	strb	r2, [r3, #1]
                nextFrame[ledNumber].blue = blue;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <addBitmapToNextFrame+0xac>)
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	787a      	ldrb	r2, [r7, #1]
 80005e8:	709a      	strb	r2, [r3, #2]
                nextFrame[ledNumber].draw = true;
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4a0b      	ldr	r2, [pc, #44]	@ (800061c <addBitmapToNextFrame+0xac>)
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	2201      	movs	r2, #1
 80005f4:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	3301      	adds	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	ddc9      	ble.n	8000596 <addBitmapToNextFrame+0x26>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2b0c      	cmp	r3, #12
 800060c:	ddc0      	ble.n	8000590 <addBitmapToNextFrame+0x20>
            }

        }
    }
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	371c      	adds	r7, #28
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	200000a8 	.word	0x200000a8

08000620 <addBitmapToCurrentFrame>:
 *
 * @param[in] bitmap     Bitmap representing LED layout.
 * @param[in] color      24-bit color value (0xRRGGBB).
 * @param[in] brightness Brightness level (0-255).
 */
void addBitmapToCurrentFrame(const uint16_t matrix[MATRIX_HEIGHT], uint8_t red, uint8_t green, uint8_t blue, uint8_t brightness) {
 8000620:	b480      	push	{r7}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	4608      	mov	r0, r1
 800062a:	4611      	mov	r1, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4603      	mov	r3, r0
 8000630:	70fb      	strb	r3, [r7, #3]
 8000632:	460b      	mov	r3, r1
 8000634:	70bb      	strb	r3, [r7, #2]
 8000636:	4613      	mov	r3, r2
 8000638:	707b      	strb	r3, [r7, #1]

    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e03b      	b.n	80006b8 <addBitmapToCurrentFrame+0x98>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e032      	b.n	80006ac <addBitmapToCurrentFrame+0x8c>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	0092      	lsls	r2, r2, #2
 800064e:	441a      	add	r2, r3
 8000650:	0052      	lsls	r2, r2, #1
 8000652:	4413      	add	r3, r2
 8000654:	b2da      	uxtb	r2, r3
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	73fb      	strb	r3, [r7, #15]

            if(matrix[i] & (1 << j)) {
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	fa42 f303 	asr.w	r3, r2, r3
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d016      	beq.n	80006a6 <addBitmapToCurrentFrame+0x86>
                currentFrame[ledNumber].red = red;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	4914      	ldr	r1, [pc, #80]	@ (80006cc <addBitmapToCurrentFrame+0xac>)
 800067c:	78fa      	ldrb	r2, [r7, #3]
 800067e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
                currentFrame[ledNumber].green = green;
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <addBitmapToCurrentFrame+0xac>)
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4413      	add	r3, r2
 800068a:	78ba      	ldrb	r2, [r7, #2]
 800068c:	705a      	strb	r2, [r3, #1]
                currentFrame[ledNumber].blue = blue;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	4a0e      	ldr	r2, [pc, #56]	@ (80006cc <addBitmapToCurrentFrame+0xac>)
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	787a      	ldrb	r2, [r7, #1]
 8000698:	709a      	strb	r2, [r3, #2]
                currentFrame[ledNumber].draw = true;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <addBitmapToCurrentFrame+0xac>)
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	3301      	adds	r3, #1
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	2b0a      	cmp	r3, #10
 80006b0:	ddc9      	ble.n	8000646 <addBitmapToCurrentFrame+0x26>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b0c      	cmp	r3, #12
 80006bc:	ddc0      	ble.n	8000640 <addBitmapToCurrentFrame+0x20>
            }

        }
    }
}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	371c      	adds	r7, #28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	200002e4 	.word	0x200002e4

080006d0 <shuffle>:

void shuffle(uint8_t *array, uint32_t size) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    if (size > 1) {
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d92d      	bls.n	800073c <shuffle+0x6c>
        for (uint32_t i = 0; i < size - 1; i++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e025      	b.n	8000732 <shuffle+0x62>
            uint32_t j = i + rand() / (RAND_MAX / (size - i) + 1);
 80006e6:	f005 fb03 	bl	8005cf0 <rand>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4619      	mov	r1, r3
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80006f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fc:	3301      	adds	r3, #1
 80006fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	4413      	add	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
            uint8_t t = array[j];
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	73fb      	strb	r3, [r7, #15]
            array[j] = array[i];
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	441a      	add	r2, r3
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	440b      	add	r3, r1
 800071e:	7812      	ldrb	r2, [r2, #0]
 8000720:	701a      	strb	r2, [r3, #0]
            array[i] = t;
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4413      	add	r3, r2
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size - 1; i++) {
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	3301      	adds	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	429a      	cmp	r2, r3
 800073a:	d3d4      	bcc.n	80006e6 <shuffle+0x16>
        }
    }
}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <randomInRange>:

int randomInRange(int min, int max) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
    return min + rand() % (max - min + 1);
 800074e:	f005 facf 	bl	8005cf0 <rand>
 8000752:	4602      	mov	r2, r0
 8000754:	6839      	ldr	r1, [r7, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	1acb      	subs	r3, r1, r3
 800075a:	3301      	adds	r3, #1
 800075c:	fb92 f1f3 	sdiv	r1, r2, r3
 8000760:	fb01 f303 	mul.w	r3, r1, r3
 8000764:	1ad2      	subs	r2, r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <wipeNextFrame>:
		currentFrame[i].green = 0;
		currentFrame[i].red = 0;
	}
}

void wipeNextFrame() {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
	for(int i = 0; i < MATRIX_SIZE; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e013      	b.n	80007a8 <wipeNextFrame+0x34>
		nextFrame[i].blue = 0;
 8000780:	4a0e      	ldr	r2, [pc, #56]	@ (80007bc <wipeNextFrame+0x48>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	2200      	movs	r2, #0
 800078a:	709a      	strb	r2, [r3, #2]
		nextFrame[i].green = 0;
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <wipeNextFrame+0x48>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	2200      	movs	r2, #0
 8000796:	705a      	strb	r2, [r3, #1]
		nextFrame[i].red = 0;
 8000798:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <wipeNextFrame+0x48>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2100      	movs	r1, #0
 800079e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3301      	adds	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b8e      	cmp	r3, #142	@ 0x8e
 80007ac:	dde8      	ble.n	8000780 <wipeNextFrame+0xc>
	}
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	200000a8 	.word	0x200000a8

080007c0 <advanceFrame>:

void advanceFrame() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    memcpy(currentFrame, nextFrame, sizeof(currentFrame));
 80007c4:	4a06      	ldr	r2, [pc, #24]	@ (80007e0 <advanceFrame+0x20>)
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <advanceFrame+0x24>)
 80007c8:	4610      	mov	r0, r2
 80007ca:	4619      	mov	r1, r3
 80007cc:	f44f 730f 	mov.w	r3, #572	@ 0x23c
 80007d0:	461a      	mov	r2, r3
 80007d2:	f005 fc92 	bl	80060fa <memcpy>
    wipeNextFrame();
 80007d6:	f7ff ffcd 	bl	8000774 <wipeNextFrame>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200002e4 	.word	0x200002e4
 80007e4:	200000a8 	.word	0x200000a8

080007e8 <getLitCurrentFrame>:
 * @param   arr Pointer to an array for storing indices of lit LEDs.
 *            This array should be preallocated by the caller.
 *
 * @return  Number of lit LEDs found. This value represents the size of the updated array.
 */
uint8_t getLitCurrentFrame(uint8_t *arr) {
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

    uint32_t index = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	e01f      	b.n	800083a <getLitCurrentFrame+0x52>
        if(currentFrame[i].red != 0 || currentFrame[i].green != 0 || currentFrame[i].blue != 0) {
 80007fa:	4a16      	ldr	r2, [pc, #88]	@ (8000854 <getLitCurrentFrame+0x6c>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10d      	bne.n	8000822 <getLitCurrentFrame+0x3a>
 8000806:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <getLitCurrentFrame+0x6c>)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	785b      	ldrb	r3, [r3, #1]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d106      	bne.n	8000822 <getLitCurrentFrame+0x3a>
 8000814:	4a0f      	ldr	r2, [pc, #60]	@ (8000854 <getLitCurrentFrame+0x6c>)
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	789b      	ldrb	r3, [r3, #2]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d008      	beq.n	8000834 <getLitCurrentFrame+0x4c>
            arr[index] = i;
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	701a      	strb	r2, [r3, #0]
            index++;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3301      	adds	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	3301      	adds	r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	2b8e      	cmp	r3, #142	@ 0x8e
 800083e:	dddc      	ble.n	80007fa <getLitCurrentFrame+0x12>
        }
    }

    return index + 1;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	3301      	adds	r3, #1
 8000846:	b2db      	uxtb	r3, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	200002e4 	.word	0x200002e4

08000858 <flickerOutEffect>:
    }

    return index + 1;
}

void flickerOutEffect() {
 8000858:	b580      	push	{r7, lr}
 800085a:	b0a6      	sub	sp, #152	@ 0x98
 800085c:	af00      	add	r7, sp, #0
    uint8_t litLEDs[MATRIX_SIZE] = {0};
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	228b      	movs	r2, #139	@ 0x8b
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f005 fbb7 	bl	8005fde <memset>
    uint8_t numLit = getLitCurrentFrame(litLEDs);
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffb8 	bl	80007e8 <getLitCurrentFrame>
 8000878:	4603      	mov	r3, r0
 800087a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    if(numLit == 0)
 800087e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8000882:	2b00      	cmp	r3, #0
 8000884:	d06e      	beq.n	8000964 <flickerOutEffect+0x10c>
    	return;

    const uint8_t flickerLoops = 10;
 8000886:	230a      	movs	r3, #10
 8000888:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8000892:	e042      	b.n	800091a <flickerOutEffect+0xc2>
        shuffle(litLEDs, numLit);
 8000894:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff17 	bl	80006d0 <shuffle>
        for (uint8_t i = 0; i < numLit; ++i) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80008a8:	e024      	b.n	80008f4 <flickerOutEffect+0x9c>
            // Invert the logic here: As loop increases,
            // it becomes more likely to turn off the LED.
            // This is done by comparing the random value
            // against a decreasing threshold.
            if (randomInRange(0, flickerLoops) < loop) {
 80008aa:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80008ae:	4619      	mov	r1, r3
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ff47 	bl	8000744 <randomInRange>
 80008b6:	4602      	mov	r2, r0
 80008b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80008bc:	429a      	cmp	r2, r3
 80008be:	da0a      	bge.n	80008d6 <flickerOutEffect+0x7e>
                turnOffLED((LED *) currentFrame, litLEDs[i]);
 80008c0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80008c4:	3398      	adds	r3, #152	@ 0x98
 80008c6:	443b      	add	r3, r7
 80008c8:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4827      	ldr	r0, [pc, #156]	@ (800096c <flickerOutEffect+0x114>)
 80008d0:	f005 f940 	bl	8005b54 <turnOffLED>
 80008d4:	e009      	b.n	80008ea <flickerOutEffect+0x92>
            } else {
                // Only explicitly turn on LEDs if there's a reason
                // they might be off from a previous iteration.
                // Depending on the initial state, this might not be necessary.
                turnOnLED((LED *) currentFrame, litLEDs[i]);
 80008d6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80008da:	3398      	adds	r3, #152	@ 0x98
 80008dc:	443b      	add	r3, r7
 80008de:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4821      	ldr	r0, [pc, #132]	@ (800096c <flickerOutEffect+0x114>)
 80008e6:	f005 f923 	bl	8005b30 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 80008ea:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80008ee:	3301      	adds	r3, #1
 80008f0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80008f4:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80008f8:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d3d4      	bcc.n	80008aa <flickerOutEffect+0x52>
            }
        }
        updatePwmBuffer((LED *) currentFrame);
 8000900:	481a      	ldr	r0, [pc, #104]	@ (800096c <flickerOutEffect+0x114>)
 8000902:	f005 f955 	bl	8005bb0 <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 8000906:	f005 f9c7 	bl	8005c98 <DMA_Send>
        HAL_Delay(50); // Adjust delay as necessary for visual effect
 800090a:	2032      	movs	r0, #50	@ 0x32
 800090c:	f001 feee 	bl	80026ec <HAL_Delay>
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 8000910:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000914:	3301      	adds	r3, #1
 8000916:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800091a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800091e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000922:	429a      	cmp	r2, r3
 8000924:	d3b6      	bcc.n	8000894 <flickerOutEffect+0x3c>
    }

    // Ensure all LEDs are turned off at the end
    for (uint8_t i = 0; i < numLit; ++i) {
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800092c:	e00e      	b.n	800094c <flickerOutEffect+0xf4>
        turnOffLED((LED *) currentFrame, litLEDs[i]);
 800092e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000932:	3398      	adds	r3, #152	@ 0x98
 8000934:	443b      	add	r3, r7
 8000936:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800093a:	4619      	mov	r1, r3
 800093c:	480b      	ldr	r0, [pc, #44]	@ (800096c <flickerOutEffect+0x114>)
 800093e:	f005 f909 	bl	8005b54 <turnOffLED>
    for (uint8_t i = 0; i < numLit; ++i) {
 8000942:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000946:	3301      	adds	r3, #1
 8000948:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800094c:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 8000950:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8000954:	429a      	cmp	r2, r3
 8000956:	d3ea      	bcc.n	800092e <flickerOutEffect+0xd6>
    }
    updatePwmBuffer((LED *) currentFrame);
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <flickerOutEffect+0x114>)
 800095a:	f005 f929 	bl	8005bb0 <updatePwmBuffer>
    DMA_Send(); // Update LEDs through DMA
 800095e:	f005 f99b 	bl	8005c98 <DMA_Send>
 8000962:	e000      	b.n	8000966 <flickerOutEffect+0x10e>
    	return;
 8000964:	bf00      	nop
}
 8000966:	3798      	adds	r7, #152	@ 0x98
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200002e4 	.word	0x200002e4

08000970 <flickerInEffect>:

void flickerInEffect() {
 8000970:	b580      	push	{r7, lr}
 8000972:	b0a6      	sub	sp, #152	@ 0x98
 8000974:	af00      	add	r7, sp, #0
    uint8_t litLEDs[MATRIX_SIZE] = {0};
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	228b      	movs	r2, #139	@ 0x8b
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f005 fb2b 	bl	8005fde <memset>
    uint8_t numLit = getLitCurrentFrame(litLEDs);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff2c 	bl	80007e8 <getLitCurrentFrame>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    const uint8_t flickerLoops = 10;
 8000996:	230a      	movs	r3, #10
 8000998:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 800099c:	2300      	movs	r3, #0
 800099e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80009a2:	e042      	b.n	8000a2a <flickerInEffect+0xba>
        shuffle(litLEDs, numLit);
 80009a4:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe8f 	bl	80006d0 <shuffle>
        for (uint8_t i = 0; i < numLit; ++i) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80009b8:	e024      	b.n	8000a04 <flickerInEffect+0x94>
            if (randomInRange(0, flickerLoops) > loop) {
 80009ba:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80009be:	4619      	mov	r1, r3
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff febf 	bl	8000744 <randomInRange>
 80009c6:	4602      	mov	r2, r0
 80009c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dd0a      	ble.n	80009e6 <flickerInEffect+0x76>
                turnOffLED((LED *) currentFrame, litLEDs[i]);
 80009d0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80009d4:	3398      	adds	r3, #152	@ 0x98
 80009d6:	443b      	add	r3, r7
 80009d8:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80009dc:	4619      	mov	r1, r3
 80009de:	4827      	ldr	r0, [pc, #156]	@ (8000a7c <flickerInEffect+0x10c>)
 80009e0:	f005 f8b8 	bl	8005b54 <turnOffLED>
 80009e4:	e009      	b.n	80009fa <flickerInEffect+0x8a>
            } else {
                turnOnLED((LED *) currentFrame, litLEDs[i]);
 80009e6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80009ea:	3398      	adds	r3, #152	@ 0x98
 80009ec:	443b      	add	r3, r7
 80009ee:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4821      	ldr	r0, [pc, #132]	@ (8000a7c <flickerInEffect+0x10c>)
 80009f6:	f005 f89b 	bl	8005b30 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 80009fa:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80009fe:	3301      	adds	r3, #1
 8000a00:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000a04:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8000a08:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d3d4      	bcc.n	80009ba <flickerInEffect+0x4a>
            }
        }
        updatePwmBuffer((LED *) currentFrame);
 8000a10:	481a      	ldr	r0, [pc, #104]	@ (8000a7c <flickerInEffect+0x10c>)
 8000a12:	f005 f8cd 	bl	8005bb0 <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 8000a16:	f005 f93f 	bl	8005c98 <DMA_Send>
        HAL_Delay(50); // Adjust delay as necessary for visual effect
 8000a1a:	2032      	movs	r0, #50	@ 0x32
 8000a1c:	f001 fe66 	bl	80026ec <HAL_Delay>
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 8000a20:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000a24:	3301      	adds	r3, #1
 8000a26:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8000a2a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000a2e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3b6      	bcc.n	80009a4 <flickerInEffect+0x34>
    }

    // Ensure all LEDs are turned on at the end
    for (uint8_t i = 0; i < numLit; ++i) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8000a3c:	e00e      	b.n	8000a5c <flickerInEffect+0xec>
        turnOnLED((LED *) currentFrame, litLEDs[i]);
 8000a3e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000a42:	3398      	adds	r3, #152	@ 0x98
 8000a44:	443b      	add	r3, r7
 8000a46:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <flickerInEffect+0x10c>)
 8000a4e:	f005 f86f 	bl	8005b30 <turnOnLED>
    for (uint8_t i = 0; i < numLit; ++i) {
 8000a52:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000a56:	3301      	adds	r3, #1
 8000a58:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8000a5c:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 8000a60:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d3ea      	bcc.n	8000a3e <flickerInEffect+0xce>
    }
    updatePwmBuffer((LED *) currentFrame);
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <flickerInEffect+0x10c>)
 8000a6a:	f005 f8a1 	bl	8005bb0 <updatePwmBuffer>
    DMA_Send(); // Update LEDs through DMA
 8000a6e:	f005 f913 	bl	8005c98 <DMA_Send>
}
 8000a72:	bf00      	nop
 8000a74:	3798      	adds	r7, #152	@ 0x98
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200002e4 	.word	0x200002e4

08000a80 <setAnniversary>:
		MINUTE_THIRTY
};

HsvColor lastColor = {0};

void setAnniversary(uint8_t brightness) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]


	lastColor.s = 255;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <setAnniversary+0x80>)
 8000a8c:	22ff      	movs	r2, #255	@ 0xff
 8000a8e:	705a      	strb	r2, [r3, #1]
	lastColor.v = brightness;
 8000a90:	4a1b      	ldr	r2, [pc, #108]	@ (8000b00 <setAnniversary+0x80>)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	7093      	strb	r3, [r2, #2]


	lastColor.h = lastColor.h + 5;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <setAnniversary+0x80>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	3305      	adds	r3, #5
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <setAnniversary+0x80>)
 8000aa0:	701a      	strb	r2, [r3, #0]

	RgbColor rgb = HsvToRgb(lastColor);
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <setAnniversary+0x80>)
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f000 f9b3 	bl	8000e10 <HsvToRgb>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	733a      	strb	r2, [r7, #12]
 8000ab0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000ab4:	737a      	strb	r2, [r7, #13]
 8000ab6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000aba:	73bb      	strb	r3, [r7, #14]

	addBitmapToCurrentFrame(BMP_HAPPY, rgb.r, rgb.g, rgb.b, 255);
 8000abc:	7b39      	ldrb	r1, [r7, #12]
 8000abe:	7b7a      	ldrb	r2, [r7, #13]
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
 8000ac2:	20ff      	movs	r0, #255	@ 0xff
 8000ac4:	9000      	str	r0, [sp, #0]
 8000ac6:	480f      	ldr	r0, [pc, #60]	@ (8000b04 <setAnniversary+0x84>)
 8000ac8:	f7ff fdaa 	bl	8000620 <addBitmapToCurrentFrame>
	addBitmapToCurrentFrame(BMP_ANNIVERSARY, rgb.r, rgb.g, rgb.b, 255);
 8000acc:	7b39      	ldrb	r1, [r7, #12]
 8000ace:	7b7a      	ldrb	r2, [r7, #13]
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	20ff      	movs	r0, #255	@ 0xff
 8000ad4:	9000      	str	r0, [sp, #0]
 8000ad6:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <setAnniversary+0x88>)
 8000ad8:	f7ff fda2 	bl	8000620 <addBitmapToCurrentFrame>
	addBitmapToCurrentFrame(BMP_KATIEDEREK, rgb.r, rgb.g, rgb.b, 255);
 8000adc:	7b39      	ldrb	r1, [r7, #12]
 8000ade:	7b7a      	ldrb	r2, [r7, #13]
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	20ff      	movs	r0, #255	@ 0xff
 8000ae4:	9000      	str	r0, [sp, #0]
 8000ae6:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <setAnniversary+0x8c>)
 8000ae8:	f7ff fd9a 	bl	8000620 <addBitmapToCurrentFrame>

	updatePwmBuffer((LED *) currentFrame);
 8000aec:	4808      	ldr	r0, [pc, #32]	@ (8000b10 <setAnniversary+0x90>)
 8000aee:	f005 f85f 	bl	8005bb0 <updatePwmBuffer>
	DMA_Send();
 8000af2:	f005 f8d1 	bl	8005c98 <DMA_Send>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000520 	.word	0x20000520
 8000b04:	08007304 	.word	0x08007304
 8000b08:	0800731e 	.word	0x0800731e
 8000b0c:	08007352 	.word	0x08007352
 8000b10:	200002e4 	.word	0x200002e4

08000b14 <display_time>:

void display_time(int hour, int minute, uint8_t red, uint8_t green, uint8_t blue, uint8_t brightness) {
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	461a      	mov	r2, r3
 8000b22:	460b      	mov	r3, r1
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	4613      	mov	r3, r2
 8000b28:	71bb      	strb	r3, [r7, #6]
	addBitmapToNextFrame(BMP_ITS, red, green, blue, brightness);
 8000b2a:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b2e:	79ba      	ldrb	r2, [r7, #6]
 8000b30:	79f9      	ldrb	r1, [r7, #7]
 8000b32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4603      	mov	r3, r0
 8000b3a:	48a1      	ldr	r0, [pc, #644]	@ (8000dc0 <display_time+0x2ac>)
 8000b3c:	f7ff fd18 	bl	8000570 <addBitmapToNextFrame>
    // Round down to the nearest five minutes
    minute = (minute / 5) * 5;
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4aa0      	ldr	r2, [pc, #640]	@ (8000dc4 <display_time+0x2b0>)
 8000b44:	fb82 1203 	smull	r1, r2, r2, r3
 8000b48:	1052      	asrs	r2, r2, #1
 8000b4a:	17db      	asrs	r3, r3, #31
 8000b4c:	1ad2      	subs	r2, r2, r3
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]

    // Display minute, accounting for 'past' or 'to'
    if (minute < 5) {
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	dd20      	ble.n	8000b9e <display_time+0x8a>
    	//no past or till
    } else if (minute < 35) {
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b22      	cmp	r3, #34	@ 0x22
 8000b60:	dc0b      	bgt.n	8000b7a <display_time+0x66>
        addBitmapToNextFrame(BMP_PAST, red, green, blue, brightness);
 8000b62:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	79f9      	ldrb	r1, [r7, #7]
 8000b6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	4603      	mov	r3, r0
 8000b72:	4895      	ldr	r0, [pc, #596]	@ (8000dc8 <display_time+0x2b4>)
 8000b74:	f7ff fcfc 	bl	8000570 <addBitmapToNextFrame>
 8000b78:	e011      	b.n	8000b9e <display_time+0x8a>
    } else {
        minute = 60 - minute;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8000b80:	60bb      	str	r3, [r7, #8]
        hour++;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3301      	adds	r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
        addBitmapToNextFrame(BMP_TILL, red, green, blue, brightness);
 8000b88:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	79f9      	ldrb	r1, [r7, #7]
 8000b90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	4603      	mov	r3, r0
 8000b98:	488c      	ldr	r0, [pc, #560]	@ (8000dcc <display_time+0x2b8>)
 8000b9a:	f7ff fce9 	bl	8000570 <addBitmapToNextFrame>
    }

    if(hour == 0 || hour == 12);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01c      	beq.n	8000bde <display_time+0xca>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b0c      	cmp	r3, #12
 8000ba8:	d019      	beq.n	8000bde <display_time+0xca>
    else if(hour < 12) addBitmapToNextFrame(BMP_AM, red, green, blue, brightness);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b0b      	cmp	r3, #11
 8000bae:	dc0b      	bgt.n	8000bc8 <display_time+0xb4>
 8000bb0:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000bb4:	79ba      	ldrb	r2, [r7, #6]
 8000bb6:	79f9      	ldrb	r1, [r7, #7]
 8000bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4883      	ldr	r0, [pc, #524]	@ (8000dd0 <display_time+0x2bc>)
 8000bc2:	f7ff fcd5 	bl	8000570 <addBitmapToNextFrame>
 8000bc6:	e00a      	b.n	8000bde <display_time+0xca>
    else addBitmapToNextFrame(BMP_PM, red, green, blue, brightness);
 8000bc8:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000bcc:	79ba      	ldrb	r2, [r7, #6]
 8000bce:	79f9      	ldrb	r1, [r7, #7]
 8000bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	487e      	ldr	r0, [pc, #504]	@ (8000dd4 <display_time+0x2c0>)
 8000bda:	f7ff fcc9 	bl	8000570 <addBitmapToNextFrame>

    // Display hour
    switch(hour) {
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b17      	cmp	r3, #23
 8000be2:	f200 80cf 	bhi.w	8000d84 <display_time+0x270>
 8000be6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bec <display_time+0xd8>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000c4d 	.word	0x08000c4d
 8000bf0:	08000c65 	.word	0x08000c65
 8000bf4:	08000c7d 	.word	0x08000c7d
 8000bf8:	08000c95 	.word	0x08000c95
 8000bfc:	08000cad 	.word	0x08000cad
 8000c00:	08000cc5 	.word	0x08000cc5
 8000c04:	08000cdd 	.word	0x08000cdd
 8000c08:	08000cf5 	.word	0x08000cf5
 8000c0c:	08000d0d 	.word	0x08000d0d
 8000c10:	08000d25 	.word	0x08000d25
 8000c14:	08000d3d 	.word	0x08000d3d
 8000c18:	08000d55 	.word	0x08000d55
 8000c1c:	08000d6d 	.word	0x08000d6d
 8000c20:	08000c65 	.word	0x08000c65
 8000c24:	08000c7d 	.word	0x08000c7d
 8000c28:	08000c95 	.word	0x08000c95
 8000c2c:	08000cad 	.word	0x08000cad
 8000c30:	08000cc5 	.word	0x08000cc5
 8000c34:	08000cdd 	.word	0x08000cdd
 8000c38:	08000cf5 	.word	0x08000cf5
 8000c3c:	08000d0d 	.word	0x08000d0d
 8000c40:	08000d25 	.word	0x08000d25
 8000c44:	08000d3d 	.word	0x08000d3d
 8000c48:	08000d55 	.word	0x08000d55
        case 0:
            addBitmapToNextFrame(HOUR_MIDNIGHT, red, green, blue, brightness);
 8000c4c:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000c50:	79ba      	ldrb	r2, [r7, #6]
 8000c52:	79f9      	ldrb	r1, [r7, #7]
 8000c54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	485e      	ldr	r0, [pc, #376]	@ (8000dd8 <display_time+0x2c4>)
 8000c5e:	f7ff fc87 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000c62:	e090      	b.n	8000d86 <display_time+0x272>
        case 1:
        case 13:
            addBitmapToNextFrame(HOUR_ONE, red, green, blue, brightness);
 8000c64:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000c68:	79ba      	ldrb	r2, [r7, #6]
 8000c6a:	79f9      	ldrb	r1, [r7, #7]
 8000c6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	4603      	mov	r3, r0
 8000c74:	4859      	ldr	r0, [pc, #356]	@ (8000ddc <display_time+0x2c8>)
 8000c76:	f7ff fc7b 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000c7a:	e084      	b.n	8000d86 <display_time+0x272>
        case 2:
        case 14:
            addBitmapToNextFrame(HOUR_TWO, red, green, blue, brightness);
 8000c7c:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000c80:	79ba      	ldrb	r2, [r7, #6]
 8000c82:	79f9      	ldrb	r1, [r7, #7]
 8000c84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4854      	ldr	r0, [pc, #336]	@ (8000de0 <display_time+0x2cc>)
 8000c8e:	f7ff fc6f 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000c92:	e078      	b.n	8000d86 <display_time+0x272>
        case 3:
        case 15:
            addBitmapToNextFrame(HOUR_THREE, red, green, blue, brightness);
 8000c94:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	79f9      	ldrb	r1, [r7, #7]
 8000c9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	484f      	ldr	r0, [pc, #316]	@ (8000de4 <display_time+0x2d0>)
 8000ca6:	f7ff fc63 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000caa:	e06c      	b.n	8000d86 <display_time+0x272>
        case 4:
        case 16:
            addBitmapToNextFrame(HOUR_FOUR, red, green, blue, brightness);
 8000cac:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000cb0:	79ba      	ldrb	r2, [r7, #6]
 8000cb2:	79f9      	ldrb	r1, [r7, #7]
 8000cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	484a      	ldr	r0, [pc, #296]	@ (8000de8 <display_time+0x2d4>)
 8000cbe:	f7ff fc57 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000cc2:	e060      	b.n	8000d86 <display_time+0x272>
        case 5:
        case 17:
            addBitmapToNextFrame(HOUR_FIVE, red, green, blue, brightness);
 8000cc4:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000cc8:	79ba      	ldrb	r2, [r7, #6]
 8000cca:	79f9      	ldrb	r1, [r7, #7]
 8000ccc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4845      	ldr	r0, [pc, #276]	@ (8000dec <display_time+0x2d8>)
 8000cd6:	f7ff fc4b 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000cda:	e054      	b.n	8000d86 <display_time+0x272>
        case 6:
        case 18:
            addBitmapToNextFrame(HOUR_SIX, red, green, blue, brightness);
 8000cdc:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000ce0:	79ba      	ldrb	r2, [r7, #6]
 8000ce2:	79f9      	ldrb	r1, [r7, #7]
 8000ce4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4603      	mov	r3, r0
 8000cec:	4840      	ldr	r0, [pc, #256]	@ (8000df0 <display_time+0x2dc>)
 8000cee:	f7ff fc3f 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000cf2:	e048      	b.n	8000d86 <display_time+0x272>
        case 7:
        case 19:
            addBitmapToNextFrame(HOUR_SEVEN, red, green, blue, brightness);
 8000cf4:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000cf8:	79ba      	ldrb	r2, [r7, #6]
 8000cfa:	79f9      	ldrb	r1, [r7, #7]
 8000cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4603      	mov	r3, r0
 8000d04:	483b      	ldr	r0, [pc, #236]	@ (8000df4 <display_time+0x2e0>)
 8000d06:	f7ff fc33 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000d0a:	e03c      	b.n	8000d86 <display_time+0x272>
        case 8:
        case 20:
            addBitmapToNextFrame(HOUR_EIGHT, red, green, blue, brightness);
 8000d0c:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000d10:	79ba      	ldrb	r2, [r7, #6]
 8000d12:	79f9      	ldrb	r1, [r7, #7]
 8000d14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4836      	ldr	r0, [pc, #216]	@ (8000df8 <display_time+0x2e4>)
 8000d1e:	f7ff fc27 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000d22:	e030      	b.n	8000d86 <display_time+0x272>
        case 9:
        case 21:
            addBitmapToNextFrame(HOUR_NINE, red, green, blue, brightness);
 8000d24:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000d28:	79ba      	ldrb	r2, [r7, #6]
 8000d2a:	79f9      	ldrb	r1, [r7, #7]
 8000d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	4603      	mov	r3, r0
 8000d34:	4831      	ldr	r0, [pc, #196]	@ (8000dfc <display_time+0x2e8>)
 8000d36:	f7ff fc1b 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000d3a:	e024      	b.n	8000d86 <display_time+0x272>
        case 10:
        case 22:
            addBitmapToNextFrame(HOUR_TEN, red, green, blue, brightness);
 8000d3c:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	79f9      	ldrb	r1, [r7, #7]
 8000d44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	482c      	ldr	r0, [pc, #176]	@ (8000e00 <display_time+0x2ec>)
 8000d4e:	f7ff fc0f 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000d52:	e018      	b.n	8000d86 <display_time+0x272>
        case 11:
        case 23:
            addBitmapToNextFrame(HOUR_ELEVEN, red, green, blue, brightness);
 8000d54:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000d58:	79ba      	ldrb	r2, [r7, #6]
 8000d5a:	79f9      	ldrb	r1, [r7, #7]
 8000d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4603      	mov	r3, r0
 8000d64:	4827      	ldr	r0, [pc, #156]	@ (8000e04 <display_time+0x2f0>)
 8000d66:	f7ff fc03 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000d6a:	e00c      	b.n	8000d86 <display_time+0x272>
        case 12:
            addBitmapToNextFrame(HOUR_NOON, red, green, blue, brightness);
 8000d6c:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000d70:	79ba      	ldrb	r2, [r7, #6]
 8000d72:	79f9      	ldrb	r1, [r7, #7]
 8000d74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4822      	ldr	r0, [pc, #136]	@ (8000e08 <display_time+0x2f4>)
 8000d7e:	f7ff fbf7 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000d82:	e000      	b.n	8000d86 <display_time+0x272>
        default:
            // Handle error or invalid hour
            break;
 8000d84:	bf00      	nop
    }

    // Display minute in intervals of five using an array pointing to the bitmaps
    if (minute > 0) {
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	dd14      	ble.n	8000db6 <display_time+0x2a2>
        addBitmapToNextFrame(minuteBitmaps[(minute / 5) - 1], red, green, blue, brightness);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <display_time+0x2b0>)
 8000d90:	fb82 1203 	smull	r1, r2, r2, r3
 8000d94:	1052      	asrs	r2, r2, #1
 8000d96:	17db      	asrs	r3, r3, #31
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e0c <display_time+0x2f8>)
 8000d9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000da2:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000da6:	79ba      	ldrb	r2, [r7, #6]
 8000da8:	79f9      	ldrb	r1, [r7, #7]
 8000daa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	4623      	mov	r3, r4
 8000db2:	f7ff fbdd 	bl	8000570 <addBitmapToNextFrame>
    }
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	080072b6 	.word	0x080072b6
 8000dc4:	66666667 	.word	0x66666667
 8000dc8:	080072d0 	.word	0x080072d0
 8000dcc:	080072ea 	.word	0x080072ea
 8000dd0:	0800736c 	.word	0x0800736c
 8000dd4:	08007386 	.word	0x08007386
 8000dd8:	08007200 	.word	0x08007200
 8000ddc:	080070c8 	.word	0x080070c8
 8000de0:	080070e2 	.word	0x080070e2
 8000de4:	080070fc 	.word	0x080070fc
 8000de8:	08007116 	.word	0x08007116
 8000dec:	08007130 	.word	0x08007130
 8000df0:	0800714a 	.word	0x0800714a
 8000df4:	08007164 	.word	0x08007164
 8000df8:	0800717e 	.word	0x0800717e
 8000dfc:	08007198 	.word	0x08007198
 8000e00:	080071b2 	.word	0x080071b2
 8000e04:	080071cc 	.word	0x080071cc
 8000e08:	080071e6 	.word	0x080071e6
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HsvToRgb>:

RgbColor HsvToRgb(HsvColor hsv)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    RgbColor rgb;
    unsigned char region, remainder, p, q, t;

    if (hsv.s == 0)
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d110      	bne.n	8000e40 <HsvToRgb+0x30>
    {
        rgb.r = hsv.v;
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	733b      	strb	r3, [r7, #12]
        rgb.g = hsv.v;
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	737b      	strb	r3, [r7, #13]
        rgb.b = hsv.v;
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	73bb      	strb	r3, [r7, #14]
        return rgb;
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	f107 020c 	add.w	r2, r7, #12
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	4611      	mov	r1, r2
 8000e36:	8019      	strh	r1, [r3, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	0c12      	lsrs	r2, r2, #16
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e07f      	b.n	8000f40 <HsvToRgb+0x130>
    }

    region = hsv.h / 43;
 8000e40:	793b      	ldrb	r3, [r7, #4]
 8000e42:	4a47      	ldr	r2, [pc, #284]	@ (8000f60 <HsvToRgb+0x150>)
 8000e44:	fba2 2303 	umull	r2, r3, r2, r3
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	75fb      	strb	r3, [r7, #23]
    remainder = (hsv.h - (region * 43)) * 6;
 8000e4c:	793b      	ldrb	r3, [r7, #4]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	f06f 022a 	mvn.w	r2, #42	@ 0x2a
 8000e56:	fb02 f303 	mul.w	r3, r2, r3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	0052      	lsls	r2, r2, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	75bb      	strb	r3, [r7, #22]

    p = (hsv.v * (255 - hsv.s)) >> 8;
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	797b      	ldrb	r3, [r7, #5]
 8000e6e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	121b      	asrs	r3, r3, #8
 8000e78:	757b      	strb	r3, [r7, #21]
    q = (hsv.v * (255 - ((hsv.s * remainder) >> 8))) >> 8;
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	797b      	ldrb	r3, [r7, #5]
 8000e80:	4619      	mov	r1, r3
 8000e82:	7dbb      	ldrb	r3, [r7, #22]
 8000e84:	fb01 f303 	mul.w	r3, r1, r3
 8000e88:	121b      	asrs	r3, r3, #8
 8000e8a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000e8e:	fb02 f303 	mul.w	r3, r2, r3
 8000e92:	121b      	asrs	r3, r3, #8
 8000e94:	753b      	strb	r3, [r7, #20]
    t = (hsv.v * (255 - ((hsv.s * (255 - remainder)) >> 8))) >> 8;
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	797b      	ldrb	r3, [r7, #5]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ea0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000ea4:	fb01 f303 	mul.w	r3, r1, r3
 8000ea8:	121b      	asrs	r3, r3, #8
 8000eaa:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	121b      	asrs	r3, r3, #8
 8000eb4:	74fb      	strb	r3, [r7, #19]

    switch (region)
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d830      	bhi.n	8000f1e <HsvToRgb+0x10e>
 8000ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <HsvToRgb+0xb4>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ed9 	.word	0x08000ed9
 8000ec8:	08000ee7 	.word	0x08000ee7
 8000ecc:	08000ef5 	.word	0x08000ef5
 8000ed0:	08000f03 	.word	0x08000f03
 8000ed4:	08000f11 	.word	0x08000f11
    {
        case 0:
            rgb.r = hsv.v; rgb.g = t; rgb.b = p;
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	733b      	strb	r3, [r7, #12]
 8000edc:	7cfb      	ldrb	r3, [r7, #19]
 8000ede:	737b      	strb	r3, [r7, #13]
 8000ee0:	7d7b      	ldrb	r3, [r7, #21]
 8000ee2:	73bb      	strb	r3, [r7, #14]
            break;
 8000ee4:	e022      	b.n	8000f2c <HsvToRgb+0x11c>
        case 1:
            rgb.r = q; rgb.g = hsv.v; rgb.b = p;
 8000ee6:	7d3b      	ldrb	r3, [r7, #20]
 8000ee8:	733b      	strb	r3, [r7, #12]
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	737b      	strb	r3, [r7, #13]
 8000eee:	7d7b      	ldrb	r3, [r7, #21]
 8000ef0:	73bb      	strb	r3, [r7, #14]
            break;
 8000ef2:	e01b      	b.n	8000f2c <HsvToRgb+0x11c>
        case 2:
            rgb.r = p; rgb.g = hsv.v; rgb.b = t;
 8000ef4:	7d7b      	ldrb	r3, [r7, #21]
 8000ef6:	733b      	strb	r3, [r7, #12]
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	737b      	strb	r3, [r7, #13]
 8000efc:	7cfb      	ldrb	r3, [r7, #19]
 8000efe:	73bb      	strb	r3, [r7, #14]
            break;
 8000f00:	e014      	b.n	8000f2c <HsvToRgb+0x11c>
        case 3:
            rgb.r = p; rgb.g = q; rgb.b = hsv.v;
 8000f02:	7d7b      	ldrb	r3, [r7, #21]
 8000f04:	733b      	strb	r3, [r7, #12]
 8000f06:	7d3b      	ldrb	r3, [r7, #20]
 8000f08:	737b      	strb	r3, [r7, #13]
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	73bb      	strb	r3, [r7, #14]
            break;
 8000f0e:	e00d      	b.n	8000f2c <HsvToRgb+0x11c>
        case 4:
            rgb.r = t; rgb.g = p; rgb.b = hsv.v;
 8000f10:	7cfb      	ldrb	r3, [r7, #19]
 8000f12:	733b      	strb	r3, [r7, #12]
 8000f14:	7d7b      	ldrb	r3, [r7, #21]
 8000f16:	737b      	strb	r3, [r7, #13]
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	73bb      	strb	r3, [r7, #14]
            break;
 8000f1c:	e006      	b.n	8000f2c <HsvToRgb+0x11c>
        default:
            rgb.r = hsv.v; rgb.g = p; rgb.b = q;
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	733b      	strb	r3, [r7, #12]
 8000f22:	7d7b      	ldrb	r3, [r7, #21]
 8000f24:	737b      	strb	r3, [r7, #13]
 8000f26:	7d3b      	ldrb	r3, [r7, #20]
 8000f28:	73bb      	strb	r3, [r7, #14]
            break;
 8000f2a:	bf00      	nop
    }

    return rgb;
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	f107 020c 	add.w	r2, r7, #12
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	4611      	mov	r1, r2
 8000f38:	8019      	strh	r1, [r3, #0]
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	0c12      	lsrs	r2, r2, #16
 8000f3e:	701a      	strb	r2, [r3, #0]
}
 8000f40:	2300      	movs	r3, #0
 8000f42:	7c3a      	ldrb	r2, [r7, #16]
 8000f44:	f362 0307 	bfi	r3, r2, #0, #8
 8000f48:	7c7a      	ldrb	r2, [r7, #17]
 8000f4a:	f362 230f 	bfi	r3, r2, #8, #8
 8000f4e:	7cba      	ldrb	r2, [r7, #18]
 8000f50:	f362 4317 	bfi	r3, r2, #16, #8
 8000f54:	4618      	mov	r0, r3
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	2fa0be83 	.word	0x2fa0be83

08000f64 <clampValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t clampValue(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
    if ((0xFFFF - value) < (maxVal - value)) {
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000f76:	33ff      	adds	r3, #255	@ 0xff
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	1a8a      	subs	r2, r1, r2
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d201      	bcs.n	8000f86 <clampValue+0x22>
  	  return minVal;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	e00c      	b.n	8000fa0 <clampValue+0x3c>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d201      	bcs.n	8000f92 <clampValue+0x2e>
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	e006      	b.n	8000fa0 <clampValue+0x3c>
        if (value > maxVal) return maxVal;
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d901      	bls.n	8000f9e <clampValue+0x3a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	e000      	b.n	8000fa0 <clampValue+0x3c>
        return value;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <switchState>:

bool userSelectingFeature = true; // True when in SELECT state to decide what feature to adjust

void switchState(RTC_DateTypeDef * tDate) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    switch(currentState) {
 8000fb4:	4b83      	ldr	r3, [pc, #524]	@ (80011c4 <switchState+0x218>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	f200 80f9 	bhi.w	80011b2 <switchState+0x206>
 8000fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc8 <switchState+0x1c>)
 8000fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	08000ff1 	.word	0x08000ff1
 8000fcc:	08000ff9 	.word	0x08000ff9
 8000fd0:	08001001 	.word	0x08001001
 8000fd4:	080010a3 	.word	0x080010a3
 8000fd8:	080010d1 	.word	0x080010d1
 8000fdc:	0800118f 	.word	0x0800118f
 8000fe0:	080011ab 	.word	0x080011ab
 8000fe4:	080010ff 	.word	0x080010ff
 8000fe8:	08001135 	.word	0x08001135
 8000fec:	0800116b 	.word	0x0800116b
        case SLEEP:
            currentState = WAKE;
 8000ff0:	4b74      	ldr	r3, [pc, #464]	@ (80011c4 <switchState+0x218>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
            break;
 8000ff6:	e0e0      	b.n	80011ba <switchState+0x20e>
        case WAKE:
            currentState = SELECT;
 8000ff8:	4b72      	ldr	r3, [pc, #456]	@ (80011c4 <switchState+0x218>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	701a      	strb	r2, [r3, #0]

            break;
 8000ffe:	e0dc      	b.n	80011ba <switchState+0x20e>
        case SELECT:
        	switch(counter / sensitivity){
 8001000:	4b71      	ldr	r3, [pc, #452]	@ (80011c8 <switchState+0x21c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b71      	ldr	r3, [pc, #452]	@ (80011cc <switchState+0x220>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	fbb2 f3f3 	udiv	r3, r2, r3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d846      	bhi.n	800109e <switchState+0xf2>
 8001010:	a201      	add	r2, pc, #4	@ (adr r2, 8001018 <switchState+0x6c>)
 8001012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001016:	bf00      	nop
 8001018:	08001029 	.word	0x08001029
 800101c:	08001043 	.word	0x08001043
 8001020:	0800105f 	.word	0x0800105f
 8001024:	0800107f 	.word	0x0800107f
        	case 0:
        		counter = sTime.Hours * sensitivity;
 8001028:	4b69      	ldr	r3, [pc, #420]	@ (80011d0 <switchState+0x224>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b67      	ldr	r3, [pc, #412]	@ (80011cc <switchState+0x220>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	4a64      	ldr	r2, [pc, #400]	@ (80011c8 <switchState+0x21c>)
 8001038:	6013      	str	r3, [r2, #0]
        		currentState = SET_HOURS;
 800103a:	4b62      	ldr	r3, [pc, #392]	@ (80011c4 <switchState+0x218>)
 800103c:	2203      	movs	r2, #3
 800103e:	701a      	strb	r2, [r3, #0]
        		break;
 8001040:	e02e      	b.n	80010a0 <switchState+0xf4>
        	case 1:
        		currentState = SET_COLOR;
 8001042:	4b60      	ldr	r3, [pc, #384]	@ (80011c4 <switchState+0x218>)
 8001044:	2205      	movs	r2, #5
 8001046:	701a      	strb	r2, [r3, #0]
        		counter = color * sensitivity;
 8001048:	4b62      	ldr	r3, [pc, #392]	@ (80011d4 <switchState+0x228>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4b5e      	ldr	r3, [pc, #376]	@ (80011cc <switchState+0x220>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	fb02 f303 	mul.w	r3, r2, r3
 8001058:	4a5b      	ldr	r2, [pc, #364]	@ (80011c8 <switchState+0x21c>)
 800105a:	6013      	str	r3, [r2, #0]
        		break;
 800105c:	e020      	b.n	80010a0 <switchState+0xf4>
        	case 2:
        		currentDateType = ANNIVERSARY_DATE;
 800105e:	4b5e      	ldr	r3, [pc, #376]	@ (80011d8 <switchState+0x22c>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
            	counter = aDate.Month * sensitivity;
 8001064:	4b5d      	ldr	r3, [pc, #372]	@ (80011dc <switchState+0x230>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	461a      	mov	r2, r3
 800106a:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <switchState+0x220>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	4a55      	ldr	r2, [pc, #340]	@ (80011c8 <switchState+0x21c>)
 8001074:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 8001076:	4b53      	ldr	r3, [pc, #332]	@ (80011c4 <switchState+0x218>)
 8001078:	2207      	movs	r2, #7
 800107a:	701a      	strb	r2, [r3, #0]
        		break;
 800107c:	e010      	b.n	80010a0 <switchState+0xf4>
        	case 3:
        		currentDateType = BIRTHDAY_DATE;
 800107e:	4b56      	ldr	r3, [pc, #344]	@ (80011d8 <switchState+0x22c>)
 8001080:	2202      	movs	r2, #2
 8001082:	701a      	strb	r2, [r3, #0]
            	counter = bDate.Month * sensitivity;
 8001084:	4b56      	ldr	r3, [pc, #344]	@ (80011e0 <switchState+0x234>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	461a      	mov	r2, r3
 800108a:	4b50      	ldr	r3, [pc, #320]	@ (80011cc <switchState+0x220>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	4a4d      	ldr	r2, [pc, #308]	@ (80011c8 <switchState+0x21c>)
 8001094:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 8001096:	4b4b      	ldr	r3, [pc, #300]	@ (80011c4 <switchState+0x218>)
 8001098:	2207      	movs	r2, #7
 800109a:	701a      	strb	r2, [r3, #0]
        		break;
 800109c:	e000      	b.n	80010a0 <switchState+0xf4>
        	default:
        		break;
 800109e:	bf00      	nop
        	}
            break;
 80010a0:	e08b      	b.n	80011ba <switchState+0x20e>
        case SET_HOURS:
        	counter = sTime.Minutes * sensitivity;
 80010a2:	4b4b      	ldr	r3, [pc, #300]	@ (80011d0 <switchState+0x224>)
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b48      	ldr	r3, [pc, #288]	@ (80011cc <switchState+0x220>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	4a45      	ldr	r2, [pc, #276]	@ (80011c8 <switchState+0x21c>)
 80010b2:	6013      	str	r3, [r2, #0]

        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80010b4:	2200      	movs	r2, #0
 80010b6:	4946      	ldr	r1, [pc, #280]	@ (80011d0 <switchState+0x224>)
 80010b8:	484a      	ldr	r0, [pc, #296]	@ (80011e4 <switchState+0x238>)
 80010ba:	f002 ff2c 	bl	8003f16 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80010be:	2200      	movs	r2, #0
 80010c0:	4949      	ldr	r1, [pc, #292]	@ (80011e8 <switchState+0x23c>)
 80010c2:	4848      	ldr	r0, [pc, #288]	@ (80011e4 <switchState+0x238>)
 80010c4:	f003 f81f 	bl	8004106 <HAL_RTC_SetDate>
            currentState = SET_MINUTES; // After setting hours, set minutes
 80010c8:	4b3e      	ldr	r3, [pc, #248]	@ (80011c4 <switchState+0x218>)
 80010ca:	2204      	movs	r2, #4
 80010cc:	701a      	strb	r2, [r3, #0]
            break;
 80010ce:	e074      	b.n	80011ba <switchState+0x20e>
        case SET_MINUTES:
        	counter = sDate.Month * sensitivity;
 80010d0:	4b45      	ldr	r3, [pc, #276]	@ (80011e8 <switchState+0x23c>)
 80010d2:	785b      	ldrb	r3, [r3, #1]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b3d      	ldr	r3, [pc, #244]	@ (80011cc <switchState+0x220>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	4a3a      	ldr	r2, [pc, #232]	@ (80011c8 <switchState+0x21c>)
 80010e0:	6013      	str	r3, [r2, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80010e2:	2200      	movs	r2, #0
 80010e4:	493a      	ldr	r1, [pc, #232]	@ (80011d0 <switchState+0x224>)
 80010e6:	483f      	ldr	r0, [pc, #252]	@ (80011e4 <switchState+0x238>)
 80010e8:	f002 ff15 	bl	8003f16 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80010ec:	2200      	movs	r2, #0
 80010ee:	493e      	ldr	r1, [pc, #248]	@ (80011e8 <switchState+0x23c>)
 80010f0:	483c      	ldr	r0, [pc, #240]	@ (80011e4 <switchState+0x238>)
 80010f2:	f003 f808 	bl	8004106 <HAL_RTC_SetDate>
            currentState = SET_MONTH; // Return to SLEEP after setting time
 80010f6:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <switchState+0x218>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	701a      	strb	r2, [r3, #0]
            break;
 80010fc:	e05d      	b.n	80011ba <switchState+0x20e>
        case SET_MONTH:
        	counter = tDate->Date * sensitivity;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	789b      	ldrb	r3, [r3, #2]
 8001102:	461a      	mov	r2, r3
 8001104:	4b31      	ldr	r3, [pc, #196]	@ (80011cc <switchState+0x220>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4a2e      	ldr	r2, [pc, #184]	@ (80011c8 <switchState+0x21c>)
 800110e:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE){
 8001110:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <switchState+0x22c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <switchState+0x180>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001118:	2200      	movs	r2, #0
 800111a:	492d      	ldr	r1, [pc, #180]	@ (80011d0 <switchState+0x224>)
 800111c:	4831      	ldr	r0, [pc, #196]	@ (80011e4 <switchState+0x238>)
 800111e:	f002 fefa 	bl	8003f16 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001122:	2200      	movs	r2, #0
 8001124:	4930      	ldr	r1, [pc, #192]	@ (80011e8 <switchState+0x23c>)
 8001126:	482f      	ldr	r0, [pc, #188]	@ (80011e4 <switchState+0x238>)
 8001128:	f002 ffed 	bl	8004106 <HAL_RTC_SetDate>
        	}

        	currentState = SET_DAY;
 800112c:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <switchState+0x218>)
 800112e:	2208      	movs	r2, #8
 8001130:	701a      	strb	r2, [r3, #0]
        	break;
 8001132:	e042      	b.n	80011ba <switchState+0x20e>
        case SET_DAY:
        	counter = tDate->Year * sensitivity;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	78db      	ldrb	r3, [r3, #3]
 8001138:	461a      	mov	r2, r3
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <switchState+0x220>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <switchState+0x21c>)
 8001144:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE) {
 8001146:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <switchState+0x22c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <switchState+0x1b6>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800114e:	2200      	movs	r2, #0
 8001150:	491f      	ldr	r1, [pc, #124]	@ (80011d0 <switchState+0x224>)
 8001152:	4824      	ldr	r0, [pc, #144]	@ (80011e4 <switchState+0x238>)
 8001154:	f002 fedf 	bl	8003f16 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001158:	2200      	movs	r2, #0
 800115a:	4923      	ldr	r1, [pc, #140]	@ (80011e8 <switchState+0x23c>)
 800115c:	4821      	ldr	r0, [pc, #132]	@ (80011e4 <switchState+0x238>)
 800115e:	f002 ffd2 	bl	8004106 <HAL_RTC_SetDate>
        	}

        	currentState = SET_YEAR;
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <switchState+0x218>)
 8001164:	2209      	movs	r2, #9
 8001166:	701a      	strb	r2, [r3, #0]
        	break;
 8001168:	e027      	b.n	80011ba <switchState+0x20e>
        case SET_YEAR:
        	if(currentDateType == SYSTEM_DATE) {
 800116a:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <switchState+0x22c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <switchState+0x1da>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001172:	2200      	movs	r2, #0
 8001174:	4916      	ldr	r1, [pc, #88]	@ (80011d0 <switchState+0x224>)
 8001176:	481b      	ldr	r0, [pc, #108]	@ (80011e4 <switchState+0x238>)
 8001178:	f002 fecd 	bl	8003f16 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800117c:	2200      	movs	r2, #0
 800117e:	491a      	ldr	r1, [pc, #104]	@ (80011e8 <switchState+0x23c>)
 8001180:	4818      	ldr	r0, [pc, #96]	@ (80011e4 <switchState+0x238>)
 8001182:	f002 ffc0 	bl	8004106 <HAL_RTC_SetDate>
        	}

        	currentState = SLEEP;
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <switchState+0x218>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
        	break;
 800118c:	e015      	b.n	80011ba <switchState+0x20e>
        case SET_COLOR:
        	counter = brightness * sensitivity;
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <switchState+0x240>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <switchState+0x220>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <switchState+0x21c>)
 80011a0:	6013      	str	r3, [r2, #0]
            currentState = SET_BRIGHTNESS; // After color, set brightness
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <switchState+0x218>)
 80011a4:	2206      	movs	r2, #6
 80011a6:	701a      	strb	r2, [r3, #0]
            break;
 80011a8:	e007      	b.n	80011ba <switchState+0x20e>
        case SET_BRIGHTNESS:
            currentState = SLEEP; // Return to SLEEP after setting LED features
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <switchState+0x218>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
            break;
 80011b0:	e003      	b.n	80011ba <switchState+0x20e>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            currentState = SLEEP;
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <switchState+0x218>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
            break;
 80011b8:	bf00      	nop
    }
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000659 	.word	0x20000659
 80011c8:	20000634 	.word	0x20000634
 80011cc:	2000001c 	.word	0x2000001c
 80011d0:	20000638 	.word	0x20000638
 80011d4:	20000658 	.word	0x20000658
 80011d8:	200006dd 	.word	0x200006dd
 80011dc:	20000650 	.word	0x20000650
 80011e0:	20000654 	.word	0x20000654
 80011e4:	20000524 	.word	0x20000524
 80011e8:	2000064c 	.word	0x2000064c
 80011ec:	20000018 	.word	0x20000018

080011f0 <checkButtonPress>:

void checkButtonPress(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 80011f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011fa:	480d      	ldr	r0, [pc, #52]	@ (8001230 <checkButtonPress+0x40>)
 80011fc:	f002 f8c2 	bl	8003384 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <checkButtonPress+0x44>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d106      	bne.n	800121a <checkButtonPress+0x2a>
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <checkButtonPress+0x2a>
        // Button was pressed - perform actions here.
    	stateChangeRequest = true;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <checkButtonPress+0x48>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	e002      	b.n	8001220 <checkButtonPress+0x30>
    } else {
    	stateChangeRequest = false;
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <checkButtonPress+0x48>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <checkButtonPress+0x44>)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	7013      	strb	r3, [r2, #0]
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020400 	.word	0x40020400
 8001234:	20000022 	.word	0x20000022
 8001238:	200006dc 	.word	0x200006dc

0800123c <SetHours>:




void SetHours() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

    counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <SetHours+0x3c>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <SetHours+0x40>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	461a      	mov	r2, r3
 8001254:	2100      	movs	r1, #0
 8001256:	f7ff fe85 	bl	8000f64 <clampValue>
 800125a:	4603      	mov	r3, r0
 800125c:	4a06      	ldr	r2, [pc, #24]	@ (8001278 <SetHours+0x3c>)
 800125e:	6013      	str	r3, [r2, #0]
    sTime.Hours = (uint8_t) (counter / sensitivity);
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SetHours+0x3c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <SetHours+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	fbb2 f3f3 	udiv	r3, r2, r3
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <SetHours+0x44>)
 8001270:	701a      	strb	r2, [r3, #0]

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000634 	.word	0x20000634
 800127c:	2000001c 	.word	0x2000001c
 8001280:	20000638 	.word	0x20000638

08001284 <SetMinutes>:

void SetMinutes() {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 59 * sensitivity); //59 minutes
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <SetMinutes+0x3c>)
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <SetMinutes+0x40>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	461a      	mov	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f7ff fe61 	bl	8000f64 <clampValue>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <SetMinutes+0x3c>)
 80012a6:	6013      	str	r3, [r2, #0]
    sTime.Minutes = (uint8_t) (counter / sensitivity);
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SetMinutes+0x3c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <SetMinutes+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <SetMinutes+0x44>)
 80012b8:	705a      	strb	r2, [r3, #1]

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000634 	.word	0x20000634
 80012c4:	2000001c 	.word	0x2000001c
 80012c8:	20000638 	.word	0x20000638

080012cc <SetMonth>:

uint8_t SetMonth(RTC_DateTypeDef * tDate) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 12 * sensitivity); //12 months
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <SetMonth+0x50>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <SetMonth+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	461a      	mov	r2, r3
 80012e6:	2100      	movs	r1, #0
 80012e8:	f7ff fe3c 	bl	8000f64 <clampValue>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <SetMonth+0x50>)
 80012f0:	6013      	str	r3, [r2, #0]
    tDate->Month = (uint8_t) (counter / sensitivity);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <SetMonth+0x50>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <SetMonth+0x54>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	705a      	strb	r2, [r3, #1]

    return (uint8_t) (counter / sensitivity);
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <SetMonth+0x50>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SetMonth+0x54>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	b2db      	uxtb	r3, r3
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000634 	.word	0x20000634
 8001320:	2000001c 	.word	0x2000001c

08001324 <SetDay>:

uint8_t SetDay(RTC_DateTypeDef * tDate) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 31 * sensitivity); //31 days
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <SetDay+0x4c>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <SetDay+0x50>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4613      	mov	r3, r2
 8001336:	015b      	lsls	r3, r3, #5
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	461a      	mov	r2, r3
 800133c:	2100      	movs	r1, #0
 800133e:	f7ff fe11 	bl	8000f64 <clampValue>
 8001342:	4603      	mov	r3, r0
 8001344:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <SetDay+0x4c>)
 8001346:	6013      	str	r3, [r2, #0]
    //FIXME: user could enter February 31 which is wrong
    tDate->Date = (uint8_t) (counter / sensitivity);
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <SetDay+0x4c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <SetDay+0x50>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	709a      	strb	r2, [r3, #2]

    return (uint8_t) (counter / sensitivity);
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <SetDay+0x4c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <SetDay+0x50>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	b2db      	uxtb	r3, r3
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000634 	.word	0x20000634
 8001374:	2000001c 	.word	0x2000001c

08001378 <SetYear>:

uint8_t SetYear(RTC_DateTypeDef * tDate) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 3000 * sensitivity); //12 months
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <SetYear+0x50>)
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <SetYear+0x54>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	461a      	mov	r2, r3
 8001392:	2100      	movs	r1, #0
 8001394:	f7ff fde6 	bl	8000f64 <clampValue>
 8001398:	4603      	mov	r3, r0
 800139a:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <SetYear+0x50>)
 800139c:	6013      	str	r3, [r2, #0]
    tDate->Year = (uint8_t) (counter / sensitivity);
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <SetYear+0x50>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <SetYear+0x54>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	70da      	strb	r2, [r3, #3]

    return (uint8_t) (counter / sensitivity);
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <SetYear+0x50>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SetYear+0x54>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	b2db      	uxtb	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000634 	.word	0x20000634
 80013cc:	2000001c 	.word	0x2000001c

080013d0 <SetColor>:

void SetColor() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <SetColor+0x34>)
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <SetColor+0x38>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	461a      	mov	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	f7ff fdbf 	bl	8000f64 <clampValue>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a06      	ldr	r2, [pc, #24]	@ (8001404 <SetColor+0x34>)
 80013ea:	6013      	str	r3, [r2, #0]
    color = (uint8_t) (counter / sensitivity);
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SetColor+0x34>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SetColor+0x38>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b04      	ldr	r3, [pc, #16]	@ (800140c <SetColor+0x3c>)
 80013fc:	701a      	strb	r2, [r3, #0]


}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000634 	.word	0x20000634
 8001408:	2000001c 	.word	0x2000001c
 800140c:	20000658 	.word	0x20000658

08001410 <SetBrightness>:


void SetBrightness() {
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <SetBrightness+0x3c>)
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <SetBrightness+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	2264      	movs	r2, #100	@ 0x64
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	461a      	mov	r2, r3
 8001426:	2101      	movs	r1, #1
 8001428:	f7ff fd9c 	bl	8000f64 <clampValue>
 800142c:	4603      	mov	r3, r0
 800142e:	4a07      	ldr	r2, [pc, #28]	@ (800144c <SetBrightness+0x3c>)
 8001430:	6013      	str	r3, [r2, #0]
    brightness = (uint8_t) (counter / (sensitivity / 2));
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <SetBrightness+0x3c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <SetBrightness+0x40>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <SetBrightness+0x44>)
 8001444:	701a      	strb	r2, [r3, #0]

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000634 	.word	0x20000634
 8001450:	2000001c 	.word	0x2000001c
 8001454:	20000018 	.word	0x20000018

08001458 <Select>:

void Select() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 3 * sensitivity);
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <Select+0x24>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <Select+0x28>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	461a      	mov	r2, r3
 800146c:	2100      	movs	r1, #0
 800146e:	f7ff fd79 	bl	8000f64 <clampValue>
 8001472:	4603      	mov	r3, r0
 8001474:	4a01      	ldr	r2, [pc, #4]	@ (800147c <Select+0x24>)
 8001476:	6013      	str	r3, [r2, #0]

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000634 	.word	0x20000634
 8001480:	2000001c 	.word	0x2000001c

08001484 <Wake>:

void Wake() {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 1);
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <Wake+0x30>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fd67 	bl	8000f64 <clampValue>
 8001496:	4603      	mov	r3, r0
 8001498:	4a06      	ldr	r2, [pc, #24]	@ (80014b4 <Wake+0x30>)
 800149a:	6013      	str	r3, [r2, #0]
	//counter = 0 -> isSet
	//counter = 1 -> isNotSet
	isSet = !counter;
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <Wake+0x30>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <Wake+0x34>)
 80014ac:	701a      	strb	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000634 	.word	0x20000634
 80014b8:	20000020 	.word	0x20000020

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c2:	f001 f8a1 	bl	8002608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c6:	f000 f923 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ca:	f000 faf9 	bl	8001ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ce:	f000 fad7 	bl	8001a80 <MX_DMA_Init>
  MX_TIM1_Init();
 80014d2:	f000 f9e1 	bl	8001898 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014d6:	f000 fa7f 	bl	80019d8 <MX_TIM3_Init>
  MX_RTC_Init();
 80014da:	f000 f983 	bl	80017e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 80014de:	213c      	movs	r1, #60	@ 0x3c
 80014e0:	487d      	ldr	r0, [pc, #500]	@ (80016d8 <main+0x21c>)
 80014e2:	f003 fb65 	bl	8004bb0 <HAL_TIM_Encoder_Start>

  // get time and get date must both be called
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80014e6:	2200      	movs	r2, #0
 80014e8:	497c      	ldr	r1, [pc, #496]	@ (80016dc <main+0x220>)
 80014ea:	487d      	ldr	r0, [pc, #500]	@ (80016e0 <main+0x224>)
 80014ec:	f002 fdad 	bl	800404a <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014f0:	2200      	movs	r2, #0
 80014f2:	497c      	ldr	r1, [pc, #496]	@ (80016e4 <main+0x228>)
 80014f4:	487a      	ldr	r0, [pc, #488]	@ (80016e0 <main+0x224>)
 80014f6:	f002 fe8a 	bl	800420e <HAL_RTC_GetDate>
  display_time(sTime.Hours, sTime.Minutes, 5, 5, 5, 5);
 80014fa:	4b78      	ldr	r3, [pc, #480]	@ (80016dc <main+0x220>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	4b76      	ldr	r3, [pc, #472]	@ (80016dc <main+0x220>)
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	4619      	mov	r1, r3
 8001506:	2305      	movs	r3, #5
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	2305      	movs	r3, #5
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2305      	movs	r3, #5
 8001510:	2205      	movs	r2, #5
 8001512:	f7ff faff 	bl	8000b14 <display_time>
  advanceFrame();
 8001516:	f7ff f953 	bl	80007c0 <advanceFrame>
  flickerInEffect();
 800151a:	f7ff fa29 	bl	8000970 <flickerInEffect>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	counter = __HAL_TIM_GET_COUNTER(&htim3);
 800151e:	4b6e      	ldr	r3, [pc, #440]	@ (80016d8 <main+0x21c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	4a70      	ldr	r2, [pc, #448]	@ (80016e8 <main+0x22c>)
 8001526:	6013      	str	r3, [r2, #0]

	checkButtonPress();
 8001528:	f7ff fe62 	bl	80011f0 <checkButtonPress>
	if(stateChangeRequest){
 800152c:	4b6f      	ldr	r3, [pc, #444]	@ (80016ec <main+0x230>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01e      	beq.n	8001572 <main+0xb6>
		switchState((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001534:	4b6e      	ldr	r3, [pc, #440]	@ (80016f0 <main+0x234>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <main+0x90>
 800153c:	4b6c      	ldr	r3, [pc, #432]	@ (80016f0 <main+0x234>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d101      	bne.n	8001548 <main+0x8c>
 8001544:	4b6b      	ldr	r3, [pc, #428]	@ (80016f4 <main+0x238>)
 8001546:	e002      	b.n	800154e <main+0x92>
 8001548:	4b6b      	ldr	r3, [pc, #428]	@ (80016f8 <main+0x23c>)
 800154a:	e000      	b.n	800154e <main+0x92>
 800154c:	4b65      	ldr	r3, [pc, #404]	@ (80016e4 <main+0x228>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fd2c 	bl	8000fac <switchState>
		stateChangeRequest = !stateChangeRequest;
 8001554:	4b65      	ldr	r3, [pc, #404]	@ (80016ec <main+0x230>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f083 0301 	eor.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b5f      	ldr	r3, [pc, #380]	@ (80016ec <main+0x230>)
 8001570:	701a      	strb	r2, [r3, #0]
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001572:	2200      	movs	r2, #0
 8001574:	4959      	ldr	r1, [pc, #356]	@ (80016dc <main+0x220>)
 8001576:	485a      	ldr	r0, [pc, #360]	@ (80016e0 <main+0x224>)
 8001578:	f002 fd67 	bl	800404a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800157c:	2200      	movs	r2, #0
 800157e:	4959      	ldr	r1, [pc, #356]	@ (80016e4 <main+0x228>)
 8001580:	4857      	ldr	r0, [pc, #348]	@ (80016e0 <main+0x224>)
 8001582:	f002 fe44 	bl	800420e <HAL_RTC_GetDate>


	switch(currentState) {
 8001586:	4b5d      	ldr	r3, [pc, #372]	@ (80016fc <main+0x240>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b09      	cmp	r3, #9
 800158e:	d85d      	bhi.n	800164c <main+0x190>
 8001590:	a201      	add	r2, pc, #4	@ (adr r2, 8001598 <main+0xdc>)
 8001592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001596:	bf00      	nop
 8001598:	0800164d 	.word	0x0800164d
 800159c:	080015c1 	.word	0x080015c1
 80015a0:	080015c7 	.word	0x080015c7
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	080015d3 	.word	0x080015d3
 80015ac:	0800163f 	.word	0x0800163f
 80015b0:	08001647 	.word	0x08001647
 80015b4:	080015d9 	.word	0x080015d9
 80015b8:	080015fb 	.word	0x080015fb
 80015bc:	0800161d 	.word	0x0800161d
		case SLEEP:

			break;
		case WAKE:
			Wake();
 80015c0:	f7ff ff60 	bl	8001484 <Wake>
			break;
 80015c4:	e043      	b.n	800164e <main+0x192>
		case SELECT:
			Select();
 80015c6:	f7ff ff47 	bl	8001458 <Select>
			break;
 80015ca:	e040      	b.n	800164e <main+0x192>
		case SET_HOURS:
			SetHours();
 80015cc:	f7ff fe36 	bl	800123c <SetHours>
			break;
 80015d0:	e03d      	b.n	800164e <main+0x192>
		case SET_MINUTES:
			SetMinutes();
 80015d2:	f7ff fe57 	bl	8001284 <SetMinutes>
			break;
 80015d6:	e03a      	b.n	800164e <main+0x192>
		case SET_MONTH:
			SetMonth((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 80015d8:	4b45      	ldr	r3, [pc, #276]	@ (80016f0 <main+0x234>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <main+0x134>
 80015e0:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <main+0x234>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d101      	bne.n	80015ec <main+0x130>
 80015e8:	4b42      	ldr	r3, [pc, #264]	@ (80016f4 <main+0x238>)
 80015ea:	e002      	b.n	80015f2 <main+0x136>
 80015ec:	4b42      	ldr	r3, [pc, #264]	@ (80016f8 <main+0x23c>)
 80015ee:	e000      	b.n	80015f2 <main+0x136>
 80015f0:	4b3c      	ldr	r3, [pc, #240]	@ (80016e4 <main+0x228>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe6a 	bl	80012cc <SetMonth>
			break;
 80015f8:	e029      	b.n	800164e <main+0x192>
		case SET_DAY:
			SetDay((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 80015fa:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <main+0x234>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <main+0x156>
 8001602:	4b3b      	ldr	r3, [pc, #236]	@ (80016f0 <main+0x234>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d101      	bne.n	800160e <main+0x152>
 800160a:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <main+0x238>)
 800160c:	e002      	b.n	8001614 <main+0x158>
 800160e:	4b3a      	ldr	r3, [pc, #232]	@ (80016f8 <main+0x23c>)
 8001610:	e000      	b.n	8001614 <main+0x158>
 8001612:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <main+0x228>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe85 	bl	8001324 <SetDay>
			break;
 800161a:	e018      	b.n	800164e <main+0x192>
		case SET_YEAR:
			SetYear((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 800161c:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <main+0x234>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <main+0x178>
 8001624:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <main+0x234>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d101      	bne.n	8001630 <main+0x174>
 800162c:	4b31      	ldr	r3, [pc, #196]	@ (80016f4 <main+0x238>)
 800162e:	e002      	b.n	8001636 <main+0x17a>
 8001630:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <main+0x23c>)
 8001632:	e000      	b.n	8001636 <main+0x17a>
 8001634:	4b2b      	ldr	r3, [pc, #172]	@ (80016e4 <main+0x228>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe9e 	bl	8001378 <SetYear>
			break;
 800163c:	e007      	b.n	800164e <main+0x192>
		case SET_COLOR:
			SetColor(&sDate);
 800163e:	4829      	ldr	r0, [pc, #164]	@ (80016e4 <main+0x228>)
 8001640:	f7ff fec6 	bl	80013d0 <SetColor>
			break;
 8001644:	e003      	b.n	800164e <main+0x192>
		case SET_BRIGHTNESS:
			SetBrightness();
 8001646:	f7ff fee3 	bl	8001410 <SetBrightness>
			break;
 800164a:	e000      	b.n	800164e <main+0x192>
		default:
			break;
 800164c:	bf00      	nop
	}

	 snprintf(displayStr, sizeof(displayStr), "%02d:%02d", sTime.Hours, sTime.Minutes);
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <main+0x220>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <main+0x220>)
 8001656:	785b      	ldrb	r3, [r3, #1]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4613      	mov	r3, r2
 800165c:	4a28      	ldr	r2, [pc, #160]	@ (8001700 <main+0x244>)
 800165e:	2180      	movs	r1, #128	@ 0x80
 8001660:	4828      	ldr	r0, [pc, #160]	@ (8001704 <main+0x248>)
 8001662:	f004 fc45 	bl	8005ef0 <sniprintf>
	__HAL_TIM_SET_COUNTER(&htim3, counter);
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <main+0x21c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1f      	ldr	r2, [pc, #124]	@ (80016e8 <main+0x22c>)
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24
	Segment_Display(displayStr);
 8001670:	4824      	ldr	r0, [pc, #144]	@ (8001704 <main+0x248>)
 8001672:	f000 fe03 	bl	800227c <Segment_Display>

	setAnniversary(5);
 8001676:	2005      	movs	r0, #5
 8001678:	f7ff fa02 	bl	8000a80 <setAnniversary>

	if((sTime.Minutes % 5 == 0 && sTime.Minutes != previousMinutes)) {
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <main+0x220>)
 800167e:	785a      	ldrb	r2, [r3, #1]
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <main+0x24c>)
 8001682:	fba3 1302 	umull	r1, r3, r3, r2
 8001686:	0899      	lsrs	r1, r3, #2
 8001688:	460b      	mov	r3, r1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	f47f af43 	bne.w	800151e <main+0x62>
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <main+0x220>)
 800169a:	785a      	ldrb	r2, [r3, #1]
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <main+0x250>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f43f af3c 	beq.w	800151e <main+0x62>
		flickerOutEffect();
 80016a6:	f7ff f8d7 	bl	8000858 <flickerOutEffect>

		display_time(sTime.Hours, sTime.Minutes, 5, 5, 5, 5);
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <main+0x220>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <main+0x220>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	4619      	mov	r1, r3
 80016b6:	2305      	movs	r3, #5
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2305      	movs	r3, #5
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2305      	movs	r3, #5
 80016c0:	2205      	movs	r2, #5
 80016c2:	f7ff fa27 	bl	8000b14 <display_time>
		advanceFrame();
 80016c6:	f7ff f87b 	bl	80007c0 <advanceFrame>

		flickerInEffect();
 80016ca:	f7ff f951 	bl	8000970 <flickerInEffect>
		previousMinutes = sTime.Minutes;
 80016ce:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <main+0x220>)
 80016d0:	785a      	ldrb	r2, [r3, #1]
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <main+0x250>)
 80016d4:	701a      	strb	r2, [r3, #0]
	counter = __HAL_TIM_GET_COUNTER(&htim3);
 80016d6:	e722      	b.n	800151e <main+0x62>
 80016d8:	2000058c 	.word	0x2000058c
 80016dc:	20000638 	.word	0x20000638
 80016e0:	20000524 	.word	0x20000524
 80016e4:	2000064c 	.word	0x2000064c
 80016e8:	20000634 	.word	0x20000634
 80016ec:	200006dc 	.word	0x200006dc
 80016f0:	200006dd 	.word	0x200006dd
 80016f4:	20000654 	.word	0x20000654
 80016f8:	20000650 	.word	0x20000650
 80016fc:	20000659 	.word	0x20000659
 8001700:	080070bc 	.word	0x080070bc
 8001704:	2000065c 	.word	0x2000065c
 8001708:	cccccccd 	.word	0xcccccccd
 800170c:	20000021 	.word	0x20000021

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b094      	sub	sp, #80	@ 0x50
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	2230      	movs	r2, #48	@ 0x30
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f004 fc5d 	bl	8005fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	4b28      	ldr	r3, [pc, #160]	@ (80017dc <SystemClock_Config+0xcc>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	4a27      	ldr	r2, [pc, #156]	@ (80017dc <SystemClock_Config+0xcc>)
 800173e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001742:	6413      	str	r3, [r2, #64]	@ 0x40
 8001744:	4b25      	ldr	r3, [pc, #148]	@ (80017dc <SystemClock_Config+0xcc>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <SystemClock_Config+0xd0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <SystemClock_Config+0xd0>)
 800175a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <SystemClock_Config+0xd0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800176c:	2305      	movs	r3, #5
 800176e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001776:	2301      	movs	r3, #1
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001784:	230c      	movs	r3, #12
 8001786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001788:	2348      	movs	r3, #72	@ 0x48
 800178a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178c:	2302      	movs	r3, #2
 800178e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001790:	2304      	movs	r3, #4
 8001792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fe25 	bl	80033e8 <HAL_RCC_OscConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017a4:	f000 fa10 	bl	8001bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a8:	230f      	movs	r3, #15
 80017aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ac:	2302      	movs	r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2102      	movs	r1, #2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 f887 	bl	80038d8 <HAL_RCC_ClockConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017d0:	f000 f9fa 	bl	8001bc8 <Error_Handler>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3750      	adds	r7, #80	@ 0x50
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000

080017e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017f8:	2300      	movs	r3, #0
 80017fa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017fc:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <MX_RTC_Init+0xac>)
 80017fe:	4a25      	ldr	r2, [pc, #148]	@ (8001894 <MX_RTC_Init+0xb0>)
 8001800:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <MX_RTC_Init+0xac>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001808:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <MX_RTC_Init+0xac>)
 800180a:	227f      	movs	r2, #127	@ 0x7f
 800180c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <MX_RTC_Init+0xac>)
 8001810:	22ff      	movs	r2, #255	@ 0xff
 8001812:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <MX_RTC_Init+0xac>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <MX_RTC_Init+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <MX_RTC_Init+0xac>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001826:	481a      	ldr	r0, [pc, #104]	@ (8001890 <MX_RTC_Init+0xac>)
 8001828:	f002 faf2 	bl	8003e10 <HAL_RTC_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001832:	f000 f9c9 	bl	8001bc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 8001836:	2303      	movs	r3, #3
 8001838:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 800183a:	2359      	movs	r3, #89	@ 0x59
 800183c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 800183e:	2330      	movs	r3, #48	@ 0x30
 8001840:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2201      	movs	r2, #1
 800184e:	4619      	mov	r1, r3
 8001850:	480f      	ldr	r0, [pc, #60]	@ (8001890 <MX_RTC_Init+0xac>)
 8001852:	f002 fb60 	bl	8003f16 <HAL_RTC_SetTime>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800185c:	f000 f9b4 	bl	8001bc8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001860:	2301      	movs	r3, #1
 8001862:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001864:	2301      	movs	r3, #1
 8001866:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001868:	2301      	movs	r3, #1
 800186a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800186c:	2300      	movs	r3, #0
 800186e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	2201      	movs	r2, #1
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	@ (8001890 <MX_RTC_Init+0xac>)
 8001878:	f002 fc45 	bl	8004106 <HAL_RTC_SetDate>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001882:	f000 f9a1 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000524 	.word	0x20000524
 8001894:	40002800 	.word	0x40002800

08001898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b096      	sub	sp, #88	@ 0x58
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2220      	movs	r2, #32
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fb84 	bl	8005fde <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d6:	4b3e      	ldr	r3, [pc, #248]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80018d8:	4a3e      	ldr	r2, [pc, #248]	@ (80019d4 <MX_TIM1_Init+0x13c>)
 80018da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018dc:	4b3c      	ldr	r3, [pc, #240]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b3b      	ldr	r3, [pc, #236]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80018e8:	4b39      	ldr	r3, [pc, #228]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80018ea:	2259      	movs	r2, #89	@ 0x59
 80018ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f4:	4b36      	ldr	r3, [pc, #216]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001900:	4833      	ldr	r0, [pc, #204]	@ (80019d0 <MX_TIM1_Init+0x138>)
 8001902:	f002 fd91 	bl	8004428 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800190c:	f000 f95c 	bl	8001bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001914:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001916:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800191a:	4619      	mov	r1, r3
 800191c:	482c      	ldr	r0, [pc, #176]	@ (80019d0 <MX_TIM1_Init+0x138>)
 800191e:	f003 fb87 	bl	8005030 <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001928:	f000 f94e 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800192c:	4828      	ldr	r0, [pc, #160]	@ (80019d0 <MX_TIM1_Init+0x138>)
 800192e:	f002 fdca 	bl	80044c6 <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001938:	f000 f946 	bl	8001bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001944:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001948:	4619      	mov	r1, r3
 800194a:	4821      	ldr	r0, [pc, #132]	@ (80019d0 <MX_TIM1_Init+0x138>)
 800194c:	f004 f81c 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001956:	f000 f937 	bl	8001bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	@ 0x60
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197a:	2200      	movs	r2, #0
 800197c:	4619      	mov	r1, r3
 800197e:	4814      	ldr	r0, [pc, #80]	@ (80019d0 <MX_TIM1_Init+0x138>)
 8001980:	f003 fa94 	bl	8004eac <HAL_TIM_PWM_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800198a:	f000 f91d 	bl	8001bc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80019b2:	f004 f857 	bl	8005a64 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80019bc:	f000 f904 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <MX_TIM1_Init+0x138>)
 80019c2:	f000 fa21 	bl	8001e08 <HAL_TIM_MspPostInit>

}
 80019c6:	bf00      	nop
 80019c8:	3758      	adds	r7, #88	@ 0x58
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000544 	.word	0x20000544
 80019d4:	40010000 	.word	0x40010000

080019d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	@ 0x30
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2224      	movs	r2, #36	@ 0x24
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 faf9 	bl	8005fde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f4:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <MX_TIM3_Init+0xa0>)
 80019f6:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <MX_TIM3_Init+0xa4>)
 80019f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <MX_TIM3_Init+0xa0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <MX_TIM3_Init+0xa0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <MX_TIM3_Init+0xa0>)
 8001a08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MX_TIM3_Init+0xa0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MX_TIM3_Init+0xa0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a22:	2301      	movs	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a32:	2301      	movs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <MX_TIM3_Init+0xa0>)
 8001a46:	f003 f80d 	bl	8004a64 <HAL_TIM_Encoder_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a50:	f000 f8ba 	bl	8001bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_TIM3_Init+0xa0>)
 8001a62:	f003 ff91 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a6c:	f000 f8ac 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	@ 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000058c 	.word	0x2000058c
 8001a7c:	40000400 	.word	0x40000400

08001a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_DMA_Init+0x3c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <MX_DMA_Init+0x3c>)
 8001a90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_DMA_Init+0x3c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	2039      	movs	r0, #57	@ 0x39
 8001aa8:	f000 ff1f 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001aac:	2039      	movs	r0, #57	@ 0x39
 8001aae:	f000 ff38 	bl	8002922 <HAL_NVIC_EnableIRQ>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b38      	ldr	r3, [pc, #224]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a37      	ldr	r2, [pc, #220]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b35      	ldr	r3, [pc, #212]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b31      	ldr	r3, [pc, #196]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a30      	ldr	r2, [pc, #192]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a29      	ldr	r2, [pc, #164]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001b46:	2200      	movs	r2, #0
 8001b48:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 8001b4c:	481c      	ldr	r0, [pc, #112]	@ (8001bc0 <MX_GPIO_Init+0x100>)
 8001b4e:	f001 fc31 	bl	80033b4 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001b52:	2200      	movs	r2, #0
 8001b54:	f241 4107 	movw	r1, #5127	@ 0x1407
 8001b58:	481a      	ldr	r0, [pc, #104]	@ (8001bc4 <MX_GPIO_Init+0x104>)
 8001b5a:	f001 fc2b 	bl	80033b4 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001b5e:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8001b62:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	4812      	ldr	r0, [pc, #72]	@ (8001bc0 <MX_GPIO_Init+0x100>)
 8001b78:	f001 fa80 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001b7c:	f241 4307 	movw	r3, #5127	@ 0x1407
 8001b80:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	480b      	ldr	r0, [pc, #44]	@ (8001bc4 <MX_GPIO_Init+0x104>)
 8001b96:	f001 fa71 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_GPIO_Init+0x104>)
 8001bb0:	f001 fa64 	bl	800307c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	@ 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400

08001bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bcc:	b672      	cpsid	i
}
 8001bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <Error_Handler+0x8>

08001bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <HAL_MspInit+0x90>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	4a20      	ldr	r2, [pc, #128]	@ (8001c64 <HAL_MspInit+0x90>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bea:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <HAL_MspInit+0x90>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <HAL_MspInit+0x90>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a19      	ldr	r2, [pc, #100]	@ (8001c64 <HAL_MspInit+0x90>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <HAL_MspInit+0x90>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2101      	movs	r1, #1
 8001c16:	f06f 000b 	mvn.w	r0, #11
 8001c1a:	f000 fe66 	bl	80028ea <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2102      	movs	r1, #2
 8001c22:	f06f 000a 	mvn.w	r0, #10
 8001c26:	f000 fe60 	bl	80028ea <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	f06f 0009 	mvn.w	r0, #9
 8001c32:	f000 fe5a 	bl	80028ea <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2104      	movs	r1, #4
 8001c3a:	f06f 0004 	mvn.w	r0, #4
 8001c3e:	f000 fe54 	bl	80028ea <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	f06f 0003 	mvn.w	r0, #3
 8001c4a:	f000 fe4e 	bl	80028ea <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2106      	movs	r1, #6
 8001c52:	f06f 0001 	mvn.w	r0, #1
 8001c56:	f000 fe48 	bl	80028ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <HAL_RTC_MspInit+0x50>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d111      	bne.n	8001cb0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c94:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 ffc8 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ca6:	f7ff ff8f 	bl	8001bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <HAL_RTC_MspInit+0x54>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40002800 	.word	0x40002800
 8001cbc:	42470e3c 	.word	0x42470e3c

08001cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a22      	ldr	r2, [pc, #136]	@ (8001d58 <HAL_TIM_Base_MspInit+0x98>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d13d      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <HAL_TIM_Base_MspInit+0x9c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a20      	ldr	r2, [pc, #128]	@ (8001d5c <HAL_TIM_Base_MspInit+0x9c>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_TIM_Base_MspInit+0x9c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d64 <HAL_TIM_Base_MspInit+0xa4>)
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001cf6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001cfa:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001cfe:	2240      	movs	r2, #64	@ 0x40
 8001d00:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d16:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d1e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d32:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d34:	f000 fe10 	bl	8002958 <HAL_DMA_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001d3e:	f7ff ff43 	bl	8001bc8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d48:	4a05      	ldr	r2, [pc, #20]	@ (8001d60 <HAL_TIM_Base_MspInit+0xa0>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	200005d4 	.word	0x200005d4
 8001d64:	40026428 	.word	0x40026428

08001d68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x94>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d133      	bne.n	8001df2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a1b      	ldr	r2, [pc, #108]	@ (8001e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_TIM_Encoder_MspInit+0x98>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dc2:	2330      	movs	r3, #48	@ 0x30
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4809      	ldr	r0, [pc, #36]	@ (8001e04 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001dde:	f001 f94d 	bl	800307c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2109      	movs	r1, #9
 8001de6:	201d      	movs	r0, #29
 8001de8:	f000 fd7f 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dec:	201d      	movs	r0, #29
 8001dee:	f000 fd98 	bl	8002922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	@ 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020400 	.word	0x40020400

08001e08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <HAL_TIM_MspPostInit+0x68>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d11e      	bne.n	8001e68 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_TIM_MspPostInit+0x6c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a10      	ldr	r2, [pc, #64]	@ (8001e74 <HAL_TIM_MspPostInit+0x6c>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <HAL_TIM_MspPostInit+0x6c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4619      	mov	r1, r3
 8001e62:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <HAL_TIM_MspPostInit+0x70>)
 8001e64:	f001 f90a 	bl	800307c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <NMI_Handler+0x4>

08001e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <MemManage_Handler+0x4>

08001e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed2:	f000 fbeb 	bl	80026ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <TIM3_IRQHandler+0x10>)
 8001ee2:	f002 fef3 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000058c 	.word	0x2000058c

08001ef0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <DMA2_Stream1_IRQHandler+0x10>)
 8001ef6:	f000 fe57 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200005d4 	.word	0x200005d4

08001f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return 1;
 8001f08:	2301      	movs	r3, #1
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_kill>:

int _kill(int pid, int sig)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f1e:	f004 f8bf 	bl	80060a0 <__errno>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2216      	movs	r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
  return -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_exit>:

void _exit (int status)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe7 	bl	8001f14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f46:	bf00      	nop
 8001f48:	e7fd      	b.n	8001f46 <_exit+0x12>

08001f4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e00a      	b.n	8001f72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f5c:	f3af 8000 	nop.w
 8001f60:	4601      	mov	r1, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	60ba      	str	r2, [r7, #8]
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbf0      	blt.n	8001f5c <_read+0x12>
  }

  return len;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e009      	b.n	8001faa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	dbf1      	blt.n	8001f96 <_write+0x12>
  }
  return len;
 8001fb2:	687b      	ldr	r3, [r7, #4]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_close>:

int _close(int file)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fe4:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_isatty>:

int _isatty(int file)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200a:	b480      	push	{r7}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800202c:	4a14      	ldr	r2, [pc, #80]	@ (8002080 <_sbrk+0x5c>)
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <_sbrk+0x60>)
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002038:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <_sbrk+0x64>)
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <_sbrk+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	429a      	cmp	r2, r3
 8002052:	d207      	bcs.n	8002064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002054:	f004 f824 	bl	80060a0 <__errno>
 8002058:	4603      	mov	r3, r0
 800205a:	220c      	movs	r2, #12
 800205c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	e009      	b.n	8002078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002064:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <_sbrk+0x64>)
 8002074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20020000 	.word	0x20020000
 8002084:	00010000 	.word	0x00010000
 8002088:	200006e0 	.word	0x200006e0
 800208c:	20002370 	.word	0x20002370

08002090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <SystemInit+0x20>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <SystemInit+0x20>)
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b8:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ba:	490e      	ldr	r1, [pc, #56]	@ (80020f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020bc:	4a0e      	ldr	r2, [pc, #56]	@ (80020f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	@ (80020fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d0:	4c0b      	ldr	r4, [pc, #44]	@ (8002100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020de:	f7ff ffd7 	bl	8002090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f003 ffe3 	bl	80060ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff f9e9 	bl	80014bc <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80020f8:	080074dc 	.word	0x080074dc
  ldr r2, =_sbss
 80020fc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002100:	2000236c 	.word	0x2000236c

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>
	...

08002108 <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	2104      	movs	r1, #4
 8002126:	4830      	ldr	r0, [pc, #192]	@ (80021e8 <setSegments+0xe0>)
 8002128:	f001 f944 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	2101      	movs	r1, #1
 8002140:	4829      	ldr	r0, [pc, #164]	@ (80021e8 <setSegments+0xe0>)
 8002142:	f001 f937 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	2108      	movs	r1, #8
 800215a:	4823      	ldr	r0, [pc, #140]	@ (80021e8 <setSegments+0xe0>)
 800215c:	f001 f92a 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	2104      	movs	r1, #4
 8002174:	481d      	ldr	r0, [pc, #116]	@ (80021ec <setSegments+0xe4>)
 8002176:	f001 f91d 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	2101      	movs	r1, #1
 800218e:	4817      	ldr	r0, [pc, #92]	@ (80021ec <setSegments+0xe4>)
 8002190:	f001 f910 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	2110      	movs	r1, #16
 80021a8:	480f      	ldr	r0, [pc, #60]	@ (80021e8 <setSegments+0xe0>)
 80021aa:	f001 f903 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	2102      	movs	r1, #2
 80021c2:	4809      	ldr	r0, [pc, #36]	@ (80021e8 <setSegments+0xe0>)
 80021c4:	f001 f8f6 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	09db      	lsrs	r3, r3, #7
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	2140      	movs	r1, #64	@ 0x40
 80021d8:	4803      	ldr	r0, [pc, #12]	@ (80021e8 <setSegments+0xe0>)
 80021da:	f001 f8eb 	bl	80033b4 <HAL_GPIO_WritePin>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400

080021f0 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800220c:	4819      	ldr	r0, [pc, #100]	@ (8002274 <activateDigit+0x84>)
 800220e:	f001 f8d1 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b02      	cmp	r3, #2
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002224:	4813      	ldr	r0, [pc, #76]	@ (8002274 <activateDigit+0x84>)
 8002226:	f001 f8c5 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b03      	cmp	r3, #3
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	480f      	ldr	r0, [pc, #60]	@ (8002278 <activateDigit+0x88>)
 800223c:	f001 f8ba 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	2120      	movs	r1, #32
 8002250:	4809      	ldr	r0, [pc, #36]	@ (8002278 <activateDigit+0x88>)
 8002252:	f001 f8af 	bl	80033b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	2b05      	cmp	r3, #5
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	2102      	movs	r1, #2
 8002266:	4803      	ldr	r0, [pc, #12]	@ (8002274 <activateDigit+0x84>)
 8002268:	f001 f8a4 	bl	80033b4 <HAL_GPIO_WritePin>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40020400 	.word	0x40020400
 8002278:	40020000 	.word	0x40020000

0800227c <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	2204      	movs	r2, #4
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 feae 	bl	8005fee <strncpy>
    truncatedInput[4] = '\0';
 8002292:	2300      	movs	r3, #0
 8002294:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e1ab      	b.n	80025f4 <Segment_Display+0x378>
        activateDigit(i + 1);
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	3301      	adds	r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ffa4 	bl	80021f0 <activateDigit>

		char ch = truncatedInput[i];
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3310      	adds	r3, #16
 80022ac:	443b      	add	r3, r7
 80022ae:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80022b2:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 80022b4:	7bbb      	ldrb	r3, [r7, #14]
 80022b6:	2b7a      	cmp	r3, #122	@ 0x7a
 80022b8:	f200 8192 	bhi.w	80025e0 <Segment_Display+0x364>
 80022bc:	a201      	add	r2, pc, #4	@ (adr r2, 80022c4 <Segment_Display+0x48>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080025ff 	.word	0x080025ff
 80022c8:	080025e1 	.word	0x080025e1
 80022cc:	080025e1 	.word	0x080025e1
 80022d0:	080025e1 	.word	0x080025e1
 80022d4:	080025e1 	.word	0x080025e1
 80022d8:	080025e1 	.word	0x080025e1
 80022dc:	080025e1 	.word	0x080025e1
 80022e0:	080025e1 	.word	0x080025e1
 80022e4:	080025e1 	.word	0x080025e1
 80022e8:	080025e1 	.word	0x080025e1
 80022ec:	080025e1 	.word	0x080025e1
 80022f0:	080025e1 	.word	0x080025e1
 80022f4:	080025e1 	.word	0x080025e1
 80022f8:	080025e1 	.word	0x080025e1
 80022fc:	080025e1 	.word	0x080025e1
 8002300:	080025e1 	.word	0x080025e1
 8002304:	080025e1 	.word	0x080025e1
 8002308:	080025e1 	.word	0x080025e1
 800230c:	080025e1 	.word	0x080025e1
 8002310:	080025e1 	.word	0x080025e1
 8002314:	080025e1 	.word	0x080025e1
 8002318:	080025e1 	.word	0x080025e1
 800231c:	080025e1 	.word	0x080025e1
 8002320:	080025e1 	.word	0x080025e1
 8002324:	080025e1 	.word	0x080025e1
 8002328:	080025e1 	.word	0x080025e1
 800232c:	080025e1 	.word	0x080025e1
 8002330:	080025e1 	.word	0x080025e1
 8002334:	080025e1 	.word	0x080025e1
 8002338:	080025e1 	.word	0x080025e1
 800233c:	080025e1 	.word	0x080025e1
 8002340:	080025e1 	.word	0x080025e1
 8002344:	080025d1 	.word	0x080025d1
 8002348:	080025e1 	.word	0x080025e1
 800234c:	080025e1 	.word	0x080025e1
 8002350:	080025e1 	.word	0x080025e1
 8002354:	080025e1 	.word	0x080025e1
 8002358:	080025e1 	.word	0x080025e1
 800235c:	080025e1 	.word	0x080025e1
 8002360:	080025e1 	.word	0x080025e1
 8002364:	080025e1 	.word	0x080025e1
 8002368:	080025e1 	.word	0x080025e1
 800236c:	080025e1 	.word	0x080025e1
 8002370:	080025e1 	.word	0x080025e1
 8002374:	080025e1 	.word	0x080025e1
 8002378:	080025d9 	.word	0x080025d9
 800237c:	080025e1 	.word	0x080025e1
 8002380:	080025e1 	.word	0x080025e1
 8002384:	080024b1 	.word	0x080024b1
 8002388:	080024b9 	.word	0x080024b9
 800238c:	080024c1 	.word	0x080024c1
 8002390:	080024c9 	.word	0x080024c9
 8002394:	080024d1 	.word	0x080024d1
 8002398:	080024d9 	.word	0x080024d9
 800239c:	080024e1 	.word	0x080024e1
 80023a0:	080024e9 	.word	0x080024e9
 80023a4:	080024f1 	.word	0x080024f1
 80023a8:	080024f9 	.word	0x080024f9
 80023ac:	080025e1 	.word	0x080025e1
 80023b0:	080025e1 	.word	0x080025e1
 80023b4:	080025e1 	.word	0x080025e1
 80023b8:	080025e1 	.word	0x080025e1
 80023bc:	080025e1 	.word	0x080025e1
 80023c0:	080025e1 	.word	0x080025e1
 80023c4:	080025e1 	.word	0x080025e1
 80023c8:	08002501 	.word	0x08002501
 80023cc:	08002509 	.word	0x08002509
 80023d0:	08002511 	.word	0x08002511
 80023d4:	08002519 	.word	0x08002519
 80023d8:	08002521 	.word	0x08002521
 80023dc:	08002529 	.word	0x08002529
 80023e0:	08002531 	.word	0x08002531
 80023e4:	08002539 	.word	0x08002539
 80023e8:	08002541 	.word	0x08002541
 80023ec:	08002549 	.word	0x08002549
 80023f0:	08002551 	.word	0x08002551
 80023f4:	08002559 	.word	0x08002559
 80023f8:	08002561 	.word	0x08002561
 80023fc:	08002569 	.word	0x08002569
 8002400:	08002571 	.word	0x08002571
 8002404:	08002579 	.word	0x08002579
 8002408:	08002581 	.word	0x08002581
 800240c:	08002589 	.word	0x08002589
 8002410:	08002591 	.word	0x08002591
 8002414:	08002599 	.word	0x08002599
 8002418:	080025a1 	.word	0x080025a1
 800241c:	080025a9 	.word	0x080025a9
 8002420:	080025b1 	.word	0x080025b1
 8002424:	080025b9 	.word	0x080025b9
 8002428:	080025c1 	.word	0x080025c1
 800242c:	080025c9 	.word	0x080025c9
 8002430:	080025e1 	.word	0x080025e1
 8002434:	080025e1 	.word	0x080025e1
 8002438:	080025e1 	.word	0x080025e1
 800243c:	080025e1 	.word	0x080025e1
 8002440:	080025e1 	.word	0x080025e1
 8002444:	080025e1 	.word	0x080025e1
 8002448:	08002501 	.word	0x08002501
 800244c:	08002509 	.word	0x08002509
 8002450:	08002511 	.word	0x08002511
 8002454:	08002519 	.word	0x08002519
 8002458:	08002521 	.word	0x08002521
 800245c:	08002529 	.word	0x08002529
 8002460:	08002531 	.word	0x08002531
 8002464:	08002539 	.word	0x08002539
 8002468:	08002541 	.word	0x08002541
 800246c:	08002549 	.word	0x08002549
 8002470:	08002551 	.word	0x08002551
 8002474:	08002559 	.word	0x08002559
 8002478:	08002561 	.word	0x08002561
 800247c:	08002569 	.word	0x08002569
 8002480:	08002571 	.word	0x08002571
 8002484:	08002579 	.word	0x08002579
 8002488:	08002581 	.word	0x08002581
 800248c:	08002589 	.word	0x08002589
 8002490:	08002591 	.word	0x08002591
 8002494:	08002599 	.word	0x08002599
 8002498:	080025a1 	.word	0x080025a1
 800249c:	080025a9 	.word	0x080025a9
 80024a0:	080025b1 	.word	0x080025b1
 80024a4:	080025b9 	.word	0x080025b9
 80024a8:	080025c1 	.word	0x080025c1
 80024ac:	080025c9 	.word	0x080025c9
        	case '\0':
        		return;
            case '0':
                setSegments(0x3F);
 80024b0:	203f      	movs	r0, #63	@ 0x3f
 80024b2:	f7ff fe29 	bl	8002108 <setSegments>
                break;
 80024b6:	e097      	b.n	80025e8 <Segment_Display+0x36c>
            case '1':
                setSegments(0x06);
 80024b8:	2006      	movs	r0, #6
 80024ba:	f7ff fe25 	bl	8002108 <setSegments>
                break;
 80024be:	e093      	b.n	80025e8 <Segment_Display+0x36c>
            case '2':
                setSegments(0x5B);
 80024c0:	205b      	movs	r0, #91	@ 0x5b
 80024c2:	f7ff fe21 	bl	8002108 <setSegments>
                break;
 80024c6:	e08f      	b.n	80025e8 <Segment_Display+0x36c>
            case '3':
                setSegments(0x4F);
 80024c8:	204f      	movs	r0, #79	@ 0x4f
 80024ca:	f7ff fe1d 	bl	8002108 <setSegments>
                break;
 80024ce:	e08b      	b.n	80025e8 <Segment_Display+0x36c>
            case '4':
                setSegments(0x66);
 80024d0:	2066      	movs	r0, #102	@ 0x66
 80024d2:	f7ff fe19 	bl	8002108 <setSegments>
                break;
 80024d6:	e087      	b.n	80025e8 <Segment_Display+0x36c>
            case '5':
                setSegments(0x6D);
 80024d8:	206d      	movs	r0, #109	@ 0x6d
 80024da:	f7ff fe15 	bl	8002108 <setSegments>
                break;
 80024de:	e083      	b.n	80025e8 <Segment_Display+0x36c>
            case '6':
                setSegments(0x7D);
 80024e0:	207d      	movs	r0, #125	@ 0x7d
 80024e2:	f7ff fe11 	bl	8002108 <setSegments>
                break;
 80024e6:	e07f      	b.n	80025e8 <Segment_Display+0x36c>
            case '7':
                setSegments(0x07);
 80024e8:	2007      	movs	r0, #7
 80024ea:	f7ff fe0d 	bl	8002108 <setSegments>
                break;
 80024ee:	e07b      	b.n	80025e8 <Segment_Display+0x36c>
            case '8':
                setSegments(0x7F);
 80024f0:	207f      	movs	r0, #127	@ 0x7f
 80024f2:	f7ff fe09 	bl	8002108 <setSegments>
                break;
 80024f6:	e077      	b.n	80025e8 <Segment_Display+0x36c>
            case '9':
                setSegments(0x6F);
 80024f8:	206f      	movs	r0, #111	@ 0x6f
 80024fa:	f7ff fe05 	bl	8002108 <setSegments>
                break;
 80024fe:	e073      	b.n	80025e8 <Segment_Display+0x36c>
            case 'a':
            case 'A':
                setSegments(0x77);
 8002500:	2077      	movs	r0, #119	@ 0x77
 8002502:	f7ff fe01 	bl	8002108 <setSegments>
                break;
 8002506:	e06f      	b.n	80025e8 <Segment_Display+0x36c>
            case 'b':
            case 'B':
                setSegments(0x7C);
 8002508:	207c      	movs	r0, #124	@ 0x7c
 800250a:	f7ff fdfd 	bl	8002108 <setSegments>
                break;
 800250e:	e06b      	b.n	80025e8 <Segment_Display+0x36c>
            case 'c':
            case 'C':
                setSegments(0x39);
 8002510:	2039      	movs	r0, #57	@ 0x39
 8002512:	f7ff fdf9 	bl	8002108 <setSegments>
                break;
 8002516:	e067      	b.n	80025e8 <Segment_Display+0x36c>
            case 'd':
            case 'D':
                setSegments(0x5E);
 8002518:	205e      	movs	r0, #94	@ 0x5e
 800251a:	f7ff fdf5 	bl	8002108 <setSegments>
                break;
 800251e:	e063      	b.n	80025e8 <Segment_Display+0x36c>
            case 'e':
            case 'E':
                setSegments(0x79);
 8002520:	2079      	movs	r0, #121	@ 0x79
 8002522:	f7ff fdf1 	bl	8002108 <setSegments>
                break;
 8002526:	e05f      	b.n	80025e8 <Segment_Display+0x36c>
            case 'f':
            case 'F':
                setSegments(0x71);
 8002528:	2071      	movs	r0, #113	@ 0x71
 800252a:	f7ff fded 	bl	8002108 <setSegments>
                break;
 800252e:	e05b      	b.n	80025e8 <Segment_Display+0x36c>
            case 'g':
            case 'G':
                setSegments(0x3D);
 8002530:	203d      	movs	r0, #61	@ 0x3d
 8002532:	f7ff fde9 	bl	8002108 <setSegments>
                break;
 8002536:	e057      	b.n	80025e8 <Segment_Display+0x36c>
            case 'h':
            case 'H':
                setSegments(0x76);
 8002538:	2076      	movs	r0, #118	@ 0x76
 800253a:	f7ff fde5 	bl	8002108 <setSegments>
                break;
 800253e:	e053      	b.n	80025e8 <Segment_Display+0x36c>
            case 'i':
            case 'I':
                setSegments(0x30);
 8002540:	2030      	movs	r0, #48	@ 0x30
 8002542:	f7ff fde1 	bl	8002108 <setSegments>
                break;
 8002546:	e04f      	b.n	80025e8 <Segment_Display+0x36c>
            case 'j':
            case 'J':
                setSegments(0x1E);
 8002548:	201e      	movs	r0, #30
 800254a:	f7ff fddd 	bl	8002108 <setSegments>
                break;
 800254e:	e04b      	b.n	80025e8 <Segment_Display+0x36c>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 8002550:	2076      	movs	r0, #118	@ 0x76
 8002552:	f7ff fdd9 	bl	8002108 <setSegments>
                break;
 8002556:	e047      	b.n	80025e8 <Segment_Display+0x36c>
            case 'l':
            case 'L':
                setSegments(0x38);
 8002558:	2038      	movs	r0, #56	@ 0x38
 800255a:	f7ff fdd5 	bl	8002108 <setSegments>
                break;
 800255e:	e043      	b.n	80025e8 <Segment_Display+0x36c>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 8002560:	2037      	movs	r0, #55	@ 0x37
 8002562:	f7ff fdd1 	bl	8002108 <setSegments>
                break;
 8002566:	e03f      	b.n	80025e8 <Segment_Display+0x36c>
            case 'n':
            case 'N':
                setSegments(0x54);
 8002568:	2054      	movs	r0, #84	@ 0x54
 800256a:	f7ff fdcd 	bl	8002108 <setSegments>
                break;
 800256e:	e03b      	b.n	80025e8 <Segment_Display+0x36c>
            case 'o':
            case 'O':
                setSegments(0x3F);
 8002570:	203f      	movs	r0, #63	@ 0x3f
 8002572:	f7ff fdc9 	bl	8002108 <setSegments>
                break;
 8002576:	e037      	b.n	80025e8 <Segment_Display+0x36c>
            case 'p':
            case 'P':
                setSegments(0x73);
 8002578:	2073      	movs	r0, #115	@ 0x73
 800257a:	f7ff fdc5 	bl	8002108 <setSegments>
                break;
 800257e:	e033      	b.n	80025e8 <Segment_Display+0x36c>
            case 'q':
            case 'Q':
                setSegments(0x67);
 8002580:	2067      	movs	r0, #103	@ 0x67
 8002582:	f7ff fdc1 	bl	8002108 <setSegments>
                break;
 8002586:	e02f      	b.n	80025e8 <Segment_Display+0x36c>
            case 'r':
            case 'R':
                setSegments(0x50);
 8002588:	2050      	movs	r0, #80	@ 0x50
 800258a:	f7ff fdbd 	bl	8002108 <setSegments>
                break;
 800258e:	e02b      	b.n	80025e8 <Segment_Display+0x36c>
            case 's':
            case 'S':
                setSegments(0x6D);
 8002590:	206d      	movs	r0, #109	@ 0x6d
 8002592:	f7ff fdb9 	bl	8002108 <setSegments>
                break;
 8002596:	e027      	b.n	80025e8 <Segment_Display+0x36c>
            case 't':
            case 'T':
                setSegments(0x78);
 8002598:	2078      	movs	r0, #120	@ 0x78
 800259a:	f7ff fdb5 	bl	8002108 <setSegments>
                break;
 800259e:	e023      	b.n	80025e8 <Segment_Display+0x36c>
            case 'u':
            case 'U':
                setSegments(0x3E);
 80025a0:	203e      	movs	r0, #62	@ 0x3e
 80025a2:	f7ff fdb1 	bl	8002108 <setSegments>
                break;
 80025a6:	e01f      	b.n	80025e8 <Segment_Display+0x36c>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 80025a8:	203e      	movs	r0, #62	@ 0x3e
 80025aa:	f7ff fdad 	bl	8002108 <setSegments>
                break;
 80025ae:	e01b      	b.n	80025e8 <Segment_Display+0x36c>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 80025b0:	202a      	movs	r0, #42	@ 0x2a
 80025b2:	f7ff fda9 	bl	8002108 <setSegments>
                break;
 80025b6:	e017      	b.n	80025e8 <Segment_Display+0x36c>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 80025b8:	2076      	movs	r0, #118	@ 0x76
 80025ba:	f7ff fda5 	bl	8002108 <setSegments>
                break;
 80025be:	e013      	b.n	80025e8 <Segment_Display+0x36c>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 80025c0:	206e      	movs	r0, #110	@ 0x6e
 80025c2:	f7ff fda1 	bl	8002108 <setSegments>
                break;
 80025c6:	e00f      	b.n	80025e8 <Segment_Display+0x36c>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 80025c8:	205b      	movs	r0, #91	@ 0x5b
 80025ca:	f7ff fd9d 	bl	8002108 <setSegments>
                break;
 80025ce:	e00b      	b.n	80025e8 <Segment_Display+0x36c>
            case ' ':
                // Blank character
                setSegments(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7ff fd99 	bl	8002108 <setSegments>
                break;
 80025d6:	e007      	b.n	80025e8 <Segment_Display+0x36c>
            case '-':
            	setSegments(0x04);
 80025d8:	2004      	movs	r0, #4
 80025da:	f7ff fd95 	bl	8002108 <setSegments>
            	break;
 80025de:	e003      	b.n	80025e8 <Segment_Display+0x36c>
            default:
            	setSegments(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff fd91 	bl	8002108 <setSegments>
                break;
 80025e6:	bf00      	nop
        }
        HAL_Delay(5);
 80025e8:	2005      	movs	r0, #5
 80025ea:	f000 f87f 	bl	80026ec <HAL_Delay>
    for(uint8_t i = 0; i < 4; i++) {
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	3301      	adds	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	f67f ae50 	bls.w	800229c <Segment_Display+0x20>
 80025fc:	e000      	b.n	8002600 <Segment_Display+0x384>
        		return;
 80025fe:	bf00      	nop
    }
}
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop

08002608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800260c:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <HAL_Init+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0d      	ldr	r2, [pc, #52]	@ (8002648 <HAL_Init+0x40>)
 8002612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_Init+0x40>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <HAL_Init+0x40>)
 800261e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_Init+0x40>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a07      	ldr	r2, [pc, #28]	@ (8002648 <HAL_Init+0x40>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f000 f94f 	bl	80028d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002636:	200f      	movs	r0, #15
 8002638:	f000 f808 	bl	800264c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263c:	f7ff faca 	bl	8001bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00

0800264c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_InitTick+0x54>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <HAL_InitTick+0x58>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4619      	mov	r1, r3
 800265e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002662:	fbb3 f3f1 	udiv	r3, r3, r1
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f967 	bl	800293e <HAL_SYSTICK_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e00e      	b.n	8002698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d80a      	bhi.n	8002696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002680:	2200      	movs	r2, #0
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f000 f92f 	bl	80028ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800268c:	4a06      	ldr	r2, [pc, #24]	@ (80026a8 <HAL_InitTick+0x5c>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000024 	.word	0x20000024
 80026a4:	2000002c 	.word	0x2000002c
 80026a8:	20000028 	.word	0x20000028

080026ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_IncTick+0x20>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_IncTick+0x24>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <HAL_IncTick+0x24>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2000002c 	.word	0x2000002c
 80026d0:	200006e4 	.word	0x200006e4

080026d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return uwTick;
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <HAL_GetTick+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	200006e4 	.word	0x200006e4

080026ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff ffee 	bl	80026d4 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d005      	beq.n	8002712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <HAL_Delay+0x44>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002712:	bf00      	nop
 8002714:	f7ff ffde 	bl	80026d4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d8f7      	bhi.n	8002714 <HAL_Delay+0x28>
  {
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000002c 	.word	0x2000002c

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4907      	ldr	r1, [pc, #28]	@ (80027d0 <__NVIC_EnableIRQ+0x38>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	@ (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	@ (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	@ 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028a0:	d301      	bcc.n	80028a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00f      	b.n	80028c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a6:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <SysTick_Config+0x40>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ae:	210f      	movs	r1, #15
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f7ff ff8e 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <SysTick_Config+0x40>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028be:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <SysTick_Config+0x40>)
 80028c0:	2207      	movs	r2, #7
 80028c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff29 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028fc:	f7ff ff3e 	bl	800277c <__NVIC_GetPriorityGrouping>
 8002900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7ff ff8e 	bl	8002828 <NVIC_EncodePriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff5d 	bl	80027d4 <__NVIC_SetPriority>
}
 800291a:	bf00      	nop
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff31 	bl	8002798 <__NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffa2 	bl	8002890 <SysTick_Config>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff feb6 	bl	80026d4 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e099      	b.n	8002aa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002994:	e00f      	b.n	80029b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002996:	f7ff fe9d 	bl	80026d4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d908      	bls.n	80029b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e078      	b.n	8002aa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e8      	bne.n	8002996 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4b38      	ldr	r3, [pc, #224]	@ (8002ab0 <HAL_DMA_Init+0x158>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d107      	bne.n	8002a20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0307 	bic.w	r3, r3, #7
 8002a36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d117      	bne.n	8002a7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fa91 	bl	8002f84 <DMA_CheckFifoParam>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2240      	movs	r2, #64	@ 0x40
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a76:	2301      	movs	r3, #1
 8002a78:	e016      	b.n	8002aa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa48 	bl	8002f18 <DMA_CalcBaseAndBitshift>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	223f      	movs	r2, #63	@ 0x3f
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	f010803f 	.word	0xf010803f

08002ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Start_IT+0x26>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e040      	b.n	8002b5c <HAL_DMA_Start_IT+0xa8>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d12f      	bne.n	8002b4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f9da 	bl	8002ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0c:	223f      	movs	r2, #63	@ 0x3f
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0216 	orr.w	r2, r2, #22
 8002b22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e005      	b.n	8002b5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2280      	movs	r2, #128	@ 0x80
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00c      	b.n	8002b9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2205      	movs	r2, #5
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb4:	4b8e      	ldr	r3, [pc, #568]	@ (8002df0 <HAL_DMA_IRQHandler+0x248>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a8e      	ldr	r2, [pc, #568]	@ (8002df4 <HAL_DMA_IRQHandler+0x24c>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a9b      	lsrs	r3, r3, #10
 8002bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01a      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	2208      	movs	r2, #8
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	2201      	movs	r2, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	2201      	movs	r2, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	2204      	movs	r2, #4
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	2210      	movs	r2, #16
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d043      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d03c      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d024      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	e01f      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e016      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0208 	bic.w	r2, r2, #8
 8002d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 808f 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8087 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	2220      	movs	r2, #32
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d136      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0216 	bic.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_DMA_IRQHandler+0x1da>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0208 	bic.w	r2, r2, #8
 8002d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	223f      	movs	r2, #63	@ 0x3f
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07e      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
        }
        return;
 8002dbe:	e079      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10d      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d031      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e02c      	b.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
 8002dee:	bf00      	nop
 8002df0:	20000024 	.word	0x20000024
 8002df4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
 8002e08:	e01e      	b.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10f      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0210 	bic.w	r2, r2, #16
 8002e26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d032      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2205      	movs	r2, #5
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3301      	adds	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d307      	bcc.n	8002e90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f2      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x2cc>
 8002e8e:	e000      	b.n	8002e92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eb4:	bf00      	nop
    }
  }
}
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b40      	cmp	r3, #64	@ 0x40
 8002ee8:	d108      	bne.n	8002efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002efa:	e007      	b.n	8002f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	3b10      	subs	r3, #16
 8002f28:	4a14      	ldr	r2, [pc, #80]	@ (8002f7c <DMA_CalcBaseAndBitshift+0x64>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f32:	4a13      	ldr	r2, [pc, #76]	@ (8002f80 <DMA_CalcBaseAndBitshift+0x68>)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d909      	bls.n	8002f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f58:	e007      	b.n	8002f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	aaaaaaab 	.word	0xaaaaaaab
 8002f80:	080073e4 	.word	0x080073e4

08002f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11f      	bne.n	8002fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d856      	bhi.n	8003052 <DMA_CheckFifoParam+0xce>
 8002fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fac <DMA_CheckFifoParam+0x28>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fbd 	.word	0x08002fbd
 8002fb0:	08002fcf 	.word	0x08002fcf
 8002fb4:	08002fbd 	.word	0x08002fbd
 8002fb8:	08003053 	.word	0x08003053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d046      	beq.n	8003056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fcc:	e043      	b.n	8003056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fd6:	d140      	bne.n	800305a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e03d      	b.n	800305a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe6:	d121      	bne.n	800302c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d837      	bhi.n	800305e <DMA_CheckFifoParam+0xda>
 8002fee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <DMA_CheckFifoParam+0x70>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	0800300b 	.word	0x0800300b
 8002ffc:	08003005 	.word	0x08003005
 8003000:	0800301d 	.word	0x0800301d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      break;
 8003008:	e030      	b.n	800306c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d025      	beq.n	8003062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301a:	e022      	b.n	8003062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003024:	d11f      	bne.n	8003066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800302a:	e01c      	b.n	8003066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d903      	bls.n	800303a <DMA_CheckFifoParam+0xb6>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d003      	beq.n	8003040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003038:	e018      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
      break;
 800303e:	e015      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e00b      	b.n	800306a <DMA_CheckFifoParam+0xe6>
      break;
 8003052:	bf00      	nop
 8003054:	e00a      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 8003056:	bf00      	nop
 8003058:	e008      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
 800305c:	e006      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800305e:	bf00      	nop
 8003060:	e004      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 8003062:	bf00      	nop
 8003064:	e002      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;   
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800306a:	bf00      	nop
    }
  } 
  
  return status; 
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e159      	b.n	800334c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f040 8148 	bne.w	8003346 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d005      	beq.n	80030ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d130      	bne.n	8003130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0201 	and.w	r2, r3, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b03      	cmp	r3, #3
 800313a:	d017      	beq.n	800316c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d123      	bne.n	80031c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	08da      	lsrs	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a2 	beq.w	8003346 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b57      	ldr	r3, [pc, #348]	@ (8003364 <HAL_GPIO_Init+0x2e8>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	4a56      	ldr	r2, [pc, #344]	@ (8003364 <HAL_GPIO_Init+0x2e8>)
 800320c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003210:	6453      	str	r3, [r2, #68]	@ 0x44
 8003212:	4b54      	ldr	r3, [pc, #336]	@ (8003364 <HAL_GPIO_Init+0x2e8>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800321e:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a49      	ldr	r2, [pc, #292]	@ (800336c <HAL_GPIO_Init+0x2f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d019      	beq.n	800327e <HAL_GPIO_Init+0x202>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a48      	ldr	r2, [pc, #288]	@ (8003370 <HAL_GPIO_Init+0x2f4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_GPIO_Init+0x1fe>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a47      	ldr	r2, [pc, #284]	@ (8003374 <HAL_GPIO_Init+0x2f8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00d      	beq.n	8003276 <HAL_GPIO_Init+0x1fa>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a46      	ldr	r2, [pc, #280]	@ (8003378 <HAL_GPIO_Init+0x2fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <HAL_GPIO_Init+0x1f6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a45      	ldr	r2, [pc, #276]	@ (800337c <HAL_GPIO_Init+0x300>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_GPIO_Init+0x1f2>
 800326a:	2304      	movs	r3, #4
 800326c:	e008      	b.n	8003280 <HAL_GPIO_Init+0x204>
 800326e:	2307      	movs	r3, #7
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x204>
 8003272:	2303      	movs	r3, #3
 8003274:	e004      	b.n	8003280 <HAL_GPIO_Init+0x204>
 8003276:	2302      	movs	r3, #2
 8003278:	e002      	b.n	8003280 <HAL_GPIO_Init+0x204>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_GPIO_Init+0x204>
 800327e:	2300      	movs	r3, #0
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	f002 0203 	and.w	r2, r2, #3
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	4093      	lsls	r3, r2
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003290:	4935      	ldr	r1, [pc, #212]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3302      	adds	r3, #2
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329e:	4b38      	ldr	r3, [pc, #224]	@ (8003380 <HAL_GPIO_Init+0x304>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003380 <HAL_GPIO_Init+0x304>)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003380 <HAL_GPIO_Init+0x304>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032ec:	4a24      	ldr	r2, [pc, #144]	@ (8003380 <HAL_GPIO_Init+0x304>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032f2:	4b23      	ldr	r3, [pc, #140]	@ (8003380 <HAL_GPIO_Init+0x304>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003316:	4a1a      	ldr	r2, [pc, #104]	@ (8003380 <HAL_GPIO_Init+0x304>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800331c:	4b18      	ldr	r3, [pc, #96]	@ (8003380 <HAL_GPIO_Init+0x304>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003340:	4a0f      	ldr	r2, [pc, #60]	@ (8003380 <HAL_GPIO_Init+0x304>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3301      	adds	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	f67f aea2 	bls.w	8003098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3724      	adds	r7, #36	@ 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	40013800 	.word	0x40013800
 800336c:	40020000 	.word	0x40020000
 8003370:	40020400 	.word	0x40020400
 8003374:	40020800 	.word	0x40020800
 8003378:	40020c00 	.word	0x40020c00
 800337c:	40021000 	.word	0x40021000
 8003380:	40013c00 	.word	0x40013c00

08003384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	887b      	ldrh	r3, [r7, #2]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e001      	b.n	80033a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	807b      	strh	r3, [r7, #2]
 80033c0:	4613      	mov	r3, r2
 80033c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c4:	787b      	ldrb	r3, [r7, #1]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ca:	887a      	ldrh	r2, [r7, #2]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033d0:	e003      	b.n	80033da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033d2:	887b      	ldrh	r3, [r7, #2]
 80033d4:	041a      	lsls	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	619a      	str	r2, [r3, #24]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e267      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d075      	beq.n	80034f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003406:	4b88      	ldr	r3, [pc, #544]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b04      	cmp	r3, #4
 8003410:	d00c      	beq.n	800342c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003412:	4b85      	ldr	r3, [pc, #532]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341a:	2b08      	cmp	r3, #8
 800341c:	d112      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b82      	ldr	r3, [pc, #520]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800342a:	d10b      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	4b7e      	ldr	r3, [pc, #504]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x108>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d157      	bne.n	80034f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e242      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344c:	d106      	bne.n	800345c <HAL_RCC_OscConfig+0x74>
 800344e:	4b76      	ldr	r3, [pc, #472]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e01d      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x98>
 8003466:	4b70      	ldr	r3, [pc, #448]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6f      	ldr	r2, [pc, #444]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b6d      	ldr	r3, [pc, #436]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6c      	ldr	r2, [pc, #432]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 8003480:	4b69      	ldr	r3, [pc, #420]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a68      	ldr	r2, [pc, #416]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b66      	ldr	r3, [pc, #408]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a65      	ldr	r2, [pc, #404]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7ff f918 	bl	80026d4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a8:	f7ff f914 	bl	80026d4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	@ 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e207      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0xc0>
 80034c6:	e014      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7ff f904 	bl	80026d4 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d0:	f7ff f900 	bl	80026d4 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	@ 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1f3      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	4b51      	ldr	r3, [pc, #324]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0xe8>
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d063      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350a:	4b47      	ldr	r3, [pc, #284]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003512:	2b08      	cmp	r3, #8
 8003514:	d11c      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b44      	ldr	r3, [pc, #272]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e1c7      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4937      	ldr	r1, [pc, #220]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	e03a      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003558:	4b34      	ldr	r3, [pc, #208]	@ (800362c <HAL_RCC_OscConfig+0x244>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7ff f8b9 	bl	80026d4 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003566:	f7ff f8b5 	bl	80026d4 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e1a8      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	4b2b      	ldr	r3, [pc, #172]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003584:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4925      	ldr	r1, [pc, #148]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
 8003598:	e015      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCC_OscConfig+0x244>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7ff f898 	bl	80026d4 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a8:	f7ff f894 	bl	80026d4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e187      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d036      	beq.n	8003640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035da:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <HAL_RCC_OscConfig+0x248>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7ff f878 	bl	80026d4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e8:	f7ff f874 	bl	80026d4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e167      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x200>
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_RCC_OscConfig+0x248>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7ff f861 	bl	80026d4 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	e00e      	b.n	8003634 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003616:	f7ff f85d 	bl	80026d4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d907      	bls.n	8003634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e150      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003628:	40023800 	.word	0x40023800
 800362c:	42470000 	.word	0x42470000
 8003630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	4b88      	ldr	r3, [pc, #544]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ea      	bne.n	8003616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8097 	beq.w	800377c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b81      	ldr	r3, [pc, #516]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	4b7d      	ldr	r3, [pc, #500]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	4a7c      	ldr	r2, [pc, #496]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366c:	6413      	str	r3, [r2, #64]	@ 0x40
 800366e:	4b7a      	ldr	r3, [pc, #488]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367a:	2301      	movs	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b77      	ldr	r3, [pc, #476]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d118      	bne.n	80036bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368a:	4b74      	ldr	r3, [pc, #464]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a73      	ldr	r2, [pc, #460]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7ff f81d 	bl	80026d4 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7ff f819 	bl	80026d4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e10c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b6a      	ldr	r3, [pc, #424]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2ea>
 80036c4:	4b64      	ldr	r3, [pc, #400]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	4a63      	ldr	r2, [pc, #396]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d0:	e01c      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x30c>
 80036da:	4b5f      	ldr	r3, [pc, #380]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	4a5e      	ldr	r2, [pc, #376]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036f4:	4b58      	ldr	r3, [pc, #352]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f8:	4a57      	ldr	r2, [pc, #348]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003700:	4b55      	ldr	r3, [pc, #340]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a54      	ldr	r2, [pc, #336]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0304 	bic.w	r3, r3, #4
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe ffde 	bl	80026d4 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fe ffda 	bl	80026d4 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0cb      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	4b49      	ldr	r3, [pc, #292]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ee      	beq.n	800371c <HAL_RCC_OscConfig+0x334>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fe ffc8 	bl	80026d4 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	e00a      	b.n	800375e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fe ffc4 	bl	80026d4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0b5      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375e:	4b3e      	ldr	r3, [pc, #248]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ee      	bne.n	8003748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4b39      	ldr	r3, [pc, #228]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	4a38      	ldr	r2, [pc, #224]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800377a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a1 	beq.w	80038c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003786:	4b34      	ldr	r3, [pc, #208]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	d05c      	beq.n	800384c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d141      	bne.n	800381e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b31      	ldr	r3, [pc, #196]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe ff98 	bl	80026d4 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe ff94 	bl	80026d4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e087      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b27      	ldr	r3, [pc, #156]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	3b01      	subs	r3, #1
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	491b      	ldr	r1, [pc, #108]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fe ff6d 	bl	80026d4 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe ff69 	bl	80026d4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e05c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003810:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x416>
 800381c:	e054      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	4b10      	ldr	r3, [pc, #64]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe ff56 	bl	80026d4 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fe ff52 	bl	80026d4 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e045      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x444>
 800384a:	e03d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e038      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000
 8003860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003864:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <HAL_RCC_OscConfig+0x4ec>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d028      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d121      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800389a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800389c:	4293      	cmp	r3, r2
 800389e:	d111      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cc      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b68      	ldr	r3, [pc, #416]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90c      	bls.n	8003914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b65      	ldr	r3, [pc, #404]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800392c:	4b59      	ldr	r3, [pc, #356]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a58      	ldr	r2, [pc, #352]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003944:	4b53      	ldr	r3, [pc, #332]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a52      	ldr	r2, [pc, #328]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800394e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b50      	ldr	r3, [pc, #320]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	494d      	ldr	r1, [pc, #308]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d044      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b47      	ldr	r3, [pc, #284]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d119      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b3f      	ldr	r3, [pc, #252]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e067      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b37      	ldr	r3, [pc, #220]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4934      	ldr	r1, [pc, #208]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fe fe84 	bl	80026d4 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe fe80 	bl	80026d4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d20c      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4916      	ldr	r1, [pc, #88]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4a:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	490e      	ldr	r1, [pc, #56]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5e:	f000 f821 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490a      	ldr	r1, [pc, #40]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	4a09      	ldr	r2, [pc, #36]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fde4 	bl	800264c <HAL_InitTick>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	080073d4 	.word	0x080073d4
 8003a9c:	20000024 	.word	0x20000024
 8003aa0:	20000028 	.word	0x20000028

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b090      	sub	sp, #64	@ 0x40
 8003aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abc:	4b59      	ldr	r3, [pc, #356]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	f200 80a1 	bhi.w	8003c10 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad6:	e09b      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ada:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003adc:	e09b      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ade:	4b53      	ldr	r3, [pc, #332]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ae2:	e098      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aee:	4b4d      	ldr	r3, [pc, #308]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d028      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4b4a      	ldr	r3, [pc, #296]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	2200      	movs	r2, #0
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4b47      	ldr	r3, [pc, #284]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b10:	fb03 f201 	mul.w	r2, r3, r1
 8003b14:	2300      	movs	r3, #0
 8003b16:	fb00 f303 	mul.w	r3, r0, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a43      	ldr	r2, [pc, #268]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b24:	460a      	mov	r2, r1
 8003b26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b2a:	4413      	add	r3, r2
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	2200      	movs	r2, #0
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	61fa      	str	r2, [r7, #28]
 8003b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b3e:	f7fc fb9f 	bl	8000280 <__aeabi_uldivmod>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4613      	mov	r3, r2
 8003b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b4a:	e053      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4c:	4b35      	ldr	r3, [pc, #212]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	2200      	movs	r2, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	617a      	str	r2, [r7, #20]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b5e:	f04f 0b00 	mov.w	fp, #0
 8003b62:	4652      	mov	r2, sl
 8003b64:	465b      	mov	r3, fp
 8003b66:	f04f 0000 	mov.w	r0, #0
 8003b6a:	f04f 0100 	mov.w	r1, #0
 8003b6e:	0159      	lsls	r1, r3, #5
 8003b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b74:	0150      	lsls	r0, r2, #5
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b7e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b96:	ebb2 0408 	subs.w	r4, r2, r8
 8003b9a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	00eb      	lsls	r3, r5, #3
 8003ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bac:	00e2      	lsls	r2, r4, #3
 8003bae:	4614      	mov	r4, r2
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	eb14 030a 	adds.w	r3, r4, sl
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	eb45 030b 	adc.w	r3, r5, fp
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	028b      	lsls	r3, r1, #10
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	028a      	lsls	r2, r1, #10
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bde:	2200      	movs	r2, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	60fa      	str	r2, [r7, #12]
 8003be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be8:	f7fc fb4a 	bl	8000280 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3740      	adds	r7, #64	@ 0x40
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	016e3600 	.word	0x016e3600

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d038      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c58:	4b68      	ldr	r3, [pc, #416]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c5e:	f7fe fd39 	bl	80026d4 <HAL_GetTick>
 8003c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c66:	f7fe fd35 	bl	80026d4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e0bd      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c78:	4b61      	ldr	r3, [pc, #388]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	019b      	lsls	r3, r3, #6
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	495a      	ldr	r1, [pc, #360]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c9e:	4b57      	ldr	r3, [pc, #348]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ca4:	f7fe fd16 	bl	80026d4 <HAL_GetTick>
 8003ca8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cac:	f7fe fd12 	bl	80026d4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e09a      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cbe:	4b50      	ldr	r3, [pc, #320]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8083 	beq.w	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	4b48      	ldr	r3, [pc, #288]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	4a47      	ldr	r2, [pc, #284]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ce8:	4b45      	ldr	r3, [pc, #276]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cf4:	4b43      	ldr	r3, [pc, #268]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a42      	ldr	r2, [pc, #264]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cfe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fe fce8 	bl	80026d4 <HAL_GetTick>
 8003d04:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d08:	f7fe fce4 	bl	80026d4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e06c      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d26:	4b36      	ldr	r3, [pc, #216]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d2e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02f      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d028      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d44:	4b2e      	ldr	r3, [pc, #184]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d54:	4b2c      	ldr	r3, [pc, #176]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d5a:	4a29      	ldr	r2, [pc, #164]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d60:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d114      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fcb2 	bl	80026d4 <HAL_GetTick>
 8003d70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d72:	e00a      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f7fe fcae 	bl	80026d4 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e034      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0ee      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da2:	d10d      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003da4:	4b16      	ldr	r3, [pc, #88]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db8:	4911      	ldr	r1, [pc, #68]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
 8003dbe:	e005      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003dca:	6093      	str	r3, [r2, #8]
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd8:	4909      	ldr	r1, [pc, #36]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7d1a      	ldrb	r2, [r3, #20]
 8003dee:	4b07      	ldr	r3, [pc, #28]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003df0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	42470068 	.word	0x42470068
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42470e40 	.word	0x42470e40
 8003e0c:	424711e0 	.word	0x424711e0

08003e10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e073      	b.n	8003f0e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	7f5b      	ldrb	r3, [r3, #29]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd ff16 	bl	8001c68 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d055      	beq.n	8003efc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	22ca      	movs	r2, #202	@ 0xca
 8003e56:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2253      	movs	r2, #83	@ 0x53
 8003e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa49 	bl	80042f8 <RTC_EnterInitMode>
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d12c      	bne.n	8003eca <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e82:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6899      	ldr	r1, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68d2      	ldr	r2, [r2, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6919      	ldr	r1, [r3, #16]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	041a      	lsls	r2, r3, #16
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa50 	bl	8004366 <RTC_ExitInitMode>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d110      	bne.n	8003ef2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	22ff      	movs	r2, #255	@ 0xff
 8003ef8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003efa:	e001      	b.n	8003f00 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f16:	b590      	push	{r4, r7, lr}
 8003f18:	b087      	sub	sp, #28
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	7f1b      	ldrb	r3, [r3, #28]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_RTC_SetTime+0x1c>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e087      	b.n	8004042 <HAL_RTC_SetTime+0x12c>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d126      	bne.n	8003f92 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2200      	movs	r2, #0
 8003f56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fa27 	bl	80043b0 <RTC_ByteToBcd2>
 8003f62:	4603      	mov	r3, r0
 8003f64:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fa20 	bl	80043b0 <RTC_ByteToBcd2>
 8003f70:	4603      	mov	r3, r0
 8003f72:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f74:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	789b      	ldrb	r3, [r3, #2]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fa18 	bl	80043b0 <RTC_ByteToBcd2>
 8003f80:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f82:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	78db      	ldrb	r3, [r3, #3]
 8003f8a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e018      	b.n	8003fc4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fb2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fb8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	78db      	ldrb	r3, [r3, #3]
 8003fbe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	22ca      	movs	r2, #202	@ 0xca
 8003fca:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2253      	movs	r2, #83	@ 0x53
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f98f 	bl	80042f8 <RTC_EnterInitMode>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d120      	bne.n	8004026 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003fee:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004002:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6899      	ldr	r1, [r3, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	431a      	orrs	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f9a2 	bl	8004366 <RTC_ExitInitMode>
 8004022:	4603      	mov	r3, r0
 8004024:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	22ff      	movs	r2, #255	@ 0xff
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]

  return status;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
}
 8004042:	4618      	mov	r0, r3
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd90      	pop	{r4, r7, pc}

0800404a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b086      	sub	sp, #24
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800407c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004080:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	0a1b      	lsrs	r3, r3, #8
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	0d9b      	lsrs	r3, r3, #22
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11a      	bne.n	80040fc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f98e 	bl	80043ec <RTC_Bcd2ToByte>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f985 	bl	80043ec <RTC_Bcd2ToByte>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	789b      	ldrb	r3, [r3, #2]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f97c 	bl	80043ec <RTC_Bcd2ToByte>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461a      	mov	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004106:	b590      	push	{r4, r7, lr}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	7f1b      	ldrb	r3, [r3, #28]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_RTC_SetDate+0x1c>
 800411e:	2302      	movs	r3, #2
 8004120:	e071      	b.n	8004206 <HAL_RTC_SetDate+0x100>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2202      	movs	r2, #2
 800412c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10e      	bne.n	8004152 <HAL_RTC_SetDate+0x4c>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	f023 0310 	bic.w	r3, r3, #16
 8004148:	b2db      	uxtb	r3, r3
 800414a:	330a      	adds	r3, #10
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d11c      	bne.n	8004192 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	78db      	ldrb	r3, [r3, #3]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f927 	bl	80043b0 <RTC_ByteToBcd2>
 8004162:	4603      	mov	r3, r0
 8004164:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f920 	bl	80043b0 <RTC_ByteToBcd2>
 8004170:	4603      	mov	r3, r0
 8004172:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004174:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	789b      	ldrb	r3, [r3, #2]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f918 	bl	80043b0 <RTC_ByteToBcd2>
 8004180:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004182:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e00e      	b.n	80041b0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	78db      	ldrb	r3, [r3, #3]
 8004196:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800419e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	22ca      	movs	r2, #202	@ 0xca
 80041b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2253      	movs	r2, #83	@ 0x53
 80041be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f899 	bl	80042f8 <RTC_EnterInitMode>
 80041c6:	4603      	mov	r3, r0
 80041c8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10c      	bne.n	80041ea <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80041de:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f8c0 	bl	8004366 <RTC_ExitInitMode>
 80041e6:	4603      	mov	r3, r0
 80041e8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041ea:	7cfb      	ldrb	r3, [r7, #19]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	22ff      	movs	r2, #255	@ 0xff
 80041fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]

  return status;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
}
 8004206:	4618      	mov	r0, r3
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd90      	pop	{r4, r7, pc}

0800420e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004228:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800422c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	0b5b      	lsrs	r3, r3, #13
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11a      	bne.n	80042a2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	78db      	ldrb	r3, [r3, #3]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f8bb 	bl	80043ec <RTC_Bcd2ToByte>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	785b      	ldrb	r3, [r3, #1]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f8b2 	bl	80043ec <RTC_Bcd2ToByte>
 8004288:	4603      	mov	r3, r0
 800428a:	461a      	mov	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	789b      	ldrb	r3, [r3, #2]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f8a9 	bl	80043ec <RTC_Bcd2ToByte>
 800429a:	4603      	mov	r3, r0
 800429c:	461a      	mov	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a0d      	ldr	r2, [pc, #52]	@ (80042f4 <HAL_RTC_WaitForSynchro+0x48>)
 80042be:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042c0:	f7fe fa08 	bl	80026d4 <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042c6:	e009      	b.n	80042dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042c8:	f7fe fa04 	bl	80026d4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042d6:	d901      	bls.n	80042dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e007      	b.n	80042ec <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ee      	beq.n	80042c8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	00013f5f 	.word	0x00013f5f

080042f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d122      	bne.n	800435c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004324:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004326:	f7fe f9d5 	bl	80026d4 <HAL_GetTick>
 800432a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800432c:	e00c      	b.n	8004348 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800432e:	f7fe f9d1 	bl	80026d4 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800433c:	d904      	bls.n	8004348 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2204      	movs	r2, #4
 8004342:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <RTC_EnterInitMode+0x64>
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d1e8      	bne.n	800432e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004380:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff8b 	bl	80042ac <HAL_RTC_WaitForSynchro>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2204      	movs	r2, #4
 80043a0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80043be:	e005      	b.n	80043cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	3b0a      	subs	r3, #10
 80043ca:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d8f6      	bhi.n	80043c0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	4313      	orrs	r3, r2
 80043de:	b2db      	uxtb	r3, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4413      	add	r3, r2
 800441a:	b2db      	uxtb	r3, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e041      	b.n	80044be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fc36 	bl	8001cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 ffb6 	bl	80053d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e041      	b.n	800455c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d106      	bne.n	80044f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f839 	bl	8004564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f000 ff67 	bl	80053d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e022      	b.n	80045ea <HAL_TIM_PWM_Start_DMA+0x72>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d109      	bne.n	80045be <HAL_TIM_PWM_Start_DMA+0x46>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	bf0c      	ite	eq
 80045b6:	2301      	moveq	r3, #1
 80045b8:	2300      	movne	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e015      	b.n	80045ea <HAL_TIM_PWM_Start_DMA+0x72>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_PWM_Start_DMA+0x60>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e008      	b.n	80045ea <HAL_TIM_PWM_Start_DMA+0x72>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	e15d      	b.n	80048ae <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_TIM_PWM_Start_DMA+0x94>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e022      	b.n	8004652 <HAL_TIM_PWM_Start_DMA+0xda>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d109      	bne.n	8004626 <HAL_TIM_PWM_Start_DMA+0xae>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e015      	b.n	8004652 <HAL_TIM_PWM_Start_DMA+0xda>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start_DMA+0xc8>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e008      	b.n	8004652 <HAL_TIM_PWM_Start_DMA+0xda>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d024      	beq.n	80046a0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_TIM_PWM_Start_DMA+0xea>
 800465c:	887b      	ldrh	r3, [r7, #2]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e123      	b.n	80048ae <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <HAL_TIM_PWM_Start_DMA+0xfe>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004674:	e016      	b.n	80046a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b04      	cmp	r3, #4
 800467a:	d104      	bne.n	8004686 <HAL_TIM_PWM_Start_DMA+0x10e>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004684:	e00e      	b.n	80046a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start_DMA+0x11e>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004694:	e006      	b.n	80046a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800469e:	e001      	b.n	80046a4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e104      	b.n	80048ae <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	f200 80ae 	bhi.w	8004808 <HAL_TIM_PWM_Start_DMA+0x290>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	08004809 	.word	0x08004809
 80046bc:	08004809 	.word	0x08004809
 80046c0:	08004809 	.word	0x08004809
 80046c4:	08004731 	.word	0x08004731
 80046c8:	08004809 	.word	0x08004809
 80046cc:	08004809 	.word	0x08004809
 80046d0:	08004809 	.word	0x08004809
 80046d4:	08004779 	.word	0x08004779
 80046d8:	08004809 	.word	0x08004809
 80046dc:	08004809 	.word	0x08004809
 80046e0:	08004809 	.word	0x08004809
 80046e4:	080047c1 	.word	0x080047c1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	4a72      	ldr	r2, [pc, #456]	@ (80048b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80046ee:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	4a71      	ldr	r2, [pc, #452]	@ (80048bc <HAL_TIM_PWM_Start_DMA+0x344>)
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	4a70      	ldr	r2, [pc, #448]	@ (80048c0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80046fe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3334      	adds	r3, #52	@ 0x34
 800470c:	461a      	mov	r2, r3
 800470e:	887b      	ldrh	r3, [r7, #2]
 8004710:	f7fe f9d0 	bl	8002ab4 <HAL_DMA_Start_IT>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e0c7      	b.n	80048ae <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800472c:	60da      	str	r2, [r3, #12]
      break;
 800472e:	e06e      	b.n	800480e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	4a60      	ldr	r2, [pc, #384]	@ (80048b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004736:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	4a5f      	ldr	r2, [pc, #380]	@ (80048bc <HAL_TIM_PWM_Start_DMA+0x344>)
 800473e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	4a5e      	ldr	r2, [pc, #376]	@ (80048c0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004746:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3338      	adds	r3, #56	@ 0x38
 8004754:	461a      	mov	r2, r3
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	f7fe f9ac 	bl	8002ab4 <HAL_DMA_Start_IT>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0a3      	b.n	80048ae <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004774:	60da      	str	r2, [r3, #12]
      break;
 8004776:	e04a      	b.n	800480e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	4a4e      	ldr	r2, [pc, #312]	@ (80048b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	4a4d      	ldr	r2, [pc, #308]	@ (80048bc <HAL_TIM_PWM_Start_DMA+0x344>)
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	4a4c      	ldr	r2, [pc, #304]	@ (80048c0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800478e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	333c      	adds	r3, #60	@ 0x3c
 800479c:	461a      	mov	r2, r3
 800479e:	887b      	ldrh	r3, [r7, #2]
 80047a0:	f7fe f988 	bl	8002ab4 <HAL_DMA_Start_IT>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07f      	b.n	80048ae <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047bc:	60da      	str	r2, [r3, #12]
      break;
 80047be:	e026      	b.n	800480e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c4:	4a3c      	ldr	r2, [pc, #240]	@ (80048b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80047c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	4a3b      	ldr	r2, [pc, #236]	@ (80048bc <HAL_TIM_PWM_Start_DMA+0x344>)
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	4a3a      	ldr	r2, [pc, #232]	@ (80048c0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80047d6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3340      	adds	r3, #64	@ 0x40
 80047e4:	461a      	mov	r2, r3
 80047e6:	887b      	ldrh	r3, [r7, #2]
 80047e8:	f7fe f964 	bl	8002ab4 <HAL_DMA_Start_IT>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e05b      	b.n	80048ae <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004804:	60da      	str	r2, [r3, #12]
      break;
 8004806:	e002      	b.n	800480e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	75fb      	strb	r3, [r7, #23]
      break;
 800480c:	bf00      	nop
  }

  if (status == HAL_OK)
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d14b      	bne.n	80048ac <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2201      	movs	r2, #1
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f88d 	bl	800593c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a27      	ldr	r2, [pc, #156]	@ (80048c4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d107      	bne.n	800483c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800483a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a20      	ldr	r2, [pc, #128]	@ (80048c4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_TIM_PWM_Start_DMA+0x300>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484e:	d013      	beq.n	8004878 <HAL_TIM_PWM_Start_DMA+0x300>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1c      	ldr	r2, [pc, #112]	@ (80048c8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_PWM_Start_DMA+0x300>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1b      	ldr	r2, [pc, #108]	@ (80048cc <HAL_TIM_PWM_Start_DMA+0x354>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_TIM_PWM_Start_DMA+0x300>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a19      	ldr	r2, [pc, #100]	@ (80048d0 <HAL_TIM_PWM_Start_DMA+0x358>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_PWM_Start_DMA+0x300>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a18      	ldr	r2, [pc, #96]	@ (80048d4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d010      	beq.n	80048ac <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e007      	b.n	80048ac <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	080052c9 	.word	0x080052c9
 80048bc:	08005371 	.word	0x08005371
 80048c0:	08005237 	.word	0x08005237
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40014000 	.word	0x40014000

080048d8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d855      	bhi.n	8004998 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80048ec:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004999 	.word	0x08004999
 80048fc:	08004999 	.word	0x08004999
 8004900:	08004999 	.word	0x08004999
 8004904:	08004945 	.word	0x08004945
 8004908:	08004999 	.word	0x08004999
 800490c:	08004999 	.word	0x08004999
 8004910:	08004999 	.word	0x08004999
 8004914:	08004961 	.word	0x08004961
 8004918:	08004999 	.word	0x08004999
 800491c:	08004999 	.word	0x08004999
 8004920:	08004999 	.word	0x08004999
 8004924:	0800497d 	.word	0x0800497d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004936:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe f911 	bl	8002b64 <HAL_DMA_Abort_IT>
      break;
 8004942:	e02c      	b.n	800499e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004952:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe f903 	bl	8002b64 <HAL_DMA_Abort_IT>
      break;
 800495e:	e01e      	b.n	800499e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800496e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	4618      	mov	r0, r3
 8004976:	f7fe f8f5 	bl	8002b64 <HAL_DMA_Abort_IT>
      break;
 800497a:	e010      	b.n	800499e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800498a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe f8e7 	bl	8002b64 <HAL_DMA_Abort_IT>
      break;
 8004996:	e002      	b.n	800499e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      break;
 800499c:	bf00      	nop
  }

  if (status == HAL_OK)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d157      	bne.n	8004a54 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2200      	movs	r2, #0
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 ffc5 	bl	800593c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a60 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d117      	bne.n	80049ec <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a1a      	ldr	r2, [r3, #32]
 80049c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10f      	bne.n	80049ec <HAL_TIM_PWM_Stop_DMA+0x114>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6a1a      	ldr	r2, [r3, #32]
 80049d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <HAL_TIM_PWM_Stop_DMA+0x114>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6a1a      	ldr	r2, [r3, #32]
 80049f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10f      	bne.n	8004a1c <HAL_TIM_PWM_Stop_DMA+0x144>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6a1a      	ldr	r2, [r3, #32]
 8004a02:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_PWM_Stop_DMA+0x144>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0201 	bic.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <HAL_TIM_PWM_Stop_DMA+0x154>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a2a:	e013      	b.n	8004a54 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d104      	bne.n	8004a3c <HAL_TIM_PWM_Stop_DMA+0x164>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a3a:	e00b      	b.n	8004a54 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d104      	bne.n	8004a4c <HAL_TIM_PWM_Stop_DMA+0x174>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a4a:	e003      	b.n	8004a54 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40010000 	.word	0x40010000

08004a64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e097      	b.n	8004ba8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fd f96b 	bl	8001d68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aa8:	f023 0307 	bic.w	r3, r3, #7
 8004aac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f000 fc8d 	bl	80053d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	4313      	orrs	r3, r2
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b04:	f023 030c 	bic.w	r3, r3, #12
 8004b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	4313      	orrs	r3, r2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	011a      	lsls	r2, r3, #4
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	031b      	lsls	r3, r3, #12
 8004b34:	4313      	orrs	r3, r2
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	4313      	orrs	r3, r2
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004bd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d110      	bne.n	8004c02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d102      	bne.n	8004bec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004be6:	7b7b      	ldrb	r3, [r7, #13]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d001      	beq.n	8004bf0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e069      	b.n	8004cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c00:	e031      	b.n	8004c66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d110      	bne.n	8004c2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c08:	7bbb      	ldrb	r3, [r7, #14]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d102      	bne.n	8004c14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c0e:	7b3b      	ldrb	r3, [r7, #12]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e055      	b.n	8004cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c28:	e01d      	b.n	8004c66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d108      	bne.n	8004c42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c30:	7bbb      	ldrb	r3, [r7, #14]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c36:	7b7b      	ldrb	r3, [r7, #13]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d102      	bne.n	8004c42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c3c:	7b3b      	ldrb	r3, [r7, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e03e      	b.n	8004cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2202      	movs	r2, #2
 8004c52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_TIM_Encoder_Start+0xc4>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d008      	beq.n	8004c84 <HAL_TIM_Encoder_Start+0xd4>
 8004c72:	e00f      	b.n	8004c94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fe5d 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004c82:	e016      	b.n	8004cb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fe55 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004c92:	e00e      	b.n	8004cb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fe4d 	bl	800593c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2104      	movs	r1, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fe46 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004cb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01b      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0202 	mvn.w	r2, #2
 8004d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa65 	bl	80051e6 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa57 	bl	80051d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 ffd1 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d020      	beq.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0204 	mvn.w	r2, #4
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa3f 	bl	80051e6 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa31 	bl	80051d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 ffab 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d020      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01b      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0208 	mvn.w	r2, #8
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa19 	bl	80051e6 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa0b 	bl	80051d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 ff85 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d020      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0210 	mvn.w	r2, #16
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2208      	movs	r2, #8
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9f3 	bl	80051e6 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9e5 	bl	80051d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 ff5f 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0201 	mvn.w	r2, #1
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9c3 	bl	80051be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fe60 	bl	8005b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f9c7 	bl	800520e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0220 	mvn.w	r2, #32
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fe32 	bl	8005b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e0ae      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b0c      	cmp	r3, #12
 8004ed6:	f200 809f 	bhi.w	8005018 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08005019 	.word	0x08005019
 8004ee8:	08005019 	.word	0x08005019
 8004eec:	08005019 	.word	0x08005019
 8004ef0:	08004f55 	.word	0x08004f55
 8004ef4:	08005019 	.word	0x08005019
 8004ef8:	08005019 	.word	0x08005019
 8004efc:	08005019 	.word	0x08005019
 8004f00:	08004f97 	.word	0x08004f97
 8004f04:	08005019 	.word	0x08005019
 8004f08:	08005019 	.word	0x08005019
 8004f0c:	08005019 	.word	0x08005019
 8004f10:	08004fd7 	.word	0x08004fd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fae8 	bl	80054f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0208 	orr.w	r2, r2, #8
 8004f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0204 	bic.w	r2, r2, #4
 8004f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6999      	ldr	r1, [r3, #24]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	619a      	str	r2, [r3, #24]
      break;
 8004f52:	e064      	b.n	800501e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fb2e 	bl	80055bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6999      	ldr	r1, [r3, #24]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	021a      	lsls	r2, r3, #8
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	619a      	str	r2, [r3, #24]
      break;
 8004f94:	e043      	b.n	800501e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fb79 	bl	8005694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0208 	orr.w	r2, r2, #8
 8004fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0204 	bic.w	r2, r2, #4
 8004fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69d9      	ldr	r1, [r3, #28]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	61da      	str	r2, [r3, #28]
      break;
 8004fd4:	e023      	b.n	800501e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fbc3 	bl	8005768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69d9      	ldr	r1, [r3, #28]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	021a      	lsls	r2, r3, #8
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	61da      	str	r2, [r3, #28]
      break;
 8005016:	e002      	b.n	800501e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
      break;
 800501c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005026:	7dfb      	ldrb	r3, [r7, #23]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIM_ConfigClockSource+0x1c>
 8005048:	2302      	movs	r3, #2
 800504a:	e0b4      	b.n	80051b6 <HAL_TIM_ConfigClockSource+0x186>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800506a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005084:	d03e      	beq.n	8005104 <HAL_TIM_ConfigClockSource+0xd4>
 8005086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800508a:	f200 8087 	bhi.w	800519c <HAL_TIM_ConfigClockSource+0x16c>
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005092:	f000 8086 	beq.w	80051a2 <HAL_TIM_ConfigClockSource+0x172>
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509a:	d87f      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b70      	cmp	r3, #112	@ 0x70
 800509e:	d01a      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0xa6>
 80050a0:	2b70      	cmp	r3, #112	@ 0x70
 80050a2:	d87b      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b60      	cmp	r3, #96	@ 0x60
 80050a6:	d050      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x11a>
 80050a8:	2b60      	cmp	r3, #96	@ 0x60
 80050aa:	d877      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b50      	cmp	r3, #80	@ 0x50
 80050ae:	d03c      	beq.n	800512a <HAL_TIM_ConfigClockSource+0xfa>
 80050b0:	2b50      	cmp	r3, #80	@ 0x50
 80050b2:	d873      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d058      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x13a>
 80050b8:	2b40      	cmp	r3, #64	@ 0x40
 80050ba:	d86f      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b30      	cmp	r3, #48	@ 0x30
 80050be:	d064      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x15a>
 80050c0:	2b30      	cmp	r3, #48	@ 0x30
 80050c2:	d86b      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d060      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x15a>
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d867      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d05c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x15a>
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d05a      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x15a>
 80050d4:	e062      	b.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050e6:	f000 fc09 	bl	80058fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	609a      	str	r2, [r3, #8]
      break;
 8005102:	e04f      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005114:	f000 fbf2 	bl	80058fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005126:	609a      	str	r2, [r3, #8]
      break;
 8005128:	e03c      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005136:	461a      	mov	r2, r3
 8005138:	f000 fb66 	bl	8005808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2150      	movs	r1, #80	@ 0x50
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fbbf 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 8005148:	e02c      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fb85 	bl	8005866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2160      	movs	r1, #96	@ 0x60
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fbaf 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 8005168:	e01c      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005176:	461a      	mov	r2, r3
 8005178:	f000 fb46 	bl	8005808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2140      	movs	r1, #64	@ 0x40
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fb9f 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 8005188:	e00c      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f000 fb96 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 800519a:	e003      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      break;
 80051a0:	e000      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005242:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	429a      	cmp	r2, r3
 800524c:	d107      	bne.n	800525e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800525c:	e02a      	b.n	80052b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	d107      	bne.n	8005278 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2202      	movs	r2, #2
 800526c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005276:	e01d      	b.n	80052b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	429a      	cmp	r2, r3
 8005280:	d107      	bne.n	8005292 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2204      	movs	r2, #4
 8005286:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005290:	e010      	b.n	80052b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	429a      	cmp	r2, r3
 800529a:	d107      	bne.n	80052ac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2208      	movs	r2, #8
 80052a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052aa:	e003      	b.n	80052b4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff ffb4 	bl	8005222 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d10b      	bne.n	80052f8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d136      	bne.n	800535c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f6:	e031      	b.n	800535c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d10b      	bne.n	800531a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2202      	movs	r2, #2
 8005306:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d125      	bne.n	800535c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005318:	e020      	b.n	800535c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d10b      	bne.n	800533c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2204      	movs	r2, #4
 8005328:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d114      	bne.n	800535c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800533a:	e00f      	b.n	800535c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d10a      	bne.n	800535c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2208      	movs	r2, #8
 800534a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d103      	bne.n	800535c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fcb5 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	429a      	cmp	r2, r3
 8005386:	d103      	bne.n	8005390 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	771a      	strb	r2, [r3, #28]
 800538e:	e019      	b.n	80053c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d103      	bne.n	80053a2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2202      	movs	r2, #2
 800539e:	771a      	strb	r2, [r3, #28]
 80053a0:	e010      	b.n	80053c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d103      	bne.n	80053b4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2204      	movs	r2, #4
 80053b0:	771a      	strb	r2, [r3, #28]
 80053b2:	e007      	b.n	80053c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d102      	bne.n	80053c4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2208      	movs	r2, #8
 80053c2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff ff18 	bl	80051fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
}
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3a      	ldr	r2, [pc, #232]	@ (80054d4 <TIM_Base_SetConfig+0xfc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00f      	beq.n	8005410 <TIM_Base_SetConfig+0x38>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	d00b      	beq.n	8005410 <TIM_Base_SetConfig+0x38>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a37      	ldr	r2, [pc, #220]	@ (80054d8 <TIM_Base_SetConfig+0x100>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_Base_SetConfig+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a36      	ldr	r2, [pc, #216]	@ (80054dc <TIM_Base_SetConfig+0x104>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_Base_SetConfig+0x38>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a35      	ldr	r2, [pc, #212]	@ (80054e0 <TIM_Base_SetConfig+0x108>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d108      	bne.n	8005422 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2b      	ldr	r2, [pc, #172]	@ (80054d4 <TIM_Base_SetConfig+0xfc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01b      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005430:	d017      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a28      	ldr	r2, [pc, #160]	@ (80054d8 <TIM_Base_SetConfig+0x100>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a27      	ldr	r2, [pc, #156]	@ (80054dc <TIM_Base_SetConfig+0x104>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a26      	ldr	r2, [pc, #152]	@ (80054e0 <TIM_Base_SetConfig+0x108>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a25      	ldr	r2, [pc, #148]	@ (80054e4 <TIM_Base_SetConfig+0x10c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a24      	ldr	r2, [pc, #144]	@ (80054e8 <TIM_Base_SetConfig+0x110>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_Base_SetConfig+0x8a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a23      	ldr	r2, [pc, #140]	@ (80054ec <TIM_Base_SetConfig+0x114>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d108      	bne.n	8005474 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a0e      	ldr	r2, [pc, #56]	@ (80054d4 <TIM_Base_SetConfig+0xfc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d103      	bne.n	80054a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d105      	bne.n	80054c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f023 0201 	bic.w	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]
  }
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800

080054f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f023 0201 	bic.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 0302 	bic.w	r3, r3, #2
 8005538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <TIM_OC1_SetConfig+0xc8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d10c      	bne.n	8005566 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f023 0308 	bic.w	r3, r3, #8
 8005552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 0304 	bic.w	r3, r3, #4
 8005564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a13      	ldr	r2, [pc, #76]	@ (80055b8 <TIM_OC1_SetConfig+0xc8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d111      	bne.n	8005592 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800557c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40010000 	.word	0x40010000

080055bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f023 0210 	bic.w	r2, r3, #16
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0320 	bic.w	r3, r3, #32
 8005606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a1e      	ldr	r2, [pc, #120]	@ (8005690 <TIM_OC2_SetConfig+0xd4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d10d      	bne.n	8005638 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005636:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a15      	ldr	r2, [pc, #84]	@ (8005690 <TIM_OC2_SetConfig+0xd4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d113      	bne.n	8005668 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800564e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000

08005694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005764 <TIM_OC3_SetConfig+0xd0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10d      	bne.n	800570e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800570c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a14      	ldr	r2, [pc, #80]	@ (8005764 <TIM_OC3_SetConfig+0xd0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d113      	bne.n	800573e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800571c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40010000 	.word	0x40010000

08005768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	031b      	lsls	r3, r3, #12
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a10      	ldr	r2, [pc, #64]	@ (8005804 <TIM_OC4_SetConfig+0x9c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d109      	bne.n	80057dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	019b      	lsls	r3, r3, #6
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40010000 	.word	0x40010000

08005808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f023 0201 	bic.w	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f023 030a 	bic.w	r3, r3, #10
 8005844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005866:	b480      	push	{r7}
 8005868:	b087      	sub	sp, #28
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f023 0210 	bic.w	r2, r3, #16
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	031b      	lsls	r3, r3, #12
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f043 0307 	orr.w	r3, r3, #7
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	431a      	orrs	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	609a      	str	r2, [r3, #8]
}
 8005930:	bf00      	nop
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2201      	movs	r2, #1
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e050      	b.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1c      	ldr	r2, [pc, #112]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d018      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ec:	d013      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a18      	ldr	r2, [pc, #96]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a16      	ldr	r2, [pc, #88]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d009      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a15      	ldr	r2, [pc, #84]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a13      	ldr	r2, [pc, #76]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10c      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40014000 	.word	0x40014000

08005a64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e03d      	b.n	8005afc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <turnOnLED>:
/**
 * @brief   Turns on an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn on.
 */
void turnOnLED(LED *currentFrame, uint8_t number) {
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
	currentFrame[number].draw = true;
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4413      	add	r3, r2
 8005b44:	2201      	movs	r2, #1
 8005b46:	70da      	strb	r2, [r3, #3]
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <turnOffLED>:
/**
 * @brief   Turns off an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn off.
 */
void turnOffLED(LED *currentFrame, uint8_t number) {
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
	currentFrame[number].draw = false;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	2200      	movs	r2, #0
 8005b6a:	70da      	strb	r2, [r3, #3]
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <wipePWMBuffer>:
 * @brief Converts a bitmap to PWM data for WS2812B LEDs.
 *
 * Wipes PWM Buffer by filling it with user defined ZERO PWM values.
 *
 */
void wipePWMBuffer(void) {
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 8005b7e:	2300      	movs	r3, #0
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	e007      	b.n	8005b94 <wipePWMBuffer+0x1c>
        pwmBuffer[i] = ZERO;
 8005b84:	4a09      	ldr	r2, [pc, #36]	@ (8005bac <wipePWMBuffer+0x34>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	211b      	movs	r1, #27
 8005b8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3301      	adds	r3, #1
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f640 5299 	movw	r2, #3481	@ 0xd99
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	ddf2      	ble.n	8005b84 <wipePWMBuffer+0xc>
    }
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	200006ec 	.word	0x200006ec

08005bb0 <updatePwmBuffer>:
 * (green, red, blue) order.
 *
 * @note    The PWM buffer must be appropriately sized to accommodate the
 *          LED data. Each LED requires 24 bits in the PWM buffer.
 */
void updatePwmBuffer(LED *currentFrame) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

    wipePWMBuffer();
 8005bb8:	f7ff ffde 	bl	8005b78 <wipePWMBuffer>

    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e05f      	b.n	8005c82 <updatePwmBuffer+0xd2>

        if(!currentFrame[ledNumber].draw) {
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	78db      	ldrb	r3, [r3, #3]
 8005bcc:	f083 0301 	eor.w	r3, r3, #1
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d151      	bne.n	8005c7a <updatePwmBuffer+0xca>
            continue;
        }


        uint8_t red     = currentFrame[ledNumber].red;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	73fb      	strb	r3, [r7, #15]
        uint8_t green   = currentFrame[ledNumber].green;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4413      	add	r3, r2
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	73bb      	strb	r3, [r7, #14]
        uint8_t blue    = currentFrame[ledNumber].blue;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	789b      	ldrb	r3, [r3, #2]
 8005bf8:	737b      	strb	r3, [r7, #13]
        uint32_t arrayIndex = ledNumber * 24;
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	60bb      	str	r3, [r7, #8]

        // ws2812b is GRB, so we swap the positions of red and green
        for(int bit = 0; bit < 8; bit++) {
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	e032      	b.n	8005c72 <updatePwmBuffer+0xc2>

            if(green & (1 << bit)) {
 8005c0c:	7bba      	ldrb	r2, [r7, #14]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	fa42 f303 	asr.w	r3, r2, r3
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <updatePwmBuffer+0x7c>
                pwmBuffer[arrayIndex + 16 + (7 - bit)] = ONE;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	3317      	adds	r3, #23
 8005c24:	4a1b      	ldr	r2, [pc, #108]	@ (8005c94 <updatePwmBuffer+0xe4>)
 8005c26:	2136      	movs	r1, #54	@ 0x36
 8005c28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(red & (1 << bit)) {
 8005c2c:	7bfa      	ldrb	r2, [r7, #15]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	fa42 f303 	asr.w	r3, r2, r3
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <updatePwmBuffer+0x9c>
                pwmBuffer[arrayIndex + 8 + (7 - bit)] = ONE;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	330f      	adds	r3, #15
 8005c44:	4a13      	ldr	r2, [pc, #76]	@ (8005c94 <updatePwmBuffer+0xe4>)
 8005c46:	2136      	movs	r1, #54	@ 0x36
 8005c48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(blue & (1 << bit)) {
 8005c4c:	7b7a      	ldrb	r2, [r7, #13]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	fa42 f303 	asr.w	r3, r2, r3
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <updatePwmBuffer+0xbc>
                pwmBuffer[arrayIndex + (7 - bit)] = ONE;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	3307      	adds	r3, #7
 8005c64:	4a0b      	ldr	r2, [pc, #44]	@ (8005c94 <updatePwmBuffer+0xe4>)
 8005c66:	2136      	movs	r1, #54	@ 0x36
 8005c68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(int bit = 0; bit < 8; bit++) {
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b07      	cmp	r3, #7
 8005c76:	ddc9      	ble.n	8005c0c <updatePwmBuffer+0x5c>
 8005c78:	e000      	b.n	8005c7c <updatePwmBuffer+0xcc>
            continue;
 8005c7a:	bf00      	nop
    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b8e      	cmp	r3, #142	@ 0x8e
 8005c86:	dd9c      	ble.n	8005bc2 <updatePwmBuffer+0x12>
            }
        }

    }
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200006ec 	.word	0x200006ec

08005c98 <DMA_Send>:


void DMA_Send() {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmBuffer, PWM_ARRAY_SIZE + 1);
 8005c9c:	f640 539b 	movw	r3, #3483	@ 0xd9b
 8005ca0:	4a07      	ldr	r2, [pc, #28]	@ (8005cc0 <DMA_Send+0x28>)
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4807      	ldr	r0, [pc, #28]	@ (8005cc4 <DMA_Send+0x2c>)
 8005ca6:	f7fe fc67 	bl	8004578 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 8005caa:	bf00      	nop
 8005cac:	4b06      	ldr	r3, [pc, #24]	@ (8005cc8 <DMA_Send+0x30>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0fb      	beq.n	8005cac <DMA_Send+0x14>
	datasentflag = 0;
 8005cb4:	4b04      	ldr	r3, [pc, #16]	@ (8005cc8 <DMA_Send+0x30>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

}
 8005cba:	bf00      	nop
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200006ec 	.word	0x200006ec
 8005cc4:	20000544 	.word	0x20000544
 8005cc8:	200006e8 	.word	0x200006e8

08005ccc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fe fdfe 	bl	80048d8 <HAL_TIM_PWM_Stop_DMA>
    datasentflag = 1;
 8005cdc:	4b03      	ldr	r3, [pc, #12]	@ (8005cec <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

}
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200006e8 	.word	0x200006e8

08005cf0 <rand>:
 8005cf0:	4b16      	ldr	r3, [pc, #88]	@ (8005d4c <rand+0x5c>)
 8005cf2:	b510      	push	{r4, lr}
 8005cf4:	681c      	ldr	r4, [r3, #0]
 8005cf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005cf8:	b9b3      	cbnz	r3, 8005d28 <rand+0x38>
 8005cfa:	2018      	movs	r0, #24
 8005cfc:	f000 fa74 	bl	80061e8 <malloc>
 8005d00:	4602      	mov	r2, r0
 8005d02:	6320      	str	r0, [r4, #48]	@ 0x30
 8005d04:	b920      	cbnz	r0, 8005d10 <rand+0x20>
 8005d06:	4b12      	ldr	r3, [pc, #72]	@ (8005d50 <rand+0x60>)
 8005d08:	4812      	ldr	r0, [pc, #72]	@ (8005d54 <rand+0x64>)
 8005d0a:	2152      	movs	r1, #82	@ 0x52
 8005d0c:	f000 fa04 	bl	8006118 <__assert_func>
 8005d10:	4911      	ldr	r1, [pc, #68]	@ (8005d58 <rand+0x68>)
 8005d12:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <rand+0x6c>)
 8005d14:	e9c0 1300 	strd	r1, r3, [r0]
 8005d18:	4b11      	ldr	r3, [pc, #68]	@ (8005d60 <rand+0x70>)
 8005d1a:	6083      	str	r3, [r0, #8]
 8005d1c:	230b      	movs	r3, #11
 8005d1e:	8183      	strh	r3, [r0, #12]
 8005d20:	2100      	movs	r1, #0
 8005d22:	2001      	movs	r0, #1
 8005d24:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d2a:	480e      	ldr	r0, [pc, #56]	@ (8005d64 <rand+0x74>)
 8005d2c:	690b      	ldr	r3, [r1, #16]
 8005d2e:	694c      	ldr	r4, [r1, #20]
 8005d30:	4a0d      	ldr	r2, [pc, #52]	@ (8005d68 <rand+0x78>)
 8005d32:	4358      	muls	r0, r3
 8005d34:	fb02 0004 	mla	r0, r2, r4, r0
 8005d38:	fba3 3202 	umull	r3, r2, r3, r2
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	eb40 0002 	adc.w	r0, r0, r2
 8005d42:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005d46:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005d4a:	bd10      	pop	{r4, pc}
 8005d4c:	2000003c 	.word	0x2000003c
 8005d50:	080073ec 	.word	0x080073ec
 8005d54:	08007403 	.word	0x08007403
 8005d58:	abcd330e 	.word	0xabcd330e
 8005d5c:	e66d1234 	.word	0xe66d1234
 8005d60:	0005deec 	.word	0x0005deec
 8005d64:	5851f42d 	.word	0x5851f42d
 8005d68:	4c957f2d 	.word	0x4c957f2d

08005d6c <std>:
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	4604      	mov	r4, r0
 8005d72:	e9c0 3300 	strd	r3, r3, [r0]
 8005d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d7a:	6083      	str	r3, [r0, #8]
 8005d7c:	8181      	strh	r1, [r0, #12]
 8005d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d80:	81c2      	strh	r2, [r0, #14]
 8005d82:	6183      	str	r3, [r0, #24]
 8005d84:	4619      	mov	r1, r3
 8005d86:	2208      	movs	r2, #8
 8005d88:	305c      	adds	r0, #92	@ 0x5c
 8005d8a:	f000 f928 	bl	8005fde <memset>
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <std+0x58>)
 8005d90:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d92:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc8 <std+0x5c>)
 8005d94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d96:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <std+0x60>)
 8005d98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <std+0x64>)
 8005d9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd4 <std+0x68>)
 8005da0:	6224      	str	r4, [r4, #32]
 8005da2:	429c      	cmp	r4, r3
 8005da4:	d006      	beq.n	8005db4 <std+0x48>
 8005da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005daa:	4294      	cmp	r4, r2
 8005dac:	d002      	beq.n	8005db4 <std+0x48>
 8005dae:	33d0      	adds	r3, #208	@ 0xd0
 8005db0:	429c      	cmp	r4, r3
 8005db2:	d105      	bne.n	8005dc0 <std+0x54>
 8005db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbc:	f000 b99a 	b.w	80060f4 <__retarget_lock_init_recursive>
 8005dc0:	bd10      	pop	{r4, pc}
 8005dc2:	bf00      	nop
 8005dc4:	08005f59 	.word	0x08005f59
 8005dc8:	08005f7b 	.word	0x08005f7b
 8005dcc:	08005fb3 	.word	0x08005fb3
 8005dd0:	08005fd7 	.word	0x08005fd7
 8005dd4:	20002220 	.word	0x20002220

08005dd8 <stdio_exit_handler>:
 8005dd8:	4a02      	ldr	r2, [pc, #8]	@ (8005de4 <stdio_exit_handler+0xc>)
 8005dda:	4903      	ldr	r1, [pc, #12]	@ (8005de8 <stdio_exit_handler+0x10>)
 8005ddc:	4803      	ldr	r0, [pc, #12]	@ (8005dec <stdio_exit_handler+0x14>)
 8005dde:	f000 b869 	b.w	8005eb4 <_fwalk_sglue>
 8005de2:	bf00      	nop
 8005de4:	20000030 	.word	0x20000030
 8005de8:	08006a29 	.word	0x08006a29
 8005dec:	20000040 	.word	0x20000040

08005df0 <cleanup_stdio>:
 8005df0:	6841      	ldr	r1, [r0, #4]
 8005df2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <cleanup_stdio+0x34>)
 8005df4:	4299      	cmp	r1, r3
 8005df6:	b510      	push	{r4, lr}
 8005df8:	4604      	mov	r4, r0
 8005dfa:	d001      	beq.n	8005e00 <cleanup_stdio+0x10>
 8005dfc:	f000 fe14 	bl	8006a28 <_fflush_r>
 8005e00:	68a1      	ldr	r1, [r4, #8]
 8005e02:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <cleanup_stdio+0x38>)
 8005e04:	4299      	cmp	r1, r3
 8005e06:	d002      	beq.n	8005e0e <cleanup_stdio+0x1e>
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fe0d 	bl	8006a28 <_fflush_r>
 8005e0e:	68e1      	ldr	r1, [r4, #12]
 8005e10:	4b06      	ldr	r3, [pc, #24]	@ (8005e2c <cleanup_stdio+0x3c>)
 8005e12:	4299      	cmp	r1, r3
 8005e14:	d004      	beq.n	8005e20 <cleanup_stdio+0x30>
 8005e16:	4620      	mov	r0, r4
 8005e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1c:	f000 be04 	b.w	8006a28 <_fflush_r>
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	bf00      	nop
 8005e24:	20002220 	.word	0x20002220
 8005e28:	20002288 	.word	0x20002288
 8005e2c:	200022f0 	.word	0x200022f0

08005e30 <global_stdio_init.part.0>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <global_stdio_init.part.0+0x30>)
 8005e34:	4c0b      	ldr	r4, [pc, #44]	@ (8005e64 <global_stdio_init.part.0+0x34>)
 8005e36:	4a0c      	ldr	r2, [pc, #48]	@ (8005e68 <global_stdio_init.part.0+0x38>)
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2104      	movs	r1, #4
 8005e40:	f7ff ff94 	bl	8005d6c <std>
 8005e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2109      	movs	r1, #9
 8005e4c:	f7ff ff8e 	bl	8005d6c <std>
 8005e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e54:	2202      	movs	r2, #2
 8005e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e5a:	2112      	movs	r1, #18
 8005e5c:	f7ff bf86 	b.w	8005d6c <std>
 8005e60:	20002358 	.word	0x20002358
 8005e64:	20002220 	.word	0x20002220
 8005e68:	08005dd9 	.word	0x08005dd9

08005e6c <__sfp_lock_acquire>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	@ (8005e74 <__sfp_lock_acquire+0x8>)
 8005e6e:	f000 b942 	b.w	80060f6 <__retarget_lock_acquire_recursive>
 8005e72:	bf00      	nop
 8005e74:	20002361 	.word	0x20002361

08005e78 <__sfp_lock_release>:
 8005e78:	4801      	ldr	r0, [pc, #4]	@ (8005e80 <__sfp_lock_release+0x8>)
 8005e7a:	f000 b93d 	b.w	80060f8 <__retarget_lock_release_recursive>
 8005e7e:	bf00      	nop
 8005e80:	20002361 	.word	0x20002361

08005e84 <__sinit>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4604      	mov	r4, r0
 8005e88:	f7ff fff0 	bl	8005e6c <__sfp_lock_acquire>
 8005e8c:	6a23      	ldr	r3, [r4, #32]
 8005e8e:	b11b      	cbz	r3, 8005e98 <__sinit+0x14>
 8005e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e94:	f7ff bff0 	b.w	8005e78 <__sfp_lock_release>
 8005e98:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <__sinit+0x28>)
 8005e9a:	6223      	str	r3, [r4, #32]
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <__sinit+0x2c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f5      	bne.n	8005e90 <__sinit+0xc>
 8005ea4:	f7ff ffc4 	bl	8005e30 <global_stdio_init.part.0>
 8005ea8:	e7f2      	b.n	8005e90 <__sinit+0xc>
 8005eaa:	bf00      	nop
 8005eac:	08005df1 	.word	0x08005df1
 8005eb0:	20002358 	.word	0x20002358

08005eb4 <_fwalk_sglue>:
 8005eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb8:	4607      	mov	r7, r0
 8005eba:	4688      	mov	r8, r1
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	2600      	movs	r6, #0
 8005ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ec8:	d505      	bpl.n	8005ed6 <_fwalk_sglue+0x22>
 8005eca:	6824      	ldr	r4, [r4, #0]
 8005ecc:	2c00      	cmp	r4, #0
 8005ece:	d1f7      	bne.n	8005ec0 <_fwalk_sglue+0xc>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed6:	89ab      	ldrh	r3, [r5, #12]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d907      	bls.n	8005eec <_fwalk_sglue+0x38>
 8005edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	d003      	beq.n	8005eec <_fwalk_sglue+0x38>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	47c0      	blx	r8
 8005eea:	4306      	orrs	r6, r0
 8005eec:	3568      	adds	r5, #104	@ 0x68
 8005eee:	e7e9      	b.n	8005ec4 <_fwalk_sglue+0x10>

08005ef0 <sniprintf>:
 8005ef0:	b40c      	push	{r2, r3}
 8005ef2:	b530      	push	{r4, r5, lr}
 8005ef4:	4b17      	ldr	r3, [pc, #92]	@ (8005f54 <sniprintf+0x64>)
 8005ef6:	1e0c      	subs	r4, r1, #0
 8005ef8:	681d      	ldr	r5, [r3, #0]
 8005efa:	b09d      	sub	sp, #116	@ 0x74
 8005efc:	da08      	bge.n	8005f10 <sniprintf+0x20>
 8005efe:	238b      	movs	r3, #139	@ 0x8b
 8005f00:	602b      	str	r3, [r5, #0]
 8005f02:	f04f 30ff 	mov.w	r0, #4294967295
 8005f06:	b01d      	add	sp, #116	@ 0x74
 8005f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f0c:	b002      	add	sp, #8
 8005f0e:	4770      	bx	lr
 8005f10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005f14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f18:	bf14      	ite	ne
 8005f1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f1e:	4623      	moveq	r3, r4
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	9307      	str	r3, [sp, #28]
 8005f24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f28:	9002      	str	r0, [sp, #8]
 8005f2a:	9006      	str	r0, [sp, #24]
 8005f2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f30:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005f32:	ab21      	add	r3, sp, #132	@ 0x84
 8005f34:	a902      	add	r1, sp, #8
 8005f36:	4628      	mov	r0, r5
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	f000 fa67 	bl	800640c <_svfiprintf_r>
 8005f3e:	1c43      	adds	r3, r0, #1
 8005f40:	bfbc      	itt	lt
 8005f42:	238b      	movlt	r3, #139	@ 0x8b
 8005f44:	602b      	strlt	r3, [r5, #0]
 8005f46:	2c00      	cmp	r4, #0
 8005f48:	d0dd      	beq.n	8005f06 <sniprintf+0x16>
 8005f4a:	9b02      	ldr	r3, [sp, #8]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	e7d9      	b.n	8005f06 <sniprintf+0x16>
 8005f52:	bf00      	nop
 8005f54:	2000003c 	.word	0x2000003c

08005f58 <__sread>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f60:	f000 f87a 	bl	8006058 <_read_r>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	bfab      	itete	ge
 8005f68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f6c:	181b      	addge	r3, r3, r0
 8005f6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f72:	bfac      	ite	ge
 8005f74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f76:	81a3      	strhlt	r3, [r4, #12]
 8005f78:	bd10      	pop	{r4, pc}

08005f7a <__swrite>:
 8005f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7e:	461f      	mov	r7, r3
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	05db      	lsls	r3, r3, #23
 8005f84:	4605      	mov	r5, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	4616      	mov	r6, r2
 8005f8a:	d505      	bpl.n	8005f98 <__swrite+0x1e>
 8005f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f90:	2302      	movs	r3, #2
 8005f92:	2200      	movs	r2, #0
 8005f94:	f000 f84e 	bl	8006034 <_lseek_r>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	4628      	mov	r0, r5
 8005faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fae:	f000 b865 	b.w	800607c <_write_r>

08005fb2 <__sseek>:
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fba:	f000 f83b 	bl	8006034 <_lseek_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	bf15      	itete	ne
 8005fc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fce:	81a3      	strheq	r3, [r4, #12]
 8005fd0:	bf18      	it	ne
 8005fd2:	81a3      	strhne	r3, [r4, #12]
 8005fd4:	bd10      	pop	{r4, pc}

08005fd6 <__sclose>:
 8005fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fda:	f000 b81b 	b.w	8006014 <_close_r>

08005fde <memset>:
 8005fde:	4402      	add	r2, r0
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d100      	bne.n	8005fe8 <memset+0xa>
 8005fe6:	4770      	bx	lr
 8005fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fec:	e7f9      	b.n	8005fe2 <memset+0x4>

08005fee <strncpy>:
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	3901      	subs	r1, #1
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	b132      	cbz	r2, 8006004 <strncpy+0x16>
 8005ff6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ffa:	f803 4b01 	strb.w	r4, [r3], #1
 8005ffe:	3a01      	subs	r2, #1
 8006000:	2c00      	cmp	r4, #0
 8006002:	d1f7      	bne.n	8005ff4 <strncpy+0x6>
 8006004:	441a      	add	r2, r3
 8006006:	2100      	movs	r1, #0
 8006008:	4293      	cmp	r3, r2
 800600a:	d100      	bne.n	800600e <strncpy+0x20>
 800600c:	bd10      	pop	{r4, pc}
 800600e:	f803 1b01 	strb.w	r1, [r3], #1
 8006012:	e7f9      	b.n	8006008 <strncpy+0x1a>

08006014 <_close_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d06      	ldr	r5, [pc, #24]	@ (8006030 <_close_r+0x1c>)
 8006018:	2300      	movs	r3, #0
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	f7fb ffcc 	bl	8001fbc <_close>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_close_r+0x1a>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_close_r+0x1a>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	2000235c 	.word	0x2000235c

08006034 <_lseek_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d07      	ldr	r5, [pc, #28]	@ (8006054 <_lseek_r+0x20>)
 8006038:	4604      	mov	r4, r0
 800603a:	4608      	mov	r0, r1
 800603c:	4611      	mov	r1, r2
 800603e:	2200      	movs	r2, #0
 8006040:	602a      	str	r2, [r5, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	f7fb ffe1 	bl	800200a <_lseek>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_lseek_r+0x1e>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_lseek_r+0x1e>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	2000235c 	.word	0x2000235c

08006058 <_read_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4d07      	ldr	r5, [pc, #28]	@ (8006078 <_read_r+0x20>)
 800605c:	4604      	mov	r4, r0
 800605e:	4608      	mov	r0, r1
 8006060:	4611      	mov	r1, r2
 8006062:	2200      	movs	r2, #0
 8006064:	602a      	str	r2, [r5, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	f7fb ff6f 	bl	8001f4a <_read>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d102      	bne.n	8006076 <_read_r+0x1e>
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	b103      	cbz	r3, 8006076 <_read_r+0x1e>
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	2000235c 	.word	0x2000235c

0800607c <_write_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4d07      	ldr	r5, [pc, #28]	@ (800609c <_write_r+0x20>)
 8006080:	4604      	mov	r4, r0
 8006082:	4608      	mov	r0, r1
 8006084:	4611      	mov	r1, r2
 8006086:	2200      	movs	r2, #0
 8006088:	602a      	str	r2, [r5, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	f7fb ff7a 	bl	8001f84 <_write>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d102      	bne.n	800609a <_write_r+0x1e>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	b103      	cbz	r3, 800609a <_write_r+0x1e>
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	2000235c 	.word	0x2000235c

080060a0 <__errno>:
 80060a0:	4b01      	ldr	r3, [pc, #4]	@ (80060a8 <__errno+0x8>)
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	2000003c 	.word	0x2000003c

080060ac <__libc_init_array>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	4d0d      	ldr	r5, [pc, #52]	@ (80060e4 <__libc_init_array+0x38>)
 80060b0:	4c0d      	ldr	r4, [pc, #52]	@ (80060e8 <__libc_init_array+0x3c>)
 80060b2:	1b64      	subs	r4, r4, r5
 80060b4:	10a4      	asrs	r4, r4, #2
 80060b6:	2600      	movs	r6, #0
 80060b8:	42a6      	cmp	r6, r4
 80060ba:	d109      	bne.n	80060d0 <__libc_init_array+0x24>
 80060bc:	4d0b      	ldr	r5, [pc, #44]	@ (80060ec <__libc_init_array+0x40>)
 80060be:	4c0c      	ldr	r4, [pc, #48]	@ (80060f0 <__libc_init_array+0x44>)
 80060c0:	f000 fff0 	bl	80070a4 <_init>
 80060c4:	1b64      	subs	r4, r4, r5
 80060c6:	10a4      	asrs	r4, r4, #2
 80060c8:	2600      	movs	r6, #0
 80060ca:	42a6      	cmp	r6, r4
 80060cc:	d105      	bne.n	80060da <__libc_init_array+0x2e>
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d4:	4798      	blx	r3
 80060d6:	3601      	adds	r6, #1
 80060d8:	e7ee      	b.n	80060b8 <__libc_init_array+0xc>
 80060da:	f855 3b04 	ldr.w	r3, [r5], #4
 80060de:	4798      	blx	r3
 80060e0:	3601      	adds	r6, #1
 80060e2:	e7f2      	b.n	80060ca <__libc_init_array+0x1e>
 80060e4:	080074d4 	.word	0x080074d4
 80060e8:	080074d4 	.word	0x080074d4
 80060ec:	080074d4 	.word	0x080074d4
 80060f0:	080074d8 	.word	0x080074d8

080060f4 <__retarget_lock_init_recursive>:
 80060f4:	4770      	bx	lr

080060f6 <__retarget_lock_acquire_recursive>:
 80060f6:	4770      	bx	lr

080060f8 <__retarget_lock_release_recursive>:
 80060f8:	4770      	bx	lr

080060fa <memcpy>:
 80060fa:	440a      	add	r2, r1
 80060fc:	4291      	cmp	r1, r2
 80060fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8006102:	d100      	bne.n	8006106 <memcpy+0xc>
 8006104:	4770      	bx	lr
 8006106:	b510      	push	{r4, lr}
 8006108:	f811 4b01 	ldrb.w	r4, [r1], #1
 800610c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006110:	4291      	cmp	r1, r2
 8006112:	d1f9      	bne.n	8006108 <memcpy+0xe>
 8006114:	bd10      	pop	{r4, pc}
	...

08006118 <__assert_func>:
 8006118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800611a:	4614      	mov	r4, r2
 800611c:	461a      	mov	r2, r3
 800611e:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <__assert_func+0x2c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4605      	mov	r5, r0
 8006124:	68d8      	ldr	r0, [r3, #12]
 8006126:	b954      	cbnz	r4, 800613e <__assert_func+0x26>
 8006128:	4b07      	ldr	r3, [pc, #28]	@ (8006148 <__assert_func+0x30>)
 800612a:	461c      	mov	r4, r3
 800612c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006130:	9100      	str	r1, [sp, #0]
 8006132:	462b      	mov	r3, r5
 8006134:	4905      	ldr	r1, [pc, #20]	@ (800614c <__assert_func+0x34>)
 8006136:	f000 fc9f 	bl	8006a78 <fiprintf>
 800613a:	f000 fcd9 	bl	8006af0 <abort>
 800613e:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <__assert_func+0x38>)
 8006140:	e7f4      	b.n	800612c <__assert_func+0x14>
 8006142:	bf00      	nop
 8006144:	2000003c 	.word	0x2000003c
 8006148:	08007496 	.word	0x08007496
 800614c:	08007468 	.word	0x08007468
 8006150:	0800745b 	.word	0x0800745b

08006154 <_free_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4605      	mov	r5, r0
 8006158:	2900      	cmp	r1, #0
 800615a:	d041      	beq.n	80061e0 <_free_r+0x8c>
 800615c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006160:	1f0c      	subs	r4, r1, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	bfb8      	it	lt
 8006166:	18e4      	addlt	r4, r4, r3
 8006168:	f000 f8e8 	bl	800633c <__malloc_lock>
 800616c:	4a1d      	ldr	r2, [pc, #116]	@ (80061e4 <_free_r+0x90>)
 800616e:	6813      	ldr	r3, [r2, #0]
 8006170:	b933      	cbnz	r3, 8006180 <_free_r+0x2c>
 8006172:	6063      	str	r3, [r4, #4]
 8006174:	6014      	str	r4, [r2, #0]
 8006176:	4628      	mov	r0, r5
 8006178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800617c:	f000 b8e4 	b.w	8006348 <__malloc_unlock>
 8006180:	42a3      	cmp	r3, r4
 8006182:	d908      	bls.n	8006196 <_free_r+0x42>
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	1821      	adds	r1, r4, r0
 8006188:	428b      	cmp	r3, r1
 800618a:	bf01      	itttt	eq
 800618c:	6819      	ldreq	r1, [r3, #0]
 800618e:	685b      	ldreq	r3, [r3, #4]
 8006190:	1809      	addeq	r1, r1, r0
 8006192:	6021      	streq	r1, [r4, #0]
 8006194:	e7ed      	b.n	8006172 <_free_r+0x1e>
 8006196:	461a      	mov	r2, r3
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b10b      	cbz	r3, 80061a0 <_free_r+0x4c>
 800619c:	42a3      	cmp	r3, r4
 800619e:	d9fa      	bls.n	8006196 <_free_r+0x42>
 80061a0:	6811      	ldr	r1, [r2, #0]
 80061a2:	1850      	adds	r0, r2, r1
 80061a4:	42a0      	cmp	r0, r4
 80061a6:	d10b      	bne.n	80061c0 <_free_r+0x6c>
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	4401      	add	r1, r0
 80061ac:	1850      	adds	r0, r2, r1
 80061ae:	4283      	cmp	r3, r0
 80061b0:	6011      	str	r1, [r2, #0]
 80061b2:	d1e0      	bne.n	8006176 <_free_r+0x22>
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	6053      	str	r3, [r2, #4]
 80061ba:	4408      	add	r0, r1
 80061bc:	6010      	str	r0, [r2, #0]
 80061be:	e7da      	b.n	8006176 <_free_r+0x22>
 80061c0:	d902      	bls.n	80061c8 <_free_r+0x74>
 80061c2:	230c      	movs	r3, #12
 80061c4:	602b      	str	r3, [r5, #0]
 80061c6:	e7d6      	b.n	8006176 <_free_r+0x22>
 80061c8:	6820      	ldr	r0, [r4, #0]
 80061ca:	1821      	adds	r1, r4, r0
 80061cc:	428b      	cmp	r3, r1
 80061ce:	bf04      	itt	eq
 80061d0:	6819      	ldreq	r1, [r3, #0]
 80061d2:	685b      	ldreq	r3, [r3, #4]
 80061d4:	6063      	str	r3, [r4, #4]
 80061d6:	bf04      	itt	eq
 80061d8:	1809      	addeq	r1, r1, r0
 80061da:	6021      	streq	r1, [r4, #0]
 80061dc:	6054      	str	r4, [r2, #4]
 80061de:	e7ca      	b.n	8006176 <_free_r+0x22>
 80061e0:	bd38      	pop	{r3, r4, r5, pc}
 80061e2:	bf00      	nop
 80061e4:	20002368 	.word	0x20002368

080061e8 <malloc>:
 80061e8:	4b02      	ldr	r3, [pc, #8]	@ (80061f4 <malloc+0xc>)
 80061ea:	4601      	mov	r1, r0
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	f000 b825 	b.w	800623c <_malloc_r>
 80061f2:	bf00      	nop
 80061f4:	2000003c 	.word	0x2000003c

080061f8 <sbrk_aligned>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006238 <sbrk_aligned+0x40>)
 80061fc:	460c      	mov	r4, r1
 80061fe:	6831      	ldr	r1, [r6, #0]
 8006200:	4605      	mov	r5, r0
 8006202:	b911      	cbnz	r1, 800620a <sbrk_aligned+0x12>
 8006204:	f000 fc64 	bl	8006ad0 <_sbrk_r>
 8006208:	6030      	str	r0, [r6, #0]
 800620a:	4621      	mov	r1, r4
 800620c:	4628      	mov	r0, r5
 800620e:	f000 fc5f 	bl	8006ad0 <_sbrk_r>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	d103      	bne.n	800621e <sbrk_aligned+0x26>
 8006216:	f04f 34ff 	mov.w	r4, #4294967295
 800621a:	4620      	mov	r0, r4
 800621c:	bd70      	pop	{r4, r5, r6, pc}
 800621e:	1cc4      	adds	r4, r0, #3
 8006220:	f024 0403 	bic.w	r4, r4, #3
 8006224:	42a0      	cmp	r0, r4
 8006226:	d0f8      	beq.n	800621a <sbrk_aligned+0x22>
 8006228:	1a21      	subs	r1, r4, r0
 800622a:	4628      	mov	r0, r5
 800622c:	f000 fc50 	bl	8006ad0 <_sbrk_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d1f2      	bne.n	800621a <sbrk_aligned+0x22>
 8006234:	e7ef      	b.n	8006216 <sbrk_aligned+0x1e>
 8006236:	bf00      	nop
 8006238:	20002364 	.word	0x20002364

0800623c <_malloc_r>:
 800623c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006240:	1ccd      	adds	r5, r1, #3
 8006242:	f025 0503 	bic.w	r5, r5, #3
 8006246:	3508      	adds	r5, #8
 8006248:	2d0c      	cmp	r5, #12
 800624a:	bf38      	it	cc
 800624c:	250c      	movcc	r5, #12
 800624e:	2d00      	cmp	r5, #0
 8006250:	4606      	mov	r6, r0
 8006252:	db01      	blt.n	8006258 <_malloc_r+0x1c>
 8006254:	42a9      	cmp	r1, r5
 8006256:	d904      	bls.n	8006262 <_malloc_r+0x26>
 8006258:	230c      	movs	r3, #12
 800625a:	6033      	str	r3, [r6, #0]
 800625c:	2000      	movs	r0, #0
 800625e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006338 <_malloc_r+0xfc>
 8006266:	f000 f869 	bl	800633c <__malloc_lock>
 800626a:	f8d8 3000 	ldr.w	r3, [r8]
 800626e:	461c      	mov	r4, r3
 8006270:	bb44      	cbnz	r4, 80062c4 <_malloc_r+0x88>
 8006272:	4629      	mov	r1, r5
 8006274:	4630      	mov	r0, r6
 8006276:	f7ff ffbf 	bl	80061f8 <sbrk_aligned>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	4604      	mov	r4, r0
 800627e:	d158      	bne.n	8006332 <_malloc_r+0xf6>
 8006280:	f8d8 4000 	ldr.w	r4, [r8]
 8006284:	4627      	mov	r7, r4
 8006286:	2f00      	cmp	r7, #0
 8006288:	d143      	bne.n	8006312 <_malloc_r+0xd6>
 800628a:	2c00      	cmp	r4, #0
 800628c:	d04b      	beq.n	8006326 <_malloc_r+0xea>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	4639      	mov	r1, r7
 8006292:	4630      	mov	r0, r6
 8006294:	eb04 0903 	add.w	r9, r4, r3
 8006298:	f000 fc1a 	bl	8006ad0 <_sbrk_r>
 800629c:	4581      	cmp	r9, r0
 800629e:	d142      	bne.n	8006326 <_malloc_r+0xea>
 80062a0:	6821      	ldr	r1, [r4, #0]
 80062a2:	1a6d      	subs	r5, r5, r1
 80062a4:	4629      	mov	r1, r5
 80062a6:	4630      	mov	r0, r6
 80062a8:	f7ff ffa6 	bl	80061f8 <sbrk_aligned>
 80062ac:	3001      	adds	r0, #1
 80062ae:	d03a      	beq.n	8006326 <_malloc_r+0xea>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	442b      	add	r3, r5
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	f8d8 3000 	ldr.w	r3, [r8]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	bb62      	cbnz	r2, 8006318 <_malloc_r+0xdc>
 80062be:	f8c8 7000 	str.w	r7, [r8]
 80062c2:	e00f      	b.n	80062e4 <_malloc_r+0xa8>
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	1b52      	subs	r2, r2, r5
 80062c8:	d420      	bmi.n	800630c <_malloc_r+0xd0>
 80062ca:	2a0b      	cmp	r2, #11
 80062cc:	d917      	bls.n	80062fe <_malloc_r+0xc2>
 80062ce:	1961      	adds	r1, r4, r5
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	6025      	str	r5, [r4, #0]
 80062d4:	bf18      	it	ne
 80062d6:	6059      	strne	r1, [r3, #4]
 80062d8:	6863      	ldr	r3, [r4, #4]
 80062da:	bf08      	it	eq
 80062dc:	f8c8 1000 	streq.w	r1, [r8]
 80062e0:	5162      	str	r2, [r4, r5]
 80062e2:	604b      	str	r3, [r1, #4]
 80062e4:	4630      	mov	r0, r6
 80062e6:	f000 f82f 	bl	8006348 <__malloc_unlock>
 80062ea:	f104 000b 	add.w	r0, r4, #11
 80062ee:	1d23      	adds	r3, r4, #4
 80062f0:	f020 0007 	bic.w	r0, r0, #7
 80062f4:	1ac2      	subs	r2, r0, r3
 80062f6:	bf1c      	itt	ne
 80062f8:	1a1b      	subne	r3, r3, r0
 80062fa:	50a3      	strne	r3, [r4, r2]
 80062fc:	e7af      	b.n	800625e <_malloc_r+0x22>
 80062fe:	6862      	ldr	r2, [r4, #4]
 8006300:	42a3      	cmp	r3, r4
 8006302:	bf0c      	ite	eq
 8006304:	f8c8 2000 	streq.w	r2, [r8]
 8006308:	605a      	strne	r2, [r3, #4]
 800630a:	e7eb      	b.n	80062e4 <_malloc_r+0xa8>
 800630c:	4623      	mov	r3, r4
 800630e:	6864      	ldr	r4, [r4, #4]
 8006310:	e7ae      	b.n	8006270 <_malloc_r+0x34>
 8006312:	463c      	mov	r4, r7
 8006314:	687f      	ldr	r7, [r7, #4]
 8006316:	e7b6      	b.n	8006286 <_malloc_r+0x4a>
 8006318:	461a      	mov	r2, r3
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	42a3      	cmp	r3, r4
 800631e:	d1fb      	bne.n	8006318 <_malloc_r+0xdc>
 8006320:	2300      	movs	r3, #0
 8006322:	6053      	str	r3, [r2, #4]
 8006324:	e7de      	b.n	80062e4 <_malloc_r+0xa8>
 8006326:	230c      	movs	r3, #12
 8006328:	6033      	str	r3, [r6, #0]
 800632a:	4630      	mov	r0, r6
 800632c:	f000 f80c 	bl	8006348 <__malloc_unlock>
 8006330:	e794      	b.n	800625c <_malloc_r+0x20>
 8006332:	6005      	str	r5, [r0, #0]
 8006334:	e7d6      	b.n	80062e4 <_malloc_r+0xa8>
 8006336:	bf00      	nop
 8006338:	20002368 	.word	0x20002368

0800633c <__malloc_lock>:
 800633c:	4801      	ldr	r0, [pc, #4]	@ (8006344 <__malloc_lock+0x8>)
 800633e:	f7ff beda 	b.w	80060f6 <__retarget_lock_acquire_recursive>
 8006342:	bf00      	nop
 8006344:	20002360 	.word	0x20002360

08006348 <__malloc_unlock>:
 8006348:	4801      	ldr	r0, [pc, #4]	@ (8006350 <__malloc_unlock+0x8>)
 800634a:	f7ff bed5 	b.w	80060f8 <__retarget_lock_release_recursive>
 800634e:	bf00      	nop
 8006350:	20002360 	.word	0x20002360

08006354 <__ssputs_r>:
 8006354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	688e      	ldr	r6, [r1, #8]
 800635a:	461f      	mov	r7, r3
 800635c:	42be      	cmp	r6, r7
 800635e:	680b      	ldr	r3, [r1, #0]
 8006360:	4682      	mov	sl, r0
 8006362:	460c      	mov	r4, r1
 8006364:	4690      	mov	r8, r2
 8006366:	d82d      	bhi.n	80063c4 <__ssputs_r+0x70>
 8006368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800636c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006370:	d026      	beq.n	80063c0 <__ssputs_r+0x6c>
 8006372:	6965      	ldr	r5, [r4, #20]
 8006374:	6909      	ldr	r1, [r1, #16]
 8006376:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800637a:	eba3 0901 	sub.w	r9, r3, r1
 800637e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006382:	1c7b      	adds	r3, r7, #1
 8006384:	444b      	add	r3, r9
 8006386:	106d      	asrs	r5, r5, #1
 8006388:	429d      	cmp	r5, r3
 800638a:	bf38      	it	cc
 800638c:	461d      	movcc	r5, r3
 800638e:	0553      	lsls	r3, r2, #21
 8006390:	d527      	bpl.n	80063e2 <__ssputs_r+0x8e>
 8006392:	4629      	mov	r1, r5
 8006394:	f7ff ff52 	bl	800623c <_malloc_r>
 8006398:	4606      	mov	r6, r0
 800639a:	b360      	cbz	r0, 80063f6 <__ssputs_r+0xa2>
 800639c:	6921      	ldr	r1, [r4, #16]
 800639e:	464a      	mov	r2, r9
 80063a0:	f7ff feab 	bl	80060fa <memcpy>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	6126      	str	r6, [r4, #16]
 80063b2:	6165      	str	r5, [r4, #20]
 80063b4:	444e      	add	r6, r9
 80063b6:	eba5 0509 	sub.w	r5, r5, r9
 80063ba:	6026      	str	r6, [r4, #0]
 80063bc:	60a5      	str	r5, [r4, #8]
 80063be:	463e      	mov	r6, r7
 80063c0:	42be      	cmp	r6, r7
 80063c2:	d900      	bls.n	80063c6 <__ssputs_r+0x72>
 80063c4:	463e      	mov	r6, r7
 80063c6:	6820      	ldr	r0, [r4, #0]
 80063c8:	4632      	mov	r2, r6
 80063ca:	4641      	mov	r1, r8
 80063cc:	f000 fb66 	bl	8006a9c <memmove>
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	1b9b      	subs	r3, r3, r6
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	4433      	add	r3, r6
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	2000      	movs	r0, #0
 80063de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e2:	462a      	mov	r2, r5
 80063e4:	f000 fb8b 	bl	8006afe <_realloc_r>
 80063e8:	4606      	mov	r6, r0
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d1e0      	bne.n	80063b0 <__ssputs_r+0x5c>
 80063ee:	6921      	ldr	r1, [r4, #16]
 80063f0:	4650      	mov	r0, sl
 80063f2:	f7ff feaf 	bl	8006154 <_free_r>
 80063f6:	230c      	movs	r3, #12
 80063f8:	f8ca 3000 	str.w	r3, [sl]
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e7e9      	b.n	80063de <__ssputs_r+0x8a>
	...

0800640c <_svfiprintf_r>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	4698      	mov	r8, r3
 8006412:	898b      	ldrh	r3, [r1, #12]
 8006414:	061b      	lsls	r3, r3, #24
 8006416:	b09d      	sub	sp, #116	@ 0x74
 8006418:	4607      	mov	r7, r0
 800641a:	460d      	mov	r5, r1
 800641c:	4614      	mov	r4, r2
 800641e:	d510      	bpl.n	8006442 <_svfiprintf_r+0x36>
 8006420:	690b      	ldr	r3, [r1, #16]
 8006422:	b973      	cbnz	r3, 8006442 <_svfiprintf_r+0x36>
 8006424:	2140      	movs	r1, #64	@ 0x40
 8006426:	f7ff ff09 	bl	800623c <_malloc_r>
 800642a:	6028      	str	r0, [r5, #0]
 800642c:	6128      	str	r0, [r5, #16]
 800642e:	b930      	cbnz	r0, 800643e <_svfiprintf_r+0x32>
 8006430:	230c      	movs	r3, #12
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	b01d      	add	sp, #116	@ 0x74
 800643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	2340      	movs	r3, #64	@ 0x40
 8006440:	616b      	str	r3, [r5, #20]
 8006442:	2300      	movs	r3, #0
 8006444:	9309      	str	r3, [sp, #36]	@ 0x24
 8006446:	2320      	movs	r3, #32
 8006448:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800644c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006450:	2330      	movs	r3, #48	@ 0x30
 8006452:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80065f0 <_svfiprintf_r+0x1e4>
 8006456:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800645a:	f04f 0901 	mov.w	r9, #1
 800645e:	4623      	mov	r3, r4
 8006460:	469a      	mov	sl, r3
 8006462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006466:	b10a      	cbz	r2, 800646c <_svfiprintf_r+0x60>
 8006468:	2a25      	cmp	r2, #37	@ 0x25
 800646a:	d1f9      	bne.n	8006460 <_svfiprintf_r+0x54>
 800646c:	ebba 0b04 	subs.w	fp, sl, r4
 8006470:	d00b      	beq.n	800648a <_svfiprintf_r+0x7e>
 8006472:	465b      	mov	r3, fp
 8006474:	4622      	mov	r2, r4
 8006476:	4629      	mov	r1, r5
 8006478:	4638      	mov	r0, r7
 800647a:	f7ff ff6b 	bl	8006354 <__ssputs_r>
 800647e:	3001      	adds	r0, #1
 8006480:	f000 80a7 	beq.w	80065d2 <_svfiprintf_r+0x1c6>
 8006484:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006486:	445a      	add	r2, fp
 8006488:	9209      	str	r2, [sp, #36]	@ 0x24
 800648a:	f89a 3000 	ldrb.w	r3, [sl]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 809f 	beq.w	80065d2 <_svfiprintf_r+0x1c6>
 8006494:	2300      	movs	r3, #0
 8006496:	f04f 32ff 	mov.w	r2, #4294967295
 800649a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800649e:	f10a 0a01 	add.w	sl, sl, #1
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	9307      	str	r3, [sp, #28]
 80064a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80064ac:	4654      	mov	r4, sl
 80064ae:	2205      	movs	r2, #5
 80064b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b4:	484e      	ldr	r0, [pc, #312]	@ (80065f0 <_svfiprintf_r+0x1e4>)
 80064b6:	f7f9 fe93 	bl	80001e0 <memchr>
 80064ba:	9a04      	ldr	r2, [sp, #16]
 80064bc:	b9d8      	cbnz	r0, 80064f6 <_svfiprintf_r+0xea>
 80064be:	06d0      	lsls	r0, r2, #27
 80064c0:	bf44      	itt	mi
 80064c2:	2320      	movmi	r3, #32
 80064c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064c8:	0711      	lsls	r1, r2, #28
 80064ca:	bf44      	itt	mi
 80064cc:	232b      	movmi	r3, #43	@ 0x2b
 80064ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064d2:	f89a 3000 	ldrb.w	r3, [sl]
 80064d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80064d8:	d015      	beq.n	8006506 <_svfiprintf_r+0xfa>
 80064da:	9a07      	ldr	r2, [sp, #28]
 80064dc:	4654      	mov	r4, sl
 80064de:	2000      	movs	r0, #0
 80064e0:	f04f 0c0a 	mov.w	ip, #10
 80064e4:	4621      	mov	r1, r4
 80064e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ea:	3b30      	subs	r3, #48	@ 0x30
 80064ec:	2b09      	cmp	r3, #9
 80064ee:	d94b      	bls.n	8006588 <_svfiprintf_r+0x17c>
 80064f0:	b1b0      	cbz	r0, 8006520 <_svfiprintf_r+0x114>
 80064f2:	9207      	str	r2, [sp, #28]
 80064f4:	e014      	b.n	8006520 <_svfiprintf_r+0x114>
 80064f6:	eba0 0308 	sub.w	r3, r0, r8
 80064fa:	fa09 f303 	lsl.w	r3, r9, r3
 80064fe:	4313      	orrs	r3, r2
 8006500:	9304      	str	r3, [sp, #16]
 8006502:	46a2      	mov	sl, r4
 8006504:	e7d2      	b.n	80064ac <_svfiprintf_r+0xa0>
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	1d19      	adds	r1, r3, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	9103      	str	r1, [sp, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	bfbb      	ittet	lt
 8006512:	425b      	neglt	r3, r3
 8006514:	f042 0202 	orrlt.w	r2, r2, #2
 8006518:	9307      	strge	r3, [sp, #28]
 800651a:	9307      	strlt	r3, [sp, #28]
 800651c:	bfb8      	it	lt
 800651e:	9204      	strlt	r2, [sp, #16]
 8006520:	7823      	ldrb	r3, [r4, #0]
 8006522:	2b2e      	cmp	r3, #46	@ 0x2e
 8006524:	d10a      	bne.n	800653c <_svfiprintf_r+0x130>
 8006526:	7863      	ldrb	r3, [r4, #1]
 8006528:	2b2a      	cmp	r3, #42	@ 0x2a
 800652a:	d132      	bne.n	8006592 <_svfiprintf_r+0x186>
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	1d1a      	adds	r2, r3, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	9203      	str	r2, [sp, #12]
 8006534:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006538:	3402      	adds	r4, #2
 800653a:	9305      	str	r3, [sp, #20]
 800653c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006600 <_svfiprintf_r+0x1f4>
 8006540:	7821      	ldrb	r1, [r4, #0]
 8006542:	2203      	movs	r2, #3
 8006544:	4650      	mov	r0, sl
 8006546:	f7f9 fe4b 	bl	80001e0 <memchr>
 800654a:	b138      	cbz	r0, 800655c <_svfiprintf_r+0x150>
 800654c:	9b04      	ldr	r3, [sp, #16]
 800654e:	eba0 000a 	sub.w	r0, r0, sl
 8006552:	2240      	movs	r2, #64	@ 0x40
 8006554:	4082      	lsls	r2, r0
 8006556:	4313      	orrs	r3, r2
 8006558:	3401      	adds	r4, #1
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006560:	4824      	ldr	r0, [pc, #144]	@ (80065f4 <_svfiprintf_r+0x1e8>)
 8006562:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006566:	2206      	movs	r2, #6
 8006568:	f7f9 fe3a 	bl	80001e0 <memchr>
 800656c:	2800      	cmp	r0, #0
 800656e:	d036      	beq.n	80065de <_svfiprintf_r+0x1d2>
 8006570:	4b21      	ldr	r3, [pc, #132]	@ (80065f8 <_svfiprintf_r+0x1ec>)
 8006572:	bb1b      	cbnz	r3, 80065bc <_svfiprintf_r+0x1b0>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	3307      	adds	r3, #7
 8006578:	f023 0307 	bic.w	r3, r3, #7
 800657c:	3308      	adds	r3, #8
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006582:	4433      	add	r3, r6
 8006584:	9309      	str	r3, [sp, #36]	@ 0x24
 8006586:	e76a      	b.n	800645e <_svfiprintf_r+0x52>
 8006588:	fb0c 3202 	mla	r2, ip, r2, r3
 800658c:	460c      	mov	r4, r1
 800658e:	2001      	movs	r0, #1
 8006590:	e7a8      	b.n	80064e4 <_svfiprintf_r+0xd8>
 8006592:	2300      	movs	r3, #0
 8006594:	3401      	adds	r4, #1
 8006596:	9305      	str	r3, [sp, #20]
 8006598:	4619      	mov	r1, r3
 800659a:	f04f 0c0a 	mov.w	ip, #10
 800659e:	4620      	mov	r0, r4
 80065a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065a4:	3a30      	subs	r2, #48	@ 0x30
 80065a6:	2a09      	cmp	r2, #9
 80065a8:	d903      	bls.n	80065b2 <_svfiprintf_r+0x1a6>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0c6      	beq.n	800653c <_svfiprintf_r+0x130>
 80065ae:	9105      	str	r1, [sp, #20]
 80065b0:	e7c4      	b.n	800653c <_svfiprintf_r+0x130>
 80065b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80065b6:	4604      	mov	r4, r0
 80065b8:	2301      	movs	r3, #1
 80065ba:	e7f0      	b.n	800659e <_svfiprintf_r+0x192>
 80065bc:	ab03      	add	r3, sp, #12
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	462a      	mov	r2, r5
 80065c2:	4b0e      	ldr	r3, [pc, #56]	@ (80065fc <_svfiprintf_r+0x1f0>)
 80065c4:	a904      	add	r1, sp, #16
 80065c6:	4638      	mov	r0, r7
 80065c8:	f3af 8000 	nop.w
 80065cc:	1c42      	adds	r2, r0, #1
 80065ce:	4606      	mov	r6, r0
 80065d0:	d1d6      	bne.n	8006580 <_svfiprintf_r+0x174>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	065b      	lsls	r3, r3, #25
 80065d6:	f53f af2d 	bmi.w	8006434 <_svfiprintf_r+0x28>
 80065da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065dc:	e72c      	b.n	8006438 <_svfiprintf_r+0x2c>
 80065de:	ab03      	add	r3, sp, #12
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	462a      	mov	r2, r5
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <_svfiprintf_r+0x1f0>)
 80065e6:	a904      	add	r1, sp, #16
 80065e8:	4638      	mov	r0, r7
 80065ea:	f000 f879 	bl	80066e0 <_printf_i>
 80065ee:	e7ed      	b.n	80065cc <_svfiprintf_r+0x1c0>
 80065f0:	08007497 	.word	0x08007497
 80065f4:	080074a1 	.word	0x080074a1
 80065f8:	00000000 	.word	0x00000000
 80065fc:	08006355 	.word	0x08006355
 8006600:	0800749d 	.word	0x0800749d

08006604 <_printf_common>:
 8006604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	4616      	mov	r6, r2
 800660a:	4698      	mov	r8, r3
 800660c:	688a      	ldr	r2, [r1, #8]
 800660e:	690b      	ldr	r3, [r1, #16]
 8006610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006614:	4293      	cmp	r3, r2
 8006616:	bfb8      	it	lt
 8006618:	4613      	movlt	r3, r2
 800661a:	6033      	str	r3, [r6, #0]
 800661c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006620:	4607      	mov	r7, r0
 8006622:	460c      	mov	r4, r1
 8006624:	b10a      	cbz	r2, 800662a <_printf_common+0x26>
 8006626:	3301      	adds	r3, #1
 8006628:	6033      	str	r3, [r6, #0]
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	0699      	lsls	r1, r3, #26
 800662e:	bf42      	ittt	mi
 8006630:	6833      	ldrmi	r3, [r6, #0]
 8006632:	3302      	addmi	r3, #2
 8006634:	6033      	strmi	r3, [r6, #0]
 8006636:	6825      	ldr	r5, [r4, #0]
 8006638:	f015 0506 	ands.w	r5, r5, #6
 800663c:	d106      	bne.n	800664c <_printf_common+0x48>
 800663e:	f104 0a19 	add.w	sl, r4, #25
 8006642:	68e3      	ldr	r3, [r4, #12]
 8006644:	6832      	ldr	r2, [r6, #0]
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	42ab      	cmp	r3, r5
 800664a:	dc26      	bgt.n	800669a <_printf_common+0x96>
 800664c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006650:	6822      	ldr	r2, [r4, #0]
 8006652:	3b00      	subs	r3, #0
 8006654:	bf18      	it	ne
 8006656:	2301      	movne	r3, #1
 8006658:	0692      	lsls	r2, r2, #26
 800665a:	d42b      	bmi.n	80066b4 <_printf_common+0xb0>
 800665c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006660:	4641      	mov	r1, r8
 8006662:	4638      	mov	r0, r7
 8006664:	47c8      	blx	r9
 8006666:	3001      	adds	r0, #1
 8006668:	d01e      	beq.n	80066a8 <_printf_common+0xa4>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	6922      	ldr	r2, [r4, #16]
 800666e:	f003 0306 	and.w	r3, r3, #6
 8006672:	2b04      	cmp	r3, #4
 8006674:	bf02      	ittt	eq
 8006676:	68e5      	ldreq	r5, [r4, #12]
 8006678:	6833      	ldreq	r3, [r6, #0]
 800667a:	1aed      	subeq	r5, r5, r3
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	bf0c      	ite	eq
 8006680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006684:	2500      	movne	r5, #0
 8006686:	4293      	cmp	r3, r2
 8006688:	bfc4      	itt	gt
 800668a:	1a9b      	subgt	r3, r3, r2
 800668c:	18ed      	addgt	r5, r5, r3
 800668e:	2600      	movs	r6, #0
 8006690:	341a      	adds	r4, #26
 8006692:	42b5      	cmp	r5, r6
 8006694:	d11a      	bne.n	80066cc <_printf_common+0xc8>
 8006696:	2000      	movs	r0, #0
 8006698:	e008      	b.n	80066ac <_printf_common+0xa8>
 800669a:	2301      	movs	r3, #1
 800669c:	4652      	mov	r2, sl
 800669e:	4641      	mov	r1, r8
 80066a0:	4638      	mov	r0, r7
 80066a2:	47c8      	blx	r9
 80066a4:	3001      	adds	r0, #1
 80066a6:	d103      	bne.n	80066b0 <_printf_common+0xac>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b0:	3501      	adds	r5, #1
 80066b2:	e7c6      	b.n	8006642 <_printf_common+0x3e>
 80066b4:	18e1      	adds	r1, r4, r3
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	2030      	movs	r0, #48	@ 0x30
 80066ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066be:	4422      	add	r2, r4
 80066c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066c8:	3302      	adds	r3, #2
 80066ca:	e7c7      	b.n	800665c <_printf_common+0x58>
 80066cc:	2301      	movs	r3, #1
 80066ce:	4622      	mov	r2, r4
 80066d0:	4641      	mov	r1, r8
 80066d2:	4638      	mov	r0, r7
 80066d4:	47c8      	blx	r9
 80066d6:	3001      	adds	r0, #1
 80066d8:	d0e6      	beq.n	80066a8 <_printf_common+0xa4>
 80066da:	3601      	adds	r6, #1
 80066dc:	e7d9      	b.n	8006692 <_printf_common+0x8e>
	...

080066e0 <_printf_i>:
 80066e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	7e0f      	ldrb	r7, [r1, #24]
 80066e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066e8:	2f78      	cmp	r7, #120	@ 0x78
 80066ea:	4691      	mov	r9, r2
 80066ec:	4680      	mov	r8, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	469a      	mov	sl, r3
 80066f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066f6:	d807      	bhi.n	8006708 <_printf_i+0x28>
 80066f8:	2f62      	cmp	r7, #98	@ 0x62
 80066fa:	d80a      	bhi.n	8006712 <_printf_i+0x32>
 80066fc:	2f00      	cmp	r7, #0
 80066fe:	f000 80d2 	beq.w	80068a6 <_printf_i+0x1c6>
 8006702:	2f58      	cmp	r7, #88	@ 0x58
 8006704:	f000 80b9 	beq.w	800687a <_printf_i+0x19a>
 8006708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800670c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006710:	e03a      	b.n	8006788 <_printf_i+0xa8>
 8006712:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006716:	2b15      	cmp	r3, #21
 8006718:	d8f6      	bhi.n	8006708 <_printf_i+0x28>
 800671a:	a101      	add	r1, pc, #4	@ (adr r1, 8006720 <_printf_i+0x40>)
 800671c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006720:	08006779 	.word	0x08006779
 8006724:	0800678d 	.word	0x0800678d
 8006728:	08006709 	.word	0x08006709
 800672c:	08006709 	.word	0x08006709
 8006730:	08006709 	.word	0x08006709
 8006734:	08006709 	.word	0x08006709
 8006738:	0800678d 	.word	0x0800678d
 800673c:	08006709 	.word	0x08006709
 8006740:	08006709 	.word	0x08006709
 8006744:	08006709 	.word	0x08006709
 8006748:	08006709 	.word	0x08006709
 800674c:	0800688d 	.word	0x0800688d
 8006750:	080067b7 	.word	0x080067b7
 8006754:	08006847 	.word	0x08006847
 8006758:	08006709 	.word	0x08006709
 800675c:	08006709 	.word	0x08006709
 8006760:	080068af 	.word	0x080068af
 8006764:	08006709 	.word	0x08006709
 8006768:	080067b7 	.word	0x080067b7
 800676c:	08006709 	.word	0x08006709
 8006770:	08006709 	.word	0x08006709
 8006774:	0800684f 	.word	0x0800684f
 8006778:	6833      	ldr	r3, [r6, #0]
 800677a:	1d1a      	adds	r2, r3, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6032      	str	r2, [r6, #0]
 8006780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006788:	2301      	movs	r3, #1
 800678a:	e09d      	b.n	80068c8 <_printf_i+0x1e8>
 800678c:	6833      	ldr	r3, [r6, #0]
 800678e:	6820      	ldr	r0, [r4, #0]
 8006790:	1d19      	adds	r1, r3, #4
 8006792:	6031      	str	r1, [r6, #0]
 8006794:	0606      	lsls	r6, r0, #24
 8006796:	d501      	bpl.n	800679c <_printf_i+0xbc>
 8006798:	681d      	ldr	r5, [r3, #0]
 800679a:	e003      	b.n	80067a4 <_printf_i+0xc4>
 800679c:	0645      	lsls	r5, r0, #25
 800679e:	d5fb      	bpl.n	8006798 <_printf_i+0xb8>
 80067a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067a4:	2d00      	cmp	r5, #0
 80067a6:	da03      	bge.n	80067b0 <_printf_i+0xd0>
 80067a8:	232d      	movs	r3, #45	@ 0x2d
 80067aa:	426d      	negs	r5, r5
 80067ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067b0:	4859      	ldr	r0, [pc, #356]	@ (8006918 <_printf_i+0x238>)
 80067b2:	230a      	movs	r3, #10
 80067b4:	e011      	b.n	80067da <_printf_i+0xfa>
 80067b6:	6821      	ldr	r1, [r4, #0]
 80067b8:	6833      	ldr	r3, [r6, #0]
 80067ba:	0608      	lsls	r0, r1, #24
 80067bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80067c0:	d402      	bmi.n	80067c8 <_printf_i+0xe8>
 80067c2:	0649      	lsls	r1, r1, #25
 80067c4:	bf48      	it	mi
 80067c6:	b2ad      	uxthmi	r5, r5
 80067c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80067ca:	4853      	ldr	r0, [pc, #332]	@ (8006918 <_printf_i+0x238>)
 80067cc:	6033      	str	r3, [r6, #0]
 80067ce:	bf14      	ite	ne
 80067d0:	230a      	movne	r3, #10
 80067d2:	2308      	moveq	r3, #8
 80067d4:	2100      	movs	r1, #0
 80067d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067da:	6866      	ldr	r6, [r4, #4]
 80067dc:	60a6      	str	r6, [r4, #8]
 80067de:	2e00      	cmp	r6, #0
 80067e0:	bfa2      	ittt	ge
 80067e2:	6821      	ldrge	r1, [r4, #0]
 80067e4:	f021 0104 	bicge.w	r1, r1, #4
 80067e8:	6021      	strge	r1, [r4, #0]
 80067ea:	b90d      	cbnz	r5, 80067f0 <_printf_i+0x110>
 80067ec:	2e00      	cmp	r6, #0
 80067ee:	d04b      	beq.n	8006888 <_printf_i+0x1a8>
 80067f0:	4616      	mov	r6, r2
 80067f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80067f6:	fb03 5711 	mls	r7, r3, r1, r5
 80067fa:	5dc7      	ldrb	r7, [r0, r7]
 80067fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006800:	462f      	mov	r7, r5
 8006802:	42bb      	cmp	r3, r7
 8006804:	460d      	mov	r5, r1
 8006806:	d9f4      	bls.n	80067f2 <_printf_i+0x112>
 8006808:	2b08      	cmp	r3, #8
 800680a:	d10b      	bne.n	8006824 <_printf_i+0x144>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	07df      	lsls	r7, r3, #31
 8006810:	d508      	bpl.n	8006824 <_printf_i+0x144>
 8006812:	6923      	ldr	r3, [r4, #16]
 8006814:	6861      	ldr	r1, [r4, #4]
 8006816:	4299      	cmp	r1, r3
 8006818:	bfde      	ittt	le
 800681a:	2330      	movle	r3, #48	@ 0x30
 800681c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006820:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006824:	1b92      	subs	r2, r2, r6
 8006826:	6122      	str	r2, [r4, #16]
 8006828:	f8cd a000 	str.w	sl, [sp]
 800682c:	464b      	mov	r3, r9
 800682e:	aa03      	add	r2, sp, #12
 8006830:	4621      	mov	r1, r4
 8006832:	4640      	mov	r0, r8
 8006834:	f7ff fee6 	bl	8006604 <_printf_common>
 8006838:	3001      	adds	r0, #1
 800683a:	d14a      	bne.n	80068d2 <_printf_i+0x1f2>
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	b004      	add	sp, #16
 8006842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	f043 0320 	orr.w	r3, r3, #32
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	4833      	ldr	r0, [pc, #204]	@ (800691c <_printf_i+0x23c>)
 8006850:	2778      	movs	r7, #120	@ 0x78
 8006852:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	6831      	ldr	r1, [r6, #0]
 800685a:	061f      	lsls	r7, r3, #24
 800685c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006860:	d402      	bmi.n	8006868 <_printf_i+0x188>
 8006862:	065f      	lsls	r7, r3, #25
 8006864:	bf48      	it	mi
 8006866:	b2ad      	uxthmi	r5, r5
 8006868:	6031      	str	r1, [r6, #0]
 800686a:	07d9      	lsls	r1, r3, #31
 800686c:	bf44      	itt	mi
 800686e:	f043 0320 	orrmi.w	r3, r3, #32
 8006872:	6023      	strmi	r3, [r4, #0]
 8006874:	b11d      	cbz	r5, 800687e <_printf_i+0x19e>
 8006876:	2310      	movs	r3, #16
 8006878:	e7ac      	b.n	80067d4 <_printf_i+0xf4>
 800687a:	4827      	ldr	r0, [pc, #156]	@ (8006918 <_printf_i+0x238>)
 800687c:	e7e9      	b.n	8006852 <_printf_i+0x172>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	f023 0320 	bic.w	r3, r3, #32
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	e7f6      	b.n	8006876 <_printf_i+0x196>
 8006888:	4616      	mov	r6, r2
 800688a:	e7bd      	b.n	8006808 <_printf_i+0x128>
 800688c:	6833      	ldr	r3, [r6, #0]
 800688e:	6825      	ldr	r5, [r4, #0]
 8006890:	6961      	ldr	r1, [r4, #20]
 8006892:	1d18      	adds	r0, r3, #4
 8006894:	6030      	str	r0, [r6, #0]
 8006896:	062e      	lsls	r6, r5, #24
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	d501      	bpl.n	80068a0 <_printf_i+0x1c0>
 800689c:	6019      	str	r1, [r3, #0]
 800689e:	e002      	b.n	80068a6 <_printf_i+0x1c6>
 80068a0:	0668      	lsls	r0, r5, #25
 80068a2:	d5fb      	bpl.n	800689c <_printf_i+0x1bc>
 80068a4:	8019      	strh	r1, [r3, #0]
 80068a6:	2300      	movs	r3, #0
 80068a8:	6123      	str	r3, [r4, #16]
 80068aa:	4616      	mov	r6, r2
 80068ac:	e7bc      	b.n	8006828 <_printf_i+0x148>
 80068ae:	6833      	ldr	r3, [r6, #0]
 80068b0:	1d1a      	adds	r2, r3, #4
 80068b2:	6032      	str	r2, [r6, #0]
 80068b4:	681e      	ldr	r6, [r3, #0]
 80068b6:	6862      	ldr	r2, [r4, #4]
 80068b8:	2100      	movs	r1, #0
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7f9 fc90 	bl	80001e0 <memchr>
 80068c0:	b108      	cbz	r0, 80068c6 <_printf_i+0x1e6>
 80068c2:	1b80      	subs	r0, r0, r6
 80068c4:	6060      	str	r0, [r4, #4]
 80068c6:	6863      	ldr	r3, [r4, #4]
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	2300      	movs	r3, #0
 80068cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068d0:	e7aa      	b.n	8006828 <_printf_i+0x148>
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	4632      	mov	r2, r6
 80068d6:	4649      	mov	r1, r9
 80068d8:	4640      	mov	r0, r8
 80068da:	47d0      	blx	sl
 80068dc:	3001      	adds	r0, #1
 80068de:	d0ad      	beq.n	800683c <_printf_i+0x15c>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	079b      	lsls	r3, r3, #30
 80068e4:	d413      	bmi.n	800690e <_printf_i+0x22e>
 80068e6:	68e0      	ldr	r0, [r4, #12]
 80068e8:	9b03      	ldr	r3, [sp, #12]
 80068ea:	4298      	cmp	r0, r3
 80068ec:	bfb8      	it	lt
 80068ee:	4618      	movlt	r0, r3
 80068f0:	e7a6      	b.n	8006840 <_printf_i+0x160>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4632      	mov	r2, r6
 80068f6:	4649      	mov	r1, r9
 80068f8:	4640      	mov	r0, r8
 80068fa:	47d0      	blx	sl
 80068fc:	3001      	adds	r0, #1
 80068fe:	d09d      	beq.n	800683c <_printf_i+0x15c>
 8006900:	3501      	adds	r5, #1
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	9903      	ldr	r1, [sp, #12]
 8006906:	1a5b      	subs	r3, r3, r1
 8006908:	42ab      	cmp	r3, r5
 800690a:	dcf2      	bgt.n	80068f2 <_printf_i+0x212>
 800690c:	e7eb      	b.n	80068e6 <_printf_i+0x206>
 800690e:	2500      	movs	r5, #0
 8006910:	f104 0619 	add.w	r6, r4, #25
 8006914:	e7f5      	b.n	8006902 <_printf_i+0x222>
 8006916:	bf00      	nop
 8006918:	080074a8 	.word	0x080074a8
 800691c:	080074b9 	.word	0x080074b9

08006920 <__sflush_r>:
 8006920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006928:	0716      	lsls	r6, r2, #28
 800692a:	4605      	mov	r5, r0
 800692c:	460c      	mov	r4, r1
 800692e:	d454      	bmi.n	80069da <__sflush_r+0xba>
 8006930:	684b      	ldr	r3, [r1, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	dc02      	bgt.n	800693c <__sflush_r+0x1c>
 8006936:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	dd48      	ble.n	80069ce <__sflush_r+0xae>
 800693c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800693e:	2e00      	cmp	r6, #0
 8006940:	d045      	beq.n	80069ce <__sflush_r+0xae>
 8006942:	2300      	movs	r3, #0
 8006944:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006948:	682f      	ldr	r7, [r5, #0]
 800694a:	6a21      	ldr	r1, [r4, #32]
 800694c:	602b      	str	r3, [r5, #0]
 800694e:	d030      	beq.n	80069b2 <__sflush_r+0x92>
 8006950:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	0759      	lsls	r1, r3, #29
 8006956:	d505      	bpl.n	8006964 <__sflush_r+0x44>
 8006958:	6863      	ldr	r3, [r4, #4]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800695e:	b10b      	cbz	r3, 8006964 <__sflush_r+0x44>
 8006960:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006962:	1ad2      	subs	r2, r2, r3
 8006964:	2300      	movs	r3, #0
 8006966:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006968:	6a21      	ldr	r1, [r4, #32]
 800696a:	4628      	mov	r0, r5
 800696c:	47b0      	blx	r6
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	d106      	bne.n	8006982 <__sflush_r+0x62>
 8006974:	6829      	ldr	r1, [r5, #0]
 8006976:	291d      	cmp	r1, #29
 8006978:	d82b      	bhi.n	80069d2 <__sflush_r+0xb2>
 800697a:	4a2a      	ldr	r2, [pc, #168]	@ (8006a24 <__sflush_r+0x104>)
 800697c:	410a      	asrs	r2, r1
 800697e:	07d6      	lsls	r6, r2, #31
 8006980:	d427      	bmi.n	80069d2 <__sflush_r+0xb2>
 8006982:	2200      	movs	r2, #0
 8006984:	6062      	str	r2, [r4, #4]
 8006986:	04d9      	lsls	r1, r3, #19
 8006988:	6922      	ldr	r2, [r4, #16]
 800698a:	6022      	str	r2, [r4, #0]
 800698c:	d504      	bpl.n	8006998 <__sflush_r+0x78>
 800698e:	1c42      	adds	r2, r0, #1
 8006990:	d101      	bne.n	8006996 <__sflush_r+0x76>
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	b903      	cbnz	r3, 8006998 <__sflush_r+0x78>
 8006996:	6560      	str	r0, [r4, #84]	@ 0x54
 8006998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800699a:	602f      	str	r7, [r5, #0]
 800699c:	b1b9      	cbz	r1, 80069ce <__sflush_r+0xae>
 800699e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069a2:	4299      	cmp	r1, r3
 80069a4:	d002      	beq.n	80069ac <__sflush_r+0x8c>
 80069a6:	4628      	mov	r0, r5
 80069a8:	f7ff fbd4 	bl	8006154 <_free_r>
 80069ac:	2300      	movs	r3, #0
 80069ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80069b0:	e00d      	b.n	80069ce <__sflush_r+0xae>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b0      	blx	r6
 80069b8:	4602      	mov	r2, r0
 80069ba:	1c50      	adds	r0, r2, #1
 80069bc:	d1c9      	bne.n	8006952 <__sflush_r+0x32>
 80069be:	682b      	ldr	r3, [r5, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0c6      	beq.n	8006952 <__sflush_r+0x32>
 80069c4:	2b1d      	cmp	r3, #29
 80069c6:	d001      	beq.n	80069cc <__sflush_r+0xac>
 80069c8:	2b16      	cmp	r3, #22
 80069ca:	d11e      	bne.n	8006a0a <__sflush_r+0xea>
 80069cc:	602f      	str	r7, [r5, #0]
 80069ce:	2000      	movs	r0, #0
 80069d0:	e022      	b.n	8006a18 <__sflush_r+0xf8>
 80069d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d6:	b21b      	sxth	r3, r3
 80069d8:	e01b      	b.n	8006a12 <__sflush_r+0xf2>
 80069da:	690f      	ldr	r7, [r1, #16]
 80069dc:	2f00      	cmp	r7, #0
 80069de:	d0f6      	beq.n	80069ce <__sflush_r+0xae>
 80069e0:	0793      	lsls	r3, r2, #30
 80069e2:	680e      	ldr	r6, [r1, #0]
 80069e4:	bf08      	it	eq
 80069e6:	694b      	ldreq	r3, [r1, #20]
 80069e8:	600f      	str	r7, [r1, #0]
 80069ea:	bf18      	it	ne
 80069ec:	2300      	movne	r3, #0
 80069ee:	eba6 0807 	sub.w	r8, r6, r7
 80069f2:	608b      	str	r3, [r1, #8]
 80069f4:	f1b8 0f00 	cmp.w	r8, #0
 80069f8:	dde9      	ble.n	80069ce <__sflush_r+0xae>
 80069fa:	6a21      	ldr	r1, [r4, #32]
 80069fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069fe:	4643      	mov	r3, r8
 8006a00:	463a      	mov	r2, r7
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b0      	blx	r6
 8006a06:	2800      	cmp	r0, #0
 8006a08:	dc08      	bgt.n	8006a1c <__sflush_r+0xfc>
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a12:	81a3      	strh	r3, [r4, #12]
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295
 8006a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1c:	4407      	add	r7, r0
 8006a1e:	eba8 0800 	sub.w	r8, r8, r0
 8006a22:	e7e7      	b.n	80069f4 <__sflush_r+0xd4>
 8006a24:	dfbffffe 	.word	0xdfbffffe

08006a28 <_fflush_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	690b      	ldr	r3, [r1, #16]
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	b913      	cbnz	r3, 8006a38 <_fflush_r+0x10>
 8006a32:	2500      	movs	r5, #0
 8006a34:	4628      	mov	r0, r5
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	b118      	cbz	r0, 8006a42 <_fflush_r+0x1a>
 8006a3a:	6a03      	ldr	r3, [r0, #32]
 8006a3c:	b90b      	cbnz	r3, 8006a42 <_fflush_r+0x1a>
 8006a3e:	f7ff fa21 	bl	8005e84 <__sinit>
 8006a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f3      	beq.n	8006a32 <_fflush_r+0xa>
 8006a4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a4c:	07d0      	lsls	r0, r2, #31
 8006a4e:	d404      	bmi.n	8006a5a <_fflush_r+0x32>
 8006a50:	0599      	lsls	r1, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_fflush_r+0x32>
 8006a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a56:	f7ff fb4e 	bl	80060f6 <__retarget_lock_acquire_recursive>
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	f7ff ff5f 	bl	8006920 <__sflush_r>
 8006a62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a64:	07da      	lsls	r2, r3, #31
 8006a66:	4605      	mov	r5, r0
 8006a68:	d4e4      	bmi.n	8006a34 <_fflush_r+0xc>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	059b      	lsls	r3, r3, #22
 8006a6e:	d4e1      	bmi.n	8006a34 <_fflush_r+0xc>
 8006a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a72:	f7ff fb41 	bl	80060f8 <__retarget_lock_release_recursive>
 8006a76:	e7dd      	b.n	8006a34 <_fflush_r+0xc>

08006a78 <fiprintf>:
 8006a78:	b40e      	push	{r1, r2, r3}
 8006a7a:	b503      	push	{r0, r1, lr}
 8006a7c:	4601      	mov	r1, r0
 8006a7e:	ab03      	add	r3, sp, #12
 8006a80:	4805      	ldr	r0, [pc, #20]	@ (8006a98 <fiprintf+0x20>)
 8006a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	f000 f88f 	bl	8006bac <_vfiprintf_r>
 8006a8e:	b002      	add	sp, #8
 8006a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a94:	b003      	add	sp, #12
 8006a96:	4770      	bx	lr
 8006a98:	2000003c 	.word	0x2000003c

08006a9c <memmove>:
 8006a9c:	4288      	cmp	r0, r1
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	eb01 0402 	add.w	r4, r1, r2
 8006aa4:	d902      	bls.n	8006aac <memmove+0x10>
 8006aa6:	4284      	cmp	r4, r0
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	d807      	bhi.n	8006abc <memmove+0x20>
 8006aac:	1e43      	subs	r3, r0, #1
 8006aae:	42a1      	cmp	r1, r4
 8006ab0:	d008      	beq.n	8006ac4 <memmove+0x28>
 8006ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006aba:	e7f8      	b.n	8006aae <memmove+0x12>
 8006abc:	4402      	add	r2, r0
 8006abe:	4601      	mov	r1, r0
 8006ac0:	428a      	cmp	r2, r1
 8006ac2:	d100      	bne.n	8006ac6 <memmove+0x2a>
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ace:	e7f7      	b.n	8006ac0 <memmove+0x24>

08006ad0 <_sbrk_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d06      	ldr	r5, [pc, #24]	@ (8006aec <_sbrk_r+0x1c>)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fb faa2 	bl	8002024 <_sbrk>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_sbrk_r+0x1a>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_sbrk_r+0x1a>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	2000235c 	.word	0x2000235c

08006af0 <abort>:
 8006af0:	b508      	push	{r3, lr}
 8006af2:	2006      	movs	r0, #6
 8006af4:	f000 fa2e 	bl	8006f54 <raise>
 8006af8:	2001      	movs	r0, #1
 8006afa:	f7fb fa1b 	bl	8001f34 <_exit>

08006afe <_realloc_r>:
 8006afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b02:	4680      	mov	r8, r0
 8006b04:	4615      	mov	r5, r2
 8006b06:	460c      	mov	r4, r1
 8006b08:	b921      	cbnz	r1, 8006b14 <_realloc_r+0x16>
 8006b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	4611      	mov	r1, r2
 8006b10:	f7ff bb94 	b.w	800623c <_malloc_r>
 8006b14:	b92a      	cbnz	r2, 8006b22 <_realloc_r+0x24>
 8006b16:	f7ff fb1d 	bl	8006154 <_free_r>
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b22:	f000 fa33 	bl	8006f8c <_malloc_usable_size_r>
 8006b26:	4285      	cmp	r5, r0
 8006b28:	4606      	mov	r6, r0
 8006b2a:	d802      	bhi.n	8006b32 <_realloc_r+0x34>
 8006b2c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b30:	d8f4      	bhi.n	8006b1c <_realloc_r+0x1e>
 8006b32:	4629      	mov	r1, r5
 8006b34:	4640      	mov	r0, r8
 8006b36:	f7ff fb81 	bl	800623c <_malloc_r>
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d0ec      	beq.n	8006b1a <_realloc_r+0x1c>
 8006b40:	42b5      	cmp	r5, r6
 8006b42:	462a      	mov	r2, r5
 8006b44:	4621      	mov	r1, r4
 8006b46:	bf28      	it	cs
 8006b48:	4632      	movcs	r2, r6
 8006b4a:	f7ff fad6 	bl	80060fa <memcpy>
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4640      	mov	r0, r8
 8006b52:	f7ff faff 	bl	8006154 <_free_r>
 8006b56:	463c      	mov	r4, r7
 8006b58:	e7e0      	b.n	8006b1c <_realloc_r+0x1e>

08006b5a <__sfputc_r>:
 8006b5a:	6893      	ldr	r3, [r2, #8]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	b410      	push	{r4}
 8006b62:	6093      	str	r3, [r2, #8]
 8006b64:	da08      	bge.n	8006b78 <__sfputc_r+0x1e>
 8006b66:	6994      	ldr	r4, [r2, #24]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	db01      	blt.n	8006b70 <__sfputc_r+0x16>
 8006b6c:	290a      	cmp	r1, #10
 8006b6e:	d103      	bne.n	8006b78 <__sfputc_r+0x1e>
 8006b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b74:	f000 b932 	b.w	8006ddc <__swbuf_r>
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	1c58      	adds	r0, r3, #1
 8006b7c:	6010      	str	r0, [r2, #0]
 8006b7e:	7019      	strb	r1, [r3, #0]
 8006b80:	4608      	mov	r0, r1
 8006b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <__sfputs_r>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	4614      	mov	r4, r2
 8006b90:	18d5      	adds	r5, r2, r3
 8006b92:	42ac      	cmp	r4, r5
 8006b94:	d101      	bne.n	8006b9a <__sfputs_r+0x12>
 8006b96:	2000      	movs	r0, #0
 8006b98:	e007      	b.n	8006baa <__sfputs_r+0x22>
 8006b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff ffda 	bl	8006b5a <__sfputc_r>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d1f3      	bne.n	8006b92 <__sfputs_r+0xa>
 8006baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bac <_vfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	b09d      	sub	sp, #116	@ 0x74
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	4698      	mov	r8, r3
 8006bb8:	4606      	mov	r6, r0
 8006bba:	b118      	cbz	r0, 8006bc4 <_vfiprintf_r+0x18>
 8006bbc:	6a03      	ldr	r3, [r0, #32]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x18>
 8006bc0:	f7ff f960 	bl	8005e84 <__sinit>
 8006bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bc6:	07d9      	lsls	r1, r3, #31
 8006bc8:	d405      	bmi.n	8006bd6 <_vfiprintf_r+0x2a>
 8006bca:	89ab      	ldrh	r3, [r5, #12]
 8006bcc:	059a      	lsls	r2, r3, #22
 8006bce:	d402      	bmi.n	8006bd6 <_vfiprintf_r+0x2a>
 8006bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bd2:	f7ff fa90 	bl	80060f6 <__retarget_lock_acquire_recursive>
 8006bd6:	89ab      	ldrh	r3, [r5, #12]
 8006bd8:	071b      	lsls	r3, r3, #28
 8006bda:	d501      	bpl.n	8006be0 <_vfiprintf_r+0x34>
 8006bdc:	692b      	ldr	r3, [r5, #16]
 8006bde:	b99b      	cbnz	r3, 8006c08 <_vfiprintf_r+0x5c>
 8006be0:	4629      	mov	r1, r5
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f938 	bl	8006e58 <__swsetup_r>
 8006be8:	b170      	cbz	r0, 8006c08 <_vfiprintf_r+0x5c>
 8006bea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bec:	07dc      	lsls	r4, r3, #31
 8006bee:	d504      	bpl.n	8006bfa <_vfiprintf_r+0x4e>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	b01d      	add	sp, #116	@ 0x74
 8006bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfa:	89ab      	ldrh	r3, [r5, #12]
 8006bfc:	0598      	lsls	r0, r3, #22
 8006bfe:	d4f7      	bmi.n	8006bf0 <_vfiprintf_r+0x44>
 8006c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c02:	f7ff fa79 	bl	80060f8 <__retarget_lock_release_recursive>
 8006c06:	e7f3      	b.n	8006bf0 <_vfiprintf_r+0x44>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c16:	2330      	movs	r3, #48	@ 0x30
 8006c18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006dc8 <_vfiprintf_r+0x21c>
 8006c1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c20:	f04f 0901 	mov.w	r9, #1
 8006c24:	4623      	mov	r3, r4
 8006c26:	469a      	mov	sl, r3
 8006c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c2c:	b10a      	cbz	r2, 8006c32 <_vfiprintf_r+0x86>
 8006c2e:	2a25      	cmp	r2, #37	@ 0x25
 8006c30:	d1f9      	bne.n	8006c26 <_vfiprintf_r+0x7a>
 8006c32:	ebba 0b04 	subs.w	fp, sl, r4
 8006c36:	d00b      	beq.n	8006c50 <_vfiprintf_r+0xa4>
 8006c38:	465b      	mov	r3, fp
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f7ff ffa2 	bl	8006b88 <__sfputs_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	f000 80a7 	beq.w	8006d98 <_vfiprintf_r+0x1ec>
 8006c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c4c:	445a      	add	r2, fp
 8006c4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c50:	f89a 3000 	ldrb.w	r3, [sl]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 809f 	beq.w	8006d98 <_vfiprintf_r+0x1ec>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c64:	f10a 0a01 	add.w	sl, sl, #1
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	9307      	str	r3, [sp, #28]
 8006c6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c70:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c72:	4654      	mov	r4, sl
 8006c74:	2205      	movs	r2, #5
 8006c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7a:	4853      	ldr	r0, [pc, #332]	@ (8006dc8 <_vfiprintf_r+0x21c>)
 8006c7c:	f7f9 fab0 	bl	80001e0 <memchr>
 8006c80:	9a04      	ldr	r2, [sp, #16]
 8006c82:	b9d8      	cbnz	r0, 8006cbc <_vfiprintf_r+0x110>
 8006c84:	06d1      	lsls	r1, r2, #27
 8006c86:	bf44      	itt	mi
 8006c88:	2320      	movmi	r3, #32
 8006c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c8e:	0713      	lsls	r3, r2, #28
 8006c90:	bf44      	itt	mi
 8006c92:	232b      	movmi	r3, #43	@ 0x2b
 8006c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c98:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c9e:	d015      	beq.n	8006ccc <_vfiprintf_r+0x120>
 8006ca0:	9a07      	ldr	r2, [sp, #28]
 8006ca2:	4654      	mov	r4, sl
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	f04f 0c0a 	mov.w	ip, #10
 8006caa:	4621      	mov	r1, r4
 8006cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb0:	3b30      	subs	r3, #48	@ 0x30
 8006cb2:	2b09      	cmp	r3, #9
 8006cb4:	d94b      	bls.n	8006d4e <_vfiprintf_r+0x1a2>
 8006cb6:	b1b0      	cbz	r0, 8006ce6 <_vfiprintf_r+0x13a>
 8006cb8:	9207      	str	r2, [sp, #28]
 8006cba:	e014      	b.n	8006ce6 <_vfiprintf_r+0x13a>
 8006cbc:	eba0 0308 	sub.w	r3, r0, r8
 8006cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	9304      	str	r3, [sp, #16]
 8006cc8:	46a2      	mov	sl, r4
 8006cca:	e7d2      	b.n	8006c72 <_vfiprintf_r+0xc6>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1d19      	adds	r1, r3, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	9103      	str	r1, [sp, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bfbb      	ittet	lt
 8006cd8:	425b      	neglt	r3, r3
 8006cda:	f042 0202 	orrlt.w	r2, r2, #2
 8006cde:	9307      	strge	r3, [sp, #28]
 8006ce0:	9307      	strlt	r3, [sp, #28]
 8006ce2:	bfb8      	it	lt
 8006ce4:	9204      	strlt	r2, [sp, #16]
 8006ce6:	7823      	ldrb	r3, [r4, #0]
 8006ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cea:	d10a      	bne.n	8006d02 <_vfiprintf_r+0x156>
 8006cec:	7863      	ldrb	r3, [r4, #1]
 8006cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cf0:	d132      	bne.n	8006d58 <_vfiprintf_r+0x1ac>
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	1d1a      	adds	r2, r3, #4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	9203      	str	r2, [sp, #12]
 8006cfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cfe:	3402      	adds	r4, #2
 8006d00:	9305      	str	r3, [sp, #20]
 8006d02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006dd8 <_vfiprintf_r+0x22c>
 8006d06:	7821      	ldrb	r1, [r4, #0]
 8006d08:	2203      	movs	r2, #3
 8006d0a:	4650      	mov	r0, sl
 8006d0c:	f7f9 fa68 	bl	80001e0 <memchr>
 8006d10:	b138      	cbz	r0, 8006d22 <_vfiprintf_r+0x176>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	eba0 000a 	sub.w	r0, r0, sl
 8006d18:	2240      	movs	r2, #64	@ 0x40
 8006d1a:	4082      	lsls	r2, r0
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	3401      	adds	r4, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d26:	4829      	ldr	r0, [pc, #164]	@ (8006dcc <_vfiprintf_r+0x220>)
 8006d28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d2c:	2206      	movs	r2, #6
 8006d2e:	f7f9 fa57 	bl	80001e0 <memchr>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d03f      	beq.n	8006db6 <_vfiprintf_r+0x20a>
 8006d36:	4b26      	ldr	r3, [pc, #152]	@ (8006dd0 <_vfiprintf_r+0x224>)
 8006d38:	bb1b      	cbnz	r3, 8006d82 <_vfiprintf_r+0x1d6>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	3307      	adds	r3, #7
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	3308      	adds	r3, #8
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d48:	443b      	add	r3, r7
 8006d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4c:	e76a      	b.n	8006c24 <_vfiprintf_r+0x78>
 8006d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d52:	460c      	mov	r4, r1
 8006d54:	2001      	movs	r0, #1
 8006d56:	e7a8      	b.n	8006caa <_vfiprintf_r+0xfe>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f04f 0c0a 	mov.w	ip, #10
 8006d64:	4620      	mov	r0, r4
 8006d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6a:	3a30      	subs	r2, #48	@ 0x30
 8006d6c:	2a09      	cmp	r2, #9
 8006d6e:	d903      	bls.n	8006d78 <_vfiprintf_r+0x1cc>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0c6      	beq.n	8006d02 <_vfiprintf_r+0x156>
 8006d74:	9105      	str	r1, [sp, #20]
 8006d76:	e7c4      	b.n	8006d02 <_vfiprintf_r+0x156>
 8006d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e7f0      	b.n	8006d64 <_vfiprintf_r+0x1b8>
 8006d82:	ab03      	add	r3, sp, #12
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	462a      	mov	r2, r5
 8006d88:	4b12      	ldr	r3, [pc, #72]	@ (8006dd4 <_vfiprintf_r+0x228>)
 8006d8a:	a904      	add	r1, sp, #16
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f3af 8000 	nop.w
 8006d92:	4607      	mov	r7, r0
 8006d94:	1c78      	adds	r0, r7, #1
 8006d96:	d1d6      	bne.n	8006d46 <_vfiprintf_r+0x19a>
 8006d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d9a:	07d9      	lsls	r1, r3, #31
 8006d9c:	d405      	bmi.n	8006daa <_vfiprintf_r+0x1fe>
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	059a      	lsls	r2, r3, #22
 8006da2:	d402      	bmi.n	8006daa <_vfiprintf_r+0x1fe>
 8006da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006da6:	f7ff f9a7 	bl	80060f8 <__retarget_lock_release_recursive>
 8006daa:	89ab      	ldrh	r3, [r5, #12]
 8006dac:	065b      	lsls	r3, r3, #25
 8006dae:	f53f af1f 	bmi.w	8006bf0 <_vfiprintf_r+0x44>
 8006db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006db4:	e71e      	b.n	8006bf4 <_vfiprintf_r+0x48>
 8006db6:	ab03      	add	r3, sp, #12
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	462a      	mov	r2, r5
 8006dbc:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <_vfiprintf_r+0x228>)
 8006dbe:	a904      	add	r1, sp, #16
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff fc8d 	bl	80066e0 <_printf_i>
 8006dc6:	e7e4      	b.n	8006d92 <_vfiprintf_r+0x1e6>
 8006dc8:	08007497 	.word	0x08007497
 8006dcc:	080074a1 	.word	0x080074a1
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	08006b89 	.word	0x08006b89
 8006dd8:	0800749d 	.word	0x0800749d

08006ddc <__swbuf_r>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	460e      	mov	r6, r1
 8006de0:	4614      	mov	r4, r2
 8006de2:	4605      	mov	r5, r0
 8006de4:	b118      	cbz	r0, 8006dee <__swbuf_r+0x12>
 8006de6:	6a03      	ldr	r3, [r0, #32]
 8006de8:	b90b      	cbnz	r3, 8006dee <__swbuf_r+0x12>
 8006dea:	f7ff f84b 	bl	8005e84 <__sinit>
 8006dee:	69a3      	ldr	r3, [r4, #24]
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	071a      	lsls	r2, r3, #28
 8006df6:	d501      	bpl.n	8006dfc <__swbuf_r+0x20>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	b943      	cbnz	r3, 8006e0e <__swbuf_r+0x32>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f82a 	bl	8006e58 <__swsetup_r>
 8006e04:	b118      	cbz	r0, 8006e0e <__swbuf_r+0x32>
 8006e06:	f04f 37ff 	mov.w	r7, #4294967295
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	6922      	ldr	r2, [r4, #16]
 8006e12:	1a98      	subs	r0, r3, r2
 8006e14:	6963      	ldr	r3, [r4, #20]
 8006e16:	b2f6      	uxtb	r6, r6
 8006e18:	4283      	cmp	r3, r0
 8006e1a:	4637      	mov	r7, r6
 8006e1c:	dc05      	bgt.n	8006e2a <__swbuf_r+0x4e>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	f7ff fe01 	bl	8006a28 <_fflush_r>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d1ed      	bne.n	8006e06 <__swbuf_r+0x2a>
 8006e2a:	68a3      	ldr	r3, [r4, #8]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	60a3      	str	r3, [r4, #8]
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	6022      	str	r2, [r4, #0]
 8006e36:	701e      	strb	r6, [r3, #0]
 8006e38:	6962      	ldr	r2, [r4, #20]
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d004      	beq.n	8006e4a <__swbuf_r+0x6e>
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	07db      	lsls	r3, r3, #31
 8006e44:	d5e1      	bpl.n	8006e0a <__swbuf_r+0x2e>
 8006e46:	2e0a      	cmp	r6, #10
 8006e48:	d1df      	bne.n	8006e0a <__swbuf_r+0x2e>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f7ff fdeb 	bl	8006a28 <_fflush_r>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0d9      	beq.n	8006e0a <__swbuf_r+0x2e>
 8006e56:	e7d6      	b.n	8006e06 <__swbuf_r+0x2a>

08006e58 <__swsetup_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4b29      	ldr	r3, [pc, #164]	@ (8006f00 <__swsetup_r+0xa8>)
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	460c      	mov	r4, r1
 8006e62:	b118      	cbz	r0, 8006e6c <__swsetup_r+0x14>
 8006e64:	6a03      	ldr	r3, [r0, #32]
 8006e66:	b90b      	cbnz	r3, 8006e6c <__swsetup_r+0x14>
 8006e68:	f7ff f80c 	bl	8005e84 <__sinit>
 8006e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e70:	0719      	lsls	r1, r3, #28
 8006e72:	d422      	bmi.n	8006eba <__swsetup_r+0x62>
 8006e74:	06da      	lsls	r2, r3, #27
 8006e76:	d407      	bmi.n	8006e88 <__swsetup_r+0x30>
 8006e78:	2209      	movs	r2, #9
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	e033      	b.n	8006ef0 <__swsetup_r+0x98>
 8006e88:	0758      	lsls	r0, r3, #29
 8006e8a:	d512      	bpl.n	8006eb2 <__swsetup_r+0x5a>
 8006e8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e8e:	b141      	cbz	r1, 8006ea2 <__swsetup_r+0x4a>
 8006e90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d002      	beq.n	8006e9e <__swsetup_r+0x46>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f7ff f95b 	bl	8006154 <_free_r>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6063      	str	r3, [r4, #4]
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f043 0308 	orr.w	r3, r3, #8
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	b94b      	cbnz	r3, 8006ed2 <__swsetup_r+0x7a>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec8:	d003      	beq.n	8006ed2 <__swsetup_r+0x7a>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f000 f88b 	bl	8006fe8 <__smakebuf_r>
 8006ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed6:	f013 0201 	ands.w	r2, r3, #1
 8006eda:	d00a      	beq.n	8006ef2 <__swsetup_r+0x9a>
 8006edc:	2200      	movs	r2, #0
 8006ede:	60a2      	str	r2, [r4, #8]
 8006ee0:	6962      	ldr	r2, [r4, #20]
 8006ee2:	4252      	negs	r2, r2
 8006ee4:	61a2      	str	r2, [r4, #24]
 8006ee6:	6922      	ldr	r2, [r4, #16]
 8006ee8:	b942      	cbnz	r2, 8006efc <__swsetup_r+0xa4>
 8006eea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eee:	d1c5      	bne.n	8006e7c <__swsetup_r+0x24>
 8006ef0:	bd38      	pop	{r3, r4, r5, pc}
 8006ef2:	0799      	lsls	r1, r3, #30
 8006ef4:	bf58      	it	pl
 8006ef6:	6962      	ldrpl	r2, [r4, #20]
 8006ef8:	60a2      	str	r2, [r4, #8]
 8006efa:	e7f4      	b.n	8006ee6 <__swsetup_r+0x8e>
 8006efc:	2000      	movs	r0, #0
 8006efe:	e7f7      	b.n	8006ef0 <__swsetup_r+0x98>
 8006f00:	2000003c 	.word	0x2000003c

08006f04 <_raise_r>:
 8006f04:	291f      	cmp	r1, #31
 8006f06:	b538      	push	{r3, r4, r5, lr}
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	d904      	bls.n	8006f18 <_raise_r+0x14>
 8006f0e:	2316      	movs	r3, #22
 8006f10:	6003      	str	r3, [r0, #0]
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f1a:	b112      	cbz	r2, 8006f22 <_raise_r+0x1e>
 8006f1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f20:	b94b      	cbnz	r3, 8006f36 <_raise_r+0x32>
 8006f22:	4628      	mov	r0, r5
 8006f24:	f000 f830 	bl	8006f88 <_getpid_r>
 8006f28:	4622      	mov	r2, r4
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f32:	f000 b817 	b.w	8006f64 <_kill_r>
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d00a      	beq.n	8006f50 <_raise_r+0x4c>
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	d103      	bne.n	8006f46 <_raise_r+0x42>
 8006f3e:	2316      	movs	r3, #22
 8006f40:	6003      	str	r3, [r0, #0]
 8006f42:	2001      	movs	r0, #1
 8006f44:	e7e7      	b.n	8006f16 <_raise_r+0x12>
 8006f46:	2100      	movs	r1, #0
 8006f48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4798      	blx	r3
 8006f50:	2000      	movs	r0, #0
 8006f52:	e7e0      	b.n	8006f16 <_raise_r+0x12>

08006f54 <raise>:
 8006f54:	4b02      	ldr	r3, [pc, #8]	@ (8006f60 <raise+0xc>)
 8006f56:	4601      	mov	r1, r0
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f7ff bfd3 	b.w	8006f04 <_raise_r>
 8006f5e:	bf00      	nop
 8006f60:	2000003c 	.word	0x2000003c

08006f64 <_kill_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d07      	ldr	r5, [pc, #28]	@ (8006f84 <_kill_r+0x20>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	f7fa ffcf 	bl	8001f14 <_kill>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d102      	bne.n	8006f80 <_kill_r+0x1c>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	b103      	cbz	r3, 8006f80 <_kill_r+0x1c>
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	bf00      	nop
 8006f84:	2000235c 	.word	0x2000235c

08006f88 <_getpid_r>:
 8006f88:	f7fa bfbc 	b.w	8001f04 <_getpid>

08006f8c <_malloc_usable_size_r>:
 8006f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f90:	1f18      	subs	r0, r3, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bfbc      	itt	lt
 8006f96:	580b      	ldrlt	r3, [r1, r0]
 8006f98:	18c0      	addlt	r0, r0, r3
 8006f9a:	4770      	bx	lr

08006f9c <__swhatbuf_r>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa4:	2900      	cmp	r1, #0
 8006fa6:	b096      	sub	sp, #88	@ 0x58
 8006fa8:	4615      	mov	r5, r2
 8006faa:	461e      	mov	r6, r3
 8006fac:	da0d      	bge.n	8006fca <__swhatbuf_r+0x2e>
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	2340      	movne	r3, #64	@ 0x40
 8006fbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	6031      	str	r1, [r6, #0]
 8006fc4:	602b      	str	r3, [r5, #0]
 8006fc6:	b016      	add	sp, #88	@ 0x58
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
 8006fca:	466a      	mov	r2, sp
 8006fcc:	f000 f848 	bl	8007060 <_fstat_r>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	dbec      	blt.n	8006fae <__swhatbuf_r+0x12>
 8006fd4:	9901      	ldr	r1, [sp, #4]
 8006fd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fde:	4259      	negs	r1, r3
 8006fe0:	4159      	adcs	r1, r3
 8006fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fe6:	e7eb      	b.n	8006fc0 <__swhatbuf_r+0x24>

08006fe8 <__smakebuf_r>:
 8006fe8:	898b      	ldrh	r3, [r1, #12]
 8006fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fec:	079d      	lsls	r5, r3, #30
 8006fee:	4606      	mov	r6, r0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	d507      	bpl.n	8007004 <__smakebuf_r+0x1c>
 8006ff4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	6163      	str	r3, [r4, #20]
 8007000:	b003      	add	sp, #12
 8007002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007004:	ab01      	add	r3, sp, #4
 8007006:	466a      	mov	r2, sp
 8007008:	f7ff ffc8 	bl	8006f9c <__swhatbuf_r>
 800700c:	9f00      	ldr	r7, [sp, #0]
 800700e:	4605      	mov	r5, r0
 8007010:	4639      	mov	r1, r7
 8007012:	4630      	mov	r0, r6
 8007014:	f7ff f912 	bl	800623c <_malloc_r>
 8007018:	b948      	cbnz	r0, 800702e <__smakebuf_r+0x46>
 800701a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701e:	059a      	lsls	r2, r3, #22
 8007020:	d4ee      	bmi.n	8007000 <__smakebuf_r+0x18>
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	f043 0302 	orr.w	r3, r3, #2
 800702a:	81a3      	strh	r3, [r4, #12]
 800702c:	e7e2      	b.n	8006ff4 <__smakebuf_r+0xc>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	6020      	str	r0, [r4, #0]
 8007032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	9b01      	ldr	r3, [sp, #4]
 800703a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800703e:	b15b      	cbz	r3, 8007058 <__smakebuf_r+0x70>
 8007040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007044:	4630      	mov	r0, r6
 8007046:	f000 f81d 	bl	8007084 <_isatty_r>
 800704a:	b128      	cbz	r0, 8007058 <__smakebuf_r+0x70>
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	f043 0301 	orr.w	r3, r3, #1
 8007056:	81a3      	strh	r3, [r4, #12]
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	431d      	orrs	r5, r3
 800705c:	81a5      	strh	r5, [r4, #12]
 800705e:	e7cf      	b.n	8007000 <__smakebuf_r+0x18>

08007060 <_fstat_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d07      	ldr	r5, [pc, #28]	@ (8007080 <_fstat_r+0x20>)
 8007064:	2300      	movs	r3, #0
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	4611      	mov	r1, r2
 800706c:	602b      	str	r3, [r5, #0]
 800706e:	f7fa ffb1 	bl	8001fd4 <_fstat>
 8007072:	1c43      	adds	r3, r0, #1
 8007074:	d102      	bne.n	800707c <_fstat_r+0x1c>
 8007076:	682b      	ldr	r3, [r5, #0]
 8007078:	b103      	cbz	r3, 800707c <_fstat_r+0x1c>
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	bd38      	pop	{r3, r4, r5, pc}
 800707e:	bf00      	nop
 8007080:	2000235c 	.word	0x2000235c

08007084 <_isatty_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d06      	ldr	r5, [pc, #24]	@ (80070a0 <_isatty_r+0x1c>)
 8007088:	2300      	movs	r3, #0
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	f7fa ffb0 	bl	8001ff4 <_isatty>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_isatty_r+0x1a>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_isatty_r+0x1a>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	2000235c 	.word	0x2000235c

080070a4 <_init>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr

080070b0 <_fini>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr
