
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e28  08006e28  0000808c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e28  08006e28  00007e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e30  08006e30  0000808c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e30  08006e30  00007e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e34  08006e34  00007e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006e38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022dc  2000008c  08006ec4  0000808c  2**2
                  ALLOC
 10 ._user_heap_stack 00010400  20002368  08006ec4  00008368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3a1  00000000  00000000  000080bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269a  00000000  00000000  0001545d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00017af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6b  00000000  00000000  00018898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fe9  00000000  00000000  00019303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010edd  00000000  00000000  000322ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000953cd  00000000  00000000  000431c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8596  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040fc  00000000  00000000  000d85dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000dc6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a40 	.word	0x08006a40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08006a40 	.word	0x08006a40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <addBitmapToNextFrame>:
 *
 * @param[in] bitmap     Bitmap representing LED layout.
 * @param[in] color      24-bit color value (0xRRGGBB).
 * @param[in] brightness Brightness level (0-255).
 */
void addBitmapToNextFrame(const uint16_t matrix[MATRIX_HEIGHT], uint8_t red, uint8_t green, uint8_t blue, uint8_t brightness) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	4608      	mov	r0, r1
 800057a:	4611      	mov	r1, r2
 800057c:	461a      	mov	r2, r3
 800057e:	4603      	mov	r3, r0
 8000580:	70fb      	strb	r3, [r7, #3]
 8000582:	460b      	mov	r3, r1
 8000584:	70bb      	strb	r3, [r7, #2]
 8000586:	4613      	mov	r3, r2
 8000588:	707b      	strb	r3, [r7, #1]

    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	e03b      	b.n	8000608 <addBitmapToNextFrame+0x98>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	e032      	b.n	80005fc <addBitmapToNextFrame+0x8c>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	441a      	add	r2, r3
 80005a0:	0052      	lsls	r2, r2, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4413      	add	r3, r2
 80005ac:	73fb      	strb	r3, [r7, #15]

            if(matrix[i] & (1 << j)) {
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	fa42 f303 	asr.w	r3, r2, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d016      	beq.n	80005f6 <addBitmapToNextFrame+0x86>
                nextFrame[ledNumber].red = red;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	4914      	ldr	r1, [pc, #80]	@ (800061c <addBitmapToNextFrame+0xac>)
 80005cc:	78fa      	ldrb	r2, [r7, #3]
 80005ce:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
                nextFrame[ledNumber].green = green;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	4a11      	ldr	r2, [pc, #68]	@ (800061c <addBitmapToNextFrame+0xac>)
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	78ba      	ldrb	r2, [r7, #2]
 80005dc:	705a      	strb	r2, [r3, #1]
                nextFrame[ledNumber].blue = blue;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <addBitmapToNextFrame+0xac>)
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	787a      	ldrb	r2, [r7, #1]
 80005e8:	709a      	strb	r2, [r3, #2]
                nextFrame[ledNumber].draw = true;
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4a0b      	ldr	r2, [pc, #44]	@ (800061c <addBitmapToNextFrame+0xac>)
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	2201      	movs	r2, #1
 80005f4:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	3301      	adds	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	ddc9      	ble.n	8000596 <addBitmapToNextFrame+0x26>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2b0c      	cmp	r3, #12
 800060c:	ddc0      	ble.n	8000590 <addBitmapToNextFrame+0x20>
            }

        }
    }
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	371c      	adds	r7, #28
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	200000a8 	.word	0x200000a8

08000620 <shuffle>:

        }
    }
}

void shuffle(uint8_t *array, uint32_t size) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
    if (size > 1) {
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d92d      	bls.n	800068c <shuffle+0x6c>
        for (uint32_t i = 0; i < size - 1; i++) {
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e025      	b.n	8000682 <shuffle+0x62>
            uint32_t j = i + rand() / (RAND_MAX / (size - i) + 1);
 8000636:	f005 fa05 	bl	8005a44 <rand>
 800063a:	4603      	mov	r3, r0
 800063c:	4619      	mov	r1, r3
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000648:	fbb2 f3f3 	udiv	r3, r2, r3
 800064c:	3301      	adds	r3, #1
 800064e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000652:	697a      	ldr	r2, [r7, #20]
 8000654:	4413      	add	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
            uint8_t t = array[j];
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	73fb      	strb	r3, [r7, #15]
            array[j] = array[i];
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	441a      	add	r2, r3
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	440b      	add	r3, r1
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	701a      	strb	r2, [r3, #0]
            array[i] = t;
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	7bfa      	ldrb	r2, [r7, #15]
 800067a:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size - 1; i++) {
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	3b01      	subs	r3, #1
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	429a      	cmp	r2, r3
 800068a:	d3d4      	bcc.n	8000636 <shuffle+0x16>
        }
    }
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <randomInRange>:

int randomInRange(int min, int max) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
    return min + rand() % (max - min + 1);
 800069e:	f005 f9d1 	bl	8005a44 <rand>
 80006a2:	4602      	mov	r2, r0
 80006a4:	6839      	ldr	r1, [r7, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	1acb      	subs	r3, r1, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	fb92 f1f3 	sdiv	r1, r2, r3
 80006b0:	fb01 f303 	mul.w	r3, r1, r3
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <wipeNextFrame>:
		currentFrame[i].green = 0;
		currentFrame[i].red = 0;
	}
}

void wipeNextFrame() {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MATRIX_SIZE; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e013      	b.n	80006f8 <wipeNextFrame+0x34>
		nextFrame[i].blue = 0;
 80006d0:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <wipeNextFrame+0x48>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]
		nextFrame[i].green = 0;
 80006dc:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <wipeNextFrame+0x48>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	2200      	movs	r2, #0
 80006e6:	705a      	strb	r2, [r3, #1]
		nextFrame[i].red = 0;
 80006e8:	4a08      	ldr	r2, [pc, #32]	@ (800070c <wipeNextFrame+0x48>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2100      	movs	r1, #0
 80006ee:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b8e      	cmp	r3, #142	@ 0x8e
 80006fc:	dde8      	ble.n	80006d0 <wipeNextFrame+0xc>
	}
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	200000a8 	.word	0x200000a8

08000710 <advanceFrame>:

void advanceFrame() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    memcpy(currentFrame, nextFrame, sizeof(currentFrame));
 8000714:	4a06      	ldr	r2, [pc, #24]	@ (8000730 <advanceFrame+0x20>)
 8000716:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <advanceFrame+0x24>)
 8000718:	4610      	mov	r0, r2
 800071a:	4619      	mov	r1, r3
 800071c:	f44f 730f 	mov.w	r3, #572	@ 0x23c
 8000720:	461a      	mov	r2, r3
 8000722:	f005 fb60 	bl	8005de6 <memcpy>
    wipeNextFrame();
 8000726:	f7ff ffcd 	bl	80006c4 <wipeNextFrame>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200002e4 	.word	0x200002e4
 8000734:	200000a8 	.word	0x200000a8

08000738 <getLitCurrentFrame>:
 * @param   arr Pointer to an array for storing indices of lit LEDs.
 *            This array should be preallocated by the caller.
 *
 * @return  Number of lit LEDs found. This value represents the size of the updated array.
 */
uint8_t getLitCurrentFrame(uint8_t *arr) {
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

    uint32_t index = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	e01f      	b.n	800078a <getLitCurrentFrame+0x52>
        if(currentFrame[i].red != 0 || currentFrame[i].green != 0 || currentFrame[i].blue != 0) {
 800074a:	4a16      	ldr	r2, [pc, #88]	@ (80007a4 <getLitCurrentFrame+0x6c>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10d      	bne.n	8000772 <getLitCurrentFrame+0x3a>
 8000756:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <getLitCurrentFrame+0x6c>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d106      	bne.n	8000772 <getLitCurrentFrame+0x3a>
 8000764:	4a0f      	ldr	r2, [pc, #60]	@ (80007a4 <getLitCurrentFrame+0x6c>)
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d008      	beq.n	8000784 <getLitCurrentFrame+0x4c>
            arr[index] = i;
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	701a      	strb	r2, [r3, #0]
            index++;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	3301      	adds	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2b8e      	cmp	r3, #142	@ 0x8e
 800078e:	dddc      	ble.n	800074a <getLitCurrentFrame+0x12>
        }
    }

    return index + 1;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	3301      	adds	r3, #1
 8000796:	b2db      	uxtb	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	200002e4 	.word	0x200002e4

080007a8 <flickerOutEffect>:
    }

    return index + 1;
}

void flickerOutEffect() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a6      	sub	sp, #152	@ 0x98
 80007ac:	af00      	add	r7, sp, #0
    uint8_t litLEDs[MATRIX_SIZE] = {0};
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	228b      	movs	r2, #139	@ 0x8b
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fa85 	bl	8005cca <memset>
    uint8_t numLit = getLitCurrentFrame(litLEDs);
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ffb8 	bl	8000738 <getLitCurrentFrame>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    if(numLit == 0)
 80007ce:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d06e      	beq.n	80008b4 <flickerOutEffect+0x10c>
    	return;

    const uint8_t flickerLoops = 10;
 80007d6:	230a      	movs	r3, #10
 80007d8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80007e2:	e042      	b.n	800086a <flickerOutEffect+0xc2>
        shuffle(litLEDs, numLit);
 80007e4:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff17 	bl	8000620 <shuffle>
        for (uint8_t i = 0; i < numLit; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80007f8:	e024      	b.n	8000844 <flickerOutEffect+0x9c>
            // Invert the logic here: As loop increases,
            // it becomes more likely to turn off the LED.
            // This is done by comparing the random value
            // against a decreasing threshold.
            if (randomInRange(0, flickerLoops) < loop) {
 80007fa:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80007fe:	4619      	mov	r1, r3
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ff47 	bl	8000694 <randomInRange>
 8000806:	4602      	mov	r2, r0
 8000808:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800080c:	429a      	cmp	r2, r3
 800080e:	da0a      	bge.n	8000826 <flickerOutEffect+0x7e>
                turnOffLED((LED *) currentFrame, litLEDs[i]);
 8000810:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000814:	3398      	adds	r3, #152	@ 0x98
 8000816:	443b      	add	r3, r7
 8000818:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800081c:	4619      	mov	r1, r3
 800081e:	4827      	ldr	r0, [pc, #156]	@ (80008bc <flickerOutEffect+0x114>)
 8000820:	f005 f842 	bl	80058a8 <turnOffLED>
 8000824:	e009      	b.n	800083a <flickerOutEffect+0x92>
            } else {
                // Only explicitly turn on LEDs if there's a reason
                // they might be off from a previous iteration.
                // Depending on the initial state, this might not be necessary.
                turnOnLED((LED *) currentFrame, litLEDs[i]);
 8000826:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800082a:	3398      	adds	r3, #152	@ 0x98
 800082c:	443b      	add	r3, r7
 800082e:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8000832:	4619      	mov	r1, r3
 8000834:	4821      	ldr	r0, [pc, #132]	@ (80008bc <flickerOutEffect+0x114>)
 8000836:	f005 f825 	bl	8005884 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 800083a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800083e:	3301      	adds	r3, #1
 8000840:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000844:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8000848:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800084c:	429a      	cmp	r2, r3
 800084e:	d3d4      	bcc.n	80007fa <flickerOutEffect+0x52>
            }
        }
        updatePwmBuffer((LED *) currentFrame);
 8000850:	481a      	ldr	r0, [pc, #104]	@ (80008bc <flickerOutEffect+0x114>)
 8000852:	f005 f857 	bl	8005904 <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 8000856:	f005 f8c9 	bl	80059ec <DMA_Send>
        HAL_Delay(50); // Adjust delay as necessary for visual effect
 800085a:	2032      	movs	r0, #50	@ 0x32
 800085c:	f001 fdf0 	bl	8002440 <HAL_Delay>
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 8000860:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000864:	3301      	adds	r3, #1
 8000866:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800086a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800086e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000872:	429a      	cmp	r2, r3
 8000874:	d3b6      	bcc.n	80007e4 <flickerOutEffect+0x3c>
    }

    // Ensure all LEDs are turned off at the end
    for (uint8_t i = 0; i < numLit; ++i) {
 8000876:	2300      	movs	r3, #0
 8000878:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800087c:	e00e      	b.n	800089c <flickerOutEffect+0xf4>
        turnOffLED((LED *) currentFrame, litLEDs[i]);
 800087e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000882:	3398      	adds	r3, #152	@ 0x98
 8000884:	443b      	add	r3, r7
 8000886:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800088a:	4619      	mov	r1, r3
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <flickerOutEffect+0x114>)
 800088e:	f005 f80b 	bl	80058a8 <turnOffLED>
    for (uint8_t i = 0; i < numLit; ++i) {
 8000892:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000896:	3301      	adds	r3, #1
 8000898:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800089c:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 80008a0:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d3ea      	bcc.n	800087e <flickerOutEffect+0xd6>
    }
    updatePwmBuffer((LED *) currentFrame);
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <flickerOutEffect+0x114>)
 80008aa:	f005 f82b 	bl	8005904 <updatePwmBuffer>
    DMA_Send(); // Update LEDs through DMA
 80008ae:	f005 f89d 	bl	80059ec <DMA_Send>
 80008b2:	e000      	b.n	80008b6 <flickerOutEffect+0x10e>
    	return;
 80008b4:	bf00      	nop
}
 80008b6:	3798      	adds	r7, #152	@ 0x98
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200002e4 	.word	0x200002e4

080008c0 <flickerInEffect>:

void flickerInEffect() {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0a6      	sub	sp, #152	@ 0x98
 80008c4:	af00      	add	r7, sp, #0
    uint8_t litLEDs[MATRIX_SIZE] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	228b      	movs	r2, #139	@ 0x8b
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f005 f9f9 	bl	8005cca <memset>
    uint8_t numLit = getLitCurrentFrame(litLEDs);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff2c 	bl	8000738 <getLitCurrentFrame>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    const uint8_t flickerLoops = 10;
 80008e6:	230a      	movs	r3, #10
 80008e8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80008f2:	e042      	b.n	800097a <flickerInEffect+0xba>
        shuffle(litLEDs, numLit);
 80008f4:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe8f 	bl	8000620 <shuffle>
        for (uint8_t i = 0; i < numLit; ++i) {
 8000902:	2300      	movs	r3, #0
 8000904:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000908:	e024      	b.n	8000954 <flickerInEffect+0x94>
            if (randomInRange(0, flickerLoops) > loop) {
 800090a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800090e:	4619      	mov	r1, r3
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff febf 	bl	8000694 <randomInRange>
 8000916:	4602      	mov	r2, r0
 8000918:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800091c:	429a      	cmp	r2, r3
 800091e:	dd0a      	ble.n	8000936 <flickerInEffect+0x76>
                turnOffLED((LED *) currentFrame, litLEDs[i]);
 8000920:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000924:	3398      	adds	r3, #152	@ 0x98
 8000926:	443b      	add	r3, r7
 8000928:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800092c:	4619      	mov	r1, r3
 800092e:	4827      	ldr	r0, [pc, #156]	@ (80009cc <flickerInEffect+0x10c>)
 8000930:	f004 ffba 	bl	80058a8 <turnOffLED>
 8000934:	e009      	b.n	800094a <flickerInEffect+0x8a>
            } else {
                turnOnLED((LED *) currentFrame, litLEDs[i]);
 8000936:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800093a:	3398      	adds	r3, #152	@ 0x98
 800093c:	443b      	add	r3, r7
 800093e:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8000942:	4619      	mov	r1, r3
 8000944:	4821      	ldr	r0, [pc, #132]	@ (80009cc <flickerInEffect+0x10c>)
 8000946:	f004 ff9d 	bl	8005884 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 800094a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800094e:	3301      	adds	r3, #1
 8000950:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000954:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8000958:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800095c:	429a      	cmp	r2, r3
 800095e:	d3d4      	bcc.n	800090a <flickerInEffect+0x4a>
            }
        }
        updatePwmBuffer((LED *) currentFrame);
 8000960:	481a      	ldr	r0, [pc, #104]	@ (80009cc <flickerInEffect+0x10c>)
 8000962:	f004 ffcf 	bl	8005904 <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 8000966:	f005 f841 	bl	80059ec <DMA_Send>
        HAL_Delay(50); // Adjust delay as necessary for visual effect
 800096a:	2032      	movs	r0, #50	@ 0x32
 800096c:	f001 fd68 	bl	8002440 <HAL_Delay>
    for (uint8_t loop = 0; loop < flickerLoops; ++loop) {
 8000970:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000974:	3301      	adds	r3, #1
 8000976:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800097a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800097e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000982:	429a      	cmp	r2, r3
 8000984:	d3b6      	bcc.n	80008f4 <flickerInEffect+0x34>
    }

    // Ensure all LEDs are turned on at the end
    for (uint8_t i = 0; i < numLit; ++i) {
 8000986:	2300      	movs	r3, #0
 8000988:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800098c:	e00e      	b.n	80009ac <flickerInEffect+0xec>
        turnOnLED((LED *) currentFrame, litLEDs[i]);
 800098e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000992:	3398      	adds	r3, #152	@ 0x98
 8000994:	443b      	add	r3, r7
 8000996:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <flickerInEffect+0x10c>)
 800099e:	f004 ff71 	bl	8005884 <turnOnLED>
    for (uint8_t i = 0; i < numLit; ++i) {
 80009a2:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80009a6:	3301      	adds	r3, #1
 80009a8:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80009ac:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 80009b0:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3ea      	bcc.n	800098e <flickerInEffect+0xce>
    }
    updatePwmBuffer((LED *) currentFrame);
 80009b8:	4804      	ldr	r0, [pc, #16]	@ (80009cc <flickerInEffect+0x10c>)
 80009ba:	f004 ffa3 	bl	8005904 <updatePwmBuffer>
    DMA_Send(); // Update LEDs through DMA
 80009be:	f005 f815 	bl	80059ec <DMA_Send>
}
 80009c2:	bf00      	nop
 80009c4:	3798      	adds	r7, #152	@ 0x98
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200002e4 	.word	0x200002e4

080009d0 <display_time>:
		MINUTE_TWENTYFIVE,
		MINUTE_THIRTY
};


void display_time(int hour, int minute, uint8_t red, uint8_t green, uint8_t blue, uint8_t brightness) {
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	4611      	mov	r1, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	460b      	mov	r3, r1
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	4613      	mov	r3, r2
 80009e4:	71bb      	strb	r3, [r7, #6]
	addBitmapToNextFrame(BMP_ITS, red, green, blue, brightness);
 80009e6:	f897 0020 	ldrb.w	r0, [r7, #32]
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	79f9      	ldrb	r1, [r7, #7]
 80009ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4603      	mov	r3, r0
 80009f6:	48a1      	ldr	r0, [pc, #644]	@ (8000c7c <display_time+0x2ac>)
 80009f8:	f7ff fdba 	bl	8000570 <addBitmapToNextFrame>
    // Round down to the nearest five minutes
    minute = (minute / 5) * 5;
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4aa0      	ldr	r2, [pc, #640]	@ (8000c80 <display_time+0x2b0>)
 8000a00:	fb82 1203 	smull	r1, r2, r2, r3
 8000a04:	1052      	asrs	r2, r2, #1
 8000a06:	17db      	asrs	r3, r3, #31
 8000a08:	1ad2      	subs	r2, r2, r3
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	60bb      	str	r3, [r7, #8]

    // Display minute, accounting for 'past' or 'to'
    if (minute < 5) {
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	dd20      	ble.n	8000a5a <display_time+0x8a>
    	//no past or till
    } else if (minute < 35) {
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2b22      	cmp	r3, #34	@ 0x22
 8000a1c:	dc0b      	bgt.n	8000a36 <display_time+0x66>
        addBitmapToNextFrame(BMP_PAST, red, green, blue, brightness);
 8000a1e:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000a22:	79ba      	ldrb	r2, [r7, #6]
 8000a24:	79f9      	ldrb	r1, [r7, #7]
 8000a26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4895      	ldr	r0, [pc, #596]	@ (8000c84 <display_time+0x2b4>)
 8000a30:	f7ff fd9e 	bl	8000570 <addBitmapToNextFrame>
 8000a34:	e011      	b.n	8000a5a <display_time+0x8a>
    } else {
        minute = 60 - minute;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8000a3c:	60bb      	str	r3, [r7, #8]
        hour++;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
        addBitmapToNextFrame(BMP_TILL, red, green, blue, brightness);
 8000a44:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000a48:	79ba      	ldrb	r2, [r7, #6]
 8000a4a:	79f9      	ldrb	r1, [r7, #7]
 8000a4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4603      	mov	r3, r0
 8000a54:	488c      	ldr	r0, [pc, #560]	@ (8000c88 <display_time+0x2b8>)
 8000a56:	f7ff fd8b 	bl	8000570 <addBitmapToNextFrame>
    }

    if(hour == 0 || hour == 12);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d01c      	beq.n	8000a9a <display_time+0xca>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b0c      	cmp	r3, #12
 8000a64:	d019      	beq.n	8000a9a <display_time+0xca>
    else if(hour < 12) addBitmapToNextFrame(BMP_AM, red, green, blue, brightness);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b0b      	cmp	r3, #11
 8000a6a:	dc0b      	bgt.n	8000a84 <display_time+0xb4>
 8000a6c:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000a70:	79ba      	ldrb	r2, [r7, #6]
 8000a72:	79f9      	ldrb	r1, [r7, #7]
 8000a74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4883      	ldr	r0, [pc, #524]	@ (8000c8c <display_time+0x2bc>)
 8000a7e:	f7ff fd77 	bl	8000570 <addBitmapToNextFrame>
 8000a82:	e00a      	b.n	8000a9a <display_time+0xca>
    else addBitmapToNextFrame(BMP_PM, red, green, blue, brightness);
 8000a84:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000a88:	79ba      	ldrb	r2, [r7, #6]
 8000a8a:	79f9      	ldrb	r1, [r7, #7]
 8000a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4603      	mov	r3, r0
 8000a94:	487e      	ldr	r0, [pc, #504]	@ (8000c90 <display_time+0x2c0>)
 8000a96:	f7ff fd6b 	bl	8000570 <addBitmapToNextFrame>

    // Display hour
    switch(hour) {
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2b17      	cmp	r3, #23
 8000a9e:	f200 80cf 	bhi.w	8000c40 <display_time+0x270>
 8000aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa8 <display_time+0xd8>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000b09 	.word	0x08000b09
 8000aac:	08000b21 	.word	0x08000b21
 8000ab0:	08000b39 	.word	0x08000b39
 8000ab4:	08000b51 	.word	0x08000b51
 8000ab8:	08000b69 	.word	0x08000b69
 8000abc:	08000b81 	.word	0x08000b81
 8000ac0:	08000b99 	.word	0x08000b99
 8000ac4:	08000bb1 	.word	0x08000bb1
 8000ac8:	08000bc9 	.word	0x08000bc9
 8000acc:	08000be1 	.word	0x08000be1
 8000ad0:	08000bf9 	.word	0x08000bf9
 8000ad4:	08000c11 	.word	0x08000c11
 8000ad8:	08000c29 	.word	0x08000c29
 8000adc:	08000b21 	.word	0x08000b21
 8000ae0:	08000b39 	.word	0x08000b39
 8000ae4:	08000b51 	.word	0x08000b51
 8000ae8:	08000b69 	.word	0x08000b69
 8000aec:	08000b81 	.word	0x08000b81
 8000af0:	08000b99 	.word	0x08000b99
 8000af4:	08000bb1 	.word	0x08000bb1
 8000af8:	08000bc9 	.word	0x08000bc9
 8000afc:	08000be1 	.word	0x08000be1
 8000b00:	08000bf9 	.word	0x08000bf9
 8000b04:	08000c11 	.word	0x08000c11
        case 0:
            addBitmapToNextFrame(HOUR_MIDNIGHT, red, green, blue, brightness);
 8000b08:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	79f9      	ldrb	r1, [r7, #7]
 8000b10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	4603      	mov	r3, r0
 8000b18:	485e      	ldr	r0, [pc, #376]	@ (8000c94 <display_time+0x2c4>)
 8000b1a:	f7ff fd29 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000b1e:	e090      	b.n	8000c42 <display_time+0x272>
        case 1:
        case 13:
            addBitmapToNextFrame(HOUR_ONE, red, green, blue, brightness);
 8000b20:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b24:	79ba      	ldrb	r2, [r7, #6]
 8000b26:	79f9      	ldrb	r1, [r7, #7]
 8000b28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4859      	ldr	r0, [pc, #356]	@ (8000c98 <display_time+0x2c8>)
 8000b32:	f7ff fd1d 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000b36:	e084      	b.n	8000c42 <display_time+0x272>
        case 2:
        case 14:
            addBitmapToNextFrame(HOUR_TWO, red, green, blue, brightness);
 8000b38:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	79f9      	ldrb	r1, [r7, #7]
 8000b40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	4603      	mov	r3, r0
 8000b48:	4854      	ldr	r0, [pc, #336]	@ (8000c9c <display_time+0x2cc>)
 8000b4a:	f7ff fd11 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000b4e:	e078      	b.n	8000c42 <display_time+0x272>
        case 3:
        case 15:
            addBitmapToNextFrame(HOUR_THREE, red, green, blue, brightness);
 8000b50:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b54:	79ba      	ldrb	r2, [r7, #6]
 8000b56:	79f9      	ldrb	r1, [r7, #7]
 8000b58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	4603      	mov	r3, r0
 8000b60:	484f      	ldr	r0, [pc, #316]	@ (8000ca0 <display_time+0x2d0>)
 8000b62:	f7ff fd05 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000b66:	e06c      	b.n	8000c42 <display_time+0x272>
        case 4:
        case 16:
            addBitmapToNextFrame(HOUR_FOUR, red, green, blue, brightness);
 8000b68:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b6c:	79ba      	ldrb	r2, [r7, #6]
 8000b6e:	79f9      	ldrb	r1, [r7, #7]
 8000b70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	4603      	mov	r3, r0
 8000b78:	484a      	ldr	r0, [pc, #296]	@ (8000ca4 <display_time+0x2d4>)
 8000b7a:	f7ff fcf9 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000b7e:	e060      	b.n	8000c42 <display_time+0x272>
        case 5:
        case 17:
            addBitmapToNextFrame(HOUR_FIVE, red, green, blue, brightness);
 8000b80:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b84:	79ba      	ldrb	r2, [r7, #6]
 8000b86:	79f9      	ldrb	r1, [r7, #7]
 8000b88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4845      	ldr	r0, [pc, #276]	@ (8000ca8 <display_time+0x2d8>)
 8000b92:	f7ff fced 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000b96:	e054      	b.n	8000c42 <display_time+0x272>
        case 6:
        case 18:
            addBitmapToNextFrame(HOUR_SIX, red, green, blue, brightness);
 8000b98:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b9c:	79ba      	ldrb	r2, [r7, #6]
 8000b9e:	79f9      	ldrb	r1, [r7, #7]
 8000ba0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4840      	ldr	r0, [pc, #256]	@ (8000cac <display_time+0x2dc>)
 8000baa:	f7ff fce1 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000bae:	e048      	b.n	8000c42 <display_time+0x272>
        case 7:
        case 19:
            addBitmapToNextFrame(HOUR_SEVEN, red, green, blue, brightness);
 8000bb0:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000bb4:	79ba      	ldrb	r2, [r7, #6]
 8000bb6:	79f9      	ldrb	r1, [r7, #7]
 8000bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	483b      	ldr	r0, [pc, #236]	@ (8000cb0 <display_time+0x2e0>)
 8000bc2:	f7ff fcd5 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000bc6:	e03c      	b.n	8000c42 <display_time+0x272>
        case 8:
        case 20:
            addBitmapToNextFrame(HOUR_EIGHT, red, green, blue, brightness);
 8000bc8:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000bcc:	79ba      	ldrb	r2, [r7, #6]
 8000bce:	79f9      	ldrb	r1, [r7, #7]
 8000bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4836      	ldr	r0, [pc, #216]	@ (8000cb4 <display_time+0x2e4>)
 8000bda:	f7ff fcc9 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000bde:	e030      	b.n	8000c42 <display_time+0x272>
        case 9:
        case 21:
            addBitmapToNextFrame(HOUR_NINE, red, green, blue, brightness);
 8000be0:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000be4:	79ba      	ldrb	r2, [r7, #6]
 8000be6:	79f9      	ldrb	r1, [r7, #7]
 8000be8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4831      	ldr	r0, [pc, #196]	@ (8000cb8 <display_time+0x2e8>)
 8000bf2:	f7ff fcbd 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000bf6:	e024      	b.n	8000c42 <display_time+0x272>
        case 10:
        case 22:
            addBitmapToNextFrame(HOUR_TEN, red, green, blue, brightness);
 8000bf8:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000bfc:	79ba      	ldrb	r2, [r7, #6]
 8000bfe:	79f9      	ldrb	r1, [r7, #7]
 8000c00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	4603      	mov	r3, r0
 8000c08:	482c      	ldr	r0, [pc, #176]	@ (8000cbc <display_time+0x2ec>)
 8000c0a:	f7ff fcb1 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000c0e:	e018      	b.n	8000c42 <display_time+0x272>
        case 11:
        case 23:
            addBitmapToNextFrame(HOUR_ELEVEN, red, green, blue, brightness);
 8000c10:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000c14:	79ba      	ldrb	r2, [r7, #6]
 8000c16:	79f9      	ldrb	r1, [r7, #7]
 8000c18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4827      	ldr	r0, [pc, #156]	@ (8000cc0 <display_time+0x2f0>)
 8000c22:	f7ff fca5 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000c26:	e00c      	b.n	8000c42 <display_time+0x272>
        case 12:
            addBitmapToNextFrame(HOUR_NOON, red, green, blue, brightness);
 8000c28:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000c2c:	79ba      	ldrb	r2, [r7, #6]
 8000c2e:	79f9      	ldrb	r1, [r7, #7]
 8000c30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	4603      	mov	r3, r0
 8000c38:	4822      	ldr	r0, [pc, #136]	@ (8000cc4 <display_time+0x2f4>)
 8000c3a:	f7ff fc99 	bl	8000570 <addBitmapToNextFrame>
            break;
 8000c3e:	e000      	b.n	8000c42 <display_time+0x272>
        default:
            // Handle error or invalid hour
            break;
 8000c40:	bf00      	nop
    }

    // Display minute in intervals of five using an array pointing to the bitmaps
    if (minute > 0) {
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	dd14      	ble.n	8000c72 <display_time+0x2a2>
        addBitmapToNextFrame(minuteBitmaps[(minute / 5) - 1], red, green, blue, brightness);
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <display_time+0x2b0>)
 8000c4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c50:	1052      	asrs	r2, r2, #1
 8000c52:	17db      	asrs	r3, r3, #31
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	3b01      	subs	r3, #1
 8000c58:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc8 <display_time+0x2f8>)
 8000c5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c5e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000c62:	79ba      	ldrb	r2, [r7, #6]
 8000c64:	79f9      	ldrb	r1, [r7, #7]
 8000c66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	4623      	mov	r3, r4
 8000c6e:	f7ff fc7f 	bl	8000570 <addBitmapToNextFrame>
    }
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	08006c46 	.word	0x08006c46
 8000c80:	66666667 	.word	0x66666667
 8000c84:	08006c60 	.word	0x08006c60
 8000c88:	08006c7a 	.word	0x08006c7a
 8000c8c:	08006cfc 	.word	0x08006cfc
 8000c90:	08006d16 	.word	0x08006d16
 8000c94:	08006b90 	.word	0x08006b90
 8000c98:	08006a58 	.word	0x08006a58
 8000c9c:	08006a72 	.word	0x08006a72
 8000ca0:	08006a8c 	.word	0x08006a8c
 8000ca4:	08006aa6 	.word	0x08006aa6
 8000ca8:	08006ac0 	.word	0x08006ac0
 8000cac:	08006ada 	.word	0x08006ada
 8000cb0:	08006af4 	.word	0x08006af4
 8000cb4:	08006b0e 	.word	0x08006b0e
 8000cb8:	08006b28 	.word	0x08006b28
 8000cbc:	08006b42 	.word	0x08006b42
 8000cc0:	08006b5c 	.word	0x08006b5c
 8000cc4:	08006b76 	.word	0x08006b76
 8000cc8:	20000000 	.word	0x20000000

08000ccc <clampValue>:
		isOff = !isOff;
		lastTick = HAL_GetTick();
	}
}

uint32_t clampValue(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
    if ((0xFFFF - value) < (maxVal - value)) {
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000cde:	33ff      	adds	r3, #255	@ 0xff
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d201      	bcs.n	8000cee <clampValue+0x22>
  	  return minVal;
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	e00c      	b.n	8000d08 <clampValue+0x3c>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d201      	bcs.n	8000cfa <clampValue+0x2e>
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	e006      	b.n	8000d08 <clampValue+0x3c>
        if (value > maxVal) return maxVal;
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d901      	bls.n	8000d06 <clampValue+0x3a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	e000      	b.n	8000d08 <clampValue+0x3c>
        return value;
 8000d06:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <switchState>:

bool userSelectingFeature = true; // True when in SELECT state to decide what feature to adjust

void switchState(RTC_DateTypeDef * tDate) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    switch(currentState) {
 8000d1c:	4b83      	ldr	r3, [pc, #524]	@ (8000f2c <switchState+0x218>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b09      	cmp	r3, #9
 8000d24:	f200 80f9 	bhi.w	8000f1a <switchState+0x206>
 8000d28:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <switchState+0x1c>)
 8000d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2e:	bf00      	nop
 8000d30:	08000d59 	.word	0x08000d59
 8000d34:	08000d61 	.word	0x08000d61
 8000d38:	08000d69 	.word	0x08000d69
 8000d3c:	08000e0b 	.word	0x08000e0b
 8000d40:	08000e39 	.word	0x08000e39
 8000d44:	08000ef7 	.word	0x08000ef7
 8000d48:	08000f13 	.word	0x08000f13
 8000d4c:	08000e67 	.word	0x08000e67
 8000d50:	08000e9d 	.word	0x08000e9d
 8000d54:	08000ed3 	.word	0x08000ed3
        case SLEEP:
            currentState = WAKE;
 8000d58:	4b74      	ldr	r3, [pc, #464]	@ (8000f2c <switchState+0x218>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
            break;
 8000d5e:	e0e0      	b.n	8000f22 <switchState+0x20e>
        case WAKE:
            currentState = SELECT;
 8000d60:	4b72      	ldr	r3, [pc, #456]	@ (8000f2c <switchState+0x218>)
 8000d62:	2202      	movs	r2, #2
 8000d64:	701a      	strb	r2, [r3, #0]

            break;
 8000d66:	e0dc      	b.n	8000f22 <switchState+0x20e>
        case SELECT:
        	switch(counter / sensitivity){
 8000d68:	4b71      	ldr	r3, [pc, #452]	@ (8000f30 <switchState+0x21c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b71      	ldr	r3, [pc, #452]	@ (8000f34 <switchState+0x220>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d846      	bhi.n	8000e06 <switchState+0xf2>
 8000d78:	a201      	add	r2, pc, #4	@ (adr r2, 8000d80 <switchState+0x6c>)
 8000d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7e:	bf00      	nop
 8000d80:	08000d91 	.word	0x08000d91
 8000d84:	08000dab 	.word	0x08000dab
 8000d88:	08000dc7 	.word	0x08000dc7
 8000d8c:	08000de7 	.word	0x08000de7
        	case 0:
        		counter = sTime.Hours * sensitivity;
 8000d90:	4b69      	ldr	r3, [pc, #420]	@ (8000f38 <switchState+0x224>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b67      	ldr	r3, [pc, #412]	@ (8000f34 <switchState+0x220>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	4a64      	ldr	r2, [pc, #400]	@ (8000f30 <switchState+0x21c>)
 8000da0:	6013      	str	r3, [r2, #0]
        		currentState = SET_HOURS;
 8000da2:	4b62      	ldr	r3, [pc, #392]	@ (8000f2c <switchState+0x218>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	701a      	strb	r2, [r3, #0]
        		break;
 8000da8:	e02e      	b.n	8000e08 <switchState+0xf4>
        	case 1:
        		currentState = SET_COLOR;
 8000daa:	4b60      	ldr	r3, [pc, #384]	@ (8000f2c <switchState+0x218>)
 8000dac:	2205      	movs	r2, #5
 8000dae:	701a      	strb	r2, [r3, #0]
        		counter = color * sensitivity;
 8000db0:	4b62      	ldr	r3, [pc, #392]	@ (8000f3c <switchState+0x228>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f34 <switchState+0x220>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	4a5b      	ldr	r2, [pc, #364]	@ (8000f30 <switchState+0x21c>)
 8000dc2:	6013      	str	r3, [r2, #0]
        		break;
 8000dc4:	e020      	b.n	8000e08 <switchState+0xf4>
        	case 2:
        		currentDateType = ANNIVERSARY_DATE;
 8000dc6:	4b5e      	ldr	r3, [pc, #376]	@ (8000f40 <switchState+0x22c>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
            	counter = aDate.Month * sensitivity;
 8000dcc:	4b5d      	ldr	r3, [pc, #372]	@ (8000f44 <switchState+0x230>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b58      	ldr	r3, [pc, #352]	@ (8000f34 <switchState+0x220>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	4a55      	ldr	r2, [pc, #340]	@ (8000f30 <switchState+0x21c>)
 8000ddc:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 8000dde:	4b53      	ldr	r3, [pc, #332]	@ (8000f2c <switchState+0x218>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	701a      	strb	r2, [r3, #0]
        		break;
 8000de4:	e010      	b.n	8000e08 <switchState+0xf4>
        	case 3:
        		currentDateType = BIRTHDAY_DATE;
 8000de6:	4b56      	ldr	r3, [pc, #344]	@ (8000f40 <switchState+0x22c>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	701a      	strb	r2, [r3, #0]
            	counter = bDate.Month * sensitivity;
 8000dec:	4b56      	ldr	r3, [pc, #344]	@ (8000f48 <switchState+0x234>)
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b50      	ldr	r3, [pc, #320]	@ (8000f34 <switchState+0x220>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	4a4d      	ldr	r2, [pc, #308]	@ (8000f30 <switchState+0x21c>)
 8000dfc:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 8000dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8000f2c <switchState+0x218>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	701a      	strb	r2, [r3, #0]
        		break;
 8000e04:	e000      	b.n	8000e08 <switchState+0xf4>
        	default:
        		break;
 8000e06:	bf00      	nop
        	}
            break;
 8000e08:	e08b      	b.n	8000f22 <switchState+0x20e>
        case SET_HOURS:
        	counter = sTime.Minutes * sensitivity;
 8000e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f38 <switchState+0x224>)
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b48      	ldr	r3, [pc, #288]	@ (8000f34 <switchState+0x220>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	4a45      	ldr	r2, [pc, #276]	@ (8000f30 <switchState+0x21c>)
 8000e1a:	6013      	str	r3, [r2, #0]

        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4946      	ldr	r1, [pc, #280]	@ (8000f38 <switchState+0x224>)
 8000e20:	484a      	ldr	r0, [pc, #296]	@ (8000f4c <switchState+0x238>)
 8000e22:	f002 ff22 	bl	8003c6a <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e26:	2200      	movs	r2, #0
 8000e28:	4949      	ldr	r1, [pc, #292]	@ (8000f50 <switchState+0x23c>)
 8000e2a:	4848      	ldr	r0, [pc, #288]	@ (8000f4c <switchState+0x238>)
 8000e2c:	f003 f815 	bl	8003e5a <HAL_RTC_SetDate>
            currentState = SET_MINUTES; // After setting hours, set minutes
 8000e30:	4b3e      	ldr	r3, [pc, #248]	@ (8000f2c <switchState+0x218>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	701a      	strb	r2, [r3, #0]
            break;
 8000e36:	e074      	b.n	8000f22 <switchState+0x20e>
        case SET_MINUTES:
        	counter = sDate.Month * sensitivity;
 8000e38:	4b45      	ldr	r3, [pc, #276]	@ (8000f50 <switchState+0x23c>)
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f34 <switchState+0x220>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	fb02 f303 	mul.w	r3, r2, r3
 8000e46:	4a3a      	ldr	r2, [pc, #232]	@ (8000f30 <switchState+0x21c>)
 8000e48:	6013      	str	r3, [r2, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	493a      	ldr	r1, [pc, #232]	@ (8000f38 <switchState+0x224>)
 8000e4e:	483f      	ldr	r0, [pc, #252]	@ (8000f4c <switchState+0x238>)
 8000e50:	f002 ff0b 	bl	8003c6a <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e54:	2200      	movs	r2, #0
 8000e56:	493e      	ldr	r1, [pc, #248]	@ (8000f50 <switchState+0x23c>)
 8000e58:	483c      	ldr	r0, [pc, #240]	@ (8000f4c <switchState+0x238>)
 8000e5a:	f002 fffe 	bl	8003e5a <HAL_RTC_SetDate>
            currentState = SET_MONTH; // Return to SLEEP after setting time
 8000e5e:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <switchState+0x218>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	701a      	strb	r2, [r3, #0]
            break;
 8000e64:	e05d      	b.n	8000f22 <switchState+0x20e>
        case SET_MONTH:
        	counter = tDate->Date * sensitivity;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	789b      	ldrb	r3, [r3, #2]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b31      	ldr	r3, [pc, #196]	@ (8000f34 <switchState+0x220>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4a2e      	ldr	r2, [pc, #184]	@ (8000f30 <switchState+0x21c>)
 8000e76:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE){
 8000e78:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <switchState+0x22c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <switchState+0x180>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e80:	2200      	movs	r2, #0
 8000e82:	492d      	ldr	r1, [pc, #180]	@ (8000f38 <switchState+0x224>)
 8000e84:	4831      	ldr	r0, [pc, #196]	@ (8000f4c <switchState+0x238>)
 8000e86:	f002 fef0 	bl	8003c6a <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4930      	ldr	r1, [pc, #192]	@ (8000f50 <switchState+0x23c>)
 8000e8e:	482f      	ldr	r0, [pc, #188]	@ (8000f4c <switchState+0x238>)
 8000e90:	f002 ffe3 	bl	8003e5a <HAL_RTC_SetDate>
        	}

        	currentState = SET_DAY;
 8000e94:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <switchState+0x218>)
 8000e96:	2208      	movs	r2, #8
 8000e98:	701a      	strb	r2, [r3, #0]
        	break;
 8000e9a:	e042      	b.n	8000f22 <switchState+0x20e>
        case SET_DAY:
        	counter = tDate->Year * sensitivity;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	78db      	ldrb	r3, [r3, #3]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <switchState+0x220>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	4a21      	ldr	r2, [pc, #132]	@ (8000f30 <switchState+0x21c>)
 8000eac:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE) {
 8000eae:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <switchState+0x22c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <switchState+0x1b6>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	491f      	ldr	r1, [pc, #124]	@ (8000f38 <switchState+0x224>)
 8000eba:	4824      	ldr	r0, [pc, #144]	@ (8000f4c <switchState+0x238>)
 8000ebc:	f002 fed5 	bl	8003c6a <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4923      	ldr	r1, [pc, #140]	@ (8000f50 <switchState+0x23c>)
 8000ec4:	4821      	ldr	r0, [pc, #132]	@ (8000f4c <switchState+0x238>)
 8000ec6:	f002 ffc8 	bl	8003e5a <HAL_RTC_SetDate>
        	}

        	currentState = SET_YEAR;
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <switchState+0x218>)
 8000ecc:	2209      	movs	r2, #9
 8000ece:	701a      	strb	r2, [r3, #0]
        	break;
 8000ed0:	e027      	b.n	8000f22 <switchState+0x20e>
        case SET_YEAR:
        	if(currentDateType == SYSTEM_DATE) {
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <switchState+0x22c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d109      	bne.n	8000eee <switchState+0x1da>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000eda:	2200      	movs	r2, #0
 8000edc:	4916      	ldr	r1, [pc, #88]	@ (8000f38 <switchState+0x224>)
 8000ede:	481b      	ldr	r0, [pc, #108]	@ (8000f4c <switchState+0x238>)
 8000ee0:	f002 fec3 	bl	8003c6a <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	491a      	ldr	r1, [pc, #104]	@ (8000f50 <switchState+0x23c>)
 8000ee8:	4818      	ldr	r0, [pc, #96]	@ (8000f4c <switchState+0x238>)
 8000eea:	f002 ffb6 	bl	8003e5a <HAL_RTC_SetDate>
        	}

        	currentState = SLEEP;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <switchState+0x218>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
        	break;
 8000ef4:	e015      	b.n	8000f22 <switchState+0x20e>
        case SET_COLOR:
        	counter = brightness * sensitivity;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <switchState+0x240>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <switchState+0x220>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <switchState+0x21c>)
 8000f08:	6013      	str	r3, [r2, #0]
            currentState = SET_BRIGHTNESS; // After color, set brightness
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <switchState+0x218>)
 8000f0c:	2206      	movs	r2, #6
 8000f0e:	701a      	strb	r2, [r3, #0]
            break;
 8000f10:	e007      	b.n	8000f22 <switchState+0x20e>
        case SET_BRIGHTNESS:
            currentState = SLEEP; // Return to SLEEP after setting LED features
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <switchState+0x218>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
            break;
 8000f18:	e003      	b.n	8000f22 <switchState+0x20e>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            currentState = SLEEP;
 8000f1a:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <switchState+0x218>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
            break;
 8000f20:	bf00      	nop
    }
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000655 	.word	0x20000655
 8000f30:	20000630 	.word	0x20000630
 8000f34:	2000001c 	.word	0x2000001c
 8000f38:	20000634 	.word	0x20000634
 8000f3c:	20000654 	.word	0x20000654
 8000f40:	200006d9 	.word	0x200006d9
 8000f44:	2000064c 	.word	0x2000064c
 8000f48:	20000650 	.word	0x20000650
 8000f4c:	20000520 	.word	0x20000520
 8000f50:	20000648 	.word	0x20000648
 8000f54:	20000018 	.word	0x20000018

08000f58 <checkButtonPress>:

void checkButtonPress(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 8000f5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f62:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <checkButtonPress+0x40>)
 8000f64:	f002 f8b8 	bl	80030d8 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <checkButtonPress+0x44>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d106      	bne.n	8000f82 <checkButtonPress+0x2a>
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d103      	bne.n	8000f82 <checkButtonPress+0x2a>
        // Button was pressed - perform actions here.
    	stateChangeRequest = true;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <checkButtonPress+0x48>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e002      	b.n	8000f88 <checkButtonPress+0x30>
    } else {
    	stateChangeRequest = false;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <checkButtonPress+0x48>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <checkButtonPress+0x44>)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	7013      	strb	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	20000022 	.word	0x20000022
 8000fa0:	200006d8 	.word	0x200006d8

08000fa4 <SetHours>:




void SetHours() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

    counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <SetHours+0x3c>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <SetHours+0x40>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f7ff fe85 	bl	8000ccc <clampValue>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <SetHours+0x3c>)
 8000fc6:	6013      	str	r3, [r2, #0]
    sTime.Hours = (uint8_t) (counter / sensitivity);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SetHours+0x3c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <SetHours+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <SetHours+0x44>)
 8000fd8:	701a      	strb	r2, [r3, #0]

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000630 	.word	0x20000630
 8000fe4:	2000001c 	.word	0x2000001c
 8000fe8:	20000634 	.word	0x20000634

08000fec <SetMinutes>:

void SetMinutes() {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 59 * sensitivity); //59 minutes
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <SetMinutes+0x3c>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <SetMinutes+0x40>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	461a      	mov	r2, r3
 8001004:	2100      	movs	r1, #0
 8001006:	f7ff fe61 	bl	8000ccc <clampValue>
 800100a:	4603      	mov	r3, r0
 800100c:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <SetMinutes+0x3c>)
 800100e:	6013      	str	r3, [r2, #0]
    sTime.Minutes = (uint8_t) (counter / sensitivity);
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <SetMinutes+0x3c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <SetMinutes+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	fbb2 f3f3 	udiv	r3, r2, r3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <SetMinutes+0x44>)
 8001020:	705a      	strb	r2, [r3, #1]

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000630 	.word	0x20000630
 800102c:	2000001c 	.word	0x2000001c
 8001030:	20000634 	.word	0x20000634

08001034 <SetMonth>:

uint8_t SetMonth(RTC_DateTypeDef * tDate) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 12 * sensitivity); //12 months
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <SetMonth+0x50>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <SetMonth+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f7ff fe3c 	bl	8000ccc <clampValue>
 8001054:	4603      	mov	r3, r0
 8001056:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <SetMonth+0x50>)
 8001058:	6013      	str	r3, [r2, #0]
    tDate->Month = (uint8_t) (counter / sensitivity);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <SetMonth+0x50>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <SetMonth+0x54>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	b2da      	uxtb	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	705a      	strb	r2, [r3, #1]

    return (uint8_t) (counter / sensitivity);
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <SetMonth+0x50>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <SetMonth+0x54>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	b2db      	uxtb	r3, r3
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000630 	.word	0x20000630
 8001088:	2000001c 	.word	0x2000001c

0800108c <SetDay>:

uint8_t SetDay(RTC_DateTypeDef * tDate) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 31 * sensitivity); //31 days
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <SetDay+0x4c>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <SetDay+0x50>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4613      	mov	r3, r2
 800109e:	015b      	lsls	r3, r3, #5
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	461a      	mov	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	f7ff fe11 	bl	8000ccc <clampValue>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SetDay+0x4c>)
 80010ae:	6013      	str	r3, [r2, #0]
    //FIXME: user could enter February 31 which is wrong
    tDate->Date = (uint8_t) (counter / sensitivity);
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <SetDay+0x4c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <SetDay+0x50>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	709a      	strb	r2, [r3, #2]

    return (uint8_t) (counter / sensitivity);
 80010c2:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SetDay+0x4c>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SetDay+0x50>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	b2db      	uxtb	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000630 	.word	0x20000630
 80010dc:	2000001c 	.word	0x2000001c

080010e0 <SetYear>:

uint8_t SetYear(RTC_DateTypeDef * tDate) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 3000 * sensitivity); //12 months
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <SetYear+0x50>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <SetYear+0x54>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	f7ff fde6 	bl	8000ccc <clampValue>
 8001100:	4603      	mov	r3, r0
 8001102:	4a0b      	ldr	r2, [pc, #44]	@ (8001130 <SetYear+0x50>)
 8001104:	6013      	str	r3, [r2, #0]
    tDate->Year = (uint8_t) (counter / sensitivity);
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <SetYear+0x50>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <SetYear+0x54>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	b2da      	uxtb	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	70da      	strb	r2, [r3, #3]

    return (uint8_t) (counter / sensitivity);
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <SetYear+0x50>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <SetYear+0x54>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	b2db      	uxtb	r3, r3
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000630 	.word	0x20000630
 8001134:	2000001c 	.word	0x2000001c

08001138 <SetColor>:

void SetColor() {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <SetColor+0x34>)
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <SetColor+0x38>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	461a      	mov	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	f7ff fdbf 	bl	8000ccc <clampValue>
 800114e:	4603      	mov	r3, r0
 8001150:	4a06      	ldr	r2, [pc, #24]	@ (800116c <SetColor+0x34>)
 8001152:	6013      	str	r3, [r2, #0]
    color = (uint8_t) (counter / sensitivity);
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <SetColor+0x34>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SetColor+0x38>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <SetColor+0x3c>)
 8001164:	701a      	strb	r2, [r3, #0]


}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000630 	.word	0x20000630
 8001170:	2000001c 	.word	0x2000001c
 8001174:	20000654 	.word	0x20000654

08001178 <SetBrightness>:


void SetBrightness() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <SetBrightness+0x3c>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <SetBrightness+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	085b      	lsrs	r3, r3, #1
 8001186:	2264      	movs	r2, #100	@ 0x64
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	461a      	mov	r2, r3
 800118e:	2101      	movs	r1, #1
 8001190:	f7ff fd9c 	bl	8000ccc <clampValue>
 8001194:	4603      	mov	r3, r0
 8001196:	4a07      	ldr	r2, [pc, #28]	@ (80011b4 <SetBrightness+0x3c>)
 8001198:	6013      	str	r3, [r2, #0]
    brightness = (uint8_t) (counter / (sensitivity / 2));
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <SetBrightness+0x3c>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <SetBrightness+0x40>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	085b      	lsrs	r3, r3, #1
 80011a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <SetBrightness+0x44>)
 80011ac:	701a      	strb	r2, [r3, #0]

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000630 	.word	0x20000630
 80011b8:	2000001c 	.word	0x2000001c
 80011bc:	20000018 	.word	0x20000018

080011c0 <Select>:

void Select() {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 3 * sensitivity);
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <Select+0x24>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <Select+0x28>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	461a      	mov	r2, r3
 80011d4:	2100      	movs	r1, #0
 80011d6:	f7ff fd79 	bl	8000ccc <clampValue>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a01      	ldr	r2, [pc, #4]	@ (80011e4 <Select+0x24>)
 80011de:	6013      	str	r3, [r2, #0]

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000630 	.word	0x20000630
 80011e8:	2000001c 	.word	0x2000001c

080011ec <Wake>:

void Wake() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 1);
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <Wake+0x30>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fd67 	bl	8000ccc <clampValue>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <Wake+0x30>)
 8001202:	6013      	str	r3, [r2, #0]
	//counter = 0 -> isSet
	//counter = 1 -> isNotSet
	isSet = !counter;
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <Wake+0x30>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <Wake+0x34>)
 8001214:	701a      	strb	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000630 	.word	0x20000630
 8001220:	20000020 	.word	0x20000020

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122a:	f001 f897 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122e:	f000 f919 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001232:	f000 faef 	bl	8001814 <MX_GPIO_Init>
  MX_DMA_Init();
 8001236:	f000 facd 	bl	80017d4 <MX_DMA_Init>
  MX_TIM1_Init();
 800123a:	f000 f9d7 	bl	80015ec <MX_TIM1_Init>
  MX_TIM3_Init();
 800123e:	f000 fa75 	bl	800172c <MX_TIM3_Init>
  MX_RTC_Init();
 8001242:	f000 f979 	bl	8001538 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 8001246:	213c      	movs	r1, #60	@ 0x3c
 8001248:	4879      	ldr	r0, [pc, #484]	@ (8001430 <main+0x20c>)
 800124a:	f003 fb5b 	bl	8004904 <HAL_TIM_Encoder_Start>

  // get time and get date must both be called
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800124e:	2200      	movs	r2, #0
 8001250:	4978      	ldr	r1, [pc, #480]	@ (8001434 <main+0x210>)
 8001252:	4879      	ldr	r0, [pc, #484]	@ (8001438 <main+0x214>)
 8001254:	f002 fda3 	bl	8003d9e <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001258:	2200      	movs	r2, #0
 800125a:	4978      	ldr	r1, [pc, #480]	@ (800143c <main+0x218>)
 800125c:	4876      	ldr	r0, [pc, #472]	@ (8001438 <main+0x214>)
 800125e:	f002 fe80 	bl	8003f62 <HAL_RTC_GetDate>
  display_time(sTime.Hours, sTime.Minutes, 5, 5, 5, 5);
 8001262:	4b74      	ldr	r3, [pc, #464]	@ (8001434 <main+0x210>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	4b72      	ldr	r3, [pc, #456]	@ (8001434 <main+0x210>)
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	4619      	mov	r1, r3
 800126e:	2305      	movs	r3, #5
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2305      	movs	r3, #5
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2305      	movs	r3, #5
 8001278:	2205      	movs	r2, #5
 800127a:	f7ff fba9 	bl	80009d0 <display_time>
  flickerInEffect();
 800127e:	f7ff fb1f 	bl	80008c0 <flickerInEffect>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001282:	4b6b      	ldr	r3, [pc, #428]	@ (8001430 <main+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	4a6d      	ldr	r2, [pc, #436]	@ (8001440 <main+0x21c>)
 800128a:	6013      	str	r3, [r2, #0]

	checkButtonPress();
 800128c:	f7ff fe64 	bl	8000f58 <checkButtonPress>
	if(stateChangeRequest){
 8001290:	4b6c      	ldr	r3, [pc, #432]	@ (8001444 <main+0x220>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01e      	beq.n	80012d6 <main+0xb2>
		switchState((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001298:	4b6b      	ldr	r3, [pc, #428]	@ (8001448 <main+0x224>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <main+0x8c>
 80012a0:	4b69      	ldr	r3, [pc, #420]	@ (8001448 <main+0x224>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d101      	bne.n	80012ac <main+0x88>
 80012a8:	4b68      	ldr	r3, [pc, #416]	@ (800144c <main+0x228>)
 80012aa:	e002      	b.n	80012b2 <main+0x8e>
 80012ac:	4b68      	ldr	r3, [pc, #416]	@ (8001450 <main+0x22c>)
 80012ae:	e000      	b.n	80012b2 <main+0x8e>
 80012b0:	4b62      	ldr	r3, [pc, #392]	@ (800143c <main+0x218>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd2e 	bl	8000d14 <switchState>
		stateChangeRequest = !stateChangeRequest;
 80012b8:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <main+0x220>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf14      	ite	ne
 80012c0:	2301      	movne	r3, #1
 80012c2:	2300      	moveq	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001444 <main+0x220>)
 80012d4:	701a      	strb	r2, [r3, #0]
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80012d6:	2200      	movs	r2, #0
 80012d8:	4956      	ldr	r1, [pc, #344]	@ (8001434 <main+0x210>)
 80012da:	4857      	ldr	r0, [pc, #348]	@ (8001438 <main+0x214>)
 80012dc:	f002 fd5f 	bl	8003d9e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80012e0:	2200      	movs	r2, #0
 80012e2:	4956      	ldr	r1, [pc, #344]	@ (800143c <main+0x218>)
 80012e4:	4854      	ldr	r0, [pc, #336]	@ (8001438 <main+0x214>)
 80012e6:	f002 fe3c 	bl	8003f62 <HAL_RTC_GetDate>


	switch(currentState) {
 80012ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001454 <main+0x230>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b09      	cmp	r3, #9
 80012f2:	d85d      	bhi.n	80013b0 <main+0x18c>
 80012f4:	a201      	add	r2, pc, #4	@ (adr r2, 80012fc <main+0xd8>)
 80012f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fa:	bf00      	nop
 80012fc:	080013b1 	.word	0x080013b1
 8001300:	08001325 	.word	0x08001325
 8001304:	0800132b 	.word	0x0800132b
 8001308:	08001331 	.word	0x08001331
 800130c:	08001337 	.word	0x08001337
 8001310:	080013a3 	.word	0x080013a3
 8001314:	080013ab 	.word	0x080013ab
 8001318:	0800133d 	.word	0x0800133d
 800131c:	0800135f 	.word	0x0800135f
 8001320:	08001381 	.word	0x08001381
		case SLEEP:

			break;
		case WAKE:
			Wake();
 8001324:	f7ff ff62 	bl	80011ec <Wake>
			break;
 8001328:	e043      	b.n	80013b2 <main+0x18e>
		case SELECT:
			Select();
 800132a:	f7ff ff49 	bl	80011c0 <Select>
			break;
 800132e:	e040      	b.n	80013b2 <main+0x18e>
		case SET_HOURS:
			SetHours();
 8001330:	f7ff fe38 	bl	8000fa4 <SetHours>
			break;
 8001334:	e03d      	b.n	80013b2 <main+0x18e>
		case SET_MINUTES:
			SetMinutes();
 8001336:	f7ff fe59 	bl	8000fec <SetMinutes>
			break;
 800133a:	e03a      	b.n	80013b2 <main+0x18e>
		case SET_MONTH:
			SetMonth((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 800133c:	4b42      	ldr	r3, [pc, #264]	@ (8001448 <main+0x224>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <main+0x130>
 8001344:	4b40      	ldr	r3, [pc, #256]	@ (8001448 <main+0x224>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d101      	bne.n	8001350 <main+0x12c>
 800134c:	4b3f      	ldr	r3, [pc, #252]	@ (800144c <main+0x228>)
 800134e:	e002      	b.n	8001356 <main+0x132>
 8001350:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <main+0x22c>)
 8001352:	e000      	b.n	8001356 <main+0x132>
 8001354:	4b39      	ldr	r3, [pc, #228]	@ (800143c <main+0x218>)
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fe6c 	bl	8001034 <SetMonth>
			break;
 800135c:	e029      	b.n	80013b2 <main+0x18e>
		case SET_DAY:
			SetDay((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 800135e:	4b3a      	ldr	r3, [pc, #232]	@ (8001448 <main+0x224>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <main+0x152>
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <main+0x224>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d101      	bne.n	8001372 <main+0x14e>
 800136e:	4b37      	ldr	r3, [pc, #220]	@ (800144c <main+0x228>)
 8001370:	e002      	b.n	8001378 <main+0x154>
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <main+0x22c>)
 8001374:	e000      	b.n	8001378 <main+0x154>
 8001376:	4b31      	ldr	r3, [pc, #196]	@ (800143c <main+0x218>)
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe87 	bl	800108c <SetDay>
			break;
 800137e:	e018      	b.n	80013b2 <main+0x18e>
		case SET_YEAR:
			SetYear((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001380:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <main+0x224>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <main+0x174>
 8001388:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <main+0x224>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d101      	bne.n	8001394 <main+0x170>
 8001390:	4b2e      	ldr	r3, [pc, #184]	@ (800144c <main+0x228>)
 8001392:	e002      	b.n	800139a <main+0x176>
 8001394:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <main+0x22c>)
 8001396:	e000      	b.n	800139a <main+0x176>
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <main+0x218>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fea0 	bl	80010e0 <SetYear>
			break;
 80013a0:	e007      	b.n	80013b2 <main+0x18e>
		case SET_COLOR:
			SetColor(&sDate);
 80013a2:	4826      	ldr	r0, [pc, #152]	@ (800143c <main+0x218>)
 80013a4:	f7ff fec8 	bl	8001138 <SetColor>
			break;
 80013a8:	e003      	b.n	80013b2 <main+0x18e>
		case SET_BRIGHTNESS:
			SetBrightness();
 80013aa:	f7ff fee5 	bl	8001178 <SetBrightness>
			break;
 80013ae:	e000      	b.n	80013b2 <main+0x18e>
		default:
			break;
 80013b0:	bf00      	nop
	}

	__HAL_TIM_SET_COUNTER(&htim3, counter);
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <main+0x20c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <main+0x21c>)
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	625a      	str	r2, [r3, #36]	@ 0x24
	Segment_Display(displayStr);
 80013bc:	4826      	ldr	r0, [pc, #152]	@ (8001458 <main+0x234>)
 80013be:	f000 fe07 	bl	8001fd0 <Segment_Display>

	if((sTime.Minutes % 5 == 0 && sTime.Minutes != previousMinutes)) {
 80013c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <main+0x210>)
 80013c4:	785a      	ldrb	r2, [r3, #1]
 80013c6:	4b25      	ldr	r3, [pc, #148]	@ (800145c <main+0x238>)
 80013c8:	fba3 1302 	umull	r1, r3, r3, r2
 80013cc:	0899      	lsrs	r1, r3, #2
 80013ce:	460b      	mov	r3, r1
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d11d      	bne.n	8001418 <main+0x1f4>
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <main+0x210>)
 80013de:	785a      	ldrb	r2, [r3, #1]
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <main+0x23c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d017      	beq.n	8001418 <main+0x1f4>
		flickerOutEffect();
 80013e8:	f7ff f9de 	bl	80007a8 <flickerOutEffect>
		advanceFrame();
 80013ec:	f7ff f990 	bl	8000710 <advanceFrame>

		display_time(sTime.Hours, sTime.Minutes, 5, 5, 5, 5);
 80013f0:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <main+0x210>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <main+0x210>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	4619      	mov	r1, r3
 80013fc:	2305      	movs	r3, #5
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2305      	movs	r3, #5
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2305      	movs	r3, #5
 8001406:	2205      	movs	r2, #5
 8001408:	f7ff fae2 	bl	80009d0 <display_time>

		flickerInEffect();
 800140c:	f7ff fa58 	bl	80008c0 <flickerInEffect>
		previousMinutes = sTime.Minutes;
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <main+0x210>)
 8001412:	785a      	ldrb	r2, [r3, #1]
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <main+0x23c>)
 8001416:	701a      	strb	r2, [r3, #0]
	}



	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001418:	2200      	movs	r2, #0
 800141a:	4906      	ldr	r1, [pc, #24]	@ (8001434 <main+0x210>)
 800141c:	4806      	ldr	r0, [pc, #24]	@ (8001438 <main+0x214>)
 800141e:	f002 fc24 	bl	8003c6a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001422:	2200      	movs	r2, #0
 8001424:	4905      	ldr	r1, [pc, #20]	@ (800143c <main+0x218>)
 8001426:	4804      	ldr	r0, [pc, #16]	@ (8001438 <main+0x214>)
 8001428:	f002 fd17 	bl	8003e5a <HAL_RTC_SetDate>
	counter = __HAL_TIM_GET_COUNTER(&htim3);
 800142c:	e729      	b.n	8001282 <main+0x5e>
 800142e:	bf00      	nop
 8001430:	20000588 	.word	0x20000588
 8001434:	20000634 	.word	0x20000634
 8001438:	20000520 	.word	0x20000520
 800143c:	20000648 	.word	0x20000648
 8001440:	20000630 	.word	0x20000630
 8001444:	200006d8 	.word	0x200006d8
 8001448:	200006d9 	.word	0x200006d9
 800144c:	20000650 	.word	0x20000650
 8001450:	2000064c 	.word	0x2000064c
 8001454:	20000655 	.word	0x20000655
 8001458:	20000658 	.word	0x20000658
 800145c:	cccccccd 	.word	0xcccccccd
 8001460:	20000021 	.word	0x20000021

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	@ 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	@ 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fc29 	bl	8005cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <SystemClock_Config+0xcc>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <SystemClock_Config+0xcc>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
 8001498:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <SystemClock_Config+0xcc>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <SystemClock_Config+0xd0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a21      	ldr	r2, [pc, #132]	@ (8001534 <SystemClock_Config+0xd0>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <SystemClock_Config+0xd0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80014c0:	2305      	movs	r3, #5
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ca:	2301      	movs	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	2302      	movs	r3, #2
 80014d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80014d8:	230c      	movs	r3, #12
 80014da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014dc:	2348      	movs	r3, #72	@ 0x48
 80014de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e4:	2304      	movs	r3, #4
 80014e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fe25 	bl	800313c <HAL_RCC_OscConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014f8:	f000 fa10 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fc:	230f      	movs	r3, #15
 80014fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001500:	2302      	movs	r3, #2
 8001502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2102      	movs	r1, #2
 8001518:	4618      	mov	r0, r3
 800151a:	f002 f887 	bl	800362c <HAL_RCC_ClockConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001524:	f000 f9fa 	bl	800191c <Error_Handler>
  }
}
 8001528:	bf00      	nop
 800152a:	3750      	adds	r7, #80	@ 0x50
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800154c:	2300      	movs	r3, #0
 800154e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <MX_RTC_Init+0xac>)
 8001552:	4a25      	ldr	r2, [pc, #148]	@ (80015e8 <MX_RTC_Init+0xb0>)
 8001554:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <MX_RTC_Init+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800155c:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <MX_RTC_Init+0xac>)
 800155e:	227f      	movs	r2, #127	@ 0x7f
 8001560:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <MX_RTC_Init+0xac>)
 8001564:	22ff      	movs	r2, #255	@ 0xff
 8001566:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001568:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <MX_RTC_Init+0xac>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <MX_RTC_Init+0xac>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <MX_RTC_Init+0xac>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800157a:	481a      	ldr	r0, [pc, #104]	@ (80015e4 <MX_RTC_Init+0xac>)
 800157c:	f002 faf2 	bl	8003b64 <HAL_RTC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001586:	f000 f9c9 	bl	800191c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 800158a:	2302      	movs	r3, #2
 800158c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800158e:	2300      	movs	r3, #0
 8001590:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001592:	2300      	movs	r3, #0
 8001594:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2201      	movs	r2, #1
 80015a2:	4619      	mov	r1, r3
 80015a4:	480f      	ldr	r0, [pc, #60]	@ (80015e4 <MX_RTC_Init+0xac>)
 80015a6:	f002 fb60 	bl	8003c6a <HAL_RTC_SetTime>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80015b0:	f000 f9b4 	bl	800191c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015b4:	2301      	movs	r3, #1
 80015b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80015b8:	2301      	movs	r3, #1
 80015ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80015bc:	2301      	movs	r3, #1
 80015be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2201      	movs	r2, #1
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <MX_RTC_Init+0xac>)
 80015cc:	f002 fc45 	bl	8003e5a <HAL_RTC_SetDate>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80015d6:	f000 f9a1 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000520 	.word	0x20000520
 80015e8:	40002800 	.word	0x40002800

080015ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b096      	sub	sp, #88	@ 0x58
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2220      	movs	r2, #32
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fb50 	bl	8005cca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800162a:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <MX_TIM1_Init+0x138>)
 800162c:	4a3e      	ldr	r2, [pc, #248]	@ (8001728 <MX_TIM1_Init+0x13c>)
 800162e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001630:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 800163c:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <MX_TIM1_Init+0x138>)
 800163e:	2259      	movs	r2, #89	@ 0x59
 8001640:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001648:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <MX_TIM1_Init+0x138>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001654:	4833      	ldr	r0, [pc, #204]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001656:	f002 fd91 	bl	800417c <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001660:	f000 f95c 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001668:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800166a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800166e:	4619      	mov	r1, r3
 8001670:	482c      	ldr	r0, [pc, #176]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001672:	f003 fb87 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800167c:	f000 f94e 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001680:	4828      	ldr	r0, [pc, #160]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001682:	f002 fdca 	bl	800421a <HAL_TIM_PWM_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800168c:	f000 f946 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001698:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800169c:	4619      	mov	r1, r3
 800169e:	4821      	ldr	r0, [pc, #132]	@ (8001724 <MX_TIM1_Init+0x138>)
 80016a0:	f004 f81c 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80016aa:	f000 f937 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ae:	2360      	movs	r3, #96	@ 0x60
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4814      	ldr	r0, [pc, #80]	@ (8001724 <MX_TIM1_Init+0x138>)
 80016d4:	f003 fa94 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80016de:	f000 f91d 	bl	800191c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4619      	mov	r1, r3
 8001704:	4807      	ldr	r0, [pc, #28]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001706:	f004 f857 	bl	80057b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001710:	f000 f904 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <MX_TIM1_Init+0x138>)
 8001716:	f000 fa21 	bl	8001b5c <HAL_TIM_MspPostInit>

}
 800171a:	bf00      	nop
 800171c:	3758      	adds	r7, #88	@ 0x58
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000540 	.word	0x20000540
 8001728:	40010000 	.word	0x40010000

0800172c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	@ 0x30
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2224      	movs	r2, #36	@ 0x24
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fac5 	bl	8005cca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001748:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <MX_TIM3_Init+0xa0>)
 800174a:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <MX_TIM3_Init+0xa4>)
 800174c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <MX_TIM3_Init+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <MX_TIM3_Init+0xa0>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <MX_TIM3_Init+0xa0>)
 800175c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001760:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <MX_TIM3_Init+0xa0>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <MX_TIM3_Init+0xa0>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800176e:	2303      	movs	r3, #3
 8001770:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001772:	2302      	movs	r3, #2
 8001774:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001776:	2301      	movs	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001782:	2302      	movs	r3, #2
 8001784:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001786:	2301      	movs	r3, #1
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <MX_TIM3_Init+0xa0>)
 800179a:	f003 f80d 	bl	80047b8 <HAL_TIM_Encoder_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f000 f8ba 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_TIM3_Init+0xa0>)
 80017b6:	f003 ff91 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017c0:	f000 f8ac 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3730      	adds	r7, #48	@ 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000588 	.word	0x20000588
 80017d0:	40000400 	.word	0x40000400

080017d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <MX_DMA_Init+0x3c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001810 <MX_DMA_Init+0x3c>)
 80017e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <MX_DMA_Init+0x3c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2108      	movs	r1, #8
 80017fa:	2039      	movs	r0, #57	@ 0x39
 80017fc:	f000 ff1f 	bl	800263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001800:	2039      	movs	r0, #57	@ 0x39
 8001802:	f000 ff38 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800

08001814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a37      	ldr	r2, [pc, #220]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <MX_GPIO_Init+0xfc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <MX_GPIO_Init+0xfc>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a30      	ldr	r2, [pc, #192]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a29      	ldr	r2, [pc, #164]	@ (8001910 <MX_GPIO_Init+0xfc>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a22      	ldr	r2, [pc, #136]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <MX_GPIO_Init+0xfc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800189a:	2200      	movs	r2, #0
 800189c:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 80018a0:	481c      	ldr	r0, [pc, #112]	@ (8001914 <MX_GPIO_Init+0x100>)
 80018a2:	f001 fc31 	bl	8003108 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 80018a6:	2200      	movs	r2, #0
 80018a8:	f241 4107 	movw	r1, #5127	@ 0x1407
 80018ac:	481a      	ldr	r0, [pc, #104]	@ (8001918 <MX_GPIO_Init+0x104>)
 80018ae:	f001 fc2b 	bl	8003108 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 80018b2:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 80018b6:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4812      	ldr	r0, [pc, #72]	@ (8001914 <MX_GPIO_Init+0x100>)
 80018cc:	f001 fa80 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 80018d0:	f241 4307 	movw	r3, #5127	@ 0x1407
 80018d4:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	480b      	ldr	r0, [pc, #44]	@ (8001918 <MX_GPIO_Init+0x104>)
 80018ea:	f001 fa71 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80018ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_GPIO_Init+0x104>)
 8001904:	f001 fa64 	bl	8002dd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	@ 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <Error_Handler+0x8>

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_MspInit+0x90>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a20      	ldr	r2, [pc, #128]	@ (80019b8 <HAL_MspInit+0x90>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <HAL_MspInit+0x90>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_MspInit+0x90>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_MspInit+0x90>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	@ 0x40
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_MspInit+0x90>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2101      	movs	r1, #1
 800196a:	f06f 000b 	mvn.w	r0, #11
 800196e:	f000 fe66 	bl	800263e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2102      	movs	r1, #2
 8001976:	f06f 000a 	mvn.w	r0, #10
 800197a:	f000 fe60 	bl	800263e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2103      	movs	r1, #3
 8001982:	f06f 0009 	mvn.w	r0, #9
 8001986:	f000 fe5a 	bl	800263e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2104      	movs	r1, #4
 800198e:	f06f 0004 	mvn.w	r0, #4
 8001992:	f000 fe54 	bl	800263e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	f06f 0003 	mvn.w	r0, #3
 800199e:	f000 fe4e 	bl	800263e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2106      	movs	r1, #6
 80019a6:	f06f 0001 	mvn.w	r0, #1
 80019aa:	f000 fe48 	bl	800263e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <HAL_RTC_MspInit+0x50>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d111      	bne.n	8001a04 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019e0:	2302      	movs	r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019e8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 ffc8 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80019fa:	f7ff ff8f 	bl	800191c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019fe:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <HAL_RTC_MspInit+0x54>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40002800 	.word	0x40002800
 8001a10:	42470e3c 	.word	0x42470e3c

08001a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <HAL_TIM_Base_MspInit+0x98>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d13d      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	4a20      	ldr	r2, [pc, #128]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a36:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x9c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a44:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a46:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a4a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001a4e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a52:	2240      	movs	r2, #64	@ 0x40
 8001a54:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a62:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a64:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a6a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a72:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001a86:	480b      	ldr	r0, [pc, #44]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a88:	f000 fe10 	bl	80026ac <HAL_DMA_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001a92:	f7ff ff43 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a06      	ldr	r2, [pc, #24]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a9c:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	200005d0 	.word	0x200005d0
 8001ab8:	40026428 	.word	0x40026428

08001abc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b50 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d133      	bne.n	8001b46 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b16:	2330      	movs	r3, #48	@ 0x30
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b26:	2302      	movs	r3, #2
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001b32:	f001 f94d 	bl	8002dd0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2109      	movs	r1, #9
 8001b3a:	201d      	movs	r0, #29
 8001b3c:	f000 fd7f 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b40:	201d      	movs	r0, #29
 8001b42:	f000 fd98 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	@ 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400

08001b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <HAL_TIM_MspPostInit+0x68>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d11e      	bne.n	8001bbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_TIM_MspPostInit+0x6c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <HAL_TIM_MspPostInit+0x6c>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_TIM_MspPostInit+0x6c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <HAL_TIM_MspPostInit+0x70>)
 8001bb8:	f001 f90a 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <MemManage_Handler+0x4>

08001be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c26:	f000 fbeb 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <TIM3_IRQHandler+0x10>)
 8001c36:	f002 fef3 	bl	8004a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000588 	.word	0x20000588

08001c44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <DMA2_Stream1_IRQHandler+0x10>)
 8001c4a:	f000 fe57 	bl	80028fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200005d0 	.word	0x200005d0

08001c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_kill>:

int _kill(int pid, int sig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c72:	f004 f88b 	bl	8005d8c <__errno>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2216      	movs	r2, #22
 8001c7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_exit>:

void _exit (int status)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ffe7 	bl	8001c68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c9a:	bf00      	nop
 8001c9c:	e7fd      	b.n	8001c9a <_exit+0x12>

08001c9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e00a      	b.n	8001cc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb0:	f3af 8000 	nop.w
 8001cb4:	4601      	mov	r1, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	60ba      	str	r2, [r7, #8]
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbf0      	blt.n	8001cb0 <_read+0x12>
  }

  return len;
 8001cce:	687b      	ldr	r3, [r7, #4]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e009      	b.n	8001cfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	60ba      	str	r2, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	dbf1      	blt.n	8001cea <_write+0x12>
  }
  return len;
 8001d06:	687b      	ldr	r3, [r7, #4]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_close>:

int _close(int file)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d38:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_isatty>:

int _isatty(int file)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f003 fff0 	bl	8005d8c <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	@ (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20020000 	.word	0x20020000
 8001dd8:	00010000 	.word	0x00010000
 8001ddc:	200006dc 	.word	0x200006dc
 8001de0:	20002368 	.word	0x20002368

08001de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <SystemInit+0x20>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <SystemInit+0x20>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e0c:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0e:	490e      	ldr	r1, [pc, #56]	@ (8001e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e10:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e24:	4c0b      	ldr	r4, [pc, #44]	@ (8001e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e32:	f7ff ffd7 	bl	8001de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f003 ffaf 	bl	8005d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff f9f3 	bl	8001224 <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001e4c:	08006e38 	.word	0x08006e38
  ldr r2, =_sbss
 8001e50:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001e54:	20002368 	.word	0x20002368

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>
	...

08001e5c <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	2104      	movs	r1, #4
 8001e7a:	4830      	ldr	r0, [pc, #192]	@ (8001f3c <setSegments+0xe0>)
 8001e7c:	f001 f944 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	2101      	movs	r1, #1
 8001e94:	4829      	ldr	r0, [pc, #164]	@ (8001f3c <setSegments+0xe0>)
 8001e96:	f001 f937 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2108      	movs	r1, #8
 8001eae:	4823      	ldr	r0, [pc, #140]	@ (8001f3c <setSegments+0xe0>)
 8001eb0:	f001 f92a 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf0c      	ite	eq
 8001ebe:	2301      	moveq	r3, #1
 8001ec0:	2300      	movne	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	481d      	ldr	r0, [pc, #116]	@ (8001f40 <setSegments+0xe4>)
 8001eca:	f001 f91d 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4817      	ldr	r0, [pc, #92]	@ (8001f40 <setSegments+0xe4>)
 8001ee4:	f001 f910 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2110      	movs	r1, #16
 8001efc:	480f      	ldr	r0, [pc, #60]	@ (8001f3c <setSegments+0xe0>)
 8001efe:	f001 f903 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	2102      	movs	r1, #2
 8001f16:	4809      	ldr	r0, [pc, #36]	@ (8001f3c <setSegments+0xe0>)
 8001f18:	f001 f8f6 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	09db      	lsrs	r3, r3, #7
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2140      	movs	r1, #64	@ 0x40
 8001f2c:	4803      	ldr	r0, [pc, #12]	@ (8001f3c <setSegments+0xe0>)
 8001f2e:	f001 f8eb 	bl	8003108 <HAL_GPIO_WritePin>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400

08001f44 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f60:	4819      	ldr	r0, [pc, #100]	@ (8001fc8 <activateDigit+0x84>)
 8001f62:	f001 f8d1 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f78:	4813      	ldr	r0, [pc, #76]	@ (8001fc8 <activateDigit+0x84>)
 8001f7a:	f001 f8c5 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2180      	movs	r1, #128	@ 0x80
 8001f8e:	480f      	ldr	r0, [pc, #60]	@ (8001fcc <activateDigit+0x88>)
 8001f90:	f001 f8ba 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2120      	movs	r1, #32
 8001fa4:	4809      	ldr	r0, [pc, #36]	@ (8001fcc <activateDigit+0x88>)
 8001fa6:	f001 f8af 	bl	8003108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2102      	movs	r1, #2
 8001fba:	4803      	ldr	r0, [pc, #12]	@ (8001fc8 <activateDigit+0x84>)
 8001fbc:	f001 f8a4 	bl	8003108 <HAL_GPIO_WritePin>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	2204      	movs	r2, #4
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fe7a 	bl	8005cda <strncpy>
    truncatedInput[4] = '\0';
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e1ab      	b.n	8002348 <Segment_Display+0x378>
        activateDigit(i + 1);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ffa4 	bl	8001f44 <activateDigit>

		char ch = truncatedInput[i];
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	3310      	adds	r3, #16
 8002000:	443b      	add	r3, r7
 8002002:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002006:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	2b7a      	cmp	r3, #122	@ 0x7a
 800200c:	f200 8192 	bhi.w	8002334 <Segment_Display+0x364>
 8002010:	a201      	add	r2, pc, #4	@ (adr r2, 8002018 <Segment_Display+0x48>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	08002353 	.word	0x08002353
 800201c:	08002335 	.word	0x08002335
 8002020:	08002335 	.word	0x08002335
 8002024:	08002335 	.word	0x08002335
 8002028:	08002335 	.word	0x08002335
 800202c:	08002335 	.word	0x08002335
 8002030:	08002335 	.word	0x08002335
 8002034:	08002335 	.word	0x08002335
 8002038:	08002335 	.word	0x08002335
 800203c:	08002335 	.word	0x08002335
 8002040:	08002335 	.word	0x08002335
 8002044:	08002335 	.word	0x08002335
 8002048:	08002335 	.word	0x08002335
 800204c:	08002335 	.word	0x08002335
 8002050:	08002335 	.word	0x08002335
 8002054:	08002335 	.word	0x08002335
 8002058:	08002335 	.word	0x08002335
 800205c:	08002335 	.word	0x08002335
 8002060:	08002335 	.word	0x08002335
 8002064:	08002335 	.word	0x08002335
 8002068:	08002335 	.word	0x08002335
 800206c:	08002335 	.word	0x08002335
 8002070:	08002335 	.word	0x08002335
 8002074:	08002335 	.word	0x08002335
 8002078:	08002335 	.word	0x08002335
 800207c:	08002335 	.word	0x08002335
 8002080:	08002335 	.word	0x08002335
 8002084:	08002335 	.word	0x08002335
 8002088:	08002335 	.word	0x08002335
 800208c:	08002335 	.word	0x08002335
 8002090:	08002335 	.word	0x08002335
 8002094:	08002335 	.word	0x08002335
 8002098:	08002325 	.word	0x08002325
 800209c:	08002335 	.word	0x08002335
 80020a0:	08002335 	.word	0x08002335
 80020a4:	08002335 	.word	0x08002335
 80020a8:	08002335 	.word	0x08002335
 80020ac:	08002335 	.word	0x08002335
 80020b0:	08002335 	.word	0x08002335
 80020b4:	08002335 	.word	0x08002335
 80020b8:	08002335 	.word	0x08002335
 80020bc:	08002335 	.word	0x08002335
 80020c0:	08002335 	.word	0x08002335
 80020c4:	08002335 	.word	0x08002335
 80020c8:	08002335 	.word	0x08002335
 80020cc:	0800232d 	.word	0x0800232d
 80020d0:	08002335 	.word	0x08002335
 80020d4:	08002335 	.word	0x08002335
 80020d8:	08002205 	.word	0x08002205
 80020dc:	0800220d 	.word	0x0800220d
 80020e0:	08002215 	.word	0x08002215
 80020e4:	0800221d 	.word	0x0800221d
 80020e8:	08002225 	.word	0x08002225
 80020ec:	0800222d 	.word	0x0800222d
 80020f0:	08002235 	.word	0x08002235
 80020f4:	0800223d 	.word	0x0800223d
 80020f8:	08002245 	.word	0x08002245
 80020fc:	0800224d 	.word	0x0800224d
 8002100:	08002335 	.word	0x08002335
 8002104:	08002335 	.word	0x08002335
 8002108:	08002335 	.word	0x08002335
 800210c:	08002335 	.word	0x08002335
 8002110:	08002335 	.word	0x08002335
 8002114:	08002335 	.word	0x08002335
 8002118:	08002335 	.word	0x08002335
 800211c:	08002255 	.word	0x08002255
 8002120:	0800225d 	.word	0x0800225d
 8002124:	08002265 	.word	0x08002265
 8002128:	0800226d 	.word	0x0800226d
 800212c:	08002275 	.word	0x08002275
 8002130:	0800227d 	.word	0x0800227d
 8002134:	08002285 	.word	0x08002285
 8002138:	0800228d 	.word	0x0800228d
 800213c:	08002295 	.word	0x08002295
 8002140:	0800229d 	.word	0x0800229d
 8002144:	080022a5 	.word	0x080022a5
 8002148:	080022ad 	.word	0x080022ad
 800214c:	080022b5 	.word	0x080022b5
 8002150:	080022bd 	.word	0x080022bd
 8002154:	080022c5 	.word	0x080022c5
 8002158:	080022cd 	.word	0x080022cd
 800215c:	080022d5 	.word	0x080022d5
 8002160:	080022dd 	.word	0x080022dd
 8002164:	080022e5 	.word	0x080022e5
 8002168:	080022ed 	.word	0x080022ed
 800216c:	080022f5 	.word	0x080022f5
 8002170:	080022fd 	.word	0x080022fd
 8002174:	08002305 	.word	0x08002305
 8002178:	0800230d 	.word	0x0800230d
 800217c:	08002315 	.word	0x08002315
 8002180:	0800231d 	.word	0x0800231d
 8002184:	08002335 	.word	0x08002335
 8002188:	08002335 	.word	0x08002335
 800218c:	08002335 	.word	0x08002335
 8002190:	08002335 	.word	0x08002335
 8002194:	08002335 	.word	0x08002335
 8002198:	08002335 	.word	0x08002335
 800219c:	08002255 	.word	0x08002255
 80021a0:	0800225d 	.word	0x0800225d
 80021a4:	08002265 	.word	0x08002265
 80021a8:	0800226d 	.word	0x0800226d
 80021ac:	08002275 	.word	0x08002275
 80021b0:	0800227d 	.word	0x0800227d
 80021b4:	08002285 	.word	0x08002285
 80021b8:	0800228d 	.word	0x0800228d
 80021bc:	08002295 	.word	0x08002295
 80021c0:	0800229d 	.word	0x0800229d
 80021c4:	080022a5 	.word	0x080022a5
 80021c8:	080022ad 	.word	0x080022ad
 80021cc:	080022b5 	.word	0x080022b5
 80021d0:	080022bd 	.word	0x080022bd
 80021d4:	080022c5 	.word	0x080022c5
 80021d8:	080022cd 	.word	0x080022cd
 80021dc:	080022d5 	.word	0x080022d5
 80021e0:	080022dd 	.word	0x080022dd
 80021e4:	080022e5 	.word	0x080022e5
 80021e8:	080022ed 	.word	0x080022ed
 80021ec:	080022f5 	.word	0x080022f5
 80021f0:	080022fd 	.word	0x080022fd
 80021f4:	08002305 	.word	0x08002305
 80021f8:	0800230d 	.word	0x0800230d
 80021fc:	08002315 	.word	0x08002315
 8002200:	0800231d 	.word	0x0800231d
        	case '\0':
        		return;
            case '0':
                setSegments(0x3F);
 8002204:	203f      	movs	r0, #63	@ 0x3f
 8002206:	f7ff fe29 	bl	8001e5c <setSegments>
                break;
 800220a:	e097      	b.n	800233c <Segment_Display+0x36c>
            case '1':
                setSegments(0x06);
 800220c:	2006      	movs	r0, #6
 800220e:	f7ff fe25 	bl	8001e5c <setSegments>
                break;
 8002212:	e093      	b.n	800233c <Segment_Display+0x36c>
            case '2':
                setSegments(0x5B);
 8002214:	205b      	movs	r0, #91	@ 0x5b
 8002216:	f7ff fe21 	bl	8001e5c <setSegments>
                break;
 800221a:	e08f      	b.n	800233c <Segment_Display+0x36c>
            case '3':
                setSegments(0x4F);
 800221c:	204f      	movs	r0, #79	@ 0x4f
 800221e:	f7ff fe1d 	bl	8001e5c <setSegments>
                break;
 8002222:	e08b      	b.n	800233c <Segment_Display+0x36c>
            case '4':
                setSegments(0x66);
 8002224:	2066      	movs	r0, #102	@ 0x66
 8002226:	f7ff fe19 	bl	8001e5c <setSegments>
                break;
 800222a:	e087      	b.n	800233c <Segment_Display+0x36c>
            case '5':
                setSegments(0x6D);
 800222c:	206d      	movs	r0, #109	@ 0x6d
 800222e:	f7ff fe15 	bl	8001e5c <setSegments>
                break;
 8002232:	e083      	b.n	800233c <Segment_Display+0x36c>
            case '6':
                setSegments(0x7D);
 8002234:	207d      	movs	r0, #125	@ 0x7d
 8002236:	f7ff fe11 	bl	8001e5c <setSegments>
                break;
 800223a:	e07f      	b.n	800233c <Segment_Display+0x36c>
            case '7':
                setSegments(0x07);
 800223c:	2007      	movs	r0, #7
 800223e:	f7ff fe0d 	bl	8001e5c <setSegments>
                break;
 8002242:	e07b      	b.n	800233c <Segment_Display+0x36c>
            case '8':
                setSegments(0x7F);
 8002244:	207f      	movs	r0, #127	@ 0x7f
 8002246:	f7ff fe09 	bl	8001e5c <setSegments>
                break;
 800224a:	e077      	b.n	800233c <Segment_Display+0x36c>
            case '9':
                setSegments(0x6F);
 800224c:	206f      	movs	r0, #111	@ 0x6f
 800224e:	f7ff fe05 	bl	8001e5c <setSegments>
                break;
 8002252:	e073      	b.n	800233c <Segment_Display+0x36c>
            case 'a':
            case 'A':
                setSegments(0x77);
 8002254:	2077      	movs	r0, #119	@ 0x77
 8002256:	f7ff fe01 	bl	8001e5c <setSegments>
                break;
 800225a:	e06f      	b.n	800233c <Segment_Display+0x36c>
            case 'b':
            case 'B':
                setSegments(0x7C);
 800225c:	207c      	movs	r0, #124	@ 0x7c
 800225e:	f7ff fdfd 	bl	8001e5c <setSegments>
                break;
 8002262:	e06b      	b.n	800233c <Segment_Display+0x36c>
            case 'c':
            case 'C':
                setSegments(0x39);
 8002264:	2039      	movs	r0, #57	@ 0x39
 8002266:	f7ff fdf9 	bl	8001e5c <setSegments>
                break;
 800226a:	e067      	b.n	800233c <Segment_Display+0x36c>
            case 'd':
            case 'D':
                setSegments(0x5E);
 800226c:	205e      	movs	r0, #94	@ 0x5e
 800226e:	f7ff fdf5 	bl	8001e5c <setSegments>
                break;
 8002272:	e063      	b.n	800233c <Segment_Display+0x36c>
            case 'e':
            case 'E':
                setSegments(0x79);
 8002274:	2079      	movs	r0, #121	@ 0x79
 8002276:	f7ff fdf1 	bl	8001e5c <setSegments>
                break;
 800227a:	e05f      	b.n	800233c <Segment_Display+0x36c>
            case 'f':
            case 'F':
                setSegments(0x71);
 800227c:	2071      	movs	r0, #113	@ 0x71
 800227e:	f7ff fded 	bl	8001e5c <setSegments>
                break;
 8002282:	e05b      	b.n	800233c <Segment_Display+0x36c>
            case 'g':
            case 'G':
                setSegments(0x3D);
 8002284:	203d      	movs	r0, #61	@ 0x3d
 8002286:	f7ff fde9 	bl	8001e5c <setSegments>
                break;
 800228a:	e057      	b.n	800233c <Segment_Display+0x36c>
            case 'h':
            case 'H':
                setSegments(0x76);
 800228c:	2076      	movs	r0, #118	@ 0x76
 800228e:	f7ff fde5 	bl	8001e5c <setSegments>
                break;
 8002292:	e053      	b.n	800233c <Segment_Display+0x36c>
            case 'i':
            case 'I':
                setSegments(0x30);
 8002294:	2030      	movs	r0, #48	@ 0x30
 8002296:	f7ff fde1 	bl	8001e5c <setSegments>
                break;
 800229a:	e04f      	b.n	800233c <Segment_Display+0x36c>
            case 'j':
            case 'J':
                setSegments(0x1E);
 800229c:	201e      	movs	r0, #30
 800229e:	f7ff fddd 	bl	8001e5c <setSegments>
                break;
 80022a2:	e04b      	b.n	800233c <Segment_Display+0x36c>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 80022a4:	2076      	movs	r0, #118	@ 0x76
 80022a6:	f7ff fdd9 	bl	8001e5c <setSegments>
                break;
 80022aa:	e047      	b.n	800233c <Segment_Display+0x36c>
            case 'l':
            case 'L':
                setSegments(0x38);
 80022ac:	2038      	movs	r0, #56	@ 0x38
 80022ae:	f7ff fdd5 	bl	8001e5c <setSegments>
                break;
 80022b2:	e043      	b.n	800233c <Segment_Display+0x36c>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 80022b4:	2037      	movs	r0, #55	@ 0x37
 80022b6:	f7ff fdd1 	bl	8001e5c <setSegments>
                break;
 80022ba:	e03f      	b.n	800233c <Segment_Display+0x36c>
            case 'n':
            case 'N':
                setSegments(0x54);
 80022bc:	2054      	movs	r0, #84	@ 0x54
 80022be:	f7ff fdcd 	bl	8001e5c <setSegments>
                break;
 80022c2:	e03b      	b.n	800233c <Segment_Display+0x36c>
            case 'o':
            case 'O':
                setSegments(0x3F);
 80022c4:	203f      	movs	r0, #63	@ 0x3f
 80022c6:	f7ff fdc9 	bl	8001e5c <setSegments>
                break;
 80022ca:	e037      	b.n	800233c <Segment_Display+0x36c>
            case 'p':
            case 'P':
                setSegments(0x73);
 80022cc:	2073      	movs	r0, #115	@ 0x73
 80022ce:	f7ff fdc5 	bl	8001e5c <setSegments>
                break;
 80022d2:	e033      	b.n	800233c <Segment_Display+0x36c>
            case 'q':
            case 'Q':
                setSegments(0x67);
 80022d4:	2067      	movs	r0, #103	@ 0x67
 80022d6:	f7ff fdc1 	bl	8001e5c <setSegments>
                break;
 80022da:	e02f      	b.n	800233c <Segment_Display+0x36c>
            case 'r':
            case 'R':
                setSegments(0x50);
 80022dc:	2050      	movs	r0, #80	@ 0x50
 80022de:	f7ff fdbd 	bl	8001e5c <setSegments>
                break;
 80022e2:	e02b      	b.n	800233c <Segment_Display+0x36c>
            case 's':
            case 'S':
                setSegments(0x6D);
 80022e4:	206d      	movs	r0, #109	@ 0x6d
 80022e6:	f7ff fdb9 	bl	8001e5c <setSegments>
                break;
 80022ea:	e027      	b.n	800233c <Segment_Display+0x36c>
            case 't':
            case 'T':
                setSegments(0x78);
 80022ec:	2078      	movs	r0, #120	@ 0x78
 80022ee:	f7ff fdb5 	bl	8001e5c <setSegments>
                break;
 80022f2:	e023      	b.n	800233c <Segment_Display+0x36c>
            case 'u':
            case 'U':
                setSegments(0x3E);
 80022f4:	203e      	movs	r0, #62	@ 0x3e
 80022f6:	f7ff fdb1 	bl	8001e5c <setSegments>
                break;
 80022fa:	e01f      	b.n	800233c <Segment_Display+0x36c>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 80022fc:	203e      	movs	r0, #62	@ 0x3e
 80022fe:	f7ff fdad 	bl	8001e5c <setSegments>
                break;
 8002302:	e01b      	b.n	800233c <Segment_Display+0x36c>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 8002304:	202a      	movs	r0, #42	@ 0x2a
 8002306:	f7ff fda9 	bl	8001e5c <setSegments>
                break;
 800230a:	e017      	b.n	800233c <Segment_Display+0x36c>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 800230c:	2076      	movs	r0, #118	@ 0x76
 800230e:	f7ff fda5 	bl	8001e5c <setSegments>
                break;
 8002312:	e013      	b.n	800233c <Segment_Display+0x36c>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 8002314:	206e      	movs	r0, #110	@ 0x6e
 8002316:	f7ff fda1 	bl	8001e5c <setSegments>
                break;
 800231a:	e00f      	b.n	800233c <Segment_Display+0x36c>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 800231c:	205b      	movs	r0, #91	@ 0x5b
 800231e:	f7ff fd9d 	bl	8001e5c <setSegments>
                break;
 8002322:	e00b      	b.n	800233c <Segment_Display+0x36c>
            case ' ':
                // Blank character
                setSegments(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff fd99 	bl	8001e5c <setSegments>
                break;
 800232a:	e007      	b.n	800233c <Segment_Display+0x36c>
            case '-':
            	setSegments(0x04);
 800232c:	2004      	movs	r0, #4
 800232e:	f7ff fd95 	bl	8001e5c <setSegments>
            	break;
 8002332:	e003      	b.n	800233c <Segment_Display+0x36c>
            default:
            	setSegments(0x00);
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff fd91 	bl	8001e5c <setSegments>
                break;
 800233a:	bf00      	nop
        }
        HAL_Delay(5);
 800233c:	2005      	movs	r0, #5
 800233e:	f000 f87f 	bl	8002440 <HAL_Delay>
    for(uint8_t i = 0; i < 4; i++) {
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	3301      	adds	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b03      	cmp	r3, #3
 800234c:	f67f ae50 	bls.w	8001ff0 <Segment_Display+0x20>
 8002350:	e000      	b.n	8002354 <Segment_Display+0x384>
        		return;
 8002352:	bf00      	nop
    }
}
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002360:	4b0e      	ldr	r3, [pc, #56]	@ (800239c <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <HAL_Init+0x40>)
 8002366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800236a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_Init+0x40>)
 8002372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a07      	ldr	r2, [pc, #28]	@ (800239c <HAL_Init+0x40>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002384:	2003      	movs	r0, #3
 8002386:	f000 f94f 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238a:	200f      	movs	r0, #15
 800238c:	f000 f808 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002390:	f7ff faca 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f967 	bl	8002692 <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 f92f 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000024 	.word	0x20000024
 80023f8:	2000002c 	.word	0x2000002c
 80023fc:	20000028 	.word	0x20000028

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	2000002c 	.word	0x2000002c
 8002424:	200006e0 	.word	0x200006e0

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200006e0 	.word	0x200006e0

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000002c 	.word	0x2000002c

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	@ (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	@ (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	@ (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	@ 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff feb6 	bl	8002428 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e099      	b.n	80027fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e8:	e00f      	b.n	800270a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ea:	f7ff fe9d 	bl	8002428 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d908      	bls.n	800270a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2203      	movs	r2, #3
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e078      	b.n	80027fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e8      	bne.n	80026ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4b38      	ldr	r3, [pc, #224]	@ (8002804 <HAL_DMA_Init+0x158>)
 8002724:	4013      	ands	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002736:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	2b04      	cmp	r3, #4
 8002762:	d107      	bne.n	8002774 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	4313      	orrs	r3, r2
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f023 0307 	bic.w	r3, r3, #7
 800278a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	2b04      	cmp	r3, #4
 800279c:	d117      	bne.n	80027ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fa91 	bl	8002cd8 <DMA_CheckFifoParam>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2240      	movs	r2, #64	@ 0x40
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027ca:	2301      	movs	r3, #1
 80027cc:	e016      	b.n	80027fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa48 	bl	8002c6c <DMA_CalcBaseAndBitshift>
 80027dc:	4603      	mov	r3, r0
 80027de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	223f      	movs	r2, #63	@ 0x3f
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	f010803f 	.word	0xf010803f

08002808 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_DMA_Start_IT+0x26>
 800282a:	2302      	movs	r3, #2
 800282c:	e040      	b.n	80028b0 <HAL_DMA_Start_IT+0xa8>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d12f      	bne.n	80028a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f9da 	bl	8002c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	223f      	movs	r2, #63	@ 0x3f
 8002862:	409a      	lsls	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0216 	orr.w	r2, r2, #22
 8002876:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0208 	orr.w	r2, r2, #8
 800288e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	e005      	b.n	80028ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028aa:	2302      	movs	r3, #2
 80028ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d004      	beq.n	80028d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2280      	movs	r2, #128	@ 0x80
 80028d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00c      	b.n	80028f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2205      	movs	r2, #5
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002908:	4b8e      	ldr	r3, [pc, #568]	@ (8002b44 <HAL_DMA_IRQHandler+0x248>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a8e      	ldr	r2, [pc, #568]	@ (8002b48 <HAL_DMA_IRQHandler+0x24c>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0a9b      	lsrs	r3, r3, #10
 8002914:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	2208      	movs	r2, #8
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01a      	beq.n	8002968 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0204 	bic.w	r2, r2, #4
 800294e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002954:	2208      	movs	r2, #8
 8002956:	409a      	lsls	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	2201      	movs	r2, #1
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	2201      	movs	r2, #1
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002996:	f043 0202 	orr.w	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a2:	2204      	movs	r2, #4
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d012      	beq.n	80029d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	2204      	movs	r2, #4
 80029c2:	409a      	lsls	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029cc:	f043 0204 	orr.w	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	2210      	movs	r2, #16
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d043      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d03c      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	2210      	movs	r2, #16
 80029f8:	409a      	lsls	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d018      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d108      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d024      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
 8002a2a:	e01f      	b.n	8002a6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
 8002a3c:	e016      	b.n	8002a6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0208 	bic.w	r2, r2, #8
 8002a5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	2220      	movs	r2, #32
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 808f 	beq.w	8002b9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8087 	beq.w	8002b9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	2220      	movs	r2, #32
 8002a94:	409a      	lsls	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d136      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0216 	bic.w	r2, r2, #22
 8002ab4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ac4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_DMA_IRQHandler+0x1da>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0208 	bic.w	r2, r2, #8
 8002ae4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	223f      	movs	r2, #63	@ 0x3f
 8002aec:	409a      	lsls	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d07e      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
        }
        return;
 8002b12:	e079      	b.n	8002c08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01d      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d031      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
 8002b40:	e02c      	b.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
 8002b42:	bf00      	nop
 8002b44:	20000024 	.word	0x20000024
 8002b48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d023      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e01e      	b.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10f      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0210 	bic.w	r2, r2, #16
 8002b7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d032      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2205      	movs	r2, #5
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d307      	bcc.n	8002be4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f2      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x2cc>
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002be4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
 8002c06:	e000      	b.n	8002c0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c08:	bf00      	nop
    }
  }
}
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	d108      	bne.n	8002c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c4e:	e007      	b.n	8002c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3b10      	subs	r3, #16
 8002c7c:	4a14      	ldr	r2, [pc, #80]	@ (8002cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c86:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d909      	bls.n	8002cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ca2:	f023 0303 	bic.w	r3, r3, #3
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cac:	e007      	b.n	8002cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	aaaaaaab 	.word	0xaaaaaaab
 8002cd4:	08006d40 	.word	0x08006d40

08002cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d11f      	bne.n	8002d32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d856      	bhi.n	8002da6 <DMA_CheckFifoParam+0xce>
 8002cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <DMA_CheckFifoParam+0x28>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d23 	.word	0x08002d23
 8002d08:	08002d11 	.word	0x08002d11
 8002d0c:	08002da7 	.word	0x08002da7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d046      	beq.n	8002daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e043      	b.n	8002daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d2a:	d140      	bne.n	8002dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d30:	e03d      	b.n	8002dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3a:	d121      	bne.n	8002d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d837      	bhi.n	8002db2 <DMA_CheckFifoParam+0xda>
 8002d42:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <DMA_CheckFifoParam+0x70>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d5f 	.word	0x08002d5f
 8002d50:	08002d59 	.word	0x08002d59
 8002d54:	08002d71 	.word	0x08002d71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e030      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d025      	beq.n	8002db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6e:	e022      	b.n	8002db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d78:	d11f      	bne.n	8002dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d7e:	e01c      	b.n	8002dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d903      	bls.n	8002d8e <DMA_CheckFifoParam+0xb6>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d003      	beq.n	8002d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d8c:	e018      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      break;
 8002d92:	e015      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e00b      	b.n	8002dbe <DMA_CheckFifoParam+0xe6>
      break;
 8002da6:	bf00      	nop
 8002da8:	e00a      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e008      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e006      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e004      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
 8002db8:	e002      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	@ 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e159      	b.n	80030a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f040 8148 	bne.w	800309a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d005      	beq.n	8002e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d130      	bne.n	8002e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0201 	and.w	r2, r3, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d017      	beq.n	8002ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d123      	bne.n	8002f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	08da      	lsrs	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3208      	adds	r2, #8
 8002ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a2 	beq.w	800309a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b57      	ldr	r3, [pc, #348]	@ (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	4a56      	ldr	r2, [pc, #344]	@ (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f66:	4b54      	ldr	r3, [pc, #336]	@ (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f72:	4a52      	ldr	r2, [pc, #328]	@ (80030bc <HAL_GPIO_Init+0x2ec>)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	220f      	movs	r2, #15
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a49      	ldr	r2, [pc, #292]	@ (80030c0 <HAL_GPIO_Init+0x2f0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x202>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a48      	ldr	r2, [pc, #288]	@ (80030c4 <HAL_GPIO_Init+0x2f4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x1fe>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a47      	ldr	r2, [pc, #284]	@ (80030c8 <HAL_GPIO_Init+0x2f8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x1fa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a46      	ldr	r2, [pc, #280]	@ (80030cc <HAL_GPIO_Init+0x2fc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x1f6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a45      	ldr	r2, [pc, #276]	@ (80030d0 <HAL_GPIO_Init+0x300>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x1f2>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	e008      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e004      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e002      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	f002 0203 	and.w	r2, r2, #3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4093      	lsls	r3, r2
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe4:	4935      	ldr	r1, [pc, #212]	@ (80030bc <HAL_GPIO_Init+0x2ec>)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff2:	4b38      	ldr	r3, [pc, #224]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003016:	4a2f      	ldr	r2, [pc, #188]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800301c:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003040:	4a24      	ldr	r2, [pc, #144]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003046:	4b23      	ldr	r3, [pc, #140]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306a:	4a1a      	ldr	r2, [pc, #104]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003070:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003094:	4a0f      	ldr	r2, [pc, #60]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3301      	adds	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	f67f aea2 	bls.w	8002dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3724      	adds	r7, #36	@ 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e001      	b.n	80030fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003124:	e003      	b.n	800312e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	041a      	lsls	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e267      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d075      	beq.n	8003246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315a:	4b88      	ldr	r3, [pc, #544]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d00c      	beq.n	8003180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b85      	ldr	r3, [pc, #532]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316e:	2b08      	cmp	r3, #8
 8003170:	d112      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b82      	ldr	r3, [pc, #520]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317e:	d10b      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4b7e      	ldr	r3, [pc, #504]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d05b      	beq.n	8003244 <HAL_RCC_OscConfig+0x108>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d157      	bne.n	8003244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e242      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x74>
 80031a2:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a75      	ldr	r2, [pc, #468]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e01d      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x98>
 80031ba:	4b70      	ldr	r3, [pc, #448]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6f      	ldr	r2, [pc, #444]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6c      	ldr	r2, [pc, #432]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031d4:	4b69      	ldr	r3, [pc, #420]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a68      	ldr	r2, [pc, #416]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b66      	ldr	r3, [pc, #408]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a65      	ldr	r2, [pc, #404]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7ff f918 	bl	8002428 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fc:	f7ff f914 	bl	8002428 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	@ 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e207      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b5b      	ldr	r3, [pc, #364]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0xc0>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7ff f904 	bl	8002428 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003224:	f7ff f900 	bl	8002428 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	@ 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1f3      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	4b51      	ldr	r3, [pc, #324]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0xe8>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003252:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003266:	2b08      	cmp	r3, #8
 8003268:	d11c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b44      	ldr	r3, [pc, #272]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	4b41      	ldr	r3, [pc, #260]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1c7      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4937      	ldr	r1, [pc, #220]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	e03a      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ac:	4b34      	ldr	r3, [pc, #208]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7ff f8b9 	bl	8002428 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ba:	f7ff f8b5 	bl	8002428 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1a8      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4925      	ldr	r1, [pc, #148]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff f898 	bl	8002428 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fc:	f7ff f894 	bl	8002428 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e187      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d036      	beq.n	8003394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332e:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7ff f878 	bl	8002428 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333c:	f7ff f874 	bl	8002428 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e167      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x200>
 800335a:	e01b      	b.n	8003394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7ff f861 	bl	8002428 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	e00e      	b.n	8003388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336a:	f7ff f85d 	bl	8002428 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d907      	bls.n	8003388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e150      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 800337c:	40023800 	.word	0x40023800
 8003380:	42470000 	.word	0x42470000
 8003384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b88      	ldr	r3, [pc, #544]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ea      	bne.n	800336a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8097 	beq.w	80034d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b81      	ldr	r3, [pc, #516]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b7d      	ldr	r3, [pc, #500]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a7c      	ldr	r2, [pc, #496]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b7a      	ldr	r3, [pc, #488]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b77      	ldr	r3, [pc, #476]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033de:	4b74      	ldr	r3, [pc, #464]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a73      	ldr	r2, [pc, #460]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7ff f81d 	bl	8002428 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7ff f819 	bl	8002428 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e10c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x2ea>
 8003418:	4b64      	ldr	r3, [pc, #400]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	@ 0x70
 8003424:	e01c      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x30c>
 800342e:	4b5f      	ldr	r3, [pc, #380]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	4a5e      	ldr	r2, [pc, #376]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6713      	str	r3, [r2, #112]	@ 0x70
 800343a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003448:	4b58      	ldr	r3, [pc, #352]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a57      	ldr	r2, [pc, #348]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
 8003454:	4b55      	ldr	r3, [pc, #340]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a54      	ldr	r2, [pc, #336]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0304 	bic.w	r3, r3, #4
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe ffde 	bl	8002428 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fe ffda 	bl	8002428 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0cb      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ee      	beq.n	8003470 <HAL_RCC_OscConfig+0x334>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7fe ffc8 	bl	8002428 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fe ffc4 	bl	8002428 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0b5      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b2:	4b3e      	ldr	r3, [pc, #248]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ee      	bne.n	800349c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	4a38      	ldr	r2, [pc, #224]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a1 	beq.w	800361c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d05c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d141      	bne.n	8003572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe ff98 	bl	8002428 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe ff94 	bl	8002428 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e087      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	019b      	lsls	r3, r3, #6
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	491b      	ldr	r1, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fe ff6d 	bl	8002428 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003552:	f7fe ff69 	bl	8002428 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e05c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x416>
 8003570:	e054      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe ff56 	bl	8002428 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe ff52 	bl	8002428 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e045      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x444>
 800359e:	e03d      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e038      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x4ec>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d028      	beq.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d121      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d11a      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d111      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0cc      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b68      	ldr	r3, [pc, #416]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d90c      	bls.n	8003668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b65      	ldr	r3, [pc, #404]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b59      	ldr	r3, [pc, #356]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a58      	ldr	r2, [pc, #352]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a52      	ldr	r2, [pc, #328]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	494d      	ldr	r1, [pc, #308]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d044      	beq.n	800374c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d119      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b3f      	ldr	r3, [pc, #252]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e067      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4934      	ldr	r1, [pc, #208]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371c:	f7fe fe84 	bl	8002428 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fe fe80 	bl	8002428 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e04f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d20c      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4916      	ldr	r1, [pc, #88]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	490e      	ldr	r1, [pc, #56]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f821 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490a      	ldr	r1, [pc, #40]	@ (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fde4 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00
 80037e8:	40023800 	.word	0x40023800
 80037ec:	08006d30 	.word	0x08006d30
 80037f0:	20000024 	.word	0x20000024
 80037f4:	20000028 	.word	0x20000028

080037f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037fc:	b090      	sub	sp, #64	@ 0x40
 80037fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	637b      	str	r3, [r7, #52]	@ 0x34
 8003804:	2300      	movs	r3, #0
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003808:	2300      	movs	r3, #0
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003810:	4b59      	ldr	r3, [pc, #356]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d00d      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x40>
 800381c:	2b08      	cmp	r3, #8
 800381e:	f200 80a1 	bhi.w	8003964 <HAL_RCC_GetSysClockFreq+0x16c>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x34>
 8003826:	2b04      	cmp	r3, #4
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0x3a>
 800382a:	e09b      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b53      	ldr	r3, [pc, #332]	@ (800397c <HAL_RCC_GetSysClockFreq+0x184>)
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003830:	e09b      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003832:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003834:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003836:	e098      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003838:	4b4f      	ldr	r3, [pc, #316]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003840:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003842:	4b4d      	ldr	r3, [pc, #308]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d028      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b4a      	ldr	r3, [pc, #296]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	2200      	movs	r2, #0
 8003856:	623b      	str	r3, [r7, #32]
 8003858:	627a      	str	r2, [r7, #36]	@ 0x24
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003860:	2100      	movs	r1, #0
 8003862:	4b47      	ldr	r3, [pc, #284]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003864:	fb03 f201 	mul.w	r2, r3, r1
 8003868:	2300      	movs	r3, #0
 800386a:	fb00 f303 	mul.w	r3, r0, r3
 800386e:	4413      	add	r3, r2
 8003870:	4a43      	ldr	r2, [pc, #268]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003872:	fba0 1202 	umull	r1, r2, r0, r2
 8003876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003878:	460a      	mov	r2, r1
 800387a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800387c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387e:	4413      	add	r3, r2
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003884:	2200      	movs	r2, #0
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	61fa      	str	r2, [r7, #28]
 800388a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800388e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003892:	f7fc fcf5 	bl	8000280 <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4613      	mov	r3, r2
 800389c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800389e:	e053      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a0:	4b35      	ldr	r3, [pc, #212]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	2200      	movs	r2, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	617a      	str	r2, [r7, #20]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038b2:	f04f 0b00 	mov.w	fp, #0
 80038b6:	4652      	mov	r2, sl
 80038b8:	465b      	mov	r3, fp
 80038ba:	f04f 0000 	mov.w	r0, #0
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	0159      	lsls	r1, r3, #5
 80038c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c8:	0150      	lsls	r0, r2, #5
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	ebb2 080a 	subs.w	r8, r2, sl
 80038d2:	eb63 090b 	sbc.w	r9, r3, fp
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038ea:	ebb2 0408 	subs.w	r4, r2, r8
 80038ee:	eb63 0509 	sbc.w	r5, r3, r9
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	00eb      	lsls	r3, r5, #3
 80038fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003900:	00e2      	lsls	r2, r4, #3
 8003902:	4614      	mov	r4, r2
 8003904:	461d      	mov	r5, r3
 8003906:	eb14 030a 	adds.w	r3, r4, sl
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	eb45 030b 	adc.w	r3, r5, fp
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800391e:	4629      	mov	r1, r5
 8003920:	028b      	lsls	r3, r1, #10
 8003922:	4621      	mov	r1, r4
 8003924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003928:	4621      	mov	r1, r4
 800392a:	028a      	lsls	r2, r1, #10
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003932:	2200      	movs	r2, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	60fa      	str	r2, [r7, #12]
 8003938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800393c:	f7fc fca0 	bl	8000280 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4613      	mov	r3, r2
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	3301      	adds	r3, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetSysClockFreq+0x184>)
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800396c:	4618      	mov	r0, r3
 800396e:	3740      	adds	r7, #64	@ 0x40
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	016e3600 	.word	0x016e3600

08003984 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d038      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039ac:	4b68      	ldr	r3, [pc, #416]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039b2:	f7fe fd39 	bl	8002428 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039ba:	f7fe fd35 	bl	8002428 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0bd      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039cc:	4b61      	ldr	r3, [pc, #388]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	071b      	lsls	r3, r3, #28
 80039ea:	495a      	ldr	r1, [pc, #360]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039f2:	4b57      	ldr	r3, [pc, #348]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039f8:	f7fe fd16 	bl	8002428 <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a00:	f7fe fd12 	bl	8002428 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e09a      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a12:	4b50      	ldr	r3, [pc, #320]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8083 	beq.w	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	4b48      	ldr	r3, [pc, #288]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	4a47      	ldr	r2, [pc, #284]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a3c:	4b45      	ldr	r3, [pc, #276]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a48:	4b43      	ldr	r3, [pc, #268]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a42      	ldr	r2, [pc, #264]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a52:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a54:	f7fe fce8 	bl	8002428 <HAL_GetTick>
 8003a58:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a5c:	f7fe fce4 	bl	8002428 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e06c      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a7a:	4b36      	ldr	r3, [pc, #216]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a82:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02f      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d028      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a98:	4b2e      	ldr	r3, [pc, #184]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003aae:	4a29      	ldr	r2, [pc, #164]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ab4:	4b27      	ldr	r3, [pc, #156]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d114      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fcb2 	bl	8002428 <HAL_GetTick>
 8003ac4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fe fcae 	bl	8002428 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e034      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af6:	d10d      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003af8:	4b16      	ldr	r3, [pc, #88]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0c:	4911      	ldr	r1, [pc, #68]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003b14:	4b0f      	ldr	r3, [pc, #60]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a0e      	ldr	r2, [pc, #56]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b1e:	6093      	str	r3, [r2, #8]
 8003b20:	4b0c      	ldr	r3, [pc, #48]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	4909      	ldr	r1, [pc, #36]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	7d1a      	ldrb	r2, [r3, #20]
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003b44:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	42470068 	.word	0x42470068
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42470e40 	.word	0x42470e40
 8003b60:	424711e0 	.word	0x424711e0

08003b64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e073      	b.n	8003c62 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7f5b      	ldrb	r3, [r3, #29]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd ff16 	bl	80019bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d055      	beq.n	8003c50 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	22ca      	movs	r2, #202	@ 0xca
 8003baa:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2253      	movs	r2, #83	@ 0x53
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa49 	bl	800404c <RTC_EnterInitMode>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d12c      	bne.n	8003c1e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bd6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6899      	ldr	r1, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6919      	ldr	r1, [r3, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	041a      	lsls	r2, r3, #16
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fa50 	bl	80040ba <RTC_ExitInitMode>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d110      	bne.n	8003c46 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	22ff      	movs	r2, #255	@ 0xff
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c4e:	e001      	b.n	8003c54 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c6a:	b590      	push	{r4, r7, lr}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	7f1b      	ldrb	r3, [r3, #28]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_RTC_SetTime+0x1c>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e087      	b.n	8003d96 <HAL_RTC_SetTime+0x12c>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d126      	bne.n	8003ce6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fa27 	bl	8004104 <RTC_ByteToBcd2>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fa20 	bl	8004104 <RTC_ByteToBcd2>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003cc8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	789b      	ldrb	r3, [r3, #2]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fa18 	bl	8004104 <RTC_ByteToBcd2>
 8003cd4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cd6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	78db      	ldrb	r3, [r3, #3]
 8003cde:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e018      	b.n	8003d18 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	785b      	ldrb	r3, [r3, #1]
 8003d04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d06:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003d0c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	78db      	ldrb	r3, [r3, #3]
 8003d12:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	22ca      	movs	r2, #202	@ 0xca
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2253      	movs	r2, #83	@ 0x53
 8003d26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f98f 	bl	800404c <RTC_EnterInitMode>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d120      	bne.n	8003d7a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003d42:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003d46:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6899      	ldr	r1, [r3, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f9a2 	bl	80040ba <RTC_ExitInitMode>
 8003d76:	4603      	mov	r3, r0
 8003d78:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	22ff      	movs	r2, #255	@ 0xff
 8003d8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]

  return status;
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd90      	pop	{r4, r7, pc}

08003d9e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003dd0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	0d9b      	lsrs	r3, r3, #22
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d11a      	bne.n	8003e50 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f98e 	bl	8004140 <RTC_Bcd2ToByte>
 8003e24:	4603      	mov	r3, r0
 8003e26:	461a      	mov	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f985 	bl	8004140 <RTC_Bcd2ToByte>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	789b      	ldrb	r3, [r3, #2]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f97c 	bl	8004140 <RTC_Bcd2ToByte>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e5a:	b590      	push	{r4, r7, lr}
 8003e5c:	b087      	sub	sp, #28
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	7f1b      	ldrb	r3, [r3, #28]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_RTC_SetDate+0x1c>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e071      	b.n	8003f5a <HAL_RTC_SetDate+0x100>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10e      	bne.n	8003ea6 <HAL_RTC_SetDate+0x4c>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	f023 0310 	bic.w	r3, r3, #16
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	330a      	adds	r3, #10
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d11c      	bne.n	8003ee6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	78db      	ldrb	r3, [r3, #3]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f927 	bl	8004104 <RTC_ByteToBcd2>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f920 	bl	8004104 <RTC_ByteToBcd2>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ec8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	789b      	ldrb	r3, [r3, #2]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f918 	bl	8004104 <RTC_ByteToBcd2>
 8003ed4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ed6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e00e      	b.n	8003f04 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	78db      	ldrb	r3, [r3, #3]
 8003eea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003ef2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003ef8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	22ca      	movs	r2, #202	@ 0xca
 8003f0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2253      	movs	r2, #83	@ 0x53
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f899 	bl	800404c <RTC_EnterInitMode>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10c      	bne.n	8003f3e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f32:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f8c0 	bl	80040ba <RTC_ExitInitMode>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	22ff      	movs	r2, #255	@ 0xff
 8003f50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]

  return status;
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd90      	pop	{r4, r7, pc}

08003f62 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f80:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	0b5b      	lsrs	r3, r3, #13
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11a      	bne.n	8003ff6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	78db      	ldrb	r3, [r3, #3]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f8bb 	bl	8004140 <RTC_Bcd2ToByte>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	785b      	ldrb	r3, [r3, #1]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f8b2 	bl	8004140 <RTC_Bcd2ToByte>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	789b      	ldrb	r3, [r3, #2]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f8a9 	bl	8004140 <RTC_Bcd2ToByte>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0d      	ldr	r2, [pc, #52]	@ (8004048 <HAL_RTC_WaitForSynchro+0x48>)
 8004012:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004014:	f7fe fa08 	bl	8002428 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800401a:	e009      	b.n	8004030 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800401c:	f7fe fa04 	bl	8002428 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800402a:	d901      	bls.n	8004030 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e007      	b.n	8004040 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ee      	beq.n	800401c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	00013f5f 	.word	0x00013f5f

0800404c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d122      	bne.n	80040b0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004078:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800407a:	f7fe f9d5 	bl	8002428 <HAL_GetTick>
 800407e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004080:	e00c      	b.n	800409c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004082:	f7fe f9d1 	bl	8002428 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004090:	d904      	bls.n	800409c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2204      	movs	r2, #4
 8004096:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <RTC_EnterInitMode+0x64>
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d1e8      	bne.n	8004082 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040d4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff8b 	bl	8004000 <HAL_RTC_WaitForSynchro>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2204      	movs	r2, #4
 80040f4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004112:	e005      	b.n	8004120 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3301      	adds	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	3b0a      	subs	r3, #10
 800411e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	2b09      	cmp	r3, #9
 8004124:	d8f6      	bhi.n	8004114 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	b2da      	uxtb	r2, r3
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	4313      	orrs	r3, r2
 8004132:	b2db      	uxtb	r3, r3
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	b2db      	uxtb	r3, r3
 800416c:	4413      	add	r3, r2
 800416e:	b2db      	uxtb	r3, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e041      	b.n	8004212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd fc36 	bl	8001a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 ffb6 	bl	800512c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e041      	b.n	80042b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f839 	bl	80042b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f000 ff67 	bl	800512c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e022      	b.n	800433e <HAL_TIM_PWM_Start_DMA+0x72>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d109      	bne.n	8004312 <HAL_TIM_PWM_Start_DMA+0x46>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	e015      	b.n	800433e <HAL_TIM_PWM_Start_DMA+0x72>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d109      	bne.n	800432c <HAL_TIM_PWM_Start_DMA+0x60>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	e008      	b.n	800433e <HAL_TIM_PWM_Start_DMA+0x72>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	e15d      	b.n	8004602 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_TIM_PWM_Start_DMA+0x94>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e022      	b.n	80043a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b04      	cmp	r3, #4
 8004364:	d109      	bne.n	800437a <HAL_TIM_PWM_Start_DMA+0xae>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e015      	b.n	80043a6 <HAL_TIM_PWM_Start_DMA+0xda>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d109      	bne.n	8004394 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e008      	b.n	80043a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d024      	beq.n	80043f4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_TIM_PWM_Start_DMA+0xea>
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e123      	b.n	8004602 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_TIM_PWM_Start_DMA+0xfe>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c8:	e016      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d104      	bne.n	80043da <HAL_TIM_PWM_Start_DMA+0x10e>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d8:	e00e      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start_DMA+0x11e>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e8:	e006      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043f2:	e001      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e104      	b.n	8004602 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	f200 80ae 	bhi.w	800455c <HAL_TIM_PWM_Start_DMA+0x290>
 8004400:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800443d 	.word	0x0800443d
 800440c:	0800455d 	.word	0x0800455d
 8004410:	0800455d 	.word	0x0800455d
 8004414:	0800455d 	.word	0x0800455d
 8004418:	08004485 	.word	0x08004485
 800441c:	0800455d 	.word	0x0800455d
 8004420:	0800455d 	.word	0x0800455d
 8004424:	0800455d 	.word	0x0800455d
 8004428:	080044cd 	.word	0x080044cd
 800442c:	0800455d 	.word	0x0800455d
 8004430:	0800455d 	.word	0x0800455d
 8004434:	0800455d 	.word	0x0800455d
 8004438:	08004515 	.word	0x08004515
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	4a72      	ldr	r2, [pc, #456]	@ (800460c <HAL_TIM_PWM_Start_DMA+0x340>)
 8004442:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	4a71      	ldr	r2, [pc, #452]	@ (8004610 <HAL_TIM_PWM_Start_DMA+0x344>)
 800444a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	4a70      	ldr	r2, [pc, #448]	@ (8004614 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004452:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3334      	adds	r3, #52	@ 0x34
 8004460:	461a      	mov	r2, r3
 8004462:	887b      	ldrh	r3, [r7, #2]
 8004464:	f7fe f9d0 	bl	8002808 <HAL_DMA_Start_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0c7      	b.n	8004602 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004480:	60da      	str	r2, [r3, #12]
      break;
 8004482:	e06e      	b.n	8004562 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	4a60      	ldr	r2, [pc, #384]	@ (800460c <HAL_TIM_PWM_Start_DMA+0x340>)
 800448a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	4a5f      	ldr	r2, [pc, #380]	@ (8004610 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	4a5e      	ldr	r2, [pc, #376]	@ (8004614 <HAL_TIM_PWM_Start_DMA+0x348>)
 800449a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3338      	adds	r3, #56	@ 0x38
 80044a8:	461a      	mov	r2, r3
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	f7fe f9ac 	bl	8002808 <HAL_DMA_Start_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0a3      	b.n	8004602 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044c8:	60da      	str	r2, [r3, #12]
      break;
 80044ca:	e04a      	b.n	8004562 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	4a4e      	ldr	r2, [pc, #312]	@ (800460c <HAL_TIM_PWM_Start_DMA+0x340>)
 80044d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004610 <HAL_TIM_PWM_Start_DMA+0x344>)
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004614 <HAL_TIM_PWM_Start_DMA+0x348>)
 80044e2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	333c      	adds	r3, #60	@ 0x3c
 80044f0:	461a      	mov	r2, r3
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	f7fe f988 	bl	8002808 <HAL_DMA_Start_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004510:	60da      	str	r2, [r3, #12]
      break;
 8004512:	e026      	b.n	8004562 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004518:	4a3c      	ldr	r2, [pc, #240]	@ (800460c <HAL_TIM_PWM_Start_DMA+0x340>)
 800451a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	4a3b      	ldr	r2, [pc, #236]	@ (8004610 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	4a3a      	ldr	r2, [pc, #232]	@ (8004614 <HAL_TIM_PWM_Start_DMA+0x348>)
 800452a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3340      	adds	r3, #64	@ 0x40
 8004538:	461a      	mov	r2, r3
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	f7fe f964 	bl	8002808 <HAL_DMA_Start_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e05b      	b.n	8004602 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004558:	60da      	str	r2, [r3, #12]
      break;
 800455a:	e002      	b.n	8004562 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
      break;
 8004560:	bf00      	nop
  }

  if (status == HAL_OK)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d14b      	bne.n	8004600 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	4618      	mov	r0, r3
 8004572:	f001 f88d 	bl	8005690 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a27      	ldr	r2, [pc, #156]	@ (8004618 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d107      	bne.n	8004590 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800458e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a20      	ldr	r2, [pc, #128]	@ (8004618 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d018      	beq.n	80045cc <HAL_TIM_PWM_Start_DMA+0x300>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a2:	d013      	beq.n	80045cc <HAL_TIM_PWM_Start_DMA+0x300>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <HAL_TIM_PWM_Start_DMA+0x350>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00e      	beq.n	80045cc <HAL_TIM_PWM_Start_DMA+0x300>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004620 <HAL_TIM_PWM_Start_DMA+0x354>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_TIM_PWM_Start_DMA+0x300>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a19      	ldr	r2, [pc, #100]	@ (8004624 <HAL_TIM_PWM_Start_DMA+0x358>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_PWM_Start_DMA+0x300>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d111      	bne.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d010      	beq.n	8004600 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ee:	e007      	b.n	8004600 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004600:	7dfb      	ldrb	r3, [r7, #23]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	0800501d 	.word	0x0800501d
 8004610:	080050c5 	.word	0x080050c5
 8004614:	08004f8b 	.word	0x08004f8b
 8004618:	40010000 	.word	0x40010000
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40014000 	.word	0x40014000

0800462c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d855      	bhi.n	80046ec <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004640:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800467d 	.word	0x0800467d
 800464c:	080046ed 	.word	0x080046ed
 8004650:	080046ed 	.word	0x080046ed
 8004654:	080046ed 	.word	0x080046ed
 8004658:	08004699 	.word	0x08004699
 800465c:	080046ed 	.word	0x080046ed
 8004660:	080046ed 	.word	0x080046ed
 8004664:	080046ed 	.word	0x080046ed
 8004668:	080046b5 	.word	0x080046b5
 800466c:	080046ed 	.word	0x080046ed
 8004670:	080046ed 	.word	0x080046ed
 8004674:	080046ed 	.word	0x080046ed
 8004678:	080046d1 	.word	0x080046d1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800468a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe f911 	bl	80028b8 <HAL_DMA_Abort_IT>
      break;
 8004696:	e02c      	b.n	80046f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe f903 	bl	80028b8 <HAL_DMA_Abort_IT>
      break;
 80046b2:	e01e      	b.n	80046f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe f8f5 	bl	80028b8 <HAL_DMA_Abort_IT>
      break;
 80046ce:	e010      	b.n	80046f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe f8e7 	bl	80028b8 <HAL_DMA_Abort_IT>
      break;
 80046ea:	e002      	b.n	80046f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
      break;
 80046f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d157      	bne.n	80047a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2200      	movs	r2, #0
 80046fe:	6839      	ldr	r1, [r7, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 ffc5 	bl	8005690 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a2a      	ldr	r2, [pc, #168]	@ (80047b4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d117      	bne.n	8004740 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a1a      	ldr	r2, [r3, #32]
 8004716:	f241 1311 	movw	r3, #4369	@ 0x1111
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10f      	bne.n	8004740 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a1a      	ldr	r2, [r3, #32]
 8004726:	f240 4344 	movw	r3, #1092	@ 0x444
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800473e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	f241 1311 	movw	r3, #4369	@ 0x1111
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10f      	bne.n	8004770 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	f240 4344 	movw	r3, #1092	@ 0x444
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800477e:	e013      	b.n	80047a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b04      	cmp	r3, #4
 8004784:	d104      	bne.n	8004790 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800478e:	e00b      	b.n	80047a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b08      	cmp	r3, #8
 8004794:	d104      	bne.n	80047a0 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800479e:	e003      	b.n	80047a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000

080047b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e097      	b.n	80048fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fd f96b 	bl	8001abc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047fc:	f023 0307 	bic.w	r3, r3, #7
 8004800:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f000 fc8d 	bl	800512c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	4313      	orrs	r3, r2
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004858:	f023 030c 	bic.w	r3, r3, #12
 800485c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004864:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	4313      	orrs	r3, r2
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	011a      	lsls	r2, r3, #4
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	031b      	lsls	r3, r3, #12
 8004888:	4313      	orrs	r3, r2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004896:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800489e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	4313      	orrs	r3, r2
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004914:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800491c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004924:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800492c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d110      	bne.n	8004956 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d102      	bne.n	8004940 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800493a:	7b7b      	ldrb	r3, [r7, #13]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d001      	beq.n	8004944 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e069      	b.n	8004a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004954:	e031      	b.n	80049ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d110      	bne.n	800497e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800495c:	7bbb      	ldrb	r3, [r7, #14]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d102      	bne.n	8004968 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004962:	7b3b      	ldrb	r3, [r7, #12]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d001      	beq.n	800496c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e055      	b.n	8004a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800497c:	e01d      	b.n	80049ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d108      	bne.n	8004996 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004984:	7bbb      	ldrb	r3, [r7, #14]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d105      	bne.n	8004996 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800498a:	7b7b      	ldrb	r3, [r7, #13]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d102      	bne.n	8004996 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004990:	7b3b      	ldrb	r3, [r7, #12]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d001      	beq.n	800499a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e03e      	b.n	8004a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_TIM_Encoder_Start+0xc4>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d008      	beq.n	80049d8 <HAL_TIM_Encoder_Start+0xd4>
 80049c6:	e00f      	b.n	80049e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2201      	movs	r2, #1
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fe5d 	bl	8005690 <TIM_CCxChannelCmd>
      break;
 80049d6:	e016      	b.n	8004a06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2201      	movs	r2, #1
 80049de:	2104      	movs	r1, #4
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fe55 	bl	8005690 <TIM_CCxChannelCmd>
      break;
 80049e6:	e00e      	b.n	8004a06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fe4d 	bl	8005690 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2201      	movs	r2, #1
 80049fc:	2104      	movs	r1, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fe46 	bl	8005690 <TIM_CCxChannelCmd>
      break;
 8004a04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d020      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0202 	mvn.w	r2, #2
 8004a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa65 	bl	8004f3a <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa57 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 ffd1 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d020      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01b      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0204 	mvn.w	r2, #4
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa3f 	bl	8004f3a <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa31 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 ffab 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01b      	beq.n	8004b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0208 	mvn.w	r2, #8
 8004aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2204      	movs	r2, #4
 8004af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa19 	bl	8004f3a <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa0b 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 ff85 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d020      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01b      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0210 	mvn.w	r2, #16
 8004b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9f3 	bl	8004f3a <HAL_TIM_IC_CaptureCallback>
 8004b54:	e005      	b.n	8004b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f9e5 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 ff5f 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00c      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0201 	mvn.w	r2, #1
 8004b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9c3 	bl	8004f12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fe60 	bl	8005870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9c7 	bl	8004f62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00c      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0220 	mvn.w	r2, #32
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fe32 	bl	800585c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0ae      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	f200 809f 	bhi.w	8004d6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004d6d 	.word	0x08004d6d
 8004c3c:	08004d6d 	.word	0x08004d6d
 8004c40:	08004d6d 	.word	0x08004d6d
 8004c44:	08004ca9 	.word	0x08004ca9
 8004c48:	08004d6d 	.word	0x08004d6d
 8004c4c:	08004d6d 	.word	0x08004d6d
 8004c50:	08004d6d 	.word	0x08004d6d
 8004c54:	08004ceb 	.word	0x08004ceb
 8004c58:	08004d6d 	.word	0x08004d6d
 8004c5c:	08004d6d 	.word	0x08004d6d
 8004c60:	08004d6d 	.word	0x08004d6d
 8004c64:	08004d2b 	.word	0x08004d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fae8 	bl	8005244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0208 	orr.w	r2, r2, #8
 8004c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0204 	bic.w	r2, r2, #4
 8004c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6999      	ldr	r1, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	619a      	str	r2, [r3, #24]
      break;
 8004ca6:	e064      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fb2e 	bl	8005310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	021a      	lsls	r2, r3, #8
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
      break;
 8004ce8:	e043      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fb79 	bl	80053e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0208 	orr.w	r2, r2, #8
 8004d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0204 	bic.w	r2, r2, #4
 8004d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69d9      	ldr	r1, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	61da      	str	r2, [r3, #28]
      break;
 8004d28:	e023      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fbc3 	bl	80054bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	021a      	lsls	r2, r3, #8
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	61da      	str	r2, [r3, #28]
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIM_ConfigClockSource+0x1c>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e0b4      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x186>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd8:	d03e      	beq.n	8004e58 <HAL_TIM_ConfigClockSource+0xd4>
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dde:	f200 8087 	bhi.w	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de6:	f000 8086 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x172>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dee:	d87f      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b70      	cmp	r3, #112	@ 0x70
 8004df2:	d01a      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0xa6>
 8004df4:	2b70      	cmp	r3, #112	@ 0x70
 8004df6:	d87b      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b60      	cmp	r3, #96	@ 0x60
 8004dfa:	d050      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x11a>
 8004dfc:	2b60      	cmp	r3, #96	@ 0x60
 8004dfe:	d877      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b50      	cmp	r3, #80	@ 0x50
 8004e02:	d03c      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xfa>
 8004e04:	2b50      	cmp	r3, #80	@ 0x50
 8004e06:	d873      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b40      	cmp	r3, #64	@ 0x40
 8004e0a:	d058      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x13a>
 8004e0c:	2b40      	cmp	r3, #64	@ 0x40
 8004e0e:	d86f      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b30      	cmp	r3, #48	@ 0x30
 8004e12:	d064      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e14:	2b30      	cmp	r3, #48	@ 0x30
 8004e16:	d86b      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d060      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d867      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05c      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d05a      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e28:	e062      	b.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e3a:	f000 fc09 	bl	8005650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	609a      	str	r2, [r3, #8]
      break;
 8004e56:	e04f      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e68:	f000 fbf2 	bl	8005650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e7a:	609a      	str	r2, [r3, #8]
      break;
 8004e7c:	e03c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 fb66 	bl	800555c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2150      	movs	r1, #80	@ 0x50
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fbbf 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e02c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 fb85 	bl	80055ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2160      	movs	r1, #96	@ 0x60
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fbaf 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e01c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 fb46 	bl	800555c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2140      	movs	r1, #64	@ 0x40
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fb9f 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004edc:	e00c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f000 fb96 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004eee:	e003      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef4:	e000      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d107      	bne.n	8004fb2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb0:	e02a      	b.n	8005008 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d107      	bne.n	8004fcc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fca:	e01d      	b.n	8005008 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d107      	bne.n	8004fe6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe4:	e010      	b.n	8005008 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d107      	bne.n	8005000 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ffe:	e003      	b.n	8005008 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff ffb4 	bl	8004f76 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d10b      	bne.n	800504c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d136      	bne.n	80050b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800504a:	e031      	b.n	80050b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d10b      	bne.n	800506e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2202      	movs	r2, #2
 800505a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d125      	bne.n	80050b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800506c:	e020      	b.n	80050b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d10b      	bne.n	8005090 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2204      	movs	r2, #4
 800507c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d114      	bne.n	80050b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800508e:	e00f      	b.n	80050b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d10a      	bne.n	80050b0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2208      	movs	r2, #8
 800509e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fcb5 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d103      	bne.n	80050e4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	771a      	strb	r2, [r3, #28]
 80050e2:	e019      	b.n	8005118 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d103      	bne.n	80050f6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2202      	movs	r2, #2
 80050f2:	771a      	strb	r2, [r3, #28]
 80050f4:	e010      	b.n	8005118 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d103      	bne.n	8005108 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2204      	movs	r2, #4
 8005104:	771a      	strb	r2, [r3, #28]
 8005106:	e007      	b.n	8005118 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d102      	bne.n	8005118 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2208      	movs	r2, #8
 8005116:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff18 	bl	8004f4e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3a      	ldr	r2, [pc, #232]	@ (8005228 <TIM_Base_SetConfig+0xfc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00f      	beq.n	8005164 <TIM_Base_SetConfig+0x38>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514a:	d00b      	beq.n	8005164 <TIM_Base_SetConfig+0x38>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a37      	ldr	r2, [pc, #220]	@ (800522c <TIM_Base_SetConfig+0x100>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <TIM_Base_SetConfig+0x38>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a36      	ldr	r2, [pc, #216]	@ (8005230 <TIM_Base_SetConfig+0x104>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_Base_SetConfig+0x38>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a35      	ldr	r2, [pc, #212]	@ (8005234 <TIM_Base_SetConfig+0x108>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d108      	bne.n	8005176 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2b      	ldr	r2, [pc, #172]	@ (8005228 <TIM_Base_SetConfig+0xfc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01b      	beq.n	80051b6 <TIM_Base_SetConfig+0x8a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005184:	d017      	beq.n	80051b6 <TIM_Base_SetConfig+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a28      	ldr	r2, [pc, #160]	@ (800522c <TIM_Base_SetConfig+0x100>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <TIM_Base_SetConfig+0x8a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a27      	ldr	r2, [pc, #156]	@ (8005230 <TIM_Base_SetConfig+0x104>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a26      	ldr	r2, [pc, #152]	@ (8005234 <TIM_Base_SetConfig+0x108>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_Base_SetConfig+0x8a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a25      	ldr	r2, [pc, #148]	@ (8005238 <TIM_Base_SetConfig+0x10c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a24      	ldr	r2, [pc, #144]	@ (800523c <TIM_Base_SetConfig+0x110>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a23      	ldr	r2, [pc, #140]	@ (8005240 <TIM_Base_SetConfig+0x114>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005228 <TIM_Base_SetConfig+0xfc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d103      	bne.n	80051fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	611a      	str	r2, [r3, #16]
  }
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800

08005244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f023 0201 	bic.w	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 0302 	bic.w	r3, r3, #2
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1c      	ldr	r2, [pc, #112]	@ (800530c <TIM_OC1_SetConfig+0xc8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10c      	bne.n	80052ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0308 	bic.w	r3, r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f023 0304 	bic.w	r3, r3, #4
 80052b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a13      	ldr	r2, [pc, #76]	@ (800530c <TIM_OC1_SetConfig+0xc8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40010000 	.word	0x40010000

08005310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f023 0210 	bic.w	r2, r3, #16
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0320 	bic.w	r3, r3, #32
 800535a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <TIM_OC2_SetConfig+0xd4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10d      	bne.n	800538c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800538a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a15      	ldr	r2, [pc, #84]	@ (80053e4 <TIM_OC2_SetConfig+0xd4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d113      	bne.n	80053bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800539a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010000 	.word	0x40010000

080053e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a1d      	ldr	r2, [pc, #116]	@ (80054b8 <TIM_OC3_SetConfig+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d10d      	bne.n	8005462 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800544c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a14      	ldr	r2, [pc, #80]	@ (80054b8 <TIM_OC3_SetConfig+0xd0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d113      	bne.n	8005492 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	621a      	str	r2, [r3, #32]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	40010000 	.word	0x40010000

080054bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	031b      	lsls	r3, r3, #12
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a10      	ldr	r2, [pc, #64]	@ (8005558 <TIM_OC4_SetConfig+0x9c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d109      	bne.n	8005530 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	019b      	lsls	r3, r3, #6
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000

0800555c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 030a 	bic.w	r3, r3, #10
 8005598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f023 0210 	bic.w	r2, r3, #16
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	f043 0307 	orr.w	r3, r3, #7
 800563c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800566a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	609a      	str	r2, [r3, #8]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2201      	movs	r2, #1
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	fa01 f303 	lsl.w	r3, r1, r3
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e050      	b.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1c      	ldr	r2, [pc, #112]	@ (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d018      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005740:	d013      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a18      	ldr	r2, [pc, #96]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00e      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a16      	ldr	r2, [pc, #88]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a13      	ldr	r2, [pc, #76]	@ (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d10c      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	4313      	orrs	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40014000 	.word	0x40014000

080057b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e03d      	b.n	8005850 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <turnOnLED>:
/**
 * @brief   Turns on an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn on.
 */
void turnOnLED(LED *currentFrame, uint8_t number) {
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
	currentFrame[number].draw = true;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	2201      	movs	r2, #1
 800589a:	70da      	strb	r2, [r3, #3]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <turnOffLED>:
/**
 * @brief   Turns off an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn off.
 */
void turnOffLED(LED *currentFrame, uint8_t number) {
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
	currentFrame[number].draw = false;
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	4413      	add	r3, r2
 80058bc:	2200      	movs	r2, #0
 80058be:	70da      	strb	r2, [r3, #3]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <wipePWMBuffer>:
 * @brief Converts a bitmap to PWM data for WS2812B LEDs.
 *
 * Wipes PWM Buffer by filling it with user defined ZERO PWM values.
 *
 */
void wipePWMBuffer(void) {
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 80058d2:	2300      	movs	r3, #0
 80058d4:	607b      	str	r3, [r7, #4]
 80058d6:	e007      	b.n	80058e8 <wipePWMBuffer+0x1c>
        pwmBuffer[i] = ZERO;
 80058d8:	4a09      	ldr	r2, [pc, #36]	@ (8005900 <wipePWMBuffer+0x34>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	211b      	movs	r1, #27
 80058de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3301      	adds	r3, #1
 80058e6:	607b      	str	r3, [r7, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f640 5299 	movw	r2, #3481	@ 0xd99
 80058ee:	4293      	cmp	r3, r2
 80058f0:	ddf2      	ble.n	80058d8 <wipePWMBuffer+0xc>
    }
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	200006e8 	.word	0x200006e8

08005904 <updatePwmBuffer>:
 * (green, red, blue) order.
 *
 * @note    The PWM buffer must be appropriately sized to accommodate the
 *          LED data. Each LED requires 24 bits in the PWM buffer.
 */
void updatePwmBuffer(LED *currentFrame) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

    wipePWMBuffer();
 800590c:	f7ff ffde 	bl	80058cc <wipePWMBuffer>

    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	e05f      	b.n	80059d6 <updatePwmBuffer+0xd2>

        if(!currentFrame[ledNumber].draw) {
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	f083 0301 	eor.w	r3, r3, #1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d151      	bne.n	80059ce <updatePwmBuffer+0xca>
            continue;
        }


        uint8_t red     = currentFrame[ledNumber].red;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4413      	add	r3, r2
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	73fb      	strb	r3, [r7, #15]
        uint8_t green   = currentFrame[ledNumber].green;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	73bb      	strb	r3, [r7, #14]
        uint8_t blue    = currentFrame[ledNumber].blue;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	789b      	ldrb	r3, [r3, #2]
 800594c:	737b      	strb	r3, [r7, #13]
        uint32_t arrayIndex = ledNumber * 24;
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	60bb      	str	r3, [r7, #8]

        // ws2812b is GRB, so we swap the positions of red and green
        for(int bit = 0; bit < 8; bit++) {
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e032      	b.n	80059c6 <updatePwmBuffer+0xc2>

            if(green & (1 << bit)) {
 8005960:	7bba      	ldrb	r2, [r7, #14]
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	fa42 f303 	asr.w	r3, r2, r3
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <updatePwmBuffer+0x7c>
                pwmBuffer[arrayIndex + 16 + (7 - bit)] = ONE;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	3317      	adds	r3, #23
 8005978:	4a1b      	ldr	r2, [pc, #108]	@ (80059e8 <updatePwmBuffer+0xe4>)
 800597a:	2136      	movs	r1, #54	@ 0x36
 800597c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(red & (1 << bit)) {
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	fa42 f303 	asr.w	r3, r2, r3
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <updatePwmBuffer+0x9c>
                pwmBuffer[arrayIndex + 8 + (7 - bit)] = ONE;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	330f      	adds	r3, #15
 8005998:	4a13      	ldr	r2, [pc, #76]	@ (80059e8 <updatePwmBuffer+0xe4>)
 800599a:	2136      	movs	r1, #54	@ 0x36
 800599c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(blue & (1 << bit)) {
 80059a0:	7b7a      	ldrb	r2, [r7, #13]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	fa42 f303 	asr.w	r3, r2, r3
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <updatePwmBuffer+0xbc>
                pwmBuffer[arrayIndex + (7 - bit)] = ONE;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	3307      	adds	r3, #7
 80059b8:	4a0b      	ldr	r2, [pc, #44]	@ (80059e8 <updatePwmBuffer+0xe4>)
 80059ba:	2136      	movs	r1, #54	@ 0x36
 80059bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(int bit = 0; bit < 8; bit++) {
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	3301      	adds	r3, #1
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b07      	cmp	r3, #7
 80059ca:	ddc9      	ble.n	8005960 <updatePwmBuffer+0x5c>
 80059cc:	e000      	b.n	80059d0 <updatePwmBuffer+0xcc>
            continue;
 80059ce:	bf00      	nop
    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3301      	adds	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b8e      	cmp	r3, #142	@ 0x8e
 80059da:	dd9c      	ble.n	8005916 <updatePwmBuffer+0x12>
            }
        }

    }
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200006e8 	.word	0x200006e8

080059ec <DMA_Send>:


void DMA_Send() {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0

	//FIXME: The data is 1 bit too far to the left.
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmBuffer, PWM_ARRAY_SIZE + 1);
 80059f0:	f640 539b 	movw	r3, #3483	@ 0xd9b
 80059f4:	4a07      	ldr	r2, [pc, #28]	@ (8005a14 <DMA_Send+0x28>)
 80059f6:	2100      	movs	r1, #0
 80059f8:	4807      	ldr	r0, [pc, #28]	@ (8005a18 <DMA_Send+0x2c>)
 80059fa:	f7fe fc67 	bl	80042cc <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 80059fe:	bf00      	nop
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <DMA_Send+0x30>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0fb      	beq.n	8005a00 <DMA_Send+0x14>
	datasentflag = 0;
 8005a08:	4b04      	ldr	r3, [pc, #16]	@ (8005a1c <DMA_Send+0x30>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]

}
 8005a0e:	bf00      	nop
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	200006e8 	.word	0x200006e8
 8005a18:	20000540 	.word	0x20000540
 8005a1c:	200006e4 	.word	0x200006e4

08005a20 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fe fdfe 	bl	800462c <HAL_TIM_PWM_Stop_DMA>
    datasentflag = 1;
 8005a30:	4b03      	ldr	r3, [pc, #12]	@ (8005a40 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	200006e4 	.word	0x200006e4

08005a44 <rand>:
 8005a44:	4b16      	ldr	r3, [pc, #88]	@ (8005aa0 <rand+0x5c>)
 8005a46:	b510      	push	{r4, lr}
 8005a48:	681c      	ldr	r4, [r3, #0]
 8005a4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005a4c:	b9b3      	cbnz	r3, 8005a7c <rand+0x38>
 8005a4e:	2018      	movs	r0, #24
 8005a50:	f000 fa40 	bl	8005ed4 <malloc>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6320      	str	r0, [r4, #48]	@ 0x30
 8005a58:	b920      	cbnz	r0, 8005a64 <rand+0x20>
 8005a5a:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <rand+0x60>)
 8005a5c:	4812      	ldr	r0, [pc, #72]	@ (8005aa8 <rand+0x64>)
 8005a5e:	2152      	movs	r1, #82	@ 0x52
 8005a60:	f000 f9d0 	bl	8005e04 <__assert_func>
 8005a64:	4911      	ldr	r1, [pc, #68]	@ (8005aac <rand+0x68>)
 8005a66:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <rand+0x6c>)
 8005a68:	e9c0 1300 	strd	r1, r3, [r0]
 8005a6c:	4b11      	ldr	r3, [pc, #68]	@ (8005ab4 <rand+0x70>)
 8005a6e:	6083      	str	r3, [r0, #8]
 8005a70:	230b      	movs	r3, #11
 8005a72:	8183      	strh	r3, [r0, #12]
 8005a74:	2100      	movs	r1, #0
 8005a76:	2001      	movs	r0, #1
 8005a78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005a7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a7e:	480e      	ldr	r0, [pc, #56]	@ (8005ab8 <rand+0x74>)
 8005a80:	690b      	ldr	r3, [r1, #16]
 8005a82:	694c      	ldr	r4, [r1, #20]
 8005a84:	4a0d      	ldr	r2, [pc, #52]	@ (8005abc <rand+0x78>)
 8005a86:	4358      	muls	r0, r3
 8005a88:	fb02 0004 	mla	r0, r2, r4, r0
 8005a8c:	fba3 3202 	umull	r3, r2, r3, r2
 8005a90:	3301      	adds	r3, #1
 8005a92:	eb40 0002 	adc.w	r0, r0, r2
 8005a96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005a9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005a9e:	bd10      	pop	{r4, pc}
 8005aa0:	2000003c 	.word	0x2000003c
 8005aa4:	08006d48 	.word	0x08006d48
 8005aa8:	08006d5f 	.word	0x08006d5f
 8005aac:	abcd330e 	.word	0xabcd330e
 8005ab0:	e66d1234 	.word	0xe66d1234
 8005ab4:	0005deec 	.word	0x0005deec
 8005ab8:	5851f42d 	.word	0x5851f42d
 8005abc:	4c957f2d 	.word	0x4c957f2d

08005ac0 <std>:
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	b510      	push	{r4, lr}
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8005aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ace:	6083      	str	r3, [r0, #8]
 8005ad0:	8181      	strh	r1, [r0, #12]
 8005ad2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ad4:	81c2      	strh	r2, [r0, #14]
 8005ad6:	6183      	str	r3, [r0, #24]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	2208      	movs	r2, #8
 8005adc:	305c      	adds	r0, #92	@ 0x5c
 8005ade:	f000 f8f4 	bl	8005cca <memset>
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <std+0x58>)
 8005ae4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <std+0x5c>)
 8005ae8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <std+0x60>)
 8005aec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <std+0x64>)
 8005af0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <std+0x68>)
 8005af4:	6224      	str	r4, [r4, #32]
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d006      	beq.n	8005b08 <std+0x48>
 8005afa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005afe:	4294      	cmp	r4, r2
 8005b00:	d002      	beq.n	8005b08 <std+0x48>
 8005b02:	33d0      	adds	r3, #208	@ 0xd0
 8005b04:	429c      	cmp	r4, r3
 8005b06:	d105      	bne.n	8005b14 <std+0x54>
 8005b08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b10:	f000 b966 	b.w	8005de0 <__retarget_lock_init_recursive>
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	08005c45 	.word	0x08005c45
 8005b1c:	08005c67 	.word	0x08005c67
 8005b20:	08005c9f 	.word	0x08005c9f
 8005b24:	08005cc3 	.word	0x08005cc3
 8005b28:	2000221c 	.word	0x2000221c

08005b2c <stdio_exit_handler>:
 8005b2c:	4a02      	ldr	r2, [pc, #8]	@ (8005b38 <stdio_exit_handler+0xc>)
 8005b2e:	4903      	ldr	r1, [pc, #12]	@ (8005b3c <stdio_exit_handler+0x10>)
 8005b30:	4803      	ldr	r0, [pc, #12]	@ (8005b40 <stdio_exit_handler+0x14>)
 8005b32:	f000 b869 	b.w	8005c08 <_fwalk_sglue>
 8005b36:	bf00      	nop
 8005b38:	20000030 	.word	0x20000030
 8005b3c:	08006149 	.word	0x08006149
 8005b40:	20000040 	.word	0x20000040

08005b44 <cleanup_stdio>:
 8005b44:	6841      	ldr	r1, [r0, #4]
 8005b46:	4b0c      	ldr	r3, [pc, #48]	@ (8005b78 <cleanup_stdio+0x34>)
 8005b48:	4299      	cmp	r1, r3
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	d001      	beq.n	8005b54 <cleanup_stdio+0x10>
 8005b50:	f000 fafa 	bl	8006148 <_fflush_r>
 8005b54:	68a1      	ldr	r1, [r4, #8]
 8005b56:	4b09      	ldr	r3, [pc, #36]	@ (8005b7c <cleanup_stdio+0x38>)
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	d002      	beq.n	8005b62 <cleanup_stdio+0x1e>
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 faf3 	bl	8006148 <_fflush_r>
 8005b62:	68e1      	ldr	r1, [r4, #12]
 8005b64:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <cleanup_stdio+0x3c>)
 8005b66:	4299      	cmp	r1, r3
 8005b68:	d004      	beq.n	8005b74 <cleanup_stdio+0x30>
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b70:	f000 baea 	b.w	8006148 <_fflush_r>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	bf00      	nop
 8005b78:	2000221c 	.word	0x2000221c
 8005b7c:	20002284 	.word	0x20002284
 8005b80:	200022ec 	.word	0x200022ec

08005b84 <global_stdio_init.part.0>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <global_stdio_init.part.0+0x30>)
 8005b88:	4c0b      	ldr	r4, [pc, #44]	@ (8005bb8 <global_stdio_init.part.0+0x34>)
 8005b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005bbc <global_stdio_init.part.0+0x38>)
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	2200      	movs	r2, #0
 8005b92:	2104      	movs	r1, #4
 8005b94:	f7ff ff94 	bl	8005ac0 <std>
 8005b98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	2109      	movs	r1, #9
 8005ba0:	f7ff ff8e 	bl	8005ac0 <std>
 8005ba4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ba8:	2202      	movs	r2, #2
 8005baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bae:	2112      	movs	r1, #18
 8005bb0:	f7ff bf86 	b.w	8005ac0 <std>
 8005bb4:	20002354 	.word	0x20002354
 8005bb8:	2000221c 	.word	0x2000221c
 8005bbc:	08005b2d 	.word	0x08005b2d

08005bc0 <__sfp_lock_acquire>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	@ (8005bc8 <__sfp_lock_acquire+0x8>)
 8005bc2:	f000 b90e 	b.w	8005de2 <__retarget_lock_acquire_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	2000235d 	.word	0x2000235d

08005bcc <__sfp_lock_release>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	@ (8005bd4 <__sfp_lock_release+0x8>)
 8005bce:	f000 b909 	b.w	8005de4 <__retarget_lock_release_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	2000235d 	.word	0x2000235d

08005bd8 <__sinit>:
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	4604      	mov	r4, r0
 8005bdc:	f7ff fff0 	bl	8005bc0 <__sfp_lock_acquire>
 8005be0:	6a23      	ldr	r3, [r4, #32]
 8005be2:	b11b      	cbz	r3, 8005bec <__sinit+0x14>
 8005be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be8:	f7ff bff0 	b.w	8005bcc <__sfp_lock_release>
 8005bec:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <__sinit+0x28>)
 8005bee:	6223      	str	r3, [r4, #32]
 8005bf0:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <__sinit+0x2c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f5      	bne.n	8005be4 <__sinit+0xc>
 8005bf8:	f7ff ffc4 	bl	8005b84 <global_stdio_init.part.0>
 8005bfc:	e7f2      	b.n	8005be4 <__sinit+0xc>
 8005bfe:	bf00      	nop
 8005c00:	08005b45 	.word	0x08005b45
 8005c04:	20002354 	.word	0x20002354

08005c08 <_fwalk_sglue>:
 8005c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	4688      	mov	r8, r1
 8005c10:	4614      	mov	r4, r2
 8005c12:	2600      	movs	r6, #0
 8005c14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c18:	f1b9 0901 	subs.w	r9, r9, #1
 8005c1c:	d505      	bpl.n	8005c2a <_fwalk_sglue+0x22>
 8005c1e:	6824      	ldr	r4, [r4, #0]
 8005c20:	2c00      	cmp	r4, #0
 8005c22:	d1f7      	bne.n	8005c14 <_fwalk_sglue+0xc>
 8005c24:	4630      	mov	r0, r6
 8005c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d907      	bls.n	8005c40 <_fwalk_sglue+0x38>
 8005c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c34:	3301      	adds	r3, #1
 8005c36:	d003      	beq.n	8005c40 <_fwalk_sglue+0x38>
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c0      	blx	r8
 8005c3e:	4306      	orrs	r6, r0
 8005c40:	3568      	adds	r5, #104	@ 0x68
 8005c42:	e7e9      	b.n	8005c18 <_fwalk_sglue+0x10>

08005c44 <__sread>:
 8005c44:	b510      	push	{r4, lr}
 8005c46:	460c      	mov	r4, r1
 8005c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4c:	f000 f87a 	bl	8005d44 <_read_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	bfab      	itete	ge
 8005c54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c56:	89a3      	ldrhlt	r3, [r4, #12]
 8005c58:	181b      	addge	r3, r3, r0
 8005c5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c5e:	bfac      	ite	ge
 8005c60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c62:	81a3      	strhlt	r3, [r4, #12]
 8005c64:	bd10      	pop	{r4, pc}

08005c66 <__swrite>:
 8005c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6a:	461f      	mov	r7, r3
 8005c6c:	898b      	ldrh	r3, [r1, #12]
 8005c6e:	05db      	lsls	r3, r3, #23
 8005c70:	4605      	mov	r5, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	4616      	mov	r6, r2
 8005c76:	d505      	bpl.n	8005c84 <__swrite+0x1e>
 8005c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f000 f84e 	bl	8005d20 <_lseek_r>
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	4632      	mov	r2, r6
 8005c92:	463b      	mov	r3, r7
 8005c94:	4628      	mov	r0, r5
 8005c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9a:	f000 b865 	b.w	8005d68 <_write_r>

08005c9e <__sseek>:
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca6:	f000 f83b 	bl	8005d20 <_lseek_r>
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	bf15      	itete	ne
 8005cb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cba:	81a3      	strheq	r3, [r4, #12]
 8005cbc:	bf18      	it	ne
 8005cbe:	81a3      	strhne	r3, [r4, #12]
 8005cc0:	bd10      	pop	{r4, pc}

08005cc2 <__sclose>:
 8005cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc6:	f000 b81b 	b.w	8005d00 <_close_r>

08005cca <memset>:
 8005cca:	4402      	add	r2, r0
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d100      	bne.n	8005cd4 <memset+0xa>
 8005cd2:	4770      	bx	lr
 8005cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd8:	e7f9      	b.n	8005cce <memset+0x4>

08005cda <strncpy>:
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	3901      	subs	r1, #1
 8005cde:	4603      	mov	r3, r0
 8005ce0:	b132      	cbz	r2, 8005cf0 <strncpy+0x16>
 8005ce2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ce6:	f803 4b01 	strb.w	r4, [r3], #1
 8005cea:	3a01      	subs	r2, #1
 8005cec:	2c00      	cmp	r4, #0
 8005cee:	d1f7      	bne.n	8005ce0 <strncpy+0x6>
 8005cf0:	441a      	add	r2, r3
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d100      	bne.n	8005cfa <strncpy+0x20>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005cfe:	e7f9      	b.n	8005cf4 <strncpy+0x1a>

08005d00 <_close_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d06      	ldr	r5, [pc, #24]	@ (8005d1c <_close_r+0x1c>)
 8005d04:	2300      	movs	r3, #0
 8005d06:	4604      	mov	r4, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	f7fc f800 	bl	8001d10 <_close>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_close_r+0x1a>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_close_r+0x1a>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20002358 	.word	0x20002358

08005d20 <_lseek_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4d07      	ldr	r5, [pc, #28]	@ (8005d40 <_lseek_r+0x20>)
 8005d24:	4604      	mov	r4, r0
 8005d26:	4608      	mov	r0, r1
 8005d28:	4611      	mov	r1, r2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	602a      	str	r2, [r5, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f7fc f815 	bl	8001d5e <_lseek>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	d102      	bne.n	8005d3e <_lseek_r+0x1e>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	b103      	cbz	r3, 8005d3e <_lseek_r+0x1e>
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
 8005d40:	20002358 	.word	0x20002358

08005d44 <_read_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d07      	ldr	r5, [pc, #28]	@ (8005d64 <_read_r+0x20>)
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	602a      	str	r2, [r5, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f7fb ffa3 	bl	8001c9e <_read>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_read_r+0x1e>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_read_r+0x1e>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20002358 	.word	0x20002358

08005d68 <_write_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d07      	ldr	r5, [pc, #28]	@ (8005d88 <_write_r+0x20>)
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	4608      	mov	r0, r1
 8005d70:	4611      	mov	r1, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f7fb ffae 	bl	8001cd8 <_write>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_write_r+0x1e>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_write_r+0x1e>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20002358 	.word	0x20002358

08005d8c <__errno>:
 8005d8c:	4b01      	ldr	r3, [pc, #4]	@ (8005d94 <__errno+0x8>)
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	2000003c 	.word	0x2000003c

08005d98 <__libc_init_array>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005dd0 <__libc_init_array+0x38>)
 8005d9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005dd4 <__libc_init_array+0x3c>)
 8005d9e:	1b64      	subs	r4, r4, r5
 8005da0:	10a4      	asrs	r4, r4, #2
 8005da2:	2600      	movs	r6, #0
 8005da4:	42a6      	cmp	r6, r4
 8005da6:	d109      	bne.n	8005dbc <__libc_init_array+0x24>
 8005da8:	4d0b      	ldr	r5, [pc, #44]	@ (8005dd8 <__libc_init_array+0x40>)
 8005daa:	4c0c      	ldr	r4, [pc, #48]	@ (8005ddc <__libc_init_array+0x44>)
 8005dac:	f000 fe48 	bl	8006a40 <_init>
 8005db0:	1b64      	subs	r4, r4, r5
 8005db2:	10a4      	asrs	r4, r4, #2
 8005db4:	2600      	movs	r6, #0
 8005db6:	42a6      	cmp	r6, r4
 8005db8:	d105      	bne.n	8005dc6 <__libc_init_array+0x2e>
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc0:	4798      	blx	r3
 8005dc2:	3601      	adds	r6, #1
 8005dc4:	e7ee      	b.n	8005da4 <__libc_init_array+0xc>
 8005dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dca:	4798      	blx	r3
 8005dcc:	3601      	adds	r6, #1
 8005dce:	e7f2      	b.n	8005db6 <__libc_init_array+0x1e>
 8005dd0:	08006e30 	.word	0x08006e30
 8005dd4:	08006e30 	.word	0x08006e30
 8005dd8:	08006e30 	.word	0x08006e30
 8005ddc:	08006e34 	.word	0x08006e34

08005de0 <__retarget_lock_init_recursive>:
 8005de0:	4770      	bx	lr

08005de2 <__retarget_lock_acquire_recursive>:
 8005de2:	4770      	bx	lr

08005de4 <__retarget_lock_release_recursive>:
 8005de4:	4770      	bx	lr

08005de6 <memcpy>:
 8005de6:	440a      	add	r2, r1
 8005de8:	4291      	cmp	r1, r2
 8005dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dee:	d100      	bne.n	8005df2 <memcpy+0xc>
 8005df0:	4770      	bx	lr
 8005df2:	b510      	push	{r4, lr}
 8005df4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfc:	4291      	cmp	r1, r2
 8005dfe:	d1f9      	bne.n	8005df4 <memcpy+0xe>
 8005e00:	bd10      	pop	{r4, pc}
	...

08005e04 <__assert_func>:
 8005e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e06:	4614      	mov	r4, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <__assert_func+0x2c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4605      	mov	r5, r0
 8005e10:	68d8      	ldr	r0, [r3, #12]
 8005e12:	b954      	cbnz	r4, 8005e2a <__assert_func+0x26>
 8005e14:	4b07      	ldr	r3, [pc, #28]	@ (8005e34 <__assert_func+0x30>)
 8005e16:	461c      	mov	r4, r3
 8005e18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e1c:	9100      	str	r1, [sp, #0]
 8005e1e:	462b      	mov	r3, r5
 8005e20:	4905      	ldr	r1, [pc, #20]	@ (8005e38 <__assert_func+0x34>)
 8005e22:	f000 f9b9 	bl	8006198 <fiprintf>
 8005e26:	f000 f9d9 	bl	80061dc <abort>
 8005e2a:	4b04      	ldr	r3, [pc, #16]	@ (8005e3c <__assert_func+0x38>)
 8005e2c:	e7f4      	b.n	8005e18 <__assert_func+0x14>
 8005e2e:	bf00      	nop
 8005e30:	2000003c 	.word	0x2000003c
 8005e34:	08006df2 	.word	0x08006df2
 8005e38:	08006dc4 	.word	0x08006dc4
 8005e3c:	08006db7 	.word	0x08006db7

08005e40 <_free_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4605      	mov	r5, r0
 8005e44:	2900      	cmp	r1, #0
 8005e46:	d041      	beq.n	8005ecc <_free_r+0x8c>
 8005e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4c:	1f0c      	subs	r4, r1, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bfb8      	it	lt
 8005e52:	18e4      	addlt	r4, r4, r3
 8005e54:	f000 f8e8 	bl	8006028 <__malloc_lock>
 8005e58:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed0 <_free_r+0x90>)
 8005e5a:	6813      	ldr	r3, [r2, #0]
 8005e5c:	b933      	cbnz	r3, 8005e6c <_free_r+0x2c>
 8005e5e:	6063      	str	r3, [r4, #4]
 8005e60:	6014      	str	r4, [r2, #0]
 8005e62:	4628      	mov	r0, r5
 8005e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e68:	f000 b8e4 	b.w	8006034 <__malloc_unlock>
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d908      	bls.n	8005e82 <_free_r+0x42>
 8005e70:	6820      	ldr	r0, [r4, #0]
 8005e72:	1821      	adds	r1, r4, r0
 8005e74:	428b      	cmp	r3, r1
 8005e76:	bf01      	itttt	eq
 8005e78:	6819      	ldreq	r1, [r3, #0]
 8005e7a:	685b      	ldreq	r3, [r3, #4]
 8005e7c:	1809      	addeq	r1, r1, r0
 8005e7e:	6021      	streq	r1, [r4, #0]
 8005e80:	e7ed      	b.n	8005e5e <_free_r+0x1e>
 8005e82:	461a      	mov	r2, r3
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	b10b      	cbz	r3, 8005e8c <_free_r+0x4c>
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	d9fa      	bls.n	8005e82 <_free_r+0x42>
 8005e8c:	6811      	ldr	r1, [r2, #0]
 8005e8e:	1850      	adds	r0, r2, r1
 8005e90:	42a0      	cmp	r0, r4
 8005e92:	d10b      	bne.n	8005eac <_free_r+0x6c>
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	4401      	add	r1, r0
 8005e98:	1850      	adds	r0, r2, r1
 8005e9a:	4283      	cmp	r3, r0
 8005e9c:	6011      	str	r1, [r2, #0]
 8005e9e:	d1e0      	bne.n	8005e62 <_free_r+0x22>
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	6053      	str	r3, [r2, #4]
 8005ea6:	4408      	add	r0, r1
 8005ea8:	6010      	str	r0, [r2, #0]
 8005eaa:	e7da      	b.n	8005e62 <_free_r+0x22>
 8005eac:	d902      	bls.n	8005eb4 <_free_r+0x74>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	e7d6      	b.n	8005e62 <_free_r+0x22>
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	1821      	adds	r1, r4, r0
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	bf04      	itt	eq
 8005ebc:	6819      	ldreq	r1, [r3, #0]
 8005ebe:	685b      	ldreq	r3, [r3, #4]
 8005ec0:	6063      	str	r3, [r4, #4]
 8005ec2:	bf04      	itt	eq
 8005ec4:	1809      	addeq	r1, r1, r0
 8005ec6:	6021      	streq	r1, [r4, #0]
 8005ec8:	6054      	str	r4, [r2, #4]
 8005eca:	e7ca      	b.n	8005e62 <_free_r+0x22>
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	bf00      	nop
 8005ed0:	20002364 	.word	0x20002364

08005ed4 <malloc>:
 8005ed4:	4b02      	ldr	r3, [pc, #8]	@ (8005ee0 <malloc+0xc>)
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	f000 b825 	b.w	8005f28 <_malloc_r>
 8005ede:	bf00      	nop
 8005ee0:	2000003c 	.word	0x2000003c

08005ee4 <sbrk_aligned>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	4e0f      	ldr	r6, [pc, #60]	@ (8005f24 <sbrk_aligned+0x40>)
 8005ee8:	460c      	mov	r4, r1
 8005eea:	6831      	ldr	r1, [r6, #0]
 8005eec:	4605      	mov	r5, r0
 8005eee:	b911      	cbnz	r1, 8005ef6 <sbrk_aligned+0x12>
 8005ef0:	f000 f964 	bl	80061bc <_sbrk_r>
 8005ef4:	6030      	str	r0, [r6, #0]
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 f95f 	bl	80061bc <_sbrk_r>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	d103      	bne.n	8005f0a <sbrk_aligned+0x26>
 8005f02:	f04f 34ff 	mov.w	r4, #4294967295
 8005f06:	4620      	mov	r0, r4
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	1cc4      	adds	r4, r0, #3
 8005f0c:	f024 0403 	bic.w	r4, r4, #3
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	d0f8      	beq.n	8005f06 <sbrk_aligned+0x22>
 8005f14:	1a21      	subs	r1, r4, r0
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 f950 	bl	80061bc <_sbrk_r>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d1f2      	bne.n	8005f06 <sbrk_aligned+0x22>
 8005f20:	e7ef      	b.n	8005f02 <sbrk_aligned+0x1e>
 8005f22:	bf00      	nop
 8005f24:	20002360 	.word	0x20002360

08005f28 <_malloc_r>:
 8005f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f2c:	1ccd      	adds	r5, r1, #3
 8005f2e:	f025 0503 	bic.w	r5, r5, #3
 8005f32:	3508      	adds	r5, #8
 8005f34:	2d0c      	cmp	r5, #12
 8005f36:	bf38      	it	cc
 8005f38:	250c      	movcc	r5, #12
 8005f3a:	2d00      	cmp	r5, #0
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	db01      	blt.n	8005f44 <_malloc_r+0x1c>
 8005f40:	42a9      	cmp	r1, r5
 8005f42:	d904      	bls.n	8005f4e <_malloc_r+0x26>
 8005f44:	230c      	movs	r3, #12
 8005f46:	6033      	str	r3, [r6, #0]
 8005f48:	2000      	movs	r0, #0
 8005f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006024 <_malloc_r+0xfc>
 8005f52:	f000 f869 	bl	8006028 <__malloc_lock>
 8005f56:	f8d8 3000 	ldr.w	r3, [r8]
 8005f5a:	461c      	mov	r4, r3
 8005f5c:	bb44      	cbnz	r4, 8005fb0 <_malloc_r+0x88>
 8005f5e:	4629      	mov	r1, r5
 8005f60:	4630      	mov	r0, r6
 8005f62:	f7ff ffbf 	bl	8005ee4 <sbrk_aligned>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	4604      	mov	r4, r0
 8005f6a:	d158      	bne.n	800601e <_malloc_r+0xf6>
 8005f6c:	f8d8 4000 	ldr.w	r4, [r8]
 8005f70:	4627      	mov	r7, r4
 8005f72:	2f00      	cmp	r7, #0
 8005f74:	d143      	bne.n	8005ffe <_malloc_r+0xd6>
 8005f76:	2c00      	cmp	r4, #0
 8005f78:	d04b      	beq.n	8006012 <_malloc_r+0xea>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4630      	mov	r0, r6
 8005f80:	eb04 0903 	add.w	r9, r4, r3
 8005f84:	f000 f91a 	bl	80061bc <_sbrk_r>
 8005f88:	4581      	cmp	r9, r0
 8005f8a:	d142      	bne.n	8006012 <_malloc_r+0xea>
 8005f8c:	6821      	ldr	r1, [r4, #0]
 8005f8e:	1a6d      	subs	r5, r5, r1
 8005f90:	4629      	mov	r1, r5
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7ff ffa6 	bl	8005ee4 <sbrk_aligned>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d03a      	beq.n	8006012 <_malloc_r+0xea>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	442b      	add	r3, r5
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	bb62      	cbnz	r2, 8006004 <_malloc_r+0xdc>
 8005faa:	f8c8 7000 	str.w	r7, [r8]
 8005fae:	e00f      	b.n	8005fd0 <_malloc_r+0xa8>
 8005fb0:	6822      	ldr	r2, [r4, #0]
 8005fb2:	1b52      	subs	r2, r2, r5
 8005fb4:	d420      	bmi.n	8005ff8 <_malloc_r+0xd0>
 8005fb6:	2a0b      	cmp	r2, #11
 8005fb8:	d917      	bls.n	8005fea <_malloc_r+0xc2>
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	42a3      	cmp	r3, r4
 8005fbe:	6025      	str	r5, [r4, #0]
 8005fc0:	bf18      	it	ne
 8005fc2:	6059      	strne	r1, [r3, #4]
 8005fc4:	6863      	ldr	r3, [r4, #4]
 8005fc6:	bf08      	it	eq
 8005fc8:	f8c8 1000 	streq.w	r1, [r8]
 8005fcc:	5162      	str	r2, [r4, r5]
 8005fce:	604b      	str	r3, [r1, #4]
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f82f 	bl	8006034 <__malloc_unlock>
 8005fd6:	f104 000b 	add.w	r0, r4, #11
 8005fda:	1d23      	adds	r3, r4, #4
 8005fdc:	f020 0007 	bic.w	r0, r0, #7
 8005fe0:	1ac2      	subs	r2, r0, r3
 8005fe2:	bf1c      	itt	ne
 8005fe4:	1a1b      	subne	r3, r3, r0
 8005fe6:	50a3      	strne	r3, [r4, r2]
 8005fe8:	e7af      	b.n	8005f4a <_malloc_r+0x22>
 8005fea:	6862      	ldr	r2, [r4, #4]
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	bf0c      	ite	eq
 8005ff0:	f8c8 2000 	streq.w	r2, [r8]
 8005ff4:	605a      	strne	r2, [r3, #4]
 8005ff6:	e7eb      	b.n	8005fd0 <_malloc_r+0xa8>
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	6864      	ldr	r4, [r4, #4]
 8005ffc:	e7ae      	b.n	8005f5c <_malloc_r+0x34>
 8005ffe:	463c      	mov	r4, r7
 8006000:	687f      	ldr	r7, [r7, #4]
 8006002:	e7b6      	b.n	8005f72 <_malloc_r+0x4a>
 8006004:	461a      	mov	r2, r3
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	42a3      	cmp	r3, r4
 800600a:	d1fb      	bne.n	8006004 <_malloc_r+0xdc>
 800600c:	2300      	movs	r3, #0
 800600e:	6053      	str	r3, [r2, #4]
 8006010:	e7de      	b.n	8005fd0 <_malloc_r+0xa8>
 8006012:	230c      	movs	r3, #12
 8006014:	6033      	str	r3, [r6, #0]
 8006016:	4630      	mov	r0, r6
 8006018:	f000 f80c 	bl	8006034 <__malloc_unlock>
 800601c:	e794      	b.n	8005f48 <_malloc_r+0x20>
 800601e:	6005      	str	r5, [r0, #0]
 8006020:	e7d6      	b.n	8005fd0 <_malloc_r+0xa8>
 8006022:	bf00      	nop
 8006024:	20002364 	.word	0x20002364

08006028 <__malloc_lock>:
 8006028:	4801      	ldr	r0, [pc, #4]	@ (8006030 <__malloc_lock+0x8>)
 800602a:	f7ff beda 	b.w	8005de2 <__retarget_lock_acquire_recursive>
 800602e:	bf00      	nop
 8006030:	2000235c 	.word	0x2000235c

08006034 <__malloc_unlock>:
 8006034:	4801      	ldr	r0, [pc, #4]	@ (800603c <__malloc_unlock+0x8>)
 8006036:	f7ff bed5 	b.w	8005de4 <__retarget_lock_release_recursive>
 800603a:	bf00      	nop
 800603c:	2000235c 	.word	0x2000235c

08006040 <__sflush_r>:
 8006040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006048:	0716      	lsls	r6, r2, #28
 800604a:	4605      	mov	r5, r0
 800604c:	460c      	mov	r4, r1
 800604e:	d454      	bmi.n	80060fa <__sflush_r+0xba>
 8006050:	684b      	ldr	r3, [r1, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	dc02      	bgt.n	800605c <__sflush_r+0x1c>
 8006056:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	dd48      	ble.n	80060ee <__sflush_r+0xae>
 800605c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800605e:	2e00      	cmp	r6, #0
 8006060:	d045      	beq.n	80060ee <__sflush_r+0xae>
 8006062:	2300      	movs	r3, #0
 8006064:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006068:	682f      	ldr	r7, [r5, #0]
 800606a:	6a21      	ldr	r1, [r4, #32]
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	d030      	beq.n	80060d2 <__sflush_r+0x92>
 8006070:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	0759      	lsls	r1, r3, #29
 8006076:	d505      	bpl.n	8006084 <__sflush_r+0x44>
 8006078:	6863      	ldr	r3, [r4, #4]
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800607e:	b10b      	cbz	r3, 8006084 <__sflush_r+0x44>
 8006080:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006082:	1ad2      	subs	r2, r2, r3
 8006084:	2300      	movs	r3, #0
 8006086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006088:	6a21      	ldr	r1, [r4, #32]
 800608a:	4628      	mov	r0, r5
 800608c:	47b0      	blx	r6
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	d106      	bne.n	80060a2 <__sflush_r+0x62>
 8006094:	6829      	ldr	r1, [r5, #0]
 8006096:	291d      	cmp	r1, #29
 8006098:	d82b      	bhi.n	80060f2 <__sflush_r+0xb2>
 800609a:	4a2a      	ldr	r2, [pc, #168]	@ (8006144 <__sflush_r+0x104>)
 800609c:	410a      	asrs	r2, r1
 800609e:	07d6      	lsls	r6, r2, #31
 80060a0:	d427      	bmi.n	80060f2 <__sflush_r+0xb2>
 80060a2:	2200      	movs	r2, #0
 80060a4:	6062      	str	r2, [r4, #4]
 80060a6:	04d9      	lsls	r1, r3, #19
 80060a8:	6922      	ldr	r2, [r4, #16]
 80060aa:	6022      	str	r2, [r4, #0]
 80060ac:	d504      	bpl.n	80060b8 <__sflush_r+0x78>
 80060ae:	1c42      	adds	r2, r0, #1
 80060b0:	d101      	bne.n	80060b6 <__sflush_r+0x76>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	b903      	cbnz	r3, 80060b8 <__sflush_r+0x78>
 80060b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80060b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ba:	602f      	str	r7, [r5, #0]
 80060bc:	b1b9      	cbz	r1, 80060ee <__sflush_r+0xae>
 80060be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060c2:	4299      	cmp	r1, r3
 80060c4:	d002      	beq.n	80060cc <__sflush_r+0x8c>
 80060c6:	4628      	mov	r0, r5
 80060c8:	f7ff feba 	bl	8005e40 <_free_r>
 80060cc:	2300      	movs	r3, #0
 80060ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80060d0:	e00d      	b.n	80060ee <__sflush_r+0xae>
 80060d2:	2301      	movs	r3, #1
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b0      	blx	r6
 80060d8:	4602      	mov	r2, r0
 80060da:	1c50      	adds	r0, r2, #1
 80060dc:	d1c9      	bne.n	8006072 <__sflush_r+0x32>
 80060de:	682b      	ldr	r3, [r5, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0c6      	beq.n	8006072 <__sflush_r+0x32>
 80060e4:	2b1d      	cmp	r3, #29
 80060e6:	d001      	beq.n	80060ec <__sflush_r+0xac>
 80060e8:	2b16      	cmp	r3, #22
 80060ea:	d11e      	bne.n	800612a <__sflush_r+0xea>
 80060ec:	602f      	str	r7, [r5, #0]
 80060ee:	2000      	movs	r0, #0
 80060f0:	e022      	b.n	8006138 <__sflush_r+0xf8>
 80060f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f6:	b21b      	sxth	r3, r3
 80060f8:	e01b      	b.n	8006132 <__sflush_r+0xf2>
 80060fa:	690f      	ldr	r7, [r1, #16]
 80060fc:	2f00      	cmp	r7, #0
 80060fe:	d0f6      	beq.n	80060ee <__sflush_r+0xae>
 8006100:	0793      	lsls	r3, r2, #30
 8006102:	680e      	ldr	r6, [r1, #0]
 8006104:	bf08      	it	eq
 8006106:	694b      	ldreq	r3, [r1, #20]
 8006108:	600f      	str	r7, [r1, #0]
 800610a:	bf18      	it	ne
 800610c:	2300      	movne	r3, #0
 800610e:	eba6 0807 	sub.w	r8, r6, r7
 8006112:	608b      	str	r3, [r1, #8]
 8006114:	f1b8 0f00 	cmp.w	r8, #0
 8006118:	dde9      	ble.n	80060ee <__sflush_r+0xae>
 800611a:	6a21      	ldr	r1, [r4, #32]
 800611c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800611e:	4643      	mov	r3, r8
 8006120:	463a      	mov	r2, r7
 8006122:	4628      	mov	r0, r5
 8006124:	47b0      	blx	r6
 8006126:	2800      	cmp	r0, #0
 8006128:	dc08      	bgt.n	800613c <__sflush_r+0xfc>
 800612a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800612e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800613c:	4407      	add	r7, r0
 800613e:	eba8 0800 	sub.w	r8, r8, r0
 8006142:	e7e7      	b.n	8006114 <__sflush_r+0xd4>
 8006144:	dfbffffe 	.word	0xdfbffffe

08006148 <_fflush_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	690b      	ldr	r3, [r1, #16]
 800614c:	4605      	mov	r5, r0
 800614e:	460c      	mov	r4, r1
 8006150:	b913      	cbnz	r3, 8006158 <_fflush_r+0x10>
 8006152:	2500      	movs	r5, #0
 8006154:	4628      	mov	r0, r5
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	b118      	cbz	r0, 8006162 <_fflush_r+0x1a>
 800615a:	6a03      	ldr	r3, [r0, #32]
 800615c:	b90b      	cbnz	r3, 8006162 <_fflush_r+0x1a>
 800615e:	f7ff fd3b 	bl	8005bd8 <__sinit>
 8006162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f3      	beq.n	8006152 <_fflush_r+0xa>
 800616a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800616c:	07d0      	lsls	r0, r2, #31
 800616e:	d404      	bmi.n	800617a <_fflush_r+0x32>
 8006170:	0599      	lsls	r1, r3, #22
 8006172:	d402      	bmi.n	800617a <_fflush_r+0x32>
 8006174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006176:	f7ff fe34 	bl	8005de2 <__retarget_lock_acquire_recursive>
 800617a:	4628      	mov	r0, r5
 800617c:	4621      	mov	r1, r4
 800617e:	f7ff ff5f 	bl	8006040 <__sflush_r>
 8006182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006184:	07da      	lsls	r2, r3, #31
 8006186:	4605      	mov	r5, r0
 8006188:	d4e4      	bmi.n	8006154 <_fflush_r+0xc>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	059b      	lsls	r3, r3, #22
 800618e:	d4e1      	bmi.n	8006154 <_fflush_r+0xc>
 8006190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006192:	f7ff fe27 	bl	8005de4 <__retarget_lock_release_recursive>
 8006196:	e7dd      	b.n	8006154 <_fflush_r+0xc>

08006198 <fiprintf>:
 8006198:	b40e      	push	{r1, r2, r3}
 800619a:	b503      	push	{r0, r1, lr}
 800619c:	4601      	mov	r1, r0
 800619e:	ab03      	add	r3, sp, #12
 80061a0:	4805      	ldr	r0, [pc, #20]	@ (80061b8 <fiprintf+0x20>)
 80061a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	f000 f847 	bl	800623c <_vfiprintf_r>
 80061ae:	b002      	add	sp, #8
 80061b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061b4:	b003      	add	sp, #12
 80061b6:	4770      	bx	lr
 80061b8:	2000003c 	.word	0x2000003c

080061bc <_sbrk_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d06      	ldr	r5, [pc, #24]	@ (80061d8 <_sbrk_r+0x1c>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fb fdd6 	bl	8001d78 <_sbrk>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_sbrk_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_sbrk_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20002358 	.word	0x20002358

080061dc <abort>:
 80061dc:	b508      	push	{r3, lr}
 80061de:	2006      	movs	r0, #6
 80061e0:	f000 fb8e 	bl	8006900 <raise>
 80061e4:	2001      	movs	r0, #1
 80061e6:	f7fb fd4f 	bl	8001c88 <_exit>

080061ea <__sfputc_r>:
 80061ea:	6893      	ldr	r3, [r2, #8]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	b410      	push	{r4}
 80061f2:	6093      	str	r3, [r2, #8]
 80061f4:	da08      	bge.n	8006208 <__sfputc_r+0x1e>
 80061f6:	6994      	ldr	r4, [r2, #24]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	db01      	blt.n	8006200 <__sfputc_r+0x16>
 80061fc:	290a      	cmp	r1, #10
 80061fe:	d103      	bne.n	8006208 <__sfputc_r+0x1e>
 8006200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006204:	f000 bac0 	b.w	8006788 <__swbuf_r>
 8006208:	6813      	ldr	r3, [r2, #0]
 800620a:	1c58      	adds	r0, r3, #1
 800620c:	6010      	str	r0, [r2, #0]
 800620e:	7019      	strb	r1, [r3, #0]
 8006210:	4608      	mov	r0, r1
 8006212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006216:	4770      	bx	lr

08006218 <__sfputs_r>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	4606      	mov	r6, r0
 800621c:	460f      	mov	r7, r1
 800621e:	4614      	mov	r4, r2
 8006220:	18d5      	adds	r5, r2, r3
 8006222:	42ac      	cmp	r4, r5
 8006224:	d101      	bne.n	800622a <__sfputs_r+0x12>
 8006226:	2000      	movs	r0, #0
 8006228:	e007      	b.n	800623a <__sfputs_r+0x22>
 800622a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622e:	463a      	mov	r2, r7
 8006230:	4630      	mov	r0, r6
 8006232:	f7ff ffda 	bl	80061ea <__sfputc_r>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d1f3      	bne.n	8006222 <__sfputs_r+0xa>
 800623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800623c <_vfiprintf_r>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	460d      	mov	r5, r1
 8006242:	b09d      	sub	sp, #116	@ 0x74
 8006244:	4614      	mov	r4, r2
 8006246:	4698      	mov	r8, r3
 8006248:	4606      	mov	r6, r0
 800624a:	b118      	cbz	r0, 8006254 <_vfiprintf_r+0x18>
 800624c:	6a03      	ldr	r3, [r0, #32]
 800624e:	b90b      	cbnz	r3, 8006254 <_vfiprintf_r+0x18>
 8006250:	f7ff fcc2 	bl	8005bd8 <__sinit>
 8006254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006256:	07d9      	lsls	r1, r3, #31
 8006258:	d405      	bmi.n	8006266 <_vfiprintf_r+0x2a>
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	059a      	lsls	r2, r3, #22
 800625e:	d402      	bmi.n	8006266 <_vfiprintf_r+0x2a>
 8006260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006262:	f7ff fdbe 	bl	8005de2 <__retarget_lock_acquire_recursive>
 8006266:	89ab      	ldrh	r3, [r5, #12]
 8006268:	071b      	lsls	r3, r3, #28
 800626a:	d501      	bpl.n	8006270 <_vfiprintf_r+0x34>
 800626c:	692b      	ldr	r3, [r5, #16]
 800626e:	b99b      	cbnz	r3, 8006298 <_vfiprintf_r+0x5c>
 8006270:	4629      	mov	r1, r5
 8006272:	4630      	mov	r0, r6
 8006274:	f000 fac6 	bl	8006804 <__swsetup_r>
 8006278:	b170      	cbz	r0, 8006298 <_vfiprintf_r+0x5c>
 800627a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800627c:	07dc      	lsls	r4, r3, #31
 800627e:	d504      	bpl.n	800628a <_vfiprintf_r+0x4e>
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	b01d      	add	sp, #116	@ 0x74
 8006286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	0598      	lsls	r0, r3, #22
 800628e:	d4f7      	bmi.n	8006280 <_vfiprintf_r+0x44>
 8006290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006292:	f7ff fda7 	bl	8005de4 <__retarget_lock_release_recursive>
 8006296:	e7f3      	b.n	8006280 <_vfiprintf_r+0x44>
 8006298:	2300      	movs	r3, #0
 800629a:	9309      	str	r3, [sp, #36]	@ 0x24
 800629c:	2320      	movs	r3, #32
 800629e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062a6:	2330      	movs	r3, #48	@ 0x30
 80062a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006458 <_vfiprintf_r+0x21c>
 80062ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062b0:	f04f 0901 	mov.w	r9, #1
 80062b4:	4623      	mov	r3, r4
 80062b6:	469a      	mov	sl, r3
 80062b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062bc:	b10a      	cbz	r2, 80062c2 <_vfiprintf_r+0x86>
 80062be:	2a25      	cmp	r2, #37	@ 0x25
 80062c0:	d1f9      	bne.n	80062b6 <_vfiprintf_r+0x7a>
 80062c2:	ebba 0b04 	subs.w	fp, sl, r4
 80062c6:	d00b      	beq.n	80062e0 <_vfiprintf_r+0xa4>
 80062c8:	465b      	mov	r3, fp
 80062ca:	4622      	mov	r2, r4
 80062cc:	4629      	mov	r1, r5
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7ff ffa2 	bl	8006218 <__sfputs_r>
 80062d4:	3001      	adds	r0, #1
 80062d6:	f000 80a7 	beq.w	8006428 <_vfiprintf_r+0x1ec>
 80062da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062dc:	445a      	add	r2, fp
 80062de:	9209      	str	r2, [sp, #36]	@ 0x24
 80062e0:	f89a 3000 	ldrb.w	r3, [sl]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 809f 	beq.w	8006428 <_vfiprintf_r+0x1ec>
 80062ea:	2300      	movs	r3, #0
 80062ec:	f04f 32ff 	mov.w	r2, #4294967295
 80062f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f4:	f10a 0a01 	add.w	sl, sl, #1
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	9307      	str	r3, [sp, #28]
 80062fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006300:	931a      	str	r3, [sp, #104]	@ 0x68
 8006302:	4654      	mov	r4, sl
 8006304:	2205      	movs	r2, #5
 8006306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630a:	4853      	ldr	r0, [pc, #332]	@ (8006458 <_vfiprintf_r+0x21c>)
 800630c:	f7f9 ff68 	bl	80001e0 <memchr>
 8006310:	9a04      	ldr	r2, [sp, #16]
 8006312:	b9d8      	cbnz	r0, 800634c <_vfiprintf_r+0x110>
 8006314:	06d1      	lsls	r1, r2, #27
 8006316:	bf44      	itt	mi
 8006318:	2320      	movmi	r3, #32
 800631a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800631e:	0713      	lsls	r3, r2, #28
 8006320:	bf44      	itt	mi
 8006322:	232b      	movmi	r3, #43	@ 0x2b
 8006324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006328:	f89a 3000 	ldrb.w	r3, [sl]
 800632c:	2b2a      	cmp	r3, #42	@ 0x2a
 800632e:	d015      	beq.n	800635c <_vfiprintf_r+0x120>
 8006330:	9a07      	ldr	r2, [sp, #28]
 8006332:	4654      	mov	r4, sl
 8006334:	2000      	movs	r0, #0
 8006336:	f04f 0c0a 	mov.w	ip, #10
 800633a:	4621      	mov	r1, r4
 800633c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006340:	3b30      	subs	r3, #48	@ 0x30
 8006342:	2b09      	cmp	r3, #9
 8006344:	d94b      	bls.n	80063de <_vfiprintf_r+0x1a2>
 8006346:	b1b0      	cbz	r0, 8006376 <_vfiprintf_r+0x13a>
 8006348:	9207      	str	r2, [sp, #28]
 800634a:	e014      	b.n	8006376 <_vfiprintf_r+0x13a>
 800634c:	eba0 0308 	sub.w	r3, r0, r8
 8006350:	fa09 f303 	lsl.w	r3, r9, r3
 8006354:	4313      	orrs	r3, r2
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	46a2      	mov	sl, r4
 800635a:	e7d2      	b.n	8006302 <_vfiprintf_r+0xc6>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	1d19      	adds	r1, r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	9103      	str	r1, [sp, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfbb      	ittet	lt
 8006368:	425b      	neglt	r3, r3
 800636a:	f042 0202 	orrlt.w	r2, r2, #2
 800636e:	9307      	strge	r3, [sp, #28]
 8006370:	9307      	strlt	r3, [sp, #28]
 8006372:	bfb8      	it	lt
 8006374:	9204      	strlt	r2, [sp, #16]
 8006376:	7823      	ldrb	r3, [r4, #0]
 8006378:	2b2e      	cmp	r3, #46	@ 0x2e
 800637a:	d10a      	bne.n	8006392 <_vfiprintf_r+0x156>
 800637c:	7863      	ldrb	r3, [r4, #1]
 800637e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006380:	d132      	bne.n	80063e8 <_vfiprintf_r+0x1ac>
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	9203      	str	r2, [sp, #12]
 800638a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800638e:	3402      	adds	r4, #2
 8006390:	9305      	str	r3, [sp, #20]
 8006392:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006468 <_vfiprintf_r+0x22c>
 8006396:	7821      	ldrb	r1, [r4, #0]
 8006398:	2203      	movs	r2, #3
 800639a:	4650      	mov	r0, sl
 800639c:	f7f9 ff20 	bl	80001e0 <memchr>
 80063a0:	b138      	cbz	r0, 80063b2 <_vfiprintf_r+0x176>
 80063a2:	9b04      	ldr	r3, [sp, #16]
 80063a4:	eba0 000a 	sub.w	r0, r0, sl
 80063a8:	2240      	movs	r2, #64	@ 0x40
 80063aa:	4082      	lsls	r2, r0
 80063ac:	4313      	orrs	r3, r2
 80063ae:	3401      	adds	r4, #1
 80063b0:	9304      	str	r3, [sp, #16]
 80063b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b6:	4829      	ldr	r0, [pc, #164]	@ (800645c <_vfiprintf_r+0x220>)
 80063b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063bc:	2206      	movs	r2, #6
 80063be:	f7f9 ff0f 	bl	80001e0 <memchr>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d03f      	beq.n	8006446 <_vfiprintf_r+0x20a>
 80063c6:	4b26      	ldr	r3, [pc, #152]	@ (8006460 <_vfiprintf_r+0x224>)
 80063c8:	bb1b      	cbnz	r3, 8006412 <_vfiprintf_r+0x1d6>
 80063ca:	9b03      	ldr	r3, [sp, #12]
 80063cc:	3307      	adds	r3, #7
 80063ce:	f023 0307 	bic.w	r3, r3, #7
 80063d2:	3308      	adds	r3, #8
 80063d4:	9303      	str	r3, [sp, #12]
 80063d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d8:	443b      	add	r3, r7
 80063da:	9309      	str	r3, [sp, #36]	@ 0x24
 80063dc:	e76a      	b.n	80062b4 <_vfiprintf_r+0x78>
 80063de:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e2:	460c      	mov	r4, r1
 80063e4:	2001      	movs	r0, #1
 80063e6:	e7a8      	b.n	800633a <_vfiprintf_r+0xfe>
 80063e8:	2300      	movs	r3, #0
 80063ea:	3401      	adds	r4, #1
 80063ec:	9305      	str	r3, [sp, #20]
 80063ee:	4619      	mov	r1, r3
 80063f0:	f04f 0c0a 	mov.w	ip, #10
 80063f4:	4620      	mov	r0, r4
 80063f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063fa:	3a30      	subs	r2, #48	@ 0x30
 80063fc:	2a09      	cmp	r2, #9
 80063fe:	d903      	bls.n	8006408 <_vfiprintf_r+0x1cc>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0c6      	beq.n	8006392 <_vfiprintf_r+0x156>
 8006404:	9105      	str	r1, [sp, #20]
 8006406:	e7c4      	b.n	8006392 <_vfiprintf_r+0x156>
 8006408:	fb0c 2101 	mla	r1, ip, r1, r2
 800640c:	4604      	mov	r4, r0
 800640e:	2301      	movs	r3, #1
 8006410:	e7f0      	b.n	80063f4 <_vfiprintf_r+0x1b8>
 8006412:	ab03      	add	r3, sp, #12
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	462a      	mov	r2, r5
 8006418:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <_vfiprintf_r+0x228>)
 800641a:	a904      	add	r1, sp, #16
 800641c:	4630      	mov	r0, r6
 800641e:	f3af 8000 	nop.w
 8006422:	4607      	mov	r7, r0
 8006424:	1c78      	adds	r0, r7, #1
 8006426:	d1d6      	bne.n	80063d6 <_vfiprintf_r+0x19a>
 8006428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800642a:	07d9      	lsls	r1, r3, #31
 800642c:	d405      	bmi.n	800643a <_vfiprintf_r+0x1fe>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	059a      	lsls	r2, r3, #22
 8006432:	d402      	bmi.n	800643a <_vfiprintf_r+0x1fe>
 8006434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006436:	f7ff fcd5 	bl	8005de4 <__retarget_lock_release_recursive>
 800643a:	89ab      	ldrh	r3, [r5, #12]
 800643c:	065b      	lsls	r3, r3, #25
 800643e:	f53f af1f 	bmi.w	8006280 <_vfiprintf_r+0x44>
 8006442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006444:	e71e      	b.n	8006284 <_vfiprintf_r+0x48>
 8006446:	ab03      	add	r3, sp, #12
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	462a      	mov	r2, r5
 800644c:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <_vfiprintf_r+0x228>)
 800644e:	a904      	add	r1, sp, #16
 8006450:	4630      	mov	r0, r6
 8006452:	f000 f879 	bl	8006548 <_printf_i>
 8006456:	e7e4      	b.n	8006422 <_vfiprintf_r+0x1e6>
 8006458:	08006df3 	.word	0x08006df3
 800645c:	08006dfd 	.word	0x08006dfd
 8006460:	00000000 	.word	0x00000000
 8006464:	08006219 	.word	0x08006219
 8006468:	08006df9 	.word	0x08006df9

0800646c <_printf_common>:
 800646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	4616      	mov	r6, r2
 8006472:	4698      	mov	r8, r3
 8006474:	688a      	ldr	r2, [r1, #8]
 8006476:	690b      	ldr	r3, [r1, #16]
 8006478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800647c:	4293      	cmp	r3, r2
 800647e:	bfb8      	it	lt
 8006480:	4613      	movlt	r3, r2
 8006482:	6033      	str	r3, [r6, #0]
 8006484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006488:	4607      	mov	r7, r0
 800648a:	460c      	mov	r4, r1
 800648c:	b10a      	cbz	r2, 8006492 <_printf_common+0x26>
 800648e:	3301      	adds	r3, #1
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	0699      	lsls	r1, r3, #26
 8006496:	bf42      	ittt	mi
 8006498:	6833      	ldrmi	r3, [r6, #0]
 800649a:	3302      	addmi	r3, #2
 800649c:	6033      	strmi	r3, [r6, #0]
 800649e:	6825      	ldr	r5, [r4, #0]
 80064a0:	f015 0506 	ands.w	r5, r5, #6
 80064a4:	d106      	bne.n	80064b4 <_printf_common+0x48>
 80064a6:	f104 0a19 	add.w	sl, r4, #25
 80064aa:	68e3      	ldr	r3, [r4, #12]
 80064ac:	6832      	ldr	r2, [r6, #0]
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	42ab      	cmp	r3, r5
 80064b2:	dc26      	bgt.n	8006502 <_printf_common+0x96>
 80064b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	3b00      	subs	r3, #0
 80064bc:	bf18      	it	ne
 80064be:	2301      	movne	r3, #1
 80064c0:	0692      	lsls	r2, r2, #26
 80064c2:	d42b      	bmi.n	800651c <_printf_common+0xb0>
 80064c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064c8:	4641      	mov	r1, r8
 80064ca:	4638      	mov	r0, r7
 80064cc:	47c8      	blx	r9
 80064ce:	3001      	adds	r0, #1
 80064d0:	d01e      	beq.n	8006510 <_printf_common+0xa4>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	6922      	ldr	r2, [r4, #16]
 80064d6:	f003 0306 	and.w	r3, r3, #6
 80064da:	2b04      	cmp	r3, #4
 80064dc:	bf02      	ittt	eq
 80064de:	68e5      	ldreq	r5, [r4, #12]
 80064e0:	6833      	ldreq	r3, [r6, #0]
 80064e2:	1aed      	subeq	r5, r5, r3
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	bf0c      	ite	eq
 80064e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064ec:	2500      	movne	r5, #0
 80064ee:	4293      	cmp	r3, r2
 80064f0:	bfc4      	itt	gt
 80064f2:	1a9b      	subgt	r3, r3, r2
 80064f4:	18ed      	addgt	r5, r5, r3
 80064f6:	2600      	movs	r6, #0
 80064f8:	341a      	adds	r4, #26
 80064fa:	42b5      	cmp	r5, r6
 80064fc:	d11a      	bne.n	8006534 <_printf_common+0xc8>
 80064fe:	2000      	movs	r0, #0
 8006500:	e008      	b.n	8006514 <_printf_common+0xa8>
 8006502:	2301      	movs	r3, #1
 8006504:	4652      	mov	r2, sl
 8006506:	4641      	mov	r1, r8
 8006508:	4638      	mov	r0, r7
 800650a:	47c8      	blx	r9
 800650c:	3001      	adds	r0, #1
 800650e:	d103      	bne.n	8006518 <_printf_common+0xac>
 8006510:	f04f 30ff 	mov.w	r0, #4294967295
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006518:	3501      	adds	r5, #1
 800651a:	e7c6      	b.n	80064aa <_printf_common+0x3e>
 800651c:	18e1      	adds	r1, r4, r3
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	2030      	movs	r0, #48	@ 0x30
 8006522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006526:	4422      	add	r2, r4
 8006528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800652c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006530:	3302      	adds	r3, #2
 8006532:	e7c7      	b.n	80064c4 <_printf_common+0x58>
 8006534:	2301      	movs	r3, #1
 8006536:	4622      	mov	r2, r4
 8006538:	4641      	mov	r1, r8
 800653a:	4638      	mov	r0, r7
 800653c:	47c8      	blx	r9
 800653e:	3001      	adds	r0, #1
 8006540:	d0e6      	beq.n	8006510 <_printf_common+0xa4>
 8006542:	3601      	adds	r6, #1
 8006544:	e7d9      	b.n	80064fa <_printf_common+0x8e>
	...

08006548 <_printf_i>:
 8006548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	7e0f      	ldrb	r7, [r1, #24]
 800654e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006550:	2f78      	cmp	r7, #120	@ 0x78
 8006552:	4691      	mov	r9, r2
 8006554:	4680      	mov	r8, r0
 8006556:	460c      	mov	r4, r1
 8006558:	469a      	mov	sl, r3
 800655a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800655e:	d807      	bhi.n	8006570 <_printf_i+0x28>
 8006560:	2f62      	cmp	r7, #98	@ 0x62
 8006562:	d80a      	bhi.n	800657a <_printf_i+0x32>
 8006564:	2f00      	cmp	r7, #0
 8006566:	f000 80d2 	beq.w	800670e <_printf_i+0x1c6>
 800656a:	2f58      	cmp	r7, #88	@ 0x58
 800656c:	f000 80b9 	beq.w	80066e2 <_printf_i+0x19a>
 8006570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006578:	e03a      	b.n	80065f0 <_printf_i+0xa8>
 800657a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800657e:	2b15      	cmp	r3, #21
 8006580:	d8f6      	bhi.n	8006570 <_printf_i+0x28>
 8006582:	a101      	add	r1, pc, #4	@ (adr r1, 8006588 <_printf_i+0x40>)
 8006584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006588:	080065e1 	.word	0x080065e1
 800658c:	080065f5 	.word	0x080065f5
 8006590:	08006571 	.word	0x08006571
 8006594:	08006571 	.word	0x08006571
 8006598:	08006571 	.word	0x08006571
 800659c:	08006571 	.word	0x08006571
 80065a0:	080065f5 	.word	0x080065f5
 80065a4:	08006571 	.word	0x08006571
 80065a8:	08006571 	.word	0x08006571
 80065ac:	08006571 	.word	0x08006571
 80065b0:	08006571 	.word	0x08006571
 80065b4:	080066f5 	.word	0x080066f5
 80065b8:	0800661f 	.word	0x0800661f
 80065bc:	080066af 	.word	0x080066af
 80065c0:	08006571 	.word	0x08006571
 80065c4:	08006571 	.word	0x08006571
 80065c8:	08006717 	.word	0x08006717
 80065cc:	08006571 	.word	0x08006571
 80065d0:	0800661f 	.word	0x0800661f
 80065d4:	08006571 	.word	0x08006571
 80065d8:	08006571 	.word	0x08006571
 80065dc:	080066b7 	.word	0x080066b7
 80065e0:	6833      	ldr	r3, [r6, #0]
 80065e2:	1d1a      	adds	r2, r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6032      	str	r2, [r6, #0]
 80065e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065f0:	2301      	movs	r3, #1
 80065f2:	e09d      	b.n	8006730 <_printf_i+0x1e8>
 80065f4:	6833      	ldr	r3, [r6, #0]
 80065f6:	6820      	ldr	r0, [r4, #0]
 80065f8:	1d19      	adds	r1, r3, #4
 80065fa:	6031      	str	r1, [r6, #0]
 80065fc:	0606      	lsls	r6, r0, #24
 80065fe:	d501      	bpl.n	8006604 <_printf_i+0xbc>
 8006600:	681d      	ldr	r5, [r3, #0]
 8006602:	e003      	b.n	800660c <_printf_i+0xc4>
 8006604:	0645      	lsls	r5, r0, #25
 8006606:	d5fb      	bpl.n	8006600 <_printf_i+0xb8>
 8006608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800660c:	2d00      	cmp	r5, #0
 800660e:	da03      	bge.n	8006618 <_printf_i+0xd0>
 8006610:	232d      	movs	r3, #45	@ 0x2d
 8006612:	426d      	negs	r5, r5
 8006614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006618:	4859      	ldr	r0, [pc, #356]	@ (8006780 <_printf_i+0x238>)
 800661a:	230a      	movs	r3, #10
 800661c:	e011      	b.n	8006642 <_printf_i+0xfa>
 800661e:	6821      	ldr	r1, [r4, #0]
 8006620:	6833      	ldr	r3, [r6, #0]
 8006622:	0608      	lsls	r0, r1, #24
 8006624:	f853 5b04 	ldr.w	r5, [r3], #4
 8006628:	d402      	bmi.n	8006630 <_printf_i+0xe8>
 800662a:	0649      	lsls	r1, r1, #25
 800662c:	bf48      	it	mi
 800662e:	b2ad      	uxthmi	r5, r5
 8006630:	2f6f      	cmp	r7, #111	@ 0x6f
 8006632:	4853      	ldr	r0, [pc, #332]	@ (8006780 <_printf_i+0x238>)
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	bf14      	ite	ne
 8006638:	230a      	movne	r3, #10
 800663a:	2308      	moveq	r3, #8
 800663c:	2100      	movs	r1, #0
 800663e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006642:	6866      	ldr	r6, [r4, #4]
 8006644:	60a6      	str	r6, [r4, #8]
 8006646:	2e00      	cmp	r6, #0
 8006648:	bfa2      	ittt	ge
 800664a:	6821      	ldrge	r1, [r4, #0]
 800664c:	f021 0104 	bicge.w	r1, r1, #4
 8006650:	6021      	strge	r1, [r4, #0]
 8006652:	b90d      	cbnz	r5, 8006658 <_printf_i+0x110>
 8006654:	2e00      	cmp	r6, #0
 8006656:	d04b      	beq.n	80066f0 <_printf_i+0x1a8>
 8006658:	4616      	mov	r6, r2
 800665a:	fbb5 f1f3 	udiv	r1, r5, r3
 800665e:	fb03 5711 	mls	r7, r3, r1, r5
 8006662:	5dc7      	ldrb	r7, [r0, r7]
 8006664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006668:	462f      	mov	r7, r5
 800666a:	42bb      	cmp	r3, r7
 800666c:	460d      	mov	r5, r1
 800666e:	d9f4      	bls.n	800665a <_printf_i+0x112>
 8006670:	2b08      	cmp	r3, #8
 8006672:	d10b      	bne.n	800668c <_printf_i+0x144>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	07df      	lsls	r7, r3, #31
 8006678:	d508      	bpl.n	800668c <_printf_i+0x144>
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	6861      	ldr	r1, [r4, #4]
 800667e:	4299      	cmp	r1, r3
 8006680:	bfde      	ittt	le
 8006682:	2330      	movle	r3, #48	@ 0x30
 8006684:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006688:	f106 36ff 	addle.w	r6, r6, #4294967295
 800668c:	1b92      	subs	r2, r2, r6
 800668e:	6122      	str	r2, [r4, #16]
 8006690:	f8cd a000 	str.w	sl, [sp]
 8006694:	464b      	mov	r3, r9
 8006696:	aa03      	add	r2, sp, #12
 8006698:	4621      	mov	r1, r4
 800669a:	4640      	mov	r0, r8
 800669c:	f7ff fee6 	bl	800646c <_printf_common>
 80066a0:	3001      	adds	r0, #1
 80066a2:	d14a      	bne.n	800673a <_printf_i+0x1f2>
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	b004      	add	sp, #16
 80066aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f043 0320 	orr.w	r3, r3, #32
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	4833      	ldr	r0, [pc, #204]	@ (8006784 <_printf_i+0x23c>)
 80066b8:	2778      	movs	r7, #120	@ 0x78
 80066ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	6831      	ldr	r1, [r6, #0]
 80066c2:	061f      	lsls	r7, r3, #24
 80066c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80066c8:	d402      	bmi.n	80066d0 <_printf_i+0x188>
 80066ca:	065f      	lsls	r7, r3, #25
 80066cc:	bf48      	it	mi
 80066ce:	b2ad      	uxthmi	r5, r5
 80066d0:	6031      	str	r1, [r6, #0]
 80066d2:	07d9      	lsls	r1, r3, #31
 80066d4:	bf44      	itt	mi
 80066d6:	f043 0320 	orrmi.w	r3, r3, #32
 80066da:	6023      	strmi	r3, [r4, #0]
 80066dc:	b11d      	cbz	r5, 80066e6 <_printf_i+0x19e>
 80066de:	2310      	movs	r3, #16
 80066e0:	e7ac      	b.n	800663c <_printf_i+0xf4>
 80066e2:	4827      	ldr	r0, [pc, #156]	@ (8006780 <_printf_i+0x238>)
 80066e4:	e7e9      	b.n	80066ba <_printf_i+0x172>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f023 0320 	bic.w	r3, r3, #32
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	e7f6      	b.n	80066de <_printf_i+0x196>
 80066f0:	4616      	mov	r6, r2
 80066f2:	e7bd      	b.n	8006670 <_printf_i+0x128>
 80066f4:	6833      	ldr	r3, [r6, #0]
 80066f6:	6825      	ldr	r5, [r4, #0]
 80066f8:	6961      	ldr	r1, [r4, #20]
 80066fa:	1d18      	adds	r0, r3, #4
 80066fc:	6030      	str	r0, [r6, #0]
 80066fe:	062e      	lsls	r6, r5, #24
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	d501      	bpl.n	8006708 <_printf_i+0x1c0>
 8006704:	6019      	str	r1, [r3, #0]
 8006706:	e002      	b.n	800670e <_printf_i+0x1c6>
 8006708:	0668      	lsls	r0, r5, #25
 800670a:	d5fb      	bpl.n	8006704 <_printf_i+0x1bc>
 800670c:	8019      	strh	r1, [r3, #0]
 800670e:	2300      	movs	r3, #0
 8006710:	6123      	str	r3, [r4, #16]
 8006712:	4616      	mov	r6, r2
 8006714:	e7bc      	b.n	8006690 <_printf_i+0x148>
 8006716:	6833      	ldr	r3, [r6, #0]
 8006718:	1d1a      	adds	r2, r3, #4
 800671a:	6032      	str	r2, [r6, #0]
 800671c:	681e      	ldr	r6, [r3, #0]
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	2100      	movs	r1, #0
 8006722:	4630      	mov	r0, r6
 8006724:	f7f9 fd5c 	bl	80001e0 <memchr>
 8006728:	b108      	cbz	r0, 800672e <_printf_i+0x1e6>
 800672a:	1b80      	subs	r0, r0, r6
 800672c:	6060      	str	r0, [r4, #4]
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	2300      	movs	r3, #0
 8006734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006738:	e7aa      	b.n	8006690 <_printf_i+0x148>
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	4632      	mov	r2, r6
 800673e:	4649      	mov	r1, r9
 8006740:	4640      	mov	r0, r8
 8006742:	47d0      	blx	sl
 8006744:	3001      	adds	r0, #1
 8006746:	d0ad      	beq.n	80066a4 <_printf_i+0x15c>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	079b      	lsls	r3, r3, #30
 800674c:	d413      	bmi.n	8006776 <_printf_i+0x22e>
 800674e:	68e0      	ldr	r0, [r4, #12]
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	4298      	cmp	r0, r3
 8006754:	bfb8      	it	lt
 8006756:	4618      	movlt	r0, r3
 8006758:	e7a6      	b.n	80066a8 <_printf_i+0x160>
 800675a:	2301      	movs	r3, #1
 800675c:	4632      	mov	r2, r6
 800675e:	4649      	mov	r1, r9
 8006760:	4640      	mov	r0, r8
 8006762:	47d0      	blx	sl
 8006764:	3001      	adds	r0, #1
 8006766:	d09d      	beq.n	80066a4 <_printf_i+0x15c>
 8006768:	3501      	adds	r5, #1
 800676a:	68e3      	ldr	r3, [r4, #12]
 800676c:	9903      	ldr	r1, [sp, #12]
 800676e:	1a5b      	subs	r3, r3, r1
 8006770:	42ab      	cmp	r3, r5
 8006772:	dcf2      	bgt.n	800675a <_printf_i+0x212>
 8006774:	e7eb      	b.n	800674e <_printf_i+0x206>
 8006776:	2500      	movs	r5, #0
 8006778:	f104 0619 	add.w	r6, r4, #25
 800677c:	e7f5      	b.n	800676a <_printf_i+0x222>
 800677e:	bf00      	nop
 8006780:	08006e04 	.word	0x08006e04
 8006784:	08006e15 	.word	0x08006e15

08006788 <__swbuf_r>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	460e      	mov	r6, r1
 800678c:	4614      	mov	r4, r2
 800678e:	4605      	mov	r5, r0
 8006790:	b118      	cbz	r0, 800679a <__swbuf_r+0x12>
 8006792:	6a03      	ldr	r3, [r0, #32]
 8006794:	b90b      	cbnz	r3, 800679a <__swbuf_r+0x12>
 8006796:	f7ff fa1f 	bl	8005bd8 <__sinit>
 800679a:	69a3      	ldr	r3, [r4, #24]
 800679c:	60a3      	str	r3, [r4, #8]
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	071a      	lsls	r2, r3, #28
 80067a2:	d501      	bpl.n	80067a8 <__swbuf_r+0x20>
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	b943      	cbnz	r3, 80067ba <__swbuf_r+0x32>
 80067a8:	4621      	mov	r1, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f82a 	bl	8006804 <__swsetup_r>
 80067b0:	b118      	cbz	r0, 80067ba <__swbuf_r+0x32>
 80067b2:	f04f 37ff 	mov.w	r7, #4294967295
 80067b6:	4638      	mov	r0, r7
 80067b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	6922      	ldr	r2, [r4, #16]
 80067be:	1a98      	subs	r0, r3, r2
 80067c0:	6963      	ldr	r3, [r4, #20]
 80067c2:	b2f6      	uxtb	r6, r6
 80067c4:	4283      	cmp	r3, r0
 80067c6:	4637      	mov	r7, r6
 80067c8:	dc05      	bgt.n	80067d6 <__swbuf_r+0x4e>
 80067ca:	4621      	mov	r1, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	f7ff fcbb 	bl	8006148 <_fflush_r>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d1ed      	bne.n	80067b2 <__swbuf_r+0x2a>
 80067d6:	68a3      	ldr	r3, [r4, #8]
 80067d8:	3b01      	subs	r3, #1
 80067da:	60a3      	str	r3, [r4, #8]
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	6022      	str	r2, [r4, #0]
 80067e2:	701e      	strb	r6, [r3, #0]
 80067e4:	6962      	ldr	r2, [r4, #20]
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d004      	beq.n	80067f6 <__swbuf_r+0x6e>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	07db      	lsls	r3, r3, #31
 80067f0:	d5e1      	bpl.n	80067b6 <__swbuf_r+0x2e>
 80067f2:	2e0a      	cmp	r6, #10
 80067f4:	d1df      	bne.n	80067b6 <__swbuf_r+0x2e>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f7ff fca5 	bl	8006148 <_fflush_r>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d0d9      	beq.n	80067b6 <__swbuf_r+0x2e>
 8006802:	e7d6      	b.n	80067b2 <__swbuf_r+0x2a>

08006804 <__swsetup_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4b29      	ldr	r3, [pc, #164]	@ (80068ac <__swsetup_r+0xa8>)
 8006808:	4605      	mov	r5, r0
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	460c      	mov	r4, r1
 800680e:	b118      	cbz	r0, 8006818 <__swsetup_r+0x14>
 8006810:	6a03      	ldr	r3, [r0, #32]
 8006812:	b90b      	cbnz	r3, 8006818 <__swsetup_r+0x14>
 8006814:	f7ff f9e0 	bl	8005bd8 <__sinit>
 8006818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681c:	0719      	lsls	r1, r3, #28
 800681e:	d422      	bmi.n	8006866 <__swsetup_r+0x62>
 8006820:	06da      	lsls	r2, r3, #27
 8006822:	d407      	bmi.n	8006834 <__swsetup_r+0x30>
 8006824:	2209      	movs	r2, #9
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	e033      	b.n	800689c <__swsetup_r+0x98>
 8006834:	0758      	lsls	r0, r3, #29
 8006836:	d512      	bpl.n	800685e <__swsetup_r+0x5a>
 8006838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800683a:	b141      	cbz	r1, 800684e <__swsetup_r+0x4a>
 800683c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006840:	4299      	cmp	r1, r3
 8006842:	d002      	beq.n	800684a <__swsetup_r+0x46>
 8006844:	4628      	mov	r0, r5
 8006846:	f7ff fafb 	bl	8005e40 <_free_r>
 800684a:	2300      	movs	r3, #0
 800684c:	6363      	str	r3, [r4, #52]	@ 0x34
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	2300      	movs	r3, #0
 8006858:	6063      	str	r3, [r4, #4]
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	f043 0308 	orr.w	r3, r3, #8
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	b94b      	cbnz	r3, 800687e <__swsetup_r+0x7a>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006874:	d003      	beq.n	800687e <__swsetup_r+0x7a>
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f000 f883 	bl	8006984 <__smakebuf_r>
 800687e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006882:	f013 0201 	ands.w	r2, r3, #1
 8006886:	d00a      	beq.n	800689e <__swsetup_r+0x9a>
 8006888:	2200      	movs	r2, #0
 800688a:	60a2      	str	r2, [r4, #8]
 800688c:	6962      	ldr	r2, [r4, #20]
 800688e:	4252      	negs	r2, r2
 8006890:	61a2      	str	r2, [r4, #24]
 8006892:	6922      	ldr	r2, [r4, #16]
 8006894:	b942      	cbnz	r2, 80068a8 <__swsetup_r+0xa4>
 8006896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800689a:	d1c5      	bne.n	8006828 <__swsetup_r+0x24>
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	0799      	lsls	r1, r3, #30
 80068a0:	bf58      	it	pl
 80068a2:	6962      	ldrpl	r2, [r4, #20]
 80068a4:	60a2      	str	r2, [r4, #8]
 80068a6:	e7f4      	b.n	8006892 <__swsetup_r+0x8e>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e7f7      	b.n	800689c <__swsetup_r+0x98>
 80068ac:	2000003c 	.word	0x2000003c

080068b0 <_raise_r>:
 80068b0:	291f      	cmp	r1, #31
 80068b2:	b538      	push	{r3, r4, r5, lr}
 80068b4:	4605      	mov	r5, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	d904      	bls.n	80068c4 <_raise_r+0x14>
 80068ba:	2316      	movs	r3, #22
 80068bc:	6003      	str	r3, [r0, #0]
 80068be:	f04f 30ff 	mov.w	r0, #4294967295
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80068c6:	b112      	cbz	r2, 80068ce <_raise_r+0x1e>
 80068c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068cc:	b94b      	cbnz	r3, 80068e2 <_raise_r+0x32>
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 f830 	bl	8006934 <_getpid_r>
 80068d4:	4622      	mov	r2, r4
 80068d6:	4601      	mov	r1, r0
 80068d8:	4628      	mov	r0, r5
 80068da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068de:	f000 b817 	b.w	8006910 <_kill_r>
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d00a      	beq.n	80068fc <_raise_r+0x4c>
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	d103      	bne.n	80068f2 <_raise_r+0x42>
 80068ea:	2316      	movs	r3, #22
 80068ec:	6003      	str	r3, [r0, #0]
 80068ee:	2001      	movs	r0, #1
 80068f0:	e7e7      	b.n	80068c2 <_raise_r+0x12>
 80068f2:	2100      	movs	r1, #0
 80068f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80068f8:	4620      	mov	r0, r4
 80068fa:	4798      	blx	r3
 80068fc:	2000      	movs	r0, #0
 80068fe:	e7e0      	b.n	80068c2 <_raise_r+0x12>

08006900 <raise>:
 8006900:	4b02      	ldr	r3, [pc, #8]	@ (800690c <raise+0xc>)
 8006902:	4601      	mov	r1, r0
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f7ff bfd3 	b.w	80068b0 <_raise_r>
 800690a:	bf00      	nop
 800690c:	2000003c 	.word	0x2000003c

08006910 <_kill_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d07      	ldr	r5, [pc, #28]	@ (8006930 <_kill_r+0x20>)
 8006914:	2300      	movs	r3, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	602b      	str	r3, [r5, #0]
 800691e:	f7fb f9a3 	bl	8001c68 <_kill>
 8006922:	1c43      	adds	r3, r0, #1
 8006924:	d102      	bne.n	800692c <_kill_r+0x1c>
 8006926:	682b      	ldr	r3, [r5, #0]
 8006928:	b103      	cbz	r3, 800692c <_kill_r+0x1c>
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	bd38      	pop	{r3, r4, r5, pc}
 800692e:	bf00      	nop
 8006930:	20002358 	.word	0x20002358

08006934 <_getpid_r>:
 8006934:	f7fb b990 	b.w	8001c58 <_getpid>

08006938 <__swhatbuf_r>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	460c      	mov	r4, r1
 800693c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006940:	2900      	cmp	r1, #0
 8006942:	b096      	sub	sp, #88	@ 0x58
 8006944:	4615      	mov	r5, r2
 8006946:	461e      	mov	r6, r3
 8006948:	da0d      	bge.n	8006966 <__swhatbuf_r+0x2e>
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006950:	f04f 0100 	mov.w	r1, #0
 8006954:	bf14      	ite	ne
 8006956:	2340      	movne	r3, #64	@ 0x40
 8006958:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800695c:	2000      	movs	r0, #0
 800695e:	6031      	str	r1, [r6, #0]
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	b016      	add	sp, #88	@ 0x58
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	466a      	mov	r2, sp
 8006968:	f000 f848 	bl	80069fc <_fstat_r>
 800696c:	2800      	cmp	r0, #0
 800696e:	dbec      	blt.n	800694a <__swhatbuf_r+0x12>
 8006970:	9901      	ldr	r1, [sp, #4]
 8006972:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006976:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800697a:	4259      	negs	r1, r3
 800697c:	4159      	adcs	r1, r3
 800697e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006982:	e7eb      	b.n	800695c <__swhatbuf_r+0x24>

08006984 <__smakebuf_r>:
 8006984:	898b      	ldrh	r3, [r1, #12]
 8006986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006988:	079d      	lsls	r5, r3, #30
 800698a:	4606      	mov	r6, r0
 800698c:	460c      	mov	r4, r1
 800698e:	d507      	bpl.n	80069a0 <__smakebuf_r+0x1c>
 8006990:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	2301      	movs	r3, #1
 800699a:	6163      	str	r3, [r4, #20]
 800699c:	b003      	add	sp, #12
 800699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a0:	ab01      	add	r3, sp, #4
 80069a2:	466a      	mov	r2, sp
 80069a4:	f7ff ffc8 	bl	8006938 <__swhatbuf_r>
 80069a8:	9f00      	ldr	r7, [sp, #0]
 80069aa:	4605      	mov	r5, r0
 80069ac:	4639      	mov	r1, r7
 80069ae:	4630      	mov	r0, r6
 80069b0:	f7ff faba 	bl	8005f28 <_malloc_r>
 80069b4:	b948      	cbnz	r0, 80069ca <__smakebuf_r+0x46>
 80069b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ba:	059a      	lsls	r2, r3, #22
 80069bc:	d4ee      	bmi.n	800699c <__smakebuf_r+0x18>
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	f043 0302 	orr.w	r3, r3, #2
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	e7e2      	b.n	8006990 <__smakebuf_r+0xc>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	6020      	str	r0, [r4, #0]
 80069ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069da:	b15b      	cbz	r3, 80069f4 <__smakebuf_r+0x70>
 80069dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069e0:	4630      	mov	r0, r6
 80069e2:	f000 f81d 	bl	8006a20 <_isatty_r>
 80069e6:	b128      	cbz	r0, 80069f4 <__smakebuf_r+0x70>
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	f023 0303 	bic.w	r3, r3, #3
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	431d      	orrs	r5, r3
 80069f8:	81a5      	strh	r5, [r4, #12]
 80069fa:	e7cf      	b.n	800699c <__smakebuf_r+0x18>

080069fc <_fstat_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4d07      	ldr	r5, [pc, #28]	@ (8006a1c <_fstat_r+0x20>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	602b      	str	r3, [r5, #0]
 8006a0a:	f7fb f98d 	bl	8001d28 <_fstat>
 8006a0e:	1c43      	adds	r3, r0, #1
 8006a10:	d102      	bne.n	8006a18 <_fstat_r+0x1c>
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	b103      	cbz	r3, 8006a18 <_fstat_r+0x1c>
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	bd38      	pop	{r3, r4, r5, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20002358 	.word	0x20002358

08006a20 <_isatty_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4d06      	ldr	r5, [pc, #24]	@ (8006a3c <_isatty_r+0x1c>)
 8006a24:	2300      	movs	r3, #0
 8006a26:	4604      	mov	r4, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	f7fb f98c 	bl	8001d48 <_isatty>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_isatty_r+0x1a>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_isatty_r+0x1a>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20002358 	.word	0x20002358

08006a40 <_init>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	bf00      	nop
 8006a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a46:	bc08      	pop	{r3}
 8006a48:	469e      	mov	lr, r3
 8006a4a:	4770      	bx	lr

08006a4c <_fini>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	bf00      	nop
 8006a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a52:	bc08      	pop	{r3}
 8006a54:	469e      	mov	lr, r3
 8006a56:	4770      	bx	lr
