
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006898  08006898  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a0  080068a0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080068a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001efc  20000098  08006940  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001f94  08006940  00021f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d232  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f6  00000000  00000000  0002d2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c7b  00000000  00000000  00030d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef11  00000000  00000000  000489fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009372e  00000000  00000000  0005790c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb03a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  000eb08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006350 	.word	0x08006350

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08006350 	.word	0x08006350

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <getRainbowColor>:
   240, 251, 261, 271, 282, 293, 304, 316, 327, 339, 351, 363, 376, 388, 401, 414,
   428, 441, 455, 469, 483, 497, 511, 526, 541, 556, 572, 587, 603, 619, 635, 651,
   668, 685, 702, 719, 736, 754, 772, 790, 808, 827, 845, 864, 883, 903, 922, 942,
   962, 982,1002,1023,};

uint32_t getRainbowColor(uint8_t colorOption) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
    switch (colorOption) {
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	2b0f      	cmp	r3, #15
 8000bb0:	d84a      	bhi.n	8000c48 <getRainbowColor+0xa8>
 8000bb2:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <getRainbowColor+0x18>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000bf9 	.word	0x08000bf9
 8000bbc:	08000bff 	.word	0x08000bff
 8000bc0:	08000c03 	.word	0x08000c03
 8000bc4:	08000c07 	.word	0x08000c07
 8000bc8:	08000c0b 	.word	0x08000c0b
 8000bcc:	08000c11 	.word	0x08000c11
 8000bd0:	08000c17 	.word	0x08000c17
 8000bd4:	08000c1d 	.word	0x08000c1d
 8000bd8:	08000c23 	.word	0x08000c23
 8000bdc:	08000c27 	.word	0x08000c27
 8000be0:	08000c2b 	.word	0x08000c2b
 8000be4:	08000c31 	.word	0x08000c31
 8000be8:	08000c35 	.word	0x08000c35
 8000bec:	08000c39 	.word	0x08000c39
 8000bf0:	08000c3d 	.word	0x08000c3d
 8000bf4:	08000c43 	.word	0x08000c43
        case 1:
            return 0xFF0000; // Red
 8000bf8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000bfc:	e026      	b.n	8000c4c <getRainbowColor+0xac>
        case 2:
            return 0xFF7F00; // Orange
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <getRainbowColor+0xb8>)
 8000c00:	e024      	b.n	8000c4c <getRainbowColor+0xac>
        case 3:
            return 0xFFFF00; // Yellow
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <getRainbowColor+0xbc>)
 8000c04:	e022      	b.n	8000c4c <getRainbowColor+0xac>
        case 4:
            return 0x7FFF00; // Yellow-Green
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <getRainbowColor+0xc0>)
 8000c08:	e020      	b.n	8000c4c <getRainbowColor+0xac>
        case 5:
            return 0x00FF00; // Green
 8000c0a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000c0e:	e01d      	b.n	8000c4c <getRainbowColor+0xac>
        case 6:
            return 0x00FF7F; // Spring Green
 8000c10:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000c14:	e01a      	b.n	8000c4c <getRainbowColor+0xac>
        case 7:
            return 0x00FFFF; // Cyan
 8000c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1a:	e017      	b.n	8000c4c <getRainbowColor+0xac>
        case 8:
            return 0x007FFF; // Sky Blue
 8000c1c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000c20:	e014      	b.n	8000c4c <getRainbowColor+0xac>
        case 9:
            return 0x0000FF; // Blue
 8000c22:	23ff      	movs	r3, #255	; 0xff
 8000c24:	e012      	b.n	8000c4c <getRainbowColor+0xac>
        case 10:
            return 0x7F00FF; // Violet
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <getRainbowColor+0xc4>)
 8000c28:	e010      	b.n	8000c4c <getRainbowColor+0xac>
        case 11:
            return 0xFF00FF; // Magenta
 8000c2a:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8000c2e:	e00d      	b.n	8000c4c <getRainbowColor+0xac>
        case 12:
            return 0xFF007F; // Rose
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <getRainbowColor+0xc8>)
 8000c32:	e00b      	b.n	8000c4c <getRainbowColor+0xac>
        case 13:
            return 0xFF1493; // Deep Pink
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <getRainbowColor+0xcc>)
 8000c36:	e009      	b.n	8000c4c <getRainbowColor+0xac>
        case 14:
            return 0xC71585; // Medium Violet Red
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <getRainbowColor+0xd0>)
 8000c3a:	e007      	b.n	8000c4c <getRainbowColor+0xac>
        case 15:
            return 0x800080; // Purple
 8000c3c:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
 8000c40:	e004      	b.n	8000c4c <getRainbowColor+0xac>
        case 16:
            return 0x8B008B; // Dark Magenta
 8000c42:	f04f 138b 	mov.w	r3, #9109643	; 0x8b008b
 8000c46:	e001      	b.n	8000c4c <getRainbowColor+0xac>
        default:
            return 0xFFFFFF; // Default to White if an unexpected value is provided
 8000c48:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    }
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	00ff7f00 	.word	0x00ff7f00
 8000c5c:	00ffff00 	.word	0x00ffff00
 8000c60:	007fff00 	.word	0x007fff00
 8000c64:	007f00ff 	.word	0x007f00ff
 8000c68:	00ff007f 	.word	0x00ff007f
 8000c6c:	00ff1493 	.word	0x00ff1493
 8000c70:	00c71585 	.word	0x00c71585

08000c74 <clear_display_buffer>:
    MINUTE_THIRTY
};

unsigned char displayBuffer[12][11] = {0}; // Adjust the buffer to be 12 rows by 11 columns

void clear_display_buffer() {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
    for (int row = 0; row < 12; row++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	e017      	b.n	8000cb0 <clear_display_buffer+0x3c>
        for (int col = 0; col < 11; col++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	e00e      	b.n	8000ca4 <clear_display_buffer+0x30>
            displayBuffer[row][col] = 0; // Clear the bit in the display buffer
 8000c86:	490f      	ldr	r1, [pc, #60]	; (8000cc4 <clear_display_buffer+0x50>)
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	18ca      	adds	r2, r1, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) {
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	dded      	ble.n	8000c86 <clear_display_buffer+0x12>
    for (int row = 0; row < 12; row++) {
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3301      	adds	r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b0b      	cmp	r3, #11
 8000cb4:	dde4      	ble.n	8000c80 <clear_display_buffer+0xc>
        }
    }
}
 8000cb6:	bf00      	nop
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	200000b4 	.word	0x200000b4

08000cc8 <add_bmp>:

void add_bmp(const uint16_t bmp[12]) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    for (int row = 0; row < 12; row++) { // Loop over each row
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e032      	b.n	8000d3c <add_bmp+0x74>
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	e029      	b.n	8000d30 <add_bmp+0x68>
            if ((bmp[row] & (1 << col)) != 0) { // Check if the bit is set in bmp at (row, col)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	fa42 f303 	asr.w	r3, r2, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d019      	beq.n	8000d2a <add_bmp+0x62>
                displayBuffer[row][col] |= 1; // Set the bit in the display buffer
 8000cf6:	4916      	ldr	r1, [pc, #88]	; (8000d50 <add_bmp+0x88>)
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	18ca      	adds	r2, r1, r3
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	4413      	add	r3, r2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	b2d8      	uxtb	r0, r3
 8000d12:	490f      	ldr	r1, [pc, #60]	; (8000d50 <add_bmp+0x88>)
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	18ca      	adds	r2, r1, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	4413      	add	r3, r2
 8000d26:	4602      	mov	r2, r0
 8000d28:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	ddd2      	ble.n	8000cdc <add_bmp+0x14>
    for (int row = 0; row < 12; row++) { // Loop over each row
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b0b      	cmp	r3, #11
 8000d40:	ddc9      	ble.n	8000cd6 <add_bmp+0xe>
            }
        }
    }
}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	200000b4 	.word	0x200000b4

08000d54 <display_bmp>:

void display_bmp(uint16_t preset, uint16_t brightness) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	80fb      	strh	r3, [r7, #6]
 8000d60:	4613      	mov	r3, r2
 8000d62:	80bb      	strh	r3, [r7, #4]
    if (brightness < 1 || brightness > 100) {
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d077      	beq.n	8000e5a <display_bmp+0x106>
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	2b64      	cmp	r3, #100	; 0x64
 8000d6e:	d874      	bhi.n	8000e5a <display_bmp+0x106>
        // Ensure the brightness index is within the valid range to avoid out-of-bounds access
        return;
    }

    uint32_t color = getRainbowColor(preset);
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff13 	bl	8000ba0 <getRainbowColor>
 8000d7a:	6178      	str	r0, [r7, #20]
    // Extract the red, green, and blue components from the color
    uint8_t red = (color >> 16) & 0xFF;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	74fb      	strb	r3, [r7, #19]
    uint8_t green = (color >> 8) & 0xFF;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	74bb      	strb	r3, [r7, #18]
    uint8_t blue = color & 0xFF;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	747b      	strb	r3, [r7, #17]

    // Adjust the brightness based on the gamma lookup table
    // Since the maximum value in gamma_lut is 1023 (for brightness=100),
    // and the maximum value for each color component is 255, a scaling is required.
    uint16_t brightnessValue = gamma_lut[brightness - 1];
 8000d8c:	88bb      	ldrh	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a34      	ldr	r2, [pc, #208]	; (8000e64 <display_bmp+0x110>)
 8000d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d96:	81fb      	strh	r3, [r7, #14]

    // Scale and adjust the RGB values based on the brightness
    red = (uint8_t)(((uint32_t)red * brightnessValue) / 1023);
 8000d98:	7cfb      	ldrb	r3, [r7, #19]
 8000d9a:	89fa      	ldrh	r2, [r7, #14]
 8000d9c:	fb03 f202 	mul.w	r2, r3, r2
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <display_bmp+0x114>)
 8000da2:	fba3 1302 	umull	r1, r3, r3, r2
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	0852      	lsrs	r2, r2, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	0a5b      	lsrs	r3, r3, #9
 8000dae:	74fb      	strb	r3, [r7, #19]
    green = (uint8_t)(((uint32_t)green * brightnessValue) / 1023);
 8000db0:	7cbb      	ldrb	r3, [r7, #18]
 8000db2:	89fa      	ldrh	r2, [r7, #14]
 8000db4:	fb03 f202 	mul.w	r2, r3, r2
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <display_bmp+0x114>)
 8000dba:	fba3 1302 	umull	r1, r3, r3, r2
 8000dbe:	1ad2      	subs	r2, r2, r3
 8000dc0:	0852      	lsrs	r2, r2, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	0a5b      	lsrs	r3, r3, #9
 8000dc6:	74bb      	strb	r3, [r7, #18]
    blue = (uint8_t)(((uint32_t)blue * brightnessValue) / 1023);
 8000dc8:	7c7b      	ldrb	r3, [r7, #17]
 8000dca:	89fa      	ldrh	r2, [r7, #14]
 8000dcc:	fb03 f202 	mul.w	r2, r3, r2
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <display_bmp+0x114>)
 8000dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	0852      	lsrs	r2, r2, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	0a5b      	lsrs	r3, r3, #9
 8000dde:	747b      	strb	r3, [r7, #17]

    for (int row = 0; row < 12; row++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	e035      	b.n	8000e52 <display_bmp+0xfe>
        for (int col = 0; col < 11; col++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	e02c      	b.n	8000e46 <display_bmp+0xf2>
            if (displayBuffer[row][col] & 1) { // Check if the bit is set
 8000dec:	491f      	ldr	r1, [pc, #124]	; (8000e6c <display_bmp+0x118>)
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	18ca      	adds	r2, r1, r3
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00d      	beq.n	8000e26 <display_bmp+0xd2>
                // Set the LED to the adjusted color for specified brightness
                Set_LED((row * 11) + col, red, green, blue);
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	441a      	add	r2, r3
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	18d0      	adds	r0, r2, r3
 8000e1a:	7cf9      	ldrb	r1, [r7, #19]
 8000e1c:	7cba      	ldrb	r2, [r7, #18]
 8000e1e:	7c7b      	ldrb	r3, [r7, #17]
 8000e20:	f004 fce0 	bl	80057e4 <Set_LED>
 8000e24:	e00c      	b.n	8000e40 <display_bmp+0xec>
            } else {
                // Turn the LED off
                Set_LED((row * 11) + col, 0, 0, 0);
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	441a      	add	r2, r3
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	18d0      	adds	r0, r2, r3
 8000e36:	2300      	movs	r3, #0
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f004 fcd2 	bl	80057e4 <Set_LED>
        for (int col = 0; col < 11; col++) {
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	3301      	adds	r3, #1
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b0a      	cmp	r3, #10
 8000e4a:	ddcf      	ble.n	8000dec <display_bmp+0x98>
    for (int row = 0; row < 12; row++) {
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	2b0b      	cmp	r3, #11
 8000e56:	ddc6      	ble.n	8000de6 <display_bmp+0x92>
 8000e58:	e000      	b.n	8000e5c <display_bmp+0x108>
        return;
 8000e5a:	bf00      	nop
            }
        }
    }
}
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08006388 	.word	0x08006388
 8000e68:	00401005 	.word	0x00401005
 8000e6c:	200000b4 	.word	0x200000b4

08000e70 <display_time>:



void display_time(int hour, int minute) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	add_bmp(BMP_ITS);
 8000e7a:	4859      	ldr	r0, [pc, #356]	; (8000fe0 <display_time+0x170>)
 8000e7c:	f7ff ff24 	bl	8000cc8 <add_bmp>
    // Round down to the nearest five minutes
    minute = (minute / 5) * 5;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	4a58      	ldr	r2, [pc, #352]	; (8000fe4 <display_time+0x174>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1052      	asrs	r2, r2, #1
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad2      	subs	r2, r2, r3
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	603b      	str	r3, [r7, #0]

    // Display minute, accounting for 'past' or 'to'
    if (minute < 5) {
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	dd10      	ble.n	8000ebe <display_time+0x4e>
    	//no past or till
    } else if (minute < 35) {
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b22      	cmp	r3, #34	; 0x22
 8000ea0:	dc03      	bgt.n	8000eaa <display_time+0x3a>
        add_bmp(BMP_PAST);
 8000ea2:	4851      	ldr	r0, [pc, #324]	; (8000fe8 <display_time+0x178>)
 8000ea4:	f7ff ff10 	bl	8000cc8 <add_bmp>
 8000ea8:	e009      	b.n	8000ebe <display_time+0x4e>
    } else {
        minute = 60 - minute;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000eb0:	603b      	str	r3, [r7, #0]
        hour++;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
        add_bmp(BMP_TILL);
 8000eb8:	484c      	ldr	r0, [pc, #304]	; (8000fec <display_time+0x17c>)
 8000eba:	f7ff ff05 	bl	8000cc8 <add_bmp>
    }

    if(hour == 0 || hour == 12);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00c      	beq.n	8000ede <display_time+0x6e>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b0c      	cmp	r3, #12
 8000ec8:	d009      	beq.n	8000ede <display_time+0x6e>
    else if(hour < 12) add_bmp(BMP_AM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0b      	cmp	r3, #11
 8000ece:	dc03      	bgt.n	8000ed8 <display_time+0x68>
 8000ed0:	4847      	ldr	r0, [pc, #284]	; (8000ff0 <display_time+0x180>)
 8000ed2:	f7ff fef9 	bl	8000cc8 <add_bmp>
 8000ed6:	e002      	b.n	8000ede <display_time+0x6e>
    else add_bmp(BMP_PM);
 8000ed8:	4846      	ldr	r0, [pc, #280]	; (8000ff4 <display_time+0x184>)
 8000eda:	f7ff fef5 	bl	8000cc8 <add_bmp>

    // Display hour
    switch(hour) {
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b17      	cmp	r3, #23
 8000ee2:	d867      	bhi.n	8000fb4 <display_time+0x144>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <display_time+0x7c>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000f4d 	.word	0x08000f4d
 8000ef0:	08000f55 	.word	0x08000f55
 8000ef4:	08000f5d 	.word	0x08000f5d
 8000ef8:	08000f65 	.word	0x08000f65
 8000efc:	08000f6d 	.word	0x08000f6d
 8000f00:	08000f75 	.word	0x08000f75
 8000f04:	08000f7d 	.word	0x08000f7d
 8000f08:	08000f85 	.word	0x08000f85
 8000f0c:	08000f8d 	.word	0x08000f8d
 8000f10:	08000f95 	.word	0x08000f95
 8000f14:	08000f9d 	.word	0x08000f9d
 8000f18:	08000fa5 	.word	0x08000fa5
 8000f1c:	08000fad 	.word	0x08000fad
 8000f20:	08000f55 	.word	0x08000f55
 8000f24:	08000f5d 	.word	0x08000f5d
 8000f28:	08000f65 	.word	0x08000f65
 8000f2c:	08000f6d 	.word	0x08000f6d
 8000f30:	08000f75 	.word	0x08000f75
 8000f34:	08000f7d 	.word	0x08000f7d
 8000f38:	08000f85 	.word	0x08000f85
 8000f3c:	08000f8d 	.word	0x08000f8d
 8000f40:	08000f95 	.word	0x08000f95
 8000f44:	08000f9d 	.word	0x08000f9d
 8000f48:	08000fa5 	.word	0x08000fa5
        case 0:
            add_bmp(HOUR_MIDNIGHT);
 8000f4c:	482a      	ldr	r0, [pc, #168]	; (8000ff8 <display_time+0x188>)
 8000f4e:	f7ff febb 	bl	8000cc8 <add_bmp>
            break;
 8000f52:	e030      	b.n	8000fb6 <display_time+0x146>
        case 1:
        case 13:
            add_bmp(HOUR_ONE);
 8000f54:	4829      	ldr	r0, [pc, #164]	; (8000ffc <display_time+0x18c>)
 8000f56:	f7ff feb7 	bl	8000cc8 <add_bmp>
            break;
 8000f5a:	e02c      	b.n	8000fb6 <display_time+0x146>
        case 2:
        case 14:
            add_bmp(HOUR_TWO);
 8000f5c:	4828      	ldr	r0, [pc, #160]	; (8001000 <display_time+0x190>)
 8000f5e:	f7ff feb3 	bl	8000cc8 <add_bmp>
            break;
 8000f62:	e028      	b.n	8000fb6 <display_time+0x146>
        case 3:
        case 15:
            add_bmp(HOUR_THREE);
 8000f64:	4827      	ldr	r0, [pc, #156]	; (8001004 <display_time+0x194>)
 8000f66:	f7ff feaf 	bl	8000cc8 <add_bmp>
            break;
 8000f6a:	e024      	b.n	8000fb6 <display_time+0x146>
        case 4:
        case 16:
            add_bmp(HOUR_FOUR);
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <display_time+0x198>)
 8000f6e:	f7ff feab 	bl	8000cc8 <add_bmp>
            break;
 8000f72:	e020      	b.n	8000fb6 <display_time+0x146>
        case 5:
        case 17:
            add_bmp(HOUR_FIVE);
 8000f74:	4825      	ldr	r0, [pc, #148]	; (800100c <display_time+0x19c>)
 8000f76:	f7ff fea7 	bl	8000cc8 <add_bmp>
            break;
 8000f7a:	e01c      	b.n	8000fb6 <display_time+0x146>
        case 6:
        case 18:
            add_bmp(HOUR_SIX);
 8000f7c:	4824      	ldr	r0, [pc, #144]	; (8001010 <display_time+0x1a0>)
 8000f7e:	f7ff fea3 	bl	8000cc8 <add_bmp>
            break;
 8000f82:	e018      	b.n	8000fb6 <display_time+0x146>
        case 7:
        case 19:
            add_bmp(HOUR_SEVEN);
 8000f84:	4823      	ldr	r0, [pc, #140]	; (8001014 <display_time+0x1a4>)
 8000f86:	f7ff fe9f 	bl	8000cc8 <add_bmp>
            break;
 8000f8a:	e014      	b.n	8000fb6 <display_time+0x146>
        case 8:
        case 20:
            add_bmp(HOUR_EIGHT);
 8000f8c:	4822      	ldr	r0, [pc, #136]	; (8001018 <display_time+0x1a8>)
 8000f8e:	f7ff fe9b 	bl	8000cc8 <add_bmp>
            break;
 8000f92:	e010      	b.n	8000fb6 <display_time+0x146>
        case 9:
        case 21:
            add_bmp(HOUR_NINE);
 8000f94:	4821      	ldr	r0, [pc, #132]	; (800101c <display_time+0x1ac>)
 8000f96:	f7ff fe97 	bl	8000cc8 <add_bmp>
            break;
 8000f9a:	e00c      	b.n	8000fb6 <display_time+0x146>
        case 10:
        case 22:
            add_bmp(HOUR_TEN);
 8000f9c:	4820      	ldr	r0, [pc, #128]	; (8001020 <display_time+0x1b0>)
 8000f9e:	f7ff fe93 	bl	8000cc8 <add_bmp>
            break;
 8000fa2:	e008      	b.n	8000fb6 <display_time+0x146>
        case 11:
        case 23:
            add_bmp(HOUR_ELEVEN);
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <display_time+0x1b4>)
 8000fa6:	f7ff fe8f 	bl	8000cc8 <add_bmp>
            break;
 8000faa:	e004      	b.n	8000fb6 <display_time+0x146>
        case 12:
            add_bmp(HOUR_NOON);
 8000fac:	481e      	ldr	r0, [pc, #120]	; (8001028 <display_time+0x1b8>)
 8000fae:	f7ff fe8b 	bl	8000cc8 <add_bmp>
            break;
 8000fb2:	e000      	b.n	8000fb6 <display_time+0x146>
        default:
            // Handle error or invalid hour
            break;
 8000fb4:	bf00      	nop
    }

    // Display minute in intervals of five using an array pointing to the bitmaps
    if (minute > 0) {
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dd0d      	ble.n	8000fd8 <display_time+0x168>
        add_bmp(minuteBitmaps[(minute / 5) - 1]);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <display_time+0x174>)
 8000fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc4:	1052      	asrs	r2, r2, #1
 8000fc6:	17db      	asrs	r3, r3, #31
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <display_time+0x1bc>)
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fe78 	bl	8000cc8 <add_bmp>
    }
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08006618 	.word	0x08006618
 8000fe4:	66666667 	.word	0x66666667
 8000fe8:	08006630 	.word	0x08006630
 8000fec:	08006648 	.word	0x08006648
 8000ff0:	080066c0 	.word	0x080066c0
 8000ff4:	080066d8 	.word	0x080066d8
 8000ff8:	08006570 	.word	0x08006570
 8000ffc:	08006450 	.word	0x08006450
 8001000:	08006468 	.word	0x08006468
 8001004:	08006480 	.word	0x08006480
 8001008:	08006498 	.word	0x08006498
 800100c:	080064b0 	.word	0x080064b0
 8001010:	080064c8 	.word	0x080064c8
 8001014:	080064e0 	.word	0x080064e0
 8001018:	080064f8 	.word	0x080064f8
 800101c:	08006510 	.word	0x08006510
 8001020:	08006528 	.word	0x08006528
 8001024:	08006540 	.word	0x08006540
 8001028:	08006558 	.word	0x08006558
 800102c:	20000000 	.word	0x20000000

08001030 <Blink_LED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Blink_LED(uint16_t LED, uint32_t color) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	80fb      	strh	r3, [r7, #6]

	if(LED != lastLED) {
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <Blink_LED+0x90>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	429a      	cmp	r2, r3
 8001046:	d009      	beq.n	800105c <Blink_LED+0x2c>
		Set_LED_Hex(lastLED, 0);
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <Blink_LED+0x90>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fbfe 	bl	8005850 <Set_LED_Hex>
		lastLED = LED;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <Blink_LED+0x90>)
 800105a:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() - lastTick >= delayMs) {
 800105c:	f001 f996 	bl	800238c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <Blink_LED+0x94>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1ad2      	subs	r2, r2, r3
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <Blink_LED+0x98>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d322      	bcc.n	80010b6 <Blink_LED+0x86>

		//Toggle LED
		if(isOff){
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <Blink_LED+0x9c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <Blink_LED+0x54>
			Set_LED_Hex(LED, color);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fbe7 	bl	8005850 <Set_LED_Hex>
 8001082:	e004      	b.n	800108e <Blink_LED+0x5e>
		} else {
			Set_LED_Hex(LED, 0);
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f004 fbe1 	bl	8005850 <Set_LED_Hex>
		}

		isOff = !isOff;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <Blink_LED+0x9c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf14      	ite	ne
 8001096:	2301      	movne	r3, #1
 8001098:	2300      	moveq	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f083 0301 	eor.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <Blink_LED+0x9c>)
 80010aa:	701a      	strb	r2, [r3, #0]
		lastTick = HAL_GetTick();
 80010ac:	f001 f96e 	bl	800238c <HAL_GetTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <Blink_LED+0x94>)
 80010b4:	6013      	str	r3, [r2, #0]
	}
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000026 	.word	0x20000026
 80010c4:	200002ec 	.word	0x200002ec
 80010c8:	20000020 	.word	0x20000020
 80010cc:	20000024 	.word	0x20000024

080010d0 <switchState>:

void switchState(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

    //state-specific initialization
    switch(currentState) {
 80010d4:	4b49      	ldr	r3, [pc, #292]	; (80011fc <switchState+0x12c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b07      	cmp	r3, #7
 80010dc:	d873      	bhi.n	80011c6 <switchState+0xf6>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <switchState+0x14>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	08001105 	.word	0x08001105
 80010e8:	080011c7 	.word	0x080011c7
 80010ec:	0800110d 	.word	0x0800110d
 80010f0:	08001125 	.word	0x08001125
 80010f4:	0800113d 	.word	0x0800113d
 80010f8:	08001169 	.word	0x08001169
 80010fc:	08001195 	.word	0x08001195
 8001100:	080011b3 	.word	0x080011b3
        case SLEEP:
        	userIsConfiguring = true;
 8001104:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <switchState+0x130>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
            break;
 800110a:	e05c      	b.n	80011c6 <switchState+0xf6>
        case WAKE:
        	break;
        case SELECT:
        	selection = counter / sensitivity;
 800110c:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <switchState+0x134>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <switchState+0x138>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	fb92 f3f3 	sdiv	r3, r2, r3
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <switchState+0x13c>)
 8001120:	701a      	strb	r2, [r3, #0]
        	break;
 8001122:	e050      	b.n	80011c6 <switchState+0xf6>
        case ROUTE:
        	counter = sTime.Hours * sensitivity;
 8001124:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <switchState+0x140>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b29a      	uxth	r2, r3
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <switchState+0x138>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	fb12 f303 	smulbb	r3, r2, r3
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <switchState+0x134>)
 8001138:	801a      	strh	r2, [r3, #0]
        	break;
 800113a:	e044      	b.n	80011c6 <switchState+0xf6>
        case SET_HOURS:
      	  counter = sTime.Minutes * sensitivity;
 800113c:	4b34      	ldr	r3, [pc, #208]	; (8001210 <switchState+0x140>)
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <switchState+0x138>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	fb12 f303 	smulbb	r3, r2, r3
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <switchState+0x134>)
 8001150:	801a      	strh	r2, [r3, #0]
      	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // or RTC_FORMAT_BCD depending on your setting
 8001152:	2200      	movs	r2, #0
 8001154:	492e      	ldr	r1, [pc, #184]	; (8001210 <switchState+0x140>)
 8001156:	482f      	ldr	r0, [pc, #188]	; (8001214 <switchState+0x144>)
 8001158:	f002 fd2c 	bl	8003bb4 <HAL_RTC_SetTime>
      	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This line is required to unlock the shadow registers
 800115c:	2200      	movs	r2, #0
 800115e:	492e      	ldr	r1, [pc, #184]	; (8001218 <switchState+0x148>)
 8001160:	482c      	ldr	r0, [pc, #176]	; (8001214 <switchState+0x144>)
 8001162:	f002 fe1f 	bl	8003da4 <HAL_RTC_SetDate>
            break;
 8001166:	e02e      	b.n	80011c6 <switchState+0xf6>
        case SET_MINUTES:
      	  counter = color * sensitivity;
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <switchState+0x138>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <switchState+0x14c>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	fb12 f303 	smulbb	r3, r2, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <switchState+0x134>)
 800117c:	801a      	strh	r2, [r3, #0]
      	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // or RTC_FORMAT_BCD depending on your setting
 800117e:	2200      	movs	r2, #0
 8001180:	4923      	ldr	r1, [pc, #140]	; (8001210 <switchState+0x140>)
 8001182:	4824      	ldr	r0, [pc, #144]	; (8001214 <switchState+0x144>)
 8001184:	f002 fd16 	bl	8003bb4 <HAL_RTC_SetTime>
      	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This line is required to unlock the shadow registers
 8001188:	2200      	movs	r2, #0
 800118a:	4923      	ldr	r1, [pc, #140]	; (8001218 <switchState+0x148>)
 800118c:	4821      	ldr	r0, [pc, #132]	; (8001214 <switchState+0x144>)
 800118e:	f002 fe09 	bl	8003da4 <HAL_RTC_SetDate>
            break;
 8001192:	e018      	b.n	80011c6 <switchState+0xf6>
        case SET_COLOR:
      	  counter = brightness * (sensitivity/2);
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <switchState+0x138>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0fda      	lsrs	r2, r3, #31
 800119a:	4413      	add	r3, r2
 800119c:	105b      	asrs	r3, r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <switchState+0x150>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	fb12 f303 	smulbb	r3, r2, r3
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <switchState+0x134>)
 80011ae:	801a      	strh	r2, [r3, #0]
            break;
 80011b0:	e009      	b.n	80011c6 <switchState+0xf6>
        case SET_BRIGHTNESS:
      	  counter = 0;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <switchState+0x134>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	801a      	strh	r2, [r3, #0]
      	  displayStr[0] = '\0';
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <switchState+0x154>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
      	  userIsConfiguring = false;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <switchState+0x130>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
            break;
 80011c4:	bf00      	nop
    }

      currentState = (currentState + 1) % 7; // There are 5 states
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <switchState+0x12c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <switchState+0x158>)
 80011d0:	fb83 1302 	smull	r1, r3, r3, r2
 80011d4:	4413      	add	r3, r2
 80011d6:	1099      	asrs	r1, r3, #2
 80011d8:	17d3      	asrs	r3, r2, #31
 80011da:	1ac9      	subs	r1, r1, r3
 80011dc:	460b      	mov	r3, r1
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	1ad1      	subs	r1, r2, r3
 80011e4:	b2ca      	uxtb	r2, r1
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <switchState+0x12c>)
 80011e8:	701a      	strb	r2, [r3, #0]

      __HAL_TIM_SET_COUNTER(&htim3, counter);
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <switchState+0x134>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <switchState+0x15c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000266 	.word	0x20000266
 8001200:	200002e8 	.word	0x200002e8
 8001204:	20000248 	.word	0x20000248
 8001208:	2000001c 	.word	0x2000001c
 800120c:	200002f0 	.word	0x200002f0
 8001210:	2000024c 	.word	0x2000024c
 8001214:	20000138 	.word	0x20000138
 8001218:	20000260 	.word	0x20000260
 800121c:	20000264 	.word	0x20000264
 8001220:	20000018 	.word	0x20000018
 8001224:	20000268 	.word	0x20000268
 8001228:	92492493 	.word	0x92492493
 800122c:	200001a0 	.word	0x200001a0

08001230 <checkButtonPress>:

void checkButtonPress(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 8001236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123a:	480a      	ldr	r0, [pc, #40]	; (8001264 <checkButtonPress+0x34>)
 800123c:	f001 fefe 	bl	800303c <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <checkButtonPress+0x38>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d104      	bne.n	8001256 <checkButtonPress+0x26>
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <checkButtonPress+0x26>
        // Button was pressed - perform actions here.
        switchState(); // Call the state switch function only on the transition.
 8001252:	f7ff ff3d 	bl	80010d0 <switchState>
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <checkButtonPress+0x38>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	7013      	strb	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40020400 	.word	0x40020400
 8001268:	20000027 	.word	0x20000027

0800126c <clampValue.0>:
  MX_RTC_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface

  uint16_t clampValue(uint16_t value, uint16_t minVal, uint16_t maxVal) {
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	81fb      	strh	r3, [r7, #14]
 8001276:	460b      	mov	r3, r1
 8001278:	81bb      	strh	r3, [r7, #12]
 800127a:	4613      	mov	r3, r2
 800127c:	817b      	strh	r3, [r7, #10]
 800127e:	f8c7 c004 	str.w	ip, [r7, #4]
      if (abs(0xFFFF - value) < abs(maxVal - value)) {
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001288:	33ff      	adds	r3, #255	; 0xff
 800128a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800128e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001292:	8979      	ldrh	r1, [r7, #10]
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	1acb      	subs	r3, r1, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	bfb8      	it	lt
 800129c:	425b      	neglt	r3, r3
 800129e:	429a      	cmp	r2, r3
 80012a0:	da01      	bge.n	80012a6 <clampValue.0+0x3a>
    	  return minVal;
 80012a2:	89bb      	ldrh	r3, [r7, #12]
 80012a4:	e00c      	b.n	80012c0 <clampValue.0+0x54>
      } else {
          // Normal range (does not wrap around)
          if (value < minVal) return minVal;
 80012a6:	89fa      	ldrh	r2, [r7, #14]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d201      	bcs.n	80012b2 <clampValue.0+0x46>
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	e006      	b.n	80012c0 <clampValue.0+0x54>
          if (value > maxVal) return maxVal;
 80012b2:	89fa      	ldrh	r2, [r7, #14]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d901      	bls.n	80012be <clampValue.0+0x52>
 80012ba:	897b      	ldrh	r3, [r7, #10]
 80012bc:	e000      	b.n	80012c0 <clampValue.0+0x54>
          return value;
 80012be:	89fb      	ldrh	r3, [r7, #14]
      }
  }
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	0000      	movs	r0, r0
	...

080012d0 <main>:
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af02      	add	r7, sp, #8
int main(void)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80012dc:	f000 fff0 	bl	80022c0 <HAL_Init>
  SystemClock_Config();
 80012e0:	f000 fa2e 	bl	8001740 <SystemClock_Config>
  MX_GPIO_Init();
 80012e4:	f000 fc04 	bl	8001af0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e8:	f000 fbe2 	bl	8001ab0 <MX_DMA_Init>
  MX_TIM1_Init();
 80012ec:	f000 faec 	bl	80018c8 <MX_TIM1_Init>
  MX_RTC_Init();
 80012f0:	f000 fa90 	bl	8001814 <MX_RTC_Init>
  MX_TIM3_Init();
 80012f4:	f000 fb88 	bl	8001a08 <MX_TIM3_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 80012f8:	213c      	movs	r1, #60	; 0x3c
 80012fa:	489e      	ldr	r0, [pc, #632]	; (8001574 <main+0x2a4>)
 80012fc:	f003 faa6 	bl	800484c <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  checkButtonPress();
 8001300:	f7ff ff96 	bl	8001230 <checkButtonPress>
	  if(stateChangeRequest){
 8001304:	4b9c      	ldr	r3, [pc, #624]	; (8001578 <main+0x2a8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d010      	beq.n	800132e <main+0x5e>
		  switchState();
 800130c:	f7ff fee0 	bl	80010d0 <switchState>
		  stateChangeRequest = !stateChangeRequest;
 8001310:	4b99      	ldr	r3, [pc, #612]	; (8001578 <main+0x2a8>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b93      	ldr	r3, [pc, #588]	; (8001578 <main+0x2a8>)
 800132c:	701a      	strb	r2, [r3, #0]
	  }

	    if(userIsConfiguring)
 800132e:	4b93      	ldr	r3, [pc, #588]	; (800157c <main+0x2ac>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <main+0x72>
	  	  counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001336:	4b8f      	ldr	r3, [pc, #572]	; (8001574 <main+0x2a4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	b29a      	uxth	r2, r3
 800133e:	4b90      	ldr	r3, [pc, #576]	; (8001580 <main+0x2b0>)
 8001340:	801a      	strh	r2, [r3, #0]


		// get time and get date must both be called
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001342:	2200      	movs	r2, #0
 8001344:	498f      	ldr	r1, [pc, #572]	; (8001584 <main+0x2b4>)
 8001346:	4890      	ldr	r0, [pc, #576]	; (8001588 <main+0x2b8>)
 8001348:	f002 fcce 	bl	8003ce8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800134c:	2200      	movs	r2, #0
 800134e:	498f      	ldr	r1, [pc, #572]	; (800158c <main+0x2bc>)
 8001350:	488d      	ldr	r0, [pc, #564]	; (8001588 <main+0x2b8>)
 8001352:	f002 fdab 	bl	8003eac <HAL_RTC_GetDate>

	    switch(currentState) {
 8001356:	4b8e      	ldr	r3, [pc, #568]	; (8001590 <main+0x2c0>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b07      	cmp	r3, #7
 800135e:	f200 8191 	bhi.w	8001684 <main+0x3b4>
 8001362:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <main+0x98>)
 8001364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001368:	08001389 	.word	0x08001389
 800136c:	08001397 	.word	0x08001397
 8001370:	080013fd 	.word	0x080013fd
 8001374:	0800147d 	.word	0x0800147d
 8001378:	080014b1 	.word	0x080014b1
 800137c:	08001519 	.word	0x08001519
 8001380:	080015b9 	.word	0x080015b9
 8001384:	0800161d 	.word	0x0800161d
	        case SLEEP:
	        	snprintf(displayStr, sizeof(displayStr), "%s", "      ");
 8001388:	4b82      	ldr	r3, [pc, #520]	; (8001594 <main+0x2c4>)
 800138a:	4a83      	ldr	r2, [pc, #524]	; (8001598 <main+0x2c8>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	4883      	ldr	r0, [pc, #524]	; (800159c <main+0x2cc>)
 8001390:	f004 fb50 	bl	8005a34 <sniprintf>
	            break;
 8001394:	e176      	b.n	8001684 <main+0x3b4>
	        case WAKE:
	        	counter = clampValue(counter, 0, 1);
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <main+0x2b0>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	1d3a      	adds	r2, r7, #4
 800139e:	4694      	mov	ip, r2
 80013a0:	2201      	movs	r2, #1
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff61 	bl	800126c <clampValue.0>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b74      	ldr	r3, [pc, #464]	; (8001580 <main+0x2b0>)
 80013b0:	801a      	strh	r2, [r3, #0]
	        	Blink_LED(LED_SET + counter, getRainbowColor(color));
 80013b2:	4b73      	ldr	r3, [pc, #460]	; (8001580 <main+0x2b0>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	3388      	adds	r3, #136	; 0x88
 80013ba:	b29c      	uxth	r4, r3
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <main+0x2d0>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fbeb 	bl	8000ba0 <getRainbowColor>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4619      	mov	r1, r3
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fe2e 	bl	8001030 <Blink_LED>
	        	snprintf(displayStr, sizeof(displayStr), "%04u", LED_SET + counter);
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <main+0x2b0>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	3388      	adds	r3, #136	; 0x88
 80013dc:	4a71      	ldr	r2, [pc, #452]	; (80015a4 <main+0x2d4>)
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	486e      	ldr	r0, [pc, #440]	; (800159c <main+0x2cc>)
 80013e2:	f004 fb27 	bl	8005a34 <sniprintf>

	        	//counter = 0 -> isSet
	        	//counter = 1 -> isNotSet
	        	isSet = !counter;
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <main+0x2b0>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b6c      	ldr	r3, [pc, #432]	; (80015a8 <main+0x2d8>)
 80013f8:	701a      	strb	r2, [r3, #0]

	        	break;
 80013fa:	e143      	b.n	8001684 <main+0x3b4>
	        case SELECT:
	        	counter = clampValue(counter, 0, 3 * sensitivity);
 80013fc:	4b60      	ldr	r3, [pc, #384]	; (8001580 <main+0x2b0>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4a6a      	ldr	r2, [pc, #424]	; (80015ac <main+0x2dc>)
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	b292      	uxth	r2, r2
 8001408:	4611      	mov	r1, r2
 800140a:	0049      	lsls	r1, r1, #1
 800140c:	440a      	add	r2, r1
 800140e:	b292      	uxth	r2, r2
 8001410:	1d39      	adds	r1, r7, #4
 8001412:	468c      	mov	ip, r1
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff28 	bl	800126c <clampValue.0>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <main+0x2b0>)
 8001422:	801a      	strh	r2, [r3, #0]
	        	Set_LED_Hex(LED_SET + (!isSet), getRainbowColor(color));
 8001424:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <main+0x2d8>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8001432:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <main+0x2d0>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fbb0 	bl	8000ba0 <getRainbowColor>
 8001440:	4603      	mov	r3, r0
 8001442:	4619      	mov	r1, r3
 8001444:	4620      	mov	r0, r4
 8001446:	f004 fa03 	bl	8005850 <Set_LED_Hex>
	        	Blink_LED(LED_SET_TIME - (counter/sensitivity), getRainbowColor(color));
 800144a:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <main+0x2b0>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <main+0x2dc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	fb92 f3f3 	sdiv	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	f1c3 038d 	rsb	r3, r3, #141	; 0x8d
 8001460:	b29c      	uxth	r4, r3
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <main+0x2d0>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fb98 	bl	8000ba0 <getRainbowColor>
 8001470:	4603      	mov	r3, r0
 8001472:	4619      	mov	r1, r3
 8001474:	4620      	mov	r0, r4
 8001476:	f7ff fddb 	bl	8001030 <Blink_LED>
	        	break;
 800147a:	e103      	b.n	8001684 <main+0x3b4>
	        case ROUTE:
	        	switch(selection) {
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <main+0x2e0>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d813      	bhi.n	80014ac <main+0x1dc>
 8001484:	a201      	add	r2, pc, #4	; (adr r2, 800148c <main+0x1bc>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014a5 	.word	0x080014a5
 8001494:	080014ad 	.word	0x080014ad
 8001498:	080014ad 	.word	0x080014ad
	        		case 0:
	        			currentState = SET_HOURS;
 800149c:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <main+0x2c0>)
 800149e:	2204      	movs	r2, #4
 80014a0:	701a      	strb	r2, [r3, #0]
	        			break;
 80014a2:	e004      	b.n	80014ae <main+0x1de>
	        		case 1:
	        			currentState = SET_COLOR;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <main+0x2c0>)
 80014a6:	2206      	movs	r2, #6
 80014a8:	701a      	strb	r2, [r3, #0]
	        			break;
 80014aa:	e000      	b.n	80014ae <main+0x1de>
	        			break;
	        		case 3:

	        			break;
	        		default:
						break;
 80014ac:	bf00      	nop
	        	}
	        	break;
 80014ae:	e0e9      	b.n	8001684 <main+0x3b4>
	        case SET_HOURS:
	        	Set_LED(136, 100, 100, 100);
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	2264      	movs	r2, #100	; 0x64
 80014b4:	2164      	movs	r1, #100	; 0x64
 80014b6:	2088      	movs	r0, #136	; 0x88
 80014b8:	f004 f994 	bl	80057e4 <Set_LED>
	        	counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <main+0x2b0>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b298      	uxth	r0, r3
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <main+0x2dc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	0052      	lsls	r2, r2, #1
 80014cc:	441a      	add	r2, r3
 80014ce:	00d2      	lsls	r2, r2, #3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	1d3a      	adds	r2, r7, #4
 80014d6:	4694      	mov	ip, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	2100      	movs	r1, #0
 80014dc:	f7ff fec6 	bl	800126c <clampValue.0>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <main+0x2b0>)
 80014e6:	801a      	strh	r2, [r3, #0]
	        	sTime.Hours = counter / sensitivity;
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <main+0x2b0>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <main+0x2dc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <main+0x2b4>)
 80014fc:	701a      	strb	r2, [r3, #0]
	        	snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <main+0x2b4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <main+0x2b4>)
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4613      	mov	r3, r2
 800150c:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <main+0x2e4>)
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	4822      	ldr	r0, [pc, #136]	; (800159c <main+0x2cc>)
 8001512:	f004 fa8f 	bl	8005a34 <sniprintf>
	            break;
 8001516:	e0b5      	b.n	8001684 <main+0x3b4>
	        case SET_MINUTES:
	        	counter = clampValue(counter, 0, 59 * sensitivity); //59 Minutes
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <main+0x2b0>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b298      	uxth	r0, r3
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <main+0x2dc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	1ad2      	subs	r2, r2, r3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	1d3a      	adds	r2, r7, #4
 8001532:	4694      	mov	ip, r2
 8001534:	461a      	mov	r2, r3
 8001536:	2100      	movs	r1, #0
 8001538:	f7ff fe98 	bl	800126c <clampValue.0>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <main+0x2b0>)
 8001542:	801a      	strh	r2, [r3, #0]
	        	sTime.Minutes = counter / sensitivity;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <main+0x2b0>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b29b      	uxth	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <main+0x2dc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	fb92 f3f3 	sdiv	r3, r2, r3
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <main+0x2b4>)
 8001558:	705a      	strb	r2, [r3, #1]
	        	snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <main+0x2b4>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <main+0x2b4>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4613      	mov	r3, r2
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <main+0x2e4>)
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <main+0x2cc>)
 800156e:	f004 fa61 	bl	8005a34 <sniprintf>
	            break;
 8001572:	e087      	b.n	8001684 <main+0x3b4>
 8001574:	200001a0 	.word	0x200001a0
 8001578:	200002e9 	.word	0x200002e9
 800157c:	200002e8 	.word	0x200002e8
 8001580:	20000248 	.word	0x20000248
 8001584:	2000024c 	.word	0x2000024c
 8001588:	20000138 	.word	0x20000138
 800158c:	20000260 	.word	0x20000260
 8001590:	20000266 	.word	0x20000266
 8001594:	08006368 	.word	0x08006368
 8001598:	08006370 	.word	0x08006370
 800159c:	20000268 	.word	0x20000268
 80015a0:	20000264 	.word	0x20000264
 80015a4:	08006374 	.word	0x08006374
 80015a8:	20000025 	.word	0x20000025
 80015ac:	2000001c 	.word	0x2000001c
 80015b0:	200002f0 	.word	0x200002f0
 80015b4:	0800637c 	.word	0x0800637c
	        case SET_COLOR:
	        	counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 80015b8:	4b57      	ldr	r3, [pc, #348]	; (8001718 <main+0x448>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b298      	uxth	r0, r3
 80015be:	4b57      	ldr	r3, [pc, #348]	; (800171c <main+0x44c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	1d3a      	adds	r2, r7, #4
 80015ca:	4694      	mov	ip, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	2100      	movs	r1, #0
 80015d0:	f7ff fe4c 	bl	800126c <clampValue.0>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <main+0x448>)
 80015da:	801a      	strh	r2, [r3, #0]
	        	color = counter / sensitivity;
 80015dc:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <main+0x448>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <main+0x44c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b4c      	ldr	r3, [pc, #304]	; (8001720 <main+0x450>)
 80015f0:	801a      	strh	r2, [r3, #0]
	        	snprintf(displayStr, sizeof(displayStr), "%04u", color);
 80015f2:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <main+0x450>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4a4a      	ldr	r2, [pc, #296]	; (8001724 <main+0x454>)
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	484a      	ldr	r0, [pc, #296]	; (8001728 <main+0x458>)
 80015fe:	f004 fa19 	bl	8005a34 <sniprintf>
	        	Set_LED_Hex(136, getRainbowColor(color));
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <main+0x450>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fac8 	bl	8000ba0 <getRainbowColor>
 8001610:	4603      	mov	r3, r0
 8001612:	4619      	mov	r1, r3
 8001614:	2088      	movs	r0, #136	; 0x88
 8001616:	f004 f91b 	bl	8005850 <Set_LED_Hex>
	            break;
 800161a:	e033      	b.n	8001684 <main+0x3b4>
	        case SET_BRIGHTNESS:
	        	counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <main+0x448>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b298      	uxth	r0, r3
 8001622:	4b3e      	ldr	r3, [pc, #248]	; (800171c <main+0x44c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0fda      	lsrs	r2, r3, #31
 8001628:	4413      	add	r3, r2
 800162a:	105b      	asrs	r3, r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4413      	add	r3, r2
 8001634:	461a      	mov	r2, r3
 8001636:	0091      	lsls	r1, r2, #2
 8001638:	461a      	mov	r2, r3
 800163a:	460b      	mov	r3, r1
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	b29b      	uxth	r3, r3
 8001642:	1d3a      	adds	r2, r7, #4
 8001644:	4694      	mov	ip, r2
 8001646:	461a      	mov	r2, r3
 8001648:	2101      	movs	r1, #1
 800164a:	f7ff fe0f 	bl	800126c <clampValue.0>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <main+0x448>)
 8001654:	801a      	strh	r2, [r3, #0]
	        	brightness = counter / (sensitivity / 2);
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <main+0x448>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	4619      	mov	r1, r3
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <main+0x44c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	0fda      	lsrs	r2, r3, #31
 8001664:	4413      	add	r3, r2
 8001666:	105b      	asrs	r3, r3, #1
 8001668:	fb91 f3f3 	sdiv	r3, r1, r3
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <main+0x45c>)
 8001670:	801a      	strh	r2, [r3, #0]
	        	snprintf(displayStr, sizeof(displayStr), "%04u", brightness);
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <main+0x45c>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <main+0x454>)
 800167a:	2180      	movs	r1, #128	; 0x80
 800167c:	482a      	ldr	r0, [pc, #168]	; (8001728 <main+0x458>)
 800167e:	f004 f9d9 	bl	8005a34 <sniprintf>
	            break;
 8001682:	bf00      	nop
	    }

	    if(userIsConfiguring) {
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <main+0x460>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <main+0x3ce>
		    __HAL_TIM_SET_COUNTER(&htim3, counter);
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <main+0x448>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <main+0x464>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
		    Segment_Display(displayStr);
 8001698:	4823      	ldr	r0, [pc, #140]	; (8001728 <main+0x458>)
 800169a:	f000 fdc7 	bl	800222c <Segment_Display>
	    }

	    if(sTime.Hours >= 19) { //past 7pm
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <main+0x468>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d919      	bls.n	80016da <main+0x40a>
	    	if(brightness > 70)
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <main+0x45c>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2b46      	cmp	r3, #70	; 0x46
 80016ae:	d914      	bls.n	80016da <main+0x40a>
	    		brightness = brightness * .70; //auto dim if brightness is high
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <main+0x45c>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f866 	bl	8000788 <__aeabi_i2d>
 80016bc:	a314      	add	r3, pc, #80	; (adr r3, 8001710 <main+0x440>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe fde5 	bl	8000290 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff f8c5 	bl	800085c <__aeabi_d2uiz>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <main+0x45c>)
 80016d8:	801a      	strh	r2, [r3, #0]
	    }

		display_time(sTime.Hours, sTime.Minutes);
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <main+0x468>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <main+0x468>)
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f7ff fbc2 	bl	8000e70 <display_time>
		display_bmp(color, brightness);
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <main+0x450>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <main+0x45c>)
 80016f4:	8812      	ldrh	r2, [r2, #0]
 80016f6:	b292      	uxth	r2, r2
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb2a 	bl	8000d54 <display_bmp>
		WS2812B_Send(&htim1);
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <main+0x46c>)
 8001702:	f004 f8db 	bl	80058bc <WS2812B_Send>
		clear_display_buffer();
 8001706:	f7ff fab5 	bl	8000c74 <clear_display_buffer>
	  checkButtonPress();
 800170a:	e5f9      	b.n	8001300 <main+0x30>
 800170c:	f3af 8000 	nop.w
 8001710:	66666666 	.word	0x66666666
 8001714:	3fe66666 	.word	0x3fe66666
 8001718:	20000248 	.word	0x20000248
 800171c:	2000001c 	.word	0x2000001c
 8001720:	20000264 	.word	0x20000264
 8001724:	08006374 	.word	0x08006374
 8001728:	20000268 	.word	0x20000268
 800172c:	20000018 	.word	0x20000018
 8001730:	200002e8 	.word	0x200002e8
 8001734:	200001a0 	.word	0x200001a0
 8001738:	2000024c 	.word	0x2000024c
 800173c:	20000158 	.word	0x20000158

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	; 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	; 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f004 f968 	bl	8005a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <SystemClock_Config+0xcc>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a27      	ldr	r2, [pc, #156]	; (800180c <SystemClock_Config+0xcc>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <SystemClock_Config+0xcc>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <SystemClock_Config+0xd0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <SystemClock_Config+0xd0>)
 800178a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <SystemClock_Config+0xd0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800179c:	230a      	movs	r3, #10
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a4:	2310      	movs	r3, #16
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017a8:	2301      	movs	r3, #1
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ac:	2302      	movs	r3, #2
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017b4:	2308      	movs	r3, #8
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017b8:	2348      	movs	r3, #72	; 0x48
 80017ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017bc:	2302      	movs	r3, #2
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 fc69 	bl	80030a0 <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017d4:	f000 fa10 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d8:	230f      	movs	r3, #15
 80017da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	2302      	movs	r3, #2
 80017de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 fecb 	bl	8003590 <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001800:	f000 f9fa 	bl	8001bf8 <Error_Handler>
  }
}
 8001804:	bf00      	nop
 8001806:	3750      	adds	r7, #80	; 0x50
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_RTC_Init+0xac>)
 800182e:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <MX_RTC_Init+0xb0>)
 8001830:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_RTC_Init+0xac>)
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_RTC_Init+0xac>)
 800183a:	227f      	movs	r2, #127	; 0x7f
 800183c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_RTC_Init+0xac>)
 8001840:	22ff      	movs	r2, #255	; 0xff
 8001842:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_RTC_Init+0xac>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_RTC_Init+0xac>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_RTC_Init+0xac>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001856:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_RTC_Init+0xac>)
 8001858:	f002 f936 	bl	8003ac8 <HAL_RTC_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001862:	f000 f9c9 	bl	8001bf8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8001866:	2307      	movs	r3, #7
 8001868:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 800186a:	230f      	movs	r3, #15
 800186c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 800186e:	2332      	movs	r3, #50	; 0x32
 8001870:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2200      	movs	r2, #0
 800187e:	4619      	mov	r1, r3
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <MX_RTC_Init+0xac>)
 8001882:	f002 f997 	bl	8003bb4 <HAL_RTC_SetTime>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800188c:	f000 f9b4 	bl	8001bf8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001890:	2302      	movs	r3, #2
 8001892:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001894:	2301      	movs	r3, #1
 8001896:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 8001898:	2317      	movs	r3, #23
 800189a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 800189c:	2318      	movs	r3, #24
 800189e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_RTC_Init+0xac>)
 80018a8:	f002 fa7c 	bl	8003da4 <HAL_RTC_SetDate>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80018b2:	f000 f9a1 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000138 	.word	0x20000138
 80018c4:	40002800 	.word	0x40002800

080018c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b096      	sub	sp, #88	; 0x58
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2220      	movs	r2, #32
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f004 f88f 	bl	8005a24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <MX_TIM1_Init+0x138>)
 8001908:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <MX_TIM1_Init+0x13c>)
 800190a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800190c:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <MX_TIM1_Init+0x138>)
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <MX_TIM1_Init+0x138>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001918:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <MX_TIM1_Init+0x138>)
 800191a:	2259      	movs	r2, #89	; 0x59
 800191c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <MX_TIM1_Init+0x138>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <MX_TIM1_Init+0x138>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <MX_TIM1_Init+0x138>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001930:	4833      	ldr	r0, [pc, #204]	; (8001a00 <MX_TIM1_Init+0x138>)
 8001932:	f002 fbc7 	bl	80040c4 <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800193c:	f000 f95c 	bl	8001bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001946:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800194a:	4619      	mov	r1, r3
 800194c:	482c      	ldr	r0, [pc, #176]	; (8001a00 <MX_TIM1_Init+0x138>)
 800194e:	f003 f9d5 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001958:	f000 f94e 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800195c:	4828      	ldr	r0, [pc, #160]	; (8001a00 <MX_TIM1_Init+0x138>)
 800195e:	f002 fc00 	bl	8004162 <HAL_TIM_PWM_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001968:	f000 f946 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001978:	4619      	mov	r1, r3
 800197a:	4821      	ldr	r0, [pc, #132]	; (8001a00 <MX_TIM1_Init+0x138>)
 800197c:	f003 fe5e 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001986:	f000 f937 	bl	8001bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198a:	2360      	movs	r3, #96	; 0x60
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4814      	ldr	r0, [pc, #80]	; (8001a00 <MX_TIM1_Init+0x138>)
 80019b0:	f003 f8e2 	bl	8004b78 <HAL_TIM_PWM_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80019ba:	f000 f91d 	bl	8001bf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <MX_TIM1_Init+0x138>)
 80019e2:	f003 fe99 	bl	8005718 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80019ec:	f000 f904 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <MX_TIM1_Init+0x138>)
 80019f2:	f000 fa21 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 80019f6:	bf00      	nop
 80019f8:	3758      	adds	r7, #88	; 0x58
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000158 	.word	0x20000158
 8001a04:	40010000 	.word	0x40010000

08001a08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 f804 	bl	8005a24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <MX_TIM3_Init+0xa0>)
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <MX_TIM3_Init+0xa0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <MX_TIM3_Init+0xa0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <MX_TIM3_Init+0xa0>)
 8001a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MX_TIM3_Init+0xa0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_TIM3_Init+0xa0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a52:	2301      	movs	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_TIM3_Init+0xa0>)
 8001a76:	f002 fe43 	bl	8004700 <HAL_TIM_Encoder_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a80:	f000 f8ba 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_TIM3_Init+0xa0>)
 8001a92:	f003 fdd3 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a9c:	f000 f8ac 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	3730      	adds	r7, #48	; 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200001a0 	.word	0x200001a0
 8001aac:	40000400 	.word	0x40000400

08001ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_DMA_Init+0x3c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <MX_DMA_Init+0x3c>)
 8001ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_DMA_Init+0x3c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	2039      	movs	r0, #57	; 0x39
 8001ad8:	f000 fd63 	bl	80025a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001adc:	2039      	movs	r0, #57	; 0x39
 8001ade:	f000 fd7c 	bl	80025da <HAL_NVIC_EnableIRQ>

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a37      	ldr	r2, [pc, #220]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b35      	ldr	r3, [pc, #212]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a30      	ldr	r2, [pc, #192]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a29      	ldr	r2, [pc, #164]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a22      	ldr	r2, [pc, #136]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <MX_GPIO_Init+0xfc>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001b76:	2200      	movs	r2, #0
 8001b78:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8001b7c:	481c      	ldr	r0, [pc, #112]	; (8001bf0 <MX_GPIO_Init+0x100>)
 8001b7e:	f001 fa75 	bl	800306c <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001b82:	2200      	movs	r2, #0
 8001b84:	f241 4107 	movw	r1, #5127	; 0x1407
 8001b88:	481a      	ldr	r0, [pc, #104]	; (8001bf4 <MX_GPIO_Init+0x104>)
 8001b8a:	f001 fa6f 	bl	800306c <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001b8e:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001b92:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <MX_GPIO_Init+0x100>)
 8001ba8:	f001 f8c4 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001bac:	f241 4307 	movw	r3, #5127	; 0x1407
 8001bb0:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <MX_GPIO_Init+0x104>)
 8001bc6:	f001 f8b5 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_GPIO_Init+0x104>)
 8001be0:	f001 f8a8 	bl	8002d34 <HAL_GPIO_Init>

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <Error_Handler+0x8>
	...

08001c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_MspInit+0x90>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <HAL_MspInit+0x90>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_MspInit+0x90>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_MspInit+0x90>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_MspInit+0x90>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_MspInit+0x90>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2101      	movs	r1, #1
 8001c46:	f06f 000b 	mvn.w	r0, #11
 8001c4a:	f000 fcaa 	bl	80025a2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2102      	movs	r1, #2
 8001c52:	f06f 000a 	mvn.w	r0, #10
 8001c56:	f000 fca4 	bl	80025a2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	f06f 0009 	mvn.w	r0, #9
 8001c62:	f000 fc9e 	bl	80025a2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2104      	movs	r1, #4
 8001c6a:	f06f 0004 	mvn.w	r0, #4
 8001c6e:	f000 fc98 	bl	80025a2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2105      	movs	r1, #5
 8001c76:	f06f 0003 	mvn.w	r0, #3
 8001c7a:	f000 fc92 	bl	80025a2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2106      	movs	r1, #6
 8001c82:	f06f 0001 	mvn.w	r0, #1
 8001c86:	f000 fc8c 	bl	80025a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800

08001c98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <HAL_RTC_MspInit+0x50>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d111      	bne.n	8001ce0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fe0c 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001cd6:	f7ff ff8f 	bl	8001bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RTC_MspInit+0x54>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40002800 	.word	0x40002800
 8001cec:	42470e3c 	.word	0x42470e3c

08001cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_TIM_Base_MspInit+0x98>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d13d      	bne.n	8001d7e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_TIM_Base_MspInit+0x9c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <HAL_TIM_Base_MspInit+0x9c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_TIM_Base_MspInit+0x9c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_TIM_Base_MspInit+0xa4>)
 8001d22:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d26:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001d2a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d3e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d46:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d62:	480b      	ldr	r0, [pc, #44]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d64:	f000 fc54 	bl	8002610 <HAL_DMA_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001d6e:	f7ff ff43 	bl	8001bf8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_TIM_Base_MspInit+0xa0>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	200001e8 	.word	0x200001e8
 8001d94:	40026428 	.word	0x40026428

08001d98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_TIM_Encoder_MspInit+0x94>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d133      	bne.n	8001e22 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x98>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x98>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x98>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x98>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x98>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001df2:	2330      	movs	r3, #48	; 0x30
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e02:	2302      	movs	r3, #2
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001e0e:	f000 ff91 	bl	8002d34 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2109      	movs	r1, #9
 8001e16:	201d      	movs	r0, #29
 8001e18:	f000 fbc3 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e1c:	201d      	movs	r0, #29
 8001e1e:	f000 fbdc 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11e      	bne.n	8001e98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <HAL_TIM_MspPostInit+0x70>)
 8001e94:	f000 ff4e 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler+0x4>

08001ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <BusFault_Handler+0x4>

08001ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <UsageFault_Handler+0x4>

08001eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef8:	f000 fa34 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM3_IRQHandler+0x10>)
 8001f06:	f002 fd2f 	bl	8004968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200001a0 	.word	0x200001a0

08001f14 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <DMA2_Stream1_IRQHandler+0x10>)
 8001f1a:	f000 fca1 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200001e8 	.word	0x200001e8

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f003 fd3a 	bl	80059d0 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20020000 	.word	0x20020000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	200002f4 	.word	0x200002f4
 8001f90:	20001f98 	.word	0x20001f98

08001f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fbe:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd4:	4c0b      	ldr	r4, [pc, #44]	; (8002004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fe2:	f7ff ffd7 	bl	8001f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f003 fcf9 	bl	80059dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7ff f971 	bl	80012d0 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001ffc:	080068a8 	.word	0x080068a8
  ldr r2, =_sbss
 8002000:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002004:	20001f94 	.word	0x20001f94

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <setSegments>:
		['Y'] = 0x6E, ['Z'] = 0x5B,  // 'Z' uses same as '2'
		[' '] = 0x00, // Blank character
};

// Set the segments for the current digit
void setSegments(uint8_t segments) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	2104      	movs	r1, #4
 800202a:	4830      	ldr	r0, [pc, #192]	; (80020ec <setSegments+0xe0>)
 800202c:	f001 f81e 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	2101      	movs	r1, #1
 8002044:	4829      	ldr	r0, [pc, #164]	; (80020ec <setSegments+0xe0>)
 8002046:	f001 f811 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	2108      	movs	r1, #8
 800205e:	4823      	ldr	r0, [pc, #140]	; (80020ec <setSegments+0xe0>)
 8002060:	f001 f804 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	2104      	movs	r1, #4
 8002078:	481d      	ldr	r0, [pc, #116]	; (80020f0 <setSegments+0xe4>)
 800207a:	f000 fff7 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	2101      	movs	r1, #1
 8002092:	4817      	ldr	r0, [pc, #92]	; (80020f0 <setSegments+0xe4>)
 8002094:	f000 ffea 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	2110      	movs	r1, #16
 80020ac:	480f      	ldr	r0, [pc, #60]	; (80020ec <setSegments+0xe0>)
 80020ae:	f000 ffdd 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	2102      	movs	r1, #2
 80020c6:	4809      	ldr	r0, [pc, #36]	; (80020ec <setSegments+0xe0>)
 80020c8:	f000 ffd0 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	09db      	lsrs	r3, r3, #7
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	2140      	movs	r1, #64	; 0x40
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <setSegments+0xe0>)
 80020de:	f000 ffc5 	bl	800306c <HAL_GPIO_WritePin>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40020400 	.word	0x40020400

080020f4 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b01      	cmp	r3, #1
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002110:	4819      	ldr	r0, [pc, #100]	; (8002178 <activateDigit+0x84>)
 8002112:	f000 ffab 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b02      	cmp	r3, #2
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002128:	4813      	ldr	r0, [pc, #76]	; (8002178 <activateDigit+0x84>)
 800212a:	f000 ff9f 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	2b03      	cmp	r3, #3
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	480f      	ldr	r0, [pc, #60]	; (800217c <activateDigit+0x88>)
 8002140:	f000 ff94 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	2120      	movs	r1, #32
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <activateDigit+0x88>)
 8002156:	f000 ff89 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b05      	cmp	r3, #5
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	2102      	movs	r1, #2
 800216a:	4803      	ldr	r0, [pc, #12]	; (8002178 <activateDigit+0x84>)
 800216c:	f000 ff7e 	bl	800306c <HAL_GPIO_WritePin>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40020400 	.word	0x40020400
 800217c:	40020000 	.word	0x40020000

08002180 <processInput>:

// Prevent errors by formatting string
void processInput(const char *input) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    size_t inputLength = strlen(input);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7fe f829 	bl	80001e0 <strlen>
 800218e:	60f8      	str	r0, [r7, #12]

    // We are assuming that outputBuffer is large enough to hold all digits
    memset(outputBuffer, 0, sizeof(outputBuffer)); // Clear the output buffer
 8002190:	2205      	movs	r2, #5
 8002192:	2100      	movs	r1, #0
 8002194:	4822      	ldr	r0, [pc, #136]	; (8002220 <processInput+0xa0>)
 8002196:	f003 fc45 	bl	8005a24 <memset>

    for (size_t i = 0, j = 0; i < inputLength && j < NUM_DIGITS; ++i) {
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	e032      	b.n	800220a <processInput+0x8a>
        // Convert lowercase letters to uppercase
        uint8_t c = (uint8_t)toupper((unsigned char)input[i]); // Cast to avoid potential negative values
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4413      	add	r3, r2
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	72fb      	strb	r3, [r7, #11]
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	3301      	adds	r3, #1
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <processInput+0xa4>)
 80021b4:	4413      	add	r3, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d102      	bne.n	80021c6 <processInput+0x46>
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	3b20      	subs	r3, #32
 80021c4:	e000      	b.n	80021c8 <processInput+0x48>
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	72bb      	strb	r3, [r7, #10]

        if (c == ':') {
 80021ca:	7abb      	ldrb	r3, [r7, #10]
 80021cc:	2b3a      	cmp	r3, #58	; 0x3a
 80021ce:	d018      	beq.n	8002202 <processInput+0x82>
            // If colon, handle separately
            continue;
        }
        if (c < ' ' || c > 'Z' || charToSegmentsMap[c] == 0) {
 80021d0:	7abb      	ldrb	r3, [r7, #10]
 80021d2:	2b1f      	cmp	r3, #31
 80021d4:	d907      	bls.n	80021e6 <processInput+0x66>
 80021d6:	7abb      	ldrb	r3, [r7, #10]
 80021d8:	2b5a      	cmp	r3, #90	; 0x5a
 80021da:	d804      	bhi.n	80021e6 <processInput+0x66>
 80021dc:	7abb      	ldrb	r3, [r7, #10]
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <processInput+0xa8>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <processInput+0x74>
            // Replace invalid character with 'E'
            outputBuffer[j++] = 'E';
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	613a      	str	r2, [r7, #16]
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <processInput+0xa0>)
 80021ee:	2145      	movs	r1, #69	; 0x45
 80021f0:	54d1      	strb	r1, [r2, r3]
 80021f2:	e007      	b.n	8002204 <processInput+0x84>
        } else {
            // Copy valid character to output buffer
            outputBuffer[j++] = c; // Now 'c' contains the uppercase version, if applicable
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	613a      	str	r2, [r7, #16]
 80021fa:	4909      	ldr	r1, [pc, #36]	; (8002220 <processInput+0xa0>)
 80021fc:	7aba      	ldrb	r2, [r7, #10]
 80021fe:	54ca      	strb	r2, [r1, r3]
 8002200:	e000      	b.n	8002204 <processInput+0x84>
            continue;
 8002202:	bf00      	nop
    for (size_t i = 0, j = 0; i < inputLength && j < NUM_DIGITS; ++i) {
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	429a      	cmp	r2, r3
 8002210:	d202      	bcs.n	8002218 <processInput+0x98>
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d9c5      	bls.n	80021a4 <processInput+0x24>
        }
    }

    // Null-termination is ensured by static buffer initialization to {0}
}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200002f8 	.word	0x200002f8
 8002224:	08006764 	.word	0x08006764
 8002228:	08006700 	.word	0x08006700

0800222c <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    processInput(input);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ffa3 	bl	8002180 <processInput>
    bool hasColon = strchr(input, ':') != NULL; // Check if input contains a colon
 800223a:	213a      	movs	r1, #58	; 0x3a
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f003 fc2d 	bl	8005a9c <strchr>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	74fb      	strb	r3, [r7, #19]

    // Clearing all digits can be optimized out if carefully controlling the display digits
    // activateDigit(0); // Assuming the digits are off to begin with

    // Calculate the number of characters to display
    size_t numChars = strlen(outputBuffer);
 800224e:	481a      	ldr	r0, [pc, #104]	; (80022b8 <Segment_Display+0x8c>)
 8002250:	f7fd ffc6 	bl	80001e0 <strlen>
 8002254:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < numChars; i++) {
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e016      	b.n	800228a <Segment_Display+0x5e>
        activateDigit(i + 1); // Activate the correct digit
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff45 	bl	80020f4 <activateDigit>
        setSegments(charToSegmentsMap[(uint8_t)outputBuffer[i]]); // Set segments
 800226a:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <Segment_Display+0x8c>)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <Segment_Display+0x90>)
 8002276:	5c9b      	ldrb	r3, [r3, r2]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fec7 	bl	800200c <setSegments>
        HAL_Delay(1); // Delay to allow the segments to light up
 800227e:	2001      	movs	r0, #1
 8002280:	f000 f890 	bl	80023a4 <HAL_Delay>
    for (size_t i = 0; i < numChars; i++) {
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	429a      	cmp	r2, r3
 8002290:	d3e4      	bcc.n	800225c <Segment_Display+0x30>
    }

    if (hasColon) {
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <Segment_Display+0x7e>
        // Handle case for the colon display
        activateDigit(5); // Assuming the fifth "digit" is for the colon
 8002298:	2005      	movs	r0, #5
 800229a:	f7ff ff2b 	bl	80020f4 <activateDigit>
        setSegments(0b11); // Set segments to display the colon
 800229e:	2003      	movs	r0, #3
 80022a0:	f7ff feb4 	bl	800200c <setSegments>
        HAL_Delay(1);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f000 f87d 	bl	80023a4 <HAL_Delay>
    }

    activateDigit(0); // Turn off all digits after showing the sequence
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff ff22 	bl	80020f4 <activateDigit>
}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200002f8 	.word	0x200002f8
 80022bc:	08006700 	.word	0x08006700

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <HAL_Init+0x40>)
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_Init+0x40>)
 80022d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_Init+0x40>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f000 f94f 	bl	800258c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ee:	200f      	movs	r0, #15
 80022f0:	f000 f808 	bl	8002304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f4:	f7ff fc86 	bl	8001c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00

08002304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_InitTick+0x54>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x58>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	fbb3 f3f1 	udiv	r3, r3, r1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f967 	bl	80025f6 <HAL_SYSTICK_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00e      	b.n	8002350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b0f      	cmp	r3, #15
 8002336:	d80a      	bhi.n	800234e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002338:	2200      	movs	r2, #0
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f000 f92f 	bl	80025a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <HAL_InitTick+0x5c>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000028 	.word	0x20000028
 800235c:	20000030 	.word	0x20000030
 8002360:	2000002c 	.word	0x2000002c

08002364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_IncTick+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4413      	add	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_IncTick+0x24>)
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000030 	.word	0x20000030
 8002388:	20000300 	.word	0x20000300

0800238c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_GetTick+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000300 	.word	0x20000300

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff ffee 	bl	800238c <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_Delay+0x44>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffde 	bl	800238c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000030 	.word	0x20000030

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <__NVIC_EnableIRQ+0x38>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0a      	blt.n	80024b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	490c      	ldr	r1, [pc, #48]	; (80024d8 <__NVIC_SetPriority+0x4c>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	0112      	lsls	r2, r2, #4
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	440b      	add	r3, r1
 80024b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b4:	e00a      	b.n	80024cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <__NVIC_SetPriority+0x50>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3b04      	subs	r3, #4
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	440b      	add	r3, r1
 80024ca:	761a      	strb	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f1c3 0307 	rsb	r3, r3, #7
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	bf28      	it	cs
 80024fe:	2304      	movcs	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3304      	adds	r3, #4
 8002506:	2b06      	cmp	r3, #6
 8002508:	d902      	bls.n	8002510 <NVIC_EncodePriority+0x30>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3b03      	subs	r3, #3
 800250e:	e000      	b.n	8002512 <NVIC_EncodePriority+0x32>
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43d9      	mvns	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	4313      	orrs	r3, r2
         );
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002558:	d301      	bcc.n	800255e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <SysTick_Config+0x40>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002566:	210f      	movs	r1, #15
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f7ff ff8e 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x40>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff29 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b4:	f7ff ff3e 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff ff8e 	bl	80024e0 <NVIC_EncodePriority>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff5d 	bl	800248c <__NVIC_SetPriority>
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff31 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffa2 	bl	8002548 <SysTick_Config>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff feb6 	bl	800238c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e099      	b.n	8002760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264c:	e00f      	b.n	800266e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264e:	f7ff fe9d 	bl	800238c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b05      	cmp	r3, #5
 800265a:	d908      	bls.n	800266e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e078      	b.n	8002760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e8      	bne.n	800264e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_DMA_Init+0x158>)
 8002688:	4013      	ands	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800269a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4313      	orrs	r3, r2
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f023 0307 	bic.w	r3, r3, #7
 80026ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d117      	bne.n	8002732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00e      	beq.n	8002732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fa91 	bl	8002c3c <DMA_CheckFifoParam>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800272e:	2301      	movs	r3, #1
 8002730:	e016      	b.n	8002760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fa48 	bl	8002bd0 <DMA_CalcBaseAndBitshift>
 8002740:	4603      	mov	r3, r0
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	223f      	movs	r2, #63	; 0x3f
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	f010803f 	.word	0xf010803f

0800276c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_DMA_Start_IT+0x26>
 800278e:	2302      	movs	r3, #2
 8002790:	e040      	b.n	8002814 <HAL_DMA_Start_IT+0xa8>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d12f      	bne.n	8002806 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f9da 	bl	8002b74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	223f      	movs	r2, #63	; 0x3f
 80027c6:	409a      	lsls	r2, r3
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0216 	orr.w	r2, r2, #22
 80027da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0208 	orr.w	r2, r2, #8
 80027f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e005      	b.n	8002812 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d004      	beq.n	800283a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00c      	b.n	8002854 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2205      	movs	r2, #5
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800286c:	4b8e      	ldr	r3, [pc, #568]	; (8002aa8 <HAL_DMA_IRQHandler+0x248>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a8e      	ldr	r2, [pc, #568]	; (8002aac <HAL_DMA_IRQHandler+0x24c>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a9b      	lsrs	r3, r3, #10
 8002878:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2208      	movs	r2, #8
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01a      	beq.n	80028cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0204 	bic.w	r2, r2, #4
 80028b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	2208      	movs	r2, #8
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2201      	movs	r2, #1
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2201      	movs	r2, #1
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2204      	movs	r2, #4
 8002908:	409a      	lsls	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	2204      	movs	r2, #4
 8002926:	409a      	lsls	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	2210      	movs	r2, #16
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d043      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03c      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2210      	movs	r2, #16
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d018      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d108      	bne.n	8002990 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d024      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
 800298e:	e01f      	b.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
 80029a0:	e016      	b.n	80029d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0208 	bic.w	r2, r2, #8
 80029be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2220      	movs	r2, #32
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 808f 	beq.w	8002b00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8087 	beq.w	8002b00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	2220      	movs	r2, #32
 80029f8:	409a      	lsls	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d136      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0216 	bic.w	r2, r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x1da>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0208 	bic.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	223f      	movs	r2, #63	; 0x3f
 8002a50:	409a      	lsls	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d07e      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
        }
        return;
 8002a76:	e079      	b.n	8002b6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10d      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d031      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e02c      	b.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
 8002aa6:	bf00      	nop
 8002aa8:	20000028 	.word	0x20000028
 8002aac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
 8002ac0:	e01e      	b.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10f      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0210 	bic.w	r2, r2, #16
 8002ade:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d032      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d022      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2205      	movs	r2, #5
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d307      	bcc.n	8002b48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f2      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x2cc>
 8002b46:	e000      	b.n	8002b4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
 8002b6a:	e000      	b.n	8002b6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b6c:	bf00      	nop
    }
  }
}
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d108      	bne.n	8002bb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bb2:	e007      	b.n	8002bc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3b10      	subs	r3, #16
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <DMA_CalcBaseAndBitshift+0x64>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <DMA_CalcBaseAndBitshift+0x68>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d909      	bls.n	8002c12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	1d1a      	adds	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c10:	e007      	b.n	8002c22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c1a:	f023 0303 	bic.w	r3, r3, #3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	aaaaaaab 	.word	0xaaaaaaab
 8002c38:	0800675c 	.word	0x0800675c

08002c3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d11f      	bne.n	8002c96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d856      	bhi.n	8002d0a <DMA_CheckFifoParam+0xce>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <DMA_CheckFifoParam+0x28>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c75 	.word	0x08002c75
 8002c68:	08002c87 	.word	0x08002c87
 8002c6c:	08002c75 	.word	0x08002c75
 8002c70:	08002d0b 	.word	0x08002d0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d046      	beq.n	8002d0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c84:	e043      	b.n	8002d0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c8e:	d140      	bne.n	8002d12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e03d      	b.n	8002d12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	d121      	bne.n	8002ce4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d837      	bhi.n	8002d16 <DMA_CheckFifoParam+0xda>
 8002ca6:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <DMA_CheckFifoParam+0x70>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002cc3 	.word	0x08002cc3
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002cd5 	.word	0x08002cd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e030      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d025      	beq.n	8002d1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd2:	e022      	b.n	8002d1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cdc:	d11f      	bne.n	8002d1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ce2:	e01c      	b.n	8002d1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d903      	bls.n	8002cf2 <DMA_CheckFifoParam+0xb6>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d003      	beq.n	8002cf8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf0:	e018      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf6:	e015      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e00b      	b.n	8002d22 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e00a      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e008      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e006      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
    }
  } 
  
  return status; 
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop

08002d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e159      	b.n	8003004 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	f040 8148 	bne.w	8002ffe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d005      	beq.n	8002d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d130      	bne.n	8002de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 0201 	and.w	r2, r3, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d017      	beq.n	8002e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d123      	bne.n	8002e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	08da      	lsrs	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3208      	adds	r2, #8
 8002e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	08da      	lsrs	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3208      	adds	r2, #8
 8002e72:	69b9      	ldr	r1, [r7, #24]
 8002e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0203 	and.w	r2, r3, #3
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80a2 	beq.w	8002ffe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b57      	ldr	r3, [pc, #348]	; (800301c <HAL_GPIO_Init+0x2e8>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a56      	ldr	r2, [pc, #344]	; (800301c <HAL_GPIO_Init+0x2e8>)
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b54      	ldr	r3, [pc, #336]	; (800301c <HAL_GPIO_Init+0x2e8>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed6:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3302      	adds	r3, #2
 8002ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	220f      	movs	r2, #15
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a49      	ldr	r2, [pc, #292]	; (8003024 <HAL_GPIO_Init+0x2f0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d019      	beq.n	8002f36 <HAL_GPIO_Init+0x202>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a48      	ldr	r2, [pc, #288]	; (8003028 <HAL_GPIO_Init+0x2f4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x1fe>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a47      	ldr	r2, [pc, #284]	; (800302c <HAL_GPIO_Init+0x2f8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x1fa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a46      	ldr	r2, [pc, #280]	; (8003030 <HAL_GPIO_Init+0x2fc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x1f6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a45      	ldr	r2, [pc, #276]	; (8003034 <HAL_GPIO_Init+0x300>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x1f2>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e008      	b.n	8002f38 <HAL_GPIO_Init+0x204>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x204>
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e004      	b.n	8002f38 <HAL_GPIO_Init+0x204>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_Init+0x204>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_GPIO_Init+0x204>
 8002f36:	2300      	movs	r3, #0
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	f002 0203 	and.w	r2, r2, #3
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	4093      	lsls	r3, r2
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f48:	4935      	ldr	r1, [pc, #212]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f56:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f7a:	4a2f      	ldr	r2, [pc, #188]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f80:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3301      	adds	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b0f      	cmp	r3, #15
 8003008:	f67f aea2 	bls.w	8002d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	40013800 	.word	0x40013800
 8003024:	40020000 	.word	0x40020000
 8003028:	40020400 	.word	0x40020400
 800302c:	40020800 	.word	0x40020800
 8003030:	40020c00 	.word	0x40020c00
 8003034:	40021000 	.word	0x40021000
 8003038:	40013c00 	.word	0x40013c00

0800303c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e001      	b.n	800305e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003088:	e003      	b.n	8003092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	041a      	lsls	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e267      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030be:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ca:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d112      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	4b82      	ldr	r3, [pc, #520]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e2:	d10b      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x108>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d157      	bne.n	80031a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e242      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d106      	bne.n	8003114 <HAL_RCC_OscConfig+0x74>
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x98>
 800311e:	4b70      	ldr	r3, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6f      	ldr	r2, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6c      	ldr	r2, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003138:	4b69      	ldr	r3, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a68      	ldr	r2, [pc, #416]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7ff f918 	bl	800238c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff f914 	bl	800238c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e207      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xc0>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7ff f904 	bl	800238c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003188:	f7ff f900 	bl	800238c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1f3      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b51      	ldr	r3, [pc, #324]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0xe8>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b6:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1c7      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4937      	ldr	r1, [pc, #220]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e03a      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCC_OscConfig+0x244>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7ff f8b9 	bl	800238c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321e:	f7ff f8b5 	bl	800238c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1a8      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4925      	ldr	r1, [pc, #148]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_OscConfig+0x244>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7ff f898 	bl	800238c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003260:	f7ff f894 	bl	800238c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e187      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d036      	beq.n	80032f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_RCC_OscConfig+0x248>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7ff f878 	bl	800238c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a0:	f7ff f874 	bl	800238c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e167      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80032b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x200>
 80032be:	e01b      	b.n	80032f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_OscConfig+0x248>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7ff f861 	bl	800238c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	e00e      	b.n	80032ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ce:	f7ff f85d 	bl	800238c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d907      	bls.n	80032ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e150      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	42470000 	.word	0x42470000
 80032e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ea      	bne.n	80032ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8097 	beq.w	8003434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b81      	ldr	r3, [pc, #516]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	4b7d      	ldr	r3, [pc, #500]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a7c      	ldr	r2, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b7a      	ldr	r3, [pc, #488]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003332:	2301      	movs	r3, #1
 8003334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b77      	ldr	r3, [pc, #476]	; (8003514 <HAL_RCC_OscConfig+0x474>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d118      	bne.n	8003374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003342:	4b74      	ldr	r3, [pc, #464]	; (8003514 <HAL_RCC_OscConfig+0x474>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a73      	ldr	r2, [pc, #460]	; (8003514 <HAL_RCC_OscConfig+0x474>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334e:	f7ff f81d 	bl	800238c <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7ff f819 	bl	800238c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e10c      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <HAL_RCC_OscConfig+0x474>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d106      	bne.n	800338a <HAL_RCC_OscConfig+0x2ea>
 800337c:	4b64      	ldr	r3, [pc, #400]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a63      	ldr	r2, [pc, #396]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
 8003388:	e01c      	b.n	80033c4 <HAL_RCC_OscConfig+0x324>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b05      	cmp	r3, #5
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0x30c>
 8003392:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a5e      	ldr	r2, [pc, #376]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a5b      	ldr	r2, [pc, #364]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0x324>
 80033ac:	4b58      	ldr	r3, [pc, #352]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a57      	ldr	r2, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	4b55      	ldr	r3, [pc, #340]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033be:	f023 0304 	bic.w	r3, r3, #4
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe ffde 	bl	800238c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fe ffda 	bl	800238c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e0cb      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ea:	4b49      	ldr	r3, [pc, #292]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ee      	beq.n	80033d4 <HAL_RCC_OscConfig+0x334>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f8:	f7fe ffc8 	bl	800238c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe ffc4 	bl	800238c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0b5      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ee      	bne.n	8003400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003428:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	4a38      	ldr	r2, [pc, #224]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800342e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a1 	beq.w	8003580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343e:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b08      	cmp	r3, #8
 8003448:	d05c      	beq.n	8003504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d141      	bne.n	80034d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe ff98 	bl	800238c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe ff94 	bl	800238c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e087      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	4b27      	ldr	r3, [pc, #156]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	3b01      	subs	r3, #1
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	491b      	ldr	r1, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe ff6d 	bl	800238c <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe ff69 	bl	800238c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e05c      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x416>
 80034d4:	e054      	b.n	8003580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe ff56 	bl	800238c <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe ff52 	bl	800238c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e045      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x444>
 8003502:	e03d      	b.n	8003580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e038      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
 8003510:	40023800 	.word	0x40023800
 8003514:	40007000 	.word	0x40007000
 8003518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x4ec>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d028      	beq.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d121      	bne.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d11a      	bne.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003554:	4293      	cmp	r3, r2
 8003556:	d111      	bne.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	3b01      	subs	r3, #1
 8003566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0cc      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a4:	4b68      	ldr	r3, [pc, #416]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d90c      	bls.n	80035cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b65      	ldr	r3, [pc, #404]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b8      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e4:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a52      	ldr	r2, [pc, #328]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	494d      	ldr	r1, [pc, #308]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d044      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d119      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d003      	beq.n	800364e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364a:	2b03      	cmp	r3, #3
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e06f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e067      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4934      	ldr	r1, [pc, #208]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003680:	f7fe fe84 	bl	800238c <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	e00a      	b.n	800369e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003688:	f7fe fe80 	bl	800238c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e04f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 020c 	and.w	r2, r3, #12
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1eb      	bne.n	8003688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d20c      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e032      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4916      	ldr	r1, [pc, #88]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	490e      	ldr	r1, [pc, #56]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003716:	f000 f821 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800371a:	4602      	mov	r2, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	490a      	ldr	r1, [pc, #40]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	5ccb      	ldrb	r3, [r1, r3]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fde4 	bl	8002304 <HAL_InitTick>

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023c00 	.word	0x40023c00
 800374c:	40023800 	.word	0x40023800
 8003750:	080066f0 	.word	0x080066f0
 8003754:	20000028 	.word	0x20000028
 8003758:	2000002c 	.word	0x2000002c

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003760:	b090      	sub	sp, #64	; 0x40
 8003762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
 8003768:	2300      	movs	r3, #0
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376c:	2300      	movs	r3, #0
 800376e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d00d      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x40>
 8003780:	2b08      	cmp	r3, #8
 8003782:	f200 80a1 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x34>
 800378a:	2b04      	cmp	r3, #4
 800378c:	d003      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x3a>
 800378e:	e09b      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003794:	e09b      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003796:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800379a:	e098      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800379c:	4b4f      	ldr	r3, [pc, #316]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a6:	4b4d      	ldr	r3, [pc, #308]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d028      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b2:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	2200      	movs	r2, #0
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	627a      	str	r2, [r7, #36]	; 0x24
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037c4:	2100      	movs	r1, #0
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037c8:	fb03 f201 	mul.w	r2, r3, r1
 80037cc:	2300      	movs	r3, #0
 80037ce:	fb00 f303 	mul.w	r3, r0, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d6:	fba0 1202 	umull	r1, r2, r0, r2
 80037da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037dc:	460a      	mov	r2, r1
 80037de:	62ba      	str	r2, [r7, #40]	; 0x28
 80037e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e2:	4413      	add	r3, r2
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	2200      	movs	r2, #0
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	61fa      	str	r2, [r7, #28]
 80037ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037f6:	f7fd f851 	bl	800089c <__aeabi_uldivmod>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4613      	mov	r3, r2
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003802:	e053      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003804:	4b35      	ldr	r3, [pc, #212]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	2200      	movs	r2, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	617a      	str	r2, [r7, #20]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003816:	f04f 0b00 	mov.w	fp, #0
 800381a:	4652      	mov	r2, sl
 800381c:	465b      	mov	r3, fp
 800381e:	f04f 0000 	mov.w	r0, #0
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	0159      	lsls	r1, r3, #5
 8003828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382c:	0150      	lsls	r0, r2, #5
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	ebb2 080a 	subs.w	r8, r2, sl
 8003836:	eb63 090b 	sbc.w	r9, r3, fp
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003846:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800384a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800384e:	ebb2 0408 	subs.w	r4, r2, r8
 8003852:	eb63 0509 	sbc.w	r5, r3, r9
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	00eb      	lsls	r3, r5, #3
 8003860:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003864:	00e2      	lsls	r2, r4, #3
 8003866:	4614      	mov	r4, r2
 8003868:	461d      	mov	r5, r3
 800386a:	eb14 030a 	adds.w	r3, r4, sl
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	eb45 030b 	adc.w	r3, r5, fp
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003882:	4629      	mov	r1, r5
 8003884:	028b      	lsls	r3, r1, #10
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800388c:	4621      	mov	r1, r4
 800388e:	028a      	lsls	r2, r1, #10
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	2200      	movs	r2, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	60fa      	str	r2, [r7, #12]
 800389c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a0:	f7fc fffc 	bl	800089c <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3740      	adds	r7, #64	; 0x40
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	016e3600 	.word	0x016e3600

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800390c:	2b00      	cmp	r3, #0
 800390e:	d038      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003910:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003916:	f7fe fd39 	bl	800238c <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800391e:	f7fe fd35 	bl	800238c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0bd      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003930:	4b61      	ldr	r3, [pc, #388]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	071b      	lsls	r3, r3, #28
 800394e:	495a      	ldr	r1, [pc, #360]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003956:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800395c:	f7fe fd16 	bl	800238c <HAL_GetTick>
 8003960:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003964:	f7fe fd12 	bl	800238c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e09a      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003976:	4b50      	ldr	r3, [pc, #320]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8083 	beq.w	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	4b48      	ldr	r3, [pc, #288]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	4a47      	ldr	r2, [pc, #284]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6413      	str	r3, [r2, #64]	; 0x40
 80039a0:	4b45      	ldr	r3, [pc, #276]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a42      	ldr	r2, [pc, #264]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039b8:	f7fe fce8 	bl	800238c <HAL_GetTick>
 80039bc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039c0:	f7fe fce4 	bl	800238c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e06c      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039d2:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039de:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d02f      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d028      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039fc:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a04:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a06:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a12:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a18:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d114      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fe fcb2 	bl	800238c <HAL_GetTick>
 8003a28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fcae 	bl	800238c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e034      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ee      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a5a:	d10d      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a70:	4911      	ldr	r1, [pc, #68]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
 8003a76:	e005      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a82:	6093      	str	r3, [r2, #8]
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a90:	4909      	ldr	r1, [pc, #36]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7d1a      	ldrb	r2, [r3, #20]
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003aa8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	42470068 	.word	0x42470068
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	42470e40 	.word	0x42470e40
 8003ac4:	424711e0 	.word	0x424711e0

08003ac8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e066      	b.n	8003bac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	7f5b      	ldrb	r3, [r3, #29]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe f8d2 	bl	8001c98 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	22ca      	movs	r2, #202	; 0xca
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2253      	movs	r2, #83	; 0x53
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa45 	bl	8003f9a <RTC_EnterInitMode>
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d12c      	bne.n	8003b74 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68d2      	ldr	r2, [r2, #12]
 8003b54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6919      	ldr	r1, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	041a      	lsls	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa4c 	bl	8004008 <RTC_ExitInitMode>
 8003b70:	4603      	mov	r3, r0
 8003b72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d113      	bne.n	8003ba2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	22ff      	movs	r2, #255	; 0xff
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	7f1b      	ldrb	r3, [r3, #28]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_RTC_SetTime+0x1c>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e087      	b.n	8003ce0 <HAL_RTC_SetTime+0x12c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d126      	bne.n	8003c30 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fa29 	bl	8004052 <RTC_ByteToBcd2>
 8003c00:	4603      	mov	r3, r0
 8003c02:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	785b      	ldrb	r3, [r3, #1]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fa22 	bl	8004052 <RTC_ByteToBcd2>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c12:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	789b      	ldrb	r3, [r3, #2]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fa1a 	bl	8004052 <RTC_ByteToBcd2>
 8003c1e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c20:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	78db      	ldrb	r3, [r3, #3]
 8003c28:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e018      	b.n	8003c62 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2200      	movs	r2, #0
 8003c42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003c50:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003c56:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	78db      	ldrb	r3, [r3, #3]
 8003c5c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	22ca      	movs	r2, #202	; 0xca
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2253      	movs	r2, #83	; 0x53
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f991 	bl	8003f9a <RTC_EnterInitMode>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d120      	bne.n	8003cc4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ca0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6899      	ldr	r1, [r3, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f9a4 	bl	8004008 <RTC_ExitInitMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	771a      	strb	r2, [r3, #28]

  return status;
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}

08003ce8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0d9b      	lsrs	r3, r3, #22
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11a      	bne.n	8003d9a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f98f 	bl	800408c <RTC_Bcd2ToByte>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f986 	bl	800408c <RTC_Bcd2ToByte>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	789b      	ldrb	r3, [r3, #2]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f97d 	bl	800408c <RTC_Bcd2ToByte>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	7f1b      	ldrb	r3, [r3, #28]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_RTC_SetDate+0x1c>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e071      	b.n	8003ea4 <HAL_RTC_SetDate+0x100>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10e      	bne.n	8003df0 <HAL_RTC_SetDate+0x4c>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	330a      	adds	r3, #10
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11c      	bne.n	8003e30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	78db      	ldrb	r3, [r3, #3]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f929 	bl	8004052 <RTC_ByteToBcd2>
 8003e00:	4603      	mov	r3, r0
 8003e02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f922 	bl	8004052 <RTC_ByteToBcd2>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	789b      	ldrb	r3, [r3, #2]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f91a 	bl	8004052 <RTC_ByteToBcd2>
 8003e1e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e20:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e00e      	b.n	8003e4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	78db      	ldrb	r3, [r3, #3]
 8003e34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003e3c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003e42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	22ca      	movs	r2, #202	; 0xca
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2253      	movs	r2, #83	; 0x53
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f89b 	bl	8003f9a <RTC_EnterInitMode>
 8003e64:	4603      	mov	r3, r0
 8003e66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8c2 	bl	8004008 <RTC_ExitInitMode>
 8003e84:	4603      	mov	r3, r0
 8003e86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	771a      	strb	r2, [r3, #28]

  return status;
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd90      	pop	{r4, r7, pc}

08003eac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ec6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003eca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	0b5b      	lsrs	r3, r3, #13
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11a      	bne.n	8003f40 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	78db      	ldrb	r3, [r3, #3]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f8bc 	bl	800408c <RTC_Bcd2ToByte>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f8b3 	bl	800408c <RTC_Bcd2ToByte>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	789b      	ldrb	r3, [r3, #2]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f8aa 	bl	800408c <RTC_Bcd2ToByte>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f64:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f66:	f7fe fa11 	bl	800238c <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f6c:	e009      	b.n	8003f82 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f6e:	f7fe fa0d 	bl	800238c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f7c:	d901      	bls.n	8003f82 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e007      	b.n	8003f92 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ee      	beq.n	8003f6e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d122      	bne.n	8003ffe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fc8:	f7fe f9e0 	bl	800238c <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003fce:	e00c      	b.n	8003fea <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fd0:	f7fe f9dc 	bl	800238c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fde:	d904      	bls.n	8003fea <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <RTC_EnterInitMode+0x64>
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d1e8      	bne.n	8003fd0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004022:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff ff89 	bl	8003f4a <HAL_RTC_WaitForSynchro>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2204      	movs	r2, #4
 8004042:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004060:	e005      	b.n	800406e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	3301      	adds	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	3b0a      	subs	r3, #10
 800406c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	2b09      	cmp	r3, #9
 8004072:	d8f6      	bhi.n	8004062 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	b2da      	uxtb	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	4313      	orrs	r3, r2
 800407e:	b2db      	uxtb	r3, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	4413      	add	r3, r2
 80040b6:	b2db      	uxtb	r3, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e041      	b.n	800415a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fd fe00 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f000 ffce 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e041      	b.n	80041f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f839 	bl	8004200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f000 ff7f 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_TIM_PWM_Start_DMA+0x2c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e022      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x72>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d109      	bne.n	800425a <HAL_TIM_PWM_Start_DMA+0x46>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e015      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x72>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d109      	bne.n	8004274 <HAL_TIM_PWM_Start_DMA+0x60>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e008      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x72>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
 800428c:	e15d      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e022      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0xda>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d109      	bne.n	80042c2 <HAL_TIM_PWM_Start_DMA+0xae>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	e015      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0xda>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d109      	bne.n	80042dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e008      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0xda>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d024      	beq.n	800433c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <HAL_TIM_PWM_Start_DMA+0xee>
 80042f8:	887b      	ldrh	r3, [r7, #2]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e123      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004310:	e016      	b.n	8004340 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d104      	bne.n	8004322 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004320:	e00e      	b.n	8004340 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d104      	bne.n	8004332 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004330:	e006      	b.n	8004340 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800433a:	e001      	b.n	8004340 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e104      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	f200 80ae 	bhi.w	80044a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004385 	.word	0x08004385
 8004354:	080044a5 	.word	0x080044a5
 8004358:	080044a5 	.word	0x080044a5
 800435c:	080044a5 	.word	0x080044a5
 8004360:	080043cd 	.word	0x080043cd
 8004364:	080044a5 	.word	0x080044a5
 8004368:	080044a5 	.word	0x080044a5
 800436c:	080044a5 	.word	0x080044a5
 8004370:	08004415 	.word	0x08004415
 8004374:	080044a5 	.word	0x080044a5
 8004378:	080044a5 	.word	0x080044a5
 800437c:	080044a5 	.word	0x080044a5
 8004380:	0800445d 	.word	0x0800445d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	4a72      	ldr	r2, [pc, #456]	; (8004554 <HAL_TIM_PWM_Start_DMA+0x340>)
 800438a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	4a71      	ldr	r2, [pc, #452]	; (8004558 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	4a70      	ldr	r2, [pc, #448]	; (800455c <HAL_TIM_PWM_Start_DMA+0x348>)
 800439a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3334      	adds	r3, #52	; 0x34
 80043a8:	461a      	mov	r2, r3
 80043aa:	887b      	ldrh	r3, [r7, #2]
 80043ac:	f7fe f9de 	bl	800276c <HAL_DMA_Start_IT>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0c7      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c8:	60da      	str	r2, [r3, #12]
      break;
 80043ca:	e06e      	b.n	80044aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	4a60      	ldr	r2, [pc, #384]	; (8004554 <HAL_TIM_PWM_Start_DMA+0x340>)
 80043d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	4a5f      	ldr	r2, [pc, #380]	; (8004558 <HAL_TIM_PWM_Start_DMA+0x344>)
 80043da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	4a5e      	ldr	r2, [pc, #376]	; (800455c <HAL_TIM_PWM_Start_DMA+0x348>)
 80043e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3338      	adds	r3, #56	; 0x38
 80043f0:	461a      	mov	r2, r3
 80043f2:	887b      	ldrh	r3, [r7, #2]
 80043f4:	f7fe f9ba 	bl	800276c <HAL_DMA_Start_IT>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e0a3      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004410:	60da      	str	r2, [r3, #12]
      break;
 8004412:	e04a      	b.n	80044aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	4a4e      	ldr	r2, [pc, #312]	; (8004554 <HAL_TIM_PWM_Start_DMA+0x340>)
 800441a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	4a4d      	ldr	r2, [pc, #308]	; (8004558 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a4c      	ldr	r2, [pc, #304]	; (800455c <HAL_TIM_PWM_Start_DMA+0x348>)
 800442a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	333c      	adds	r3, #60	; 0x3c
 8004438:	461a      	mov	r2, r3
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	f7fe f996 	bl	800276c <HAL_DMA_Start_IT>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e07f      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004458:	60da      	str	r2, [r3, #12]
      break;
 800445a:	e026      	b.n	80044aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004462:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	4a3b      	ldr	r2, [pc, #236]	; (8004558 <HAL_TIM_PWM_Start_DMA+0x344>)
 800446a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4a3a      	ldr	r2, [pc, #232]	; (800455c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004472:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3340      	adds	r3, #64	; 0x40
 8004480:	461a      	mov	r2, r3
 8004482:	887b      	ldrh	r3, [r7, #2]
 8004484:	f7fe f972 	bl	800276c <HAL_DMA_Start_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e05b      	b.n	800454a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044a0:	60da      	str	r2, [r3, #12]
      break;
 80044a2:	e002      	b.n	80044aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
      break;
 80044a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d14b      	bne.n	8004548 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2201      	movs	r2, #1
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f899 	bl	80055f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a27      	ldr	r2, [pc, #156]	; (8004560 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a20      	ldr	r2, [pc, #128]	; (8004560 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x300>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d013      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x300>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_TIM_PWM_Start_DMA+0x350>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x300>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <HAL_TIM_PWM_Start_DMA+0x354>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x300>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_TIM_PWM_Start_DMA+0x358>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_PWM_Start_DMA+0x300>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d010      	beq.n	8004548 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	e007      	b.n	8004548 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	08004f95 	.word	0x08004f95
 8004558:	0800503d 	.word	0x0800503d
 800455c:	08004f03 	.word	0x08004f03
 8004560:	40010000 	.word	0x40010000
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40014000 	.word	0x40014000

08004574 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	d855      	bhi.n	8004634 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045c5 	.word	0x080045c5
 8004594:	08004635 	.word	0x08004635
 8004598:	08004635 	.word	0x08004635
 800459c:	08004635 	.word	0x08004635
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	08004635 	.word	0x08004635
 80045a8:	08004635 	.word	0x08004635
 80045ac:	08004635 	.word	0x08004635
 80045b0:	080045fd 	.word	0x080045fd
 80045b4:	08004635 	.word	0x08004635
 80045b8:	08004635 	.word	0x08004635
 80045bc:	08004635 	.word	0x08004635
 80045c0:	08004619 	.word	0x08004619
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe f91f 	bl	800281c <HAL_DMA_Abort_IT>
      break;
 80045de:	e02c      	b.n	800463a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe f911 	bl	800281c <HAL_DMA_Abort_IT>
      break;
 80045fa:	e01e      	b.n	800463a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	4618      	mov	r0, r3
 8004612:	f7fe f903 	bl	800281c <HAL_DMA_Abort_IT>
      break;
 8004616:	e010      	b.n	800463a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004626:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe f8f5 	bl	800281c <HAL_DMA_Abort_IT>
      break;
 8004632:	e002      	b.n	800463a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      break;
 8004638:	bf00      	nop
  }

  if (status == HAL_OK)
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d157      	bne.n	80046f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 ffd1 	bl	80055f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d117      	bne.n	8004688 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10f      	bne.n	8004688 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	f240 4344 	movw	r3, #1092	; 0x444
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10f      	bne.n	80046b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a1a      	ldr	r2, [r3, #32]
 800469e:	f240 4344 	movw	r3, #1092	; 0x444
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d107      	bne.n	80046b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c6:	e013      	b.n	80046f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d104      	bne.n	80046d8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d6:	e00b      	b.n	80046f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d104      	bne.n	80046e8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e6:	e003      	b.n	80046f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000

08004700 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e097      	b.n	8004844 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fd fb35 	bl	8001d98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004744:	f023 0307 	bic.w	r3, r3, #7
 8004748:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3304      	adds	r3, #4
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 fca5 	bl	80050a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	4313      	orrs	r3, r2
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80047a0:	f023 030c 	bic.w	r3, r3, #12
 80047a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	4313      	orrs	r3, r2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	011a      	lsls	r2, r3, #4
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	031b      	lsls	r3, r3, #12
 80047d0:	4313      	orrs	r3, r2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	4313      	orrs	r3, r2
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004864:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800486c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004874:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d110      	bne.n	800489e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d102      	bne.n	8004888 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004882:	7b7b      	ldrb	r3, [r7, #13]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d001      	beq.n	800488c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e069      	b.n	8004960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800489c:	e031      	b.n	8004902 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d110      	bne.n	80048c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d102      	bne.n	80048b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048aa:	7b3b      	ldrb	r3, [r7, #12]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d001      	beq.n	80048b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e055      	b.n	8004960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c4:	e01d      	b.n	8004902 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d108      	bne.n	80048de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048d2:	7b7b      	ldrb	r3, [r7, #13]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d102      	bne.n	80048de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048d8:	7b3b      	ldrb	r3, [r7, #12]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e03e      	b.n	8004960 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_TIM_Encoder_Start+0xc4>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b04      	cmp	r3, #4
 800490c:	d008      	beq.n	8004920 <HAL_TIM_Encoder_Start+0xd4>
 800490e:	e00f      	b.n	8004930 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fe69 	bl	80055f0 <TIM_CCxChannelCmd>
      break;
 800491e:	e016      	b.n	800494e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2201      	movs	r2, #1
 8004926:	2104      	movs	r1, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fe61 	bl	80055f0 <TIM_CCxChannelCmd>
      break;
 800492e:	e00e      	b.n	800494e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2201      	movs	r2, #1
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fe59 	bl	80055f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	2104      	movs	r1, #4
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fe52 	bl	80055f0 <TIM_CCxChannelCmd>
      break;
 800494c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b02      	cmp	r3, #2
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0202 	mvn.w	r2, #2
 8004994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa81 	bl	8004eb2 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa73 	bl	8004e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fff7 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0204 	mvn.w	r2, #4
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa57 	bl	8004eb2 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa49 	bl	8004e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 ffcd 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d122      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d11b      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0208 	mvn.w	r2, #8
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2204      	movs	r2, #4
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa2d 	bl	8004eb2 <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa1f 	bl	8004e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 ffa3 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d122      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d11b      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0210 	mvn.w	r2, #16
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2208      	movs	r2, #8
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa03 	bl	8004eb2 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9f5 	bl	8004e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 ff79 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d10e      	bne.n	8004aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0201 	mvn.w	r2, #1
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9cf 	bl	8004e8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b80      	cmp	r3, #128	; 0x80
 8004af8:	d10e      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b04:	2b80      	cmp	r3, #128	; 0x80
 8004b06:	d107      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fe5c 	bl	80057d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d10e      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d107      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9cb 	bl	8004eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d10e      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d107      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0220 	mvn.w	r2, #32
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fe26 	bl	80057bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e0ae      	b.n	8004cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b0c      	cmp	r3, #12
 8004ba2:	f200 809f 	bhi.w	8004ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004ce5 	.word	0x08004ce5
 8004bb4:	08004ce5 	.word	0x08004ce5
 8004bb8:	08004ce5 	.word	0x08004ce5
 8004bbc:	08004c21 	.word	0x08004c21
 8004bc0:	08004ce5 	.word	0x08004ce5
 8004bc4:	08004ce5 	.word	0x08004ce5
 8004bc8:	08004ce5 	.word	0x08004ce5
 8004bcc:	08004c63 	.word	0x08004c63
 8004bd0:	08004ce5 	.word	0x08004ce5
 8004bd4:	08004ce5 	.word	0x08004ce5
 8004bd8:	08004ce5 	.word	0x08004ce5
 8004bdc:	08004ca3 	.word	0x08004ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fadc 	bl	80051a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0204 	bic.w	r2, r2, #4
 8004c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6999      	ldr	r1, [r3, #24]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	619a      	str	r2, [r3, #24]
      break;
 8004c1e:	e064      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fb22 	bl	8005270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6999      	ldr	r1, [r3, #24]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	619a      	str	r2, [r3, #24]
      break;
 8004c60:	e043      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fb6d 	bl	8005348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0208 	orr.w	r2, r2, #8
 8004c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0204 	bic.w	r2, r2, #4
 8004c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69d9      	ldr	r1, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	61da      	str	r2, [r3, #28]
      break;
 8004ca0:	e023      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fbb7 	bl	800541c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69d9      	ldr	r1, [r3, #28]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	021a      	lsls	r2, r3, #8
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	61da      	str	r2, [r3, #28]
      break;
 8004ce2:	e002      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIM_ConfigClockSource+0x1c>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0b4      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x186>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d50:	d03e      	beq.n	8004dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8004d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d56:	f200 8087 	bhi.w	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	f000 8086 	beq.w	8004e6e <HAL_TIM_ConfigClockSource+0x172>
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d87f      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b70      	cmp	r3, #112	; 0x70
 8004d6a:	d01a      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d87b      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b60      	cmp	r3, #96	; 0x60
 8004d72:	d050      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x11a>
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d877      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b50      	cmp	r3, #80	; 0x50
 8004d7a:	d03c      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0xfa>
 8004d7c:	2b50      	cmp	r3, #80	; 0x50
 8004d7e:	d873      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d058      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x13a>
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d86f      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b30      	cmp	r3, #48	; 0x30
 8004d8a:	d064      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d86b      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d060      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d867      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05c      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d05a      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	e062      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6899      	ldr	r1, [r3, #8]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f000 fbfd 	bl	80055b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	609a      	str	r2, [r3, #8]
      break;
 8004dce:	e04f      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f000 fbe6 	bl	80055b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df2:	609a      	str	r2, [r3, #8]
      break;
 8004df4:	e03c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f000 fb5a 	bl	80054bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2150      	movs	r1, #80	; 0x50
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fbb3 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004e14:	e02c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f000 fb79 	bl	800551a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2160      	movs	r1, #96	; 0x60
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fba3 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004e34:	e01c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f000 fb3a 	bl	80054bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2140      	movs	r1, #64	; 0x40
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fb93 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004e54:	e00c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f000 fb8a 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004e66:	e003      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6c:	e000      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d107      	bne.n	8004f2a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	e02a      	b.n	8004f80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2202      	movs	r2, #2
 8004f38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f42:	e01d      	b.n	8004f80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d107      	bne.n	8004f5e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2204      	movs	r2, #4
 8004f52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5c:	e010      	b.n	8004f80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d107      	bne.n	8004f78 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f76:	e003      	b.n	8004f80 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff ffb4 	bl	8004eee <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d10b      	bne.n	8004fc4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d136      	bne.n	8005028 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc2:	e031      	b.n	8005028 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d10b      	bne.n	8004fe6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d125      	bne.n	8005028 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe4:	e020      	b.n	8005028 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d10b      	bne.n	8005008 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d114      	bne.n	8005028 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005006:	e00f      	b.n	8005028 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	429a      	cmp	r2, r3
 8005010:	d10a      	bne.n	8005028 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2208      	movs	r2, #8
 8005016:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fcbf 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d103      	bne.n	800505c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	771a      	strb	r2, [r3, #28]
 800505a:	e019      	b.n	8005090 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d103      	bne.n	800506e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2202      	movs	r2, #2
 800506a:	771a      	strb	r2, [r3, #28]
 800506c:	e010      	b.n	8005090 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d103      	bne.n	8005080 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2204      	movs	r2, #4
 800507c:	771a      	strb	r2, [r3, #28]
 800507e:	e007      	b.n	8005090 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d102      	bne.n	8005090 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2208      	movs	r2, #8
 800508e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff ff18 	bl	8004ec6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a34      	ldr	r2, [pc, #208]	; (8005188 <TIM_Base_SetConfig+0xe4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a31      	ldr	r2, [pc, #196]	; (800518c <TIM_Base_SetConfig+0xe8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a30      	ldr	r2, [pc, #192]	; (8005190 <TIM_Base_SetConfig+0xec>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2f      	ldr	r2, [pc, #188]	; (8005194 <TIM_Base_SetConfig+0xf0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a25      	ldr	r2, [pc, #148]	; (8005188 <TIM_Base_SetConfig+0xe4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01b      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d017      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a22      	ldr	r2, [pc, #136]	; (800518c <TIM_Base_SetConfig+0xe8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a21      	ldr	r2, [pc, #132]	; (8005190 <TIM_Base_SetConfig+0xec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a20      	ldr	r2, [pc, #128]	; (8005194 <TIM_Base_SetConfig+0xf0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1f      	ldr	r2, [pc, #124]	; (8005198 <TIM_Base_SetConfig+0xf4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1e      	ldr	r2, [pc, #120]	; (800519c <TIM_Base_SetConfig+0xf8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <TIM_Base_SetConfig+0xfc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a08      	ldr	r2, [pc, #32]	; (8005188 <TIM_Base_SetConfig+0xe4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800

080051a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 0302 	bic.w	r3, r3, #2
 80051ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <TIM_OC1_SetConfig+0xc8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10c      	bne.n	800521a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0308 	bic.w	r3, r3, #8
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 0304 	bic.w	r3, r3, #4
 8005218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a13      	ldr	r2, [pc, #76]	; (800526c <TIM_OC1_SetConfig+0xc8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d111      	bne.n	8005246 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40010000 	.word	0x40010000

08005270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f023 0210 	bic.w	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0320 	bic.w	r3, r3, #32
 80052ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <TIM_OC2_SetConfig+0xd4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d10d      	bne.n	80052ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a15      	ldr	r2, [pc, #84]	; (8005344 <TIM_OC2_SetConfig+0xd4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d113      	bne.n	800531c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000

08005348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <TIM_OC3_SetConfig+0xd0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d10d      	bne.n	80053c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a14      	ldr	r2, [pc, #80]	; (8005418 <TIM_OC3_SetConfig+0xd0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d113      	bne.n	80053f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	621a      	str	r2, [r3, #32]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	40010000 	.word	0x40010000

0800541c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	031b      	lsls	r3, r3, #12
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <TIM_OC4_SetConfig+0x9c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d109      	bne.n	8005490 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000

080054bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f023 0201 	bic.w	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 030a 	bic.w	r3, r3, #10
 80054f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551a:	b480      	push	{r7}
 800551c:	b087      	sub	sp, #28
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0210 	bic.w	r2, r3, #16
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	031b      	lsls	r3, r3, #12
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	f043 0307 	orr.w	r3, r3, #7
 800559c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	021a      	lsls	r2, r3, #8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2201      	movs	r2, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e050      	b.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d018      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d013      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00e      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a16      	ldr	r2, [pc, #88]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d009      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a15      	ldr	r2, [pc, #84]	; (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d004      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10c      	bne.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40014000 	.word	0x40014000

08005718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005730:	2302      	movs	r3, #2
 8005732:	e03d      	b.n	80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <Set_LED>:

uint8_t LED_Data[NUM_LEDS][3]; // color data green / red / blue
volatile int datasentflag;


void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
    if(LEDnum >= 0 && LEDnum < NUM_LEDS) {
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db22      	blt.n	800583e <Set_LED+0x5a>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b8c      	cmp	r3, #140	; 0x8c
 80057fc:	dc1f      	bgt.n	800583e <Set_LED+0x5a>
        LED_Data[LEDnum][0] = Green;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	b2d8      	uxtb	r0, r3
 8005802:	4912      	ldr	r1, [pc, #72]	; (800584c <Set_LED+0x68>)
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4613      	mov	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4413      	add	r3, r2
 800580c:	440b      	add	r3, r1
 800580e:	4602      	mov	r2, r0
 8005810:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	b2d8      	uxtb	r0, r3
 8005816:	490d      	ldr	r1, [pc, #52]	; (800584c <Set_LED+0x68>)
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	440b      	add	r3, r1
 8005822:	3301      	adds	r3, #1
 8005824:	4602      	mov	r2, r0
 8005826:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b2d8      	uxtb	r0, r3
 800582c:	4907      	ldr	r1, [pc, #28]	; (800584c <Set_LED+0x68>)
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	440b      	add	r3, r1
 8005838:	3302      	adds	r3, #2
 800583a:	4602      	mov	r2, r0
 800583c:	701a      	strb	r2, [r3, #0]
    }
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000304 	.word	0x20000304

08005850 <Set_LED_Hex>:

void Set_LED_Hex(int LEDnum, uint32_t color) {
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
    if(LEDnum >= 0 && LEDnum < NUM_LEDS) {
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	db24      	blt.n	80058aa <Set_LED_Hex+0x5a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b8c      	cmp	r3, #140	; 0x8c
 8005864:	dc21      	bgt.n	80058aa <Set_LED_Hex+0x5a>
        uint8_t Red = (color >> 16) & 0xFF;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	0c1b      	lsrs	r3, r3, #16
 800586a:	73fb      	strb	r3, [r7, #15]
        uint8_t Green = (color >> 8) & 0xFF;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	73bb      	strb	r3, [r7, #14]
        uint8_t Blue = color & 0xFF;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	737b      	strb	r3, [r7, #13]
        LED_Data[LEDnum][0] = Green;
 8005876:	4910      	ldr	r1, [pc, #64]	; (80058b8 <Set_LED_Hex+0x68>)
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4413      	add	r3, r2
 8005880:	440b      	add	r3, r1
 8005882:	7bba      	ldrb	r2, [r7, #14]
 8005884:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 8005886:	490c      	ldr	r1, [pc, #48]	; (80058b8 <Set_LED_Hex+0x68>)
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	4413      	add	r3, r2
 8005890:	440b      	add	r3, r1
 8005892:	3301      	adds	r3, #1
 8005894:	7bfa      	ldrb	r2, [r7, #15]
 8005896:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 8005898:	4907      	ldr	r1, [pc, #28]	; (80058b8 <Set_LED_Hex+0x68>)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	4413      	add	r3, r2
 80058a2:	440b      	add	r3, r1
 80058a4:	3302      	adds	r3, #2
 80058a6:	7b7a      	ldrb	r2, [r7, #13]
 80058a8:	701a      	strb	r2, [r3, #0]
    }
}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000304 	.word	0x20000304

080058bc <WS2812B_Send>:


uint16_t pwmData[(24 * NUM_LEDS) + RESET_SLOTS]; // Each LED requires 24 bits.

void WS2812B_Send(TIM_HandleTypeDef *htim) { // Changed to pointer to match typical HAL use.
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    uint32_t indx = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
    uint32_t data;

//     Shifting colors into 24-bit buffer
    for (int i = 0; i < NUM_LEDS; i++) {
 80058c8:	2300      	movs	r3, #0
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e03e      	b.n	800594c <WS2812B_Send+0x90>

        data = ((LED_Data[i][0] << 16) | (LED_Data[i][1] << 8) | (LED_Data[i][2]));
 80058ce:	4934      	ldr	r1, [pc, #208]	; (80059a0 <WS2812B_Send+0xe4>)
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4613      	mov	r3, r2
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	4413      	add	r3, r2
 80058d8:	440b      	add	r3, r1
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	0419      	lsls	r1, r3, #16
 80058de:	4830      	ldr	r0, [pc, #192]	; (80059a0 <WS2812B_Send+0xe4>)
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	4403      	add	r3, r0
 80058ea:	3301      	adds	r3, #1
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	4319      	orrs	r1, r3
 80058f2:	482b      	ldr	r0, [pc, #172]	; (80059a0 <WS2812B_Send+0xe4>)
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	4403      	add	r3, r0
 80058fe:	3302      	adds	r3, #2
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	430b      	orrs	r3, r1
 8005904:	60fb      	str	r3, [r7, #12]

        for (int j = 23; j >= 0; j--) {
 8005906:	2317      	movs	r3, #23
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e019      	b.n	8005940 <WS2812B_Send+0x84>
            if (data & (1 << j))
 800590c:	2201      	movs	r2, #1
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	461a      	mov	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4013      	ands	r3, r2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <WS2812B_Send+0x6e>
                pwmData[indx] = ONE; // Use defined duty cycle for ONE
 800591e:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <WS2812B_Send+0xe8>)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2136      	movs	r1, #54	; 0x36
 8005924:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005928:	e004      	b.n	8005934 <WS2812B_Send+0x78>
            else
                pwmData[indx] = ZERO; // Use defined duty cycle for ZERO
 800592a:	4a1e      	ldr	r2, [pc, #120]	; (80059a4 <WS2812B_Send+0xe8>)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	211b      	movs	r1, #27
 8005930:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            indx++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
        for (int j = 23; j >= 0; j--) {
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	3b01      	subs	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	dae2      	bge.n	800590c <WS2812B_Send+0x50>
    for (int i = 0; i < NUM_LEDS; i++) {
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	3301      	adds	r3, #1
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b8c      	cmp	r3, #140	; 0x8c
 8005950:	ddbd      	ble.n	80058ce <WS2812B_Send+0x12>
        }
    }

    // Create the reset signal by putting low values (0) at the end of pwmData
    for (int j = 0; j < RESET_SLOTS; j++) {
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	e009      	b.n	800596c <WS2812B_Send+0xb0>
        pwmData[indx++] = 0;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	61fa      	str	r2, [r7, #28]
 800595e:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <WS2812B_Send+0xe8>)
 8005960:	2100      	movs	r1, #0
 8005962:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int j = 0; j < RESET_SLOTS; j++) {
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	3301      	adds	r3, #1
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b31      	cmp	r3, #49	; 0x31
 8005970:	ddf2      	ble.n	8005958 <WS2812B_Send+0x9c>
    }

    // Ensure we don't exceed the buffer size, which should never happen by design, but it's good to check.
    if(indx <= sizeof(pwmData)/sizeof(pwmData[0])) {
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f640 526a 	movw	r2, #3434	; 0xd6a
 8005978:	4293      	cmp	r3, r2
 800597a:	d80e      	bhi.n	800599a <WS2812B_Send+0xde>
    	if((pwmData == NULL) && (indx > 0U))
    		return;

        HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_1, (uint32_t*)pwmData, indx);
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	b29b      	uxth	r3, r3
 8005980:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <WS2812B_Send+0xe8>)
 8005982:	2100      	movs	r1, #0
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fe fc45 	bl	8004214 <HAL_TIM_PWM_Start_DMA>
        while (!datasentflag) {}
 800598a:	bf00      	nop
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <WS2812B_Send+0xec>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0fb      	beq.n	800598c <WS2812B_Send+0xd0>
        datasentflag = 0;
 8005994:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <WS2812B_Send+0xec>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
    }

}
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000304 	.word	0x20000304
 80059a4:	200004b0 	.word	0x200004b0
 80059a8:	200004ac 	.word	0x200004ac

080059ac <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80059b4:	2100      	movs	r1, #0
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fe fddc 	bl	8004574 <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    datasentflag = 1;
 80059bc:	4b03      	ldr	r3, [pc, #12]	; (80059cc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200004ac 	.word	0x200004ac

080059d0 <__errno>:
 80059d0:	4b01      	ldr	r3, [pc, #4]	; (80059d8 <__errno+0x8>)
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000034 	.word	0x20000034

080059dc <__libc_init_array>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	4d0d      	ldr	r5, [pc, #52]	; (8005a14 <__libc_init_array+0x38>)
 80059e0:	4c0d      	ldr	r4, [pc, #52]	; (8005a18 <__libc_init_array+0x3c>)
 80059e2:	1b64      	subs	r4, r4, r5
 80059e4:	10a4      	asrs	r4, r4, #2
 80059e6:	2600      	movs	r6, #0
 80059e8:	42a6      	cmp	r6, r4
 80059ea:	d109      	bne.n	8005a00 <__libc_init_array+0x24>
 80059ec:	4d0b      	ldr	r5, [pc, #44]	; (8005a1c <__libc_init_array+0x40>)
 80059ee:	4c0c      	ldr	r4, [pc, #48]	; (8005a20 <__libc_init_array+0x44>)
 80059f0:	f000 fcae 	bl	8006350 <_init>
 80059f4:	1b64      	subs	r4, r4, r5
 80059f6:	10a4      	asrs	r4, r4, #2
 80059f8:	2600      	movs	r6, #0
 80059fa:	42a6      	cmp	r6, r4
 80059fc:	d105      	bne.n	8005a0a <__libc_init_array+0x2e>
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a04:	4798      	blx	r3
 8005a06:	3601      	adds	r6, #1
 8005a08:	e7ee      	b.n	80059e8 <__libc_init_array+0xc>
 8005a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0e:	4798      	blx	r3
 8005a10:	3601      	adds	r6, #1
 8005a12:	e7f2      	b.n	80059fa <__libc_init_array+0x1e>
 8005a14:	080068a0 	.word	0x080068a0
 8005a18:	080068a0 	.word	0x080068a0
 8005a1c:	080068a0 	.word	0x080068a0
 8005a20:	080068a4 	.word	0x080068a4

08005a24 <memset>:
 8005a24:	4402      	add	r2, r0
 8005a26:	4603      	mov	r3, r0
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d100      	bne.n	8005a2e <memset+0xa>
 8005a2c:	4770      	bx	lr
 8005a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a32:	e7f9      	b.n	8005a28 <memset+0x4>

08005a34 <sniprintf>:
 8005a34:	b40c      	push	{r2, r3}
 8005a36:	b530      	push	{r4, r5, lr}
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <sniprintf+0x64>)
 8005a3a:	1e0c      	subs	r4, r1, #0
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	b09d      	sub	sp, #116	; 0x74
 8005a40:	da08      	bge.n	8005a54 <sniprintf+0x20>
 8005a42:	238b      	movs	r3, #139	; 0x8b
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4a:	b01d      	add	sp, #116	; 0x74
 8005a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a50:	b002      	add	sp, #8
 8005a52:	4770      	bx	lr
 8005a54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a5c:	bf14      	ite	ne
 8005a5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a62:	4623      	moveq	r3, r4
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a6c:	9002      	str	r0, [sp, #8]
 8005a6e:	9006      	str	r0, [sp, #24]
 8005a70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a76:	ab21      	add	r3, sp, #132	; 0x84
 8005a78:	a902      	add	r1, sp, #8
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	f000 f875 	bl	8005b6c <_svfiprintf_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	bfbc      	itt	lt
 8005a86:	238b      	movlt	r3, #139	; 0x8b
 8005a88:	602b      	strlt	r3, [r5, #0]
 8005a8a:	2c00      	cmp	r4, #0
 8005a8c:	d0dd      	beq.n	8005a4a <sniprintf+0x16>
 8005a8e:	9b02      	ldr	r3, [sp, #8]
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e7d9      	b.n	8005a4a <sniprintf+0x16>
 8005a96:	bf00      	nop
 8005a98:	20000034 	.word	0x20000034

08005a9c <strchr>:
 8005a9c:	b2c9      	uxtb	r1, r1
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa4:	b11a      	cbz	r2, 8005aae <strchr+0x12>
 8005aa6:	428a      	cmp	r2, r1
 8005aa8:	d1f9      	bne.n	8005a9e <strchr+0x2>
 8005aaa:	4618      	mov	r0, r3
 8005aac:	4770      	bx	lr
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	bf18      	it	ne
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	e7f9      	b.n	8005aaa <strchr+0xe>

08005ab6 <__ssputs_r>:
 8005ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aba:	688e      	ldr	r6, [r1, #8]
 8005abc:	429e      	cmp	r6, r3
 8005abe:	4682      	mov	sl, r0
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	4690      	mov	r8, r2
 8005ac4:	461f      	mov	r7, r3
 8005ac6:	d838      	bhi.n	8005b3a <__ssputs_r+0x84>
 8005ac8:	898a      	ldrh	r2, [r1, #12]
 8005aca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ace:	d032      	beq.n	8005b36 <__ssputs_r+0x80>
 8005ad0:	6825      	ldr	r5, [r4, #0]
 8005ad2:	6909      	ldr	r1, [r1, #16]
 8005ad4:	eba5 0901 	sub.w	r9, r5, r1
 8005ad8:	6965      	ldr	r5, [r4, #20]
 8005ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ade:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	444b      	add	r3, r9
 8005ae6:	106d      	asrs	r5, r5, #1
 8005ae8:	429d      	cmp	r5, r3
 8005aea:	bf38      	it	cc
 8005aec:	461d      	movcc	r5, r3
 8005aee:	0553      	lsls	r3, r2, #21
 8005af0:	d531      	bpl.n	8005b56 <__ssputs_r+0xa0>
 8005af2:	4629      	mov	r1, r5
 8005af4:	f000 fb62 	bl	80061bc <_malloc_r>
 8005af8:	4606      	mov	r6, r0
 8005afa:	b950      	cbnz	r0, 8005b12 <__ssputs_r+0x5c>
 8005afc:	230c      	movs	r3, #12
 8005afe:	f8ca 3000 	str.w	r3, [sl]
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b12:	6921      	ldr	r1, [r4, #16]
 8005b14:	464a      	mov	r2, r9
 8005b16:	f000 fabd 	bl	8006094 <memcpy>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	6126      	str	r6, [r4, #16]
 8005b28:	6165      	str	r5, [r4, #20]
 8005b2a:	444e      	add	r6, r9
 8005b2c:	eba5 0509 	sub.w	r5, r5, r9
 8005b30:	6026      	str	r6, [r4, #0]
 8005b32:	60a5      	str	r5, [r4, #8]
 8005b34:	463e      	mov	r6, r7
 8005b36:	42be      	cmp	r6, r7
 8005b38:	d900      	bls.n	8005b3c <__ssputs_r+0x86>
 8005b3a:	463e      	mov	r6, r7
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4641      	mov	r1, r8
 8005b42:	f000 fab5 	bl	80060b0 <memmove>
 8005b46:	68a3      	ldr	r3, [r4, #8]
 8005b48:	1b9b      	subs	r3, r3, r6
 8005b4a:	60a3      	str	r3, [r4, #8]
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	4433      	add	r3, r6
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	2000      	movs	r0, #0
 8005b54:	e7db      	b.n	8005b0e <__ssputs_r+0x58>
 8005b56:	462a      	mov	r2, r5
 8005b58:	f000 fba4 	bl	80062a4 <_realloc_r>
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d1e1      	bne.n	8005b26 <__ssputs_r+0x70>
 8005b62:	6921      	ldr	r1, [r4, #16]
 8005b64:	4650      	mov	r0, sl
 8005b66:	f000 fabd 	bl	80060e4 <_free_r>
 8005b6a:	e7c7      	b.n	8005afc <__ssputs_r+0x46>

08005b6c <_svfiprintf_r>:
 8005b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b70:	4698      	mov	r8, r3
 8005b72:	898b      	ldrh	r3, [r1, #12]
 8005b74:	061b      	lsls	r3, r3, #24
 8005b76:	b09d      	sub	sp, #116	; 0x74
 8005b78:	4607      	mov	r7, r0
 8005b7a:	460d      	mov	r5, r1
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	d50e      	bpl.n	8005b9e <_svfiprintf_r+0x32>
 8005b80:	690b      	ldr	r3, [r1, #16]
 8005b82:	b963      	cbnz	r3, 8005b9e <_svfiprintf_r+0x32>
 8005b84:	2140      	movs	r1, #64	; 0x40
 8005b86:	f000 fb19 	bl	80061bc <_malloc_r>
 8005b8a:	6028      	str	r0, [r5, #0]
 8005b8c:	6128      	str	r0, [r5, #16]
 8005b8e:	b920      	cbnz	r0, 8005b9a <_svfiprintf_r+0x2e>
 8005b90:	230c      	movs	r3, #12
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e0d1      	b.n	8005d3e <_svfiprintf_r+0x1d2>
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	616b      	str	r3, [r5, #20]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba2:	2320      	movs	r3, #32
 8005ba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bac:	2330      	movs	r3, #48	; 0x30
 8005bae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d58 <_svfiprintf_r+0x1ec>
 8005bb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb6:	f04f 0901 	mov.w	r9, #1
 8005bba:	4623      	mov	r3, r4
 8005bbc:	469a      	mov	sl, r3
 8005bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc2:	b10a      	cbz	r2, 8005bc8 <_svfiprintf_r+0x5c>
 8005bc4:	2a25      	cmp	r2, #37	; 0x25
 8005bc6:	d1f9      	bne.n	8005bbc <_svfiprintf_r+0x50>
 8005bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8005bcc:	d00b      	beq.n	8005be6 <_svfiprintf_r+0x7a>
 8005bce:	465b      	mov	r3, fp
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	f7ff ff6e 	bl	8005ab6 <__ssputs_r>
 8005bda:	3001      	adds	r0, #1
 8005bdc:	f000 80aa 	beq.w	8005d34 <_svfiprintf_r+0x1c8>
 8005be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be2:	445a      	add	r2, fp
 8005be4:	9209      	str	r2, [sp, #36]	; 0x24
 8005be6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80a2 	beq.w	8005d34 <_svfiprintf_r+0x1c8>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bfa:	f10a 0a01 	add.w	sl, sl, #1
 8005bfe:	9304      	str	r3, [sp, #16]
 8005c00:	9307      	str	r3, [sp, #28]
 8005c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c06:	931a      	str	r3, [sp, #104]	; 0x68
 8005c08:	4654      	mov	r4, sl
 8005c0a:	2205      	movs	r2, #5
 8005c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c10:	4851      	ldr	r0, [pc, #324]	; (8005d58 <_svfiprintf_r+0x1ec>)
 8005c12:	f7fa faed 	bl	80001f0 <memchr>
 8005c16:	9a04      	ldr	r2, [sp, #16]
 8005c18:	b9d8      	cbnz	r0, 8005c52 <_svfiprintf_r+0xe6>
 8005c1a:	06d0      	lsls	r0, r2, #27
 8005c1c:	bf44      	itt	mi
 8005c1e:	2320      	movmi	r3, #32
 8005c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c24:	0711      	lsls	r1, r2, #28
 8005c26:	bf44      	itt	mi
 8005c28:	232b      	movmi	r3, #43	; 0x2b
 8005c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c32:	2b2a      	cmp	r3, #42	; 0x2a
 8005c34:	d015      	beq.n	8005c62 <_svfiprintf_r+0xf6>
 8005c36:	9a07      	ldr	r2, [sp, #28]
 8005c38:	4654      	mov	r4, sl
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f04f 0c0a 	mov.w	ip, #10
 8005c40:	4621      	mov	r1, r4
 8005c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c46:	3b30      	subs	r3, #48	; 0x30
 8005c48:	2b09      	cmp	r3, #9
 8005c4a:	d94e      	bls.n	8005cea <_svfiprintf_r+0x17e>
 8005c4c:	b1b0      	cbz	r0, 8005c7c <_svfiprintf_r+0x110>
 8005c4e:	9207      	str	r2, [sp, #28]
 8005c50:	e014      	b.n	8005c7c <_svfiprintf_r+0x110>
 8005c52:	eba0 0308 	sub.w	r3, r0, r8
 8005c56:	fa09 f303 	lsl.w	r3, r9, r3
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	9304      	str	r3, [sp, #16]
 8005c5e:	46a2      	mov	sl, r4
 8005c60:	e7d2      	b.n	8005c08 <_svfiprintf_r+0x9c>
 8005c62:	9b03      	ldr	r3, [sp, #12]
 8005c64:	1d19      	adds	r1, r3, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	9103      	str	r1, [sp, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bfbb      	ittet	lt
 8005c6e:	425b      	neglt	r3, r3
 8005c70:	f042 0202 	orrlt.w	r2, r2, #2
 8005c74:	9307      	strge	r3, [sp, #28]
 8005c76:	9307      	strlt	r3, [sp, #28]
 8005c78:	bfb8      	it	lt
 8005c7a:	9204      	strlt	r2, [sp, #16]
 8005c7c:	7823      	ldrb	r3, [r4, #0]
 8005c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c80:	d10c      	bne.n	8005c9c <_svfiprintf_r+0x130>
 8005c82:	7863      	ldrb	r3, [r4, #1]
 8005c84:	2b2a      	cmp	r3, #42	; 0x2a
 8005c86:	d135      	bne.n	8005cf4 <_svfiprintf_r+0x188>
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	1d1a      	adds	r2, r3, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	9203      	str	r2, [sp, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bfb8      	it	lt
 8005c94:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c98:	3402      	adds	r4, #2
 8005c9a:	9305      	str	r3, [sp, #20]
 8005c9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d68 <_svfiprintf_r+0x1fc>
 8005ca0:	7821      	ldrb	r1, [r4, #0]
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	f7fa faa3 	bl	80001f0 <memchr>
 8005caa:	b140      	cbz	r0, 8005cbe <_svfiprintf_r+0x152>
 8005cac:	2340      	movs	r3, #64	; 0x40
 8005cae:	eba0 000a 	sub.w	r0, r0, sl
 8005cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8005cb6:	9b04      	ldr	r3, [sp, #16]
 8005cb8:	4303      	orrs	r3, r0
 8005cba:	3401      	adds	r4, #1
 8005cbc:	9304      	str	r3, [sp, #16]
 8005cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc2:	4826      	ldr	r0, [pc, #152]	; (8005d5c <_svfiprintf_r+0x1f0>)
 8005cc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cc8:	2206      	movs	r2, #6
 8005cca:	f7fa fa91 	bl	80001f0 <memchr>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d038      	beq.n	8005d44 <_svfiprintf_r+0x1d8>
 8005cd2:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <_svfiprintf_r+0x1f4>)
 8005cd4:	bb1b      	cbnz	r3, 8005d1e <_svfiprintf_r+0x1b2>
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	3307      	adds	r3, #7
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	3308      	adds	r3, #8
 8005ce0:	9303      	str	r3, [sp, #12]
 8005ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce4:	4433      	add	r3, r6
 8005ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce8:	e767      	b.n	8005bba <_svfiprintf_r+0x4e>
 8005cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cee:	460c      	mov	r4, r1
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	e7a5      	b.n	8005c40 <_svfiprintf_r+0xd4>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	3401      	adds	r4, #1
 8005cf8:	9305      	str	r3, [sp, #20]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	f04f 0c0a 	mov.w	ip, #10
 8005d00:	4620      	mov	r0, r4
 8005d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d06:	3a30      	subs	r2, #48	; 0x30
 8005d08:	2a09      	cmp	r2, #9
 8005d0a:	d903      	bls.n	8005d14 <_svfiprintf_r+0x1a8>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0c5      	beq.n	8005c9c <_svfiprintf_r+0x130>
 8005d10:	9105      	str	r1, [sp, #20]
 8005d12:	e7c3      	b.n	8005c9c <_svfiprintf_r+0x130>
 8005d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d18:	4604      	mov	r4, r0
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e7f0      	b.n	8005d00 <_svfiprintf_r+0x194>
 8005d1e:	ab03      	add	r3, sp, #12
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	462a      	mov	r2, r5
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <_svfiprintf_r+0x1f8>)
 8005d26:	a904      	add	r1, sp, #16
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f3af 8000 	nop.w
 8005d2e:	1c42      	adds	r2, r0, #1
 8005d30:	4606      	mov	r6, r0
 8005d32:	d1d6      	bne.n	8005ce2 <_svfiprintf_r+0x176>
 8005d34:	89ab      	ldrh	r3, [r5, #12]
 8005d36:	065b      	lsls	r3, r3, #25
 8005d38:	f53f af2c 	bmi.w	8005b94 <_svfiprintf_r+0x28>
 8005d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d3e:	b01d      	add	sp, #116	; 0x74
 8005d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d44:	ab03      	add	r3, sp, #12
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <_svfiprintf_r+0x1f8>)
 8005d4c:	a904      	add	r1, sp, #16
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f000 f87a 	bl	8005e48 <_printf_i>
 8005d54:	e7eb      	b.n	8005d2e <_svfiprintf_r+0x1c2>
 8005d56:	bf00      	nop
 8005d58:	08006865 	.word	0x08006865
 8005d5c:	0800686f 	.word	0x0800686f
 8005d60:	00000000 	.word	0x00000000
 8005d64:	08005ab7 	.word	0x08005ab7
 8005d68:	0800686b 	.word	0x0800686b

08005d6c <_printf_common>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	4616      	mov	r6, r2
 8005d72:	4699      	mov	r9, r3
 8005d74:	688a      	ldr	r2, [r1, #8]
 8005d76:	690b      	ldr	r3, [r1, #16]
 8005d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bfb8      	it	lt
 8005d80:	4613      	movlt	r3, r2
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d88:	4607      	mov	r7, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b10a      	cbz	r2, 8005d92 <_printf_common+0x26>
 8005d8e:	3301      	adds	r3, #1
 8005d90:	6033      	str	r3, [r6, #0]
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	0699      	lsls	r1, r3, #26
 8005d96:	bf42      	ittt	mi
 8005d98:	6833      	ldrmi	r3, [r6, #0]
 8005d9a:	3302      	addmi	r3, #2
 8005d9c:	6033      	strmi	r3, [r6, #0]
 8005d9e:	6825      	ldr	r5, [r4, #0]
 8005da0:	f015 0506 	ands.w	r5, r5, #6
 8005da4:	d106      	bne.n	8005db4 <_printf_common+0x48>
 8005da6:	f104 0a19 	add.w	sl, r4, #25
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	6832      	ldr	r2, [r6, #0]
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	42ab      	cmp	r3, r5
 8005db2:	dc26      	bgt.n	8005e02 <_printf_common+0x96>
 8005db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db8:	1e13      	subs	r3, r2, #0
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	bf18      	it	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	0692      	lsls	r2, r2, #26
 8005dc2:	d42b      	bmi.n	8005e1c <_printf_common+0xb0>
 8005dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4638      	mov	r0, r7
 8005dcc:	47c0      	blx	r8
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d01e      	beq.n	8005e10 <_printf_common+0xa4>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	68e5      	ldr	r5, [r4, #12]
 8005dd6:	6832      	ldr	r2, [r6, #0]
 8005dd8:	f003 0306 	and.w	r3, r3, #6
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	bf08      	it	eq
 8005de0:	1aad      	subeq	r5, r5, r2
 8005de2:	68a3      	ldr	r3, [r4, #8]
 8005de4:	6922      	ldr	r2, [r4, #16]
 8005de6:	bf0c      	ite	eq
 8005de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dec:	2500      	movne	r5, #0
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bfc4      	itt	gt
 8005df2:	1a9b      	subgt	r3, r3, r2
 8005df4:	18ed      	addgt	r5, r5, r3
 8005df6:	2600      	movs	r6, #0
 8005df8:	341a      	adds	r4, #26
 8005dfa:	42b5      	cmp	r5, r6
 8005dfc:	d11a      	bne.n	8005e34 <_printf_common+0xc8>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e008      	b.n	8005e14 <_printf_common+0xa8>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4652      	mov	r2, sl
 8005e06:	4649      	mov	r1, r9
 8005e08:	4638      	mov	r0, r7
 8005e0a:	47c0      	blx	r8
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d103      	bne.n	8005e18 <_printf_common+0xac>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e18:	3501      	adds	r5, #1
 8005e1a:	e7c6      	b.n	8005daa <_printf_common+0x3e>
 8005e1c:	18e1      	adds	r1, r4, r3
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	2030      	movs	r0, #48	; 0x30
 8005e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e26:	4422      	add	r2, r4
 8005e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e30:	3302      	adds	r3, #2
 8005e32:	e7c7      	b.n	8005dc4 <_printf_common+0x58>
 8005e34:	2301      	movs	r3, #1
 8005e36:	4622      	mov	r2, r4
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	47c0      	blx	r8
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d0e6      	beq.n	8005e10 <_printf_common+0xa4>
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7d9      	b.n	8005dfa <_printf_common+0x8e>
	...

08005e48 <_printf_i>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	7e0f      	ldrb	r7, [r1, #24]
 8005e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e50:	2f78      	cmp	r7, #120	; 0x78
 8005e52:	4691      	mov	r9, r2
 8005e54:	4680      	mov	r8, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	469a      	mov	sl, r3
 8005e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e5e:	d807      	bhi.n	8005e70 <_printf_i+0x28>
 8005e60:	2f62      	cmp	r7, #98	; 0x62
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x32>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 80d8 	beq.w	800601a <_printf_i+0x1d2>
 8005e6a:	2f58      	cmp	r7, #88	; 0x58
 8005e6c:	f000 80a3 	beq.w	8005fb6 <_printf_i+0x16e>
 8005e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e78:	e03a      	b.n	8005ef0 <_printf_i+0xa8>
 8005e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7e:	2b15      	cmp	r3, #21
 8005e80:	d8f6      	bhi.n	8005e70 <_printf_i+0x28>
 8005e82:	a101      	add	r1, pc, #4	; (adr r1, 8005e88 <_printf_i+0x40>)
 8005e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005e71 	.word	0x08005e71
 8005e94:	08005e71 	.word	0x08005e71
 8005e98:	08005e71 	.word	0x08005e71
 8005e9c:	08005e71 	.word	0x08005e71
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e71 	.word	0x08005e71
 8005eac:	08005e71 	.word	0x08005e71
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	08006001 	.word	0x08006001
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005fe3 	.word	0x08005fe3
 8005ec0:	08005e71 	.word	0x08005e71
 8005ec4:	08005e71 	.word	0x08005e71
 8005ec8:	08006023 	.word	0x08006023
 8005ecc:	08005e71 	.word	0x08005e71
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005e71 	.word	0x08005e71
 8005ed8:	08005e71 	.word	0x08005e71
 8005edc:	08005feb 	.word	0x08005feb
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	602a      	str	r2, [r5, #0]
 8005ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0a3      	b.n	800603c <_printf_i+0x1f4>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	6829      	ldr	r1, [r5, #0]
 8005ef8:	0606      	lsls	r6, r0, #24
 8005efa:	f101 0304 	add.w	r3, r1, #4
 8005efe:	d50a      	bpl.n	8005f16 <_printf_i+0xce>
 8005f00:	680e      	ldr	r6, [r1, #0]
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	2e00      	cmp	r6, #0
 8005f06:	da03      	bge.n	8005f10 <_printf_i+0xc8>
 8005f08:	232d      	movs	r3, #45	; 0x2d
 8005f0a:	4276      	negs	r6, r6
 8005f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f10:	485e      	ldr	r0, [pc, #376]	; (800608c <_printf_i+0x244>)
 8005f12:	230a      	movs	r3, #10
 8005f14:	e019      	b.n	8005f4a <_printf_i+0x102>
 8005f16:	680e      	ldr	r6, [r1, #0]
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f1e:	bf18      	it	ne
 8005f20:	b236      	sxthne	r6, r6
 8005f22:	e7ef      	b.n	8005f04 <_printf_i+0xbc>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	6029      	str	r1, [r5, #0]
 8005f2c:	0601      	lsls	r1, r0, #24
 8005f2e:	d501      	bpl.n	8005f34 <_printf_i+0xec>
 8005f30:	681e      	ldr	r6, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <_printf_i+0xf2>
 8005f34:	0646      	lsls	r6, r0, #25
 8005f36:	d5fb      	bpl.n	8005f30 <_printf_i+0xe8>
 8005f38:	881e      	ldrh	r6, [r3, #0]
 8005f3a:	4854      	ldr	r0, [pc, #336]	; (800608c <_printf_i+0x244>)
 8005f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f3e:	bf0c      	ite	eq
 8005f40:	2308      	moveq	r3, #8
 8005f42:	230a      	movne	r3, #10
 8005f44:	2100      	movs	r1, #0
 8005f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4a:	6865      	ldr	r5, [r4, #4]
 8005f4c:	60a5      	str	r5, [r4, #8]
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	bfa2      	ittt	ge
 8005f52:	6821      	ldrge	r1, [r4, #0]
 8005f54:	f021 0104 	bicge.w	r1, r1, #4
 8005f58:	6021      	strge	r1, [r4, #0]
 8005f5a:	b90e      	cbnz	r6, 8005f60 <_printf_i+0x118>
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	d04d      	beq.n	8005ffc <_printf_i+0x1b4>
 8005f60:	4615      	mov	r5, r2
 8005f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f66:	fb03 6711 	mls	r7, r3, r1, r6
 8005f6a:	5dc7      	ldrb	r7, [r0, r7]
 8005f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f70:	4637      	mov	r7, r6
 8005f72:	42bb      	cmp	r3, r7
 8005f74:	460e      	mov	r6, r1
 8005f76:	d9f4      	bls.n	8005f62 <_printf_i+0x11a>
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d10b      	bne.n	8005f94 <_printf_i+0x14c>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	07de      	lsls	r6, r3, #31
 8005f80:	d508      	bpl.n	8005f94 <_printf_i+0x14c>
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	4299      	cmp	r1, r3
 8005f88:	bfde      	ittt	le
 8005f8a:	2330      	movle	r3, #48	; 0x30
 8005f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f94:	1b52      	subs	r2, r2, r5
 8005f96:	6122      	str	r2, [r4, #16]
 8005f98:	f8cd a000 	str.w	sl, [sp]
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	aa03      	add	r2, sp, #12
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f7ff fee2 	bl	8005d6c <_printf_common>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d14c      	bne.n	8006046 <_printf_i+0x1fe>
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	b004      	add	sp, #16
 8005fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb6:	4835      	ldr	r0, [pc, #212]	; (800608c <_printf_i+0x244>)
 8005fb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fbc:	6829      	ldr	r1, [r5, #0]
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc4:	6029      	str	r1, [r5, #0]
 8005fc6:	061d      	lsls	r5, r3, #24
 8005fc8:	d514      	bpl.n	8005ff4 <_printf_i+0x1ac>
 8005fca:	07df      	lsls	r7, r3, #31
 8005fcc:	bf44      	itt	mi
 8005fce:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd2:	6023      	strmi	r3, [r4, #0]
 8005fd4:	b91e      	cbnz	r6, 8005fde <_printf_i+0x196>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f023 0320 	bic.w	r3, r3, #32
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	2310      	movs	r3, #16
 8005fe0:	e7b0      	b.n	8005f44 <_printf_i+0xfc>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f043 0320 	orr.w	r3, r3, #32
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	2378      	movs	r3, #120	; 0x78
 8005fec:	4828      	ldr	r0, [pc, #160]	; (8006090 <_printf_i+0x248>)
 8005fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff2:	e7e3      	b.n	8005fbc <_printf_i+0x174>
 8005ff4:	0659      	lsls	r1, r3, #25
 8005ff6:	bf48      	it	mi
 8005ff8:	b2b6      	uxthmi	r6, r6
 8005ffa:	e7e6      	b.n	8005fca <_printf_i+0x182>
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	e7bb      	b.n	8005f78 <_printf_i+0x130>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	6826      	ldr	r6, [r4, #0]
 8006004:	6961      	ldr	r1, [r4, #20]
 8006006:	1d18      	adds	r0, r3, #4
 8006008:	6028      	str	r0, [r5, #0]
 800600a:	0635      	lsls	r5, r6, #24
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	d501      	bpl.n	8006014 <_printf_i+0x1cc>
 8006010:	6019      	str	r1, [r3, #0]
 8006012:	e002      	b.n	800601a <_printf_i+0x1d2>
 8006014:	0670      	lsls	r0, r6, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0x1c8>
 8006018:	8019      	strh	r1, [r3, #0]
 800601a:	2300      	movs	r3, #0
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	4615      	mov	r5, r2
 8006020:	e7ba      	b.n	8005f98 <_printf_i+0x150>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	1d1a      	adds	r2, r3, #4
 8006026:	602a      	str	r2, [r5, #0]
 8006028:	681d      	ldr	r5, [r3, #0]
 800602a:	6862      	ldr	r2, [r4, #4]
 800602c:	2100      	movs	r1, #0
 800602e:	4628      	mov	r0, r5
 8006030:	f7fa f8de 	bl	80001f0 <memchr>
 8006034:	b108      	cbz	r0, 800603a <_printf_i+0x1f2>
 8006036:	1b40      	subs	r0, r0, r5
 8006038:	6060      	str	r0, [r4, #4]
 800603a:	6863      	ldr	r3, [r4, #4]
 800603c:	6123      	str	r3, [r4, #16]
 800603e:	2300      	movs	r3, #0
 8006040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006044:	e7a8      	b.n	8005f98 <_printf_i+0x150>
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	462a      	mov	r2, r5
 800604a:	4649      	mov	r1, r9
 800604c:	4640      	mov	r0, r8
 800604e:	47d0      	blx	sl
 8006050:	3001      	adds	r0, #1
 8006052:	d0ab      	beq.n	8005fac <_printf_i+0x164>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	079b      	lsls	r3, r3, #30
 8006058:	d413      	bmi.n	8006082 <_printf_i+0x23a>
 800605a:	68e0      	ldr	r0, [r4, #12]
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	4298      	cmp	r0, r3
 8006060:	bfb8      	it	lt
 8006062:	4618      	movlt	r0, r3
 8006064:	e7a4      	b.n	8005fb0 <_printf_i+0x168>
 8006066:	2301      	movs	r3, #1
 8006068:	4632      	mov	r2, r6
 800606a:	4649      	mov	r1, r9
 800606c:	4640      	mov	r0, r8
 800606e:	47d0      	blx	sl
 8006070:	3001      	adds	r0, #1
 8006072:	d09b      	beq.n	8005fac <_printf_i+0x164>
 8006074:	3501      	adds	r5, #1
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	9903      	ldr	r1, [sp, #12]
 800607a:	1a5b      	subs	r3, r3, r1
 800607c:	42ab      	cmp	r3, r5
 800607e:	dcf2      	bgt.n	8006066 <_printf_i+0x21e>
 8006080:	e7eb      	b.n	800605a <_printf_i+0x212>
 8006082:	2500      	movs	r5, #0
 8006084:	f104 0619 	add.w	r6, r4, #25
 8006088:	e7f5      	b.n	8006076 <_printf_i+0x22e>
 800608a:	bf00      	nop
 800608c:	08006876 	.word	0x08006876
 8006090:	08006887 	.word	0x08006887

08006094 <memcpy>:
 8006094:	440a      	add	r2, r1
 8006096:	4291      	cmp	r1, r2
 8006098:	f100 33ff 	add.w	r3, r0, #4294967295
 800609c:	d100      	bne.n	80060a0 <memcpy+0xc>
 800609e:	4770      	bx	lr
 80060a0:	b510      	push	{r4, lr}
 80060a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060aa:	4291      	cmp	r1, r2
 80060ac:	d1f9      	bne.n	80060a2 <memcpy+0xe>
 80060ae:	bd10      	pop	{r4, pc}

080060b0 <memmove>:
 80060b0:	4288      	cmp	r0, r1
 80060b2:	b510      	push	{r4, lr}
 80060b4:	eb01 0402 	add.w	r4, r1, r2
 80060b8:	d902      	bls.n	80060c0 <memmove+0x10>
 80060ba:	4284      	cmp	r4, r0
 80060bc:	4623      	mov	r3, r4
 80060be:	d807      	bhi.n	80060d0 <memmove+0x20>
 80060c0:	1e43      	subs	r3, r0, #1
 80060c2:	42a1      	cmp	r1, r4
 80060c4:	d008      	beq.n	80060d8 <memmove+0x28>
 80060c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ce:	e7f8      	b.n	80060c2 <memmove+0x12>
 80060d0:	4402      	add	r2, r0
 80060d2:	4601      	mov	r1, r0
 80060d4:	428a      	cmp	r2, r1
 80060d6:	d100      	bne.n	80060da <memmove+0x2a>
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060e2:	e7f7      	b.n	80060d4 <memmove+0x24>

080060e4 <_free_r>:
 80060e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060e6:	2900      	cmp	r1, #0
 80060e8:	d044      	beq.n	8006174 <_free_r+0x90>
 80060ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ee:	9001      	str	r0, [sp, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f1a1 0404 	sub.w	r4, r1, #4
 80060f6:	bfb8      	it	lt
 80060f8:	18e4      	addlt	r4, r4, r3
 80060fa:	f000 f913 	bl	8006324 <__malloc_lock>
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <_free_r+0x94>)
 8006100:	9801      	ldr	r0, [sp, #4]
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	b933      	cbnz	r3, 8006114 <_free_r+0x30>
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	6014      	str	r4, [r2, #0]
 800610a:	b003      	add	sp, #12
 800610c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006110:	f000 b90e 	b.w	8006330 <__malloc_unlock>
 8006114:	42a3      	cmp	r3, r4
 8006116:	d908      	bls.n	800612a <_free_r+0x46>
 8006118:	6825      	ldr	r5, [r4, #0]
 800611a:	1961      	adds	r1, r4, r5
 800611c:	428b      	cmp	r3, r1
 800611e:	bf01      	itttt	eq
 8006120:	6819      	ldreq	r1, [r3, #0]
 8006122:	685b      	ldreq	r3, [r3, #4]
 8006124:	1949      	addeq	r1, r1, r5
 8006126:	6021      	streq	r1, [r4, #0]
 8006128:	e7ed      	b.n	8006106 <_free_r+0x22>
 800612a:	461a      	mov	r2, r3
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	b10b      	cbz	r3, 8006134 <_free_r+0x50>
 8006130:	42a3      	cmp	r3, r4
 8006132:	d9fa      	bls.n	800612a <_free_r+0x46>
 8006134:	6811      	ldr	r1, [r2, #0]
 8006136:	1855      	adds	r5, r2, r1
 8006138:	42a5      	cmp	r5, r4
 800613a:	d10b      	bne.n	8006154 <_free_r+0x70>
 800613c:	6824      	ldr	r4, [r4, #0]
 800613e:	4421      	add	r1, r4
 8006140:	1854      	adds	r4, r2, r1
 8006142:	42a3      	cmp	r3, r4
 8006144:	6011      	str	r1, [r2, #0]
 8006146:	d1e0      	bne.n	800610a <_free_r+0x26>
 8006148:	681c      	ldr	r4, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	6053      	str	r3, [r2, #4]
 800614e:	4421      	add	r1, r4
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	e7da      	b.n	800610a <_free_r+0x26>
 8006154:	d902      	bls.n	800615c <_free_r+0x78>
 8006156:	230c      	movs	r3, #12
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	e7d6      	b.n	800610a <_free_r+0x26>
 800615c:	6825      	ldr	r5, [r4, #0]
 800615e:	1961      	adds	r1, r4, r5
 8006160:	428b      	cmp	r3, r1
 8006162:	bf04      	itt	eq
 8006164:	6819      	ldreq	r1, [r3, #0]
 8006166:	685b      	ldreq	r3, [r3, #4]
 8006168:	6063      	str	r3, [r4, #4]
 800616a:	bf04      	itt	eq
 800616c:	1949      	addeq	r1, r1, r5
 800616e:	6021      	streq	r1, [r4, #0]
 8006170:	6054      	str	r4, [r2, #4]
 8006172:	e7ca      	b.n	800610a <_free_r+0x26>
 8006174:	b003      	add	sp, #12
 8006176:	bd30      	pop	{r4, r5, pc}
 8006178:	20001f84 	.word	0x20001f84

0800617c <sbrk_aligned>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4e0e      	ldr	r6, [pc, #56]	; (80061b8 <sbrk_aligned+0x3c>)
 8006180:	460c      	mov	r4, r1
 8006182:	6831      	ldr	r1, [r6, #0]
 8006184:	4605      	mov	r5, r0
 8006186:	b911      	cbnz	r1, 800618e <sbrk_aligned+0x12>
 8006188:	f000 f8bc 	bl	8006304 <_sbrk_r>
 800618c:	6030      	str	r0, [r6, #0]
 800618e:	4621      	mov	r1, r4
 8006190:	4628      	mov	r0, r5
 8006192:	f000 f8b7 	bl	8006304 <_sbrk_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	d00a      	beq.n	80061b0 <sbrk_aligned+0x34>
 800619a:	1cc4      	adds	r4, r0, #3
 800619c:	f024 0403 	bic.w	r4, r4, #3
 80061a0:	42a0      	cmp	r0, r4
 80061a2:	d007      	beq.n	80061b4 <sbrk_aligned+0x38>
 80061a4:	1a21      	subs	r1, r4, r0
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 f8ac 	bl	8006304 <_sbrk_r>
 80061ac:	3001      	adds	r0, #1
 80061ae:	d101      	bne.n	80061b4 <sbrk_aligned+0x38>
 80061b0:	f04f 34ff 	mov.w	r4, #4294967295
 80061b4:	4620      	mov	r0, r4
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	20001f88 	.word	0x20001f88

080061bc <_malloc_r>:
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c0:	1ccd      	adds	r5, r1, #3
 80061c2:	f025 0503 	bic.w	r5, r5, #3
 80061c6:	3508      	adds	r5, #8
 80061c8:	2d0c      	cmp	r5, #12
 80061ca:	bf38      	it	cc
 80061cc:	250c      	movcc	r5, #12
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	4607      	mov	r7, r0
 80061d2:	db01      	blt.n	80061d8 <_malloc_r+0x1c>
 80061d4:	42a9      	cmp	r1, r5
 80061d6:	d905      	bls.n	80061e4 <_malloc_r+0x28>
 80061d8:	230c      	movs	r3, #12
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	2600      	movs	r6, #0
 80061de:	4630      	mov	r0, r6
 80061e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e4:	4e2e      	ldr	r6, [pc, #184]	; (80062a0 <_malloc_r+0xe4>)
 80061e6:	f000 f89d 	bl	8006324 <__malloc_lock>
 80061ea:	6833      	ldr	r3, [r6, #0]
 80061ec:	461c      	mov	r4, r3
 80061ee:	bb34      	cbnz	r4, 800623e <_malloc_r+0x82>
 80061f0:	4629      	mov	r1, r5
 80061f2:	4638      	mov	r0, r7
 80061f4:	f7ff ffc2 	bl	800617c <sbrk_aligned>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	4604      	mov	r4, r0
 80061fc:	d14d      	bne.n	800629a <_malloc_r+0xde>
 80061fe:	6834      	ldr	r4, [r6, #0]
 8006200:	4626      	mov	r6, r4
 8006202:	2e00      	cmp	r6, #0
 8006204:	d140      	bne.n	8006288 <_malloc_r+0xcc>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	4631      	mov	r1, r6
 800620a:	4638      	mov	r0, r7
 800620c:	eb04 0803 	add.w	r8, r4, r3
 8006210:	f000 f878 	bl	8006304 <_sbrk_r>
 8006214:	4580      	cmp	r8, r0
 8006216:	d13a      	bne.n	800628e <_malloc_r+0xd2>
 8006218:	6821      	ldr	r1, [r4, #0]
 800621a:	3503      	adds	r5, #3
 800621c:	1a6d      	subs	r5, r5, r1
 800621e:	f025 0503 	bic.w	r5, r5, #3
 8006222:	3508      	adds	r5, #8
 8006224:	2d0c      	cmp	r5, #12
 8006226:	bf38      	it	cc
 8006228:	250c      	movcc	r5, #12
 800622a:	4629      	mov	r1, r5
 800622c:	4638      	mov	r0, r7
 800622e:	f7ff ffa5 	bl	800617c <sbrk_aligned>
 8006232:	3001      	adds	r0, #1
 8006234:	d02b      	beq.n	800628e <_malloc_r+0xd2>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	442b      	add	r3, r5
 800623a:	6023      	str	r3, [r4, #0]
 800623c:	e00e      	b.n	800625c <_malloc_r+0xa0>
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	1b52      	subs	r2, r2, r5
 8006242:	d41e      	bmi.n	8006282 <_malloc_r+0xc6>
 8006244:	2a0b      	cmp	r2, #11
 8006246:	d916      	bls.n	8006276 <_malloc_r+0xba>
 8006248:	1961      	adds	r1, r4, r5
 800624a:	42a3      	cmp	r3, r4
 800624c:	6025      	str	r5, [r4, #0]
 800624e:	bf18      	it	ne
 8006250:	6059      	strne	r1, [r3, #4]
 8006252:	6863      	ldr	r3, [r4, #4]
 8006254:	bf08      	it	eq
 8006256:	6031      	streq	r1, [r6, #0]
 8006258:	5162      	str	r2, [r4, r5]
 800625a:	604b      	str	r3, [r1, #4]
 800625c:	4638      	mov	r0, r7
 800625e:	f104 060b 	add.w	r6, r4, #11
 8006262:	f000 f865 	bl	8006330 <__malloc_unlock>
 8006266:	f026 0607 	bic.w	r6, r6, #7
 800626a:	1d23      	adds	r3, r4, #4
 800626c:	1af2      	subs	r2, r6, r3
 800626e:	d0b6      	beq.n	80061de <_malloc_r+0x22>
 8006270:	1b9b      	subs	r3, r3, r6
 8006272:	50a3      	str	r3, [r4, r2]
 8006274:	e7b3      	b.n	80061de <_malloc_r+0x22>
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	42a3      	cmp	r3, r4
 800627a:	bf0c      	ite	eq
 800627c:	6032      	streq	r2, [r6, #0]
 800627e:	605a      	strne	r2, [r3, #4]
 8006280:	e7ec      	b.n	800625c <_malloc_r+0xa0>
 8006282:	4623      	mov	r3, r4
 8006284:	6864      	ldr	r4, [r4, #4]
 8006286:	e7b2      	b.n	80061ee <_malloc_r+0x32>
 8006288:	4634      	mov	r4, r6
 800628a:	6876      	ldr	r6, [r6, #4]
 800628c:	e7b9      	b.n	8006202 <_malloc_r+0x46>
 800628e:	230c      	movs	r3, #12
 8006290:	603b      	str	r3, [r7, #0]
 8006292:	4638      	mov	r0, r7
 8006294:	f000 f84c 	bl	8006330 <__malloc_unlock>
 8006298:	e7a1      	b.n	80061de <_malloc_r+0x22>
 800629a:	6025      	str	r5, [r4, #0]
 800629c:	e7de      	b.n	800625c <_malloc_r+0xa0>
 800629e:	bf00      	nop
 80062a0:	20001f84 	.word	0x20001f84

080062a4 <_realloc_r>:
 80062a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a8:	4680      	mov	r8, r0
 80062aa:	4614      	mov	r4, r2
 80062ac:	460e      	mov	r6, r1
 80062ae:	b921      	cbnz	r1, 80062ba <_realloc_r+0x16>
 80062b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062b4:	4611      	mov	r1, r2
 80062b6:	f7ff bf81 	b.w	80061bc <_malloc_r>
 80062ba:	b92a      	cbnz	r2, 80062c8 <_realloc_r+0x24>
 80062bc:	f7ff ff12 	bl	80060e4 <_free_r>
 80062c0:	4625      	mov	r5, r4
 80062c2:	4628      	mov	r0, r5
 80062c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c8:	f000 f838 	bl	800633c <_malloc_usable_size_r>
 80062cc:	4284      	cmp	r4, r0
 80062ce:	4607      	mov	r7, r0
 80062d0:	d802      	bhi.n	80062d8 <_realloc_r+0x34>
 80062d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062d6:	d812      	bhi.n	80062fe <_realloc_r+0x5a>
 80062d8:	4621      	mov	r1, r4
 80062da:	4640      	mov	r0, r8
 80062dc:	f7ff ff6e 	bl	80061bc <_malloc_r>
 80062e0:	4605      	mov	r5, r0
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d0ed      	beq.n	80062c2 <_realloc_r+0x1e>
 80062e6:	42bc      	cmp	r4, r7
 80062e8:	4622      	mov	r2, r4
 80062ea:	4631      	mov	r1, r6
 80062ec:	bf28      	it	cs
 80062ee:	463a      	movcs	r2, r7
 80062f0:	f7ff fed0 	bl	8006094 <memcpy>
 80062f4:	4631      	mov	r1, r6
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7ff fef4 	bl	80060e4 <_free_r>
 80062fc:	e7e1      	b.n	80062c2 <_realloc_r+0x1e>
 80062fe:	4635      	mov	r5, r6
 8006300:	e7df      	b.n	80062c2 <_realloc_r+0x1e>
	...

08006304 <_sbrk_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	; (8006320 <_sbrk_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f7fb fe0a 	bl	8001f28 <_sbrk>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_sbrk_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_sbrk_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20001f8c 	.word	0x20001f8c

08006324 <__malloc_lock>:
 8006324:	4801      	ldr	r0, [pc, #4]	; (800632c <__malloc_lock+0x8>)
 8006326:	f000 b811 	b.w	800634c <__retarget_lock_acquire_recursive>
 800632a:	bf00      	nop
 800632c:	20001f90 	.word	0x20001f90

08006330 <__malloc_unlock>:
 8006330:	4801      	ldr	r0, [pc, #4]	; (8006338 <__malloc_unlock+0x8>)
 8006332:	f000 b80c 	b.w	800634e <__retarget_lock_release_recursive>
 8006336:	bf00      	nop
 8006338:	20001f90 	.word	0x20001f90

0800633c <_malloc_usable_size_r>:
 800633c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006340:	1f18      	subs	r0, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	bfbc      	itt	lt
 8006346:	580b      	ldrlt	r3, [r1, r0]
 8006348:	18c0      	addlt	r0, r0, r3
 800634a:	4770      	bx	lr

0800634c <__retarget_lock_acquire_recursive>:
 800634c:	4770      	bx	lr

0800634e <__retarget_lock_release_recursive>:
 800634e:	4770      	bx	lr

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
