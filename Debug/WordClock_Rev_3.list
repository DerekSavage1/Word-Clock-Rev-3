
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005150  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080052e8  080052e8  000062e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005668  08005668  00007030  2**0
                  CONTENTS
  4 .ARM          00000008  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005670  08005670  00007030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005670  08005670  00006670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005674  08005674  00006674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005678  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee0  20000030  080056a8  00007030  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001f10  080056a8  00007f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6e3  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002377  00000000  00000000  00013743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00015ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b4  00000000  00000000  00016760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177bd  00000000  00000000  00017114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f588  00000000  00000000  0002e8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e21  00000000  00000000  0003de59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0c7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000336c  00000000  00000000  000d0cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d402c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080052d0 	.word	0x080052d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	080052d0 	.word	0x080052d0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <getRainbowColor>:
   240, 251, 261, 271, 282, 293, 304, 316, 327, 339, 351, 363, 376, 388, 401, 414,
   428, 441, 455, 469, 483, 497, 511, 526, 541, 556, 572, 587, 603, 619, 635, 651,
   668, 685, 702, 719, 736, 754, 772, 790, 808, 827, 845, 864, 883, 903, 922, 942,
   962, 982,1002,1023,};

uint32_t getRainbowColor(uint8_t colorOption) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
    switch (colorOption) {
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	2b0f      	cmp	r3, #15
 80004d8:	d84a      	bhi.n	8000570 <getRainbowColor+0xa8>
 80004da:	a201      	add	r2, pc, #4	@ (adr r2, 80004e0 <getRainbowColor+0x18>)
 80004dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e0:	08000521 	.word	0x08000521
 80004e4:	08000527 	.word	0x08000527
 80004e8:	0800052b 	.word	0x0800052b
 80004ec:	0800052f 	.word	0x0800052f
 80004f0:	08000533 	.word	0x08000533
 80004f4:	08000539 	.word	0x08000539
 80004f8:	0800053f 	.word	0x0800053f
 80004fc:	08000545 	.word	0x08000545
 8000500:	0800054b 	.word	0x0800054b
 8000504:	0800054f 	.word	0x0800054f
 8000508:	08000553 	.word	0x08000553
 800050c:	08000559 	.word	0x08000559
 8000510:	0800055d 	.word	0x0800055d
 8000514:	08000561 	.word	0x08000561
 8000518:	08000565 	.word	0x08000565
 800051c:	0800056b 	.word	0x0800056b
        case 1:
            return 0xFF0000; // Red
 8000520:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8000524:	e026      	b.n	8000574 <getRainbowColor+0xac>
        case 2:
            return 0xFF7F00; // Orange
 8000526:	4b16      	ldr	r3, [pc, #88]	@ (8000580 <getRainbowColor+0xb8>)
 8000528:	e024      	b.n	8000574 <getRainbowColor+0xac>
        case 3:
            return 0xFFFF00; // Yellow
 800052a:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <getRainbowColor+0xbc>)
 800052c:	e022      	b.n	8000574 <getRainbowColor+0xac>
        case 4:
            return 0x7FFF00; // Yellow-Green
 800052e:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <getRainbowColor+0xc0>)
 8000530:	e020      	b.n	8000574 <getRainbowColor+0xac>
        case 5:
            return 0x00FF00; // Green
 8000532:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000536:	e01d      	b.n	8000574 <getRainbowColor+0xac>
        case 6:
            return 0x00FF7F; // Spring Green
 8000538:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800053c:	e01a      	b.n	8000574 <getRainbowColor+0xac>
        case 7:
            return 0x00FFFF; // Cyan
 800053e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000542:	e017      	b.n	8000574 <getRainbowColor+0xac>
        case 8:
            return 0x007FFF; // Sky Blue
 8000544:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000548:	e014      	b.n	8000574 <getRainbowColor+0xac>
        case 9:
            return 0x0000FF; // Blue
 800054a:	23ff      	movs	r3, #255	@ 0xff
 800054c:	e012      	b.n	8000574 <getRainbowColor+0xac>
        case 10:
            return 0x7F00FF; // Violet
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <getRainbowColor+0xc4>)
 8000550:	e010      	b.n	8000574 <getRainbowColor+0xac>
        case 11:
            return 0xFF00FF; // Magenta
 8000552:	f04f 13ff 	mov.w	r3, #16711935	@ 0xff00ff
 8000556:	e00d      	b.n	8000574 <getRainbowColor+0xac>
        case 12:
            return 0xFF007F; // Rose
 8000558:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <getRainbowColor+0xc8>)
 800055a:	e00b      	b.n	8000574 <getRainbowColor+0xac>
        case 13:
            return 0xFF1493; // Deep Pink
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <getRainbowColor+0xcc>)
 800055e:	e009      	b.n	8000574 <getRainbowColor+0xac>
        case 14:
            return 0xC71585; // Medium Violet Red
 8000560:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <getRainbowColor+0xd0>)
 8000562:	e007      	b.n	8000574 <getRainbowColor+0xac>
        case 15:
            return 0x800080; // Purple
 8000564:	f04f 1380 	mov.w	r3, #8388736	@ 0x800080
 8000568:	e004      	b.n	8000574 <getRainbowColor+0xac>
        case 16:
            return 0x8B008B; // Dark Magenta
 800056a:	f04f 138b 	mov.w	r3, #9109643	@ 0x8b008b
 800056e:	e001      	b.n	8000574 <getRainbowColor+0xac>
        default:
            return 0xFFFFFF; // Default to White if an unexpected value is provided
 8000570:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
    }
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	00ff7f00 	.word	0x00ff7f00
 8000584:	00ffff00 	.word	0x00ffff00
 8000588:	007fff00 	.word	0x007fff00
 800058c:	007f00ff 	.word	0x007f00ff
 8000590:	00ff007f 	.word	0x00ff007f
 8000594:	00ff1493 	.word	0x00ff1493
 8000598:	00c71585 	.word	0x00c71585

0800059c <clear_display_buffer>:
    MINUTE_THIRTY
};

unsigned char displayBuffer[12][11] = {0}; // Adjust the buffer to be 12 rows by 11 columns

void clear_display_buffer() {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
    for (int row = 0; row < 12; row++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e017      	b.n	80005d8 <clear_display_buffer+0x3c>
        for (int col = 0; col < 11; col++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	e00e      	b.n	80005cc <clear_display_buffer+0x30>
            displayBuffer[row][col] = 0; // Clear the bit in the display buffer
 80005ae:	490f      	ldr	r1, [pc, #60]	@ (80005ec <clear_display_buffer+0x50>)
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	18ca      	adds	r2, r1, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) {
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b0a      	cmp	r3, #10
 80005d0:	dded      	ble.n	80005ae <clear_display_buffer+0x12>
    for (int row = 0; row < 12; row++) {
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b0b      	cmp	r3, #11
 80005dc:	dde4      	ble.n	80005a8 <clear_display_buffer+0xc>
        }
    }
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	2000004c 	.word	0x2000004c

080005f0 <add_bmp>:

void add_bmp(const uint16_t bmp[12]) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    for (int row = 0; row < 12; row++) { // Loop over each row
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e032      	b.n	8000664 <add_bmp+0x74>
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	e029      	b.n	8000658 <add_bmp+0x68>
            if ((bmp[row] & (1 << col)) != 0) { // Check if the bit is set in bmp at (row, col)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	fa42 f303 	asr.w	r3, r2, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d019      	beq.n	8000652 <add_bmp+0x62>
                displayBuffer[row][col] |= 1; // Set the bit in the display buffer
 800061e:	4916      	ldr	r1, [pc, #88]	@ (8000678 <add_bmp+0x88>)
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	18ca      	adds	r2, r1, r3
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	b2d8      	uxtb	r0, r3
 800063a:	490f      	ldr	r1, [pc, #60]	@ (8000678 <add_bmp+0x88>)
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	18ca      	adds	r2, r1, r3
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	4413      	add	r3, r2
 800064e:	4602      	mov	r2, r0
 8000650:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	3301      	adds	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	ddd2      	ble.n	8000604 <add_bmp+0x14>
    for (int row = 0; row < 12; row++) { // Loop over each row
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b0b      	cmp	r3, #11
 8000668:	ddc9      	ble.n	80005fe <add_bmp+0xe>
            }
        }
    }
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	2000004c 	.word	0x2000004c

0800067c <display_bmp>:

void display_bmp(uint8_t preset, uint8_t brightness) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	460a      	mov	r2, r1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	4613      	mov	r3, r2
 800068a:	71bb      	strb	r3, [r7, #6]
    if (brightness < 1 || brightness > 100) {
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d07a      	beq.n	8000788 <display_bmp+0x10c>
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	2b64      	cmp	r3, #100	@ 0x64
 8000696:	d877      	bhi.n	8000788 <display_bmp+0x10c>
        // Ensure the brightness index is within the valid range to avoid out-of-bounds access
        return;
    }

    uint32_t color = getRainbowColor(preset);
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff14 	bl	80004c8 <getRainbowColor>
 80006a0:	6138      	str	r0, [r7, #16]
    // Extract the red, green, and blue components from the color
    uint8_t red = (color >> 16) & 0xFF;
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	73fb      	strb	r3, [r7, #15]
    uint8_t green = (color >> 8) & 0xFF;
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	73bb      	strb	r3, [r7, #14]
    uint8_t blue = color & 0xFF;
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	737b      	strb	r3, [r7, #13]

    // Adjust the brightness based on the gamma lookup table
    // Since the maximum value in gamma_lut is 1023 (for brightness=100),
    // and the maximum value for each color component is 255, a scaling is required.
    uint16_t brightnessValue = gamma_lut[brightness - 1];
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a36      	ldr	r2, [pc, #216]	@ (8000790 <display_bmp+0x114>)
 80006b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006bc:	817b      	strh	r3, [r7, #10]

    // Scale and adjust the RGB values based on the brightness
    red = (uint8_t)(((uint32_t)red * brightnessValue) / 1023);
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	897a      	ldrh	r2, [r7, #10]
 80006c2:	fb03 f202 	mul.w	r2, r3, r2
 80006c6:	4b33      	ldr	r3, [pc, #204]	@ (8000794 <display_bmp+0x118>)
 80006c8:	fba3 1302 	umull	r1, r3, r3, r2
 80006cc:	1ad2      	subs	r2, r2, r3
 80006ce:	0852      	lsrs	r2, r2, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	0a5b      	lsrs	r3, r3, #9
 80006d4:	73fb      	strb	r3, [r7, #15]
    green = (uint8_t)(((uint32_t)green * brightnessValue) / 1023);
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	897a      	ldrh	r2, [r7, #10]
 80006da:	fb03 f202 	mul.w	r2, r3, r2
 80006de:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <display_bmp+0x118>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	0852      	lsrs	r2, r2, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	0a5b      	lsrs	r3, r3, #9
 80006ec:	73bb      	strb	r3, [r7, #14]
    blue = (uint8_t)(((uint32_t)blue * brightnessValue) / 1023);
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	897a      	ldrh	r2, [r7, #10]
 80006f2:	fb03 f202 	mul.w	r2, r3, r2
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <display_bmp+0x118>)
 80006f8:	fba3 1302 	umull	r1, r3, r3, r2
 80006fc:	1ad2      	subs	r2, r2, r3
 80006fe:	0852      	lsrs	r2, r2, #1
 8000700:	4413      	add	r3, r2
 8000702:	0a5b      	lsrs	r3, r3, #9
 8000704:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 12; row++) {
 8000706:	2300      	movs	r3, #0
 8000708:	75fb      	strb	r3, [r7, #23]
 800070a:	e039      	b.n	8000780 <display_bmp+0x104>
        for (uint8_t col = 0; col < 11; col++) {
 800070c:	2300      	movs	r3, #0
 800070e:	75bb      	strb	r3, [r7, #22]
 8000710:	e030      	b.n	8000774 <display_bmp+0xf8>
            if (displayBuffer[row][col] & 1) { // Check if the bit is set
 8000712:	7dfa      	ldrb	r2, [r7, #23]
 8000714:	7db9      	ldrb	r1, [r7, #22]
 8000716:	4820      	ldr	r0, [pc, #128]	@ (8000798 <display_bmp+0x11c>)
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	4403      	add	r3, r0
 8000724:	440b      	add	r3, r1
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00f      	beq.n	8000750 <display_bmp+0xd4>
                // Set the LED to the adjusted color for specified brightness
                Set_LED((uint8_t) ((row * 11) + col), red, green, blue);
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	461a      	mov	r2, r3
 8000734:	0092      	lsls	r2, r2, #2
 8000736:	441a      	add	r2, r3
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	4413      	add	r3, r2
 800073c:	b2da      	uxtb	r2, r3
 800073e:	7dbb      	ldrb	r3, [r7, #22]
 8000740:	4413      	add	r3, r2
 8000742:	b2d8      	uxtb	r0, r3
 8000744:	7b7b      	ldrb	r3, [r7, #13]
 8000746:	7bba      	ldrb	r2, [r7, #14]
 8000748:	7bf9      	ldrb	r1, [r7, #15]
 800074a:	f004 fc91 	bl	8005070 <Set_LED>
 800074e:	e00e      	b.n	800076e <display_bmp+0xf2>
            } else {
                // Turn the LED off
                Set_LED((uint8_t) ((row * 11) + col), 0, 0, 0);
 8000750:	7dfb      	ldrb	r3, [r7, #23]
 8000752:	461a      	mov	r2, r3
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	441a      	add	r2, r3
 8000758:	0052      	lsls	r2, r2, #1
 800075a:	4413      	add	r3, r2
 800075c:	b2da      	uxtb	r2, r3
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	4413      	add	r3, r2
 8000762:	b2d8      	uxtb	r0, r3
 8000764:	2300      	movs	r3, #0
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	f004 fc81 	bl	8005070 <Set_LED>
        for (uint8_t col = 0; col < 11; col++) {
 800076e:	7dbb      	ldrb	r3, [r7, #22]
 8000770:	3301      	adds	r3, #1
 8000772:	75bb      	strb	r3, [r7, #22]
 8000774:	7dbb      	ldrb	r3, [r7, #22]
 8000776:	2b0a      	cmp	r3, #10
 8000778:	d9cb      	bls.n	8000712 <display_bmp+0x96>
    for (uint8_t row = 0; row < 12; row++) {
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	3301      	adds	r3, #1
 800077e:	75fb      	strb	r3, [r7, #23]
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	2b0b      	cmp	r3, #11
 8000784:	d9c2      	bls.n	800070c <display_bmp+0x90>
 8000786:	e000      	b.n	800078a <display_bmp+0x10e>
        return;
 8000788:	bf00      	nop
            }
        }
    }
}
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	080052e8 	.word	0x080052e8
 8000794:	00401005 	.word	0x00401005
 8000798:	2000004c 	.word	0x2000004c

0800079c <display_time>:



void display_time(int hour, int minute) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	add_bmp(BMP_ITS);
 80007a6:	4859      	ldr	r0, [pc, #356]	@ (800090c <display_time+0x170>)
 80007a8:	f7ff ff22 	bl	80005f0 <add_bmp>
    // Round down to the nearest five minutes
    minute = (minute / 5) * 5;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	4a58      	ldr	r2, [pc, #352]	@ (8000910 <display_time+0x174>)
 80007b0:	fb82 1203 	smull	r1, r2, r2, r3
 80007b4:	1052      	asrs	r2, r2, #1
 80007b6:	17db      	asrs	r3, r3, #31
 80007b8:	1ad2      	subs	r2, r2, r3
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	603b      	str	r3, [r7, #0]

    // Display minute, accounting for 'past' or 'to'
    if (minute < 5) {
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	dd10      	ble.n	80007ea <display_time+0x4e>
    	//no past or till
    } else if (minute < 35) {
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b22      	cmp	r3, #34	@ 0x22
 80007cc:	dc03      	bgt.n	80007d6 <display_time+0x3a>
        add_bmp(BMP_PAST);
 80007ce:	4851      	ldr	r0, [pc, #324]	@ (8000914 <display_time+0x178>)
 80007d0:	f7ff ff0e 	bl	80005f0 <add_bmp>
 80007d4:	e009      	b.n	80007ea <display_time+0x4e>
    } else {
        minute = 60 - minute;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80007dc:	603b      	str	r3, [r7, #0]
        hour++;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3301      	adds	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
        add_bmp(BMP_TILL);
 80007e4:	484c      	ldr	r0, [pc, #304]	@ (8000918 <display_time+0x17c>)
 80007e6:	f7ff ff03 	bl	80005f0 <add_bmp>
    }

    if(hour == 0 || hour == 12);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00c      	beq.n	800080a <display_time+0x6e>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b0c      	cmp	r3, #12
 80007f4:	d009      	beq.n	800080a <display_time+0x6e>
    else if(hour < 12) add_bmp(BMP_AM);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0b      	cmp	r3, #11
 80007fa:	dc03      	bgt.n	8000804 <display_time+0x68>
 80007fc:	4847      	ldr	r0, [pc, #284]	@ (800091c <display_time+0x180>)
 80007fe:	f7ff fef7 	bl	80005f0 <add_bmp>
 8000802:	e002      	b.n	800080a <display_time+0x6e>
    else add_bmp(BMP_PM);
 8000804:	4846      	ldr	r0, [pc, #280]	@ (8000920 <display_time+0x184>)
 8000806:	f7ff fef3 	bl	80005f0 <add_bmp>

    // Display hour
    switch(hour) {
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b17      	cmp	r3, #23
 800080e:	d867      	bhi.n	80008e0 <display_time+0x144>
 8000810:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <display_time+0x7c>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000879 	.word	0x08000879
 800081c:	08000881 	.word	0x08000881
 8000820:	08000889 	.word	0x08000889
 8000824:	08000891 	.word	0x08000891
 8000828:	08000899 	.word	0x08000899
 800082c:	080008a1 	.word	0x080008a1
 8000830:	080008a9 	.word	0x080008a9
 8000834:	080008b1 	.word	0x080008b1
 8000838:	080008b9 	.word	0x080008b9
 800083c:	080008c1 	.word	0x080008c1
 8000840:	080008c9 	.word	0x080008c9
 8000844:	080008d1 	.word	0x080008d1
 8000848:	080008d9 	.word	0x080008d9
 800084c:	08000881 	.word	0x08000881
 8000850:	08000889 	.word	0x08000889
 8000854:	08000891 	.word	0x08000891
 8000858:	08000899 	.word	0x08000899
 800085c:	080008a1 	.word	0x080008a1
 8000860:	080008a9 	.word	0x080008a9
 8000864:	080008b1 	.word	0x080008b1
 8000868:	080008b9 	.word	0x080008b9
 800086c:	080008c1 	.word	0x080008c1
 8000870:	080008c9 	.word	0x080008c9
 8000874:	080008d1 	.word	0x080008d1
        case 0:
            add_bmp(HOUR_MIDNIGHT);
 8000878:	482a      	ldr	r0, [pc, #168]	@ (8000924 <display_time+0x188>)
 800087a:	f7ff feb9 	bl	80005f0 <add_bmp>
            break;
 800087e:	e030      	b.n	80008e2 <display_time+0x146>
        case 1:
        case 13:
            add_bmp(HOUR_ONE);
 8000880:	4829      	ldr	r0, [pc, #164]	@ (8000928 <display_time+0x18c>)
 8000882:	f7ff feb5 	bl	80005f0 <add_bmp>
            break;
 8000886:	e02c      	b.n	80008e2 <display_time+0x146>
        case 2:
        case 14:
            add_bmp(HOUR_TWO);
 8000888:	4828      	ldr	r0, [pc, #160]	@ (800092c <display_time+0x190>)
 800088a:	f7ff feb1 	bl	80005f0 <add_bmp>
            break;
 800088e:	e028      	b.n	80008e2 <display_time+0x146>
        case 3:
        case 15:
            add_bmp(HOUR_THREE);
 8000890:	4827      	ldr	r0, [pc, #156]	@ (8000930 <display_time+0x194>)
 8000892:	f7ff fead 	bl	80005f0 <add_bmp>
            break;
 8000896:	e024      	b.n	80008e2 <display_time+0x146>
        case 4:
        case 16:
            add_bmp(HOUR_FOUR);
 8000898:	4826      	ldr	r0, [pc, #152]	@ (8000934 <display_time+0x198>)
 800089a:	f7ff fea9 	bl	80005f0 <add_bmp>
            break;
 800089e:	e020      	b.n	80008e2 <display_time+0x146>
        case 5:
        case 17:
            add_bmp(HOUR_FIVE);
 80008a0:	4825      	ldr	r0, [pc, #148]	@ (8000938 <display_time+0x19c>)
 80008a2:	f7ff fea5 	bl	80005f0 <add_bmp>
            break;
 80008a6:	e01c      	b.n	80008e2 <display_time+0x146>
        case 6:
        case 18:
            add_bmp(HOUR_SIX);
 80008a8:	4824      	ldr	r0, [pc, #144]	@ (800093c <display_time+0x1a0>)
 80008aa:	f7ff fea1 	bl	80005f0 <add_bmp>
            break;
 80008ae:	e018      	b.n	80008e2 <display_time+0x146>
        case 7:
        case 19:
            add_bmp(HOUR_SEVEN);
 80008b0:	4823      	ldr	r0, [pc, #140]	@ (8000940 <display_time+0x1a4>)
 80008b2:	f7ff fe9d 	bl	80005f0 <add_bmp>
            break;
 80008b6:	e014      	b.n	80008e2 <display_time+0x146>
        case 8:
        case 20:
            add_bmp(HOUR_EIGHT);
 80008b8:	4822      	ldr	r0, [pc, #136]	@ (8000944 <display_time+0x1a8>)
 80008ba:	f7ff fe99 	bl	80005f0 <add_bmp>
            break;
 80008be:	e010      	b.n	80008e2 <display_time+0x146>
        case 9:
        case 21:
            add_bmp(HOUR_NINE);
 80008c0:	4821      	ldr	r0, [pc, #132]	@ (8000948 <display_time+0x1ac>)
 80008c2:	f7ff fe95 	bl	80005f0 <add_bmp>
            break;
 80008c6:	e00c      	b.n	80008e2 <display_time+0x146>
        case 10:
        case 22:
            add_bmp(HOUR_TEN);
 80008c8:	4820      	ldr	r0, [pc, #128]	@ (800094c <display_time+0x1b0>)
 80008ca:	f7ff fe91 	bl	80005f0 <add_bmp>
            break;
 80008ce:	e008      	b.n	80008e2 <display_time+0x146>
        case 11:
        case 23:
            add_bmp(HOUR_ELEVEN);
 80008d0:	481f      	ldr	r0, [pc, #124]	@ (8000950 <display_time+0x1b4>)
 80008d2:	f7ff fe8d 	bl	80005f0 <add_bmp>
            break;
 80008d6:	e004      	b.n	80008e2 <display_time+0x146>
        case 12:
            add_bmp(HOUR_NOON);
 80008d8:	481e      	ldr	r0, [pc, #120]	@ (8000954 <display_time+0x1b8>)
 80008da:	f7ff fe89 	bl	80005f0 <add_bmp>
            break;
 80008de:	e000      	b.n	80008e2 <display_time+0x146>
        default:
            // Handle error or invalid hour
            break;
 80008e0:	bf00      	nop
    }

    // Display minute in intervals of five using an array pointing to the bitmaps
    if (minute > 0) {
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	dd0d      	ble.n	8000904 <display_time+0x168>
        add_bmp(minuteBitmaps[(minute / 5) - 1]);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	4a09      	ldr	r2, [pc, #36]	@ (8000910 <display_time+0x174>)
 80008ec:	fb82 1203 	smull	r1, r2, r2, r3
 80008f0:	1052      	asrs	r2, r2, #1
 80008f2:	17db      	asrs	r3, r3, #31
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a17      	ldr	r2, [pc, #92]	@ (8000958 <display_time+0x1bc>)
 80008fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe76 	bl	80005f0 <add_bmp>
    }
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08005578 	.word	0x08005578
 8000910:	66666667 	.word	0x66666667
 8000914:	08005590 	.word	0x08005590
 8000918:	080055a8 	.word	0x080055a8
 800091c:	08005620 	.word	0x08005620
 8000920:	08005638 	.word	0x08005638
 8000924:	080054d0 	.word	0x080054d0
 8000928:	080053b0 	.word	0x080053b0
 800092c:	080053c8 	.word	0x080053c8
 8000930:	080053e0 	.word	0x080053e0
 8000934:	080053f8 	.word	0x080053f8
 8000938:	08005410 	.word	0x08005410
 800093c:	08005428 	.word	0x08005428
 8000940:	08005440 	.word	0x08005440
 8000944:	08005458 	.word	0x08005458
 8000948:	08005470 	.word	0x08005470
 800094c:	08005488 	.word	0x08005488
 8000950:	080054a0 	.word	0x080054a0
 8000954:	080054b8 	.word	0x080054b8
 8000958:	20000000 	.word	0x20000000

0800095c <clampValue>:
		isOff = !isOff;
		lastTick = HAL_GetTick();
	}
}

uint32_t clampValue(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
    if ((0xFFFF - value) < (maxVal - value)) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800096e:	33ff      	adds	r3, #255	@ 0xff
 8000970:	6879      	ldr	r1, [r7, #4]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	1a8a      	subs	r2, r1, r2
 8000976:	4293      	cmp	r3, r2
 8000978:	d201      	bcs.n	800097e <clampValue+0x22>
  	  return minVal;
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	e00c      	b.n	8000998 <clampValue+0x3c>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	429a      	cmp	r2, r3
 8000984:	d201      	bcs.n	800098a <clampValue+0x2e>
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	e006      	b.n	8000998 <clampValue+0x3c>
        if (value > maxVal) return maxVal;
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	d901      	bls.n	8000996 <clampValue+0x3a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	e000      	b.n	8000998 <clampValue+0x3c>
        return value;
 8000996:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000998:	4618      	mov	r0, r3
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <switchState>:

bool userSelectingFeature = true; // True when in SELECT state to decide what feature to adjust

void switchState(RTC_DateTypeDef * tDate) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    switch(currentState) {
 80009ac:	4b88      	ldr	r3, [pc, #544]	@ (8000bd0 <switchState+0x22c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	f200 8104 	bhi.w	8000bc0 <switchState+0x21c>
 80009b8:	a201      	add	r2, pc, #4	@ (adr r2, 80009c0 <switchState+0x1c>)
 80009ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009be:	bf00      	nop
 80009c0:	080009e9 	.word	0x080009e9
 80009c4:	080009f1 	.word	0x080009f1
 80009c8:	080009f9 	.word	0x080009f9
 80009cc:	08000a9b 	.word	0x08000a9b
 80009d0:	08000adf 	.word	0x08000adf
 80009d4:	08000b9d 	.word	0x08000b9d
 80009d8:	08000bb9 	.word	0x08000bb9
 80009dc:	08000b0d 	.word	0x08000b0d
 80009e0:	08000b43 	.word	0x08000b43
 80009e4:	08000b79 	.word	0x08000b79
        case SLEEP:
            currentState = WAKE;
 80009e8:	4b79      	ldr	r3, [pc, #484]	@ (8000bd0 <switchState+0x22c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
            break;
 80009ee:	e0eb      	b.n	8000bc8 <switchState+0x224>
        case WAKE:
            currentState = SELECT;
 80009f0:	4b77      	ldr	r3, [pc, #476]	@ (8000bd0 <switchState+0x22c>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	701a      	strb	r2, [r3, #0]

            break;
 80009f6:	e0e7      	b.n	8000bc8 <switchState+0x224>
        case SELECT:
        	switch(counter / sensitivity){
 80009f8:	4b76      	ldr	r3, [pc, #472]	@ (8000bd4 <switchState+0x230>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b76      	ldr	r3, [pc, #472]	@ (8000bd8 <switchState+0x234>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d846      	bhi.n	8000a96 <switchState+0xf2>
 8000a08:	a201      	add	r2, pc, #4	@ (adr r2, 8000a10 <switchState+0x6c>)
 8000a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0e:	bf00      	nop
 8000a10:	08000a21 	.word	0x08000a21
 8000a14:	08000a3b 	.word	0x08000a3b
 8000a18:	08000a57 	.word	0x08000a57
 8000a1c:	08000a77 	.word	0x08000a77
        	case 0:
        		counter = sTime.Hours * sensitivity;
 8000a20:	4b6e      	ldr	r3, [pc, #440]	@ (8000bdc <switchState+0x238>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b6c      	ldr	r3, [pc, #432]	@ (8000bd8 <switchState+0x234>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	fb02 f303 	mul.w	r3, r2, r3
 8000a2e:	4a69      	ldr	r2, [pc, #420]	@ (8000bd4 <switchState+0x230>)
 8000a30:	6013      	str	r3, [r2, #0]
        		currentState = SET_HOURS;
 8000a32:	4b67      	ldr	r3, [pc, #412]	@ (8000bd0 <switchState+0x22c>)
 8000a34:	2203      	movs	r2, #3
 8000a36:	701a      	strb	r2, [r3, #0]
        		break;
 8000a38:	e02e      	b.n	8000a98 <switchState+0xf4>
        	case 1:
        		currentState = SET_COLOR;
 8000a3a:	4b65      	ldr	r3, [pc, #404]	@ (8000bd0 <switchState+0x22c>)
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	701a      	strb	r2, [r3, #0]
        		counter = color * sensitivity;
 8000a40:	4b67      	ldr	r3, [pc, #412]	@ (8000be0 <switchState+0x23c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b63      	ldr	r3, [pc, #396]	@ (8000bd8 <switchState+0x234>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	fb02 f303 	mul.w	r3, r2, r3
 8000a50:	4a60      	ldr	r2, [pc, #384]	@ (8000bd4 <switchState+0x230>)
 8000a52:	6013      	str	r3, [r2, #0]
        		break;
 8000a54:	e020      	b.n	8000a98 <switchState+0xf4>
        	case 2:
        		currentDateType = ANNIVERSARY_DATE;
 8000a56:	4b63      	ldr	r3, [pc, #396]	@ (8000be4 <switchState+0x240>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
            	counter = aDate.Month * sensitivity;
 8000a5c:	4b62      	ldr	r3, [pc, #392]	@ (8000be8 <switchState+0x244>)
 8000a5e:	785b      	ldrb	r3, [r3, #1]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd8 <switchState+0x234>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8000bd4 <switchState+0x230>)
 8000a6c:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 8000a6e:	4b58      	ldr	r3, [pc, #352]	@ (8000bd0 <switchState+0x22c>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	701a      	strb	r2, [r3, #0]
        		break;
 8000a74:	e010      	b.n	8000a98 <switchState+0xf4>
        	case 3:
        		currentDateType = BIRTHDAY_DATE;
 8000a76:	4b5b      	ldr	r3, [pc, #364]	@ (8000be4 <switchState+0x240>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	701a      	strb	r2, [r3, #0]
            	counter = bDate.Month * sensitivity;
 8000a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8000bec <switchState+0x248>)
 8000a7e:	785b      	ldrb	r3, [r3, #1]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b55      	ldr	r3, [pc, #340]	@ (8000bd8 <switchState+0x234>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	4a52      	ldr	r2, [pc, #328]	@ (8000bd4 <switchState+0x230>)
 8000a8c:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 8000a8e:	4b50      	ldr	r3, [pc, #320]	@ (8000bd0 <switchState+0x22c>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	701a      	strb	r2, [r3, #0]
        		break;
 8000a94:	e000      	b.n	8000a98 <switchState+0xf4>
        	default:
        		break;
 8000a96:	bf00      	nop
        	}
            break;
 8000a98:	e096      	b.n	8000bc8 <switchState+0x224>
        case SET_HOURS:
        	counter = sTime.Minutes * sensitivity;
 8000a9a:	4b50      	ldr	r3, [pc, #320]	@ (8000bdc <switchState+0x238>)
 8000a9c:	785b      	ldrb	r3, [r3, #1]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd8 <switchState+0x234>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd4 <switchState+0x230>)
 8000aaa:	6013      	str	r3, [r2, #0]
        	Set_LED_Hex(141, getRainbowColor(color));
 8000aac:	4b4c      	ldr	r3, [pc, #304]	@ (8000be0 <switchState+0x23c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fd08 	bl	80004c8 <getRainbowColor>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4619      	mov	r1, r3
 8000abc:	208d      	movs	r0, #141	@ 0x8d
 8000abe:	f004 fb0b 	bl	80050d8 <Set_LED_Hex>
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4945      	ldr	r1, [pc, #276]	@ (8000bdc <switchState+0x238>)
 8000ac6:	484a      	ldr	r0, [pc, #296]	@ (8000bf0 <switchState+0x24c>)
 8000ac8:	f002 fe72 	bl	80037b0 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000acc:	2200      	movs	r2, #0
 8000ace:	4949      	ldr	r1, [pc, #292]	@ (8000bf4 <switchState+0x250>)
 8000ad0:	4847      	ldr	r0, [pc, #284]	@ (8000bf0 <switchState+0x24c>)
 8000ad2:	f002 ff65 	bl	80039a0 <HAL_RTC_SetDate>
            currentState = SET_MINUTES; // After setting hours, set minutes
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <switchState+0x22c>)
 8000ad8:	2204      	movs	r2, #4
 8000ada:	701a      	strb	r2, [r3, #0]
            break;
 8000adc:	e074      	b.n	8000bc8 <switchState+0x224>
        case SET_MINUTES:
        	counter = sDate.Month * sensitivity;
 8000ade:	4b45      	ldr	r3, [pc, #276]	@ (8000bf4 <switchState+0x250>)
 8000ae0:	785b      	ldrb	r3, [r3, #1]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd8 <switchState+0x234>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	fb02 f303 	mul.w	r3, r2, r3
 8000aec:	4a39      	ldr	r2, [pc, #228]	@ (8000bd4 <switchState+0x230>)
 8000aee:	6013      	str	r3, [r2, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000af0:	2200      	movs	r2, #0
 8000af2:	493a      	ldr	r1, [pc, #232]	@ (8000bdc <switchState+0x238>)
 8000af4:	483e      	ldr	r0, [pc, #248]	@ (8000bf0 <switchState+0x24c>)
 8000af6:	f002 fe5b 	bl	80037b0 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000afa:	2200      	movs	r2, #0
 8000afc:	493d      	ldr	r1, [pc, #244]	@ (8000bf4 <switchState+0x250>)
 8000afe:	483c      	ldr	r0, [pc, #240]	@ (8000bf0 <switchState+0x24c>)
 8000b00:	f002 ff4e 	bl	80039a0 <HAL_RTC_SetDate>
            currentState = SET_MONTH; // Return to SLEEP after setting time
 8000b04:	4b32      	ldr	r3, [pc, #200]	@ (8000bd0 <switchState+0x22c>)
 8000b06:	2207      	movs	r2, #7
 8000b08:	701a      	strb	r2, [r3, #0]
            break;
 8000b0a:	e05d      	b.n	8000bc8 <switchState+0x224>
        case SET_MONTH:
        	counter = tDate->Date * sensitivity;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b31      	ldr	r3, [pc, #196]	@ (8000bd8 <switchState+0x234>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd4 <switchState+0x230>)
 8000b1c:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE){
 8000b1e:	4b31      	ldr	r3, [pc, #196]	@ (8000be4 <switchState+0x240>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d109      	bne.n	8000b3a <switchState+0x196>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b26:	2200      	movs	r2, #0
 8000b28:	492c      	ldr	r1, [pc, #176]	@ (8000bdc <switchState+0x238>)
 8000b2a:	4831      	ldr	r0, [pc, #196]	@ (8000bf0 <switchState+0x24c>)
 8000b2c:	f002 fe40 	bl	80037b0 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b30:	2200      	movs	r2, #0
 8000b32:	4930      	ldr	r1, [pc, #192]	@ (8000bf4 <switchState+0x250>)
 8000b34:	482e      	ldr	r0, [pc, #184]	@ (8000bf0 <switchState+0x24c>)
 8000b36:	f002 ff33 	bl	80039a0 <HAL_RTC_SetDate>
        	}

        	currentState = SET_DAY;
 8000b3a:	4b25      	ldr	r3, [pc, #148]	@ (8000bd0 <switchState+0x22c>)
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	701a      	strb	r2, [r3, #0]
        	break;
 8000b40:	e042      	b.n	8000bc8 <switchState+0x224>
        case SET_DAY:
        	counter = tDate->Year * sensitivity;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	78db      	ldrb	r3, [r3, #3]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <switchState+0x234>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	fb02 f303 	mul.w	r3, r2, r3
 8000b50:	4a20      	ldr	r2, [pc, #128]	@ (8000bd4 <switchState+0x230>)
 8000b52:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE) {
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <switchState+0x240>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <switchState+0x1cc>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	491f      	ldr	r1, [pc, #124]	@ (8000bdc <switchState+0x238>)
 8000b60:	4823      	ldr	r0, [pc, #140]	@ (8000bf0 <switchState+0x24c>)
 8000b62:	f002 fe25 	bl	80037b0 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b66:	2200      	movs	r2, #0
 8000b68:	4922      	ldr	r1, [pc, #136]	@ (8000bf4 <switchState+0x250>)
 8000b6a:	4821      	ldr	r0, [pc, #132]	@ (8000bf0 <switchState+0x24c>)
 8000b6c:	f002 ff18 	bl	80039a0 <HAL_RTC_SetDate>
        	}

        	currentState = SET_YEAR;
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <switchState+0x22c>)
 8000b72:	2209      	movs	r2, #9
 8000b74:	701a      	strb	r2, [r3, #0]
        	break;
 8000b76:	e027      	b.n	8000bc8 <switchState+0x224>
        case SET_YEAR:
        	if(currentDateType == SYSTEM_DATE) {
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <switchState+0x240>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d109      	bne.n	8000b94 <switchState+0x1f0>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b80:	2200      	movs	r2, #0
 8000b82:	4916      	ldr	r1, [pc, #88]	@ (8000bdc <switchState+0x238>)
 8000b84:	481a      	ldr	r0, [pc, #104]	@ (8000bf0 <switchState+0x24c>)
 8000b86:	f002 fe13 	bl	80037b0 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4919      	ldr	r1, [pc, #100]	@ (8000bf4 <switchState+0x250>)
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <switchState+0x24c>)
 8000b90:	f002 ff06 	bl	80039a0 <HAL_RTC_SetDate>
        	}

        	currentState = SLEEP;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <switchState+0x22c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
        	break;
 8000b9a:	e015      	b.n	8000bc8 <switchState+0x224>
        case SET_COLOR:
        	counter = brightness * sensitivity;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <switchState+0x254>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <switchState+0x234>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	4a09      	ldr	r2, [pc, #36]	@ (8000bd4 <switchState+0x230>)
 8000bae:	6013      	str	r3, [r2, #0]
            currentState = SET_BRIGHTNESS; // After color, set brightness
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <switchState+0x22c>)
 8000bb2:	2206      	movs	r2, #6
 8000bb4:	701a      	strb	r2, [r3, #0]
            break;
 8000bb6:	e007      	b.n	8000bc8 <switchState+0x224>
        case SET_BRIGHTNESS:
            currentState = SLEEP; // Return to SLEEP after setting LED features
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <switchState+0x22c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
            break;
 8000bbe:	e003      	b.n	8000bc8 <switchState+0x224>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            currentState = SLEEP;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <switchState+0x22c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
            break;
 8000bc6:	bf00      	nop
    }
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000205 	.word	0x20000205
 8000bd4:	200001e0 	.word	0x200001e0
 8000bd8:	2000001c 	.word	0x2000001c
 8000bdc:	200001e4 	.word	0x200001e4
 8000be0:	20000204 	.word	0x20000204
 8000be4:	20000289 	.word	0x20000289
 8000be8:	200001fc 	.word	0x200001fc
 8000bec:	20000200 	.word	0x20000200
 8000bf0:	200000d0 	.word	0x200000d0
 8000bf4:	200001f8 	.word	0x200001f8
 8000bf8:	20000018 	.word	0x20000018

08000bfc <checkButtonPress>:

void checkButtonPress(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 8000c02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <checkButtonPress+0x40>)
 8000c08:	f002 f816 	bl	8002c38 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <checkButtonPress+0x44>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d106      	bne.n	8000c26 <checkButtonPress+0x2a>
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d103      	bne.n	8000c26 <checkButtonPress+0x2a>
        // Button was pressed - perform actions here.
    	stateChangeRequest = true;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <checkButtonPress+0x48>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e002      	b.n	8000c2c <checkButtonPress+0x30>
    } else {
    	stateChangeRequest = false;
 8000c26:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <checkButtonPress+0x48>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <checkButtonPress+0x44>)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	7013      	strb	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	20000021 	.word	0x20000021
 8000c44:	20000288 	.word	0x20000288

08000c48 <SetHours>:




void SetHours() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    Set_LED(136, 100, 100, 100);
 8000c4c:	2364      	movs	r3, #100	@ 0x64
 8000c4e:	2264      	movs	r2, #100	@ 0x64
 8000c50:	2164      	movs	r1, #100	@ 0x64
 8000c52:	2088      	movs	r0, #136	@ 0x88
 8000c54:	f004 fa0c 	bl	8005070 <Set_LED>
    counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 8000c58:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <SetHours+0x48>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <SetHours+0x4c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	1a9b      	subs	r3, r3, r2
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f7ff fe75 	bl	800095c <clampValue>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <SetHours+0x48>)
 8000c76:	6013      	str	r3, [r2, #0]
    sTime.Hours = (uint8_t) (counter / sensitivity);
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SetHours+0x48>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SetHours+0x4c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SetHours+0x50>)
 8000c88:	701a      	strb	r2, [r3, #0]

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200001e0 	.word	0x200001e0
 8000c94:	2000001c 	.word	0x2000001c
 8000c98:	200001e4 	.word	0x200001e4

08000c9c <SetMinutes>:

void SetMinutes() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 59 * sensitivity); //59 minutes
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <SetMinutes+0x3c>)
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <SetMinutes+0x40>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f7ff fe51 	bl	800095c <clampValue>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <SetMinutes+0x3c>)
 8000cbe:	6013      	str	r3, [r2, #0]
    sTime.Minutes = (uint8_t) (counter / sensitivity);
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <SetMinutes+0x3c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SetMinutes+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <SetMinutes+0x44>)
 8000cd0:	705a      	strb	r2, [r3, #1]

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001e0 	.word	0x200001e0
 8000cdc:	2000001c 	.word	0x2000001c
 8000ce0:	200001e4 	.word	0x200001e4

08000ce4 <SetMonth>:

uint8_t SetMonth(RTC_DateTypeDef * tDate) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 12 * sensitivity); //12 months
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <SetMonth+0x50>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <SetMonth+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f7ff fe2c 	bl	800095c <clampValue>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <SetMonth+0x50>)
 8000d08:	6013      	str	r3, [r2, #0]
    tDate->Month = (uint8_t) (counter / sensitivity);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <SetMonth+0x50>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <SetMonth+0x54>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	705a      	strb	r2, [r3, #1]

    return (uint8_t) (counter / sensitivity);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <SetMonth+0x50>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <SetMonth+0x54>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200001e0 	.word	0x200001e0
 8000d38:	2000001c 	.word	0x2000001c

08000d3c <SetDay>:

uint8_t SetDay(RTC_DateTypeDef * tDate) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 31 * sensitivity); //31 days
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <SetDay+0x4c>)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <SetDay+0x50>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	461a      	mov	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f7ff fe01 	bl	800095c <clampValue>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <SetDay+0x4c>)
 8000d5e:	6013      	str	r3, [r2, #0]
    //FIXME: user could enter February 31 which is wrong
    tDate->Date = (uint8_t) (counter / sensitivity);
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <SetDay+0x4c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <SetDay+0x50>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	709a      	strb	r2, [r3, #2]

    return (uint8_t) (counter / sensitivity);
 8000d72:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <SetDay+0x4c>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <SetDay+0x50>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	b2db      	uxtb	r3, r3
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200001e0 	.word	0x200001e0
 8000d8c:	2000001c 	.word	0x2000001c

08000d90 <SetYear>:

uint8_t SetYear(RTC_DateTypeDef * tDate) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 3000 * sensitivity); //12 months
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <SetYear+0x50>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <SetYear+0x54>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000da4:	fb02 f303 	mul.w	r3, r2, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	2100      	movs	r1, #0
 8000dac:	f7ff fdd6 	bl	800095c <clampValue>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <SetYear+0x50>)
 8000db4:	6013      	str	r3, [r2, #0]
    tDate->Year = (uint8_t) (counter / sensitivity);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <SetYear+0x50>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <SetYear+0x54>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	70da      	strb	r2, [r3, #3]

    return (uint8_t) (counter / sensitivity);
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <SetYear+0x50>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <SetYear+0x54>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd4:	b2db      	uxtb	r3, r3
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001e0 	.word	0x200001e0
 8000de4:	2000001c 	.word	0x2000001c

08000de8 <SetColor>:

void SetColor() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <SetColor+0x60>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <SetColor+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	461a      	mov	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f7ff fdaf 	bl	800095c <clampValue>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a11      	ldr	r2, [pc, #68]	@ (8000e48 <SetColor+0x60>)
 8000e02:	6013      	str	r3, [r2, #0]
    color = (uint8_t) (counter / sensitivity);
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <SetColor+0x60>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <SetColor+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <SetColor+0x68>)
 8000e14:	701a      	strb	r2, [r3, #0]

    Set_LED_Hex(136, getRainbowColor(color));
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <SetColor+0x68>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fb53 	bl	80004c8 <getRainbowColor>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4619      	mov	r1, r3
 8000e26:	2088      	movs	r0, #136	@ 0x88
 8000e28:	f004 f956 	bl	80050d8 <Set_LED_Hex>
    Set_LED_Hex(140, getRainbowColor(color));
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <SetColor+0x68>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb48 	bl	80004c8 <getRainbowColor>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	208c      	movs	r0, #140	@ 0x8c
 8000e3e:	f004 f94b 	bl	80050d8 <Set_LED_Hex>
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001e0 	.word	0x200001e0
 8000e4c:	2000001c 	.word	0x2000001c
 8000e50:	20000204 	.word	0x20000204

08000e54 <SetBrightness>:


void SetBrightness() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <SetBrightness+0x3c>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <SetBrightness+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	2264      	movs	r2, #100	@ 0x64
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	f7ff fd76 	bl	800095c <clampValue>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a07      	ldr	r2, [pc, #28]	@ (8000e90 <SetBrightness+0x3c>)
 8000e74:	6013      	str	r3, [r2, #0]
    brightness = (uint8_t) (counter / (sensitivity / 2));
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <SetBrightness+0x3c>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <SetBrightness+0x40>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <SetBrightness+0x44>)
 8000e88:	701a      	strb	r2, [r3, #0]

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001e0 	.word	0x200001e0
 8000e94:	2000001c 	.word	0x2000001c
 8000e98:	20000018 	.word	0x20000018

08000e9c <Select>:

void Select() {
 8000e9c:	b598      	push	{r3, r4, r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 3 * sensitivity);
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <Select+0x48>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <Select+0x4c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	461a      	mov	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f7ff fd53 	bl	800095c <clampValue>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <Select+0x48>)
 8000eba:	6013      	str	r3, [r2, #0]
	Set_LED_Hex(LED_SET + (!isSet), getRainbowColor(color));
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <Select+0x50>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	f083 0301 	eor.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3b78      	subs	r3, #120	@ 0x78
 8000ec8:	b2dc      	uxtb	r4, r3
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <Select+0x54>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff faf9 	bl	80004c8 <getRainbowColor>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4620      	mov	r0, r4
 8000edc:	f004 f8fc 	bl	80050d8 <Set_LED_Hex>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd98      	pop	{r3, r4, r7, pc}
 8000ee4:	200001e0 	.word	0x200001e0
 8000ee8:	2000001c 	.word	0x2000001c
 8000eec:	20000020 	.word	0x20000020
 8000ef0:	20000204 	.word	0x20000204

08000ef4 <Wake>:

void Wake() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 1);
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <Wake+0x30>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2201      	movs	r2, #1
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd2b 	bl	800095c <clampValue>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <Wake+0x30>)
 8000f0a:	6013      	str	r3, [r2, #0]
	//counter = 0 -> isSet
	//counter = 1 -> isNotSet
	isSet = !counter;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <Wake+0x30>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf0c      	ite	eq
 8000f14:	2301      	moveq	r3, #1
 8000f16:	2300      	movne	r3, #0
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <Wake+0x34>)
 8000f1c:	701a      	strb	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001e0 	.word	0x200001e0
 8000f28:	20000020 	.word	0x20000020

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 ffc4 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f8e2 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 fa9a 	bl	8001470 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3c:	f000 fa78 	bl	8001430 <MX_DMA_Init>
  MX_TIM1_Init();
 8000f40:	f000 f9a0 	bl	8001284 <MX_TIM1_Init>
  MX_RTC_Init();
 8000f44:	f000 f944 	bl	80011d0 <MX_RTC_Init>
  MX_TIM3_Init();
 8000f48:	f000 fa1e 	bl	8001388 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 8000f4c:	213c      	movs	r1, #60	@ 0x3c
 8000f4e:	485d      	ldr	r0, [pc, #372]	@ (80010c4 <main+0x198>)
 8000f50:	f003 fa22 	bl	8004398 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000f54:	4b5b      	ldr	r3, [pc, #364]	@ (80010c4 <main+0x198>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80010c8 <main+0x19c>)
 8000f5c:	6013      	str	r3, [r2, #0]

	checkButtonPress();
 8000f5e:	f7ff fe4d 	bl	8000bfc <checkButtonPress>
	if(stateChangeRequest){
 8000f62:	4b5a      	ldr	r3, [pc, #360]	@ (80010cc <main+0x1a0>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d01e      	beq.n	8000fa8 <main+0x7c>
		switchState((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000f6a:	4b59      	ldr	r3, [pc, #356]	@ (80010d0 <main+0x1a4>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <main+0x56>
 8000f72:	4b57      	ldr	r3, [pc, #348]	@ (80010d0 <main+0x1a4>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d101      	bne.n	8000f7e <main+0x52>
 8000f7a:	4b56      	ldr	r3, [pc, #344]	@ (80010d4 <main+0x1a8>)
 8000f7c:	e002      	b.n	8000f84 <main+0x58>
 8000f7e:	4b56      	ldr	r3, [pc, #344]	@ (80010d8 <main+0x1ac>)
 8000f80:	e000      	b.n	8000f84 <main+0x58>
 8000f82:	4b56      	ldr	r3, [pc, #344]	@ (80010dc <main+0x1b0>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fd0d 	bl	80009a4 <switchState>
		stateChangeRequest = !stateChangeRequest;
 8000f8a:	4b50      	ldr	r3, [pc, #320]	@ (80010cc <main+0x1a0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf14      	ite	ne
 8000f92:	2301      	movne	r3, #1
 8000f94:	2300      	moveq	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f083 0301 	eor.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b49      	ldr	r3, [pc, #292]	@ (80010cc <main+0x1a0>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	494d      	ldr	r1, [pc, #308]	@ (80010e0 <main+0x1b4>)
 8000fac:	484d      	ldr	r0, [pc, #308]	@ (80010e4 <main+0x1b8>)
 8000fae:	f002 fc99 	bl	80038e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4949      	ldr	r1, [pc, #292]	@ (80010dc <main+0x1b0>)
 8000fb6:	484b      	ldr	r0, [pc, #300]	@ (80010e4 <main+0x1b8>)
 8000fb8:	f002 fd76 	bl	8003aa8 <HAL_RTC_GetDate>


	switch(currentState) {
 8000fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80010e8 <main+0x1bc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b09      	cmp	r3, #9
 8000fc4:	d85c      	bhi.n	8001080 <main+0x154>
 8000fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fcc <main+0xa0>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08001081 	.word	0x08001081
 8000fd0:	08000ff5 	.word	0x08000ff5
 8000fd4:	08000ffb 	.word	0x08000ffb
 8000fd8:	08001001 	.word	0x08001001
 8000fdc:	08001007 	.word	0x08001007
 8000fe0:	08001073 	.word	0x08001073
 8000fe4:	0800107b 	.word	0x0800107b
 8000fe8:	0800100d 	.word	0x0800100d
 8000fec:	0800102f 	.word	0x0800102f
 8000ff0:	08001051 	.word	0x08001051
		case SLEEP:

			break;
		case WAKE:
			Wake();
 8000ff4:	f7ff ff7e 	bl	8000ef4 <Wake>
			break;
 8000ff8:	e043      	b.n	8001082 <main+0x156>
		case SELECT:
			Select();
 8000ffa:	f7ff ff4f 	bl	8000e9c <Select>
			break;
 8000ffe:	e040      	b.n	8001082 <main+0x156>
		case SET_HOURS:
			SetHours();
 8001000:	f7ff fe22 	bl	8000c48 <SetHours>
			break;
 8001004:	e03d      	b.n	8001082 <main+0x156>
		case SET_MINUTES:
			SetMinutes();
 8001006:	f7ff fe49 	bl	8000c9c <SetMinutes>
			break;
 800100a:	e03a      	b.n	8001082 <main+0x156>
		case SET_MONTH:
			SetMonth((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 800100c:	4b30      	ldr	r3, [pc, #192]	@ (80010d0 <main+0x1a4>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d007      	beq.n	8001024 <main+0xf8>
 8001014:	4b2e      	ldr	r3, [pc, #184]	@ (80010d0 <main+0x1a4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d101      	bne.n	8001020 <main+0xf4>
 800101c:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <main+0x1a8>)
 800101e:	e002      	b.n	8001026 <main+0xfa>
 8001020:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <main+0x1ac>)
 8001022:	e000      	b.n	8001026 <main+0xfa>
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <main+0x1b0>)
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fe5c 	bl	8000ce4 <SetMonth>
			break;
 800102c:	e029      	b.n	8001082 <main+0x156>
		case SET_DAY:
			SetDay((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 800102e:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <main+0x1a4>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <main+0x11a>
 8001036:	4b26      	ldr	r3, [pc, #152]	@ (80010d0 <main+0x1a4>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d101      	bne.n	8001042 <main+0x116>
 800103e:	4b25      	ldr	r3, [pc, #148]	@ (80010d4 <main+0x1a8>)
 8001040:	e002      	b.n	8001048 <main+0x11c>
 8001042:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <main+0x1ac>)
 8001044:	e000      	b.n	8001048 <main+0x11c>
 8001046:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <main+0x1b0>)
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fe77 	bl	8000d3c <SetDay>
			break;
 800104e:	e018      	b.n	8001082 <main+0x156>
		case SET_YEAR:
			SetYear((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <main+0x1a4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d007      	beq.n	8001068 <main+0x13c>
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <main+0x1a4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d101      	bne.n	8001064 <main+0x138>
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <main+0x1a8>)
 8001062:	e002      	b.n	800106a <main+0x13e>
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <main+0x1ac>)
 8001066:	e000      	b.n	800106a <main+0x13e>
 8001068:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <main+0x1b0>)
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fe90 	bl	8000d90 <SetYear>
			break;
 8001070:	e007      	b.n	8001082 <main+0x156>
		case SET_COLOR:
			SetColor(&sDate);
 8001072:	481a      	ldr	r0, [pc, #104]	@ (80010dc <main+0x1b0>)
 8001074:	f7ff feb8 	bl	8000de8 <SetColor>
			break;
 8001078:	e003      	b.n	8001082 <main+0x156>
		case SET_BRIGHTNESS:
			SetBrightness();
 800107a:	f7ff feeb 	bl	8000e54 <SetBrightness>
			break;
 800107e:	e000      	b.n	8001082 <main+0x156>
		default:
			break;
 8001080:	bf00      	nop
	}

	__HAL_TIM_SET_COUNTER(&htim3, counter);
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <main+0x198>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <main+0x19c>)
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24
	Segment_Display(displayStr);
 800108c:	4817      	ldr	r0, [pc, #92]	@ (80010ec <main+0x1c0>)
 800108e:	f000 fd4f 	bl	8001b30 <Segment_Display>

	display_time(sTime.Hours, sTime.Minutes);
 8001092:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <main+0x1b4>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <main+0x1b4>)
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	4619      	mov	r1, r3
 800109e:	4610      	mov	r0, r2
 80010a0:	f7ff fb7c 	bl	800079c <display_time>
	display_bmp(color, brightness);
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <main+0x1c4>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <main+0x1c8>)
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fae2 	bl	800067c <display_bmp>
	WS2812B_Send(&htim1);
 80010b8:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <main+0x1cc>)
 80010ba:	f004 f841 	bl	8005140 <WS2812B_Send>
	clear_display_buffer();
 80010be:	f7ff fa6d 	bl	800059c <clear_display_buffer>
	counter = __HAL_TIM_GET_COUNTER(&htim3);
 80010c2:	e747      	b.n	8000f54 <main+0x28>
 80010c4:	20000138 	.word	0x20000138
 80010c8:	200001e0 	.word	0x200001e0
 80010cc:	20000288 	.word	0x20000288
 80010d0:	20000289 	.word	0x20000289
 80010d4:	20000200 	.word	0x20000200
 80010d8:	200001fc 	.word	0x200001fc
 80010dc:	200001f8 	.word	0x200001f8
 80010e0:	200001e4 	.word	0x200001e4
 80010e4:	200000d0 	.word	0x200000d0
 80010e8:	20000205 	.word	0x20000205
 80010ec:	20000208 	.word	0x20000208
 80010f0:	20000204 	.word	0x20000204
 80010f4:	20000018 	.word	0x20000018
 80010f8:	200000f0 	.word	0x200000f0

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	@ 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	@ 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f8a0 	bl	8005250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <SystemClock_Config+0xcc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	4a27      	ldr	r2, [pc, #156]	@ (80011c8 <SystemClock_Config+0xcc>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <SystemClock_Config+0xcc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <SystemClock_Config+0xd0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <SystemClock_Config+0xd0>)
 8001146:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <SystemClock_Config+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001158:	2306      	movs	r3, #6
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001170:	2308      	movs	r3, #8
 8001172:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001174:	2348      	movs	r3, #72	@ 0x48
 8001176:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117c:	2304      	movs	r3, #4
 800117e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4618      	mov	r0, r3
 8001186:	f001 fd89 	bl	8002c9c <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001190:	f000 f9f2 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
 8001196:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001198:	2302      	movs	r3, #2
 800119a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	2102      	movs	r1, #2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 ffeb 	bl	800318c <HAL_RCC_ClockConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011bc:	f000 f9dc 	bl	8001578 <Error_Handler>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3750      	adds	r7, #80	@ 0x50
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <MX_RTC_Init+0xac>)
 80011ea:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <MX_RTC_Init+0xb0>)
 80011ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <MX_RTC_Init+0xac>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011f4:	4b21      	ldr	r3, [pc, #132]	@ (800127c <MX_RTC_Init+0xac>)
 80011f6:	227f      	movs	r2, #127	@ 0x7f
 80011f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <MX_RTC_Init+0xac>)
 80011fc:	22ff      	movs	r2, #255	@ 0xff
 80011fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_RTC_Init+0xac>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_RTC_Init+0xac>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_RTC_Init+0xac>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001212:	481a      	ldr	r0, [pc, #104]	@ (800127c <MX_RTC_Init+0xac>)
 8001214:	f002 fa56 	bl	80036c4 <HAL_RTC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800121e:	f000 f9ab 	bl	8001578 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8001222:	2307      	movs	r3, #7
 8001224:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 8001226:	230f      	movs	r3, #15
 8001228:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 800122a:	2332      	movs	r3, #50	@ 0x32
 800122c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	480f      	ldr	r0, [pc, #60]	@ (800127c <MX_RTC_Init+0xac>)
 800123e:	f002 fab7 	bl	80037b0 <HAL_RTC_SetTime>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001248:	f000 f996 	bl	8001578 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800124c:	2302      	movs	r3, #2
 800124e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001250:	2301      	movs	r3, #1
 8001252:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 8001254:	2317      	movs	r3, #23
 8001256:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001258:	2318      	movs	r3, #24
 800125a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_RTC_Init+0xac>)
 8001264:	f002 fb9c 	bl	80039a0 <HAL_RTC_SetDate>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800126e:	f000 f983 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000d0 	.word	0x200000d0
 8001280:	40002800 	.word	0x40002800

08001284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b092      	sub	sp, #72	@ 0x48
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2220      	movs	r2, #32
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 ffce 	bl	8005250 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b4:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012b6:	4a33      	ldr	r2, [pc, #204]	@ (8001384 <MX_TIM1_Init+0x100>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012ba:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80012c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012c8:	2259      	movs	r2, #89	@ 0x59
 80012ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012de:	4828      	ldr	r0, [pc, #160]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012e0:	f002 fcee 	bl	8003cc0 <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80012ea:	f000 f945 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012fa:	4619      	mov	r1, r3
 80012fc:	4820      	ldr	r0, [pc, #128]	@ (8001380 <MX_TIM1_Init+0xfc>)
 80012fe:	f003 fde3 	bl	8004ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001308:	f000 f936 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	@ 0x60
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	4813      	ldr	r0, [pc, #76]	@ (8001380 <MX_TIM1_Init+0xfc>)
 8001332:	f003 f9c7 	bl	80046c4 <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800133c:	f000 f91c 	bl	8001578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001354:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001358:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	@ (8001380 <MX_TIM1_Init+0xfc>)
 8001364:	f003 fe1e 	bl	8004fa4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800136e:	f000 f903 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001372:	4803      	ldr	r0, [pc, #12]	@ (8001380 <MX_TIM1_Init+0xfc>)
 8001374:	f000 fa40 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8001378:	bf00      	nop
 800137a:	3748      	adds	r7, #72	@ 0x48
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000f0 	.word	0x200000f0
 8001384:	40010000 	.word	0x40010000

08001388 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2224      	movs	r2, #36	@ 0x24
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 ff5a 	bl	8005250 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <MX_TIM3_Init+0xa0>)
 80013a6:	4a21      	ldr	r2, [pc, #132]	@ (800142c <MX_TIM3_Init+0xa4>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_TIM3_Init+0xa0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_TIM3_Init+0xa0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_TIM3_Init+0xa0>)
 80013b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_TIM3_Init+0xa0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <MX_TIM3_Init+0xa0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ca:	2303      	movs	r3, #3
 80013cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013ce:	2302      	movs	r3, #2
 80013d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d2:	2301      	movs	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e2:	2301      	movs	r3, #1
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <MX_TIM3_Init+0xa0>)
 80013f6:	f002 ff29 	bl	800424c <HAL_TIM_Encoder_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001400:	f000 f8ba 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_TIM3_Init+0xa0>)
 8001412:	f003 fd59 	bl	8004ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800141c:	f000 f8ac 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3730      	adds	r7, #48	@ 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000138 	.word	0x20000138
 800142c:	40000400 	.word	0x40000400

08001430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_DMA_Init+0x3c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <MX_DMA_Init+0x3c>)
 8001440:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_DMA_Init+0x3c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2108      	movs	r1, #8
 8001456:	2039      	movs	r0, #57	@ 0x39
 8001458:	f000 fea1 	bl	800219e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800145c:	2039      	movs	r0, #57	@ 0x39
 800145e:	f000 feba 	bl	80021d6 <HAL_NVIC_EnableIRQ>

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b38      	ldr	r3, [pc, #224]	@ (800156c <MX_GPIO_Init+0xfc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a37      	ldr	r2, [pc, #220]	@ (800156c <MX_GPIO_Init+0xfc>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b35      	ldr	r3, [pc, #212]	@ (800156c <MX_GPIO_Init+0xfc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b31      	ldr	r3, [pc, #196]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a30      	ldr	r2, [pc, #192]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a29      	ldr	r2, [pc, #164]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a22      	ldr	r2, [pc, #136]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <MX_GPIO_Init+0xfc>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 80014f6:	2200      	movs	r2, #0
 80014f8:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 80014fc:	481c      	ldr	r0, [pc, #112]	@ (8001570 <MX_GPIO_Init+0x100>)
 80014fe:	f001 fbb3 	bl	8002c68 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001502:	2200      	movs	r2, #0
 8001504:	f241 4107 	movw	r1, #5127	@ 0x1407
 8001508:	481a      	ldr	r0, [pc, #104]	@ (8001574 <MX_GPIO_Init+0x104>)
 800150a:	f001 fbad 	bl	8002c68 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800150e:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8001512:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4812      	ldr	r0, [pc, #72]	@ (8001570 <MX_GPIO_Init+0x100>)
 8001528:	f001 fa02 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 800152c:	f241 4307 	movw	r3, #5127	@ 0x1407
 8001530:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480b      	ldr	r0, [pc, #44]	@ (8001574 <MX_GPIO_Init+0x104>)
 8001546:	f001 f9f3 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800154a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	2301      	movs	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_GPIO_Init+0x104>)
 8001560:	f001 f9e6 	bl	8002930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	@ 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <Error_Handler+0x8>

08001584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <HAL_MspInit+0x90>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a20      	ldr	r2, [pc, #128]	@ (8001614 <HAL_MspInit+0x90>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <HAL_MspInit+0x90>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <HAL_MspInit+0x90>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a19      	ldr	r2, [pc, #100]	@ (8001614 <HAL_MspInit+0x90>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <HAL_MspInit+0x90>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2101      	movs	r1, #1
 80015c6:	f06f 000b 	mvn.w	r0, #11
 80015ca:	f000 fde8 	bl	800219e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2102      	movs	r1, #2
 80015d2:	f06f 000a 	mvn.w	r0, #10
 80015d6:	f000 fde2 	bl	800219e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2103      	movs	r1, #3
 80015de:	f06f 0009 	mvn.w	r0, #9
 80015e2:	f000 fddc 	bl	800219e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2104      	movs	r1, #4
 80015ea:	f06f 0004 	mvn.w	r0, #4
 80015ee:	f000 fdd6 	bl	800219e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2105      	movs	r1, #5
 80015f6:	f06f 0003 	mvn.w	r0, #3
 80015fa:	f000 fdd0 	bl	800219e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2106      	movs	r1, #6
 8001602:	f06f 0001 	mvn.w	r0, #1
 8001606:	f000 fdca 	bl	800219e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0c      	ldr	r2, [pc, #48]	@ (8001668 <HAL_RTC_MspInit+0x50>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d111      	bne.n	8001660 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800163c:	2302      	movs	r3, #2
 800163e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001644:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	4618      	mov	r0, r3
 800164c:	f001 ff4a 	bl	80034e4 <HAL_RCCEx_PeriphCLKConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001656:	f7ff ff8f 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <HAL_RTC_MspInit+0x54>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40002800 	.word	0x40002800
 800166c:	42470e3c 	.word	0x42470e3c

08001670 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a32      	ldr	r2, [pc, #200]	@ (8001748 <HAL_TIM_PWM_MspInit+0xd8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d15d      	bne.n	800173e <HAL_TIM_PWM_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <HAL_TIM_PWM_MspInit+0xdc>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a30      	ldr	r2, [pc, #192]	@ (800174c <HAL_TIM_PWM_MspInit+0xdc>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <HAL_TIM_PWM_MspInit+0xdc>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800169e:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <HAL_TIM_PWM_MspInit+0xe4>)
 80016a2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016a6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80016aa:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ac:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016ae:	2240      	movs	r2, #64	@ 0x40
 80016b0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b2:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016b8:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016be:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c0:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016c6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ce:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80016e2:	481b      	ldr	r0, [pc, #108]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016e4:	f000 fd92 	bl	800220c <HAL_DMA_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80016ee:	f7ff ff43 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a16      	ldr	r2, [pc, #88]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80016f8:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <HAL_TIM_PWM_MspInit+0xe0>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2018      	movs	r0, #24
 8001704:	f000 fd4b 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001708:	2018      	movs	r0, #24
 800170a:	f000 fd64 	bl	80021d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2019      	movs	r0, #25
 8001714:	f000 fd43 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001718:	2019      	movs	r0, #25
 800171a:	f000 fd5c 	bl	80021d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	201a      	movs	r0, #26
 8001724:	f000 fd3b 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001728:	201a      	movs	r0, #26
 800172a:	f000 fd54 	bl	80021d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201b      	movs	r0, #27
 8001734:	f000 fd33 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001738:	201b      	movs	r0, #27
 800173a:	f000 fd4c 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40010000 	.word	0x40010000
 800174c:	40023800 	.word	0x40023800
 8001750:	20000180 	.word	0x20000180
 8001754:	40026428 	.word	0x40026428

08001758 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <HAL_TIM_Encoder_MspInit+0x94>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d133      	bne.n	80017e2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a1b      	ldr	r2, [pc, #108]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0x98>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0x98>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0x98>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0x98>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017b2:	2330      	movs	r3, #48	@ 0x30
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c2:	2302      	movs	r3, #2
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	@ (80017f4 <HAL_TIM_Encoder_MspInit+0x9c>)
 80017ce:	f001 f8af 	bl	8002930 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2109      	movs	r1, #9
 80017d6:	201d      	movs	r0, #29
 80017d8:	f000 fce1 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017dc:	201d      	movs	r0, #29
 80017de:	f000 fcfa 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400

080017f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <HAL_TIM_MspPostInit+0x68>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d11e      	bne.n	8001858 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_TIM_MspPostInit+0x6c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <HAL_TIM_MspPostInit+0x6c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_TIM_MspPostInit+0x6c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001836:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001848:	2301      	movs	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <HAL_TIM_MspPostInit+0x70>)
 8001854:	f001 f86c 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40010000 	.word	0x40010000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void){
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c2:	f000 fb4d 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80018d2:	f002 fdef 	bl	80044b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200000f0 	.word	0x200000f0

080018e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018e6:	f002 fde5 	bl	80044b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000f0 	.word	0x200000f0

080018f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80018fa:	f002 fddb 	bl	80044b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200000f0 	.word	0x200000f0

08001908 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <TIM1_CC_IRQHandler+0x10>)
 800190e:	f002 fdd1 	bl	80044b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200000f0 	.word	0x200000f0

0800191c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <TIM3_IRQHandler+0x10>)
 8001922:	f002 fdc7 	bl	80044b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000138 	.word	0x20000138

08001930 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <DMA2_Stream1_IRQHandler+0x10>)
 8001936:	f000 fd91 	bl	800245c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000180 	.word	0x20000180

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480d      	ldr	r0, [pc, #52]	@ (80019a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800196e:	490e      	ldr	r1, [pc, #56]	@ (80019a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001970:	4a0e      	ldr	r2, [pc, #56]	@ (80019ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001984:	4c0b      	ldr	r4, [pc, #44]	@ (80019b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001992:	f7ff ffd7 	bl	8001944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001996:	f003 fc77 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff fac7 	bl	8000f2c <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80019ac:	08005678 	.word	0x08005678
  ldr r2, =_sbss
 80019b0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80019b4:	20001f10 	.word	0x20001f10

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>
	...

080019bc <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	2104      	movs	r1, #4
 80019da:	4830      	ldr	r0, [pc, #192]	@ (8001a9c <setSegments+0xe0>)
 80019dc:	f001 f944 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf0c      	ite	eq
 80019ea:	2301      	moveq	r3, #1
 80019ec:	2300      	movne	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	2101      	movs	r1, #1
 80019f4:	4829      	ldr	r0, [pc, #164]	@ (8001a9c <setSegments+0xe0>)
 80019f6:	f001 f937 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	4823      	ldr	r0, [pc, #140]	@ (8001a9c <setSegments+0xe0>)
 8001a10:	f001 f92a 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	2104      	movs	r1, #4
 8001a28:	481d      	ldr	r0, [pc, #116]	@ (8001aa0 <setSegments+0xe4>)
 8001a2a:	f001 f91d 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2101      	movs	r1, #1
 8001a42:	4817      	ldr	r0, [pc, #92]	@ (8001aa0 <setSegments+0xe4>)
 8001a44:	f001 f910 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	480f      	ldr	r0, [pc, #60]	@ (8001a9c <setSegments+0xe0>)
 8001a5e:	f001 f903 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	2102      	movs	r1, #2
 8001a76:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <setSegments+0xe0>)
 8001a78:	f001 f8f6 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	09db      	lsrs	r3, r3, #7
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2140      	movs	r1, #64	@ 0x40
 8001a8c:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <setSegments+0xe0>)
 8001a8e:	f001 f8eb 	bl	8002c68 <HAL_GPIO_WritePin>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ac0:	4819      	ldr	r0, [pc, #100]	@ (8001b28 <activateDigit+0x84>)
 8001ac2:	f001 f8d1 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ad8:	4813      	ldr	r0, [pc, #76]	@ (8001b28 <activateDigit+0x84>)
 8001ada:	f001 f8c5 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	2180      	movs	r1, #128	@ 0x80
 8001aee:	480f      	ldr	r0, [pc, #60]	@ (8001b2c <activateDigit+0x88>)
 8001af0:	f001 f8ba 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	2120      	movs	r1, #32
 8001b04:	4809      	ldr	r0, [pc, #36]	@ (8001b2c <activateDigit+0x88>)
 8001b06:	f001 f8af 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <activateDigit+0x84>)
 8001b1c:	f001 f8a4 	bl	8002c68 <HAL_GPIO_WritePin>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020000 	.word	0x40020000

08001b30 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fb8d 	bl	8005260 <strncpy>
    truncatedInput[4] = '\0';
 8001b46:	2300      	movs	r3, #0
 8001b48:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e1ab      	b.n	8001ea8 <Segment_Display+0x378>
        activateDigit(i + 1);
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	3301      	adds	r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ffa4 	bl	8001aa4 <activateDigit>

		char ch = truncatedInput[i];
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	3310      	adds	r3, #16
 8001b60:	443b      	add	r3, r7
 8001b62:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001b66:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	2b7a      	cmp	r3, #122	@ 0x7a
 8001b6c:	f200 8192 	bhi.w	8001e94 <Segment_Display+0x364>
 8001b70:	a201      	add	r2, pc, #4	@ (adr r2, 8001b78 <Segment_Display+0x48>)
 8001b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b76:	bf00      	nop
 8001b78:	08001eb3 	.word	0x08001eb3
 8001b7c:	08001e95 	.word	0x08001e95
 8001b80:	08001e95 	.word	0x08001e95
 8001b84:	08001e95 	.word	0x08001e95
 8001b88:	08001e95 	.word	0x08001e95
 8001b8c:	08001e95 	.word	0x08001e95
 8001b90:	08001e95 	.word	0x08001e95
 8001b94:	08001e95 	.word	0x08001e95
 8001b98:	08001e95 	.word	0x08001e95
 8001b9c:	08001e95 	.word	0x08001e95
 8001ba0:	08001e95 	.word	0x08001e95
 8001ba4:	08001e95 	.word	0x08001e95
 8001ba8:	08001e95 	.word	0x08001e95
 8001bac:	08001e95 	.word	0x08001e95
 8001bb0:	08001e95 	.word	0x08001e95
 8001bb4:	08001e95 	.word	0x08001e95
 8001bb8:	08001e95 	.word	0x08001e95
 8001bbc:	08001e95 	.word	0x08001e95
 8001bc0:	08001e95 	.word	0x08001e95
 8001bc4:	08001e95 	.word	0x08001e95
 8001bc8:	08001e95 	.word	0x08001e95
 8001bcc:	08001e95 	.word	0x08001e95
 8001bd0:	08001e95 	.word	0x08001e95
 8001bd4:	08001e95 	.word	0x08001e95
 8001bd8:	08001e95 	.word	0x08001e95
 8001bdc:	08001e95 	.word	0x08001e95
 8001be0:	08001e95 	.word	0x08001e95
 8001be4:	08001e95 	.word	0x08001e95
 8001be8:	08001e95 	.word	0x08001e95
 8001bec:	08001e95 	.word	0x08001e95
 8001bf0:	08001e95 	.word	0x08001e95
 8001bf4:	08001e95 	.word	0x08001e95
 8001bf8:	08001e85 	.word	0x08001e85
 8001bfc:	08001e95 	.word	0x08001e95
 8001c00:	08001e95 	.word	0x08001e95
 8001c04:	08001e95 	.word	0x08001e95
 8001c08:	08001e95 	.word	0x08001e95
 8001c0c:	08001e95 	.word	0x08001e95
 8001c10:	08001e95 	.word	0x08001e95
 8001c14:	08001e95 	.word	0x08001e95
 8001c18:	08001e95 	.word	0x08001e95
 8001c1c:	08001e95 	.word	0x08001e95
 8001c20:	08001e95 	.word	0x08001e95
 8001c24:	08001e95 	.word	0x08001e95
 8001c28:	08001e95 	.word	0x08001e95
 8001c2c:	08001e8d 	.word	0x08001e8d
 8001c30:	08001e95 	.word	0x08001e95
 8001c34:	08001e95 	.word	0x08001e95
 8001c38:	08001d65 	.word	0x08001d65
 8001c3c:	08001d6d 	.word	0x08001d6d
 8001c40:	08001d75 	.word	0x08001d75
 8001c44:	08001d7d 	.word	0x08001d7d
 8001c48:	08001d85 	.word	0x08001d85
 8001c4c:	08001d8d 	.word	0x08001d8d
 8001c50:	08001d95 	.word	0x08001d95
 8001c54:	08001d9d 	.word	0x08001d9d
 8001c58:	08001da5 	.word	0x08001da5
 8001c5c:	08001dad 	.word	0x08001dad
 8001c60:	08001e95 	.word	0x08001e95
 8001c64:	08001e95 	.word	0x08001e95
 8001c68:	08001e95 	.word	0x08001e95
 8001c6c:	08001e95 	.word	0x08001e95
 8001c70:	08001e95 	.word	0x08001e95
 8001c74:	08001e95 	.word	0x08001e95
 8001c78:	08001e95 	.word	0x08001e95
 8001c7c:	08001db5 	.word	0x08001db5
 8001c80:	08001dbd 	.word	0x08001dbd
 8001c84:	08001dc5 	.word	0x08001dc5
 8001c88:	08001dcd 	.word	0x08001dcd
 8001c8c:	08001dd5 	.word	0x08001dd5
 8001c90:	08001ddd 	.word	0x08001ddd
 8001c94:	08001de5 	.word	0x08001de5
 8001c98:	08001ded 	.word	0x08001ded
 8001c9c:	08001df5 	.word	0x08001df5
 8001ca0:	08001dfd 	.word	0x08001dfd
 8001ca4:	08001e05 	.word	0x08001e05
 8001ca8:	08001e0d 	.word	0x08001e0d
 8001cac:	08001e15 	.word	0x08001e15
 8001cb0:	08001e1d 	.word	0x08001e1d
 8001cb4:	08001e25 	.word	0x08001e25
 8001cb8:	08001e2d 	.word	0x08001e2d
 8001cbc:	08001e35 	.word	0x08001e35
 8001cc0:	08001e3d 	.word	0x08001e3d
 8001cc4:	08001e45 	.word	0x08001e45
 8001cc8:	08001e4d 	.word	0x08001e4d
 8001ccc:	08001e55 	.word	0x08001e55
 8001cd0:	08001e5d 	.word	0x08001e5d
 8001cd4:	08001e65 	.word	0x08001e65
 8001cd8:	08001e6d 	.word	0x08001e6d
 8001cdc:	08001e75 	.word	0x08001e75
 8001ce0:	08001e7d 	.word	0x08001e7d
 8001ce4:	08001e95 	.word	0x08001e95
 8001ce8:	08001e95 	.word	0x08001e95
 8001cec:	08001e95 	.word	0x08001e95
 8001cf0:	08001e95 	.word	0x08001e95
 8001cf4:	08001e95 	.word	0x08001e95
 8001cf8:	08001e95 	.word	0x08001e95
 8001cfc:	08001db5 	.word	0x08001db5
 8001d00:	08001dbd 	.word	0x08001dbd
 8001d04:	08001dc5 	.word	0x08001dc5
 8001d08:	08001dcd 	.word	0x08001dcd
 8001d0c:	08001dd5 	.word	0x08001dd5
 8001d10:	08001ddd 	.word	0x08001ddd
 8001d14:	08001de5 	.word	0x08001de5
 8001d18:	08001ded 	.word	0x08001ded
 8001d1c:	08001df5 	.word	0x08001df5
 8001d20:	08001dfd 	.word	0x08001dfd
 8001d24:	08001e05 	.word	0x08001e05
 8001d28:	08001e0d 	.word	0x08001e0d
 8001d2c:	08001e15 	.word	0x08001e15
 8001d30:	08001e1d 	.word	0x08001e1d
 8001d34:	08001e25 	.word	0x08001e25
 8001d38:	08001e2d 	.word	0x08001e2d
 8001d3c:	08001e35 	.word	0x08001e35
 8001d40:	08001e3d 	.word	0x08001e3d
 8001d44:	08001e45 	.word	0x08001e45
 8001d48:	08001e4d 	.word	0x08001e4d
 8001d4c:	08001e55 	.word	0x08001e55
 8001d50:	08001e5d 	.word	0x08001e5d
 8001d54:	08001e65 	.word	0x08001e65
 8001d58:	08001e6d 	.word	0x08001e6d
 8001d5c:	08001e75 	.word	0x08001e75
 8001d60:	08001e7d 	.word	0x08001e7d
        	case '\0':
        		return;
            case '0':
                setSegments(0x3F);
 8001d64:	203f      	movs	r0, #63	@ 0x3f
 8001d66:	f7ff fe29 	bl	80019bc <setSegments>
                break;
 8001d6a:	e097      	b.n	8001e9c <Segment_Display+0x36c>
            case '1':
                setSegments(0x06);
 8001d6c:	2006      	movs	r0, #6
 8001d6e:	f7ff fe25 	bl	80019bc <setSegments>
                break;
 8001d72:	e093      	b.n	8001e9c <Segment_Display+0x36c>
            case '2':
                setSegments(0x5B);
 8001d74:	205b      	movs	r0, #91	@ 0x5b
 8001d76:	f7ff fe21 	bl	80019bc <setSegments>
                break;
 8001d7a:	e08f      	b.n	8001e9c <Segment_Display+0x36c>
            case '3':
                setSegments(0x4F);
 8001d7c:	204f      	movs	r0, #79	@ 0x4f
 8001d7e:	f7ff fe1d 	bl	80019bc <setSegments>
                break;
 8001d82:	e08b      	b.n	8001e9c <Segment_Display+0x36c>
            case '4':
                setSegments(0x66);
 8001d84:	2066      	movs	r0, #102	@ 0x66
 8001d86:	f7ff fe19 	bl	80019bc <setSegments>
                break;
 8001d8a:	e087      	b.n	8001e9c <Segment_Display+0x36c>
            case '5':
                setSegments(0x6D);
 8001d8c:	206d      	movs	r0, #109	@ 0x6d
 8001d8e:	f7ff fe15 	bl	80019bc <setSegments>
                break;
 8001d92:	e083      	b.n	8001e9c <Segment_Display+0x36c>
            case '6':
                setSegments(0x7D);
 8001d94:	207d      	movs	r0, #125	@ 0x7d
 8001d96:	f7ff fe11 	bl	80019bc <setSegments>
                break;
 8001d9a:	e07f      	b.n	8001e9c <Segment_Display+0x36c>
            case '7':
                setSegments(0x07);
 8001d9c:	2007      	movs	r0, #7
 8001d9e:	f7ff fe0d 	bl	80019bc <setSegments>
                break;
 8001da2:	e07b      	b.n	8001e9c <Segment_Display+0x36c>
            case '8':
                setSegments(0x7F);
 8001da4:	207f      	movs	r0, #127	@ 0x7f
 8001da6:	f7ff fe09 	bl	80019bc <setSegments>
                break;
 8001daa:	e077      	b.n	8001e9c <Segment_Display+0x36c>
            case '9':
                setSegments(0x6F);
 8001dac:	206f      	movs	r0, #111	@ 0x6f
 8001dae:	f7ff fe05 	bl	80019bc <setSegments>
                break;
 8001db2:	e073      	b.n	8001e9c <Segment_Display+0x36c>
            case 'a':
            case 'A':
                setSegments(0x77);
 8001db4:	2077      	movs	r0, #119	@ 0x77
 8001db6:	f7ff fe01 	bl	80019bc <setSegments>
                break;
 8001dba:	e06f      	b.n	8001e9c <Segment_Display+0x36c>
            case 'b':
            case 'B':
                setSegments(0x7C);
 8001dbc:	207c      	movs	r0, #124	@ 0x7c
 8001dbe:	f7ff fdfd 	bl	80019bc <setSegments>
                break;
 8001dc2:	e06b      	b.n	8001e9c <Segment_Display+0x36c>
            case 'c':
            case 'C':
                setSegments(0x39);
 8001dc4:	2039      	movs	r0, #57	@ 0x39
 8001dc6:	f7ff fdf9 	bl	80019bc <setSegments>
                break;
 8001dca:	e067      	b.n	8001e9c <Segment_Display+0x36c>
            case 'd':
            case 'D':
                setSegments(0x5E);
 8001dcc:	205e      	movs	r0, #94	@ 0x5e
 8001dce:	f7ff fdf5 	bl	80019bc <setSegments>
                break;
 8001dd2:	e063      	b.n	8001e9c <Segment_Display+0x36c>
            case 'e':
            case 'E':
                setSegments(0x79);
 8001dd4:	2079      	movs	r0, #121	@ 0x79
 8001dd6:	f7ff fdf1 	bl	80019bc <setSegments>
                break;
 8001dda:	e05f      	b.n	8001e9c <Segment_Display+0x36c>
            case 'f':
            case 'F':
                setSegments(0x71);
 8001ddc:	2071      	movs	r0, #113	@ 0x71
 8001dde:	f7ff fded 	bl	80019bc <setSegments>
                break;
 8001de2:	e05b      	b.n	8001e9c <Segment_Display+0x36c>
            case 'g':
            case 'G':
                setSegments(0x3D);
 8001de4:	203d      	movs	r0, #61	@ 0x3d
 8001de6:	f7ff fde9 	bl	80019bc <setSegments>
                break;
 8001dea:	e057      	b.n	8001e9c <Segment_Display+0x36c>
            case 'h':
            case 'H':
                setSegments(0x76);
 8001dec:	2076      	movs	r0, #118	@ 0x76
 8001dee:	f7ff fde5 	bl	80019bc <setSegments>
                break;
 8001df2:	e053      	b.n	8001e9c <Segment_Display+0x36c>
            case 'i':
            case 'I':
                setSegments(0x30);
 8001df4:	2030      	movs	r0, #48	@ 0x30
 8001df6:	f7ff fde1 	bl	80019bc <setSegments>
                break;
 8001dfa:	e04f      	b.n	8001e9c <Segment_Display+0x36c>
            case 'j':
            case 'J':
                setSegments(0x1E);
 8001dfc:	201e      	movs	r0, #30
 8001dfe:	f7ff fddd 	bl	80019bc <setSegments>
                break;
 8001e02:	e04b      	b.n	8001e9c <Segment_Display+0x36c>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 8001e04:	2076      	movs	r0, #118	@ 0x76
 8001e06:	f7ff fdd9 	bl	80019bc <setSegments>
                break;
 8001e0a:	e047      	b.n	8001e9c <Segment_Display+0x36c>
            case 'l':
            case 'L':
                setSegments(0x38);
 8001e0c:	2038      	movs	r0, #56	@ 0x38
 8001e0e:	f7ff fdd5 	bl	80019bc <setSegments>
                break;
 8001e12:	e043      	b.n	8001e9c <Segment_Display+0x36c>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 8001e14:	2037      	movs	r0, #55	@ 0x37
 8001e16:	f7ff fdd1 	bl	80019bc <setSegments>
                break;
 8001e1a:	e03f      	b.n	8001e9c <Segment_Display+0x36c>
            case 'n':
            case 'N':
                setSegments(0x54);
 8001e1c:	2054      	movs	r0, #84	@ 0x54
 8001e1e:	f7ff fdcd 	bl	80019bc <setSegments>
                break;
 8001e22:	e03b      	b.n	8001e9c <Segment_Display+0x36c>
            case 'o':
            case 'O':
                setSegments(0x3F);
 8001e24:	203f      	movs	r0, #63	@ 0x3f
 8001e26:	f7ff fdc9 	bl	80019bc <setSegments>
                break;
 8001e2a:	e037      	b.n	8001e9c <Segment_Display+0x36c>
            case 'p':
            case 'P':
                setSegments(0x73);
 8001e2c:	2073      	movs	r0, #115	@ 0x73
 8001e2e:	f7ff fdc5 	bl	80019bc <setSegments>
                break;
 8001e32:	e033      	b.n	8001e9c <Segment_Display+0x36c>
            case 'q':
            case 'Q':
                setSegments(0x67);
 8001e34:	2067      	movs	r0, #103	@ 0x67
 8001e36:	f7ff fdc1 	bl	80019bc <setSegments>
                break;
 8001e3a:	e02f      	b.n	8001e9c <Segment_Display+0x36c>
            case 'r':
            case 'R':
                setSegments(0x50);
 8001e3c:	2050      	movs	r0, #80	@ 0x50
 8001e3e:	f7ff fdbd 	bl	80019bc <setSegments>
                break;
 8001e42:	e02b      	b.n	8001e9c <Segment_Display+0x36c>
            case 's':
            case 'S':
                setSegments(0x6D);
 8001e44:	206d      	movs	r0, #109	@ 0x6d
 8001e46:	f7ff fdb9 	bl	80019bc <setSegments>
                break;
 8001e4a:	e027      	b.n	8001e9c <Segment_Display+0x36c>
            case 't':
            case 'T':
                setSegments(0x78);
 8001e4c:	2078      	movs	r0, #120	@ 0x78
 8001e4e:	f7ff fdb5 	bl	80019bc <setSegments>
                break;
 8001e52:	e023      	b.n	8001e9c <Segment_Display+0x36c>
            case 'u':
            case 'U':
                setSegments(0x3E);
 8001e54:	203e      	movs	r0, #62	@ 0x3e
 8001e56:	f7ff fdb1 	bl	80019bc <setSegments>
                break;
 8001e5a:	e01f      	b.n	8001e9c <Segment_Display+0x36c>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8001e5c:	203e      	movs	r0, #62	@ 0x3e
 8001e5e:	f7ff fdad 	bl	80019bc <setSegments>
                break;
 8001e62:	e01b      	b.n	8001e9c <Segment_Display+0x36c>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 8001e64:	202a      	movs	r0, #42	@ 0x2a
 8001e66:	f7ff fda9 	bl	80019bc <setSegments>
                break;
 8001e6a:	e017      	b.n	8001e9c <Segment_Display+0x36c>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8001e6c:	2076      	movs	r0, #118	@ 0x76
 8001e6e:	f7ff fda5 	bl	80019bc <setSegments>
                break;
 8001e72:	e013      	b.n	8001e9c <Segment_Display+0x36c>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 8001e74:	206e      	movs	r0, #110	@ 0x6e
 8001e76:	f7ff fda1 	bl	80019bc <setSegments>
                break;
 8001e7a:	e00f      	b.n	8001e9c <Segment_Display+0x36c>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8001e7c:	205b      	movs	r0, #91	@ 0x5b
 8001e7e:	f7ff fd9d 	bl	80019bc <setSegments>
                break;
 8001e82:	e00b      	b.n	8001e9c <Segment_Display+0x36c>
            case ' ':
                // Blank character
                setSegments(0x00);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fd99 	bl	80019bc <setSegments>
                break;
 8001e8a:	e007      	b.n	8001e9c <Segment_Display+0x36c>
            case '-':
            	setSegments(0x04);
 8001e8c:	2004      	movs	r0, #4
 8001e8e:	f7ff fd95 	bl	80019bc <setSegments>
            	break;
 8001e92:	e003      	b.n	8001e9c <Segment_Display+0x36c>
            default:
            	setSegments(0x00);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff fd91 	bl	80019bc <setSegments>
                break;
 8001e9a:	bf00      	nop
        }
        HAL_Delay(5);
 8001e9c:	2005      	movs	r0, #5
 8001e9e:	f000 f87f 	bl	8001fa0 <HAL_Delay>
    for(uint8_t i = 0; i < 4; i++) {
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	f67f ae50 	bls.w	8001b50 <Segment_Display+0x20>
 8001eb0:	e000      	b.n	8001eb4 <Segment_Display+0x384>
        		return;
 8001eb2:	bf00      	nop
    }
}
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_Init+0x40>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_Init+0x40>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_Init+0x40>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f94f 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	200f      	movs	r0, #15
 8001eec:	f000 f808 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fb48 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_InitTick+0x54>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_InitTick+0x58>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f967 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f000 f92f 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	@ (8001f5c <HAL_InitTick+0x5c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000024 	.word	0x20000024
 8001f58:	2000002c 	.word	0x2000002c
 8001f5c:	20000028 	.word	0x20000028

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2000002c 	.word	0x2000002c
 8001f84:	2000028c 	.word	0x2000028c

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	2000028c 	.word	0x2000028c

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000002c 	.word	0x2000002c

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	@ (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	@ (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff feb6 	bl	8001f88 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e099      	b.n	800235c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002248:	e00f      	b.n	800226a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800224a:	f7ff fe9d 	bl	8001f88 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b05      	cmp	r3, #5
 8002256:	d908      	bls.n	800226a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2203      	movs	r2, #3
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e078      	b.n	800235c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e8      	bne.n	800224a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4b38      	ldr	r3, [pc, #224]	@ (8002364 <HAL_DMA_Init+0x158>)
 8002284:	4013      	ands	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d107      	bne.n	80022d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	4313      	orrs	r3, r2
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f023 0307 	bic.w	r3, r3, #7
 80022ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d117      	bne.n	800232e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00e      	beq.n	800232e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fa91 	bl	8002838 <DMA_CheckFifoParam>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2240      	movs	r2, #64	@ 0x40
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800232a:	2301      	movs	r3, #1
 800232c:	e016      	b.n	800235c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fa48 	bl	80027cc <DMA_CalcBaseAndBitshift>
 800233c:	4603      	mov	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	223f      	movs	r2, #63	@ 0x3f
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	f010803f 	.word	0xf010803f

08002368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_DMA_Start_IT+0x26>
 800238a:	2302      	movs	r3, #2
 800238c:	e040      	b.n	8002410 <HAL_DMA_Start_IT+0xa8>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d12f      	bne.n	8002402 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2202      	movs	r2, #2
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f9da 	bl	8002770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	223f      	movs	r2, #63	@ 0x3f
 80023c2:	409a      	lsls	r2, r3
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0216 	orr.w	r2, r2, #22
 80023d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0208 	orr.w	r2, r2, #8
 80023ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e005      	b.n	800240e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800240a:	2302      	movs	r3, #2
 800240c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800240e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d004      	beq.n	8002436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00c      	b.n	8002450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2205      	movs	r2, #5
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002468:	4b8e      	ldr	r3, [pc, #568]	@ (80026a4 <HAL_DMA_IRQHandler+0x248>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a8e      	ldr	r2, [pc, #568]	@ (80026a8 <HAL_DMA_IRQHandler+0x24c>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	2208      	movs	r2, #8
 8002488:	409a      	lsls	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01a      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0204 	bic.w	r2, r2, #4
 80024ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b4:	2208      	movs	r2, #8
 80024b6:	409a      	lsls	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	2201      	movs	r2, #1
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d012      	beq.n	80024fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	2201      	movs	r2, #1
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	f043 0202 	orr.w	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002502:	2204      	movs	r2, #4
 8002504:	409a      	lsls	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	2204      	movs	r2, #4
 8002522:	409a      	lsls	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	2210      	movs	r2, #16
 800253a:	409a      	lsls	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d043      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d03c      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002556:	2210      	movs	r2, #16
 8002558:	409a      	lsls	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d018      	beq.n	800259e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d108      	bne.n	800258c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d024      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
 800258a:	e01f      	b.n	80025cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01b      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e016      	b.n	80025cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0208 	bic.w	r2, r2, #8
 80025ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	2220      	movs	r2, #32
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 808f 	beq.w	80026fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8087 	beq.w	80026fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	2220      	movs	r2, #32
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b05      	cmp	r3, #5
 8002604:	d136      	bne.n	8002674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0216 	bic.w	r2, r2, #22
 8002614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_DMA_IRQHandler+0x1da>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	223f      	movs	r2, #63	@ 0x3f
 800264c:	409a      	lsls	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002666:	2b00      	cmp	r3, #0
 8002668:	d07e      	beq.n	8002768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	4798      	blx	r3
        }
        return;
 8002672:	e079      	b.n	8002768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01d      	beq.n	80026be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	2b00      	cmp	r3, #0
 8002696:	d031      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e02c      	b.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
 80026a2:	bf00      	nop
 80026a4:	20000024 	.word	0x20000024
 80026a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e01e      	b.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10f      	bne.n	80026ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0210 	bic.w	r2, r2, #16
 80026da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d032      	beq.n	800276a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d022      	beq.n	8002756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2205      	movs	r2, #5
 8002714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3301      	adds	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	d307      	bcc.n	8002744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f2      	bne.n	8002728 <HAL_DMA_IRQHandler+0x2cc>
 8002742:	e000      	b.n	8002746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002744:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
 8002766:	e000      	b.n	800276a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002768:	bf00      	nop
    }
  }
}
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800278c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b40      	cmp	r3, #64	@ 0x40
 800279c:	d108      	bne.n	80027b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ae:	e007      	b.n	80027c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3b10      	subs	r3, #16
 80027dc:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <DMA_CalcBaseAndBitshift+0x64>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027e6:	4a13      	ldr	r2, [pc, #76]	@ (8002834 <DMA_CalcBaseAndBitshift+0x68>)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d909      	bls.n	800280e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	1d1a      	adds	r2, r3, #4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	659a      	str	r2, [r3, #88]	@ 0x58
 800280c:	e007      	b.n	800281e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	aaaaaaab 	.word	0xaaaaaaab
 8002834:	08005660 	.word	0x08005660

08002838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11f      	bne.n	8002892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d856      	bhi.n	8002906 <DMA_CheckFifoParam+0xce>
 8002858:	a201      	add	r2, pc, #4	@ (adr r2, 8002860 <DMA_CheckFifoParam+0x28>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002871 	.word	0x08002871
 8002864:	08002883 	.word	0x08002883
 8002868:	08002871 	.word	0x08002871
 800286c:	08002907 	.word	0x08002907
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d046      	beq.n	800290a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002880:	e043      	b.n	800290a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800288a:	d140      	bne.n	800290e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e03d      	b.n	800290e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800289a:	d121      	bne.n	80028e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d837      	bhi.n	8002912 <DMA_CheckFifoParam+0xda>
 80028a2:	a201      	add	r2, pc, #4	@ (adr r2, 80028a8 <DMA_CheckFifoParam+0x70>)
 80028a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028bf 	.word	0x080028bf
 80028b0:	080028b9 	.word	0x080028b9
 80028b4:	080028d1 	.word	0x080028d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e030      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d025      	beq.n	8002916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ce:	e022      	b.n	8002916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028d8:	d11f      	bne.n	800291a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028de:	e01c      	b.n	800291a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d903      	bls.n	80028ee <DMA_CheckFifoParam+0xb6>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d003      	beq.n	80028f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028ec:	e018      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      break;
 80028f2:	e015      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00e      	beq.n	800291e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e00b      	b.n	800291e <DMA_CheckFifoParam+0xe6>
      break;
 8002906:	bf00      	nop
 8002908:	e00a      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800290a:	bf00      	nop
 800290c:	e008      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
 8002910:	e006      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 8002912:	bf00      	nop
 8002914:	e004      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 8002916:	bf00      	nop
 8002918:	e002      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;   
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
    }
  } 
  
  return status; 
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e159      	b.n	8002c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8148 	bne.w	8002bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d005      	beq.n	8002982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	2b02      	cmp	r3, #2
 8002980:	d130      	bne.n	80029e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 0201 	and.w	r2, r3, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d017      	beq.n	8002a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d123      	bne.n	8002a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a2 	beq.w	8002bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b57      	ldr	r3, [pc, #348]	@ (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	4a56      	ldr	r2, [pc, #344]	@ (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac6:	4b54      	ldr	r3, [pc, #336]	@ (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	4a52      	ldr	r2, [pc, #328]	@ (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a49      	ldr	r2, [pc, #292]	@ (8002c20 <HAL_GPIO_Init+0x2f0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x202>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a48      	ldr	r2, [pc, #288]	@ (8002c24 <HAL_GPIO_Init+0x2f4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x1fe>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a47      	ldr	r2, [pc, #284]	@ (8002c28 <HAL_GPIO_Init+0x2f8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a46      	ldr	r2, [pc, #280]	@ (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x1f6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a45      	ldr	r2, [pc, #276]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x1f2>
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b22:	2307      	movs	r3, #7
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b44:	4935      	ldr	r1, [pc, #212]	@ (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b52:	4b38      	ldr	r3, [pc, #224]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b76:	4a2f      	ldr	r2, [pc, #188]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba0:	4a24      	ldr	r2, [pc, #144]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba6:	4b23      	ldr	r3, [pc, #140]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bca:	4a1a      	ldr	r2, [pc, #104]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8002c34 <HAL_GPIO_Init+0x304>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f aea2 	bls.w	800294c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e001      	b.n	8002c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c84:	e003      	b.n	8002c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e267      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d075      	beq.n	8002da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cba:	4b88      	ldr	r3, [pc, #544]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc6:	4b85      	ldr	r3, [pc, #532]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d112      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b82      	ldr	r3, [pc, #520]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d05b      	beq.n	8002da4 <HAL_RCC_OscConfig+0x108>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d157      	bne.n	8002da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e242      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0x74>
 8002d02:	4b76      	ldr	r3, [pc, #472]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x98>
 8002d1a:	4b70      	ldr	r3, [pc, #448]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b6d      	ldr	r3, [pc, #436]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d34:	4b69      	ldr	r3, [pc, #420]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a68      	ldr	r2, [pc, #416]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b66      	ldr	r3, [pc, #408]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7ff f918 	bl	8001f88 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7ff f914 	bl	8001f88 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	@ 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e207      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xc0>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff f904 	bl	8001f88 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7ff f900 	bl	8001f88 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	@ 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1f3      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b51      	ldr	r3, [pc, #324]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0xe8>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db2:	4b4a      	ldr	r3, [pc, #296]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b44      	ldr	r3, [pc, #272]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1c7      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4937      	ldr	r1, [pc, #220]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e03a      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7ff f8b9 	bl	8001f88 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7ff f8b5 	bl	8001f88 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1a8      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b28      	ldr	r3, [pc, #160]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4925      	ldr	r1, [pc, #148]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7ff f898 	bl	8001f88 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7ff f894 	bl	8001f88 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e187      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d036      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7ff f878 	bl	8001f88 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7ff f874 	bl	8001f88 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e167      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x200>
 8002eba:	e01b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7ff f861 	bl	8001f88 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eca:	f7ff f85d 	bl	8001f88 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d907      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e150      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	42470000 	.word	0x42470000
 8002ee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b88      	ldr	r3, [pc, #544]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ea      	bne.n	8002eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8097 	beq.w	8003030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b81      	ldr	r3, [pc, #516]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b7d      	ldr	r3, [pc, #500]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b7a      	ldr	r3, [pc, #488]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b77      	ldr	r3, [pc, #476]	@ (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b74      	ldr	r3, [pc, #464]	@ (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a73      	ldr	r2, [pc, #460]	@ (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7ff f81d 	bl	8001f88 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7ff f819 	bl	8001f88 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e10c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b6a      	ldr	r3, [pc, #424]	@ (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2ea>
 8002f78:	4b64      	ldr	r3, [pc, #400]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	4a63      	ldr	r2, [pc, #396]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x30c>
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	4a5e      	ldr	r2, [pc, #376]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002fa8:	4b58      	ldr	r3, [pc, #352]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	4a57      	ldr	r2, [pc, #348]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb4:	4b55      	ldr	r3, [pc, #340]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4a54      	ldr	r2, [pc, #336]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0304 	bic.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe ffde 	bl	8001f88 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe ffda 	bl	8001f88 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0cb      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	4b49      	ldr	r3, [pc, #292]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ee      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x334>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe ffc8 	bl	8001f88 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe ffc4 	bl	8001f88 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0b5      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	4b3e      	ldr	r3, [pc, #248]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ee      	bne.n	8002ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003024:	4b39      	ldr	r3, [pc, #228]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	4a38      	ldr	r2, [pc, #224]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 800302a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800302e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a1 	beq.w	800317c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303a:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b08      	cmp	r3, #8
 8003044:	d05c      	beq.n	8003100 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d141      	bne.n	80030d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe ff98 	bl	8001f88 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe ff94 	bl	8001f88 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e087      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b27      	ldr	r3, [pc, #156]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	491b      	ldr	r1, [pc, #108]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003114 <HAL_RCC_OscConfig+0x478>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe ff6d 	bl	8001f88 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe ff69 	bl	8001f88 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e05c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x416>
 80030d0:	e054      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <HAL_RCC_OscConfig+0x478>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe ff56 	bl	8001f88 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe ff52 	bl	8001f88 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e045      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x444>
 80030fe:	e03d      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e038      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 800310c:	40023800 	.word	0x40023800
 8003110:	40007000 	.word	0x40007000
 8003114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003118:	4b1b      	ldr	r3, [pc, #108]	@ (8003188 <HAL_RCC_OscConfig+0x4ec>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d028      	beq.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d121      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11a      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800314e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	3b01      	subs	r3, #1
 8003162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0cc      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b68      	ldr	r3, [pc, #416]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d90c      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b65      	ldr	r3, [pc, #404]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a58      	ldr	r2, [pc, #352]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a52      	ldr	r2, [pc, #328]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d044      	beq.n	80032ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d119      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	2b03      	cmp	r3, #3
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b3f      	ldr	r3, [pc, #252]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e06f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3b      	ldr	r3, [pc, #236]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e067      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b37      	ldr	r3, [pc, #220]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4934      	ldr	r1, [pc, #208]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7fe fe84 	bl	8001f88 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7fe fe80 	bl	8001f88 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e04f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2b      	ldr	r3, [pc, #172]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d20c      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fe:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490a      	ldr	r1, [pc, #40]	@ (800334c <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	@ (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fde4 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023c00 	.word	0x40023c00
 8003348:	40023800 	.word	0x40023800
 800334c:	08005650 	.word	0x08005650
 8003350:	20000024 	.word	0x20000024
 8003354:	20000028 	.word	0x20000028

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b090      	sub	sp, #64	@ 0x40
 800335e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	637b      	str	r3, [r7, #52]	@ 0x34
 8003364:	2300      	movs	r3, #0
 8003366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003368:	2300      	movs	r3, #0
 800336a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003370:	4b59      	ldr	r3, [pc, #356]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b08      	cmp	r3, #8
 800337a:	d00d      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x40>
 800337c:	2b08      	cmp	r3, #8
 800337e:	f200 80a1 	bhi.w	80034c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x34>
 8003386:	2b04      	cmp	r3, #4
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x3a>
 800338a:	e09b      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b53      	ldr	r3, [pc, #332]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x184>)
 800338e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003390:	e09b      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003392:	4b53      	ldr	r3, [pc, #332]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003394:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003396:	e098      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003398:	4b4f      	ldr	r3, [pc, #316]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a2:	4b4d      	ldr	r3, [pc, #308]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d028      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b4a      	ldr	r3, [pc, #296]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	2200      	movs	r2, #0
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033c0:	2100      	movs	r1, #0
 80033c2:	4b47      	ldr	r3, [pc, #284]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c4:	fb03 f201 	mul.w	r2, r3, r1
 80033c8:	2300      	movs	r3, #0
 80033ca:	fb00 f303 	mul.w	r3, r0, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	4a43      	ldr	r2, [pc, #268]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033d2:	fba0 1202 	umull	r1, r2, r0, r2
 80033d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033d8:	460a      	mov	r2, r1
 80033da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033de:	4413      	add	r3, r2
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e4:	2200      	movs	r2, #0
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	61fa      	str	r2, [r7, #28]
 80033ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033f2:	f7fc fef1 	bl	80001d8 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4613      	mov	r3, r2
 80033fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033fe:	e053      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003400:	4b35      	ldr	r3, [pc, #212]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	2200      	movs	r2, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	617a      	str	r2, [r7, #20]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003412:	f04f 0b00 	mov.w	fp, #0
 8003416:	4652      	mov	r2, sl
 8003418:	465b      	mov	r3, fp
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	0159      	lsls	r1, r3, #5
 8003424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003428:	0150      	lsls	r0, r2, #5
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	ebb2 080a 	subs.w	r8, r2, sl
 8003432:	eb63 090b 	sbc.w	r9, r3, fp
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800344a:	ebb2 0408 	subs.w	r4, r2, r8
 800344e:	eb63 0509 	sbc.w	r5, r3, r9
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	00eb      	lsls	r3, r5, #3
 800345c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003460:	00e2      	lsls	r2, r4, #3
 8003462:	4614      	mov	r4, r2
 8003464:	461d      	mov	r5, r3
 8003466:	eb14 030a 	adds.w	r3, r4, sl
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	eb45 030b 	adc.w	r3, r5, fp
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800347e:	4629      	mov	r1, r5
 8003480:	028b      	lsls	r3, r1, #10
 8003482:	4621      	mov	r1, r4
 8003484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003488:	4621      	mov	r1, r4
 800348a:	028a      	lsls	r2, r1, #10
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003492:	2200      	movs	r2, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	60fa      	str	r2, [r7, #12]
 8003498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800349c:	f7fc fe9c 	bl	80001d8 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4613      	mov	r3, r2
 80034a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	3301      	adds	r3, #1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80034b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034c2:	e002      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x184>)
 80034c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3740      	adds	r7, #64	@ 0x40
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	016e3600 	.word	0x016e3600

080034e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003508:	2b00      	cmp	r3, #0
 800350a:	d038      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800350c:	4b68      	ldr	r3, [pc, #416]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003512:	f7fe fd39 	bl	8001f88 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800351a:	f7fe fd35 	bl	8001f88 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e0bd      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800352c:	4b61      	ldr	r3, [pc, #388]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	019b      	lsls	r3, r3, #6
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	495a      	ldr	r1, [pc, #360]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003552:	4b57      	ldr	r3, [pc, #348]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003558:	f7fe fd16 	bl	8001f88 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003560:	f7fe fd12 	bl	8001f88 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e09a      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003572:	4b50      	ldr	r3, [pc, #320]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8083 	beq.w	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	4b48      	ldr	r3, [pc, #288]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	4a47      	ldr	r2, [pc, #284]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359a:	6413      	str	r3, [r2, #64]	@ 0x40
 800359c:	4b45      	ldr	r3, [pc, #276]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035a8:	4b43      	ldr	r3, [pc, #268]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a42      	ldr	r2, [pc, #264]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fe fce8 	bl	8001f88 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035bc:	f7fe fce4 	bl	8001f88 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e06c      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035ce:	4b3a      	ldr	r3, [pc, #232]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035da:	4b36      	ldr	r3, [pc, #216]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035e2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d02f      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d028      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f8:	4b2e      	ldr	r3, [pc, #184]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003600:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003602:	4b2e      	ldr	r3, [pc, #184]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003608:	4b2c      	ldr	r3, [pc, #176]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800360e:	4a29      	ldr	r2, [pc, #164]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003614:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d114      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fcb2 	bl	8001f88 <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	e00a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fe fcae 	bl	8001f88 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e034      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	4b1d      	ldr	r3, [pc, #116]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ee      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003656:	d10d      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003658:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366c:	4911      	ldr	r1, [pc, #68]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
 8003672:	e005      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003674:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a0e      	ldr	r2, [pc, #56]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800367e:	6093      	str	r3, [r2, #8]
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368c:	4909      	ldr	r1, [pc, #36]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	4313      	orrs	r3, r2
 8003690:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7d1a      	ldrb	r2, [r3, #20]
 80036a2:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80036a4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	42470068 	.word	0x42470068
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40007000 	.word	0x40007000
 80036bc:	42470e40 	.word	0x42470e40
 80036c0:	424711e0 	.word	0x424711e0

080036c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e066      	b.n	80037a8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	7f5b      	ldrb	r3, [r3, #29]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd ff94 	bl	8001618 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	22ca      	movs	r2, #202	@ 0xca
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2253      	movs	r2, #83	@ 0x53
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa45 	bl	8003b96 <RTC_EnterInitMode>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d12c      	bne.n	8003770 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003728:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68d2      	ldr	r2, [r2, #12]
 8003750:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6919      	ldr	r1, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	041a      	lsls	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa4c 	bl	8003c04 <RTC_ExitInitMode>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d113      	bne.n	800379e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003784:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699a      	ldr	r2, [r3, #24]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	22ff      	movs	r2, #255	@ 0xff
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	7f1b      	ldrb	r3, [r3, #28]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_RTC_SetTime+0x1c>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e087      	b.n	80038dc <HAL_RTC_SetTime+0x12c>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2202      	movs	r2, #2
 80037d6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d126      	bne.n	800382c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fa29 	bl	8003c4e <RTC_ByteToBcd2>
 80037fc:	4603      	mov	r3, r0
 80037fe:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa22 	bl	8003c4e <RTC_ByteToBcd2>
 800380a:	4603      	mov	r3, r0
 800380c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800380e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	789b      	ldrb	r3, [r3, #2]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fa1a 	bl	8003c4e <RTC_ByteToBcd2>
 800381a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800381c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	78db      	ldrb	r3, [r3, #3]
 8003824:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e018      	b.n	800385e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2200      	movs	r2, #0
 800383e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800384c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003852:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	78db      	ldrb	r3, [r3, #3]
 8003858:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	22ca      	movs	r2, #202	@ 0xca
 8003864:	625a      	str	r2, [r3, #36]	@ 0x24
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2253      	movs	r2, #83	@ 0x53
 800386c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f991 	bl	8003b96 <RTC_EnterInitMode>
 8003874:	4603      	mov	r3, r0
 8003876:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d120      	bne.n	80038c0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003888:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800388c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800389c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f9a4 	bl	8003c04 <RTC_ExitInitMode>
 80038bc:	4603      	mov	r3, r0
 80038be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	22ff      	movs	r2, #255	@ 0xff
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	771a      	strb	r2, [r3, #28]

  return status;
 80038da:	7cfb      	ldrb	r3, [r7, #19]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}

080038e4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003916:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800391a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	0d9b      	lsrs	r3, r3, #22
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11a      	bne.n	8003996 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f98f 	bl	8003c88 <RTC_Bcd2ToByte>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f986 	bl	8003c88 <RTC_Bcd2ToByte>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	789b      	ldrb	r3, [r3, #2]
 8003988:	4618      	mov	r0, r3
 800398a:	f000 f97d 	bl	8003c88 <RTC_Bcd2ToByte>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	7f1b      	ldrb	r3, [r3, #28]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_RTC_SetDate+0x1c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e071      	b.n	8003aa0 <HAL_RTC_SetDate+0x100>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2202      	movs	r2, #2
 80039c6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10e      	bne.n	80039ec <HAL_RTC_SetDate+0x4c>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	785b      	ldrb	r3, [r3, #1]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	f023 0310 	bic.w	r3, r3, #16
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	330a      	adds	r3, #10
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11c      	bne.n	8003a2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	78db      	ldrb	r3, [r3, #3]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f929 	bl	8003c4e <RTC_ByteToBcd2>
 80039fc:	4603      	mov	r3, r0
 80039fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f922 	bl	8003c4e <RTC_ByteToBcd2>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a0e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	789b      	ldrb	r3, [r3, #2]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f91a 	bl	8003c4e <RTC_ByteToBcd2>
 8003a1a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a1c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e00e      	b.n	8003a4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	78db      	ldrb	r3, [r3, #3]
 8003a30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a38:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	22ca      	movs	r2, #202	@ 0xca
 8003a50:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2253      	movs	r2, #83	@ 0x53
 8003a58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f89b 	bl	8003b96 <RTC_EnterInitMode>
 8003a60:	4603      	mov	r3, r0
 8003a62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a74:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f8c2 	bl	8003c04 <RTC_ExitInitMode>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	22ff      	movs	r2, #255	@ 0xff
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	771a      	strb	r2, [r3, #28]

  return status;
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd90      	pop	{r4, r7, pc}

08003aa8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ac2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	0b5b      	lsrs	r3, r3, #13
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11a      	bne.n	8003b3c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	78db      	ldrb	r3, [r3, #3]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f8bc 	bl	8003c88 <RTC_Bcd2ToByte>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f8b3 	bl	8003c88 <RTC_Bcd2ToByte>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	789b      	ldrb	r3, [r3, #2]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f8aa 	bl	8003c88 <RTC_Bcd2ToByte>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b60:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b62:	f7fe fa11 	bl	8001f88 <HAL_GetTick>
 8003b66:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b68:	e009      	b.n	8003b7e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b6a:	f7fe fa0d 	bl	8001f88 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b78:	d901      	bls.n	8003b7e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e007      	b.n	8003b8e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ee      	beq.n	8003b6a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d122      	bne.n	8003bfa <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bc2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe f9e0 	bl	8001f88 <HAL_GetTick>
 8003bc8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bca:	e00c      	b.n	8003be6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bcc:	f7fe f9dc 	bl	8001f88 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bda:	d904      	bls.n	8003be6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2204      	movs	r2, #4
 8003be0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <RTC_EnterInitMode+0x64>
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d1e8      	bne.n	8003bcc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c1e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ff89 	bl	8003b46 <HAL_RTC_WaitForSynchro>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003c5c:	e005      	b.n	8003c6a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	3301      	adds	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	3b0a      	subs	r3, #10
 8003c68:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	d8f6      	bhi.n	8003c5e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b2db      	uxtb	r3, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	0092      	lsls	r2, r2, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	b2db      	uxtb	r3, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e041      	b.n	8003d56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fcc2 	bl	8001670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f000 feb0 	bl	8004a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e022      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d109      	bne.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x46>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	bf0c      	ite	eq
 8003d9e:	2301      	moveq	r3, #1
 8003da0:	2300      	movne	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e015      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d109      	bne.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x60>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e008      	b.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e15d      	b.n	8004096 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e022      	b.n	8003e3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d109      	bne.n	8003e0e <HAL_TIM_PWM_Start_DMA+0xae>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e015      	b.n	8003e3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e008      	b.n	8003e3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d024      	beq.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start_DMA+0xee>
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e123      	b.n	8004096 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e5c:	e016      	b.n	8003e8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e6c:	e00e      	b.n	8003e8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e7c:	e006      	b.n	8003e8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e86:	e001      	b.n	8003e8c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e104      	b.n	8004096 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	f200 80ae 	bhi.w	8003ff0 <HAL_TIM_PWM_Start_DMA+0x290>
 8003e94:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ed1 	.word	0x08003ed1
 8003ea0:	08003ff1 	.word	0x08003ff1
 8003ea4:	08003ff1 	.word	0x08003ff1
 8003ea8:	08003ff1 	.word	0x08003ff1
 8003eac:	08003f19 	.word	0x08003f19
 8003eb0:	08003ff1 	.word	0x08003ff1
 8003eb4:	08003ff1 	.word	0x08003ff1
 8003eb8:	08003ff1 	.word	0x08003ff1
 8003ebc:	08003f61 	.word	0x08003f61
 8003ec0:	08003ff1 	.word	0x08003ff1
 8003ec4:	08003ff1 	.word	0x08003ff1
 8003ec8:	08003ff1 	.word	0x08003ff1
 8003ecc:	08003fa9 	.word	0x08003fa9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	4a72      	ldr	r2, [pc, #456]	@ (80040a0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	4a71      	ldr	r2, [pc, #452]	@ (80040a4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	4a70      	ldr	r2, [pc, #448]	@ (80040a8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003ee6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3334      	adds	r3, #52	@ 0x34
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	887b      	ldrh	r3, [r7, #2]
 8003ef8:	f7fe fa36 	bl	8002368 <HAL_DMA_Start_IT>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0c7      	b.n	8004096 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f14:	60da      	str	r2, [r3, #12]
      break;
 8003f16:	e06e      	b.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	4a60      	ldr	r2, [pc, #384]	@ (80040a0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f24:	4a5f      	ldr	r2, [pc, #380]	@ (80040a4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	4a5e      	ldr	r2, [pc, #376]	@ (80040a8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003f2e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3338      	adds	r3, #56	@ 0x38
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	f7fe fa12 	bl	8002368 <HAL_DMA_Start_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0a3      	b.n	8004096 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f5c:	60da      	str	r2, [r3, #12]
      break;
 8003f5e:	e04a      	b.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	4a4e      	ldr	r2, [pc, #312]	@ (80040a0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003f66:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80040a4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	4a4c      	ldr	r2, [pc, #304]	@ (80040a8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003f76:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	333c      	adds	r3, #60	@ 0x3c
 8003f84:	461a      	mov	r2, r3
 8003f86:	887b      	ldrh	r3, [r7, #2]
 8003f88:	f7fe f9ee 	bl	8002368 <HAL_DMA_Start_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e07f      	b.n	8004096 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fa4:	60da      	str	r2, [r3, #12]
      break;
 8003fa6:	e026      	b.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	4a3c      	ldr	r2, [pc, #240]	@ (80040a0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003fae:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	4a3b      	ldr	r2, [pc, #236]	@ (80040a4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80040a8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003fbe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3340      	adds	r3, #64	@ 0x40
 8003fcc:	461a      	mov	r2, r3
 8003fce:	887b      	ldrh	r3, [r7, #2]
 8003fd0:	f7fe f9ca 	bl	8002368 <HAL_DMA_Start_IT>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e05b      	b.n	8004096 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fec:	60da      	str	r2, [r3, #12]
      break;
 8003fee:	e002      	b.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d14b      	bne.n	8004094 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 ff39 	bl	8004e7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a27      	ldr	r2, [pc, #156]	@ (80040ac <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d107      	bne.n	8004024 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a20      	ldr	r2, [pc, #128]	@ (80040ac <HAL_TIM_PWM_Start_DMA+0x34c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d018      	beq.n	8004060 <HAL_TIM_PWM_Start_DMA+0x300>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004036:	d013      	beq.n	8004060 <HAL_TIM_PWM_Start_DMA+0x300>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1c      	ldr	r2, [pc, #112]	@ (80040b0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <HAL_TIM_PWM_Start_DMA+0x300>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_TIM_PWM_Start_DMA+0x300>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_TIM_PWM_Start_DMA+0x300>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a18      	ldr	r2, [pc, #96]	@ (80040bc <HAL_TIM_PWM_Start_DMA+0x35c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d111      	bne.n	8004084 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b06      	cmp	r3, #6
 8004070:	d010      	beq.n	8004094 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004082:	e007      	b.n	8004094 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	08004953 	.word	0x08004953
 80040a4:	080049fb 	.word	0x080049fb
 80040a8:	080048c1 	.word	0x080048c1
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40014000 	.word	0x40014000

080040c0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d855      	bhi.n	8004180 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80040d4:	a201      	add	r2, pc, #4	@ (adr r2, 80040dc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004181 	.word	0x08004181
 80040e4:	08004181 	.word	0x08004181
 80040e8:	08004181 	.word	0x08004181
 80040ec:	0800412d 	.word	0x0800412d
 80040f0:	08004181 	.word	0x08004181
 80040f4:	08004181 	.word	0x08004181
 80040f8:	08004181 	.word	0x08004181
 80040fc:	08004149 	.word	0x08004149
 8004100:	08004181 	.word	0x08004181
 8004104:	08004181 	.word	0x08004181
 8004108:	08004181 	.word	0x08004181
 800410c:	08004165 	.word	0x08004165
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800411e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe f977 	bl	8002418 <HAL_DMA_Abort_IT>
      break;
 800412a:	e02c      	b.n	8004186 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe f969 	bl	8002418 <HAL_DMA_Abort_IT>
      break;
 8004146:	e01e      	b.n	8004186 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004156:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe f95b 	bl	8002418 <HAL_DMA_Abort_IT>
      break;
 8004162:	e010      	b.n	8004186 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004172:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe f94d 	bl	8002418 <HAL_DMA_Abort_IT>
      break;
 800417e:	e002      	b.n	8004186 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
      break;
 8004184:	bf00      	nop
  }

  if (status == HAL_OK)
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d157      	bne.n	800423c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2200      	movs	r2, #0
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fe71 	bl	8004e7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d117      	bne.n	80041d4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <HAL_TIM_PWM_Stop_DMA+0x144>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_PWM_Stop_DMA+0x144>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <HAL_TIM_PWM_Stop_DMA+0x154>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004212:	e013      	b.n	800423c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b04      	cmp	r3, #4
 8004218:	d104      	bne.n	8004224 <HAL_TIM_PWM_Stop_DMA+0x164>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004222:	e00b      	b.n	800423c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d104      	bne.n	8004234 <HAL_TIM_PWM_Stop_DMA+0x174>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004232:	e003      	b.n	800423c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000

0800424c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e097      	b.n	8004390 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fd fa6f 	bl	8001758 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004290:	f023 0307 	bic.w	r3, r3, #7
 8004294:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f000 fbdf 	bl	8004a64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	4313      	orrs	r3, r2
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80042ec:	f023 030c 	bic.w	r3, r3, #12
 80042f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	4313      	orrs	r3, r2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	011a      	lsls	r2, r3, #4
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	031b      	lsls	r3, r3, #12
 800431c:	4313      	orrs	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	4313      	orrs	r3, r2
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d110      	bne.n	80043ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043ce:	7b7b      	ldrb	r3, [r7, #13]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d001      	beq.n	80043d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e069      	b.n	80044ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e8:	e031      	b.n	800444e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d110      	bne.n	8004412 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f0:	7bbb      	ldrb	r3, [r7, #14]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d102      	bne.n	80043fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043f6:	7b3b      	ldrb	r3, [r7, #12]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e055      	b.n	80044ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004410:	e01d      	b.n	800444e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d108      	bne.n	800442a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004418:	7bbb      	ldrb	r3, [r7, #14]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d105      	bne.n	800442a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800441e:	7b7b      	ldrb	r3, [r7, #13]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d102      	bne.n	800442a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004424:	7b3b      	ldrb	r3, [r7, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e03e      	b.n	80044ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_TIM_Encoder_Start+0xc4>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b04      	cmp	r3, #4
 8004458:	d008      	beq.n	800446c <HAL_TIM_Encoder_Start+0xd4>
 800445a:	e00f      	b.n	800447c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fd09 	bl	8004e7c <TIM_CCxChannelCmd>
      break;
 800446a:	e016      	b.n	800449a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	2104      	movs	r1, #4
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fd01 	bl	8004e7c <TIM_CCxChannelCmd>
      break;
 800447a:	e00e      	b.n	800449a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2201      	movs	r2, #1
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fcf9 	bl	8004e7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	2104      	movs	r1, #4
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fcf2 	bl	8004e7c <TIM_CCxChannelCmd>
      break;
 8004498:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0202 	mvn.w	r2, #2
 80044e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9ba 	bl	8004870 <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f9ac 	bl	800485c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fe91 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b04      	cmp	r3, #4
 800451c:	d122      	bne.n	8004564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d11b      	bne.n	8004564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0204 	mvn.w	r2, #4
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f990 	bl	8004870 <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f982 	bl	800485c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fe67 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b08      	cmp	r3, #8
 8004570:	d122      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d11b      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0208 	mvn.w	r2, #8
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2204      	movs	r2, #4
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f966 	bl	8004870 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f958 	bl	800485c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fe3d 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d122      	bne.n	800460c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d11b      	bne.n	800460c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2208      	movs	r2, #8
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f93c 	bl	8004870 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f92e 	bl	800485c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fe13 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b01      	cmp	r3, #1
 8004618:	d10e      	bne.n	8004638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d107      	bne.n	8004638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0201 	mvn.w	r2, #1
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f908 	bl	8004848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004650:	2b80      	cmp	r3, #128	@ 0x80
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fcfc 	bl	800505c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466e:	2b40      	cmp	r3, #64	@ 0x40
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467c:	2b40      	cmp	r3, #64	@ 0x40
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f904 	bl	8004898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0220 	mvn.w	r2, #32
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fcc6 	bl	8005048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046de:	2302      	movs	r3, #2
 80046e0:	e0ae      	b.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	f200 809f 	bhi.w	8004830 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046f2:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	08004831 	.word	0x08004831
 8004700:	08004831 	.word	0x08004831
 8004704:	08004831 	.word	0x08004831
 8004708:	0800476d 	.word	0x0800476d
 800470c:	08004831 	.word	0x08004831
 8004710:	08004831 	.word	0x08004831
 8004714:	08004831 	.word	0x08004831
 8004718:	080047af 	.word	0x080047af
 800471c:	08004831 	.word	0x08004831
 8004720:	08004831 	.word	0x08004831
 8004724:	08004831 	.word	0x08004831
 8004728:	080047ef 	.word	0x080047ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fa16 	bl	8004b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6999      	ldr	r1, [r3, #24]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	619a      	str	r2, [r3, #24]
      break;
 800476a:	e064      	b.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fa5c 	bl	8004c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	021a      	lsls	r2, r3, #8
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]
      break;
 80047ac:	e043      	b.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 faa7 	bl	8004d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0208 	orr.w	r2, r2, #8
 80047c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0204 	bic.w	r2, r2, #4
 80047d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	61da      	str	r2, [r3, #28]
      break;
 80047ec:	e023      	b.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 faf1 	bl	8004ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	021a      	lsls	r2, r3, #8
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	61da      	str	r2, [r3, #28]
      break;
 800482e:	e002      	b.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      break;
 8004834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800483e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d107      	bne.n	80048e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e6:	e02a      	b.n	800493e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d107      	bne.n	8004902 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2202      	movs	r2, #2
 80048f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004900:	e01d      	b.n	800493e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	429a      	cmp	r2, r3
 800490a:	d107      	bne.n	800491c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2204      	movs	r2, #4
 8004910:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800491a:	e010      	b.n	800493e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d107      	bne.n	8004936 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2208      	movs	r2, #8
 800492a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004934:	e003      	b.n	800493e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff ffb4 	bl	80048ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	771a      	strb	r2, [r3, #28]
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d10b      	bne.n	8004982 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d136      	bne.n	80049e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004980:	e031      	b.n	80049e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d10b      	bne.n	80049a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2202      	movs	r2, #2
 8004990:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d125      	bne.n	80049e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a2:	e020      	b.n	80049e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d10b      	bne.n	80049c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2204      	movs	r2, #4
 80049b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d114      	bne.n	80049e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c4:	e00f      	b.n	80049e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d10a      	bne.n	80049e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2208      	movs	r2, #8
 80049d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fc20 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	771a      	strb	r2, [r3, #28]
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d103      	bne.n	8004a1a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	771a      	strb	r2, [r3, #28]
 8004a18:	e019      	b.n	8004a4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d103      	bne.n	8004a2c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2202      	movs	r2, #2
 8004a28:	771a      	strb	r2, [r3, #28]
 8004a2a:	e010      	b.n	8004a4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d103      	bne.n	8004a3e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2204      	movs	r2, #4
 8004a3a:	771a      	strb	r2, [r3, #28]
 8004a3c:	e007      	b.n	8004a4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d102      	bne.n	8004a4e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff ff18 	bl	8004884 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	771a      	strb	r2, [r3, #28]
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a34      	ldr	r2, [pc, #208]	@ (8004b48 <TIM_Base_SetConfig+0xe4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00f      	beq.n	8004a9c <TIM_Base_SetConfig+0x38>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a82:	d00b      	beq.n	8004a9c <TIM_Base_SetConfig+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a31      	ldr	r2, [pc, #196]	@ (8004b4c <TIM_Base_SetConfig+0xe8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_Base_SetConfig+0x38>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a30      	ldr	r2, [pc, #192]	@ (8004b50 <TIM_Base_SetConfig+0xec>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_Base_SetConfig+0x38>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a2f      	ldr	r2, [pc, #188]	@ (8004b54 <TIM_Base_SetConfig+0xf0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d108      	bne.n	8004aae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a25      	ldr	r2, [pc, #148]	@ (8004b48 <TIM_Base_SetConfig+0xe4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01b      	beq.n	8004aee <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004abc:	d017      	beq.n	8004aee <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a22      	ldr	r2, [pc, #136]	@ (8004b4c <TIM_Base_SetConfig+0xe8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a21      	ldr	r2, [pc, #132]	@ (8004b50 <TIM_Base_SetConfig+0xec>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00f      	beq.n	8004aee <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a20      	ldr	r2, [pc, #128]	@ (8004b54 <TIM_Base_SetConfig+0xf0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b58 <TIM_Base_SetConfig+0xf4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d007      	beq.n	8004aee <TIM_Base_SetConfig+0x8a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b5c <TIM_Base_SetConfig+0xf8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <TIM_Base_SetConfig+0x8a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b60 <TIM_Base_SetConfig+0xfc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d108      	bne.n	8004b00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a08      	ldr	r2, [pc, #32]	@ (8004b48 <TIM_Base_SetConfig+0xe4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d103      	bne.n	8004b34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	615a      	str	r2, [r3, #20]
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800

08004b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f023 0302 	bic.w	r3, r3, #2
 8004bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1c      	ldr	r2, [pc, #112]	@ (8004c2c <TIM_OC1_SetConfig+0xc8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d10c      	bne.n	8004bda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0308 	bic.w	r3, r3, #8
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a13      	ldr	r2, [pc, #76]	@ (8004c2c <TIM_OC1_SetConfig+0xc8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d111      	bne.n	8004c06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	621a      	str	r2, [r3, #32]
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40010000 	.word	0x40010000

08004c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0210 	bic.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0320 	bic.w	r3, r3, #32
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d04 <TIM_OC2_SetConfig+0xd4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10d      	bne.n	8004cac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a15      	ldr	r2, [pc, #84]	@ (8004d04 <TIM_OC2_SetConfig+0xd4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d113      	bne.n	8004cdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000

08004d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd8 <TIM_OC3_SetConfig+0xd0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d10d      	bne.n	8004d82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a14      	ldr	r2, [pc, #80]	@ (8004dd8 <TIM_OC3_SetConfig+0xd0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d113      	bne.n	8004db2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	621a      	str	r2, [r3, #32]
}
 8004dcc:	bf00      	nop
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40010000 	.word	0x40010000

08004ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	031b      	lsls	r3, r3, #12
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a10      	ldr	r2, [pc, #64]	@ (8004e78 <TIM_OC4_SetConfig+0x9c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d109      	bne.n	8004e50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	019b      	lsls	r3, r3, #6
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000

08004e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2201      	movs	r2, #1
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1a      	ldr	r2, [r3, #32]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e050      	b.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2c:	d013      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a18      	ldr	r2, [pc, #96]	@ (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a13      	ldr	r2, [pc, #76]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10c      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40014000 	.word	0x40014000

08004fa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e03d      	b.n	800503c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <Set_LED>:

uint8_t LED_Data[NUM_LEDS][3]; // color data green / red / blue
volatile int datasentflag;


void Set_LED(uint8_t LEDnum, uint8_t Red, uint8_t Green, uint8_t Blue) {
 8005070:	b490      	push	{r4, r7}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	4611      	mov	r1, r2
 800507c:	461a      	mov	r2, r3
 800507e:	4623      	mov	r3, r4
 8005080:	71fb      	strb	r3, [r7, #7]
 8005082:	4603      	mov	r3, r0
 8005084:	71bb      	strb	r3, [r7, #6]
 8005086:	460b      	mov	r3, r1
 8005088:	717b      	strb	r3, [r7, #5]
 800508a:	4613      	mov	r3, r2
 800508c:	713b      	strb	r3, [r7, #4]

    if(LEDnum < NUM_LEDS) {
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	2b8c      	cmp	r3, #140	@ 0x8c
 8005092:	d819      	bhi.n	80050c8 <Set_LED+0x58>
        LED_Data[LEDnum][0] = Green;
 8005094:	79fa      	ldrb	r2, [r7, #7]
 8005096:	490f      	ldr	r1, [pc, #60]	@ (80050d4 <Set_LED+0x64>)
 8005098:	4613      	mov	r3, r2
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4413      	add	r3, r2
 800509e:	440b      	add	r3, r1
 80050a0:	797a      	ldrb	r2, [r7, #5]
 80050a2:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 80050a4:	79fa      	ldrb	r2, [r7, #7]
 80050a6:	490b      	ldr	r1, [pc, #44]	@ (80050d4 <Set_LED+0x64>)
 80050a8:	4613      	mov	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	440b      	add	r3, r1
 80050b0:	3301      	adds	r3, #1
 80050b2:	79ba      	ldrb	r2, [r7, #6]
 80050b4:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 80050b6:	79fa      	ldrb	r2, [r7, #7]
 80050b8:	4906      	ldr	r1, [pc, #24]	@ (80050d4 <Set_LED+0x64>)
 80050ba:	4613      	mov	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	440b      	add	r3, r1
 80050c2:	3302      	adds	r3, #2
 80050c4:	793a      	ldrb	r2, [r7, #4]
 80050c6:	701a      	strb	r2, [r3, #0]
    }
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc90      	pop	{r4, r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000290 	.word	0x20000290

080050d8 <Set_LED_Hex>:

void Set_LED_Hex(uint8_t LEDnum, uint32_t color) {
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	6039      	str	r1, [r7, #0]
 80050e2:	71fb      	strb	r3, [r7, #7]

    if(LEDnum < NUM_LEDS) {
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	2b8c      	cmp	r3, #140	@ 0x8c
 80050e8:	d821      	bhi.n	800512e <Set_LED_Hex+0x56>
        uint8_t Red = (color >> 16) & 0xFF;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	0c1b      	lsrs	r3, r3, #16
 80050ee:	73fb      	strb	r3, [r7, #15]
        uint8_t Green = (color >> 8) & 0xFF;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	73bb      	strb	r3, [r7, #14]
        uint8_t Blue = color & 0xFF;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	737b      	strb	r3, [r7, #13]
        LED_Data[LEDnum][0] = Green;
 80050fa:	79fa      	ldrb	r2, [r7, #7]
 80050fc:	490f      	ldr	r1, [pc, #60]	@ (800513c <Set_LED_Hex+0x64>)
 80050fe:	4613      	mov	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4413      	add	r3, r2
 8005104:	440b      	add	r3, r1
 8005106:	7bba      	ldrb	r2, [r7, #14]
 8005108:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 800510a:	79fa      	ldrb	r2, [r7, #7]
 800510c:	490b      	ldr	r1, [pc, #44]	@ (800513c <Set_LED_Hex+0x64>)
 800510e:	4613      	mov	r3, r2
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	4413      	add	r3, r2
 8005114:	440b      	add	r3, r1
 8005116:	3301      	adds	r3, #1
 8005118:	7bfa      	ldrb	r2, [r7, #15]
 800511a:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 800511c:	79fa      	ldrb	r2, [r7, #7]
 800511e:	4907      	ldr	r1, [pc, #28]	@ (800513c <Set_LED_Hex+0x64>)
 8005120:	4613      	mov	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	440b      	add	r3, r1
 8005128:	3302      	adds	r3, #2
 800512a:	7b7a      	ldrb	r2, [r7, #13]
 800512c:	701a      	strb	r2, [r3, #0]
    }
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000290 	.word	0x20000290

08005140 <WS2812B_Send>:

extern TIM_HandleTypeDef htim1;

uint16_t pwmData[(24 * NUM_LEDS) + RESET_SLOTS]; // Each LED requires 24 bits.

void WS2812B_Send() { // Changed to pointer to match typical HAL use.
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0

    uint32_t indx = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
    uint32_t data;

//     Shifting colors into 24-bit buffer
    for (int i = 0; i < NUM_LEDS; i++) {
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	e03e      	b.n	80051ce <WS2812B_Send+0x8e>

        data = ((LED_Data[i][0] << 16) | (LED_Data[i][1] << 8) | (LED_Data[i][2]));
 8005150:	4932      	ldr	r1, [pc, #200]	@ (800521c <WS2812B_Send+0xdc>)
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4613      	mov	r3, r2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4413      	add	r3, r2
 800515a:	440b      	add	r3, r1
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	0419      	lsls	r1, r3, #16
 8005160:	482e      	ldr	r0, [pc, #184]	@ (800521c <WS2812B_Send+0xdc>)
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4413      	add	r3, r2
 800516a:	4403      	add	r3, r0
 800516c:	3301      	adds	r3, #1
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	4319      	orrs	r1, r3
 8005174:	4829      	ldr	r0, [pc, #164]	@ (800521c <WS2812B_Send+0xdc>)
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	4403      	add	r3, r0
 8005180:	3302      	adds	r3, #2
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	430b      	orrs	r3, r1
 8005186:	607b      	str	r3, [r7, #4]

        for (int j = 23; j >= 0; j--) {
 8005188:	2317      	movs	r3, #23
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	e019      	b.n	80051c2 <WS2812B_Send+0x82>
            if (data & (1 << j))
 800518e:	2201      	movs	r2, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <WS2812B_Send+0x6c>
                pwmData[indx] = ONE; // Use defined duty cycle for ONE
 80051a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005220 <WS2812B_Send+0xe0>)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2136      	movs	r1, #54	@ 0x36
 80051a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80051aa:	e004      	b.n	80051b6 <WS2812B_Send+0x76>
            else
                pwmData[indx] = ZERO; // Use defined duty cycle for ZERO
 80051ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <WS2812B_Send+0xe0>)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	211b      	movs	r1, #27
 80051b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            indx++;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	3301      	adds	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
        for (int j = 23; j >= 0; j--) {
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3b01      	subs	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dae2      	bge.n	800518e <WS2812B_Send+0x4e>
    for (int i = 0; i < NUM_LEDS; i++) {
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	3301      	adds	r3, #1
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b8c      	cmp	r3, #140	@ 0x8c
 80051d2:	ddbd      	ble.n	8005150 <WS2812B_Send+0x10>
        }
    }

    // Create the reset signal by putting low values (0) at the end of pwmData
    for (int j = 0; j < RESET_SLOTS; j++) {
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	e009      	b.n	80051ee <WS2812B_Send+0xae>
        pwmData[indx++] = 0;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	617a      	str	r2, [r7, #20]
 80051e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005220 <WS2812B_Send+0xe0>)
 80051e2:	2100      	movs	r1, #0
 80051e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int j = 0; j < RESET_SLOTS; j++) {
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b31      	cmp	r3, #49	@ 0x31
 80051f2:	ddf2      	ble.n	80051da <WS2812B_Send+0x9a>
    }

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData, indx);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4a09      	ldr	r2, [pc, #36]	@ (8005220 <WS2812B_Send+0xe0>)
 80051fa:	2100      	movs	r1, #0
 80051fc:	4809      	ldr	r0, [pc, #36]	@ (8005224 <WS2812B_Send+0xe4>)
 80051fe:	f7fe fdaf 	bl	8003d60 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 8005202:	bf00      	nop
 8005204:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <WS2812B_Send+0xe8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0fb      	beq.n	8005204 <WS2812B_Send+0xc4>
	datasentflag = 0;
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <WS2812B_Send+0xe8>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]

}
 8005212:	bf00      	nop
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000290 	.word	0x20000290
 8005220:	2000043c 	.word	0x2000043c
 8005224:	200000f0 	.word	0x200000f0
 8005228:	20000438 	.word	0x20000438

0800522c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8005234:	2100      	movs	r1, #0
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fe ff42 	bl	80040c0 <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    datasentflag = 1;
 800523c:	4b03      	ldr	r3, [pc, #12]	@ (800524c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000438 	.word	0x20000438

08005250 <memset>:
 8005250:	4402      	add	r2, r0
 8005252:	4603      	mov	r3, r0
 8005254:	4293      	cmp	r3, r2
 8005256:	d100      	bne.n	800525a <memset+0xa>
 8005258:	4770      	bx	lr
 800525a:	f803 1b01 	strb.w	r1, [r3], #1
 800525e:	e7f9      	b.n	8005254 <memset+0x4>

08005260 <strncpy>:
 8005260:	b510      	push	{r4, lr}
 8005262:	3901      	subs	r1, #1
 8005264:	4603      	mov	r3, r0
 8005266:	b132      	cbz	r2, 8005276 <strncpy+0x16>
 8005268:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800526c:	f803 4b01 	strb.w	r4, [r3], #1
 8005270:	3a01      	subs	r2, #1
 8005272:	2c00      	cmp	r4, #0
 8005274:	d1f7      	bne.n	8005266 <strncpy+0x6>
 8005276:	441a      	add	r2, r3
 8005278:	2100      	movs	r1, #0
 800527a:	4293      	cmp	r3, r2
 800527c:	d100      	bne.n	8005280 <strncpy+0x20>
 800527e:	bd10      	pop	{r4, pc}
 8005280:	f803 1b01 	strb.w	r1, [r3], #1
 8005284:	e7f9      	b.n	800527a <strncpy+0x1a>
	...

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4d0d      	ldr	r5, [pc, #52]	@ (80052c0 <__libc_init_array+0x38>)
 800528c:	4c0d      	ldr	r4, [pc, #52]	@ (80052c4 <__libc_init_array+0x3c>)
 800528e:	1b64      	subs	r4, r4, r5
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	2600      	movs	r6, #0
 8005294:	42a6      	cmp	r6, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	4d0b      	ldr	r5, [pc, #44]	@ (80052c8 <__libc_init_array+0x40>)
 800529a:	4c0c      	ldr	r4, [pc, #48]	@ (80052cc <__libc_init_array+0x44>)
 800529c:	f000 f818 	bl	80052d0 <_init>
 80052a0:	1b64      	subs	r4, r4, r5
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	2600      	movs	r6, #0
 80052a6:	42a6      	cmp	r6, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b0:	4798      	blx	r3
 80052b2:	3601      	adds	r6, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ba:	4798      	blx	r3
 80052bc:	3601      	adds	r6, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	08005670 	.word	0x08005670
 80052c4:	08005670 	.word	0x08005670
 80052c8:	08005670 	.word	0x08005670
 80052cc:	08005674 	.word	0x08005674

080052d0 <_init>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr

080052dc <_fini>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr
