
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007080  08007080  000090c4  2**0
                  CONTENTS
  4 .ARM          00000008  08007080  08007080  00008080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007088  08007088  000090c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007088  08007088  00008088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800708c  0800708c  0000808c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08007090  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d8  200000c4  08007154  000090c4  2**2
                  ALLOC
 10 ._user_heap_stack 00010404  2000259c  08007154  0000959c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e235  00000000  00000000  000090f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5e  00000000  00000000  00017329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000add  00000000  00000000  0001aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a197  00000000  00000000  0001b9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d3d  00000000  00000000  00035b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095664  00000000  00000000  00049899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000deefd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  000def40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e3338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c58 	.word	0x08006c58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	08006c58 	.word	0x08006c58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	2104      	movs	r1, #4
 800058e:	4830      	ldr	r0, [pc, #192]	@ (8000650 <setSegments+0xe0>)
 8000590:	f002 fdca 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	2b00      	cmp	r3, #0
 800059c:	bf0c      	ite	eq
 800059e:	2301      	moveq	r3, #1
 80005a0:	2300      	movne	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	2101      	movs	r1, #1
 80005a8:	4829      	ldr	r0, [pc, #164]	@ (8000650 <setSegments+0xe0>)
 80005aa:	f002 fdbd 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf0c      	ite	eq
 80005b8:	2301      	moveq	r3, #1
 80005ba:	2300      	movne	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	2108      	movs	r1, #8
 80005c2:	4823      	ldr	r0, [pc, #140]	@ (8000650 <setSegments+0xe0>)
 80005c4:	f002 fdb0 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	2104      	movs	r1, #4
 80005dc:	481d      	ldr	r0, [pc, #116]	@ (8000654 <setSegments+0xe4>)
 80005de:	f002 fda3 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 0310 	and.w	r3, r3, #16
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2101      	movs	r1, #1
 80005f6:	4817      	ldr	r0, [pc, #92]	@ (8000654 <setSegments+0xe4>)
 80005f8:	f002 fd96 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	2110      	movs	r1, #16
 8000610:	480f      	ldr	r0, [pc, #60]	@ (8000650 <setSegments+0xe0>)
 8000612:	f002 fd89 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	2102      	movs	r1, #2
 800062a:	4809      	ldr	r0, [pc, #36]	@ (8000650 <setSegments+0xe0>)
 800062c:	f002 fd7c 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	43db      	mvns	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	09db      	lsrs	r3, r3, #7
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	2140      	movs	r1, #64	@ 0x40
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <setSegments+0xe0>)
 8000642:	f002 fd71 	bl	8003128 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400

08000658 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b01      	cmp	r3, #1
 8000666:	bf0c      	ite	eq
 8000668:	2301      	moveq	r3, #1
 800066a:	2300      	movne	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000674:	4819      	ldr	r0, [pc, #100]	@ (80006dc <activateDigit+0x84>)
 8000676:	f002 fd57 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b02      	cmp	r3, #2
 800067e:	bf0c      	ite	eq
 8000680:	2301      	moveq	r3, #1
 8000682:	2300      	movne	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	4813      	ldr	r0, [pc, #76]	@ (80006dc <activateDigit+0x84>)
 800068e:	f002 fd4b 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b03      	cmp	r3, #3
 8000696:	bf0c      	ite	eq
 8000698:	2301      	moveq	r3, #1
 800069a:	2300      	movne	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	480f      	ldr	r0, [pc, #60]	@ (80006e0 <activateDigit+0x88>)
 80006a4:	f002 fd40 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	bf0c      	ite	eq
 80006ae:	2301      	moveq	r3, #1
 80006b0:	2300      	movne	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2120      	movs	r1, #32
 80006b8:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <activateDigit+0x88>)
 80006ba:	f002 fd35 	bl	8003128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	bf0c      	ite	eq
 80006c4:	2301      	moveq	r3, #1
 80006c6:	2300      	movne	r3, #0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	2102      	movs	r1, #2
 80006ce:	4803      	ldr	r0, [pc, #12]	@ (80006dc <activateDigit+0x84>)
 80006d0:	f002 fd2a 	bl	8003128 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40020000 	.word	0x40020000

080006e4 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2204      	movs	r2, #4
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f005 fa54 	bl	8005ba2 <strncpy>
    truncatedInput[4] = '\0';
 80006fa:	2300      	movs	r3, #0
 80006fc:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e1ab      	b.n	8000a5c <Segment_Display+0x378>
        activateDigit(i + 1);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	3301      	adds	r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ffa4 	bl	8000658 <activateDigit>

		char ch = truncatedInput[i];
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3310      	adds	r3, #16
 8000714:	443b      	add	r3, r7
 8000716:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800071a:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000720:	f200 8192 	bhi.w	8000a48 <Segment_Display+0x364>
 8000724:	a201      	add	r2, pc, #4	@ (adr r2, 800072c <Segment_Display+0x48>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	08000a67 	.word	0x08000a67
 8000730:	08000a49 	.word	0x08000a49
 8000734:	08000a49 	.word	0x08000a49
 8000738:	08000a49 	.word	0x08000a49
 800073c:	08000a49 	.word	0x08000a49
 8000740:	08000a49 	.word	0x08000a49
 8000744:	08000a49 	.word	0x08000a49
 8000748:	08000a49 	.word	0x08000a49
 800074c:	08000a49 	.word	0x08000a49
 8000750:	08000a49 	.word	0x08000a49
 8000754:	08000a49 	.word	0x08000a49
 8000758:	08000a49 	.word	0x08000a49
 800075c:	08000a49 	.word	0x08000a49
 8000760:	08000a49 	.word	0x08000a49
 8000764:	08000a49 	.word	0x08000a49
 8000768:	08000a49 	.word	0x08000a49
 800076c:	08000a49 	.word	0x08000a49
 8000770:	08000a49 	.word	0x08000a49
 8000774:	08000a49 	.word	0x08000a49
 8000778:	08000a49 	.word	0x08000a49
 800077c:	08000a49 	.word	0x08000a49
 8000780:	08000a49 	.word	0x08000a49
 8000784:	08000a49 	.word	0x08000a49
 8000788:	08000a49 	.word	0x08000a49
 800078c:	08000a49 	.word	0x08000a49
 8000790:	08000a49 	.word	0x08000a49
 8000794:	08000a49 	.word	0x08000a49
 8000798:	08000a49 	.word	0x08000a49
 800079c:	08000a49 	.word	0x08000a49
 80007a0:	08000a49 	.word	0x08000a49
 80007a4:	08000a49 	.word	0x08000a49
 80007a8:	08000a49 	.word	0x08000a49
 80007ac:	08000a39 	.word	0x08000a39
 80007b0:	08000a49 	.word	0x08000a49
 80007b4:	08000a49 	.word	0x08000a49
 80007b8:	08000a49 	.word	0x08000a49
 80007bc:	08000a49 	.word	0x08000a49
 80007c0:	08000a49 	.word	0x08000a49
 80007c4:	08000a49 	.word	0x08000a49
 80007c8:	08000a49 	.word	0x08000a49
 80007cc:	08000a49 	.word	0x08000a49
 80007d0:	08000a49 	.word	0x08000a49
 80007d4:	08000a49 	.word	0x08000a49
 80007d8:	08000a49 	.word	0x08000a49
 80007dc:	08000a49 	.word	0x08000a49
 80007e0:	08000a41 	.word	0x08000a41
 80007e4:	08000a49 	.word	0x08000a49
 80007e8:	08000a49 	.word	0x08000a49
 80007ec:	08000919 	.word	0x08000919
 80007f0:	08000921 	.word	0x08000921
 80007f4:	08000929 	.word	0x08000929
 80007f8:	08000931 	.word	0x08000931
 80007fc:	08000939 	.word	0x08000939
 8000800:	08000941 	.word	0x08000941
 8000804:	08000949 	.word	0x08000949
 8000808:	08000951 	.word	0x08000951
 800080c:	08000959 	.word	0x08000959
 8000810:	08000961 	.word	0x08000961
 8000814:	08000a49 	.word	0x08000a49
 8000818:	08000a49 	.word	0x08000a49
 800081c:	08000a49 	.word	0x08000a49
 8000820:	08000a49 	.word	0x08000a49
 8000824:	08000a49 	.word	0x08000a49
 8000828:	08000a49 	.word	0x08000a49
 800082c:	08000a49 	.word	0x08000a49
 8000830:	08000969 	.word	0x08000969
 8000834:	08000971 	.word	0x08000971
 8000838:	08000979 	.word	0x08000979
 800083c:	08000981 	.word	0x08000981
 8000840:	08000989 	.word	0x08000989
 8000844:	08000991 	.word	0x08000991
 8000848:	08000999 	.word	0x08000999
 800084c:	080009a1 	.word	0x080009a1
 8000850:	080009a9 	.word	0x080009a9
 8000854:	080009b1 	.word	0x080009b1
 8000858:	080009b9 	.word	0x080009b9
 800085c:	080009c1 	.word	0x080009c1
 8000860:	080009c9 	.word	0x080009c9
 8000864:	080009d1 	.word	0x080009d1
 8000868:	080009d9 	.word	0x080009d9
 800086c:	080009e1 	.word	0x080009e1
 8000870:	080009e9 	.word	0x080009e9
 8000874:	080009f1 	.word	0x080009f1
 8000878:	080009f9 	.word	0x080009f9
 800087c:	08000a01 	.word	0x08000a01
 8000880:	08000a09 	.word	0x08000a09
 8000884:	08000a11 	.word	0x08000a11
 8000888:	08000a19 	.word	0x08000a19
 800088c:	08000a21 	.word	0x08000a21
 8000890:	08000a29 	.word	0x08000a29
 8000894:	08000a31 	.word	0x08000a31
 8000898:	08000a49 	.word	0x08000a49
 800089c:	08000a49 	.word	0x08000a49
 80008a0:	08000a49 	.word	0x08000a49
 80008a4:	08000a49 	.word	0x08000a49
 80008a8:	08000a49 	.word	0x08000a49
 80008ac:	08000a49 	.word	0x08000a49
 80008b0:	08000969 	.word	0x08000969
 80008b4:	08000971 	.word	0x08000971
 80008b8:	08000979 	.word	0x08000979
 80008bc:	08000981 	.word	0x08000981
 80008c0:	08000989 	.word	0x08000989
 80008c4:	08000991 	.word	0x08000991
 80008c8:	08000999 	.word	0x08000999
 80008cc:	080009a1 	.word	0x080009a1
 80008d0:	080009a9 	.word	0x080009a9
 80008d4:	080009b1 	.word	0x080009b1
 80008d8:	080009b9 	.word	0x080009b9
 80008dc:	080009c1 	.word	0x080009c1
 80008e0:	080009c9 	.word	0x080009c9
 80008e4:	080009d1 	.word	0x080009d1
 80008e8:	080009d9 	.word	0x080009d9
 80008ec:	080009e1 	.word	0x080009e1
 80008f0:	080009e9 	.word	0x080009e9
 80008f4:	080009f1 	.word	0x080009f1
 80008f8:	080009f9 	.word	0x080009f9
 80008fc:	08000a01 	.word	0x08000a01
 8000900:	08000a09 	.word	0x08000a09
 8000904:	08000a11 	.word	0x08000a11
 8000908:	08000a19 	.word	0x08000a19
 800090c:	08000a21 	.word	0x08000a21
 8000910:	08000a29 	.word	0x08000a29
 8000914:	08000a31 	.word	0x08000a31
        	case '\0':
        		return;
            case '0':
                setSegments(0x3F);
 8000918:	203f      	movs	r0, #63	@ 0x3f
 800091a:	f7ff fe29 	bl	8000570 <setSegments>
                break;
 800091e:	e097      	b.n	8000a50 <Segment_Display+0x36c>
            case '1':
                setSegments(0x06);
 8000920:	2006      	movs	r0, #6
 8000922:	f7ff fe25 	bl	8000570 <setSegments>
                break;
 8000926:	e093      	b.n	8000a50 <Segment_Display+0x36c>
            case '2':
                setSegments(0x5B);
 8000928:	205b      	movs	r0, #91	@ 0x5b
 800092a:	f7ff fe21 	bl	8000570 <setSegments>
                break;
 800092e:	e08f      	b.n	8000a50 <Segment_Display+0x36c>
            case '3':
                setSegments(0x4F);
 8000930:	204f      	movs	r0, #79	@ 0x4f
 8000932:	f7ff fe1d 	bl	8000570 <setSegments>
                break;
 8000936:	e08b      	b.n	8000a50 <Segment_Display+0x36c>
            case '4':
                setSegments(0x66);
 8000938:	2066      	movs	r0, #102	@ 0x66
 800093a:	f7ff fe19 	bl	8000570 <setSegments>
                break;
 800093e:	e087      	b.n	8000a50 <Segment_Display+0x36c>
            case '5':
                setSegments(0x6D);
 8000940:	206d      	movs	r0, #109	@ 0x6d
 8000942:	f7ff fe15 	bl	8000570 <setSegments>
                break;
 8000946:	e083      	b.n	8000a50 <Segment_Display+0x36c>
            case '6':
                setSegments(0x7D);
 8000948:	207d      	movs	r0, #125	@ 0x7d
 800094a:	f7ff fe11 	bl	8000570 <setSegments>
                break;
 800094e:	e07f      	b.n	8000a50 <Segment_Display+0x36c>
            case '7':
                setSegments(0x07);
 8000950:	2007      	movs	r0, #7
 8000952:	f7ff fe0d 	bl	8000570 <setSegments>
                break;
 8000956:	e07b      	b.n	8000a50 <Segment_Display+0x36c>
            case '8':
                setSegments(0x7F);
 8000958:	207f      	movs	r0, #127	@ 0x7f
 800095a:	f7ff fe09 	bl	8000570 <setSegments>
                break;
 800095e:	e077      	b.n	8000a50 <Segment_Display+0x36c>
            case '9':
                setSegments(0x6F);
 8000960:	206f      	movs	r0, #111	@ 0x6f
 8000962:	f7ff fe05 	bl	8000570 <setSegments>
                break;
 8000966:	e073      	b.n	8000a50 <Segment_Display+0x36c>
            case 'a':
            case 'A':
                setSegments(0x77);
 8000968:	2077      	movs	r0, #119	@ 0x77
 800096a:	f7ff fe01 	bl	8000570 <setSegments>
                break;
 800096e:	e06f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'b':
            case 'B':
                setSegments(0x7C);
 8000970:	207c      	movs	r0, #124	@ 0x7c
 8000972:	f7ff fdfd 	bl	8000570 <setSegments>
                break;
 8000976:	e06b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'c':
            case 'C':
                setSegments(0x39);
 8000978:	2039      	movs	r0, #57	@ 0x39
 800097a:	f7ff fdf9 	bl	8000570 <setSegments>
                break;
 800097e:	e067      	b.n	8000a50 <Segment_Display+0x36c>
            case 'd':
            case 'D':
                setSegments(0x5E);
 8000980:	205e      	movs	r0, #94	@ 0x5e
 8000982:	f7ff fdf5 	bl	8000570 <setSegments>
                break;
 8000986:	e063      	b.n	8000a50 <Segment_Display+0x36c>
            case 'e':
            case 'E':
                setSegments(0x79);
 8000988:	2079      	movs	r0, #121	@ 0x79
 800098a:	f7ff fdf1 	bl	8000570 <setSegments>
                break;
 800098e:	e05f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'f':
            case 'F':
                setSegments(0x71);
 8000990:	2071      	movs	r0, #113	@ 0x71
 8000992:	f7ff fded 	bl	8000570 <setSegments>
                break;
 8000996:	e05b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'g':
            case 'G':
                setSegments(0x3D);
 8000998:	203d      	movs	r0, #61	@ 0x3d
 800099a:	f7ff fde9 	bl	8000570 <setSegments>
                break;
 800099e:	e057      	b.n	8000a50 <Segment_Display+0x36c>
            case 'h':
            case 'H':
                setSegments(0x76);
 80009a0:	2076      	movs	r0, #118	@ 0x76
 80009a2:	f7ff fde5 	bl	8000570 <setSegments>
                break;
 80009a6:	e053      	b.n	8000a50 <Segment_Display+0x36c>
            case 'i':
            case 'I':
                setSegments(0x30);
 80009a8:	2030      	movs	r0, #48	@ 0x30
 80009aa:	f7ff fde1 	bl	8000570 <setSegments>
                break;
 80009ae:	e04f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'j':
            case 'J':
                setSegments(0x1E);
 80009b0:	201e      	movs	r0, #30
 80009b2:	f7ff fddd 	bl	8000570 <setSegments>
                break;
 80009b6:	e04b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 80009b8:	2076      	movs	r0, #118	@ 0x76
 80009ba:	f7ff fdd9 	bl	8000570 <setSegments>
                break;
 80009be:	e047      	b.n	8000a50 <Segment_Display+0x36c>
            case 'l':
            case 'L':
                setSegments(0x38);
 80009c0:	2038      	movs	r0, #56	@ 0x38
 80009c2:	f7ff fdd5 	bl	8000570 <setSegments>
                break;
 80009c6:	e043      	b.n	8000a50 <Segment_Display+0x36c>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 80009c8:	2037      	movs	r0, #55	@ 0x37
 80009ca:	f7ff fdd1 	bl	8000570 <setSegments>
                break;
 80009ce:	e03f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'n':
            case 'N':
                setSegments(0x54);
 80009d0:	2054      	movs	r0, #84	@ 0x54
 80009d2:	f7ff fdcd 	bl	8000570 <setSegments>
                break;
 80009d6:	e03b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'o':
            case 'O':
                setSegments(0x3F);
 80009d8:	203f      	movs	r0, #63	@ 0x3f
 80009da:	f7ff fdc9 	bl	8000570 <setSegments>
                break;
 80009de:	e037      	b.n	8000a50 <Segment_Display+0x36c>
            case 'p':
            case 'P':
                setSegments(0x73);
 80009e0:	2073      	movs	r0, #115	@ 0x73
 80009e2:	f7ff fdc5 	bl	8000570 <setSegments>
                break;
 80009e6:	e033      	b.n	8000a50 <Segment_Display+0x36c>
            case 'q':
            case 'Q':
                setSegments(0x67);
 80009e8:	2067      	movs	r0, #103	@ 0x67
 80009ea:	f7ff fdc1 	bl	8000570 <setSegments>
                break;
 80009ee:	e02f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'r':
            case 'R':
                setSegments(0x50);
 80009f0:	2050      	movs	r0, #80	@ 0x50
 80009f2:	f7ff fdbd 	bl	8000570 <setSegments>
                break;
 80009f6:	e02b      	b.n	8000a50 <Segment_Display+0x36c>
            case 's':
            case 'S':
                setSegments(0x6D);
 80009f8:	206d      	movs	r0, #109	@ 0x6d
 80009fa:	f7ff fdb9 	bl	8000570 <setSegments>
                break;
 80009fe:	e027      	b.n	8000a50 <Segment_Display+0x36c>
            case 't':
            case 'T':
                setSegments(0x78);
 8000a00:	2078      	movs	r0, #120	@ 0x78
 8000a02:	f7ff fdb5 	bl	8000570 <setSegments>
                break;
 8000a06:	e023      	b.n	8000a50 <Segment_Display+0x36c>
            case 'u':
            case 'U':
                setSegments(0x3E);
 8000a08:	203e      	movs	r0, #62	@ 0x3e
 8000a0a:	f7ff fdb1 	bl	8000570 <setSegments>
                break;
 8000a0e:	e01f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8000a10:	203e      	movs	r0, #62	@ 0x3e
 8000a12:	f7ff fdad 	bl	8000570 <setSegments>
                break;
 8000a16:	e01b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 8000a18:	202a      	movs	r0, #42	@ 0x2a
 8000a1a:	f7ff fda9 	bl	8000570 <setSegments>
                break;
 8000a1e:	e017      	b.n	8000a50 <Segment_Display+0x36c>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8000a20:	2076      	movs	r0, #118	@ 0x76
 8000a22:	f7ff fda5 	bl	8000570 <setSegments>
                break;
 8000a26:	e013      	b.n	8000a50 <Segment_Display+0x36c>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 8000a28:	206e      	movs	r0, #110	@ 0x6e
 8000a2a:	f7ff fda1 	bl	8000570 <setSegments>
                break;
 8000a2e:	e00f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8000a30:	205b      	movs	r0, #91	@ 0x5b
 8000a32:	f7ff fd9d 	bl	8000570 <setSegments>
                break;
 8000a36:	e00b      	b.n	8000a50 <Segment_Display+0x36c>
            case ' ':
                // Blank character
                setSegments(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fd99 	bl	8000570 <setSegments>
                break;
 8000a3e:	e007      	b.n	8000a50 <Segment_Display+0x36c>
            case '-':
            	setSegments(0x04);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f7ff fd95 	bl	8000570 <setSegments>
            	break;
 8000a46:	e003      	b.n	8000a50 <Segment_Display+0x36c>
            default:
            	setSegments(0x00);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff fd91 	bl	8000570 <setSegments>
                break;
 8000a4e:	bf00      	nop
        }
        HAL_Delay(5);
 8000a50:	2005      	movs	r0, #5
 8000a52:	f001 fd05 	bl	8002460 <HAL_Delay>
    for(uint8_t i = 0; i < 4; i++) {
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	f67f ae50 	bls.w	8000704 <Segment_Display+0x20>
 8000a64:	e000      	b.n	8000a68 <Segment_Display+0x384>
        		return;
 8000a66:	bf00      	nop
    }
}
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop

08000a70 <turnOnLED>:
/**
 * @brief   Turns on an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn on.
 */
void turnOnLED(LED *frame, uint8_t index) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	frame[index].on = true;
 8000a7c:	78fa      	ldrb	r2, [r7, #3]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	2201      	movs	r2, #1
 8000a8a:	711a      	strb	r2, [r3, #4]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <turnOffLED>:
/**
 * @brief   Turns off an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn off.
 */
void turnOffLED(LED *frame, uint8_t index) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	frame[index].on = false;
 8000aa4:	78fa      	ldrb	r2, [r7, #3]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	711a      	strb	r2, [r3, #4]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <getLEDsWithEffect>:
 * @param   arr Pointer to an array for storing indices of lit LEDs.
 *            This array should be preallocated by the caller.
 *
 * @return  Number of lit LEDs found. This value represents the size of the updated array.
 */
uint8_t getLEDsWithEffect(uint8_t *result, LED *display, Effect effect) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	4613      	mov	r3, r2
 8000acc:	71fb      	strb	r3, [r7, #7]

    uint32_t index = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	e015      	b.n	8000b04 <getLEDsWithEffect+0x44>
    	if(display[i].effect == effect) {
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	78db      	ldrb	r3, [r3, #3]
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d108      	bne.n	8000afe <getLEDsWithEffect+0x3e>
    		result[index] = i;
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	701a      	strb	r2, [r3, #0]
            index++;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	3301      	adds	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b8e      	cmp	r3, #142	@ 0x8e
 8000b08:	dde6      	ble.n	8000ad8 <getLEDsWithEffect+0x18>
    	}
    }

    return index++;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	617a      	str	r2, [r7, #20]
 8000b10:	b2db      	uxtb	r3, r3
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <wipePWMBuffer>:
 * @brief Converts a bitmap to PWM data for WS2812B LEDs.
 *
 * Wipes PWM Buffer by filling it with user defined ZERO PWM values.
 *
 */
void wipePWMBuffer(void) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	e007      	b.n	8000b3c <wipePWMBuffer+0x1c>
        pwmBuffer[i] = ZERO;
 8000b2c:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <wipePWMBuffer+0x34>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	211b      	movs	r1, #27
 8000b32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f640 5299 	movw	r2, #3481	@ 0xd99
 8000b42:	4293      	cmp	r3, r2
 8000b44:	ddf2      	ble.n	8000b2c <wipePWMBuffer+0xc>
    }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	200000e4 	.word	0x200000e4

08000b58 <updatePwmBuffer>:
 * (green, red, blue) order.
 *
 * @note    The PWM buffer must be appropriately sized to accommodate the
 *          LED data. Each LED requires 24 bits in the PWM buffer.
 */
void updatePwmBuffer(LED *currentFrame) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

    wipePWMBuffer();
 8000b60:	f7ff ffde 	bl	8000b20 <wipePWMBuffer>

    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e067      	b.n	8000c3a <updatePwmBuffer+0xe2>

        if(!currentFrame[ledNumber].on) {
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d157      	bne.n	8000c32 <updatePwmBuffer+0xda>
            continue;
        }


        uint8_t red     = currentFrame[ledNumber].red;
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	73fb      	strb	r3, [r7, #15]
        uint8_t green   = currentFrame[ledNumber].green;
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	73bb      	strb	r3, [r7, #14]
        uint8_t blue    = currentFrame[ledNumber].blue;
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	789b      	ldrb	r3, [r3, #2]
 8000bb0:	737b      	strb	r3, [r7, #13]
        uint32_t arrayIndex = ledNumber * 24;
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	60bb      	str	r3, [r7, #8]

        // ws2812b is GRB, so we swap the positions of red and green
        for(int bit = 0; bit < 8; bit++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	e032      	b.n	8000c2a <updatePwmBuffer+0xd2>

            if(green & (1 << bit)) {
 8000bc4:	7bba      	ldrb	r2, [r7, #14]
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	fa42 f303 	asr.w	r3, r2, r3
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <updatePwmBuffer+0x8c>
                pwmBuffer[arrayIndex + 16 + (7 - bit)] = ONE;
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	3317      	adds	r3, #23
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <updatePwmBuffer+0xf4>)
 8000bde:	2136      	movs	r1, #54	@ 0x36
 8000be0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(red & (1 << bit)) {
 8000be4:	7bfa      	ldrb	r2, [r7, #15]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fa42 f303 	asr.w	r3, r2, r3
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <updatePwmBuffer+0xac>
                pwmBuffer[arrayIndex + 8 + (7 - bit)] = ONE;
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	330f      	adds	r3, #15
 8000bfc:	4a13      	ldr	r2, [pc, #76]	@ (8000c4c <updatePwmBuffer+0xf4>)
 8000bfe:	2136      	movs	r1, #54	@ 0x36
 8000c00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(blue & (1 << bit)) {
 8000c04:	7b7a      	ldrb	r2, [r7, #13]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa42 f303 	asr.w	r3, r2, r3
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <updatePwmBuffer+0xcc>
                pwmBuffer[arrayIndex + (7 - bit)] = ONE;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	3307      	adds	r3, #7
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <updatePwmBuffer+0xf4>)
 8000c1e:	2136      	movs	r1, #54	@ 0x36
 8000c20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(int bit = 0; bit < 8; bit++) {
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	3301      	adds	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	2b07      	cmp	r3, #7
 8000c2e:	ddc9      	ble.n	8000bc4 <updatePwmBuffer+0x6c>
 8000c30:	e000      	b.n	8000c34 <updatePwmBuffer+0xdc>
            continue;
 8000c32:	bf00      	nop
    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3301      	adds	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b8e      	cmp	r3, #142	@ 0x8e
 8000c3e:	dd94      	ble.n	8000b6a <updatePwmBuffer+0x12>
            }
        }

    }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000e4 	.word	0x200000e4

08000c50 <DMA_Send>:


void DMA_Send() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmBuffer, PWM_ARRAY_SIZE + 1);
 8000c54:	f640 539b 	movw	r3, #3483	@ 0xd9b
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <DMA_Send+0x28>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <DMA_Send+0x2c>)
 8000c5e:	f003 fb45 	bl	80042ec <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 8000c62:	bf00      	nop
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <DMA_Send+0x30>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0fb      	beq.n	8000c64 <DMA_Send+0x14>
	datasentflag = 0;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <DMA_Send+0x30>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000e4 	.word	0x200000e4
 8000c7c:	20002328 	.word	0x20002328
 8000c80:	200000e0 	.word	0x200000e0

08000c84 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f003 fcdc 	bl	800464c <HAL_TIM_PWM_Stop_DMA>
    datasentflag = 1;
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000e0 	.word	0x200000e0

08000ca8 <addBitmapToDisplay>:
#include "display.h"

LED targetDisplay[MATRIX_SIZE];
LED currentDisplay[MATRIX_SIZE];

void addBitmapToDisplay(const uint16_t matrix[MATRIX_HEIGHT], LED *display, RgbColor color, Effect effect) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	@ 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	70fb      	strb	r3, [r7, #3]

    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e04c      	b.n	8000d56 <addBitmapToDisplay+0xae>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	e043      	b.n	8000d4a <addBitmapToDisplay+0xa2>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	441a      	add	r2, r3
 8000ccc:	0052      	lsls	r2, r2, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	75fb      	strb	r3, [r7, #23]

            if(matrix[i] & (1 << j)) {
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	fa42 f303 	asr.w	r3, r2, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d027      	beq.n	8000d44 <addBitmapToDisplay+0x9c>
            	display[ledNumber].red = color.r;
 8000cf4:	7dfa      	ldrb	r2, [r7, #23]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	4413      	add	r3, r2
 8000d00:	793a      	ldrb	r2, [r7, #4]
 8000d02:	701a      	strb	r2, [r3, #0]
            	display[ledNumber].green = color.g;
 8000d04:	7dfa      	ldrb	r2, [r7, #23]
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	4413      	add	r3, r2
 8000d10:	797a      	ldrb	r2, [r7, #5]
 8000d12:	705a      	strb	r2, [r3, #1]
            	display[ledNumber].blue = color.b;
 8000d14:	7dfa      	ldrb	r2, [r7, #23]
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	4413      	add	r3, r2
 8000d20:	79ba      	ldrb	r2, [r7, #6]
 8000d22:	709a      	strb	r2, [r3, #2]
            	display[ledNumber].on = true;
 8000d24:	7dfa      	ldrb	r2, [r7, #23]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	4413      	add	r3, r2
 8000d30:	2201      	movs	r2, #1
 8000d32:	711a      	strb	r2, [r3, #4]
            	display[ledNumber].effect = effect;
 8000d34:	7dfa      	ldrb	r2, [r7, #23]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	4413      	add	r3, r2
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	3301      	adds	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	2b0a      	cmp	r3, #10
 8000d4e:	ddb8      	ble.n	8000cc2 <addBitmapToDisplay+0x1a>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	3301      	adds	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2b0c      	cmp	r3, #12
 8000d5a:	ddaf      	ble.n	8000cbc <addBitmapToDisplay+0x14>
            }

        }
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <wipeDisplay>:

void wipeDisplay(LED *display) {
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e022      	b.n	8000dbe <wipeDisplay+0x54>
		display[i].blue = 0;
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	709a      	strb	r2, [r3, #2]
		display[i].green = 0;
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	2200      	movs	r2, #0
 8000d96:	705a      	strb	r2, [r3, #1]
		display[i].red = 0;
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		display[i].effect = NONE;
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b8e      	cmp	r3, #142	@ 0x8e
 8000dc2:	ddd9      	ble.n	8000d78 <wipeDisplay+0xe>
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <advanceDisplay>:

void advanceDisplay() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    memcpy(currentDisplay, targetDisplay, sizeof(currentDisplay));
 8000dd8:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <advanceDisplay+0x20>)
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <advanceDisplay+0x24>)
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f240 23cb 	movw	r3, #715	@ 0x2cb
 8000de4:	461a      	mov	r2, r3
 8000de6:	f004 ff62 	bl	8005cae <memcpy>
    wipeDisplay((LED *) targetDisplay);
 8000dea:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <advanceDisplay+0x24>)
 8000dec:	f7ff ffbd 	bl	8000d6a <wipeDisplay>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20001ee4 	.word	0x20001ee4
 8000df8:	20001c18 	.word	0x20001c18

08000dfc <checkUpdateTime>:
FlickerState currentFlickerState = STATE_IDLE;
static RTC_TimeTypeDef previousDisplayedTime = {0}; // Initialize to some value
bool needToUpdateDisplay = true;
bool isFlickering = false;

void checkUpdateTime(RTC_TimeTypeDef currentTime) {
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	b490      	push	{r4, r7}
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	f107 0408 	add.w	r4, r7, #8
 8000e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Check if minute ends in 5 and is different from the previous time
    if ((currentTime.Minutes % 5 == 0) && ((currentTime.Minutes != previousDisplayedTime.Minutes) || (currentTime.Hours != previousDisplayedTime.Hours))) {
 8000e0a:	7a7a      	ldrb	r2, [r7, #9]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <checkUpdateTime+0x4c>)
 8000e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e12:	0899      	lsrs	r1, r3, #2
 8000e14:	460b      	mov	r3, r1
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10c      	bne.n	8000e3c <checkUpdateTime+0x40>
 8000e22:	7a7a      	ldrb	r2, [r7, #9]
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <checkUpdateTime+0x50>)
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d104      	bne.n	8000e36 <checkUpdateTime+0x3a>
 8000e2c:	7a3a      	ldrb	r2, [r7, #8]
 8000e2e:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <checkUpdateTime+0x50>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d002      	beq.n	8000e3c <checkUpdateTime+0x40>
        needToUpdateDisplay = true;
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <checkUpdateTime+0x54>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc90      	pop	{r4, r7}
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	cccccccd 	.word	0xcccccccd
 8000e4c:	200021b0 	.word	0x200021b0
 8000e50:	20000000 	.word	0x20000000

08000e54 <updateDisplay>:

void updateDisplay(RTC_TimeTypeDef currentTime) {
 8000e54:	b084      	sub	sp, #16
 8000e56:	b5b0      	push	{r4, r5, r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	f107 0418 	add.w	r4, r7, #24
 8000e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Call flicker effects based on the state
    switch (currentFlickerState) {
 8000e64:	4b2e      	ldr	r3, [pc, #184]	@ (8000f20 <updateDisplay+0xcc>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d02e      	beq.n	8000eca <updateDisplay+0x76>
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	dc48      	bgt.n	8000f02 <updateDisplay+0xae>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <updateDisplay+0x26>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d008      	beq.n	8000e8a <updateDisplay+0x36>
                needToUpdateDisplay = false;
                previousDisplayedTime = currentTime; // Update the time once the whole effect is done
            }
            break;
        default:
        	break;
 8000e78:	e043      	b.n	8000f02 <updateDisplay+0xae>
            if (needToUpdateDisplay) {
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f24 <updateDisplay+0xd0>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d041      	beq.n	8000f06 <updateDisplay+0xb2>
                currentFlickerState = STATE_FLICKER_OUT; // Start the flicker out effect
 8000e82:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <updateDisplay+0xcc>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
            break;
 8000e88:	e03d      	b.n	8000f06 <updateDisplay+0xb2>
            isFlickering = flickerOut(); // This function automatically resets its state when done
 8000e8a:	f000 f851 	bl	8000f30 <flickerOut>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b25      	ldr	r3, [pc, #148]	@ (8000f28 <updateDisplay+0xd4>)
 8000e94:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) { // Assume you have a way to check if flickering out has finished
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <updateDisplay+0xd4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	f083 0301 	eor.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d032      	beq.n	8000f0a <updateDisplay+0xb6>
                currentFlickerState = STATE_FLICKER_IN; // Proceed to flicker in the new display
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <updateDisplay+0xcc>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
                color.r = 5;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	713b      	strb	r3, [r7, #4]
                color.g = 5;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	717b      	strb	r3, [r7, #5]
                color.b = 5;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	71bb      	strb	r3, [r7, #6]
                display_time(currentTime.Hours, currentTime.Minutes, color); // Update the nextFrame for flicker in
 8000eb6:	7e3b      	ldrb	r3, [r7, #24]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	7e7b      	ldrb	r3, [r7, #25]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f000 f9b4 	bl	800122c <display_time>
                advanceDisplay();
 8000ec4:	f7ff ff86 	bl	8000dd4 <advanceDisplay>
            break;
 8000ec8:	e01f      	b.n	8000f0a <updateDisplay+0xb6>
        	isFlickering = flickerIn(); // This function automatically resets its state when done
 8000eca:	f000 f8d3 	bl	8001074 <flickerIn>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <updateDisplay+0xd4>)
 8000ed4:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) { // Assume you have a way to check if flickering in has finished
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <updateDisplay+0xd4>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	f083 0301 	eor.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <updateDisplay+0xba>
                currentFlickerState = STATE_IDLE; // Go back to idle state
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <updateDisplay+0xcc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
                needToUpdateDisplay = false;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <updateDisplay+0xd0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
                previousDisplayedTime = currentTime; // Update the time once the whole effect is done
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <updateDisplay+0xd8>)
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	f107 0418 	add.w	r4, r7, #24
 8000ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	602b      	str	r3, [r5, #0]
            break;
 8000f00:	e005      	b.n	8000f0e <updateDisplay+0xba>
        	break;
 8000f02:	bf00      	nop
 8000f04:	e004      	b.n	8000f10 <updateDisplay+0xbc>
            break;
 8000f06:	bf00      	nop
 8000f08:	e002      	b.n	8000f10 <updateDisplay+0xbc>
            break;
 8000f0a:	bf00      	nop
 8000f0c:	e000      	b.n	8000f10 <updateDisplay+0xbc>
            break;
 8000f0e:	bf00      	nop
    }
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f1a:	b004      	add	sp, #16
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200021af 	.word	0x200021af
 8000f24:	20000000 	.word	0x20000000
 8000f28:	200021c4 	.word	0x200021c4
 8000f2c:	200021b0 	.word	0x200021b0

08000f30 <flickerOut>:

uint32_t lastTickFlicker;

bool flickerOut(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    static uint8_t litLEDs[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 8000f36:	230a      	movs	r3, #10
 8000f38:	717b      	strb	r3, [r7, #5]
    const uint32_t delayInterval = 50; // milliseconds
 8000f3a:	2332      	movs	r3, #50	@ 0x32
 8000f3c:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 8000f3e:	4b47      	ldr	r3, [pc, #284]	@ (800105c <flickerOut+0x12c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d019      	beq.n	8000f80 <flickerOut+0x50>
        numLit = getLEDsWithEffect(litLEDs, (LED *) currentDisplay, FLICKER);
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	4944      	ldr	r1, [pc, #272]	@ (8001060 <flickerOut+0x130>)
 8000f50:	4844      	ldr	r0, [pc, #272]	@ (8001064 <flickerOut+0x134>)
 8000f52:	f7ff fdb5 	bl	8000ac0 <getLEDsWithEffect>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b43      	ldr	r3, [pc, #268]	@ (8001068 <flickerOut+0x138>)
 8000f5c:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 8000f5e:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <flickerOut+0x138>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <flickerOut+0x3a>
            return true; // Function did not start flickering, return false
 8000f66:	2301      	movs	r3, #1
 8000f68:	e073      	b.n	8001052 <flickerOut+0x122>
        }
        loop = 0;
 8000f6a:	4b40      	ldr	r3, [pc, #256]	@ (800106c <flickerOut+0x13c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 8000f70:	f001 fa6a 	bl	8002448 <HAL_GetTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a3e      	ldr	r2, [pc, #248]	@ (8001070 <flickerOut+0x140>)
 8000f78:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 8000f7a:	4b38      	ldr	r3, [pc, #224]	@ (800105c <flickerOut+0x12c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayInterval) {
 8000f80:	f001 fa62 	bl	8002448 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b3a      	ldr	r3, [pc, #232]	@ (8001070 <flickerOut+0x140>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d85e      	bhi.n	8001050 <flickerOut+0x120>
        if (loop >= flickerLoops) {
 8000f92:	4b36      	ldr	r3, [pc, #216]	@ (800106c <flickerOut+0x13c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	797a      	ldrb	r2, [r7, #5]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d81b      	bhi.n	8000fd4 <flickerOut+0xa4>
            // Ensure all LEDs are turned off at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	e009      	b.n	8000fb6 <flickerOut+0x86>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8001064 <flickerOut+0x134>)
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482d      	ldr	r0, [pc, #180]	@ (8001060 <flickerOut+0x130>)
 8000fac:	f7ff fd74 	bl	8000a98 <turnOffLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <flickerOut+0x138>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3f0      	bcc.n	8000fa2 <flickerOut+0x72>
            }
            updatePwmBuffer((LED *) currentDisplay);
 8000fc0:	4827      	ldr	r0, [pc, #156]	@ (8001060 <flickerOut+0x130>)
 8000fc2:	f7ff fdc9 	bl	8000b58 <updatePwmBuffer>
            DMA_Send(); // Update LEDs through DMA
 8000fc6:	f7ff fe43 	bl	8000c50 <DMA_Send>
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <flickerOut+0x12c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e03e      	b.n	8001052 <flickerOut+0x122>
        }

        shuffleArray(litLEDs, numLit);
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <flickerOut+0x138>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4822      	ldr	r0, [pc, #136]	@ (8001064 <flickerOut+0x134>)
 8000fdc:	f000 f8ec 	bl	80011b8 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	71bb      	strb	r3, [r7, #6]
 8000fe4:	e01f      	b.n	8001026 <flickerOut+0xf6>
            if (RANDOM_IN_RANGE(0, flickerLoops) < loop) {
 8000fe6:	f004 fc5d 	bl	80058a4 <rand>
 8000fea:	4602      	mov	r2, r0
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	fb92 f1f3 	sdiv	r1, r2, r3
 8000ff4:	fb01 f303 	mul.w	r3, r1, r3
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <flickerOut+0x13c>)
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	da07      	bge.n	8001012 <flickerOut+0xe2>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <flickerOut+0x134>)
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	4619      	mov	r1, r3
 800100a:	4815      	ldr	r0, [pc, #84]	@ (8001060 <flickerOut+0x130>)
 800100c:	f7ff fd44 	bl	8000a98 <turnOffLED>
 8001010:	e006      	b.n	8001020 <flickerOut+0xf0>
            } else {
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	4a13      	ldr	r2, [pc, #76]	@ (8001064 <flickerOut+0x134>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	4619      	mov	r1, r3
 800101a:	4811      	ldr	r0, [pc, #68]	@ (8001060 <flickerOut+0x130>)
 800101c:	f7ff fd28 	bl	8000a70 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	3301      	adds	r3, #1
 8001024:	71bb      	strb	r3, [r7, #6]
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <flickerOut+0x138>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	79ba      	ldrb	r2, [r7, #6]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3da      	bcc.n	8000fe6 <flickerOut+0xb6>
            }
        }
        updatePwmBuffer((LED *) currentDisplay);
 8001030:	480b      	ldr	r0, [pc, #44]	@ (8001060 <flickerOut+0x130>)
 8001032:	f7ff fd91 	bl	8000b58 <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 8001036:	f7ff fe0b 	bl	8000c50 <DMA_Send>
        lastTickEffect = HAL_GetTick();
 800103a:	f001 fa05 	bl	8002448 <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <flickerOut+0x140>)
 8001042:	6013      	str	r3, [r2, #0]
        loop++;
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <flickerOut+0x13c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <flickerOut+0x13c>)
 800104e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200021c5 	.word	0x200021c5
 8001060:	20001ee4 	.word	0x20001ee4
 8001064:	200021c8 	.word	0x200021c8
 8001068:	20002257 	.word	0x20002257
 800106c:	20002258 	.word	0x20002258
 8001070:	2000225c 	.word	0x2000225c

08001074 <flickerIn>:

bool flickerIn(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
    static uint8_t litLEDs[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 800107a:	230a      	movs	r3, #10
 800107c:	717b      	strb	r3, [r7, #5]
    const uint32_t delayInterval = 50; // milliseconds
 800107e:	2332      	movs	r3, #50	@ 0x32
 8001080:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <flickerIn+0x12c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f083 0301 	eor.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d019      	beq.n	80010c4 <flickerIn+0x50>
        numLit = getLEDsWithEffect(litLEDs, (LED *) currentDisplay, FLICKER);
 8001090:	2202      	movs	r2, #2
 8001092:	4944      	ldr	r1, [pc, #272]	@ (80011a4 <flickerIn+0x130>)
 8001094:	4844      	ldr	r0, [pc, #272]	@ (80011a8 <flickerIn+0x134>)
 8001096:	f7ff fd13 	bl	8000ac0 <getLEDsWithEffect>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <flickerIn+0x138>)
 80010a0:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 80010a2:	4b42      	ldr	r3, [pc, #264]	@ (80011ac <flickerIn+0x138>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <flickerIn+0x3a>
            return true;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e073      	b.n	8001196 <flickerIn+0x122>
        }
        loop = 0;
 80010ae:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <flickerIn+0x13c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 80010b4:	f001 f9c8 	bl	8002448 <HAL_GetTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a3e      	ldr	r2, [pc, #248]	@ (80011b4 <flickerIn+0x140>)
 80010bc:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <flickerIn+0x12c>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayInterval) {
 80010c4:	f001 f9c0 	bl	8002448 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b3a      	ldr	r3, [pc, #232]	@ (80011b4 <flickerIn+0x140>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d85e      	bhi.n	8001194 <flickerIn+0x120>
        if (loop >= flickerLoops) {
 80010d6:	4b36      	ldr	r3, [pc, #216]	@ (80011b0 <flickerIn+0x13c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	797a      	ldrb	r2, [r7, #5]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d81b      	bhi.n	8001118 <flickerIn+0xa4>
            // Ensure all LEDs are turned on at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	e009      	b.n	80010fa <flickerIn+0x86>
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4a2f      	ldr	r2, [pc, #188]	@ (80011a8 <flickerIn+0x134>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	4619      	mov	r1, r3
 80010ee:	482d      	ldr	r0, [pc, #180]	@ (80011a4 <flickerIn+0x130>)
 80010f0:	f7ff fcbe 	bl	8000a70 <turnOnLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	3301      	adds	r3, #1
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	4b2c      	ldr	r3, [pc, #176]	@ (80011ac <flickerIn+0x138>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	79fa      	ldrb	r2, [r7, #7]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3f0      	bcc.n	80010e6 <flickerIn+0x72>
            }
            updatePwmBuffer((LED *) currentDisplay);
 8001104:	4827      	ldr	r0, [pc, #156]	@ (80011a4 <flickerIn+0x130>)
 8001106:	f7ff fd27 	bl	8000b58 <updatePwmBuffer>
            DMA_Send(); // Update LEDs through DMA
 800110a:	f7ff fda1 	bl	8000c50 <DMA_Send>
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <flickerIn+0x12c>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 8001114:	2300      	movs	r3, #0
 8001116:	e03e      	b.n	8001196 <flickerIn+0x122>
        }

        shuffleArray(litLEDs, numLit);
 8001118:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <flickerIn+0x138>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	4822      	ldr	r0, [pc, #136]	@ (80011a8 <flickerIn+0x134>)
 8001120:	f000 f84a 	bl	80011b8 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001124:	2300      	movs	r3, #0
 8001126:	71bb      	strb	r3, [r7, #6]
 8001128:	e01f      	b.n	800116a <flickerIn+0xf6>
            if (RANDOM_IN_RANGE(0, flickerLoops) > loop) {
 800112a:	f004 fbbb 	bl	80058a4 <rand>
 800112e:	4602      	mov	r2, r0
 8001130:	797b      	ldrb	r3, [r7, #5]
 8001132:	3301      	adds	r3, #1
 8001134:	fb92 f1f3 	sdiv	r1, r2, r3
 8001138:	fb01 f303 	mul.w	r3, r1, r3
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	4a1c      	ldr	r2, [pc, #112]	@ (80011b0 <flickerIn+0x13c>)
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	4293      	cmp	r3, r2
 8001144:	dd07      	ble.n	8001156 <flickerIn+0xe2>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <flickerIn+0x134>)
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	4619      	mov	r1, r3
 800114e:	4815      	ldr	r0, [pc, #84]	@ (80011a4 <flickerIn+0x130>)
 8001150:	f7ff fca2 	bl	8000a98 <turnOffLED>
 8001154:	e006      	b.n	8001164 <flickerIn+0xf0>
            } else {
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <flickerIn+0x134>)
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	4619      	mov	r1, r3
 800115e:	4811      	ldr	r0, [pc, #68]	@ (80011a4 <flickerIn+0x130>)
 8001160:	f7ff fc86 	bl	8000a70 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	3301      	adds	r3, #1
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <flickerIn+0x138>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	79ba      	ldrb	r2, [r7, #6]
 8001170:	429a      	cmp	r2, r3
 8001172:	d3da      	bcc.n	800112a <flickerIn+0xb6>
            }
        }
        updatePwmBuffer((LED *) currentDisplay);
 8001174:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <flickerIn+0x130>)
 8001176:	f7ff fcef 	bl	8000b58 <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 800117a:	f7ff fd69 	bl	8000c50 <DMA_Send>
        lastTickEffect = HAL_GetTick();
 800117e:	f001 f963 	bl	8002448 <HAL_GetTick>
 8001182:	4603      	mov	r3, r0
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <flickerIn+0x140>)
 8001186:	6013      	str	r3, [r2, #0]
        loop++;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <flickerIn+0x13c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <flickerIn+0x13c>)
 8001192:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8001194:	2301      	movs	r3, #1
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20002260 	.word	0x20002260
 80011a4:	20001ee4 	.word	0x20001ee4
 80011a8:	20002264 	.word	0x20002264
 80011ac:	200022f3 	.word	0x200022f3
 80011b0:	200022f4 	.word	0x200022f4
 80011b4:	200022f8 	.word	0x200022f8

080011b8 <shuffleArray>:
 * @param   size  Number of elements in the array.
 *
 * @note    The array must be non-empty and contain at least two elements for shuffling to occur.
 *          Otherwise, the function does nothing.
 */
void shuffleArray(uint8_t *array, uint32_t size) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
    if (size > 1) {
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d92d      	bls.n	8001224 <shuffleArray+0x6c>
        for (uint32_t i = 0; i < size - 1; i++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e025      	b.n	800121a <shuffleArray+0x62>
            uint32_t j = i + (uint32_t) rand() / (RAND_MAX / (size - i) + 1);
 80011ce:	f004 fb69 	bl	80058a4 <rand>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4619      	mov	r1, r3
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80011e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4413      	add	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
            uint8_t t = array[j];
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	73fb      	strb	r3, [r7, #15]
            array[j] = array[i];
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	441a      	add	r2, r3
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	440b      	add	r3, r1
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	701a      	strb	r2, [r3, #0]
            array[i] = t;
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	4413      	add	r3, r2
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size - 1; i++) {
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	d3d4      	bcc.n	80011ce <shuffleArray+0x16>
        }
    }
}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <display_time>:
		MINUTE_TWENTY,
		MINUTE_TWENTYFIVE,
		MINUTE_THIRTY
};

void display_time(int hour, int minute, RgbColor color) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
    addBitmapToDisplay(BMP_ITS, (LED *) targetDisplay, color, FLICKER);
 8001238:	2302      	movs	r3, #2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4943      	ldr	r1, [pc, #268]	@ (800134c <display_time+0x120>)
 800123e:	4844      	ldr	r0, [pc, #272]	@ (8001350 <display_time+0x124>)
 8001240:	f7ff fd32 	bl	8000ca8 <addBitmapToDisplay>

    // Round down to the nearest five minutes and determine if it is 'past' or 'to' the hour
    int roundedMinute = (minute / 5) * 5;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <display_time+0x128>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1052      	asrs	r2, r2, #1
 800124e:	17db      	asrs	r3, r3, #31
 8001250:	1ad2      	subs	r2, r2, r3
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
    if (roundedMinute > 0) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd16      	ble.n	800128e <display_time+0x62>
        if (roundedMinute < 35) {
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b22      	cmp	r3, #34	@ 0x22
 8001264:	dc06      	bgt.n	8001274 <display_time+0x48>
            addBitmapToDisplay(BMP_PAST, (LED *) targetDisplay, color, FLICKER);
 8001266:	2302      	movs	r3, #2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4938      	ldr	r1, [pc, #224]	@ (800134c <display_time+0x120>)
 800126c:	483a      	ldr	r0, [pc, #232]	@ (8001358 <display_time+0x12c>)
 800126e:	f7ff fd1b 	bl	8000ca8 <addBitmapToDisplay>
 8001272:	e00c      	b.n	800128e <display_time+0x62>
        } else {
            roundedMinute = 60 - roundedMinute;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800127a:	617b      	str	r3, [r7, #20]
            hour++;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
            addBitmapToDisplay(BMP_TILL, (LED *) targetDisplay, color, FLICKER);
 8001282:	2302      	movs	r3, #2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4931      	ldr	r1, [pc, #196]	@ (800134c <display_time+0x120>)
 8001288:	4834      	ldr	r0, [pc, #208]	@ (800135c <display_time+0x130>)
 800128a:	f7ff fd0d 	bl	8000ca8 <addBitmapToDisplay>
        }
    }

    // Normalize the hour to a 12-hour format and display AM/PM where applicable
    hour %= 24; // Normalize hour to 0-23
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <display_time+0x134>)
 8001292:	fb83 1302 	smull	r1, r3, r3, r2
 8001296:	1099      	asrs	r1, r3, #2
 8001298:	17d3      	asrs	r3, r2, #31
 800129a:	1ac9      	subs	r1, r1, r3
 800129c:	460b      	mov	r3, r1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	440b      	add	r3, r1
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	60fb      	str	r3, [r7, #12]
    if(hour == 0 || hour == 12) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d012      	beq.n	80012d4 <display_time+0xa8>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d00f      	beq.n	80012d4 <display_time+0xa8>
        // It's exactly midnight or noon, so we will handle it in the hour display section.
    } else if (hour < 12) {
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b0b      	cmp	r3, #11
 80012b8:	dc06      	bgt.n	80012c8 <display_time+0x9c>
        addBitmapToDisplay(BMP_AM, (LED *) targetDisplay, color, FLICKER);
 80012ba:	2302      	movs	r3, #2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4923      	ldr	r1, [pc, #140]	@ (800134c <display_time+0x120>)
 80012c0:	4828      	ldr	r0, [pc, #160]	@ (8001364 <display_time+0x138>)
 80012c2:	f7ff fcf1 	bl	8000ca8 <addBitmapToDisplay>
 80012c6:	e005      	b.n	80012d4 <display_time+0xa8>
    } else {
        addBitmapToDisplay(BMP_PM, (LED *) targetDisplay, color, FLICKER);
 80012c8:	2302      	movs	r3, #2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	491f      	ldr	r1, [pc, #124]	@ (800134c <display_time+0x120>)
 80012ce:	4826      	ldr	r0, [pc, #152]	@ (8001368 <display_time+0x13c>)
 80012d0:	f7ff fcea 	bl	8000ca8 <addBitmapToDisplay>
    }

    // Display the hour, normalizing hour again for 12-hour format with special cases for noon and midnight
    if (hour > 12) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b0c      	cmp	r3, #12
 80012d8:	dd02      	ble.n	80012e0 <display_time+0xb4>
        hour -= 12; // Convert to 12-hour format
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3b0c      	subs	r3, #12
 80012de:	60fb      	str	r3, [r7, #12]
    }
    if (hour == 0) {
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <display_time+0xbe>
        hour = 12; // Adjust for midnight/noon display
 80012e6:	230c      	movs	r3, #12
 80012e8:	60fb      	str	r3, [r7, #12]
    }

    // Use an array to simplify hour display logic
    if(hour >= 1 && hour <= 12) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dd16      	ble.n	800131e <display_time+0xf2>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	dc13      	bgt.n	800131e <display_time+0xf2>
        addBitmapToDisplay(hourBitmaps[hour % 12], (LED *) targetDisplay, color, FLICKER);
 80012f6:	68f9      	ldr	r1, [r7, #12]
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <display_time+0x134>)
 80012fa:	fb83 2301 	smull	r2, r3, r3, r1
 80012fe:	105a      	asrs	r2, r3, #1
 8001300:	17cb      	asrs	r3, r1, #31
 8001302:	1ad2      	subs	r2, r2, r3
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	1aca      	subs	r2, r1, r3
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <display_time+0x140>)
 8001310:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001314:	2302      	movs	r3, #2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	490c      	ldr	r1, [pc, #48]	@ (800134c <display_time+0x120>)
 800131a:	f7ff fcc5 	bl	8000ca8 <addBitmapToDisplay>
    }

    // Display the minute in intervals of five using an array pointing to the bitmaps
    if (roundedMinute > 0) {
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd0f      	ble.n	8001344 <display_time+0x118>
        addBitmapToDisplay(minuteBitmaps[(roundedMinute / 5) - 1], (LED *) targetDisplay, color, FLICKER);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <display_time+0x128>)
 8001328:	fb82 1203 	smull	r1, r2, r2, r3
 800132c:	1052      	asrs	r2, r2, #1
 800132e:	17db      	asrs	r3, r3, #31
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <display_time+0x144>)
 8001336:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800133a:	2302      	movs	r3, #2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4903      	ldr	r1, [pc, #12]	@ (800134c <display_time+0x120>)
 8001340:	f7ff fcb2 	bl	8000ca8 <addBitmapToDisplay>
    }
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20001c18 	.word	0x20001c18
 8001350:	08006e6a 	.word	0x08006e6a
 8001354:	66666667 	.word	0x66666667
 8001358:	08006e84 	.word	0x08006e84
 800135c:	08006e9e 	.word	0x08006e9e
 8001360:	2aaaaaab 	.word	0x2aaaaaab
 8001364:	08006f20 	.word	0x08006f20
 8001368:	08006f3a 	.word	0x08006f3a
 800136c:	20000004 	.word	0x20000004
 8001370:	20000038 	.word	0x20000038

08001374 <checkButtonPress>:
 *      Author: dsava
 */

#include "button.h"

bool checkButtonPress(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 800137a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800137e:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <checkButtonPress+0x30>)
 8001380:	f001 feba 	bl	80030f8 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <checkButtonPress+0x34>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d104      	bne.n	800139a <checkButtonPress+0x26>
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <checkButtonPress+0x26>
        // Button was pressed - perform actions here.
    	return true;
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <checkButtonPress+0x28>
    } else {
    	return false;
 800139a:	2300      	movs	r3, #0
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40020400 	.word	0x40020400
 80013a8:	20000050 	.word	0x20000050

080013ac <switchState>:

void switchState() {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    switch(getDeviceState()) {
 80013b0:	f000 f99c 	bl	80016ec <getDeviceState>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	f200 80a9 	bhi.w	800150e <switchState+0x162>
 80013bc:	a201      	add	r2, pc, #4	@ (adr r2, 80013c4 <switchState+0x18>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013ed 	.word	0x080013ed
 80013c8:	080013f5 	.word	0x080013f5
 80013cc:	080013fd 	.word	0x080013fd
 80013d0:	08001481 	.word	0x08001481
 80013d4:	08001497 	.word	0x08001497
 80013d8:	080014f3 	.word	0x080014f3
 80013dc:	08001507 	.word	0x08001507
 80013e0:	080014af 	.word	0x080014af
 80013e4:	080014cd 	.word	0x080014cd
 80013e8:	080014eb 	.word	0x080014eb
        case SLEEP:
            setDeviceState(WAKE);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f000 f989 	bl	8001704 <setDeviceState>
            break;
 80013f2:	e090      	b.n	8001516 <switchState+0x16a>
        case WAKE:
            setDeviceState(SELECT);
 80013f4:	2002      	movs	r0, #2
 80013f6:	f000 f985 	bl	8001704 <setDeviceState>

            break;
 80013fa:	e08c      	b.n	8001516 <switchState+0x16a>
        case SELECT:
        	switch(getSelected()){
 80013fc:	f000 f9b4 	bl	8001768 <getSelected>
 8001400:	4603      	mov	r3, r0
 8001402:	2b03      	cmp	r3, #3
 8001404:	d83a      	bhi.n	800147c <switchState+0xd0>
 8001406:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <switchState+0x60>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001433 	.word	0x08001433
 8001414:	08001441 	.word	0x08001441
 8001418:	0800145f 	.word	0x0800145f
        	case 0:
        		setCounter(getTime()->Hours);
 800141c:	f000 f9b6 	bl	800178c <getTime>
 8001420:	4603      	mov	r3, r0
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f989 	bl	800173c <setCounter>
        		setDeviceState(SET_HOURS);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 f96a 	bl	8001704 <setDeviceState>
        		break;
 8001430:	e025      	b.n	800147e <switchState+0xd2>
        	case 1:
        		setDeviceState(SET_COLOR);
 8001432:	2005      	movs	r0, #5
 8001434:	f000 f966 	bl	8001704 <setDeviceState>
        		setCounter(16); //16 presets
 8001438:	2010      	movs	r0, #16
 800143a:	f000 f97f 	bl	800173c <setCounter>
        		break;
 800143e:	e01e      	b.n	800147e <switchState+0xd2>
        	case 2:
        		setDateState(ANNIVERSARY_DATE);
 8001440:	2001      	movs	r0, #1
 8001442:	f000 f9db 	bl	80017fc <setDateState>
            	setCounter(getDate(ANNIVERSARY_DATE)->Month);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f9aa 	bl	80017a0 <getDate>
 800144c:	4603      	mov	r3, r0
 800144e:	785b      	ldrb	r3, [r3, #1]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f973 	bl	800173c <setCounter>
            	setDeviceState(SET_MONTH);
 8001456:	2007      	movs	r0, #7
 8001458:	f000 f954 	bl	8001704 <setDeviceState>
        		break;
 800145c:	e00f      	b.n	800147e <switchState+0xd2>
        	case 3:
        		setDateState(BIRTHDAY_DATE);
 800145e:	2002      	movs	r0, #2
 8001460:	f000 f9cc 	bl	80017fc <setDateState>
            	setCounter(getDate(BIRTHDAY_DATE)->Month);
 8001464:	2002      	movs	r0, #2
 8001466:	f000 f99b 	bl	80017a0 <getDate>
 800146a:	4603      	mov	r3, r0
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f964 	bl	800173c <setCounter>
            	setDeviceState(SET_MONTH);
 8001474:	2007      	movs	r0, #7
 8001476:	f000 f945 	bl	8001704 <setDeviceState>
        		break;
 800147a:	e000      	b.n	800147e <switchState+0xd2>
        	default:
        		break;
 800147c:	bf00      	nop
        	}
            break;
 800147e:	e04a      	b.n	8001516 <switchState+0x16a>
        case SET_HOURS:
        	setCounter(getTime()->Minutes);
 8001480:	f000 f984 	bl	800178c <getTime>
 8001484:	4603      	mov	r3, r0
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f957 	bl	800173c <setCounter>
            setDeviceState(SET_MINUTES);
 800148e:	2004      	movs	r0, #4
 8001490:	f000 f938 	bl	8001704 <setDeviceState>
            break;
 8001494:	e03f      	b.n	8001516 <switchState+0x16a>
        case SET_MINUTES:
        	setCounter(getDate(SYSTEM_DATE)->Month);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f982 	bl	80017a0 <getDate>
 800149c:	4603      	mov	r3, r0
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f94b 	bl	800173c <setCounter>
            setDeviceState(SET_MONTH);
 80014a6:	2007      	movs	r0, #7
 80014a8:	f000 f92c 	bl	8001704 <setDeviceState>
            break;
 80014ac:	e033      	b.n	8001516 <switchState+0x16a>
        case SET_MONTH:
        	setCounter(getDate(getDateState())->Date);
 80014ae:	f000 f999 	bl	80017e4 <getDateState>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f973 	bl	80017a0 <getDate>
 80014ba:	4603      	mov	r3, r0
 80014bc:	789b      	ldrb	r3, [r3, #2]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f93c 	bl	800173c <setCounter>
        	setDeviceState(SET_DAY);
 80014c4:	2008      	movs	r0, #8
 80014c6:	f000 f91d 	bl	8001704 <setDeviceState>
        	break;
 80014ca:	e024      	b.n	8001516 <switchState+0x16a>
        case SET_DAY:
        	setCounter(getDate(getDateState())->Year);
 80014cc:	f000 f98a 	bl	80017e4 <getDateState>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f964 	bl	80017a0 <getDate>
 80014d8:	4603      	mov	r3, r0
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f92d 	bl	800173c <setCounter>
        	setDeviceState(SET_YEAR);
 80014e2:	2009      	movs	r0, #9
 80014e4:	f000 f90e 	bl	8001704 <setDeviceState>
        	break;
 80014e8:	e015      	b.n	8001516 <switchState+0x16a>
        case SET_YEAR:
        	setDeviceState(SLEEP);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f90a 	bl	8001704 <setDeviceState>
        	break;
 80014f0:	e011      	b.n	8001516 <switchState+0x16a>
        case SET_COLOR:
        	setCounter(getBrightness());
 80014f2:	f000 f993 	bl	800181c <getBrightness>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f91f 	bl	800173c <setCounter>
            setDeviceState(SET_BRIGHTNESS); // After color, set brightness
 80014fe:	2006      	movs	r0, #6
 8001500:	f000 f900 	bl	8001704 <setDeviceState>
            break;
 8001504:	e007      	b.n	8001516 <switchState+0x16a>
        case SET_BRIGHTNESS:
            setDeviceState(SLEEP); // Return to SLEEP after setting LED features
 8001506:	2000      	movs	r0, #0
 8001508:	f000 f8fc 	bl	8001704 <setDeviceState>
            break;
 800150c:	e003      	b.n	8001516 <switchState+0x16a>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            setDeviceState(SLEEP);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f8f8 	bl	8001704 <setDeviceState>
            break;
 8001514:	bf00      	nop
    }
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop

0800151c <clampValue>:
 *      Author: dsava
 */

#include "menu.h"

uint32_t clampValue(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
    if ((0xFFFF - value) < (maxVal - value)) {
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800152e:	33ff      	adds	r3, #255	@ 0xff
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	1a8a      	subs	r2, r1, r2
 8001536:	4293      	cmp	r3, r2
 8001538:	d201      	bcs.n	800153e <clampValue+0x22>
  	  return minVal;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	e00c      	b.n	8001558 <clampValue+0x3c>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d201      	bcs.n	800154a <clampValue+0x2e>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	e006      	b.n	8001558 <clampValue+0x3c>
        if (value > maxVal) return maxVal;
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d901      	bls.n	8001556 <clampValue+0x3a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	e000      	b.n	8001558 <clampValue+0x3c>
        return value;
 8001556:	68fb      	ldr	r3, [r7, #12]
    }
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <configureSettings>:

void configureSettings(void) {
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0

	uint32_t counter = getCounter();
 800156a:	f000 f8db 	bl	8001724 <getCounter>
 800156e:	6078      	str	r0, [r7, #4]

	switch(getDeviceState()) {
 8001570:	f000 f8bc 	bl	80016ec <getDeviceState>
 8001574:	4603      	mov	r3, r0
 8001576:	2b09      	cmp	r3, #9
 8001578:	f200 80b3 	bhi.w	80016e2 <configureSettings+0x17e>
 800157c:	a201      	add	r2, pc, #4	@ (adr r2, 8001584 <configureSettings+0x20>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	080016e3 	.word	0x080016e3
 8001588:	080015ad 	.word	0x080015ad
 800158c:	080015d9 	.word	0x080015d9
 8001590:	080015ed 	.word	0x080015ed
 8001594:	08001611 	.word	0x08001611
 8001598:	080016bb 	.word	0x080016bb
 800159c:	080016cf 	.word	0x080016cf
 80015a0:	08001635 	.word	0x08001635
 80015a4:	08001661 	.word	0x08001661
 80015a8:	0800168d 	.word	0x0800168d
		case SLEEP:
			break;
		case WAKE:
			setCounter(clampValue(counter, 0, 1));
 80015ac:	2201      	movs	r2, #1
 80015ae:	2100      	movs	r1, #0
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ffb3 	bl	800151c <clampValue>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f8bf 	bl	800173c <setCounter>
			if(getSelected()) {
 80015be:	f000 f8d3 	bl	8001768 <getSelected>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <configureSettings+0x6c>
				setMode(SET_MODE);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f000 f933 	bl	8001834 <setMode>
			} else {
				setMode(DELETE_MODE);
			}
			break;
 80015ce:	e089      	b.n	80016e4 <configureSettings+0x180>
				setMode(DELETE_MODE);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 f92f 	bl	8001834 <setMode>
			break;
 80015d6:	e085      	b.n	80016e4 <configureSettings+0x180>
		case SELECT:
			setCounter(clampValue(counter, 0, 3));
 80015d8:	2203      	movs	r2, #3
 80015da:	2100      	movs	r1, #0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff9d 	bl	800151c <clampValue>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f8a9 	bl	800173c <setCounter>
			break;
 80015ea:	e07b      	b.n	80016e4 <configureSettings+0x180>
		case SET_HOURS:
		    setCounter(clampValue(counter, 0, 23)); //23 hours
 80015ec:	2217      	movs	r2, #23
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff93 	bl	800151c <clampValue>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f89f 	bl	800173c <setCounter>
		    getTime()->Hours = (uint8_t) (getSelected());
 80015fe:	f000 f8b3 	bl	8001768 <getSelected>
 8001602:	4604      	mov	r4, r0
 8001604:	f000 f8c2 	bl	800178c <getTime>
 8001608:	4603      	mov	r3, r0
 800160a:	b2e2      	uxtb	r2, r4
 800160c:	701a      	strb	r2, [r3, #0]
			break;
 800160e:	e069      	b.n	80016e4 <configureSettings+0x180>
		case SET_MINUTES:
		    setCounter(clampValue(counter, 0, 59)); //23 hours
 8001610:	223b      	movs	r2, #59	@ 0x3b
 8001612:	2100      	movs	r1, #0
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff81 	bl	800151c <clampValue>
 800161a:	4603      	mov	r3, r0
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f88d 	bl	800173c <setCounter>
		    getTime()->Minutes = (uint8_t) (getSelected());
 8001622:	f000 f8a1 	bl	8001768 <getSelected>
 8001626:	4604      	mov	r4, r0
 8001628:	f000 f8b0 	bl	800178c <getTime>
 800162c:	4603      	mov	r3, r0
 800162e:	b2e2      	uxtb	r2, r4
 8001630:	705a      	strb	r2, [r3, #1]
			break;
 8001632:	e057      	b.n	80016e4 <configureSettings+0x180>
		case SET_MONTH:
			//check which month
		    setCounter(clampValue(counter, 0, 12)); //12 months
 8001634:	220c      	movs	r2, #12
 8001636:	2100      	movs	r1, #0
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff6f 	bl	800151c <clampValue>
 800163e:	4603      	mov	r3, r0
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f87b 	bl	800173c <setCounter>
		    getDate(getDateState())->Month = (uint8_t) (getSelected());
 8001646:	f000 f88f 	bl	8001768 <getSelected>
 800164a:	4604      	mov	r4, r0
 800164c:	f000 f8ca 	bl	80017e4 <getDateState>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f8a4 	bl	80017a0 <getDate>
 8001658:	4603      	mov	r3, r0
 800165a:	b2e2      	uxtb	r2, r4
 800165c:	705a      	strb	r2, [r3, #1]
			break;
 800165e:	e041      	b.n	80016e4 <configureSettings+0x180>
		case SET_DAY:
		    setCounter(clampValue(counter, 0, 31)); //31 days
 8001660:	221f      	movs	r2, #31
 8001662:	2100      	movs	r1, #0
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff59 	bl	800151c <clampValue>
 800166a:	4603      	mov	r3, r0
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f865 	bl	800173c <setCounter>
		    //FIXME: user could enter February 31 which is wrong
		    getDate(getDateState())->Date = (uint8_t) (getSelected());
 8001672:	f000 f879 	bl	8001768 <getSelected>
 8001676:	4604      	mov	r4, r0
 8001678:	f000 f8b4 	bl	80017e4 <getDateState>
 800167c:	4603      	mov	r3, r0
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f88e 	bl	80017a0 <getDate>
 8001684:	4603      	mov	r3, r0
 8001686:	b2e2      	uxtb	r2, r4
 8001688:	709a      	strb	r2, [r3, #2]
			break;
 800168a:	e02b      	b.n	80016e4 <configureSettings+0x180>
		case SET_YEAR:
		    setCounter(clampValue(counter, 0, 3000)); //12 months
 800168c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff42 	bl	800151c <clampValue>
 8001698:	4603      	mov	r3, r0
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f84e 	bl	800173c <setCounter>
		    getDate(getDateState())->Year = (uint8_t) (getSelected());
 80016a0:	f000 f862 	bl	8001768 <getSelected>
 80016a4:	4604      	mov	r4, r0
 80016a6:	f000 f89d 	bl	80017e4 <getDateState>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f877 	bl	80017a0 <getDate>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b2e2      	uxtb	r2, r4
 80016b6:	70da      	strb	r2, [r3, #3]
			break;
 80016b8:	e014      	b.n	80016e4 <configureSettings+0x180>
		case SET_COLOR:
			setCounter(clampValue(counter, 0, 16)); //16 color presets
 80016ba:	2210      	movs	r2, #16
 80016bc:	2100      	movs	r1, #0
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff2c 	bl	800151c <clampValue>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f838 	bl	800173c <setCounter>
			break;
 80016cc:	e00a      	b.n	80016e4 <configureSettings+0x180>
		case SET_BRIGHTNESS:
			setCounter(clampValue(counter, 1, 255));
 80016ce:	22ff      	movs	r2, #255	@ 0xff
 80016d0:	2101      	movs	r1, #1
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ff22 	bl	800151c <clampValue>
 80016d8:	4603      	mov	r3, r0
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f82e 	bl	800173c <setCounter>
			break;
 80016e0:	e000      	b.n	80016e4 <configureSettings+0x180>
		default:
			break;
 80016e2:	bf00      	nop
	}
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}

080016ec <getDeviceState>:

uint8_t brightness = 50;

DateType dateState = SYSTEM_DATE;

DeviceState getDeviceState(void) {
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	return currentState;
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <getDeviceState+0x14>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200022fc 	.word	0x200022fc

08001704 <setDeviceState>:

void setDeviceState(DeviceState _currentState) {
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	currentState = _currentState;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <setDeviceState+0x1c>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	7013      	strb	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	200022fc 	.word	0x200022fc

08001724 <getCounter>:

uint32_t getCounter(void) {
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	return counter;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <getCounter+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20002300 	.word	0x20002300

0800173c <setCounter>:

void setCounter(uint32_t _counter) {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	counter = _counter * sensitivity;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <setCounter+0x24>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <setCounter+0x28>)
 8001750:	6013      	str	r3, [r2, #0]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000054 	.word	0x20000054
 8001764:	20002300 	.word	0x20002300

08001768 <getSelected>:

uint32_t getSelected(void) {
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	return counter / sensitivity;
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <getSelected+0x1c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <getSelected+0x20>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20002300 	.word	0x20002300
 8001788:	20000054 	.word	0x20000054

0800178c <getTime>:

RTC_TimeTypeDef* getTime(void) {
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	return &sTime;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <getTime+0x10>)
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20002418 	.word	0x20002418

080017a0 <getDate>:

RTC_DateTypeDef* getDate(DateType type) {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	switch(type) {
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d00a      	beq.n	80017c6 <getDate+0x26>
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	dc0a      	bgt.n	80017ca <getDate+0x2a>
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <getDate+0x1e>
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <getDate+0x22>
 80017bc:	e005      	b.n	80017ca <getDate+0x2a>
		case SYSTEM_DATE:
			return &sDate;
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <getDate+0x38>)
 80017c0:	e004      	b.n	80017cc <getDate+0x2c>
		case ANNIVERSARY_DATE:
			return &aDate;
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <getDate+0x3c>)
 80017c4:	e002      	b.n	80017cc <getDate+0x2c>
		case BIRTHDAY_DATE:
			return &bDate;
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <getDate+0x40>)
 80017c8:	e000      	b.n	80017cc <getDate+0x2c>
		default:
			return &sDate;
 80017ca:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <getDate+0x38>)
	}
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	2000242c 	.word	0x2000242c
 80017dc:	20002430 	.word	0x20002430
 80017e0:	20002434 	.word	0x20002434

080017e4 <getDateState>:

RgbColor getColor(void) {
	return color;
}

DateType getDateState(void) {
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	return dateState;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <getDateState+0x14>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20002304 	.word	0x20002304

080017fc <setDateState>:

void setDateState(DateType _dateState) {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	dateState = _dateState;
 8001806:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <setDateState+0x1c>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	7013      	strb	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	20002304 	.word	0x20002304

0800181c <getBrightness>:

uint8_t getBrightness(void) {
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	return brightness;
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <getBrightness+0x14>)
 8001822:	781b      	ldrb	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000059 	.word	0x20000059

08001834 <setMode>:

void setBrightness(uint8_t _brightness) {
	brightness = _brightness;
}

void setMode(Mode _mode) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	mode = _mode;
 800183e:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <setMode+0x1c>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	7013      	strb	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000058 	.word	0x20000058

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b085      	sub	sp, #20
 8001858:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185a:	f000 fd8f 	bl	800237c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 f891 	bl	8001984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f000 fa67 	bl	8001d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001866:	f000 fa45 	bl	8001cf4 <MX_DMA_Init>
  MX_TIM1_Init();
 800186a:	f000 f94f 	bl	8001b0c <MX_TIM1_Init>
  MX_TIM3_Init();
 800186e:	f000 f9ed 	bl	8001c4c <MX_TIM3_Init>
  MX_RTC_Init();
 8001872:	f000 f8f1 	bl	8001a58 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 8001876:	213c      	movs	r1, #60	@ 0x3c
 8001878:	483b      	ldr	r0, [pc, #236]	@ (8001968 <main+0x114>)
 800187a:	f003 f853 	bl	8004924 <HAL_TIM_Encoder_Start>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800187e:	2200      	movs	r2, #0
 8001880:	493a      	ldr	r1, [pc, #232]	@ (800196c <main+0x118>)
 8001882:	483b      	ldr	r0, [pc, #236]	@ (8001970 <main+0x11c>)
 8001884:	f002 fa9b 	bl	8003dbe <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001888:	2200      	movs	r2, #0
 800188a:	493a      	ldr	r1, [pc, #232]	@ (8001974 <main+0x120>)
 800188c:	4838      	ldr	r0, [pc, #224]	@ (8001970 <main+0x11c>)
 800188e:	f002 fb78 	bl	8003f82 <HAL_RTC_GetDate>
  RgbColor color;
  color.r = 5;
 8001892:	2305      	movs	r3, #5
 8001894:	713b      	strb	r3, [r7, #4]
  color.g = 5;
 8001896:	2305      	movs	r3, #5
 8001898:	717b      	strb	r3, [r7, #5]
  color.b = 5;
 800189a:	2305      	movs	r3, #5
 800189c:	71bb      	strb	r3, [r7, #6]
  display_time(sTime.Hours, sTime.Minutes, color);
 800189e:	4b33      	ldr	r3, [pc, #204]	@ (800196c <main+0x118>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	4b31      	ldr	r3, [pc, #196]	@ (800196c <main+0x118>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff fcbe 	bl	800122c <display_time>
  advanceDisplay();
 80018b0:	f7ff fa90 	bl	8000dd4 <advanceDisplay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	setCounter(__HAL_TIM_GET_COUNTER(&htim3));
 80018b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <main+0x114>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff3e 	bl	800173c <setCounter>

	if(checkButtonPress()){
 80018c0:	f7ff fd58 	bl	8001374 <checkButtonPress>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <main+0x7a>
		switchState();
 80018ca:	f7ff fd6f 	bl	80013ac <switchState>
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80018ce:	2200      	movs	r2, #0
 80018d0:	4926      	ldr	r1, [pc, #152]	@ (800196c <main+0x118>)
 80018d2:	4827      	ldr	r0, [pc, #156]	@ (8001970 <main+0x11c>)
 80018d4:	f002 fa73 	bl	8003dbe <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80018d8:	2200      	movs	r2, #0
 80018da:	4926      	ldr	r1, [pc, #152]	@ (8001974 <main+0x120>)
 80018dc:	4824      	ldr	r0, [pc, #144]	@ (8001970 <main+0x11c>)
 80018de:	f002 fb50 	bl	8003f82 <HAL_RTC_GetDate>

	configureSettings();
 80018e2:	f7ff fe3f 	bl	8001564 <configureSettings>

	 snprintf(displayStr, sizeof(displayStr), "%02d:%02d", sTime.Hours, sTime.Minutes);
 80018e6:	4b21      	ldr	r3, [pc, #132]	@ (800196c <main+0x118>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <main+0x118>)
 80018ee:	785b      	ldrb	r3, [r3, #1]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4613      	mov	r3, r2
 80018f4:	4a20      	ldr	r2, [pc, #128]	@ (8001978 <main+0x124>)
 80018f6:	210a      	movs	r1, #10
 80018f8:	4820      	ldr	r0, [pc, #128]	@ (800197c <main+0x128>)
 80018fa:	f004 f8d3 	bl	8005aa4 <sniprintf>
	__HAL_TIM_SET_COUNTER(&htim3, getCounter());
 80018fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <main+0x114>)
 8001900:	681c      	ldr	r4, [r3, #0]
 8001902:	f7ff ff0f 	bl	8001724 <getCounter>
 8001906:	4603      	mov	r3, r0
 8001908:	6263      	str	r3, [r4, #36]	@ 0x24
	Segment_Display(displayStr);
 800190a:	481c      	ldr	r0, [pc, #112]	@ (800197c <main+0x128>)
 800190c:	f7fe feea 	bl	80006e4 <Segment_Display>



	checkUpdateTime(sTime);
 8001910:	4b16      	ldr	r3, [pc, #88]	@ (800196c <main+0x118>)
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	9200      	str	r2, [sp, #0]
 8001916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001918:	f7ff fa70 	bl	8000dfc <checkUpdateTime>
	updateDisplay(sTime);
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <main+0x118>)
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	9200      	str	r2, [sp, #0]
 8001922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001924:	f7ff fa96 	bl	8000e54 <updateDisplay>

//	setAnniversary(5);

	if(HAL_GetTick() - lastTick > 1000) {
 8001928:	f000 fd8e 	bl	8002448 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <main+0x12c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001938:	d90a      	bls.n	8001950 <main+0xfc>
		sTime.Minutes = sTime.Minutes + 1;
 800193a:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <main+0x118>)
 800193c:	785b      	ldrb	r3, [r3, #1]
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <main+0x118>)
 8001944:	705a      	strb	r2, [r3, #1]
		lastTick = HAL_GetTick();
 8001946:	f000 fd7f 	bl	8002448 <HAL_GetTick>
 800194a:	4603      	mov	r3, r0
 800194c:	4a0c      	ldr	r2, [pc, #48]	@ (8001980 <main+0x12c>)
 800194e:	6013      	str	r3, [r2, #0]
	}

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001950:	2200      	movs	r2, #0
 8001952:	4906      	ldr	r1, [pc, #24]	@ (800196c <main+0x118>)
 8001954:	4806      	ldr	r0, [pc, #24]	@ (8001970 <main+0x11c>)
 8001956:	f002 f998 	bl	8003c8a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800195a:	2200      	movs	r2, #0
 800195c:	4905      	ldr	r1, [pc, #20]	@ (8001974 <main+0x120>)
 800195e:	4804      	ldr	r0, [pc, #16]	@ (8001970 <main+0x11c>)
 8001960:	f002 fa8b 	bl	8003e7a <HAL_RTC_SetDate>
	setCounter(__HAL_TIM_GET_COUNTER(&htim3));
 8001964:	e7a6      	b.n	80018b4 <main+0x60>
 8001966:	bf00      	nop
 8001968:	20002370 	.word	0x20002370
 800196c:	20002418 	.word	0x20002418
 8001970:	20002308 	.word	0x20002308
 8001974:	2000242c 	.word	0x2000242c
 8001978:	08006c70 	.word	0x08006c70
 800197c:	20002438 	.word	0x20002438
 8001980:	20002444 	.word	0x20002444

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b094      	sub	sp, #80	@ 0x50
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2230      	movs	r2, #48	@ 0x30
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f004 f8fd 	bl	8005b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <SystemClock_Config+0xcc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	4a27      	ldr	r2, [pc, #156]	@ (8001a50 <SystemClock_Config+0xcc>)
 80019b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <SystemClock_Config+0xcc>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <SystemClock_Config+0xd0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <SystemClock_Config+0xd0>)
 80019ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <SystemClock_Config+0xd0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80019e0:	2305      	movs	r3, #5
 80019e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019ea:	2301      	movs	r3, #1
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80019f8:	230c      	movs	r3, #12
 80019fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019fc:	2348      	movs	r3, #72	@ 0x48
 80019fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a04:	2304      	movs	r3, #4
 8001a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 fba5 	bl	800315c <HAL_RCC_OscConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a18:	f000 fa10 	bl	8001e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2102      	movs	r1, #2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f001 fe07 	bl	800364c <HAL_RCC_ClockConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a44:	f000 f9fa 	bl	8001e3c <Error_Handler>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3750      	adds	r7, #80	@ 0x50
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a70:	4b24      	ldr	r3, [pc, #144]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001a72:	4a25      	ldr	r2, [pc, #148]	@ (8001b08 <MX_RTC_Init+0xb0>)
 8001a74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a76:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a7c:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001a7e:	227f      	movs	r2, #127	@ 0x7f
 8001a80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001a84:	22ff      	movs	r2, #255	@ 0xff
 8001a86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a9a:	481a      	ldr	r0, [pc, #104]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001a9c:	f002 f872 	bl	8003b84 <HAL_RTC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001aa6:	f000 f9c9 	bl	8001e3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 8001aae:	2359      	movs	r3, #89	@ 0x59
 8001ab0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 8001ab2:	2350      	movs	r3, #80	@ 0x50
 8001ab4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480f      	ldr	r0, [pc, #60]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001ac6:	f002 f8e0 	bl	8003c8a <HAL_RTC_SetTime>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f000 f9b4 	bl	8001e3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <MX_RTC_Init+0xac>)
 8001aec:	f002 f9c5 	bl	8003e7a <HAL_RTC_SetDate>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001af6:	f000 f9a1 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20002308 	.word	0x20002308
 8001b08:	40002800 	.word	0x40002800

08001b0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b096      	sub	sp, #88	@ 0x58
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	615a      	str	r2, [r3, #20]
 8001b3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2220      	movs	r2, #32
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 f824 	bl	8005b92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c48 <MX_TIM1_Init+0x13c>)
 8001b4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b50:	4b3c      	ldr	r3, [pc, #240]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001b5c:	4b39      	ldr	r3, [pc, #228]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b5e:	2259      	movs	r2, #89	@ 0x59
 8001b60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b68:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b35      	ldr	r3, [pc, #212]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b74:	4833      	ldr	r0, [pc, #204]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b76:	f002 fb11 	bl	800419c <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001b80:	f000 f95c 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b88:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b8e:	4619      	mov	r1, r3
 8001b90:	482c      	ldr	r0, [pc, #176]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001b92:	f003 f907 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001b9c:	f000 f94e 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ba0:	4828      	ldr	r0, [pc, #160]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001ba2:	f002 fb4a 	bl	800423a <HAL_TIM_PWM_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001bac:	f000 f946 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4821      	ldr	r0, [pc, #132]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001bc0:	f003 fd9c 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001bca:	f000 f937 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bce:	2360      	movs	r3, #96	@ 0x60
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4814      	ldr	r0, [pc, #80]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001bf4:	f003 f814 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001bfe:	f000 f91d 	bl	8001e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4807      	ldr	r0, [pc, #28]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001c26:	f003 fdd7 	bl	80057d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c30:	f000 f904 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c34:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <MX_TIM1_Init+0x138>)
 8001c36:	f000 fa21 	bl	800207c <HAL_TIM_MspPostInit>

}
 8001c3a:	bf00      	nop
 8001c3c:	3758      	adds	r7, #88	@ 0x58
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20002328 	.word	0x20002328
 8001c48:	40010000 	.word	0x40010000

08001c4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	@ 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2224      	movs	r2, #36	@ 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 ff99 	bl	8005b92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c68:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c6a:	4a21      	ldr	r2, [pc, #132]	@ (8001cf0 <MX_TIM3_Init+0xa4>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c92:	2302      	movs	r3, #2
 8001c94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001cba:	f002 fd8d 	bl	80047d8 <HAL_TIM_Encoder_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f000 f8ba 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001cd6:	f003 fd11 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ce0:	f000 f8ac 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	@ 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20002370 	.word	0x20002370
 8001cf0:	40000400 	.word	0x40000400

08001cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <MX_DMA_Init+0x3c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a0b      	ldr	r2, [pc, #44]	@ (8001d30 <MX_DMA_Init+0x3c>)
 8001d04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <MX_DMA_Init+0x3c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2108      	movs	r1, #8
 8001d1a:	2039      	movs	r0, #57	@ 0x39
 8001d1c:	f000 fc9f 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d20:	2039      	movs	r0, #57	@ 0x39
 8001d22:	f000 fcb8 	bl	8002696 <HAL_NVIC_EnableIRQ>

}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b38      	ldr	r3, [pc, #224]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a37      	ldr	r2, [pc, #220]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b35      	ldr	r3, [pc, #212]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b31      	ldr	r3, [pc, #196]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a30      	ldr	r2, [pc, #192]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b2e      	ldr	r3, [pc, #184]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b2a      	ldr	r3, [pc, #168]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a29      	ldr	r2, [pc, #164]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b27      	ldr	r3, [pc, #156]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a22      	ldr	r2, [pc, #136]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <MX_GPIO_Init+0xfc>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 8001dc0:	481c      	ldr	r0, [pc, #112]	@ (8001e34 <MX_GPIO_Init+0x100>)
 8001dc2:	f001 f9b1 	bl	8003128 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f241 4107 	movw	r1, #5127	@ 0x1407
 8001dcc:	481a      	ldr	r0, [pc, #104]	@ (8001e38 <MX_GPIO_Init+0x104>)
 8001dce:	f001 f9ab 	bl	8003128 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001dd2:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8001dd6:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4812      	ldr	r0, [pc, #72]	@ (8001e34 <MX_GPIO_Init+0x100>)
 8001dec:	f001 f800 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001df0:	f241 4307 	movw	r3, #5127	@ 0x1407
 8001df4:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	480b      	ldr	r0, [pc, #44]	@ (8001e38 <MX_GPIO_Init+0x104>)
 8001e0a:	f000 fff1 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <MX_GPIO_Init+0x104>)
 8001e24:	f000 ffe4 	bl	8002df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	@ 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <Error_Handler+0x8>

08001e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_MspInit+0x90>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	4a20      	ldr	r2, [pc, #128]	@ (8001ed8 <HAL_MspInit+0x90>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <HAL_MspInit+0x90>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <HAL_MspInit+0x90>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <HAL_MspInit+0x90>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <HAL_MspInit+0x90>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2101      	movs	r1, #1
 8001e8a:	f06f 000b 	mvn.w	r0, #11
 8001e8e:	f000 fbe6 	bl	800265e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2102      	movs	r1, #2
 8001e96:	f06f 000a 	mvn.w	r0, #10
 8001e9a:	f000 fbe0 	bl	800265e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	f06f 0009 	mvn.w	r0, #9
 8001ea6:	f000 fbda 	bl	800265e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2104      	movs	r1, #4
 8001eae:	f06f 0004 	mvn.w	r0, #4
 8001eb2:	f000 fbd4 	bl	800265e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2105      	movs	r1, #5
 8001eba:	f06f 0003 	mvn.w	r0, #3
 8001ebe:	f000 fbce 	bl	800265e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2106      	movs	r1, #6
 8001ec6:	f06f 0001 	mvn.w	r0, #1
 8001eca:	f000 fbc8 	bl	800265e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
 8001ef4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	@ (8001f2c <HAL_RTC_MspInit+0x50>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d111      	bne.n	8001f24 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f00:	2302      	movs	r3, #2
 8001f02:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f08:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 fd48 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f1a:	f7ff ff8f 	bl	8001e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f1e:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <HAL_RTC_MspInit+0x54>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40002800 	.word	0x40002800
 8001f30:	42470e3c 	.word	0x42470e3c

08001f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a22      	ldr	r2, [pc, #136]	@ (8001fcc <HAL_TIM_Base_MspInit+0x98>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d13d      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	4a20      	ldr	r2, [pc, #128]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f56:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f64:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xa4>)
 8001f66:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f6a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001f6e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f70:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f72:	2240      	movs	r2, #64	@ 0x40
 8001f74:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f76:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f82:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f8a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f92:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001fa6:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001fa8:	f000 fb90 	bl	80026cc <HAL_DMA_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001fb2:	f7ff ff43 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a06      	ldr	r2, [pc, #24]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fbc:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	200023b8 	.word	0x200023b8
 8001fd8:	40026428 	.word	0x40026428

08001fdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	@ 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8002070 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d133      	bne.n	8002066 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6413      	str	r3, [r2, #64]	@ 0x40
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x98>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002036:	2330      	movs	r3, #48	@ 0x30
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002046:	2302      	movs	r3, #2
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4809      	ldr	r0, [pc, #36]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002052:	f000 fecd 	bl	8002df0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2109      	movs	r1, #9
 800205a:	201d      	movs	r0, #29
 800205c:	f000 faff 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002060:	201d      	movs	r0, #29
 8002062:	f000 fb18 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40000400 	.word	0x40000400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a12      	ldr	r2, [pc, #72]	@ (80020e4 <HAL_TIM_MspPostInit+0x68>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d11e      	bne.n	80020dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <HAL_TIM_MspPostInit+0x6c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	4a10      	ldr	r2, [pc, #64]	@ (80020e8 <HAL_TIM_MspPostInit+0x6c>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ae:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <HAL_TIM_MspPostInit+0x6c>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	4805      	ldr	r0, [pc, #20]	@ (80020ec <HAL_TIM_MspPostInit+0x70>)
 80020d8:	f000 fe8a 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020000 	.word	0x40020000

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <NMI_Handler+0x4>

080020f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <HardFault_Handler+0x4>

08002100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <MemManage_Handler+0x4>

08002108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <UsageFault_Handler+0x4>

08002118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002146:	f000 f96b 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002154:	4802      	ldr	r0, [pc, #8]	@ (8002160 <TIM3_IRQHandler+0x10>)
 8002156:	f002 fc73 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20002370 	.word	0x20002370

08002164 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <DMA2_Stream1_IRQHandler+0x10>)
 800216a:	f000 fbd7 	bl	800291c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200023b8 	.word	0x200023b8

08002178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return 1;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_kill>:

int _kill(int pid, int sig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002192:	f003 fd5f 	bl	8005c54 <__errno>
 8002196:	4603      	mov	r3, r0
 8002198:	2216      	movs	r2, #22
 800219a:	601a      	str	r2, [r3, #0]
  return -1;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_exit>:

void _exit (int status)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffe7 	bl	8002188 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ba:	bf00      	nop
 80021bc:	e7fd      	b.n	80021ba <_exit+0x12>

080021be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e00a      	b.n	80021e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021d0:	f3af 8000 	nop.w
 80021d4:	4601      	mov	r1, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	b2ca      	uxtb	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbf0      	blt.n	80021d0 <_read+0x12>
  }

  return len;
 80021ee:	687b      	ldr	r3, [r7, #4]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e009      	b.n	800221e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	60ba      	str	r2, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbf1      	blt.n	800220a <_write+0x12>
  }
  return len;
 8002226:	687b      	ldr	r3, [r7, #4]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_close>:

int _close(int file)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002258:	605a      	str	r2, [r3, #4]
  return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_isatty>:

int _isatty(int file)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f003 fcc4 	bl	8005c54 <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20020000 	.word	0x20020000
 80022f8:	00010000 	.word	0x00010000
 80022fc:	20002448 	.word	0x20002448
 8002300:	200025a0 	.word	0x200025a0

08002304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <SystemInit+0x20>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <SystemInit+0x20>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800232c:	480d      	ldr	r0, [pc, #52]	@ (8002364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800232e:	490e      	ldr	r1, [pc, #56]	@ (8002368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002330:	4a0e      	ldr	r2, [pc, #56]	@ (800236c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002334:	e002      	b.n	800233c <LoopCopyDataInit>

08002336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233a:	3304      	adds	r3, #4

0800233c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800233c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002340:	d3f9      	bcc.n	8002336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002342:	4a0b      	ldr	r2, [pc, #44]	@ (8002370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002344:	4c0b      	ldr	r4, [pc, #44]	@ (8002374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002348:	e001      	b.n	800234e <LoopFillZerobss>

0800234a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800234c:	3204      	adds	r2, #4

0800234e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002350:	d3fb      	bcc.n	800234a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002352:	f7ff ffd7 	bl	8002304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002356:	f003 fc83 	bl	8005c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235a:	f7ff fa7b 	bl	8001854 <main>
  bx  lr    
 800235e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800236c:	08007090 	.word	0x08007090
  ldr r2, =_sbss
 8002370:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002374:	2000259c 	.word	0x2000259c

08002378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <HAL_Init+0x40>)
 8002386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800238a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <HAL_Init+0x40>)
 8002392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002398:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a07      	ldr	r2, [pc, #28]	@ (80023bc <HAL_Init+0x40>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f000 f94f 	bl	8002648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023aa:	200f      	movs	r0, #15
 80023ac:	f000 f808 	bl	80023c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b0:	f7ff fd4a 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_InitTick+0x54>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_InitTick+0x58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f967 	bl	80026b2 <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00e      	b.n	800240c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d80a      	bhi.n	800240a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f000 f92f 	bl	800265e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4a06      	ldr	r2, [pc, #24]	@ (800241c <HAL_InitTick+0x5c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000005c 	.word	0x2000005c
 8002418:	20000064 	.word	0x20000064
 800241c:	20000060 	.word	0x20000060

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000064 	.word	0x20000064
 8002444:	2000244c 	.word	0x2000244c

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	2000244c 	.word	0x2000244c

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_Delay+0x44>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000064 	.word	0x20000064

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	@ (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	@ (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	@ (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	@ 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	@ 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002614:	d301      	bcc.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e00f      	b.n	800263a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <SysTick_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	210f      	movs	r1, #15
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f7ff ff8e 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262c:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <SysTick_Config+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002632:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <SysTick_Config+0x40>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff29 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002670:	f7ff ff3e 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 8002674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f7ff ff8e 	bl	800259c <NVIC_EncodePriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5d 	bl	8002548 <__NVIC_SetPriority>
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff31 	bl	800250c <__NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffa2 	bl	8002604 <SysTick_Config>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff feb6 	bl	8002448 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e099      	b.n	800281c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002708:	e00f      	b.n	800272a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800270a:	f7ff fe9d 	bl	8002448 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b05      	cmp	r3, #5
 8002716:	d908      	bls.n	800272a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2203      	movs	r2, #3
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e078      	b.n	800281c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e8      	bne.n	800270a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <HAL_DMA_Init+0x158>)
 8002744:	4013      	ands	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	4313      	orrs	r3, r2
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f023 0307 	bic.w	r3, r3, #7
 80027aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d117      	bne.n	80027ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fa91 	bl	8002cf8 <DMA_CheckFifoParam>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2240      	movs	r2, #64	@ 0x40
 80027e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027ea:	2301      	movs	r3, #1
 80027ec:	e016      	b.n	800281c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa48 	bl	8002c8c <DMA_CalcBaseAndBitshift>
 80027fc:	4603      	mov	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	223f      	movs	r2, #63	@ 0x3f
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	f010803f 	.word	0xf010803f

08002828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_DMA_Start_IT+0x26>
 800284a:	2302      	movs	r3, #2
 800284c:	e040      	b.n	80028d0 <HAL_DMA_Start_IT+0xa8>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d12f      	bne.n	80028c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f9da 	bl	8002c30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002880:	223f      	movs	r2, #63	@ 0x3f
 8002882:	409a      	lsls	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0216 	orr.w	r2, r2, #22
 8002896:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e005      	b.n	80028ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d004      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2280      	movs	r2, #128	@ 0x80
 80028f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00c      	b.n	8002910 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2205      	movs	r2, #5
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002928:	4b8e      	ldr	r3, [pc, #568]	@ (8002b64 <HAL_DMA_IRQHandler+0x248>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a8e      	ldr	r2, [pc, #568]	@ (8002b68 <HAL_DMA_IRQHandler+0x24c>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002946:	2208      	movs	r2, #8
 8002948:	409a      	lsls	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01a      	beq.n	8002988 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0204 	bic.w	r2, r2, #4
 800296e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	2208      	movs	r2, #8
 8002976:	409a      	lsls	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	2201      	movs	r2, #1
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d012      	beq.n	80029be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029aa:	2201      	movs	r2, #1
 80029ac:	409a      	lsls	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	2204      	movs	r2, #4
 80029c4:	409a      	lsls	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d012      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e0:	2204      	movs	r2, #4
 80029e2:	409a      	lsls	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ec:	f043 0204 	orr.w	r2, r3, #4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	2210      	movs	r2, #16
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d043      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d03c      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a16:	2210      	movs	r2, #16
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d108      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d024      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
 8002a4a:	e01f      	b.n	8002a8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01b      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	e016      	b.n	8002a8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0208 	bic.w	r2, r2, #8
 8002a7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	2220      	movs	r2, #32
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 808f 	beq.w	8002bbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8087 	beq.w	8002bbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d136      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0216 	bic.w	r2, r2, #22
 8002ad4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ae4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x1da>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0208 	bic.w	r2, r2, #8
 8002b04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0a:	223f      	movs	r2, #63	@ 0x3f
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d07e      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
        }
        return;
 8002b32:	e079      	b.n	8002c28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01d      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d031      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	e02c      	b.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
 8002b62:	bf00      	nop
 8002b64:	2000005c 	.word	0x2000005c
 8002b68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
 8002b7c:	e01e      	b.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10f      	bne.n	8002bac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0210 	bic.w	r2, r2, #16
 8002b9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d032      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d022      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2205      	movs	r2, #5
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	3301      	adds	r3, #1
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d307      	bcc.n	8002c04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f2      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x2cc>
 8002c02:	e000      	b.n	8002c06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
 8002c26:	e000      	b.n	8002c2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c28:	bf00      	nop
    }
  }
}
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b40      	cmp	r3, #64	@ 0x40
 8002c5c:	d108      	bne.n	8002c70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c6e:	e007      	b.n	8002c80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	3b10      	subs	r3, #16
 8002c9c:	4a14      	ldr	r2, [pc, #80]	@ (8002cf0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ca6:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d909      	bls.n	8002cce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	1d1a      	adds	r2, r3, #4
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ccc:	e007      	b.n	8002cde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	aaaaaaab 	.word	0xaaaaaaab
 8002cf4:	08006f98 	.word	0x08006f98

08002cf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d11f      	bne.n	8002d52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d856      	bhi.n	8002dc6 <DMA_CheckFifoParam+0xce>
 8002d18:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <DMA_CheckFifoParam+0x28>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002d43 	.word	0x08002d43
 8002d28:	08002d31 	.word	0x08002d31
 8002d2c:	08002dc7 	.word	0x08002dc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d046      	beq.n	8002dca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d40:	e043      	b.n	8002dca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d4a:	d140      	bne.n	8002dce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d50:	e03d      	b.n	8002dce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d5a:	d121      	bne.n	8002da0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d837      	bhi.n	8002dd2 <DMA_CheckFifoParam+0xda>
 8002d62:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <DMA_CheckFifoParam+0x70>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002d7f 	.word	0x08002d7f
 8002d70:	08002d79 	.word	0x08002d79
 8002d74:	08002d91 	.word	0x08002d91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7c:	e030      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d025      	beq.n	8002dd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8e:	e022      	b.n	8002dd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d98:	d11f      	bne.n	8002dda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d9e:	e01c      	b.n	8002dda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d903      	bls.n	8002dae <DMA_CheckFifoParam+0xb6>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d003      	beq.n	8002db4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dac:	e018      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
      break;
 8002db2:	e015      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc4:	e00b      	b.n	8002dde <DMA_CheckFifoParam+0xe6>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e00a      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e008      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e006      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e004      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e002      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dde:	bf00      	nop
    }
  } 
  
  return status; 
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	e159      	b.n	80030c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	f040 8148 	bne.w	80030ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d005      	beq.n	8002e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d130      	bne.n	8002ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e78:	2201      	movs	r2, #1
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 0201 	and.w	r2, r3, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d017      	beq.n	8002ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	2203      	movs	r2, #3
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d123      	bne.n	8002f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	08da      	lsrs	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3208      	adds	r2, #8
 8002ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	220f      	movs	r2, #15
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	08da      	lsrs	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3208      	adds	r2, #8
 8002f2e:	69b9      	ldr	r1, [r7, #24]
 8002f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0203 	and.w	r2, r3, #3
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80a2 	beq.w	80030ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b57      	ldr	r3, [pc, #348]	@ (80030d8 <HAL_GPIO_Init+0x2e8>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	4a56      	ldr	r2, [pc, #344]	@ (80030d8 <HAL_GPIO_Init+0x2e8>)
 8002f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f86:	4b54      	ldr	r3, [pc, #336]	@ (80030d8 <HAL_GPIO_Init+0x2e8>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f92:	4a52      	ldr	r2, [pc, #328]	@ (80030dc <HAL_GPIO_Init+0x2ec>)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a49      	ldr	r2, [pc, #292]	@ (80030e0 <HAL_GPIO_Init+0x2f0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d019      	beq.n	8002ff2 <HAL_GPIO_Init+0x202>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a48      	ldr	r2, [pc, #288]	@ (80030e4 <HAL_GPIO_Init+0x2f4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_GPIO_Init+0x1fe>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a47      	ldr	r2, [pc, #284]	@ (80030e8 <HAL_GPIO_Init+0x2f8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00d      	beq.n	8002fea <HAL_GPIO_Init+0x1fa>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a46      	ldr	r2, [pc, #280]	@ (80030ec <HAL_GPIO_Init+0x2fc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <HAL_GPIO_Init+0x1f6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a45      	ldr	r2, [pc, #276]	@ (80030f0 <HAL_GPIO_Init+0x300>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_GPIO_Init+0x1f2>
 8002fde:	2304      	movs	r3, #4
 8002fe0:	e008      	b.n	8002ff4 <HAL_GPIO_Init+0x204>
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x204>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e004      	b.n	8002ff4 <HAL_GPIO_Init+0x204>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_Init+0x204>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_GPIO_Init+0x204>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f002 0203 	and.w	r2, r2, #3
 8002ffa:	0092      	lsls	r2, r2, #2
 8002ffc:	4093      	lsls	r3, r2
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003004:	4935      	ldr	r1, [pc, #212]	@ (80030dc <HAL_GPIO_Init+0x2ec>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003012:	4b38      	ldr	r3, [pc, #224]	@ (80030f4 <HAL_GPIO_Init+0x304>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003036:	4a2f      	ldr	r2, [pc, #188]	@ (80030f4 <HAL_GPIO_Init+0x304>)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800303c:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <HAL_GPIO_Init+0x304>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003060:	4a24      	ldr	r2, [pc, #144]	@ (80030f4 <HAL_GPIO_Init+0x304>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003066:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <HAL_GPIO_Init+0x304>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800308a:	4a1a      	ldr	r2, [pc, #104]	@ (80030f4 <HAL_GPIO_Init+0x304>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003090:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <HAL_GPIO_Init+0x304>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b4:	4a0f      	ldr	r2, [pc, #60]	@ (80030f4 <HAL_GPIO_Init+0x304>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b0f      	cmp	r3, #15
 80030c4:	f67f aea2 	bls.w	8002e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	3724      	adds	r7, #36	@ 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40013800 	.word	0x40013800
 80030e0:	40020000 	.word	0x40020000
 80030e4:	40020400 	.word	0x40020400
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020c00 	.word	0x40020c00
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40013c00 	.word	0x40013c00

080030f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
 8003114:	e001      	b.n	800311a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003144:	e003      	b.n	800314e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	619a      	str	r2, [r3, #24]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e267      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d075      	beq.n	8003266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317a:	4b88      	ldr	r3, [pc, #544]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d00c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b85      	ldr	r3, [pc, #532]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318e:	2b08      	cmp	r3, #8
 8003190:	d112      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b82      	ldr	r3, [pc, #520]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b7e      	ldr	r3, [pc, #504]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x108>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e242      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x74>
 80031c2:	4b76      	ldr	r3, [pc, #472]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a75      	ldr	r2, [pc, #468]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x98>
 80031da:	4b70      	ldr	r3, [pc, #448]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6f      	ldr	r2, [pc, #444]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b6d      	ldr	r3, [pc, #436]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a6c      	ldr	r2, [pc, #432]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031f4:	4b69      	ldr	r3, [pc, #420]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a68      	ldr	r2, [pc, #416]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b66      	ldr	r3, [pc, #408]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a65      	ldr	r2, [pc, #404]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7ff f918 	bl	8002448 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7ff f914 	bl	8002448 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e207      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b5b      	ldr	r3, [pc, #364]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xc0>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7ff f904 	bl	8002448 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003244:	f7ff f900 	bl	8002448 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1f3      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	4b51      	ldr	r3, [pc, #324]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0xe8>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d063      	beq.n	800333a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003272:	4b4a      	ldr	r3, [pc, #296]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327e:	4b47      	ldr	r3, [pc, #284]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003286:	2b08      	cmp	r3, #8
 8003288:	d11c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328a:	4b44      	ldr	r3, [pc, #272]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	4b41      	ldr	r3, [pc, #260]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_RCC_OscConfig+0x152>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e1c7      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ae:	4b3b      	ldr	r3, [pc, #236]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4937      	ldr	r1, [pc, #220]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	e03a      	b.n	800333a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032cc:	4b34      	ldr	r3, [pc, #208]	@ (80033a0 <HAL_RCC_OscConfig+0x244>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7ff f8b9 	bl	8002448 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032da:	f7ff f8b5 	bl	8002448 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e1a8      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ec:	4b2b      	ldr	r3, [pc, #172]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f8:	4b28      	ldr	r3, [pc, #160]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4925      	ldr	r1, [pc, #148]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e015      	b.n	800333a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330e:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <HAL_RCC_OscConfig+0x244>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7ff f898 	bl	8002448 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331c:	f7ff f894 	bl	8002448 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e187      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d036      	beq.n	80033b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334e:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <HAL_RCC_OscConfig+0x248>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7ff f878 	bl	8002448 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335c:	f7ff f874 	bl	8002448 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e167      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x200>
 800337a:	e01b      	b.n	80033b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337c:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_RCC_OscConfig+0x248>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7ff f861 	bl	8002448 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	e00e      	b.n	80033a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338a:	f7ff f85d 	bl	8002448 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d907      	bls.n	80033a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e150      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
 800339c:	40023800 	.word	0x40023800
 80033a0:	42470000 	.word	0x42470000
 80033a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	4b88      	ldr	r3, [pc, #544]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ea      	bne.n	800338a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8097 	beq.w	80034f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c6:	4b81      	ldr	r3, [pc, #516]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	4b7d      	ldr	r3, [pc, #500]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	4a7c      	ldr	r2, [pc, #496]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e2:	4b7a      	ldr	r3, [pc, #488]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	4b77      	ldr	r3, [pc, #476]	@ (80035d0 <HAL_RCC_OscConfig+0x474>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fe:	4b74      	ldr	r3, [pc, #464]	@ (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a73      	ldr	r2, [pc, #460]	@ (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7ff f81d 	bl	8002448 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7ff f819 	bl	8002448 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e10c      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b6a      	ldr	r3, [pc, #424]	@ (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x2ea>
 8003438:	4b64      	ldr	r3, [pc, #400]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343c:	4a63      	ldr	r2, [pc, #396]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	@ 0x70
 8003444:	e01c      	b.n	8003480 <HAL_RCC_OscConfig+0x324>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b05      	cmp	r3, #5
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x30c>
 800344e:	4b5f      	ldr	r3, [pc, #380]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	4a5e      	ldr	r2, [pc, #376]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6713      	str	r3, [r2, #112]	@ 0x70
 800345a:	4b5c      	ldr	r3, [pc, #368]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345e:	4a5b      	ldr	r2, [pc, #364]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6713      	str	r3, [r2, #112]	@ 0x70
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0x324>
 8003468:	4b58      	ldr	r3, [pc, #352]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346c:	4a57      	ldr	r2, [pc, #348]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	@ 0x70
 8003474:	4b55      	ldr	r3, [pc, #340]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003478:	4a54      	ldr	r2, [pc, #336]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800347a:	f023 0304 	bic.w	r3, r3, #4
 800347e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7fe ffde 	bl	8002448 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003490:	f7fe ffda 	bl	8002448 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0cb      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	4b49      	ldr	r3, [pc, #292]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ee      	beq.n	8003490 <HAL_RCC_OscConfig+0x334>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b4:	f7fe ffc8 	bl	8002448 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fe ffc4 	bl	8002448 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0b5      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	4b3e      	ldr	r3, [pc, #248]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ee      	bne.n	80034bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	4a38      	ldr	r2, [pc, #224]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a1 	beq.w	800363c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fa:	4b34      	ldr	r3, [pc, #208]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b08      	cmp	r3, #8
 8003504:	d05c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d141      	bne.n	8003592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe ff98 	bl	8002448 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe ff94 	bl	8002448 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e087      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b27      	ldr	r3, [pc, #156]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	3b01      	subs	r3, #1
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	491b      	ldr	r1, [pc, #108]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe ff6d 	bl	8002448 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe ff69 	bl	8002448 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e05c      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003584:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x416>
 8003590:	e054      	b.n	800363c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe ff56 	bl	8002448 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe ff52 	bl	8002448 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e045      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x444>
 80035be:	e03d      	b.n	800363c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e038      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40007000 	.word	0x40007000
 80035d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_RCC_OscConfig+0x4ec>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d028      	beq.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d121      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d11a      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800360e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003610:	4293      	cmp	r3, r2
 8003612:	d111      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0cc      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4b68      	ldr	r3, [pc, #416]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d90c      	bls.n	8003688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b65      	ldr	r3, [pc, #404]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b63      	ldr	r3, [pc, #396]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0b8      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a0:	4b59      	ldr	r3, [pc, #356]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a58      	ldr	r2, [pc, #352]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b8:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a52      	ldr	r2, [pc, #328]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b50      	ldr	r3, [pc, #320]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	494d      	ldr	r1, [pc, #308]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d044      	beq.n	800376c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	4b47      	ldr	r3, [pc, #284]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d119      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d003      	beq.n	800370a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003706:	2b03      	cmp	r3, #3
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370a:	4b3f      	ldr	r3, [pc, #252]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e06f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371a:	4b3b      	ldr	r3, [pc, #236]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e067      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b37      	ldr	r3, [pc, #220]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4934      	ldr	r1, [pc, #208]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800373c:	f7fe fe84 	bl	8002448 <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fe fe80 	bl	8002448 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b2b      	ldr	r3, [pc, #172]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800376c:	4b25      	ldr	r3, [pc, #148]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d20c      	bcs.n	8003794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b22      	ldr	r3, [pc, #136]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e032      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a0:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4916      	ldr	r1, [pc, #88]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037be:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	490e      	ldr	r1, [pc, #56]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037d2:	f000 f821 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	490a      	ldr	r1, [pc, #40]	@ (800380c <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	5ccb      	ldrb	r3, [r1, r3]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ee:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe fde4 	bl	80023c0 <HAL_InitTick>

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023c00 	.word	0x40023c00
 8003808:	40023800 	.word	0x40023800
 800380c:	08006f88 	.word	0x08006f88
 8003810:	2000005c 	.word	0x2000005c
 8003814:	20000060 	.word	0x20000060

08003818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800381c:	b090      	sub	sp, #64	@ 0x40
 800381e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	637b      	str	r3, [r7, #52]	@ 0x34
 8003824:	2300      	movs	r3, #0
 8003826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003828:	2300      	movs	r3, #0
 800382a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003830:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x180>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b08      	cmp	r3, #8
 800383a:	d00d      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x40>
 800383c:	2b08      	cmp	r3, #8
 800383e:	f200 80a1 	bhi.w	8003984 <HAL_RCC_GetSysClockFreq+0x16c>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x34>
 8003846:	2b04      	cmp	r3, #4
 8003848:	d003      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x3a>
 800384a:	e09b      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4b53      	ldr	r3, [pc, #332]	@ (800399c <HAL_RCC_GetSysClockFreq+0x184>)
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003850:	e09b      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003852:	4b53      	ldr	r3, [pc, #332]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003854:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003856:	e098      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003858:	4b4f      	ldr	r3, [pc, #316]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x180>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003860:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003862:	4b4d      	ldr	r3, [pc, #308]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x180>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d028      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386e:	4b4a      	ldr	r3, [pc, #296]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x180>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	099b      	lsrs	r3, r3, #6
 8003874:	2200      	movs	r2, #0
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	627a      	str	r2, [r7, #36]	@ 0x24
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003880:	2100      	movs	r1, #0
 8003882:	4b47      	ldr	r3, [pc, #284]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003884:	fb03 f201 	mul.w	r2, r3, r1
 8003888:	2300      	movs	r3, #0
 800388a:	fb00 f303 	mul.w	r3, r0, r3
 800388e:	4413      	add	r3, r2
 8003890:	4a43      	ldr	r2, [pc, #268]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003892:	fba0 1202 	umull	r1, r2, r0, r2
 8003896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003898:	460a      	mov	r2, r1
 800389a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800389c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800389e:	4413      	add	r3, r2
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a4:	2200      	movs	r2, #0
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	61fa      	str	r2, [r7, #28]
 80038aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038b2:	f7fc fce5 	bl	8000280 <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4613      	mov	r3, r2
 80038bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038be:	e053      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c0:	4b35      	ldr	r3, [pc, #212]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	2200      	movs	r2, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	617a      	str	r2, [r7, #20]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038d2:	f04f 0b00 	mov.w	fp, #0
 80038d6:	4652      	mov	r2, sl
 80038d8:	465b      	mov	r3, fp
 80038da:	f04f 0000 	mov.w	r0, #0
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	0159      	lsls	r1, r3, #5
 80038e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e8:	0150      	lsls	r0, r2, #5
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	ebb2 080a 	subs.w	r8, r2, sl
 80038f2:	eb63 090b 	sbc.w	r9, r3, fp
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003902:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003906:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800390a:	ebb2 0408 	subs.w	r4, r2, r8
 800390e:	eb63 0509 	sbc.w	r5, r3, r9
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	00eb      	lsls	r3, r5, #3
 800391c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003920:	00e2      	lsls	r2, r4, #3
 8003922:	4614      	mov	r4, r2
 8003924:	461d      	mov	r5, r3
 8003926:	eb14 030a 	adds.w	r3, r4, sl
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	eb45 030b 	adc.w	r3, r5, fp
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800393e:	4629      	mov	r1, r5
 8003940:	028b      	lsls	r3, r1, #10
 8003942:	4621      	mov	r1, r4
 8003944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003948:	4621      	mov	r1, r4
 800394a:	028a      	lsls	r2, r1, #10
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003952:	2200      	movs	r2, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	60fa      	str	r2, [r7, #12]
 8003958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800395c:	f7fc fc90 	bl	8000280 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4613      	mov	r3, r2
 8003966:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x180>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	3301      	adds	r3, #1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003982:	e002      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_GetSysClockFreq+0x184>)
 8003986:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800398c:	4618      	mov	r0, r3
 800398e:	3740      	adds	r7, #64	@ 0x40
 8003990:	46bd      	mov	sp, r7
 8003992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	00f42400 	.word	0x00f42400
 80039a0:	016e3600 	.word	0x016e3600

080039a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d038      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039cc:	4b68      	ldr	r3, [pc, #416]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039d2:	f7fe fd39 	bl	8002448 <HAL_GetTick>
 80039d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039da:	f7fe fd35 	bl	8002448 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e0bd      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ec:	4b61      	ldr	r3, [pc, #388]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	071b      	lsls	r3, r3, #28
 8003a0a:	495a      	ldr	r1, [pc, #360]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a12:	4b57      	ldr	r3, [pc, #348]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a18:	f7fe fd16 	bl	8002448 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a20:	f7fe fd12 	bl	8002448 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e09a      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a32:	4b50      	ldr	r3, [pc, #320]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8083 	beq.w	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	4b48      	ldr	r3, [pc, #288]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	4a47      	ldr	r2, [pc, #284]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5c:	4b45      	ldr	r3, [pc, #276]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a68:	4b43      	ldr	r3, [pc, #268]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a42      	ldr	r2, [pc, #264]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a72:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a74:	f7fe fce8 	bl	8002448 <HAL_GetTick>
 8003a78:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fe fce4 	bl	8002448 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e06c      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a9a:	4b36      	ldr	r3, [pc, #216]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02f      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d028      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ace:	4a29      	ldr	r2, [pc, #164]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ad4:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d114      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fcb2 	bl	8002448 <HAL_GetTick>
 8003ae4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fe fcae 	bl	8002448 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e034      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ee      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b16:	d10d      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003b18:	4b16      	ldr	r3, [pc, #88]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2c:	4911      	ldr	r1, [pc, #68]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
 8003b32:	e005      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003b34:	4b0f      	ldr	r3, [pc, #60]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a0e      	ldr	r2, [pc, #56]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b3e:	6093      	str	r3, [r2, #8]
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4c:	4909      	ldr	r1, [pc, #36]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7d1a      	ldrb	r2, [r3, #20]
 8003b62:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003b64:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	42470068 	.word	0x42470068
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42470e40 	.word	0x42470e40
 8003b80:	424711e0 	.word	0x424711e0

08003b84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e073      	b.n	8003c82 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7f5b      	ldrb	r3, [r3, #29]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe f996 	bl	8001edc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d055      	beq.n	8003c70 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	22ca      	movs	r2, #202	@ 0xca
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2253      	movs	r2, #83	@ 0x53
 8003bd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fa49 	bl	800406c <RTC_EnterInitMode>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d12c      	bne.n	8003c3e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bf6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6899      	ldr	r1, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6919      	ldr	r1, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	041a      	lsls	r2, r3, #16
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fa50 	bl	80040da <RTC_ExitInitMode>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d110      	bne.n	8003c66 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	22ff      	movs	r2, #255	@ 0xff
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c6e:	e001      	b.n	8003c74 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c8a:	b590      	push	{r4, r7, lr}
 8003c8c:	b087      	sub	sp, #28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	7f1b      	ldrb	r3, [r3, #28]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RTC_SetTime+0x1c>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e087      	b.n	8003db6 <HAL_RTC_SetTime+0x12c>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d126      	bne.n	8003d06 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fa27 	bl	8004124 <RTC_ByteToBcd2>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fa20 	bl	8004124 <RTC_ByteToBcd2>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ce8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	789b      	ldrb	r3, [r3, #2]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fa18 	bl	8004124 <RTC_ByteToBcd2>
 8003cf4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cf6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	78db      	ldrb	r3, [r3, #3]
 8003cfe:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e018      	b.n	8003d38 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2200      	movs	r2, #0
 8003d18:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d26:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003d2c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	78db      	ldrb	r3, [r3, #3]
 8003d32:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	22ca      	movs	r2, #202	@ 0xca
 8003d3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2253      	movs	r2, #83	@ 0x53
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f98f 	bl	800406c <RTC_EnterInitMode>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d120      	bne.n	8003d9a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003d62:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003d66:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f9a2 	bl	80040da <RTC_ExitInitMode>
 8003d96:	4603      	mov	r3, r0
 8003d98:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	22ff      	movs	r2, #255	@ 0xff
 8003dac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]

  return status;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd90      	pop	{r4, r7, pc}

08003dbe <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b086      	sub	sp, #24
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003df0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003df4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	0d9b      	lsrs	r3, r3, #22
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11a      	bne.n	8003e70 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f98e 	bl	8004160 <RTC_Bcd2ToByte>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f985 	bl	8004160 <RTC_Bcd2ToByte>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	789b      	ldrb	r3, [r3, #2]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f97c 	bl	8004160 <RTC_Bcd2ToByte>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e7a:	b590      	push	{r4, r7, lr}
 8003e7c:	b087      	sub	sp, #28
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	7f1b      	ldrb	r3, [r3, #28]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_RTC_SetDate+0x1c>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e071      	b.n	8003f7a <HAL_RTC_SetDate+0x100>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_RTC_SetDate+0x4c>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	f023 0310 	bic.w	r3, r3, #16
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	330a      	adds	r3, #10
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d11c      	bne.n	8003f06 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	78db      	ldrb	r3, [r3, #3]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f927 	bl	8004124 <RTC_ByteToBcd2>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	785b      	ldrb	r3, [r3, #1]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f920 	bl	8004124 <RTC_ByteToBcd2>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ee8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	789b      	ldrb	r3, [r3, #2]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f918 	bl	8004124 <RTC_ByteToBcd2>
 8003ef4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ef6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e00e      	b.n	8003f24 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	78db      	ldrb	r3, [r3, #3]
 8003f0a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f12:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003f18:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	22ca      	movs	r2, #202	@ 0xca
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2253      	movs	r2, #83	@ 0x53
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f899 	bl	800406c <RTC_EnterInitMode>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10c      	bne.n	8003f5e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f52:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f8c0 	bl	80040da <RTC_ExitInitMode>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	22ff      	movs	r2, #255	@ 0xff
 8003f70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]

  return status;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd90      	pop	{r4, r7, pc}

08003f82 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f9c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	0b5b      	lsrs	r3, r3, #13
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d11a      	bne.n	8004016 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	78db      	ldrb	r3, [r3, #3]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 f8bb 	bl	8004160 <RTC_Bcd2ToByte>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	785b      	ldrb	r3, [r3, #1]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f8b2 	bl	8004160 <RTC_Bcd2ToByte>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	789b      	ldrb	r3, [r3, #2]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f8a9 	bl	8004160 <RTC_Bcd2ToByte>
 800400e:	4603      	mov	r3, r0
 8004010:	461a      	mov	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0d      	ldr	r2, [pc, #52]	@ (8004068 <HAL_RTC_WaitForSynchro+0x48>)
 8004032:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004034:	f7fe fa08 	bl	8002448 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800403a:	e009      	b.n	8004050 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800403c:	f7fe fa04 	bl	8002448 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800404a:	d901      	bls.n	8004050 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e007      	b.n	8004060 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ee      	beq.n	800403c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	00013f5f 	.word	0x00013f5f

0800406c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d122      	bne.n	80040d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004098:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800409a:	f7fe f9d5 	bl	8002448 <HAL_GetTick>
 800409e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040a0:	e00c      	b.n	80040bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040a2:	f7fe f9d1 	bl	8002448 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040b0:	d904      	bls.n	80040bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2204      	movs	r2, #4
 80040b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <RTC_EnterInitMode+0x64>
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d1e8      	bne.n	80040a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff8b 	bl	8004020 <HAL_RTC_WaitForSynchro>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2204      	movs	r2, #4
 8004114:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004132:	e005      	b.n	8004140 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3301      	adds	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	3b0a      	subs	r3, #10
 800413e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	2b09      	cmp	r3, #9
 8004144:	d8f6      	bhi.n	8004134 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	b2da      	uxtb	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	4313      	orrs	r3, r2
 8004152:	b2db      	uxtb	r3, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4413      	add	r3, r2
 800418e:	b2db      	uxtb	r3, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e041      	b.n	8004232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd feb6 	bl	8001f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 ffb6 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e041      	b.n	80042d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f839 	bl	80042d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 ff67 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e022      	b.n	800435e <HAL_TIM_PWM_Start_DMA+0x72>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b04      	cmp	r3, #4
 800431c:	d109      	bne.n	8004332 <HAL_TIM_PWM_Start_DMA+0x46>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e015      	b.n	800435e <HAL_TIM_PWM_Start_DMA+0x72>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d109      	bne.n	800434c <HAL_TIM_PWM_Start_DMA+0x60>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e008      	b.n	800435e <HAL_TIM_PWM_Start_DMA+0x72>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	e15d      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <HAL_TIM_PWM_Start_DMA+0x94>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e022      	b.n	80043c6 <HAL_TIM_PWM_Start_DMA+0xda>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b04      	cmp	r3, #4
 8004384:	d109      	bne.n	800439a <HAL_TIM_PWM_Start_DMA+0xae>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e015      	b.n	80043c6 <HAL_TIM_PWM_Start_DMA+0xda>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d109      	bne.n	80043b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e008      	b.n	80043c6 <HAL_TIM_PWM_Start_DMA+0xda>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d024      	beq.n	8004414 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_TIM_PWM_Start_DMA+0xea>
 80043d0:	887b      	ldrh	r3, [r7, #2]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e123      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start_DMA+0xfe>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e8:	e016      	b.n	8004418 <HAL_TIM_PWM_Start_DMA+0x12c>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d104      	bne.n	80043fa <HAL_TIM_PWM_Start_DMA+0x10e>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f8:	e00e      	b.n	8004418 <HAL_TIM_PWM_Start_DMA+0x12c>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d104      	bne.n	800440a <HAL_TIM_PWM_Start_DMA+0x11e>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004408:	e006      	b.n	8004418 <HAL_TIM_PWM_Start_DMA+0x12c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004412:	e001      	b.n	8004418 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e104      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	f200 80ae 	bhi.w	800457c <HAL_TIM_PWM_Start_DMA+0x290>
 8004420:	a201      	add	r2, pc, #4	@ (adr r2, 8004428 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	0800445d 	.word	0x0800445d
 800442c:	0800457d 	.word	0x0800457d
 8004430:	0800457d 	.word	0x0800457d
 8004434:	0800457d 	.word	0x0800457d
 8004438:	080044a5 	.word	0x080044a5
 800443c:	0800457d 	.word	0x0800457d
 8004440:	0800457d 	.word	0x0800457d
 8004444:	0800457d 	.word	0x0800457d
 8004448:	080044ed 	.word	0x080044ed
 800444c:	0800457d 	.word	0x0800457d
 8004450:	0800457d 	.word	0x0800457d
 8004454:	0800457d 	.word	0x0800457d
 8004458:	08004535 	.word	0x08004535
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	4a72      	ldr	r2, [pc, #456]	@ (800462c <HAL_TIM_PWM_Start_DMA+0x340>)
 8004462:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	4a71      	ldr	r2, [pc, #452]	@ (8004630 <HAL_TIM_PWM_Start_DMA+0x344>)
 800446a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	4a70      	ldr	r2, [pc, #448]	@ (8004634 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004472:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3334      	adds	r3, #52	@ 0x34
 8004480:	461a      	mov	r2, r3
 8004482:	887b      	ldrh	r3, [r7, #2]
 8004484:	f7fe f9d0 	bl	8002828 <HAL_DMA_Start_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e0c7      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a0:	60da      	str	r2, [r3, #12]
      break;
 80044a2:	e06e      	b.n	8004582 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	4a60      	ldr	r2, [pc, #384]	@ (800462c <HAL_TIM_PWM_Start_DMA+0x340>)
 80044aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	4a5f      	ldr	r2, [pc, #380]	@ (8004630 <HAL_TIM_PWM_Start_DMA+0x344>)
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004634 <HAL_TIM_PWM_Start_DMA+0x348>)
 80044ba:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3338      	adds	r3, #56	@ 0x38
 80044c8:	461a      	mov	r2, r3
 80044ca:	887b      	ldrh	r3, [r7, #2]
 80044cc:	f7fe f9ac 	bl	8002828 <HAL_DMA_Start_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0a3      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044e8:	60da      	str	r2, [r3, #12]
      break;
 80044ea:	e04a      	b.n	8004582 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	4a4e      	ldr	r2, [pc, #312]	@ (800462c <HAL_TIM_PWM_Start_DMA+0x340>)
 80044f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004630 <HAL_TIM_PWM_Start_DMA+0x344>)
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	4a4c      	ldr	r2, [pc, #304]	@ (8004634 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004502:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	333c      	adds	r3, #60	@ 0x3c
 8004510:	461a      	mov	r2, r3
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	f7fe f988 	bl	8002828 <HAL_DMA_Start_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e07f      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004530:	60da      	str	r2, [r3, #12]
      break;
 8004532:	e026      	b.n	8004582 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	4a3c      	ldr	r2, [pc, #240]	@ (800462c <HAL_TIM_PWM_Start_DMA+0x340>)
 800453a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	4a3b      	ldr	r2, [pc, #236]	@ (8004630 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004548:	4a3a      	ldr	r2, [pc, #232]	@ (8004634 <HAL_TIM_PWM_Start_DMA+0x348>)
 800454a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3340      	adds	r3, #64	@ 0x40
 8004558:	461a      	mov	r2, r3
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	f7fe f964 	bl	8002828 <HAL_DMA_Start_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e05b      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004578:	60da      	str	r2, [r3, #12]
      break;
 800457a:	e002      	b.n	8004582 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
      break;
 8004580:	bf00      	nop
  }

  if (status == HAL_OK)
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d14b      	bne.n	8004620 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2201      	movs	r2, #1
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f001 f88d 	bl	80056b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a27      	ldr	r2, [pc, #156]	@ (8004638 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a20      	ldr	r2, [pc, #128]	@ (8004638 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_TIM_PWM_Start_DMA+0x300>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c2:	d013      	beq.n	80045ec <HAL_TIM_PWM_Start_DMA+0x300>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1c      	ldr	r2, [pc, #112]	@ (800463c <HAL_TIM_PWM_Start_DMA+0x350>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_TIM_PWM_Start_DMA+0x300>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <HAL_TIM_PWM_Start_DMA+0x354>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_TIM_PWM_Start_DMA+0x300>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a19      	ldr	r2, [pc, #100]	@ (8004644 <HAL_TIM_PWM_Start_DMA+0x358>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIM_PWM_Start_DMA+0x300>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a18      	ldr	r2, [pc, #96]	@ (8004648 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d111      	bne.n	8004610 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d010      	beq.n	8004620 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	e007      	b.n	8004620 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004620:	7dfb      	ldrb	r3, [r7, #23]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	0800503d 	.word	0x0800503d
 8004630:	080050e5 	.word	0x080050e5
 8004634:	08004fab 	.word	0x08004fab
 8004638:	40010000 	.word	0x40010000
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40014000 	.word	0x40014000

0800464c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d855      	bhi.n	800470c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004660:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800469d 	.word	0x0800469d
 800466c:	0800470d 	.word	0x0800470d
 8004670:	0800470d 	.word	0x0800470d
 8004674:	0800470d 	.word	0x0800470d
 8004678:	080046b9 	.word	0x080046b9
 800467c:	0800470d 	.word	0x0800470d
 8004680:	0800470d 	.word	0x0800470d
 8004684:	0800470d 	.word	0x0800470d
 8004688:	080046d5 	.word	0x080046d5
 800468c:	0800470d 	.word	0x0800470d
 8004690:	0800470d 	.word	0x0800470d
 8004694:	0800470d 	.word	0x0800470d
 8004698:	080046f1 	.word	0x080046f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80046aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe f911 	bl	80028d8 <HAL_DMA_Abort_IT>
      break;
 80046b6:	e02c      	b.n	8004712 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe f903 	bl	80028d8 <HAL_DMA_Abort_IT>
      break;
 80046d2:	e01e      	b.n	8004712 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe f8f5 	bl	80028d8 <HAL_DMA_Abort_IT>
      break;
 80046ee:	e010      	b.n	8004712 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe f8e7 	bl	80028d8 <HAL_DMA_Abort_IT>
      break;
 800470a:	e002      	b.n	8004712 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      break;
 8004710:	bf00      	nop
  }

  if (status == HAL_OK)
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d157      	bne.n	80047c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 ffc5 	bl	80056b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2a      	ldr	r2, [pc, #168]	@ (80047d4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d117      	bne.n	8004760 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	f241 1311 	movw	r3, #4369	@ 0x1111
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10f      	bne.n	8004760 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	f240 4344 	movw	r3, #1092	@ 0x444
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800475e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	f241 1311 	movw	r3, #4369	@ 0x1111
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10f      	bne.n	8004790 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	f240 4344 	movw	r3, #1092	@ 0x444
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800479e:	e013      	b.n	80047c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d104      	bne.n	80047b0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047ae:	e00b      	b.n	80047c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d104      	bne.n	80047c0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047be:	e003      	b.n	80047c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000

080047d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e097      	b.n	800491c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fd fbeb 	bl	8001fdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800481c:	f023 0307 	bic.w	r3, r3, #7
 8004820:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f000 fc8d 	bl	800514c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	4313      	orrs	r3, r2
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004878:	f023 030c 	bic.w	r3, r3, #12
 800487c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004884:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	4313      	orrs	r3, r2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	011a      	lsls	r2, r3, #4
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	031b      	lsls	r3, r3, #12
 80048a8:	4313      	orrs	r3, r2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	4313      	orrs	r3, r2
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004934:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800493c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004944:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800494c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d110      	bne.n	8004976 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d102      	bne.n	8004960 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800495a:	7b7b      	ldrb	r3, [r7, #13]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d001      	beq.n	8004964 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e069      	b.n	8004a38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004974:	e031      	b.n	80049da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d110      	bne.n	800499e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800497c:	7bbb      	ldrb	r3, [r7, #14]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d102      	bne.n	8004988 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004982:	7b3b      	ldrb	r3, [r7, #12]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d001      	beq.n	800498c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e055      	b.n	8004a38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800499c:	e01d      	b.n	80049da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d108      	bne.n	80049b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049aa:	7b7b      	ldrb	r3, [r7, #13]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049b0:	7b3b      	ldrb	r3, [r7, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d001      	beq.n	80049ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e03e      	b.n	8004a38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_TIM_Encoder_Start+0xc4>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d008      	beq.n	80049f8 <HAL_TIM_Encoder_Start+0xd4>
 80049e6:	e00f      	b.n	8004a08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fe5d 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 80049f6:	e016      	b.n	8004a26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2201      	movs	r2, #1
 80049fe:	2104      	movs	r1, #4
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fe55 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 8004a06:	e00e      	b.n	8004a26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fe4d 	bl	80056b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	2104      	movs	r1, #4
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fe46 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 8004a24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d020      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0202 	mvn.w	r2, #2
 8004a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa65 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa57 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fc f8f3 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0204 	mvn.w	r2, #4
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa3f 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa31 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fc f8cd 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d020      	beq.n	8004b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0208 	mvn.w	r2, #8
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2204      	movs	r2, #4
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa19 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa0b 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7fc f8a7 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d020      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0210 	mvn.w	r2, #16
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f9f3 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9e5 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fc f881 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0201 	mvn.w	r2, #1
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f9c3 	bl	8004f32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fe60 	bl	8005890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9c7 	bl	8004f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0220 	mvn.w	r2, #32
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fe32 	bl	800587c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0ae      	b.n	8004d9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	f200 809f 	bhi.w	8004d8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004d8d 	.word	0x08004d8d
 8004c5c:	08004d8d 	.word	0x08004d8d
 8004c60:	08004d8d 	.word	0x08004d8d
 8004c64:	08004cc9 	.word	0x08004cc9
 8004c68:	08004d8d 	.word	0x08004d8d
 8004c6c:	08004d8d 	.word	0x08004d8d
 8004c70:	08004d8d 	.word	0x08004d8d
 8004c74:	08004d0b 	.word	0x08004d0b
 8004c78:	08004d8d 	.word	0x08004d8d
 8004c7c:	08004d8d 	.word	0x08004d8d
 8004c80:	08004d8d 	.word	0x08004d8d
 8004c84:	08004d4b 	.word	0x08004d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fae8 	bl	8005264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0208 	orr.w	r2, r2, #8
 8004ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0204 	bic.w	r2, r2, #4
 8004cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6999      	ldr	r1, [r3, #24]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	619a      	str	r2, [r3, #24]
      break;
 8004cc6:	e064      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fb2e 	bl	8005330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6999      	ldr	r1, [r3, #24]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	619a      	str	r2, [r3, #24]
      break;
 8004d08:	e043      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fb79 	bl	8005408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0208 	orr.w	r2, r2, #8
 8004d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0204 	bic.w	r2, r2, #4
 8004d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69d9      	ldr	r1, [r3, #28]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	61da      	str	r2, [r3, #28]
      break;
 8004d48:	e023      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fbc3 	bl	80054dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69d9      	ldr	r1, [r3, #28]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	021a      	lsls	r2, r3, #8
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	61da      	str	r2, [r3, #28]
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0b4      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x186>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df8:	d03e      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0xd4>
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dfe:	f200 8087 	bhi.w	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e06:	f000 8086 	beq.w	8004f16 <HAL_TIM_ConfigClockSource+0x172>
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0e:	d87f      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b70      	cmp	r3, #112	@ 0x70
 8004e12:	d01a      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0xa6>
 8004e14:	2b70      	cmp	r3, #112	@ 0x70
 8004e16:	d87b      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b60      	cmp	r3, #96	@ 0x60
 8004e1a:	d050      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x11a>
 8004e1c:	2b60      	cmp	r3, #96	@ 0x60
 8004e1e:	d877      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b50      	cmp	r3, #80	@ 0x50
 8004e22:	d03c      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0xfa>
 8004e24:	2b50      	cmp	r3, #80	@ 0x50
 8004e26:	d873      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b40      	cmp	r3, #64	@ 0x40
 8004e2a:	d058      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x13a>
 8004e2c:	2b40      	cmp	r3, #64	@ 0x40
 8004e2e:	d86f      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b30      	cmp	r3, #48	@ 0x30
 8004e32:	d064      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x15a>
 8004e34:	2b30      	cmp	r3, #48	@ 0x30
 8004e36:	d86b      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d060      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x15a>
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d867      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d05c      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x15a>
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d05a      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x15a>
 8004e48:	e062      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5a:	f000 fc09 	bl	8005670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	609a      	str	r2, [r3, #8]
      break;
 8004e76:	e04f      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e88:	f000 fbf2 	bl	8005670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e9a:	609a      	str	r2, [r3, #8]
      break;
 8004e9c:	e03c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 fb66 	bl	800557c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2150      	movs	r1, #80	@ 0x50
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fbbf 	bl	800563a <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e02c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 fb85 	bl	80055da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2160      	movs	r1, #96	@ 0x60
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fbaf 	bl	800563a <TIM_ITRx_SetConfig>
      break;
 8004edc:	e01c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	461a      	mov	r2, r3
 8004eec:	f000 fb46 	bl	800557c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2140      	movs	r1, #64	@ 0x40
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fb9f 	bl	800563a <TIM_ITRx_SetConfig>
      break;
 8004efc:	e00c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f000 fb96 	bl	800563a <TIM_ITRx_SetConfig>
      break;
 8004f0e:	e003      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
      break;
 8004f14:	e000      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d107      	bne.n	8004fd2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd0:	e02a      	b.n	8005028 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d107      	bne.n	8004fec <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fea:	e01d      	b.n	8005028 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d107      	bne.n	8005006 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005004:	e010      	b.n	8005028 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d107      	bne.n	8005020 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2208      	movs	r2, #8
 8005014:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800501e:	e003      	b.n	8005028 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ffb4 	bl	8004f96 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d10b      	bne.n	800506c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d136      	bne.n	80050d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800506a:	e031      	b.n	80050d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	429a      	cmp	r2, r3
 8005074:	d10b      	bne.n	800508e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2202      	movs	r2, #2
 800507a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d125      	bne.n	80050d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800508c:	e020      	b.n	80050d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d10b      	bne.n	80050b0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2204      	movs	r2, #4
 800509c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d114      	bne.n	80050d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050ae:	e00f      	b.n	80050d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d10a      	bne.n	80050d0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2208      	movs	r2, #8
 80050be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f7fb fdd7 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d103      	bne.n	8005104 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	771a      	strb	r2, [r3, #28]
 8005102:	e019      	b.n	8005138 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d103      	bne.n	8005116 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2202      	movs	r2, #2
 8005112:	771a      	strb	r2, [r3, #28]
 8005114:	e010      	b.n	8005138 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d103      	bne.n	8005128 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2204      	movs	r2, #4
 8005124:	771a      	strb	r2, [r3, #28]
 8005126:	e007      	b.n	8005138 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d102      	bne.n	8005138 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2208      	movs	r2, #8
 8005136:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff ff18 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3a      	ldr	r2, [pc, #232]	@ (8005248 <TIM_Base_SetConfig+0xfc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00f      	beq.n	8005184 <TIM_Base_SetConfig+0x38>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516a:	d00b      	beq.n	8005184 <TIM_Base_SetConfig+0x38>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a37      	ldr	r2, [pc, #220]	@ (800524c <TIM_Base_SetConfig+0x100>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_Base_SetConfig+0x38>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a36      	ldr	r2, [pc, #216]	@ (8005250 <TIM_Base_SetConfig+0x104>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_Base_SetConfig+0x38>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a35      	ldr	r2, [pc, #212]	@ (8005254 <TIM_Base_SetConfig+0x108>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d108      	bne.n	8005196 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2b      	ldr	r2, [pc, #172]	@ (8005248 <TIM_Base_SetConfig+0xfc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d01b      	beq.n	80051d6 <TIM_Base_SetConfig+0x8a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a4:	d017      	beq.n	80051d6 <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a28      	ldr	r2, [pc, #160]	@ (800524c <TIM_Base_SetConfig+0x100>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a27      	ldr	r2, [pc, #156]	@ (8005250 <TIM_Base_SetConfig+0x104>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00f      	beq.n	80051d6 <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a26      	ldr	r2, [pc, #152]	@ (8005254 <TIM_Base_SetConfig+0x108>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00b      	beq.n	80051d6 <TIM_Base_SetConfig+0x8a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a25      	ldr	r2, [pc, #148]	@ (8005258 <TIM_Base_SetConfig+0x10c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <TIM_Base_SetConfig+0x8a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a24      	ldr	r2, [pc, #144]	@ (800525c <TIM_Base_SetConfig+0x110>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a23      	ldr	r2, [pc, #140]	@ (8005260 <TIM_Base_SetConfig+0x114>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d108      	bne.n	80051e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a0e      	ldr	r2, [pc, #56]	@ (8005248 <TIM_Base_SetConfig+0xfc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d103      	bne.n	800521c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f023 0201 	bic.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	611a      	str	r2, [r3, #16]
  }
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800

08005264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f023 0201 	bic.w	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f023 0302 	bic.w	r3, r3, #2
 80052ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a1c      	ldr	r2, [pc, #112]	@ (800532c <TIM_OC1_SetConfig+0xc8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10c      	bne.n	80052da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0308 	bic.w	r3, r3, #8
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 0304 	bic.w	r3, r3, #4
 80052d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a13      	ldr	r2, [pc, #76]	@ (800532c <TIM_OC1_SetConfig+0xc8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d111      	bne.n	8005306 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40010000 	.word	0x40010000

08005330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0210 	bic.w	r2, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0320 	bic.w	r3, r3, #32
 800537a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1e      	ldr	r2, [pc, #120]	@ (8005404 <TIM_OC2_SetConfig+0xd4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10d      	bne.n	80053ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a15      	ldr	r2, [pc, #84]	@ (8005404 <TIM_OC2_SetConfig+0xd4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d113      	bne.n	80053dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000

08005408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1d      	ldr	r2, [pc, #116]	@ (80054d8 <TIM_OC3_SetConfig+0xd0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a14      	ldr	r2, [pc, #80]	@ (80054d8 <TIM_OC3_SetConfig+0xd0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d113      	bne.n	80054b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40010000 	.word	0x40010000

080054dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	031b      	lsls	r3, r3, #12
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a10      	ldr	r2, [pc, #64]	@ (8005578 <TIM_OC4_SetConfig+0x9c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d109      	bne.n	8005550 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	019b      	lsls	r3, r3, #6
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40010000 	.word	0x40010000

0800557c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f023 030a 	bic.w	r3, r3, #10
 80055b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055da:	b480      	push	{r7}
 80055dc:	b087      	sub	sp, #28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f023 0210 	bic.w	r2, r3, #16
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	031b      	lsls	r3, r3, #12
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005616:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	f043 0307 	orr.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	609a      	str	r2, [r3, #8]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800568a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	021a      	lsls	r2, r3, #8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	431a      	orrs	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4313      	orrs	r3, r2
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	609a      	str	r2, [r3, #8]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	2201      	movs	r2, #1
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	401a      	ands	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	fa01 f303 	lsl.w	r3, r1, r3
 80056e8:	431a      	orrs	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e050      	b.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1c      	ldr	r2, [pc, #112]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005760:	d013      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a18      	ldr	r2, [pc, #96]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a15      	ldr	r2, [pc, #84]	@ (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a13      	ldr	r2, [pc, #76]	@ (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10c      	bne.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4313      	orrs	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40014000 	.word	0x40014000

080057d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e03d      	b.n	8005870 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <rand>:
 80058a4:	4b16      	ldr	r3, [pc, #88]	@ (8005900 <rand+0x5c>)
 80058a6:	b510      	push	{r4, lr}
 80058a8:	681c      	ldr	r4, [r3, #0]
 80058aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80058ac:	b9b3      	cbnz	r3, 80058dc <rand+0x38>
 80058ae:	2018      	movs	r0, #24
 80058b0:	f000 fa74 	bl	8005d9c <malloc>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6320      	str	r0, [r4, #48]	@ 0x30
 80058b8:	b920      	cbnz	r0, 80058c4 <rand+0x20>
 80058ba:	4b12      	ldr	r3, [pc, #72]	@ (8005904 <rand+0x60>)
 80058bc:	4812      	ldr	r0, [pc, #72]	@ (8005908 <rand+0x64>)
 80058be:	2152      	movs	r1, #82	@ 0x52
 80058c0:	f000 fa04 	bl	8005ccc <__assert_func>
 80058c4:	4911      	ldr	r1, [pc, #68]	@ (800590c <rand+0x68>)
 80058c6:	4b12      	ldr	r3, [pc, #72]	@ (8005910 <rand+0x6c>)
 80058c8:	e9c0 1300 	strd	r1, r3, [r0]
 80058cc:	4b11      	ldr	r3, [pc, #68]	@ (8005914 <rand+0x70>)
 80058ce:	6083      	str	r3, [r0, #8]
 80058d0:	230b      	movs	r3, #11
 80058d2:	8183      	strh	r3, [r0, #12]
 80058d4:	2100      	movs	r1, #0
 80058d6:	2001      	movs	r0, #1
 80058d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80058dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80058de:	480e      	ldr	r0, [pc, #56]	@ (8005918 <rand+0x74>)
 80058e0:	690b      	ldr	r3, [r1, #16]
 80058e2:	694c      	ldr	r4, [r1, #20]
 80058e4:	4a0d      	ldr	r2, [pc, #52]	@ (800591c <rand+0x78>)
 80058e6:	4358      	muls	r0, r3
 80058e8:	fb02 0004 	mla	r0, r2, r4, r0
 80058ec:	fba3 3202 	umull	r3, r2, r3, r2
 80058f0:	3301      	adds	r3, #1
 80058f2:	eb40 0002 	adc.w	r0, r0, r2
 80058f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80058fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80058fe:	bd10      	pop	{r4, pc}
 8005900:	20000074 	.word	0x20000074
 8005904:	08006fa0 	.word	0x08006fa0
 8005908:	08006fb7 	.word	0x08006fb7
 800590c:	abcd330e 	.word	0xabcd330e
 8005910:	e66d1234 	.word	0xe66d1234
 8005914:	0005deec 	.word	0x0005deec
 8005918:	5851f42d 	.word	0x5851f42d
 800591c:	4c957f2d 	.word	0x4c957f2d

08005920 <std>:
 8005920:	2300      	movs	r3, #0
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
 8005926:	e9c0 3300 	strd	r3, r3, [r0]
 800592a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800592e:	6083      	str	r3, [r0, #8]
 8005930:	8181      	strh	r1, [r0, #12]
 8005932:	6643      	str	r3, [r0, #100]	@ 0x64
 8005934:	81c2      	strh	r2, [r0, #14]
 8005936:	6183      	str	r3, [r0, #24]
 8005938:	4619      	mov	r1, r3
 800593a:	2208      	movs	r2, #8
 800593c:	305c      	adds	r0, #92	@ 0x5c
 800593e:	f000 f928 	bl	8005b92 <memset>
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <std+0x58>)
 8005944:	6263      	str	r3, [r4, #36]	@ 0x24
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <std+0x5c>)
 8005948:	62a3      	str	r3, [r4, #40]	@ 0x28
 800594a:	4b0d      	ldr	r3, [pc, #52]	@ (8005980 <std+0x60>)
 800594c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800594e:	4b0d      	ldr	r3, [pc, #52]	@ (8005984 <std+0x64>)
 8005950:	6323      	str	r3, [r4, #48]	@ 0x30
 8005952:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <std+0x68>)
 8005954:	6224      	str	r4, [r4, #32]
 8005956:	429c      	cmp	r4, r3
 8005958:	d006      	beq.n	8005968 <std+0x48>
 800595a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800595e:	4294      	cmp	r4, r2
 8005960:	d002      	beq.n	8005968 <std+0x48>
 8005962:	33d0      	adds	r3, #208	@ 0xd0
 8005964:	429c      	cmp	r4, r3
 8005966:	d105      	bne.n	8005974 <std+0x54>
 8005968:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005970:	f000 b99a 	b.w	8005ca8 <__retarget_lock_init_recursive>
 8005974:	bd10      	pop	{r4, pc}
 8005976:	bf00      	nop
 8005978:	08005b0d 	.word	0x08005b0d
 800597c:	08005b2f 	.word	0x08005b2f
 8005980:	08005b67 	.word	0x08005b67
 8005984:	08005b8b 	.word	0x08005b8b
 8005988:	20002450 	.word	0x20002450

0800598c <stdio_exit_handler>:
 800598c:	4a02      	ldr	r2, [pc, #8]	@ (8005998 <stdio_exit_handler+0xc>)
 800598e:	4903      	ldr	r1, [pc, #12]	@ (800599c <stdio_exit_handler+0x10>)
 8005990:	4803      	ldr	r0, [pc, #12]	@ (80059a0 <stdio_exit_handler+0x14>)
 8005992:	f000 b869 	b.w	8005a68 <_fwalk_sglue>
 8005996:	bf00      	nop
 8005998:	20000068 	.word	0x20000068
 800599c:	080065dd 	.word	0x080065dd
 80059a0:	20000078 	.word	0x20000078

080059a4 <cleanup_stdio>:
 80059a4:	6841      	ldr	r1, [r0, #4]
 80059a6:	4b0c      	ldr	r3, [pc, #48]	@ (80059d8 <cleanup_stdio+0x34>)
 80059a8:	4299      	cmp	r1, r3
 80059aa:	b510      	push	{r4, lr}
 80059ac:	4604      	mov	r4, r0
 80059ae:	d001      	beq.n	80059b4 <cleanup_stdio+0x10>
 80059b0:	f000 fe14 	bl	80065dc <_fflush_r>
 80059b4:	68a1      	ldr	r1, [r4, #8]
 80059b6:	4b09      	ldr	r3, [pc, #36]	@ (80059dc <cleanup_stdio+0x38>)
 80059b8:	4299      	cmp	r1, r3
 80059ba:	d002      	beq.n	80059c2 <cleanup_stdio+0x1e>
 80059bc:	4620      	mov	r0, r4
 80059be:	f000 fe0d 	bl	80065dc <_fflush_r>
 80059c2:	68e1      	ldr	r1, [r4, #12]
 80059c4:	4b06      	ldr	r3, [pc, #24]	@ (80059e0 <cleanup_stdio+0x3c>)
 80059c6:	4299      	cmp	r1, r3
 80059c8:	d004      	beq.n	80059d4 <cleanup_stdio+0x30>
 80059ca:	4620      	mov	r0, r4
 80059cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d0:	f000 be04 	b.w	80065dc <_fflush_r>
 80059d4:	bd10      	pop	{r4, pc}
 80059d6:	bf00      	nop
 80059d8:	20002450 	.word	0x20002450
 80059dc:	200024b8 	.word	0x200024b8
 80059e0:	20002520 	.word	0x20002520

080059e4 <global_stdio_init.part.0>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <global_stdio_init.part.0+0x30>)
 80059e8:	4c0b      	ldr	r4, [pc, #44]	@ (8005a18 <global_stdio_init.part.0+0x34>)
 80059ea:	4a0c      	ldr	r2, [pc, #48]	@ (8005a1c <global_stdio_init.part.0+0x38>)
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	4620      	mov	r0, r4
 80059f0:	2200      	movs	r2, #0
 80059f2:	2104      	movs	r1, #4
 80059f4:	f7ff ff94 	bl	8005920 <std>
 80059f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059fc:	2201      	movs	r2, #1
 80059fe:	2109      	movs	r1, #9
 8005a00:	f7ff ff8e 	bl	8005920 <std>
 8005a04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a08:	2202      	movs	r2, #2
 8005a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a0e:	2112      	movs	r1, #18
 8005a10:	f7ff bf86 	b.w	8005920 <std>
 8005a14:	20002588 	.word	0x20002588
 8005a18:	20002450 	.word	0x20002450
 8005a1c:	0800598d 	.word	0x0800598d

08005a20 <__sfp_lock_acquire>:
 8005a20:	4801      	ldr	r0, [pc, #4]	@ (8005a28 <__sfp_lock_acquire+0x8>)
 8005a22:	f000 b942 	b.w	8005caa <__retarget_lock_acquire_recursive>
 8005a26:	bf00      	nop
 8005a28:	20002591 	.word	0x20002591

08005a2c <__sfp_lock_release>:
 8005a2c:	4801      	ldr	r0, [pc, #4]	@ (8005a34 <__sfp_lock_release+0x8>)
 8005a2e:	f000 b93d 	b.w	8005cac <__retarget_lock_release_recursive>
 8005a32:	bf00      	nop
 8005a34:	20002591 	.word	0x20002591

08005a38 <__sinit>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	f7ff fff0 	bl	8005a20 <__sfp_lock_acquire>
 8005a40:	6a23      	ldr	r3, [r4, #32]
 8005a42:	b11b      	cbz	r3, 8005a4c <__sinit+0x14>
 8005a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a48:	f7ff bff0 	b.w	8005a2c <__sfp_lock_release>
 8005a4c:	4b04      	ldr	r3, [pc, #16]	@ (8005a60 <__sinit+0x28>)
 8005a4e:	6223      	str	r3, [r4, #32]
 8005a50:	4b04      	ldr	r3, [pc, #16]	@ (8005a64 <__sinit+0x2c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f5      	bne.n	8005a44 <__sinit+0xc>
 8005a58:	f7ff ffc4 	bl	80059e4 <global_stdio_init.part.0>
 8005a5c:	e7f2      	b.n	8005a44 <__sinit+0xc>
 8005a5e:	bf00      	nop
 8005a60:	080059a5 	.word	0x080059a5
 8005a64:	20002588 	.word	0x20002588

08005a68 <_fwalk_sglue>:
 8005a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	4688      	mov	r8, r1
 8005a70:	4614      	mov	r4, r2
 8005a72:	2600      	movs	r6, #0
 8005a74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a78:	f1b9 0901 	subs.w	r9, r9, #1
 8005a7c:	d505      	bpl.n	8005a8a <_fwalk_sglue+0x22>
 8005a7e:	6824      	ldr	r4, [r4, #0]
 8005a80:	2c00      	cmp	r4, #0
 8005a82:	d1f7      	bne.n	8005a74 <_fwalk_sglue+0xc>
 8005a84:	4630      	mov	r0, r6
 8005a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d907      	bls.n	8005aa0 <_fwalk_sglue+0x38>
 8005a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a94:	3301      	adds	r3, #1
 8005a96:	d003      	beq.n	8005aa0 <_fwalk_sglue+0x38>
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	47c0      	blx	r8
 8005a9e:	4306      	orrs	r6, r0
 8005aa0:	3568      	adds	r5, #104	@ 0x68
 8005aa2:	e7e9      	b.n	8005a78 <_fwalk_sglue+0x10>

08005aa4 <sniprintf>:
 8005aa4:	b40c      	push	{r2, r3}
 8005aa6:	b530      	push	{r4, r5, lr}
 8005aa8:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <sniprintf+0x64>)
 8005aaa:	1e0c      	subs	r4, r1, #0
 8005aac:	681d      	ldr	r5, [r3, #0]
 8005aae:	b09d      	sub	sp, #116	@ 0x74
 8005ab0:	da08      	bge.n	8005ac4 <sniprintf+0x20>
 8005ab2:	238b      	movs	r3, #139	@ 0x8b
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aba:	b01d      	add	sp, #116	@ 0x74
 8005abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ac0:	b002      	add	sp, #8
 8005ac2:	4770      	bx	lr
 8005ac4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ac8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005acc:	bf14      	ite	ne
 8005ace:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ad2:	4623      	moveq	r3, r4
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	9307      	str	r3, [sp, #28]
 8005ad8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005adc:	9002      	str	r0, [sp, #8]
 8005ade:	9006      	str	r0, [sp, #24]
 8005ae0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ae4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ae6:	ab21      	add	r3, sp, #132	@ 0x84
 8005ae8:	a902      	add	r1, sp, #8
 8005aea:	4628      	mov	r0, r5
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	f000 fa67 	bl	8005fc0 <_svfiprintf_r>
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	bfbc      	itt	lt
 8005af6:	238b      	movlt	r3, #139	@ 0x8b
 8005af8:	602b      	strlt	r3, [r5, #0]
 8005afa:	2c00      	cmp	r4, #0
 8005afc:	d0dd      	beq.n	8005aba <sniprintf+0x16>
 8005afe:	9b02      	ldr	r3, [sp, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	e7d9      	b.n	8005aba <sniprintf+0x16>
 8005b06:	bf00      	nop
 8005b08:	20000074 	.word	0x20000074

08005b0c <__sread>:
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	460c      	mov	r4, r1
 8005b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b14:	f000 f87a 	bl	8005c0c <_read_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	bfab      	itete	ge
 8005b1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b20:	181b      	addge	r3, r3, r0
 8005b22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b26:	bfac      	ite	ge
 8005b28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b2a:	81a3      	strhlt	r3, [r4, #12]
 8005b2c:	bd10      	pop	{r4, pc}

08005b2e <__swrite>:
 8005b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b32:	461f      	mov	r7, r3
 8005b34:	898b      	ldrh	r3, [r1, #12]
 8005b36:	05db      	lsls	r3, r3, #23
 8005b38:	4605      	mov	r5, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	d505      	bpl.n	8005b4c <__swrite+0x1e>
 8005b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b44:	2302      	movs	r3, #2
 8005b46:	2200      	movs	r2, #0
 8005b48:	f000 f84e 	bl	8005be8 <_lseek_r>
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	4632      	mov	r2, r6
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b62:	f000 b865 	b.w	8005c30 <_write_r>

08005b66 <__sseek>:
 8005b66:	b510      	push	{r4, lr}
 8005b68:	460c      	mov	r4, r1
 8005b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6e:	f000 f83b 	bl	8005be8 <_lseek_r>
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	bf15      	itete	ne
 8005b78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b82:	81a3      	strheq	r3, [r4, #12]
 8005b84:	bf18      	it	ne
 8005b86:	81a3      	strhne	r3, [r4, #12]
 8005b88:	bd10      	pop	{r4, pc}

08005b8a <__sclose>:
 8005b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8e:	f000 b81b 	b.w	8005bc8 <_close_r>

08005b92 <memset>:
 8005b92:	4402      	add	r2, r0
 8005b94:	4603      	mov	r3, r0
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d100      	bne.n	8005b9c <memset+0xa>
 8005b9a:	4770      	bx	lr
 8005b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba0:	e7f9      	b.n	8005b96 <memset+0x4>

08005ba2 <strncpy>:
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	3901      	subs	r1, #1
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	b132      	cbz	r2, 8005bb8 <strncpy+0x16>
 8005baa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005bae:	f803 4b01 	strb.w	r4, [r3], #1
 8005bb2:	3a01      	subs	r2, #1
 8005bb4:	2c00      	cmp	r4, #0
 8005bb6:	d1f7      	bne.n	8005ba8 <strncpy+0x6>
 8005bb8:	441a      	add	r2, r3
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <strncpy+0x20>
 8005bc0:	bd10      	pop	{r4, pc}
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <strncpy+0x1a>

08005bc8 <_close_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4d06      	ldr	r5, [pc, #24]	@ (8005be4 <_close_r+0x1c>)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	f7fc fb2c 	bl	8002230 <_close>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_close_r+0x1a>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_close_r+0x1a>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	2000258c 	.word	0x2000258c

08005be8 <_lseek_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d07      	ldr	r5, [pc, #28]	@ (8005c08 <_lseek_r+0x20>)
 8005bec:	4604      	mov	r4, r0
 8005bee:	4608      	mov	r0, r1
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7fc fb41 	bl	800227e <_lseek>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_lseek_r+0x1e>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_lseek_r+0x1e>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	2000258c 	.word	0x2000258c

08005c0c <_read_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d07      	ldr	r5, [pc, #28]	@ (8005c2c <_read_r+0x20>)
 8005c10:	4604      	mov	r4, r0
 8005c12:	4608      	mov	r0, r1
 8005c14:	4611      	mov	r1, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7fc facf 	bl	80021be <_read>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_read_r+0x1e>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_read_r+0x1e>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	2000258c 	.word	0x2000258c

08005c30 <_write_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d07      	ldr	r5, [pc, #28]	@ (8005c50 <_write_r+0x20>)
 8005c34:	4604      	mov	r4, r0
 8005c36:	4608      	mov	r0, r1
 8005c38:	4611      	mov	r1, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fc fada 	bl	80021f8 <_write>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_write_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_write_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	2000258c 	.word	0x2000258c

08005c54 <__errno>:
 8005c54:	4b01      	ldr	r3, [pc, #4]	@ (8005c5c <__errno+0x8>)
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000074 	.word	0x20000074

08005c60 <__libc_init_array>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	4d0d      	ldr	r5, [pc, #52]	@ (8005c98 <__libc_init_array+0x38>)
 8005c64:	4c0d      	ldr	r4, [pc, #52]	@ (8005c9c <__libc_init_array+0x3c>)
 8005c66:	1b64      	subs	r4, r4, r5
 8005c68:	10a4      	asrs	r4, r4, #2
 8005c6a:	2600      	movs	r6, #0
 8005c6c:	42a6      	cmp	r6, r4
 8005c6e:	d109      	bne.n	8005c84 <__libc_init_array+0x24>
 8005c70:	4d0b      	ldr	r5, [pc, #44]	@ (8005ca0 <__libc_init_array+0x40>)
 8005c72:	4c0c      	ldr	r4, [pc, #48]	@ (8005ca4 <__libc_init_array+0x44>)
 8005c74:	f000 fff0 	bl	8006c58 <_init>
 8005c78:	1b64      	subs	r4, r4, r5
 8005c7a:	10a4      	asrs	r4, r4, #2
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	42a6      	cmp	r6, r4
 8005c80:	d105      	bne.n	8005c8e <__libc_init_array+0x2e>
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c88:	4798      	blx	r3
 8005c8a:	3601      	adds	r6, #1
 8005c8c:	e7ee      	b.n	8005c6c <__libc_init_array+0xc>
 8005c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c92:	4798      	blx	r3
 8005c94:	3601      	adds	r6, #1
 8005c96:	e7f2      	b.n	8005c7e <__libc_init_array+0x1e>
 8005c98:	08007088 	.word	0x08007088
 8005c9c:	08007088 	.word	0x08007088
 8005ca0:	08007088 	.word	0x08007088
 8005ca4:	0800708c 	.word	0x0800708c

08005ca8 <__retarget_lock_init_recursive>:
 8005ca8:	4770      	bx	lr

08005caa <__retarget_lock_acquire_recursive>:
 8005caa:	4770      	bx	lr

08005cac <__retarget_lock_release_recursive>:
 8005cac:	4770      	bx	lr

08005cae <memcpy>:
 8005cae:	440a      	add	r2, r1
 8005cb0:	4291      	cmp	r1, r2
 8005cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cb6:	d100      	bne.n	8005cba <memcpy+0xc>
 8005cb8:	4770      	bx	lr
 8005cba:	b510      	push	{r4, lr}
 8005cbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cc4:	4291      	cmp	r1, r2
 8005cc6:	d1f9      	bne.n	8005cbc <memcpy+0xe>
 8005cc8:	bd10      	pop	{r4, pc}
	...

08005ccc <__assert_func>:
 8005ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cce:	4614      	mov	r4, r2
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b09      	ldr	r3, [pc, #36]	@ (8005cf8 <__assert_func+0x2c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	68d8      	ldr	r0, [r3, #12]
 8005cda:	b954      	cbnz	r4, 8005cf2 <__assert_func+0x26>
 8005cdc:	4b07      	ldr	r3, [pc, #28]	@ (8005cfc <__assert_func+0x30>)
 8005cde:	461c      	mov	r4, r3
 8005ce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ce4:	9100      	str	r1, [sp, #0]
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	4905      	ldr	r1, [pc, #20]	@ (8005d00 <__assert_func+0x34>)
 8005cea:	f000 fc9f 	bl	800662c <fiprintf>
 8005cee:	f000 fcd9 	bl	80066a4 <abort>
 8005cf2:	4b04      	ldr	r3, [pc, #16]	@ (8005d04 <__assert_func+0x38>)
 8005cf4:	e7f4      	b.n	8005ce0 <__assert_func+0x14>
 8005cf6:	bf00      	nop
 8005cf8:	20000074 	.word	0x20000074
 8005cfc:	0800704a 	.word	0x0800704a
 8005d00:	0800701c 	.word	0x0800701c
 8005d04:	0800700f 	.word	0x0800700f

08005d08 <_free_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d041      	beq.n	8005d94 <_free_r+0x8c>
 8005d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d14:	1f0c      	subs	r4, r1, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfb8      	it	lt
 8005d1a:	18e4      	addlt	r4, r4, r3
 8005d1c:	f000 f8e8 	bl	8005ef0 <__malloc_lock>
 8005d20:	4a1d      	ldr	r2, [pc, #116]	@ (8005d98 <_free_r+0x90>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	b933      	cbnz	r3, 8005d34 <_free_r+0x2c>
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	6014      	str	r4, [r2, #0]
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d30:	f000 b8e4 	b.w	8005efc <__malloc_unlock>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d908      	bls.n	8005d4a <_free_r+0x42>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	1821      	adds	r1, r4, r0
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	bf01      	itttt	eq
 8005d40:	6819      	ldreq	r1, [r3, #0]
 8005d42:	685b      	ldreq	r3, [r3, #4]
 8005d44:	1809      	addeq	r1, r1, r0
 8005d46:	6021      	streq	r1, [r4, #0]
 8005d48:	e7ed      	b.n	8005d26 <_free_r+0x1e>
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b10b      	cbz	r3, 8005d54 <_free_r+0x4c>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d9fa      	bls.n	8005d4a <_free_r+0x42>
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	1850      	adds	r0, r2, r1
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	d10b      	bne.n	8005d74 <_free_r+0x6c>
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	4401      	add	r1, r0
 8005d60:	1850      	adds	r0, r2, r1
 8005d62:	4283      	cmp	r3, r0
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	d1e0      	bne.n	8005d2a <_free_r+0x22>
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	6053      	str	r3, [r2, #4]
 8005d6e:	4408      	add	r0, r1
 8005d70:	6010      	str	r0, [r2, #0]
 8005d72:	e7da      	b.n	8005d2a <_free_r+0x22>
 8005d74:	d902      	bls.n	8005d7c <_free_r+0x74>
 8005d76:	230c      	movs	r3, #12
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	e7d6      	b.n	8005d2a <_free_r+0x22>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	1821      	adds	r1, r4, r0
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf04      	itt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	6063      	str	r3, [r4, #4]
 8005d8a:	bf04      	itt	eq
 8005d8c:	1809      	addeq	r1, r1, r0
 8005d8e:	6021      	streq	r1, [r4, #0]
 8005d90:	6054      	str	r4, [r2, #4]
 8005d92:	e7ca      	b.n	8005d2a <_free_r+0x22>
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	bf00      	nop
 8005d98:	20002598 	.word	0x20002598

08005d9c <malloc>:
 8005d9c:	4b02      	ldr	r3, [pc, #8]	@ (8005da8 <malloc+0xc>)
 8005d9e:	4601      	mov	r1, r0
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f000 b825 	b.w	8005df0 <_malloc_r>
 8005da6:	bf00      	nop
 8005da8:	20000074 	.word	0x20000074

08005dac <sbrk_aligned>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	4e0f      	ldr	r6, [pc, #60]	@ (8005dec <sbrk_aligned+0x40>)
 8005db0:	460c      	mov	r4, r1
 8005db2:	6831      	ldr	r1, [r6, #0]
 8005db4:	4605      	mov	r5, r0
 8005db6:	b911      	cbnz	r1, 8005dbe <sbrk_aligned+0x12>
 8005db8:	f000 fc64 	bl	8006684 <_sbrk_r>
 8005dbc:	6030      	str	r0, [r6, #0]
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 fc5f 	bl	8006684 <_sbrk_r>
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	d103      	bne.n	8005dd2 <sbrk_aligned+0x26>
 8005dca:	f04f 34ff 	mov.w	r4, #4294967295
 8005dce:	4620      	mov	r0, r4
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
 8005dd2:	1cc4      	adds	r4, r0, #3
 8005dd4:	f024 0403 	bic.w	r4, r4, #3
 8005dd8:	42a0      	cmp	r0, r4
 8005dda:	d0f8      	beq.n	8005dce <sbrk_aligned+0x22>
 8005ddc:	1a21      	subs	r1, r4, r0
 8005dde:	4628      	mov	r0, r5
 8005de0:	f000 fc50 	bl	8006684 <_sbrk_r>
 8005de4:	3001      	adds	r0, #1
 8005de6:	d1f2      	bne.n	8005dce <sbrk_aligned+0x22>
 8005de8:	e7ef      	b.n	8005dca <sbrk_aligned+0x1e>
 8005dea:	bf00      	nop
 8005dec:	20002594 	.word	0x20002594

08005df0 <_malloc_r>:
 8005df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df4:	1ccd      	adds	r5, r1, #3
 8005df6:	f025 0503 	bic.w	r5, r5, #3
 8005dfa:	3508      	adds	r5, #8
 8005dfc:	2d0c      	cmp	r5, #12
 8005dfe:	bf38      	it	cc
 8005e00:	250c      	movcc	r5, #12
 8005e02:	2d00      	cmp	r5, #0
 8005e04:	4606      	mov	r6, r0
 8005e06:	db01      	blt.n	8005e0c <_malloc_r+0x1c>
 8005e08:	42a9      	cmp	r1, r5
 8005e0a:	d904      	bls.n	8005e16 <_malloc_r+0x26>
 8005e0c:	230c      	movs	r3, #12
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	2000      	movs	r0, #0
 8005e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005eec <_malloc_r+0xfc>
 8005e1a:	f000 f869 	bl	8005ef0 <__malloc_lock>
 8005e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e22:	461c      	mov	r4, r3
 8005e24:	bb44      	cbnz	r4, 8005e78 <_malloc_r+0x88>
 8005e26:	4629      	mov	r1, r5
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f7ff ffbf 	bl	8005dac <sbrk_aligned>
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	4604      	mov	r4, r0
 8005e32:	d158      	bne.n	8005ee6 <_malloc_r+0xf6>
 8005e34:	f8d8 4000 	ldr.w	r4, [r8]
 8005e38:	4627      	mov	r7, r4
 8005e3a:	2f00      	cmp	r7, #0
 8005e3c:	d143      	bne.n	8005ec6 <_malloc_r+0xd6>
 8005e3e:	2c00      	cmp	r4, #0
 8005e40:	d04b      	beq.n	8005eda <_malloc_r+0xea>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	4639      	mov	r1, r7
 8005e46:	4630      	mov	r0, r6
 8005e48:	eb04 0903 	add.w	r9, r4, r3
 8005e4c:	f000 fc1a 	bl	8006684 <_sbrk_r>
 8005e50:	4581      	cmp	r9, r0
 8005e52:	d142      	bne.n	8005eda <_malloc_r+0xea>
 8005e54:	6821      	ldr	r1, [r4, #0]
 8005e56:	1a6d      	subs	r5, r5, r1
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f7ff ffa6 	bl	8005dac <sbrk_aligned>
 8005e60:	3001      	adds	r0, #1
 8005e62:	d03a      	beq.n	8005eda <_malloc_r+0xea>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	442b      	add	r3, r5
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	bb62      	cbnz	r2, 8005ecc <_malloc_r+0xdc>
 8005e72:	f8c8 7000 	str.w	r7, [r8]
 8005e76:	e00f      	b.n	8005e98 <_malloc_r+0xa8>
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	1b52      	subs	r2, r2, r5
 8005e7c:	d420      	bmi.n	8005ec0 <_malloc_r+0xd0>
 8005e7e:	2a0b      	cmp	r2, #11
 8005e80:	d917      	bls.n	8005eb2 <_malloc_r+0xc2>
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	6025      	str	r5, [r4, #0]
 8005e88:	bf18      	it	ne
 8005e8a:	6059      	strne	r1, [r3, #4]
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	bf08      	it	eq
 8005e90:	f8c8 1000 	streq.w	r1, [r8]
 8005e94:	5162      	str	r2, [r4, r5]
 8005e96:	604b      	str	r3, [r1, #4]
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f000 f82f 	bl	8005efc <__malloc_unlock>
 8005e9e:	f104 000b 	add.w	r0, r4, #11
 8005ea2:	1d23      	adds	r3, r4, #4
 8005ea4:	f020 0007 	bic.w	r0, r0, #7
 8005ea8:	1ac2      	subs	r2, r0, r3
 8005eaa:	bf1c      	itt	ne
 8005eac:	1a1b      	subne	r3, r3, r0
 8005eae:	50a3      	strne	r3, [r4, r2]
 8005eb0:	e7af      	b.n	8005e12 <_malloc_r+0x22>
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	bf0c      	ite	eq
 8005eb8:	f8c8 2000 	streq.w	r2, [r8]
 8005ebc:	605a      	strne	r2, [r3, #4]
 8005ebe:	e7eb      	b.n	8005e98 <_malloc_r+0xa8>
 8005ec0:	4623      	mov	r3, r4
 8005ec2:	6864      	ldr	r4, [r4, #4]
 8005ec4:	e7ae      	b.n	8005e24 <_malloc_r+0x34>
 8005ec6:	463c      	mov	r4, r7
 8005ec8:	687f      	ldr	r7, [r7, #4]
 8005eca:	e7b6      	b.n	8005e3a <_malloc_r+0x4a>
 8005ecc:	461a      	mov	r2, r3
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	42a3      	cmp	r3, r4
 8005ed2:	d1fb      	bne.n	8005ecc <_malloc_r+0xdc>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6053      	str	r3, [r2, #4]
 8005ed8:	e7de      	b.n	8005e98 <_malloc_r+0xa8>
 8005eda:	230c      	movs	r3, #12
 8005edc:	6033      	str	r3, [r6, #0]
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f000 f80c 	bl	8005efc <__malloc_unlock>
 8005ee4:	e794      	b.n	8005e10 <_malloc_r+0x20>
 8005ee6:	6005      	str	r5, [r0, #0]
 8005ee8:	e7d6      	b.n	8005e98 <_malloc_r+0xa8>
 8005eea:	bf00      	nop
 8005eec:	20002598 	.word	0x20002598

08005ef0 <__malloc_lock>:
 8005ef0:	4801      	ldr	r0, [pc, #4]	@ (8005ef8 <__malloc_lock+0x8>)
 8005ef2:	f7ff beda 	b.w	8005caa <__retarget_lock_acquire_recursive>
 8005ef6:	bf00      	nop
 8005ef8:	20002590 	.word	0x20002590

08005efc <__malloc_unlock>:
 8005efc:	4801      	ldr	r0, [pc, #4]	@ (8005f04 <__malloc_unlock+0x8>)
 8005efe:	f7ff bed5 	b.w	8005cac <__retarget_lock_release_recursive>
 8005f02:	bf00      	nop
 8005f04:	20002590 	.word	0x20002590

08005f08 <__ssputs_r>:
 8005f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	688e      	ldr	r6, [r1, #8]
 8005f0e:	461f      	mov	r7, r3
 8005f10:	42be      	cmp	r6, r7
 8005f12:	680b      	ldr	r3, [r1, #0]
 8005f14:	4682      	mov	sl, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	4690      	mov	r8, r2
 8005f1a:	d82d      	bhi.n	8005f78 <__ssputs_r+0x70>
 8005f1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f24:	d026      	beq.n	8005f74 <__ssputs_r+0x6c>
 8005f26:	6965      	ldr	r5, [r4, #20]
 8005f28:	6909      	ldr	r1, [r1, #16]
 8005f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f2e:	eba3 0901 	sub.w	r9, r3, r1
 8005f32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f36:	1c7b      	adds	r3, r7, #1
 8005f38:	444b      	add	r3, r9
 8005f3a:	106d      	asrs	r5, r5, #1
 8005f3c:	429d      	cmp	r5, r3
 8005f3e:	bf38      	it	cc
 8005f40:	461d      	movcc	r5, r3
 8005f42:	0553      	lsls	r3, r2, #21
 8005f44:	d527      	bpl.n	8005f96 <__ssputs_r+0x8e>
 8005f46:	4629      	mov	r1, r5
 8005f48:	f7ff ff52 	bl	8005df0 <_malloc_r>
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	b360      	cbz	r0, 8005faa <__ssputs_r+0xa2>
 8005f50:	6921      	ldr	r1, [r4, #16]
 8005f52:	464a      	mov	r2, r9
 8005f54:	f7ff feab 	bl	8005cae <memcpy>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	6126      	str	r6, [r4, #16]
 8005f66:	6165      	str	r5, [r4, #20]
 8005f68:	444e      	add	r6, r9
 8005f6a:	eba5 0509 	sub.w	r5, r5, r9
 8005f6e:	6026      	str	r6, [r4, #0]
 8005f70:	60a5      	str	r5, [r4, #8]
 8005f72:	463e      	mov	r6, r7
 8005f74:	42be      	cmp	r6, r7
 8005f76:	d900      	bls.n	8005f7a <__ssputs_r+0x72>
 8005f78:	463e      	mov	r6, r7
 8005f7a:	6820      	ldr	r0, [r4, #0]
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	4641      	mov	r1, r8
 8005f80:	f000 fb66 	bl	8006650 <memmove>
 8005f84:	68a3      	ldr	r3, [r4, #8]
 8005f86:	1b9b      	subs	r3, r3, r6
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	4433      	add	r3, r6
 8005f8e:	6023      	str	r3, [r4, #0]
 8005f90:	2000      	movs	r0, #0
 8005f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f96:	462a      	mov	r2, r5
 8005f98:	f000 fb8b 	bl	80066b2 <_realloc_r>
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d1e0      	bne.n	8005f64 <__ssputs_r+0x5c>
 8005fa2:	6921      	ldr	r1, [r4, #16]
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	f7ff feaf 	bl	8005d08 <_free_r>
 8005faa:	230c      	movs	r3, #12
 8005fac:	f8ca 3000 	str.w	r3, [sl]
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fb6:	81a3      	strh	r3, [r4, #12]
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbc:	e7e9      	b.n	8005f92 <__ssputs_r+0x8a>
	...

08005fc0 <_svfiprintf_r>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	4698      	mov	r8, r3
 8005fc6:	898b      	ldrh	r3, [r1, #12]
 8005fc8:	061b      	lsls	r3, r3, #24
 8005fca:	b09d      	sub	sp, #116	@ 0x74
 8005fcc:	4607      	mov	r7, r0
 8005fce:	460d      	mov	r5, r1
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	d510      	bpl.n	8005ff6 <_svfiprintf_r+0x36>
 8005fd4:	690b      	ldr	r3, [r1, #16]
 8005fd6:	b973      	cbnz	r3, 8005ff6 <_svfiprintf_r+0x36>
 8005fd8:	2140      	movs	r1, #64	@ 0x40
 8005fda:	f7ff ff09 	bl	8005df0 <_malloc_r>
 8005fde:	6028      	str	r0, [r5, #0]
 8005fe0:	6128      	str	r0, [r5, #16]
 8005fe2:	b930      	cbnz	r0, 8005ff2 <_svfiprintf_r+0x32>
 8005fe4:	230c      	movs	r3, #12
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	b01d      	add	sp, #116	@ 0x74
 8005fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff2:	2340      	movs	r3, #64	@ 0x40
 8005ff4:	616b      	str	r3, [r5, #20]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ffa:	2320      	movs	r3, #32
 8005ffc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006000:	f8cd 800c 	str.w	r8, [sp, #12]
 8006004:	2330      	movs	r3, #48	@ 0x30
 8006006:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061a4 <_svfiprintf_r+0x1e4>
 800600a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800600e:	f04f 0901 	mov.w	r9, #1
 8006012:	4623      	mov	r3, r4
 8006014:	469a      	mov	sl, r3
 8006016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800601a:	b10a      	cbz	r2, 8006020 <_svfiprintf_r+0x60>
 800601c:	2a25      	cmp	r2, #37	@ 0x25
 800601e:	d1f9      	bne.n	8006014 <_svfiprintf_r+0x54>
 8006020:	ebba 0b04 	subs.w	fp, sl, r4
 8006024:	d00b      	beq.n	800603e <_svfiprintf_r+0x7e>
 8006026:	465b      	mov	r3, fp
 8006028:	4622      	mov	r2, r4
 800602a:	4629      	mov	r1, r5
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff ff6b 	bl	8005f08 <__ssputs_r>
 8006032:	3001      	adds	r0, #1
 8006034:	f000 80a7 	beq.w	8006186 <_svfiprintf_r+0x1c6>
 8006038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800603a:	445a      	add	r2, fp
 800603c:	9209      	str	r2, [sp, #36]	@ 0x24
 800603e:	f89a 3000 	ldrb.w	r3, [sl]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 809f 	beq.w	8006186 <_svfiprintf_r+0x1c6>
 8006048:	2300      	movs	r3, #0
 800604a:	f04f 32ff 	mov.w	r2, #4294967295
 800604e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006052:	f10a 0a01 	add.w	sl, sl, #1
 8006056:	9304      	str	r3, [sp, #16]
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800605e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006060:	4654      	mov	r4, sl
 8006062:	2205      	movs	r2, #5
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	484e      	ldr	r0, [pc, #312]	@ (80061a4 <_svfiprintf_r+0x1e4>)
 800606a:	f7fa f8b9 	bl	80001e0 <memchr>
 800606e:	9a04      	ldr	r2, [sp, #16]
 8006070:	b9d8      	cbnz	r0, 80060aa <_svfiprintf_r+0xea>
 8006072:	06d0      	lsls	r0, r2, #27
 8006074:	bf44      	itt	mi
 8006076:	2320      	movmi	r3, #32
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800607c:	0711      	lsls	r1, r2, #28
 800607e:	bf44      	itt	mi
 8006080:	232b      	movmi	r3, #43	@ 0x2b
 8006082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006086:	f89a 3000 	ldrb.w	r3, [sl]
 800608a:	2b2a      	cmp	r3, #42	@ 0x2a
 800608c:	d015      	beq.n	80060ba <_svfiprintf_r+0xfa>
 800608e:	9a07      	ldr	r2, [sp, #28]
 8006090:	4654      	mov	r4, sl
 8006092:	2000      	movs	r0, #0
 8006094:	f04f 0c0a 	mov.w	ip, #10
 8006098:	4621      	mov	r1, r4
 800609a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800609e:	3b30      	subs	r3, #48	@ 0x30
 80060a0:	2b09      	cmp	r3, #9
 80060a2:	d94b      	bls.n	800613c <_svfiprintf_r+0x17c>
 80060a4:	b1b0      	cbz	r0, 80060d4 <_svfiprintf_r+0x114>
 80060a6:	9207      	str	r2, [sp, #28]
 80060a8:	e014      	b.n	80060d4 <_svfiprintf_r+0x114>
 80060aa:	eba0 0308 	sub.w	r3, r0, r8
 80060ae:	fa09 f303 	lsl.w	r3, r9, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	46a2      	mov	sl, r4
 80060b8:	e7d2      	b.n	8006060 <_svfiprintf_r+0xa0>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	9103      	str	r1, [sp, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bfbb      	ittet	lt
 80060c6:	425b      	neglt	r3, r3
 80060c8:	f042 0202 	orrlt.w	r2, r2, #2
 80060cc:	9307      	strge	r3, [sp, #28]
 80060ce:	9307      	strlt	r3, [sp, #28]
 80060d0:	bfb8      	it	lt
 80060d2:	9204      	strlt	r2, [sp, #16]
 80060d4:	7823      	ldrb	r3, [r4, #0]
 80060d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80060d8:	d10a      	bne.n	80060f0 <_svfiprintf_r+0x130>
 80060da:	7863      	ldrb	r3, [r4, #1]
 80060dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80060de:	d132      	bne.n	8006146 <_svfiprintf_r+0x186>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	9203      	str	r2, [sp, #12]
 80060e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060ec:	3402      	adds	r4, #2
 80060ee:	9305      	str	r3, [sp, #20]
 80060f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061b4 <_svfiprintf_r+0x1f4>
 80060f4:	7821      	ldrb	r1, [r4, #0]
 80060f6:	2203      	movs	r2, #3
 80060f8:	4650      	mov	r0, sl
 80060fa:	f7fa f871 	bl	80001e0 <memchr>
 80060fe:	b138      	cbz	r0, 8006110 <_svfiprintf_r+0x150>
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	eba0 000a 	sub.w	r0, r0, sl
 8006106:	2240      	movs	r2, #64	@ 0x40
 8006108:	4082      	lsls	r2, r0
 800610a:	4313      	orrs	r3, r2
 800610c:	3401      	adds	r4, #1
 800610e:	9304      	str	r3, [sp, #16]
 8006110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006114:	4824      	ldr	r0, [pc, #144]	@ (80061a8 <_svfiprintf_r+0x1e8>)
 8006116:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800611a:	2206      	movs	r2, #6
 800611c:	f7fa f860 	bl	80001e0 <memchr>
 8006120:	2800      	cmp	r0, #0
 8006122:	d036      	beq.n	8006192 <_svfiprintf_r+0x1d2>
 8006124:	4b21      	ldr	r3, [pc, #132]	@ (80061ac <_svfiprintf_r+0x1ec>)
 8006126:	bb1b      	cbnz	r3, 8006170 <_svfiprintf_r+0x1b0>
 8006128:	9b03      	ldr	r3, [sp, #12]
 800612a:	3307      	adds	r3, #7
 800612c:	f023 0307 	bic.w	r3, r3, #7
 8006130:	3308      	adds	r3, #8
 8006132:	9303      	str	r3, [sp, #12]
 8006134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006136:	4433      	add	r3, r6
 8006138:	9309      	str	r3, [sp, #36]	@ 0x24
 800613a:	e76a      	b.n	8006012 <_svfiprintf_r+0x52>
 800613c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006140:	460c      	mov	r4, r1
 8006142:	2001      	movs	r0, #1
 8006144:	e7a8      	b.n	8006098 <_svfiprintf_r+0xd8>
 8006146:	2300      	movs	r3, #0
 8006148:	3401      	adds	r4, #1
 800614a:	9305      	str	r3, [sp, #20]
 800614c:	4619      	mov	r1, r3
 800614e:	f04f 0c0a 	mov.w	ip, #10
 8006152:	4620      	mov	r0, r4
 8006154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006158:	3a30      	subs	r2, #48	@ 0x30
 800615a:	2a09      	cmp	r2, #9
 800615c:	d903      	bls.n	8006166 <_svfiprintf_r+0x1a6>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0c6      	beq.n	80060f0 <_svfiprintf_r+0x130>
 8006162:	9105      	str	r1, [sp, #20]
 8006164:	e7c4      	b.n	80060f0 <_svfiprintf_r+0x130>
 8006166:	fb0c 2101 	mla	r1, ip, r1, r2
 800616a:	4604      	mov	r4, r0
 800616c:	2301      	movs	r3, #1
 800616e:	e7f0      	b.n	8006152 <_svfiprintf_r+0x192>
 8006170:	ab03      	add	r3, sp, #12
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	462a      	mov	r2, r5
 8006176:	4b0e      	ldr	r3, [pc, #56]	@ (80061b0 <_svfiprintf_r+0x1f0>)
 8006178:	a904      	add	r1, sp, #16
 800617a:	4638      	mov	r0, r7
 800617c:	f3af 8000 	nop.w
 8006180:	1c42      	adds	r2, r0, #1
 8006182:	4606      	mov	r6, r0
 8006184:	d1d6      	bne.n	8006134 <_svfiprintf_r+0x174>
 8006186:	89ab      	ldrh	r3, [r5, #12]
 8006188:	065b      	lsls	r3, r3, #25
 800618a:	f53f af2d 	bmi.w	8005fe8 <_svfiprintf_r+0x28>
 800618e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006190:	e72c      	b.n	8005fec <_svfiprintf_r+0x2c>
 8006192:	ab03      	add	r3, sp, #12
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	462a      	mov	r2, r5
 8006198:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <_svfiprintf_r+0x1f0>)
 800619a:	a904      	add	r1, sp, #16
 800619c:	4638      	mov	r0, r7
 800619e:	f000 f879 	bl	8006294 <_printf_i>
 80061a2:	e7ed      	b.n	8006180 <_svfiprintf_r+0x1c0>
 80061a4:	0800704b 	.word	0x0800704b
 80061a8:	08007055 	.word	0x08007055
 80061ac:	00000000 	.word	0x00000000
 80061b0:	08005f09 	.word	0x08005f09
 80061b4:	08007051 	.word	0x08007051

080061b8 <_printf_common>:
 80061b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	4616      	mov	r6, r2
 80061be:	4698      	mov	r8, r3
 80061c0:	688a      	ldr	r2, [r1, #8]
 80061c2:	690b      	ldr	r3, [r1, #16]
 80061c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061c8:	4293      	cmp	r3, r2
 80061ca:	bfb8      	it	lt
 80061cc:	4613      	movlt	r3, r2
 80061ce:	6033      	str	r3, [r6, #0]
 80061d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061d4:	4607      	mov	r7, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	b10a      	cbz	r2, 80061de <_printf_common+0x26>
 80061da:	3301      	adds	r3, #1
 80061dc:	6033      	str	r3, [r6, #0]
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	0699      	lsls	r1, r3, #26
 80061e2:	bf42      	ittt	mi
 80061e4:	6833      	ldrmi	r3, [r6, #0]
 80061e6:	3302      	addmi	r3, #2
 80061e8:	6033      	strmi	r3, [r6, #0]
 80061ea:	6825      	ldr	r5, [r4, #0]
 80061ec:	f015 0506 	ands.w	r5, r5, #6
 80061f0:	d106      	bne.n	8006200 <_printf_common+0x48>
 80061f2:	f104 0a19 	add.w	sl, r4, #25
 80061f6:	68e3      	ldr	r3, [r4, #12]
 80061f8:	6832      	ldr	r2, [r6, #0]
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	42ab      	cmp	r3, r5
 80061fe:	dc26      	bgt.n	800624e <_printf_common+0x96>
 8006200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006204:	6822      	ldr	r2, [r4, #0]
 8006206:	3b00      	subs	r3, #0
 8006208:	bf18      	it	ne
 800620a:	2301      	movne	r3, #1
 800620c:	0692      	lsls	r2, r2, #26
 800620e:	d42b      	bmi.n	8006268 <_printf_common+0xb0>
 8006210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006214:	4641      	mov	r1, r8
 8006216:	4638      	mov	r0, r7
 8006218:	47c8      	blx	r9
 800621a:	3001      	adds	r0, #1
 800621c:	d01e      	beq.n	800625c <_printf_common+0xa4>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	6922      	ldr	r2, [r4, #16]
 8006222:	f003 0306 	and.w	r3, r3, #6
 8006226:	2b04      	cmp	r3, #4
 8006228:	bf02      	ittt	eq
 800622a:	68e5      	ldreq	r5, [r4, #12]
 800622c:	6833      	ldreq	r3, [r6, #0]
 800622e:	1aed      	subeq	r5, r5, r3
 8006230:	68a3      	ldr	r3, [r4, #8]
 8006232:	bf0c      	ite	eq
 8006234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006238:	2500      	movne	r5, #0
 800623a:	4293      	cmp	r3, r2
 800623c:	bfc4      	itt	gt
 800623e:	1a9b      	subgt	r3, r3, r2
 8006240:	18ed      	addgt	r5, r5, r3
 8006242:	2600      	movs	r6, #0
 8006244:	341a      	adds	r4, #26
 8006246:	42b5      	cmp	r5, r6
 8006248:	d11a      	bne.n	8006280 <_printf_common+0xc8>
 800624a:	2000      	movs	r0, #0
 800624c:	e008      	b.n	8006260 <_printf_common+0xa8>
 800624e:	2301      	movs	r3, #1
 8006250:	4652      	mov	r2, sl
 8006252:	4641      	mov	r1, r8
 8006254:	4638      	mov	r0, r7
 8006256:	47c8      	blx	r9
 8006258:	3001      	adds	r0, #1
 800625a:	d103      	bne.n	8006264 <_printf_common+0xac>
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006264:	3501      	adds	r5, #1
 8006266:	e7c6      	b.n	80061f6 <_printf_common+0x3e>
 8006268:	18e1      	adds	r1, r4, r3
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	2030      	movs	r0, #48	@ 0x30
 800626e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006272:	4422      	add	r2, r4
 8006274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800627c:	3302      	adds	r3, #2
 800627e:	e7c7      	b.n	8006210 <_printf_common+0x58>
 8006280:	2301      	movs	r3, #1
 8006282:	4622      	mov	r2, r4
 8006284:	4641      	mov	r1, r8
 8006286:	4638      	mov	r0, r7
 8006288:	47c8      	blx	r9
 800628a:	3001      	adds	r0, #1
 800628c:	d0e6      	beq.n	800625c <_printf_common+0xa4>
 800628e:	3601      	adds	r6, #1
 8006290:	e7d9      	b.n	8006246 <_printf_common+0x8e>
	...

08006294 <_printf_i>:
 8006294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006298:	7e0f      	ldrb	r7, [r1, #24]
 800629a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800629c:	2f78      	cmp	r7, #120	@ 0x78
 800629e:	4691      	mov	r9, r2
 80062a0:	4680      	mov	r8, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	469a      	mov	sl, r3
 80062a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062aa:	d807      	bhi.n	80062bc <_printf_i+0x28>
 80062ac:	2f62      	cmp	r7, #98	@ 0x62
 80062ae:	d80a      	bhi.n	80062c6 <_printf_i+0x32>
 80062b0:	2f00      	cmp	r7, #0
 80062b2:	f000 80d2 	beq.w	800645a <_printf_i+0x1c6>
 80062b6:	2f58      	cmp	r7, #88	@ 0x58
 80062b8:	f000 80b9 	beq.w	800642e <_printf_i+0x19a>
 80062bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062c4:	e03a      	b.n	800633c <_printf_i+0xa8>
 80062c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062ca:	2b15      	cmp	r3, #21
 80062cc:	d8f6      	bhi.n	80062bc <_printf_i+0x28>
 80062ce:	a101      	add	r1, pc, #4	@ (adr r1, 80062d4 <_printf_i+0x40>)
 80062d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062d4:	0800632d 	.word	0x0800632d
 80062d8:	08006341 	.word	0x08006341
 80062dc:	080062bd 	.word	0x080062bd
 80062e0:	080062bd 	.word	0x080062bd
 80062e4:	080062bd 	.word	0x080062bd
 80062e8:	080062bd 	.word	0x080062bd
 80062ec:	08006341 	.word	0x08006341
 80062f0:	080062bd 	.word	0x080062bd
 80062f4:	080062bd 	.word	0x080062bd
 80062f8:	080062bd 	.word	0x080062bd
 80062fc:	080062bd 	.word	0x080062bd
 8006300:	08006441 	.word	0x08006441
 8006304:	0800636b 	.word	0x0800636b
 8006308:	080063fb 	.word	0x080063fb
 800630c:	080062bd 	.word	0x080062bd
 8006310:	080062bd 	.word	0x080062bd
 8006314:	08006463 	.word	0x08006463
 8006318:	080062bd 	.word	0x080062bd
 800631c:	0800636b 	.word	0x0800636b
 8006320:	080062bd 	.word	0x080062bd
 8006324:	080062bd 	.word	0x080062bd
 8006328:	08006403 	.word	0x08006403
 800632c:	6833      	ldr	r3, [r6, #0]
 800632e:	1d1a      	adds	r2, r3, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6032      	str	r2, [r6, #0]
 8006334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800633c:	2301      	movs	r3, #1
 800633e:	e09d      	b.n	800647c <_printf_i+0x1e8>
 8006340:	6833      	ldr	r3, [r6, #0]
 8006342:	6820      	ldr	r0, [r4, #0]
 8006344:	1d19      	adds	r1, r3, #4
 8006346:	6031      	str	r1, [r6, #0]
 8006348:	0606      	lsls	r6, r0, #24
 800634a:	d501      	bpl.n	8006350 <_printf_i+0xbc>
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	e003      	b.n	8006358 <_printf_i+0xc4>
 8006350:	0645      	lsls	r5, r0, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0xb8>
 8006354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006358:	2d00      	cmp	r5, #0
 800635a:	da03      	bge.n	8006364 <_printf_i+0xd0>
 800635c:	232d      	movs	r3, #45	@ 0x2d
 800635e:	426d      	negs	r5, r5
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006364:	4859      	ldr	r0, [pc, #356]	@ (80064cc <_printf_i+0x238>)
 8006366:	230a      	movs	r3, #10
 8006368:	e011      	b.n	800638e <_printf_i+0xfa>
 800636a:	6821      	ldr	r1, [r4, #0]
 800636c:	6833      	ldr	r3, [r6, #0]
 800636e:	0608      	lsls	r0, r1, #24
 8006370:	f853 5b04 	ldr.w	r5, [r3], #4
 8006374:	d402      	bmi.n	800637c <_printf_i+0xe8>
 8006376:	0649      	lsls	r1, r1, #25
 8006378:	bf48      	it	mi
 800637a:	b2ad      	uxthmi	r5, r5
 800637c:	2f6f      	cmp	r7, #111	@ 0x6f
 800637e:	4853      	ldr	r0, [pc, #332]	@ (80064cc <_printf_i+0x238>)
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	bf14      	ite	ne
 8006384:	230a      	movne	r3, #10
 8006386:	2308      	moveq	r3, #8
 8006388:	2100      	movs	r1, #0
 800638a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800638e:	6866      	ldr	r6, [r4, #4]
 8006390:	60a6      	str	r6, [r4, #8]
 8006392:	2e00      	cmp	r6, #0
 8006394:	bfa2      	ittt	ge
 8006396:	6821      	ldrge	r1, [r4, #0]
 8006398:	f021 0104 	bicge.w	r1, r1, #4
 800639c:	6021      	strge	r1, [r4, #0]
 800639e:	b90d      	cbnz	r5, 80063a4 <_printf_i+0x110>
 80063a0:	2e00      	cmp	r6, #0
 80063a2:	d04b      	beq.n	800643c <_printf_i+0x1a8>
 80063a4:	4616      	mov	r6, r2
 80063a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80063aa:	fb03 5711 	mls	r7, r3, r1, r5
 80063ae:	5dc7      	ldrb	r7, [r0, r7]
 80063b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063b4:	462f      	mov	r7, r5
 80063b6:	42bb      	cmp	r3, r7
 80063b8:	460d      	mov	r5, r1
 80063ba:	d9f4      	bls.n	80063a6 <_printf_i+0x112>
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d10b      	bne.n	80063d8 <_printf_i+0x144>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	07df      	lsls	r7, r3, #31
 80063c4:	d508      	bpl.n	80063d8 <_printf_i+0x144>
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	6861      	ldr	r1, [r4, #4]
 80063ca:	4299      	cmp	r1, r3
 80063cc:	bfde      	ittt	le
 80063ce:	2330      	movle	r3, #48	@ 0x30
 80063d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063d8:	1b92      	subs	r2, r2, r6
 80063da:	6122      	str	r2, [r4, #16]
 80063dc:	f8cd a000 	str.w	sl, [sp]
 80063e0:	464b      	mov	r3, r9
 80063e2:	aa03      	add	r2, sp, #12
 80063e4:	4621      	mov	r1, r4
 80063e6:	4640      	mov	r0, r8
 80063e8:	f7ff fee6 	bl	80061b8 <_printf_common>
 80063ec:	3001      	adds	r0, #1
 80063ee:	d14a      	bne.n	8006486 <_printf_i+0x1f2>
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	b004      	add	sp, #16
 80063f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f043 0320 	orr.w	r3, r3, #32
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	4833      	ldr	r0, [pc, #204]	@ (80064d0 <_printf_i+0x23c>)
 8006404:	2778      	movs	r7, #120	@ 0x78
 8006406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	6831      	ldr	r1, [r6, #0]
 800640e:	061f      	lsls	r7, r3, #24
 8006410:	f851 5b04 	ldr.w	r5, [r1], #4
 8006414:	d402      	bmi.n	800641c <_printf_i+0x188>
 8006416:	065f      	lsls	r7, r3, #25
 8006418:	bf48      	it	mi
 800641a:	b2ad      	uxthmi	r5, r5
 800641c:	6031      	str	r1, [r6, #0]
 800641e:	07d9      	lsls	r1, r3, #31
 8006420:	bf44      	itt	mi
 8006422:	f043 0320 	orrmi.w	r3, r3, #32
 8006426:	6023      	strmi	r3, [r4, #0]
 8006428:	b11d      	cbz	r5, 8006432 <_printf_i+0x19e>
 800642a:	2310      	movs	r3, #16
 800642c:	e7ac      	b.n	8006388 <_printf_i+0xf4>
 800642e:	4827      	ldr	r0, [pc, #156]	@ (80064cc <_printf_i+0x238>)
 8006430:	e7e9      	b.n	8006406 <_printf_i+0x172>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f023 0320 	bic.w	r3, r3, #32
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	e7f6      	b.n	800642a <_printf_i+0x196>
 800643c:	4616      	mov	r6, r2
 800643e:	e7bd      	b.n	80063bc <_printf_i+0x128>
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	6825      	ldr	r5, [r4, #0]
 8006444:	6961      	ldr	r1, [r4, #20]
 8006446:	1d18      	adds	r0, r3, #4
 8006448:	6030      	str	r0, [r6, #0]
 800644a:	062e      	lsls	r6, r5, #24
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	d501      	bpl.n	8006454 <_printf_i+0x1c0>
 8006450:	6019      	str	r1, [r3, #0]
 8006452:	e002      	b.n	800645a <_printf_i+0x1c6>
 8006454:	0668      	lsls	r0, r5, #25
 8006456:	d5fb      	bpl.n	8006450 <_printf_i+0x1bc>
 8006458:	8019      	strh	r1, [r3, #0]
 800645a:	2300      	movs	r3, #0
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	4616      	mov	r6, r2
 8006460:	e7bc      	b.n	80063dc <_printf_i+0x148>
 8006462:	6833      	ldr	r3, [r6, #0]
 8006464:	1d1a      	adds	r2, r3, #4
 8006466:	6032      	str	r2, [r6, #0]
 8006468:	681e      	ldr	r6, [r3, #0]
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	2100      	movs	r1, #0
 800646e:	4630      	mov	r0, r6
 8006470:	f7f9 feb6 	bl	80001e0 <memchr>
 8006474:	b108      	cbz	r0, 800647a <_printf_i+0x1e6>
 8006476:	1b80      	subs	r0, r0, r6
 8006478:	6060      	str	r0, [r4, #4]
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	6123      	str	r3, [r4, #16]
 800647e:	2300      	movs	r3, #0
 8006480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006484:	e7aa      	b.n	80063dc <_printf_i+0x148>
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	4632      	mov	r2, r6
 800648a:	4649      	mov	r1, r9
 800648c:	4640      	mov	r0, r8
 800648e:	47d0      	blx	sl
 8006490:	3001      	adds	r0, #1
 8006492:	d0ad      	beq.n	80063f0 <_printf_i+0x15c>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	079b      	lsls	r3, r3, #30
 8006498:	d413      	bmi.n	80064c2 <_printf_i+0x22e>
 800649a:	68e0      	ldr	r0, [r4, #12]
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	4298      	cmp	r0, r3
 80064a0:	bfb8      	it	lt
 80064a2:	4618      	movlt	r0, r3
 80064a4:	e7a6      	b.n	80063f4 <_printf_i+0x160>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4632      	mov	r2, r6
 80064aa:	4649      	mov	r1, r9
 80064ac:	4640      	mov	r0, r8
 80064ae:	47d0      	blx	sl
 80064b0:	3001      	adds	r0, #1
 80064b2:	d09d      	beq.n	80063f0 <_printf_i+0x15c>
 80064b4:	3501      	adds	r5, #1
 80064b6:	68e3      	ldr	r3, [r4, #12]
 80064b8:	9903      	ldr	r1, [sp, #12]
 80064ba:	1a5b      	subs	r3, r3, r1
 80064bc:	42ab      	cmp	r3, r5
 80064be:	dcf2      	bgt.n	80064a6 <_printf_i+0x212>
 80064c0:	e7eb      	b.n	800649a <_printf_i+0x206>
 80064c2:	2500      	movs	r5, #0
 80064c4:	f104 0619 	add.w	r6, r4, #25
 80064c8:	e7f5      	b.n	80064b6 <_printf_i+0x222>
 80064ca:	bf00      	nop
 80064cc:	0800705c 	.word	0x0800705c
 80064d0:	0800706d 	.word	0x0800706d

080064d4 <__sflush_r>:
 80064d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064dc:	0716      	lsls	r6, r2, #28
 80064de:	4605      	mov	r5, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	d454      	bmi.n	800658e <__sflush_r+0xba>
 80064e4:	684b      	ldr	r3, [r1, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dc02      	bgt.n	80064f0 <__sflush_r+0x1c>
 80064ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dd48      	ble.n	8006582 <__sflush_r+0xae>
 80064f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d045      	beq.n	8006582 <__sflush_r+0xae>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064fc:	682f      	ldr	r7, [r5, #0]
 80064fe:	6a21      	ldr	r1, [r4, #32]
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	d030      	beq.n	8006566 <__sflush_r+0x92>
 8006504:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	0759      	lsls	r1, r3, #29
 800650a:	d505      	bpl.n	8006518 <__sflush_r+0x44>
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006512:	b10b      	cbz	r3, 8006518 <__sflush_r+0x44>
 8006514:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006516:	1ad2      	subs	r2, r2, r3
 8006518:	2300      	movs	r3, #0
 800651a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	4628      	mov	r0, r5
 8006520:	47b0      	blx	r6
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	d106      	bne.n	8006536 <__sflush_r+0x62>
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	291d      	cmp	r1, #29
 800652c:	d82b      	bhi.n	8006586 <__sflush_r+0xb2>
 800652e:	4a2a      	ldr	r2, [pc, #168]	@ (80065d8 <__sflush_r+0x104>)
 8006530:	410a      	asrs	r2, r1
 8006532:	07d6      	lsls	r6, r2, #31
 8006534:	d427      	bmi.n	8006586 <__sflush_r+0xb2>
 8006536:	2200      	movs	r2, #0
 8006538:	6062      	str	r2, [r4, #4]
 800653a:	04d9      	lsls	r1, r3, #19
 800653c:	6922      	ldr	r2, [r4, #16]
 800653e:	6022      	str	r2, [r4, #0]
 8006540:	d504      	bpl.n	800654c <__sflush_r+0x78>
 8006542:	1c42      	adds	r2, r0, #1
 8006544:	d101      	bne.n	800654a <__sflush_r+0x76>
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	b903      	cbnz	r3, 800654c <__sflush_r+0x78>
 800654a:	6560      	str	r0, [r4, #84]	@ 0x54
 800654c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800654e:	602f      	str	r7, [r5, #0]
 8006550:	b1b9      	cbz	r1, 8006582 <__sflush_r+0xae>
 8006552:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006556:	4299      	cmp	r1, r3
 8006558:	d002      	beq.n	8006560 <__sflush_r+0x8c>
 800655a:	4628      	mov	r0, r5
 800655c:	f7ff fbd4 	bl	8005d08 <_free_r>
 8006560:	2300      	movs	r3, #0
 8006562:	6363      	str	r3, [r4, #52]	@ 0x34
 8006564:	e00d      	b.n	8006582 <__sflush_r+0xae>
 8006566:	2301      	movs	r3, #1
 8006568:	4628      	mov	r0, r5
 800656a:	47b0      	blx	r6
 800656c:	4602      	mov	r2, r0
 800656e:	1c50      	adds	r0, r2, #1
 8006570:	d1c9      	bne.n	8006506 <__sflush_r+0x32>
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0c6      	beq.n	8006506 <__sflush_r+0x32>
 8006578:	2b1d      	cmp	r3, #29
 800657a:	d001      	beq.n	8006580 <__sflush_r+0xac>
 800657c:	2b16      	cmp	r3, #22
 800657e:	d11e      	bne.n	80065be <__sflush_r+0xea>
 8006580:	602f      	str	r7, [r5, #0]
 8006582:	2000      	movs	r0, #0
 8006584:	e022      	b.n	80065cc <__sflush_r+0xf8>
 8006586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800658a:	b21b      	sxth	r3, r3
 800658c:	e01b      	b.n	80065c6 <__sflush_r+0xf2>
 800658e:	690f      	ldr	r7, [r1, #16]
 8006590:	2f00      	cmp	r7, #0
 8006592:	d0f6      	beq.n	8006582 <__sflush_r+0xae>
 8006594:	0793      	lsls	r3, r2, #30
 8006596:	680e      	ldr	r6, [r1, #0]
 8006598:	bf08      	it	eq
 800659a:	694b      	ldreq	r3, [r1, #20]
 800659c:	600f      	str	r7, [r1, #0]
 800659e:	bf18      	it	ne
 80065a0:	2300      	movne	r3, #0
 80065a2:	eba6 0807 	sub.w	r8, r6, r7
 80065a6:	608b      	str	r3, [r1, #8]
 80065a8:	f1b8 0f00 	cmp.w	r8, #0
 80065ac:	dde9      	ble.n	8006582 <__sflush_r+0xae>
 80065ae:	6a21      	ldr	r1, [r4, #32]
 80065b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065b2:	4643      	mov	r3, r8
 80065b4:	463a      	mov	r2, r7
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b0      	blx	r6
 80065ba:	2800      	cmp	r0, #0
 80065bc:	dc08      	bgt.n	80065d0 <__sflush_r+0xfc>
 80065be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d0:	4407      	add	r7, r0
 80065d2:	eba8 0800 	sub.w	r8, r8, r0
 80065d6:	e7e7      	b.n	80065a8 <__sflush_r+0xd4>
 80065d8:	dfbffffe 	.word	0xdfbffffe

080065dc <_fflush_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	4605      	mov	r5, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b913      	cbnz	r3, 80065ec <_fflush_r+0x10>
 80065e6:	2500      	movs	r5, #0
 80065e8:	4628      	mov	r0, r5
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	b118      	cbz	r0, 80065f6 <_fflush_r+0x1a>
 80065ee:	6a03      	ldr	r3, [r0, #32]
 80065f0:	b90b      	cbnz	r3, 80065f6 <_fflush_r+0x1a>
 80065f2:	f7ff fa21 	bl	8005a38 <__sinit>
 80065f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f3      	beq.n	80065e6 <_fflush_r+0xa>
 80065fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006600:	07d0      	lsls	r0, r2, #31
 8006602:	d404      	bmi.n	800660e <_fflush_r+0x32>
 8006604:	0599      	lsls	r1, r3, #22
 8006606:	d402      	bmi.n	800660e <_fflush_r+0x32>
 8006608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800660a:	f7ff fb4e 	bl	8005caa <__retarget_lock_acquire_recursive>
 800660e:	4628      	mov	r0, r5
 8006610:	4621      	mov	r1, r4
 8006612:	f7ff ff5f 	bl	80064d4 <__sflush_r>
 8006616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006618:	07da      	lsls	r2, r3, #31
 800661a:	4605      	mov	r5, r0
 800661c:	d4e4      	bmi.n	80065e8 <_fflush_r+0xc>
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	059b      	lsls	r3, r3, #22
 8006622:	d4e1      	bmi.n	80065e8 <_fflush_r+0xc>
 8006624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006626:	f7ff fb41 	bl	8005cac <__retarget_lock_release_recursive>
 800662a:	e7dd      	b.n	80065e8 <_fflush_r+0xc>

0800662c <fiprintf>:
 800662c:	b40e      	push	{r1, r2, r3}
 800662e:	b503      	push	{r0, r1, lr}
 8006630:	4601      	mov	r1, r0
 8006632:	ab03      	add	r3, sp, #12
 8006634:	4805      	ldr	r0, [pc, #20]	@ (800664c <fiprintf+0x20>)
 8006636:	f853 2b04 	ldr.w	r2, [r3], #4
 800663a:	6800      	ldr	r0, [r0, #0]
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	f000 f88f 	bl	8006760 <_vfiprintf_r>
 8006642:	b002      	add	sp, #8
 8006644:	f85d eb04 	ldr.w	lr, [sp], #4
 8006648:	b003      	add	sp, #12
 800664a:	4770      	bx	lr
 800664c:	20000074 	.word	0x20000074

08006650 <memmove>:
 8006650:	4288      	cmp	r0, r1
 8006652:	b510      	push	{r4, lr}
 8006654:	eb01 0402 	add.w	r4, r1, r2
 8006658:	d902      	bls.n	8006660 <memmove+0x10>
 800665a:	4284      	cmp	r4, r0
 800665c:	4623      	mov	r3, r4
 800665e:	d807      	bhi.n	8006670 <memmove+0x20>
 8006660:	1e43      	subs	r3, r0, #1
 8006662:	42a1      	cmp	r1, r4
 8006664:	d008      	beq.n	8006678 <memmove+0x28>
 8006666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800666a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800666e:	e7f8      	b.n	8006662 <memmove+0x12>
 8006670:	4402      	add	r2, r0
 8006672:	4601      	mov	r1, r0
 8006674:	428a      	cmp	r2, r1
 8006676:	d100      	bne.n	800667a <memmove+0x2a>
 8006678:	bd10      	pop	{r4, pc}
 800667a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800667e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006682:	e7f7      	b.n	8006674 <memmove+0x24>

08006684 <_sbrk_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d06      	ldr	r5, [pc, #24]	@ (80066a0 <_sbrk_r+0x1c>)
 8006688:	2300      	movs	r3, #0
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	602b      	str	r3, [r5, #0]
 8006690:	f7fb fe02 	bl	8002298 <_sbrk>
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	d102      	bne.n	800669e <_sbrk_r+0x1a>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	b103      	cbz	r3, 800669e <_sbrk_r+0x1a>
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	bd38      	pop	{r3, r4, r5, pc}
 80066a0:	2000258c 	.word	0x2000258c

080066a4 <abort>:
 80066a4:	b508      	push	{r3, lr}
 80066a6:	2006      	movs	r0, #6
 80066a8:	f000 fa2e 	bl	8006b08 <raise>
 80066ac:	2001      	movs	r0, #1
 80066ae:	f7fb fd7b 	bl	80021a8 <_exit>

080066b2 <_realloc_r>:
 80066b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	4680      	mov	r8, r0
 80066b8:	4615      	mov	r5, r2
 80066ba:	460c      	mov	r4, r1
 80066bc:	b921      	cbnz	r1, 80066c8 <_realloc_r+0x16>
 80066be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c2:	4611      	mov	r1, r2
 80066c4:	f7ff bb94 	b.w	8005df0 <_malloc_r>
 80066c8:	b92a      	cbnz	r2, 80066d6 <_realloc_r+0x24>
 80066ca:	f7ff fb1d 	bl	8005d08 <_free_r>
 80066ce:	2400      	movs	r4, #0
 80066d0:	4620      	mov	r0, r4
 80066d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066d6:	f000 fa33 	bl	8006b40 <_malloc_usable_size_r>
 80066da:	4285      	cmp	r5, r0
 80066dc:	4606      	mov	r6, r0
 80066de:	d802      	bhi.n	80066e6 <_realloc_r+0x34>
 80066e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80066e4:	d8f4      	bhi.n	80066d0 <_realloc_r+0x1e>
 80066e6:	4629      	mov	r1, r5
 80066e8:	4640      	mov	r0, r8
 80066ea:	f7ff fb81 	bl	8005df0 <_malloc_r>
 80066ee:	4607      	mov	r7, r0
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d0ec      	beq.n	80066ce <_realloc_r+0x1c>
 80066f4:	42b5      	cmp	r5, r6
 80066f6:	462a      	mov	r2, r5
 80066f8:	4621      	mov	r1, r4
 80066fa:	bf28      	it	cs
 80066fc:	4632      	movcs	r2, r6
 80066fe:	f7ff fad6 	bl	8005cae <memcpy>
 8006702:	4621      	mov	r1, r4
 8006704:	4640      	mov	r0, r8
 8006706:	f7ff faff 	bl	8005d08 <_free_r>
 800670a:	463c      	mov	r4, r7
 800670c:	e7e0      	b.n	80066d0 <_realloc_r+0x1e>

0800670e <__sfputc_r>:
 800670e:	6893      	ldr	r3, [r2, #8]
 8006710:	3b01      	subs	r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	b410      	push	{r4}
 8006716:	6093      	str	r3, [r2, #8]
 8006718:	da08      	bge.n	800672c <__sfputc_r+0x1e>
 800671a:	6994      	ldr	r4, [r2, #24]
 800671c:	42a3      	cmp	r3, r4
 800671e:	db01      	blt.n	8006724 <__sfputc_r+0x16>
 8006720:	290a      	cmp	r1, #10
 8006722:	d103      	bne.n	800672c <__sfputc_r+0x1e>
 8006724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006728:	f000 b932 	b.w	8006990 <__swbuf_r>
 800672c:	6813      	ldr	r3, [r2, #0]
 800672e:	1c58      	adds	r0, r3, #1
 8006730:	6010      	str	r0, [r2, #0]
 8006732:	7019      	strb	r1, [r3, #0]
 8006734:	4608      	mov	r0, r1
 8006736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800673a:	4770      	bx	lr

0800673c <__sfputs_r>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	4606      	mov	r6, r0
 8006740:	460f      	mov	r7, r1
 8006742:	4614      	mov	r4, r2
 8006744:	18d5      	adds	r5, r2, r3
 8006746:	42ac      	cmp	r4, r5
 8006748:	d101      	bne.n	800674e <__sfputs_r+0x12>
 800674a:	2000      	movs	r0, #0
 800674c:	e007      	b.n	800675e <__sfputs_r+0x22>
 800674e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006752:	463a      	mov	r2, r7
 8006754:	4630      	mov	r0, r6
 8006756:	f7ff ffda 	bl	800670e <__sfputc_r>
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	d1f3      	bne.n	8006746 <__sfputs_r+0xa>
 800675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006760 <_vfiprintf_r>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	460d      	mov	r5, r1
 8006766:	b09d      	sub	sp, #116	@ 0x74
 8006768:	4614      	mov	r4, r2
 800676a:	4698      	mov	r8, r3
 800676c:	4606      	mov	r6, r0
 800676e:	b118      	cbz	r0, 8006778 <_vfiprintf_r+0x18>
 8006770:	6a03      	ldr	r3, [r0, #32]
 8006772:	b90b      	cbnz	r3, 8006778 <_vfiprintf_r+0x18>
 8006774:	f7ff f960 	bl	8005a38 <__sinit>
 8006778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800677a:	07d9      	lsls	r1, r3, #31
 800677c:	d405      	bmi.n	800678a <_vfiprintf_r+0x2a>
 800677e:	89ab      	ldrh	r3, [r5, #12]
 8006780:	059a      	lsls	r2, r3, #22
 8006782:	d402      	bmi.n	800678a <_vfiprintf_r+0x2a>
 8006784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006786:	f7ff fa90 	bl	8005caa <__retarget_lock_acquire_recursive>
 800678a:	89ab      	ldrh	r3, [r5, #12]
 800678c:	071b      	lsls	r3, r3, #28
 800678e:	d501      	bpl.n	8006794 <_vfiprintf_r+0x34>
 8006790:	692b      	ldr	r3, [r5, #16]
 8006792:	b99b      	cbnz	r3, 80067bc <_vfiprintf_r+0x5c>
 8006794:	4629      	mov	r1, r5
 8006796:	4630      	mov	r0, r6
 8006798:	f000 f938 	bl	8006a0c <__swsetup_r>
 800679c:	b170      	cbz	r0, 80067bc <_vfiprintf_r+0x5c>
 800679e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067a0:	07dc      	lsls	r4, r3, #31
 80067a2:	d504      	bpl.n	80067ae <_vfiprintf_r+0x4e>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295
 80067a8:	b01d      	add	sp, #116	@ 0x74
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	89ab      	ldrh	r3, [r5, #12]
 80067b0:	0598      	lsls	r0, r3, #22
 80067b2:	d4f7      	bmi.n	80067a4 <_vfiprintf_r+0x44>
 80067b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067b6:	f7ff fa79 	bl	8005cac <__retarget_lock_release_recursive>
 80067ba:	e7f3      	b.n	80067a4 <_vfiprintf_r+0x44>
 80067bc:	2300      	movs	r3, #0
 80067be:	9309      	str	r3, [sp, #36]	@ 0x24
 80067c0:	2320      	movs	r3, #32
 80067c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ca:	2330      	movs	r3, #48	@ 0x30
 80067cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800697c <_vfiprintf_r+0x21c>
 80067d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067d4:	f04f 0901 	mov.w	r9, #1
 80067d8:	4623      	mov	r3, r4
 80067da:	469a      	mov	sl, r3
 80067dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067e0:	b10a      	cbz	r2, 80067e6 <_vfiprintf_r+0x86>
 80067e2:	2a25      	cmp	r2, #37	@ 0x25
 80067e4:	d1f9      	bne.n	80067da <_vfiprintf_r+0x7a>
 80067e6:	ebba 0b04 	subs.w	fp, sl, r4
 80067ea:	d00b      	beq.n	8006804 <_vfiprintf_r+0xa4>
 80067ec:	465b      	mov	r3, fp
 80067ee:	4622      	mov	r2, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7ff ffa2 	bl	800673c <__sfputs_r>
 80067f8:	3001      	adds	r0, #1
 80067fa:	f000 80a7 	beq.w	800694c <_vfiprintf_r+0x1ec>
 80067fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006800:	445a      	add	r2, fp
 8006802:	9209      	str	r2, [sp, #36]	@ 0x24
 8006804:	f89a 3000 	ldrb.w	r3, [sl]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 809f 	beq.w	800694c <_vfiprintf_r+0x1ec>
 800680e:	2300      	movs	r3, #0
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006818:	f10a 0a01 	add.w	sl, sl, #1
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	9307      	str	r3, [sp, #28]
 8006820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006824:	931a      	str	r3, [sp, #104]	@ 0x68
 8006826:	4654      	mov	r4, sl
 8006828:	2205      	movs	r2, #5
 800682a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682e:	4853      	ldr	r0, [pc, #332]	@ (800697c <_vfiprintf_r+0x21c>)
 8006830:	f7f9 fcd6 	bl	80001e0 <memchr>
 8006834:	9a04      	ldr	r2, [sp, #16]
 8006836:	b9d8      	cbnz	r0, 8006870 <_vfiprintf_r+0x110>
 8006838:	06d1      	lsls	r1, r2, #27
 800683a:	bf44      	itt	mi
 800683c:	2320      	movmi	r3, #32
 800683e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006842:	0713      	lsls	r3, r2, #28
 8006844:	bf44      	itt	mi
 8006846:	232b      	movmi	r3, #43	@ 0x2b
 8006848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800684c:	f89a 3000 	ldrb.w	r3, [sl]
 8006850:	2b2a      	cmp	r3, #42	@ 0x2a
 8006852:	d015      	beq.n	8006880 <_vfiprintf_r+0x120>
 8006854:	9a07      	ldr	r2, [sp, #28]
 8006856:	4654      	mov	r4, sl
 8006858:	2000      	movs	r0, #0
 800685a:	f04f 0c0a 	mov.w	ip, #10
 800685e:	4621      	mov	r1, r4
 8006860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006864:	3b30      	subs	r3, #48	@ 0x30
 8006866:	2b09      	cmp	r3, #9
 8006868:	d94b      	bls.n	8006902 <_vfiprintf_r+0x1a2>
 800686a:	b1b0      	cbz	r0, 800689a <_vfiprintf_r+0x13a>
 800686c:	9207      	str	r2, [sp, #28]
 800686e:	e014      	b.n	800689a <_vfiprintf_r+0x13a>
 8006870:	eba0 0308 	sub.w	r3, r0, r8
 8006874:	fa09 f303 	lsl.w	r3, r9, r3
 8006878:	4313      	orrs	r3, r2
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	46a2      	mov	sl, r4
 800687e:	e7d2      	b.n	8006826 <_vfiprintf_r+0xc6>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	1d19      	adds	r1, r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	9103      	str	r1, [sp, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	bfbb      	ittet	lt
 800688c:	425b      	neglt	r3, r3
 800688e:	f042 0202 	orrlt.w	r2, r2, #2
 8006892:	9307      	strge	r3, [sp, #28]
 8006894:	9307      	strlt	r3, [sp, #28]
 8006896:	bfb8      	it	lt
 8006898:	9204      	strlt	r2, [sp, #16]
 800689a:	7823      	ldrb	r3, [r4, #0]
 800689c:	2b2e      	cmp	r3, #46	@ 0x2e
 800689e:	d10a      	bne.n	80068b6 <_vfiprintf_r+0x156>
 80068a0:	7863      	ldrb	r3, [r4, #1]
 80068a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80068a4:	d132      	bne.n	800690c <_vfiprintf_r+0x1ac>
 80068a6:	9b03      	ldr	r3, [sp, #12]
 80068a8:	1d1a      	adds	r2, r3, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	9203      	str	r2, [sp, #12]
 80068ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068b2:	3402      	adds	r4, #2
 80068b4:	9305      	str	r3, [sp, #20]
 80068b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800698c <_vfiprintf_r+0x22c>
 80068ba:	7821      	ldrb	r1, [r4, #0]
 80068bc:	2203      	movs	r2, #3
 80068be:	4650      	mov	r0, sl
 80068c0:	f7f9 fc8e 	bl	80001e0 <memchr>
 80068c4:	b138      	cbz	r0, 80068d6 <_vfiprintf_r+0x176>
 80068c6:	9b04      	ldr	r3, [sp, #16]
 80068c8:	eba0 000a 	sub.w	r0, r0, sl
 80068cc:	2240      	movs	r2, #64	@ 0x40
 80068ce:	4082      	lsls	r2, r0
 80068d0:	4313      	orrs	r3, r2
 80068d2:	3401      	adds	r4, #1
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068da:	4829      	ldr	r0, [pc, #164]	@ (8006980 <_vfiprintf_r+0x220>)
 80068dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068e0:	2206      	movs	r2, #6
 80068e2:	f7f9 fc7d 	bl	80001e0 <memchr>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d03f      	beq.n	800696a <_vfiprintf_r+0x20a>
 80068ea:	4b26      	ldr	r3, [pc, #152]	@ (8006984 <_vfiprintf_r+0x224>)
 80068ec:	bb1b      	cbnz	r3, 8006936 <_vfiprintf_r+0x1d6>
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	3307      	adds	r3, #7
 80068f2:	f023 0307 	bic.w	r3, r3, #7
 80068f6:	3308      	adds	r3, #8
 80068f8:	9303      	str	r3, [sp, #12]
 80068fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068fc:	443b      	add	r3, r7
 80068fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006900:	e76a      	b.n	80067d8 <_vfiprintf_r+0x78>
 8006902:	fb0c 3202 	mla	r2, ip, r2, r3
 8006906:	460c      	mov	r4, r1
 8006908:	2001      	movs	r0, #1
 800690a:	e7a8      	b.n	800685e <_vfiprintf_r+0xfe>
 800690c:	2300      	movs	r3, #0
 800690e:	3401      	adds	r4, #1
 8006910:	9305      	str	r3, [sp, #20]
 8006912:	4619      	mov	r1, r3
 8006914:	f04f 0c0a 	mov.w	ip, #10
 8006918:	4620      	mov	r0, r4
 800691a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800691e:	3a30      	subs	r2, #48	@ 0x30
 8006920:	2a09      	cmp	r2, #9
 8006922:	d903      	bls.n	800692c <_vfiprintf_r+0x1cc>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0c6      	beq.n	80068b6 <_vfiprintf_r+0x156>
 8006928:	9105      	str	r1, [sp, #20]
 800692a:	e7c4      	b.n	80068b6 <_vfiprintf_r+0x156>
 800692c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006930:	4604      	mov	r4, r0
 8006932:	2301      	movs	r3, #1
 8006934:	e7f0      	b.n	8006918 <_vfiprintf_r+0x1b8>
 8006936:	ab03      	add	r3, sp, #12
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	462a      	mov	r2, r5
 800693c:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <_vfiprintf_r+0x228>)
 800693e:	a904      	add	r1, sp, #16
 8006940:	4630      	mov	r0, r6
 8006942:	f3af 8000 	nop.w
 8006946:	4607      	mov	r7, r0
 8006948:	1c78      	adds	r0, r7, #1
 800694a:	d1d6      	bne.n	80068fa <_vfiprintf_r+0x19a>
 800694c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800694e:	07d9      	lsls	r1, r3, #31
 8006950:	d405      	bmi.n	800695e <_vfiprintf_r+0x1fe>
 8006952:	89ab      	ldrh	r3, [r5, #12]
 8006954:	059a      	lsls	r2, r3, #22
 8006956:	d402      	bmi.n	800695e <_vfiprintf_r+0x1fe>
 8006958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800695a:	f7ff f9a7 	bl	8005cac <__retarget_lock_release_recursive>
 800695e:	89ab      	ldrh	r3, [r5, #12]
 8006960:	065b      	lsls	r3, r3, #25
 8006962:	f53f af1f 	bmi.w	80067a4 <_vfiprintf_r+0x44>
 8006966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006968:	e71e      	b.n	80067a8 <_vfiprintf_r+0x48>
 800696a:	ab03      	add	r3, sp, #12
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	462a      	mov	r2, r5
 8006970:	4b05      	ldr	r3, [pc, #20]	@ (8006988 <_vfiprintf_r+0x228>)
 8006972:	a904      	add	r1, sp, #16
 8006974:	4630      	mov	r0, r6
 8006976:	f7ff fc8d 	bl	8006294 <_printf_i>
 800697a:	e7e4      	b.n	8006946 <_vfiprintf_r+0x1e6>
 800697c:	0800704b 	.word	0x0800704b
 8006980:	08007055 	.word	0x08007055
 8006984:	00000000 	.word	0x00000000
 8006988:	0800673d 	.word	0x0800673d
 800698c:	08007051 	.word	0x08007051

08006990 <__swbuf_r>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	460e      	mov	r6, r1
 8006994:	4614      	mov	r4, r2
 8006996:	4605      	mov	r5, r0
 8006998:	b118      	cbz	r0, 80069a2 <__swbuf_r+0x12>
 800699a:	6a03      	ldr	r3, [r0, #32]
 800699c:	b90b      	cbnz	r3, 80069a2 <__swbuf_r+0x12>
 800699e:	f7ff f84b 	bl	8005a38 <__sinit>
 80069a2:	69a3      	ldr	r3, [r4, #24]
 80069a4:	60a3      	str	r3, [r4, #8]
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	071a      	lsls	r2, r3, #28
 80069aa:	d501      	bpl.n	80069b0 <__swbuf_r+0x20>
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	b943      	cbnz	r3, 80069c2 <__swbuf_r+0x32>
 80069b0:	4621      	mov	r1, r4
 80069b2:	4628      	mov	r0, r5
 80069b4:	f000 f82a 	bl	8006a0c <__swsetup_r>
 80069b8:	b118      	cbz	r0, 80069c2 <__swbuf_r+0x32>
 80069ba:	f04f 37ff 	mov.w	r7, #4294967295
 80069be:	4638      	mov	r0, r7
 80069c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	6922      	ldr	r2, [r4, #16]
 80069c6:	1a98      	subs	r0, r3, r2
 80069c8:	6963      	ldr	r3, [r4, #20]
 80069ca:	b2f6      	uxtb	r6, r6
 80069cc:	4283      	cmp	r3, r0
 80069ce:	4637      	mov	r7, r6
 80069d0:	dc05      	bgt.n	80069de <__swbuf_r+0x4e>
 80069d2:	4621      	mov	r1, r4
 80069d4:	4628      	mov	r0, r5
 80069d6:	f7ff fe01 	bl	80065dc <_fflush_r>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d1ed      	bne.n	80069ba <__swbuf_r+0x2a>
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	60a3      	str	r3, [r4, #8]
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	6022      	str	r2, [r4, #0]
 80069ea:	701e      	strb	r6, [r3, #0]
 80069ec:	6962      	ldr	r2, [r4, #20]
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d004      	beq.n	80069fe <__swbuf_r+0x6e>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	07db      	lsls	r3, r3, #31
 80069f8:	d5e1      	bpl.n	80069be <__swbuf_r+0x2e>
 80069fa:	2e0a      	cmp	r6, #10
 80069fc:	d1df      	bne.n	80069be <__swbuf_r+0x2e>
 80069fe:	4621      	mov	r1, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f7ff fdeb 	bl	80065dc <_fflush_r>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d0d9      	beq.n	80069be <__swbuf_r+0x2e>
 8006a0a:	e7d6      	b.n	80069ba <__swbuf_r+0x2a>

08006a0c <__swsetup_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4b29      	ldr	r3, [pc, #164]	@ (8006ab4 <__swsetup_r+0xa8>)
 8006a10:	4605      	mov	r5, r0
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	460c      	mov	r4, r1
 8006a16:	b118      	cbz	r0, 8006a20 <__swsetup_r+0x14>
 8006a18:	6a03      	ldr	r3, [r0, #32]
 8006a1a:	b90b      	cbnz	r3, 8006a20 <__swsetup_r+0x14>
 8006a1c:	f7ff f80c 	bl	8005a38 <__sinit>
 8006a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a24:	0719      	lsls	r1, r3, #28
 8006a26:	d422      	bmi.n	8006a6e <__swsetup_r+0x62>
 8006a28:	06da      	lsls	r2, r3, #27
 8006a2a:	d407      	bmi.n	8006a3c <__swsetup_r+0x30>
 8006a2c:	2209      	movs	r2, #9
 8006a2e:	602a      	str	r2, [r5, #0]
 8006a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3a:	e033      	b.n	8006aa4 <__swsetup_r+0x98>
 8006a3c:	0758      	lsls	r0, r3, #29
 8006a3e:	d512      	bpl.n	8006a66 <__swsetup_r+0x5a>
 8006a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a42:	b141      	cbz	r1, 8006a56 <__swsetup_r+0x4a>
 8006a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a48:	4299      	cmp	r1, r3
 8006a4a:	d002      	beq.n	8006a52 <__swsetup_r+0x46>
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f7ff f95b 	bl	8005d08 <_free_r>
 8006a52:	2300      	movs	r3, #0
 8006a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6063      	str	r3, [r4, #4]
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	f043 0308 	orr.w	r3, r3, #8
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	b94b      	cbnz	r3, 8006a86 <__swsetup_r+0x7a>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a7c:	d003      	beq.n	8006a86 <__swsetup_r+0x7a>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 f88b 	bl	8006b9c <__smakebuf_r>
 8006a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8a:	f013 0201 	ands.w	r2, r3, #1
 8006a8e:	d00a      	beq.n	8006aa6 <__swsetup_r+0x9a>
 8006a90:	2200      	movs	r2, #0
 8006a92:	60a2      	str	r2, [r4, #8]
 8006a94:	6962      	ldr	r2, [r4, #20]
 8006a96:	4252      	negs	r2, r2
 8006a98:	61a2      	str	r2, [r4, #24]
 8006a9a:	6922      	ldr	r2, [r4, #16]
 8006a9c:	b942      	cbnz	r2, 8006ab0 <__swsetup_r+0xa4>
 8006a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006aa2:	d1c5      	bne.n	8006a30 <__swsetup_r+0x24>
 8006aa4:	bd38      	pop	{r3, r4, r5, pc}
 8006aa6:	0799      	lsls	r1, r3, #30
 8006aa8:	bf58      	it	pl
 8006aaa:	6962      	ldrpl	r2, [r4, #20]
 8006aac:	60a2      	str	r2, [r4, #8]
 8006aae:	e7f4      	b.n	8006a9a <__swsetup_r+0x8e>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e7f7      	b.n	8006aa4 <__swsetup_r+0x98>
 8006ab4:	20000074 	.word	0x20000074

08006ab8 <_raise_r>:
 8006ab8:	291f      	cmp	r1, #31
 8006aba:	b538      	push	{r3, r4, r5, lr}
 8006abc:	4605      	mov	r5, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	d904      	bls.n	8006acc <_raise_r+0x14>
 8006ac2:	2316      	movs	r3, #22
 8006ac4:	6003      	str	r3, [r0, #0]
 8006ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ace:	b112      	cbz	r2, 8006ad6 <_raise_r+0x1e>
 8006ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ad4:	b94b      	cbnz	r3, 8006aea <_raise_r+0x32>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 f830 	bl	8006b3c <_getpid_r>
 8006adc:	4622      	mov	r2, r4
 8006ade:	4601      	mov	r1, r0
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae6:	f000 b817 	b.w	8006b18 <_kill_r>
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d00a      	beq.n	8006b04 <_raise_r+0x4c>
 8006aee:	1c59      	adds	r1, r3, #1
 8006af0:	d103      	bne.n	8006afa <_raise_r+0x42>
 8006af2:	2316      	movs	r3, #22
 8006af4:	6003      	str	r3, [r0, #0]
 8006af6:	2001      	movs	r0, #1
 8006af8:	e7e7      	b.n	8006aca <_raise_r+0x12>
 8006afa:	2100      	movs	r1, #0
 8006afc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006b00:	4620      	mov	r0, r4
 8006b02:	4798      	blx	r3
 8006b04:	2000      	movs	r0, #0
 8006b06:	e7e0      	b.n	8006aca <_raise_r+0x12>

08006b08 <raise>:
 8006b08:	4b02      	ldr	r3, [pc, #8]	@ (8006b14 <raise+0xc>)
 8006b0a:	4601      	mov	r1, r0
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	f7ff bfd3 	b.w	8006ab8 <_raise_r>
 8006b12:	bf00      	nop
 8006b14:	20000074 	.word	0x20000074

08006b18 <_kill_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4d07      	ldr	r5, [pc, #28]	@ (8006b38 <_kill_r+0x20>)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4604      	mov	r4, r0
 8006b20:	4608      	mov	r0, r1
 8006b22:	4611      	mov	r1, r2
 8006b24:	602b      	str	r3, [r5, #0]
 8006b26:	f7fb fb2f 	bl	8002188 <_kill>
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	d102      	bne.n	8006b34 <_kill_r+0x1c>
 8006b2e:	682b      	ldr	r3, [r5, #0]
 8006b30:	b103      	cbz	r3, 8006b34 <_kill_r+0x1c>
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	bd38      	pop	{r3, r4, r5, pc}
 8006b36:	bf00      	nop
 8006b38:	2000258c 	.word	0x2000258c

08006b3c <_getpid_r>:
 8006b3c:	f7fb bb1c 	b.w	8002178 <_getpid>

08006b40 <_malloc_usable_size_r>:
 8006b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b44:	1f18      	subs	r0, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bfbc      	itt	lt
 8006b4a:	580b      	ldrlt	r3, [r1, r0]
 8006b4c:	18c0      	addlt	r0, r0, r3
 8006b4e:	4770      	bx	lr

08006b50 <__swhatbuf_r>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	460c      	mov	r4, r1
 8006b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	b096      	sub	sp, #88	@ 0x58
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	461e      	mov	r6, r3
 8006b60:	da0d      	bge.n	8006b7e <__swhatbuf_r+0x2e>
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b68:	f04f 0100 	mov.w	r1, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2340      	movne	r3, #64	@ 0x40
 8006b70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b74:	2000      	movs	r0, #0
 8006b76:	6031      	str	r1, [r6, #0]
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	b016      	add	sp, #88	@ 0x58
 8006b7c:	bd70      	pop	{r4, r5, r6, pc}
 8006b7e:	466a      	mov	r2, sp
 8006b80:	f000 f848 	bl	8006c14 <_fstat_r>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	dbec      	blt.n	8006b62 <__swhatbuf_r+0x12>
 8006b88:	9901      	ldr	r1, [sp, #4]
 8006b8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b92:	4259      	negs	r1, r3
 8006b94:	4159      	adcs	r1, r3
 8006b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b9a:	e7eb      	b.n	8006b74 <__swhatbuf_r+0x24>

08006b9c <__smakebuf_r>:
 8006b9c:	898b      	ldrh	r3, [r1, #12]
 8006b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba0:	079d      	lsls	r5, r3, #30
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	d507      	bpl.n	8006bb8 <__smakebuf_r+0x1c>
 8006ba8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	6123      	str	r3, [r4, #16]
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	6163      	str	r3, [r4, #20]
 8006bb4:	b003      	add	sp, #12
 8006bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb8:	ab01      	add	r3, sp, #4
 8006bba:	466a      	mov	r2, sp
 8006bbc:	f7ff ffc8 	bl	8006b50 <__swhatbuf_r>
 8006bc0:	9f00      	ldr	r7, [sp, #0]
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f7ff f912 	bl	8005df0 <_malloc_r>
 8006bcc:	b948      	cbnz	r0, 8006be2 <__smakebuf_r+0x46>
 8006bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd2:	059a      	lsls	r2, r3, #22
 8006bd4:	d4ee      	bmi.n	8006bb4 <__smakebuf_r+0x18>
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	f043 0302 	orr.w	r3, r3, #2
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	e7e2      	b.n	8006ba8 <__smakebuf_r+0xc>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	6020      	str	r0, [r4, #0]
 8006be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	9b01      	ldr	r3, [sp, #4]
 8006bee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bf2:	b15b      	cbz	r3, 8006c0c <__smakebuf_r+0x70>
 8006bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 f81d 	bl	8006c38 <_isatty_r>
 8006bfe:	b128      	cbz	r0, 8006c0c <__smakebuf_r+0x70>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	431d      	orrs	r5, r3
 8006c10:	81a5      	strh	r5, [r4, #12]
 8006c12:	e7cf      	b.n	8006bb4 <__smakebuf_r+0x18>

08006c14 <_fstat_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4d07      	ldr	r5, [pc, #28]	@ (8006c34 <_fstat_r+0x20>)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f7fb fb11 	bl	8002248 <_fstat>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d102      	bne.n	8006c30 <_fstat_r+0x1c>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	b103      	cbz	r3, 8006c30 <_fstat_r+0x1c>
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	bd38      	pop	{r3, r4, r5, pc}
 8006c32:	bf00      	nop
 8006c34:	2000258c 	.word	0x2000258c

08006c38 <_isatty_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d06      	ldr	r5, [pc, #24]	@ (8006c54 <_isatty_r+0x1c>)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7fb fb10 	bl	8002268 <_isatty>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_isatty_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_isatty_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	2000258c 	.word	0x2000258c

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
