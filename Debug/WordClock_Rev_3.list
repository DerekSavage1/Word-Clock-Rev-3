
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005184  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800568c  0800568c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005694  08005694  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800569c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  20000088  08005724  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  08005724  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c89c  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ff  00000000  00000000  0002c954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a9d  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed3d  00000000  00000000  00047d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d33  00000000  00000000  00056a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  000e97c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800530c 	.word	0x0800530c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800530c 	.word	0x0800530c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <getRainbowColor>:
 *      Author: dsava
 */

#include "Bitmap_Display.h"

uint32_t getRainbowColor(uint8_t colorOption) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    switch (colorOption) {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d84a      	bhi.n	800063c <getRainbowColor+0xa8>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <getRainbowColor+0x18>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	080005f3 	.word	0x080005f3
 80005b4:	080005f7 	.word	0x080005f7
 80005b8:	080005fb 	.word	0x080005fb
 80005bc:	080005ff 	.word	0x080005ff
 80005c0:	08000605 	.word	0x08000605
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000611 	.word	0x08000611
 80005cc:	08000617 	.word	0x08000617
 80005d0:	0800061b 	.word	0x0800061b
 80005d4:	0800061f 	.word	0x0800061f
 80005d8:	08000625 	.word	0x08000625
 80005dc:	08000629 	.word	0x08000629
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	08000631 	.word	0x08000631
 80005e8:	08000637 	.word	0x08000637
        case 1:
            return 0xFF0000; // Red
 80005ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80005f0:	e026      	b.n	8000640 <getRainbowColor+0xac>
        case 2:
            return 0xFF7F00; // Orange
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <getRainbowColor+0xb8>)
 80005f4:	e024      	b.n	8000640 <getRainbowColor+0xac>
        case 3:
            return 0xFFFF00; // Yellow
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <getRainbowColor+0xbc>)
 80005f8:	e022      	b.n	8000640 <getRainbowColor+0xac>
        case 4:
            return 0x7FFF00; // Yellow-Green
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <getRainbowColor+0xc0>)
 80005fc:	e020      	b.n	8000640 <getRainbowColor+0xac>
        case 5:
            return 0x00FF00; // Green
 80005fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000602:	e01d      	b.n	8000640 <getRainbowColor+0xac>
        case 6:
            return 0x00FF7F; // Spring Green
 8000604:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000608:	e01a      	b.n	8000640 <getRainbowColor+0xac>
        case 7:
            return 0x00FFFF; // Cyan
 800060a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060e:	e017      	b.n	8000640 <getRainbowColor+0xac>
        case 8:
            return 0x007FFF; // Sky Blue
 8000610:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000614:	e014      	b.n	8000640 <getRainbowColor+0xac>
        case 9:
            return 0x0000FF; // Blue
 8000616:	23ff      	movs	r3, #255	; 0xff
 8000618:	e012      	b.n	8000640 <getRainbowColor+0xac>
        case 10:
            return 0x7F00FF; // Violet
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <getRainbowColor+0xc4>)
 800061c:	e010      	b.n	8000640 <getRainbowColor+0xac>
        case 11:
            return 0xFF00FF; // Magenta
 800061e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8000622:	e00d      	b.n	8000640 <getRainbowColor+0xac>
        case 12:
            return 0xFF007F; // Rose
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <getRainbowColor+0xc8>)
 8000626:	e00b      	b.n	8000640 <getRainbowColor+0xac>
        case 13:
            return 0xFF1493; // Deep Pink
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <getRainbowColor+0xcc>)
 800062a:	e009      	b.n	8000640 <getRainbowColor+0xac>
        case 14:
            return 0xC71585; // Medium Violet Red
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <getRainbowColor+0xd0>)
 800062e:	e007      	b.n	8000640 <getRainbowColor+0xac>
        case 15:
            return 0x800080; // Purple
 8000630:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
 8000634:	e004      	b.n	8000640 <getRainbowColor+0xac>
        case 16:
            return 0x8B008B; // Dark Magenta
 8000636:	f04f 138b 	mov.w	r3, #9109643	; 0x8b008b
 800063a:	e001      	b.n	8000640 <getRainbowColor+0xac>
        default:
            return 0xFFFFFF; // Default to White if an unexpected value is provided
 800063c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    }
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	00ff7f00 	.word	0x00ff7f00
 8000650:	00ffff00 	.word	0x00ffff00
 8000654:	007fff00 	.word	0x007fff00
 8000658:	007f00ff 	.word	0x007f00ff
 800065c:	00ff007f 	.word	0x00ff007f
 8000660:	00ff1493 	.word	0x00ff1493
 8000664:	00c71585 	.word	0x00c71585

08000668 <clear_display_buffer>:
    MINUTE_THIRTY
};

unsigned char displayBuffer[12][11] = {0}; // Adjust the buffer to be 12 rows by 11 columns

void clear_display_buffer() {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
    for (int row = 0; row < 12; row++) {
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	e017      	b.n	80006a4 <clear_display_buffer+0x3c>
        for (int col = 0; col < 11; col++) {
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	e00e      	b.n	8000698 <clear_display_buffer+0x30>
            displayBuffer[row][col] = 0; // Clear the bit in the display buffer
 800067a:	490f      	ldr	r1, [pc, #60]	; (80006b8 <clear_display_buffer+0x50>)
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	18ca      	adds	r2, r1, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) {
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	2b0a      	cmp	r3, #10
 800069c:	dded      	ble.n	800067a <clear_display_buffer+0x12>
    for (int row = 0; row < 12; row++) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b0b      	cmp	r3, #11
 80006a8:	dde4      	ble.n	8000674 <clear_display_buffer+0xc>
        }
    }
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	200000a4 	.word	0x200000a4

080006bc <add_bmp>:

void add_bmp(const uint16_t bmp[12]) {
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    for (int row = 0; row < 12; row++) { // Loop over each row
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e032      	b.n	8000730 <add_bmp+0x74>
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e029      	b.n	8000724 <add_bmp+0x68>
            if ((bmp[row] & (1 << col)) != 0) { // Check if the bit is set in bmp at (row, col)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	fa42 f303 	asr.w	r3, r2, r3
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d019      	beq.n	800071e <add_bmp+0x62>
                displayBuffer[row][col] |= 1; // Set the bit in the display buffer
 80006ea:	4916      	ldr	r1, [pc, #88]	; (8000744 <add_bmp+0x88>)
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	18ca      	adds	r2, r1, r3
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	b2d8      	uxtb	r0, r3
 8000706:	490f      	ldr	r1, [pc, #60]	; (8000744 <add_bmp+0x88>)
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	18ca      	adds	r2, r1, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	4602      	mov	r2, r0
 800071c:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3301      	adds	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b0a      	cmp	r3, #10
 8000728:	ddd2      	ble.n	80006d0 <add_bmp+0x14>
    for (int row = 0; row < 12; row++) { // Loop over each row
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b0b      	cmp	r3, #11
 8000734:	ddc9      	ble.n	80006ca <add_bmp+0xe>
            }
        }
    }
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	200000a4 	.word	0x200000a4

08000748 <display_bmp>:

void display_bmp(uint32_t preset) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

	uint32_t color = getRainbowColor(preset);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff1d 	bl	8000594 <getRainbowColor>
 800075a:	60f8      	str	r0, [r7, #12]
    // Extract the red, green, and blue components from the color
    uint8_t red = (color >> 16) & 0xFF;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	72fb      	strb	r3, [r7, #11]
    uint8_t green = (color >> 8) & 0xFF;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	72bb      	strb	r3, [r7, #10]
    uint8_t blue = color & 0xFF;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	727b      	strb	r3, [r7, #9]

    for (int row = 0; row < 12; row++) {
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e035      	b.n	80007de <display_bmp+0x96>
        for (int col = 0; col < 11; col++) {
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	e02c      	b.n	80007d2 <display_bmp+0x8a>
            if (displayBuffer[row][col] & 1) { // Check if the bit is set
 8000778:	491d      	ldr	r1, [pc, #116]	; (80007f0 <display_bmp+0xa8>)
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	18ca      	adds	r2, r1, r3
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00d      	beq.n	80007b2 <display_bmp+0x6a>
                // Set the LED to the specified color
                Set_LED((row * 11) + col, red, green, blue);
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	441a      	add	r2, r3
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	18d0      	adds	r0, r2, r3
 80007a6:	7af9      	ldrb	r1, [r7, #11]
 80007a8:	7aba      	ldrb	r2, [r7, #10]
 80007aa:	7a7b      	ldrb	r3, [r7, #9]
 80007ac:	f004 f83c 	bl	8004828 <Set_LED>
 80007b0:	e00c      	b.n	80007cc <display_bmp+0x84>
            } else {
                // Turn the LED off
                Set_LED((row * 11) + col, 0, 0, 0);
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	441a      	add	r2, r3
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	18d0      	adds	r0, r2, r3
 80007c2:	2300      	movs	r3, #0
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	f004 f82e 	bl	8004828 <Set_LED>
        for (int col = 0; col < 11; col++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b0a      	cmp	r3, #10
 80007d6:	ddcf      	ble.n	8000778 <display_bmp+0x30>
    for (int row = 0; row < 12; row++) {
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	2b0b      	cmp	r3, #11
 80007e2:	ddc6      	ble.n	8000772 <display_bmp+0x2a>
            }
        }
    }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000a4 	.word	0x200000a4

080007f4 <display_time>:



void display_time(int hour, int minute) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	add_bmp(BMP_ITS);
 80007fe:	4859      	ldr	r0, [pc, #356]	; (8000964 <display_time+0x170>)
 8000800:	f7ff ff5c 	bl	80006bc <add_bmp>
    // Round down to the nearest five minutes
    minute = (minute / 5) * 5;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	4a58      	ldr	r2, [pc, #352]	; (8000968 <display_time+0x174>)
 8000808:	fb82 1203 	smull	r1, r2, r2, r3
 800080c:	1052      	asrs	r2, r2, #1
 800080e:	17db      	asrs	r3, r3, #31
 8000810:	1ad2      	subs	r2, r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	603b      	str	r3, [r7, #0]

    // Display minute, accounting for 'past' or 'to'
    if (minute < 5) {
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b04      	cmp	r3, #4
 800081e:	dd10      	ble.n	8000842 <display_time+0x4e>
    	//no past or till
    } else if (minute < 35) {
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	2b22      	cmp	r3, #34	; 0x22
 8000824:	dc03      	bgt.n	800082e <display_time+0x3a>
        add_bmp(BMP_PAST);
 8000826:	4851      	ldr	r0, [pc, #324]	; (800096c <display_time+0x178>)
 8000828:	f7ff ff48 	bl	80006bc <add_bmp>
 800082c:	e009      	b.n	8000842 <display_time+0x4e>
    } else {
        minute = 60 - minute;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000834:	603b      	str	r3, [r7, #0]
        hour++;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3301      	adds	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
        add_bmp(BMP_TILL);
 800083c:	484c      	ldr	r0, [pc, #304]	; (8000970 <display_time+0x17c>)
 800083e:	f7ff ff3d 	bl	80006bc <add_bmp>
    }

    if(hour == 0 || hour == 12);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00c      	beq.n	8000862 <display_time+0x6e>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d009      	beq.n	8000862 <display_time+0x6e>
    else if(hour < 12) add_bmp(BMP_AM);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0b      	cmp	r3, #11
 8000852:	dc03      	bgt.n	800085c <display_time+0x68>
 8000854:	4847      	ldr	r0, [pc, #284]	; (8000974 <display_time+0x180>)
 8000856:	f7ff ff31 	bl	80006bc <add_bmp>
 800085a:	e002      	b.n	8000862 <display_time+0x6e>
    else add_bmp(BMP_PM);
 800085c:	4846      	ldr	r0, [pc, #280]	; (8000978 <display_time+0x184>)
 800085e:	f7ff ff2d 	bl	80006bc <add_bmp>

    // Display hour
    switch(hour) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b17      	cmp	r3, #23
 8000866:	d867      	bhi.n	8000938 <display_time+0x144>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <display_time+0x7c>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	080008d1 	.word	0x080008d1
 8000874:	080008d9 	.word	0x080008d9
 8000878:	080008e1 	.word	0x080008e1
 800087c:	080008e9 	.word	0x080008e9
 8000880:	080008f1 	.word	0x080008f1
 8000884:	080008f9 	.word	0x080008f9
 8000888:	08000901 	.word	0x08000901
 800088c:	08000909 	.word	0x08000909
 8000890:	08000911 	.word	0x08000911
 8000894:	08000919 	.word	0x08000919
 8000898:	08000921 	.word	0x08000921
 800089c:	08000929 	.word	0x08000929
 80008a0:	08000931 	.word	0x08000931
 80008a4:	080008d9 	.word	0x080008d9
 80008a8:	080008e1 	.word	0x080008e1
 80008ac:	080008e9 	.word	0x080008e9
 80008b0:	080008f1 	.word	0x080008f1
 80008b4:	080008f9 	.word	0x080008f9
 80008b8:	08000901 	.word	0x08000901
 80008bc:	08000909 	.word	0x08000909
 80008c0:	08000911 	.word	0x08000911
 80008c4:	08000919 	.word	0x08000919
 80008c8:	08000921 	.word	0x08000921
 80008cc:	08000929 	.word	0x08000929
        case 0:
            add_bmp(HOUR_MIDNIGHT);
 80008d0:	482a      	ldr	r0, [pc, #168]	; (800097c <display_time+0x188>)
 80008d2:	f7ff fef3 	bl	80006bc <add_bmp>
            break;
 80008d6:	e030      	b.n	800093a <display_time+0x146>
        case 1:
        case 13:
            add_bmp(HOUR_ONE);
 80008d8:	4829      	ldr	r0, [pc, #164]	; (8000980 <display_time+0x18c>)
 80008da:	f7ff feef 	bl	80006bc <add_bmp>
            break;
 80008de:	e02c      	b.n	800093a <display_time+0x146>
        case 2:
        case 14:
            add_bmp(HOUR_TWO);
 80008e0:	4828      	ldr	r0, [pc, #160]	; (8000984 <display_time+0x190>)
 80008e2:	f7ff feeb 	bl	80006bc <add_bmp>
            break;
 80008e6:	e028      	b.n	800093a <display_time+0x146>
        case 3:
        case 15:
            add_bmp(HOUR_THREE);
 80008e8:	4827      	ldr	r0, [pc, #156]	; (8000988 <display_time+0x194>)
 80008ea:	f7ff fee7 	bl	80006bc <add_bmp>
            break;
 80008ee:	e024      	b.n	800093a <display_time+0x146>
        case 4:
        case 16:
            add_bmp(HOUR_FOUR);
 80008f0:	4826      	ldr	r0, [pc, #152]	; (800098c <display_time+0x198>)
 80008f2:	f7ff fee3 	bl	80006bc <add_bmp>
            break;
 80008f6:	e020      	b.n	800093a <display_time+0x146>
        case 5:
        case 17:
            add_bmp(HOUR_FIVE);
 80008f8:	4825      	ldr	r0, [pc, #148]	; (8000990 <display_time+0x19c>)
 80008fa:	f7ff fedf 	bl	80006bc <add_bmp>
            break;
 80008fe:	e01c      	b.n	800093a <display_time+0x146>
        case 6:
        case 18:
            add_bmp(HOUR_SIX);
 8000900:	4824      	ldr	r0, [pc, #144]	; (8000994 <display_time+0x1a0>)
 8000902:	f7ff fedb 	bl	80006bc <add_bmp>
            break;
 8000906:	e018      	b.n	800093a <display_time+0x146>
        case 7:
        case 19:
            add_bmp(HOUR_SEVEN);
 8000908:	4823      	ldr	r0, [pc, #140]	; (8000998 <display_time+0x1a4>)
 800090a:	f7ff fed7 	bl	80006bc <add_bmp>
            break;
 800090e:	e014      	b.n	800093a <display_time+0x146>
        case 8:
        case 20:
            add_bmp(HOUR_EIGHT);
 8000910:	4822      	ldr	r0, [pc, #136]	; (800099c <display_time+0x1a8>)
 8000912:	f7ff fed3 	bl	80006bc <add_bmp>
            break;
 8000916:	e010      	b.n	800093a <display_time+0x146>
        case 9:
        case 21:
            add_bmp(HOUR_NINE);
 8000918:	4821      	ldr	r0, [pc, #132]	; (80009a0 <display_time+0x1ac>)
 800091a:	f7ff fecf 	bl	80006bc <add_bmp>
            break;
 800091e:	e00c      	b.n	800093a <display_time+0x146>
        case 10:
        case 22:
            add_bmp(HOUR_TEN);
 8000920:	4820      	ldr	r0, [pc, #128]	; (80009a4 <display_time+0x1b0>)
 8000922:	f7ff fecb 	bl	80006bc <add_bmp>
            break;
 8000926:	e008      	b.n	800093a <display_time+0x146>
        case 11:
        case 23:
            add_bmp(HOUR_ELEVEN);
 8000928:	481f      	ldr	r0, [pc, #124]	; (80009a8 <display_time+0x1b4>)
 800092a:	f7ff fec7 	bl	80006bc <add_bmp>
            break;
 800092e:	e004      	b.n	800093a <display_time+0x146>
        case 12:
            add_bmp(HOUR_NOON);
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <display_time+0x1b8>)
 8000932:	f7ff fec3 	bl	80006bc <add_bmp>
            break;
 8000936:	e000      	b.n	800093a <display_time+0x146>
        default:
            // Handle error or invalid hour
            break;
 8000938:	bf00      	nop
    }

    // Display minute in intervals of five using an array pointing to the bitmaps
    if (minute > 0) {
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	dd0d      	ble.n	800095c <display_time+0x168>
        add_bmp(minuteBitmaps[(minute / 5) - 1]);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <display_time+0x174>)
 8000944:	fb82 1203 	smull	r1, r2, r2, r3
 8000948:	1052      	asrs	r2, r2, #1
 800094a:	17db      	asrs	r3, r3, #31
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	3b01      	subs	r3, #1
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <display_time+0x1bc>)
 8000952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff feb0 	bl	80006bc <add_bmp>
    }
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	0800550c 	.word	0x0800550c
 8000968:	66666667 	.word	0x66666667
 800096c:	08005524 	.word	0x08005524
 8000970:	0800553c 	.word	0x0800553c
 8000974:	080055b4 	.word	0x080055b4
 8000978:	080055cc 	.word	0x080055cc
 800097c:	08005464 	.word	0x08005464
 8000980:	08005344 	.word	0x08005344
 8000984:	0800535c 	.word	0x0800535c
 8000988:	08005374 	.word	0x08005374
 800098c:	0800538c 	.word	0x0800538c
 8000990:	080053a4 	.word	0x080053a4
 8000994:	080053bc 	.word	0x080053bc
 8000998:	080053d4 	.word	0x080053d4
 800099c:	080053ec 	.word	0x080053ec
 80009a0:	08005404 	.word	0x08005404
 80009a4:	0800541c 	.word	0x0800541c
 80009a8:	08005434 	.word	0x08005434
 80009ac:	0800544c 	.word	0x0800544c
 80009b0:	20000000 	.word	0x20000000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	b099      	sub	sp, #100	; 0x64
 80009b8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ba:	f000 ff03 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f000 f95f 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f000 fae1 	bl	8000f88 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c6:	f000 fabf 	bl	8000f48 <MX_DMA_Init>
  MX_TIM1_Init();
 80009ca:	f000 fa1d 	bl	8000e08 <MX_TIM1_Init>
  MX_RTC_Init();
 80009ce:	f000 f9c1 	bl	8000d54 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  bool hours_set = false;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bool minutes_set = false;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  bool color_set = false;
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t color_preset = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    /* USER CODE BEGIN 3 */


		// Update the RTC structure with the current time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // or RTC_FORMAT_BCD depending on your setting
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4899      	ldr	r0, [pc, #612]	; (8000c58 <main+0x2a4>)
 80009f4:	f002 fc12 	bl	800321c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This line is required to unlock the shadow registers
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	4619      	mov	r1, r3
 8000a00:	4895      	ldr	r0, [pc, #596]	; (8000c58 <main+0x2a4>)
 8000a02:	f002 fced 	bl	80033e0 <HAL_RTC_GetDate>



	    char displayStr[6]; // Buffer for "00:00" plus null terminator

	    switch (button_state) {
 8000a06:	4b95      	ldr	r3, [pc, #596]	; (8000c5c <main+0x2a8>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	f200 80ec 	bhi.w	8000bea <main+0x236>
 8000a12:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <main+0x64>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000a29 	.word	0x08000a29
 8000a1c:	08000a43 	.word	0x08000a43
 8000a20:	08000adb 	.word	0x08000adb
 8000a24:	08000b7d 	.word	0x08000b7d
	        case 0:
	            // Default state, should not display anything.
	            Segment_Display("STRT");
 8000a28:	488d      	ldr	r0, [pc, #564]	; (8000c60 <main+0x2ac>)
 8000a2a:	f000 fe2d 	bl	8001688 <Segment_Display>
	            hours_set = false;  // Reset hours_set flag
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	            minutes_set = false;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	            color_set = false;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	            break;
 8000a40:	e0da      	b.n	8000bf8 <main+0x244>
	        case 1:
	        	if(!hours_set) {
 8000a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a46:	f083 0301 	eor.w	r3, r3, #1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00b      	beq.n	8000a68 <main+0xb4>
	        		encoder_count = (sTime.Hours * 10);
 8000a50:	7c3b      	ldrb	r3, [r7, #16]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4613      	mov	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b81      	ldr	r3, [pc, #516]	; (8000c64 <main+0x2b0>)
 8000a60:	601a      	str	r2, [r3, #0]
	        		hours_set = true;
 8000a62:	2301      	movs	r3, #1
 8000a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        	}

	        	if(encoder_count > 230) encoder_count = 230; // 23 * 10
 8000a68:	4b7e      	ldr	r3, [pc, #504]	; (8000c64 <main+0x2b0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2be6      	cmp	r3, #230	; 0xe6
 8000a6e:	dd02      	ble.n	8000a76 <main+0xc2>
 8000a70:	4b7c      	ldr	r3, [pc, #496]	; (8000c64 <main+0x2b0>)
 8000a72:	22e6      	movs	r2, #230	; 0xe6
 8000a74:	601a      	str	r2, [r3, #0]
	        	if(encoder_count < 0) encoder_count = 0;
 8000a76:	4b7b      	ldr	r3, [pc, #492]	; (8000c64 <main+0x2b0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	da02      	bge.n	8000a84 <main+0xd0>
 8000a7e:	4b79      	ldr	r3, [pc, #484]	; (8000c64 <main+0x2b0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]

	        	sTime.Hours = encoder_count / 10; // Convert to actual hours by dividing by 10
 8000a84:	4b77      	ldr	r3, [pc, #476]	; (8000c64 <main+0x2b0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a77      	ldr	r2, [pc, #476]	; (8000c68 <main+0x2b4>)
 8000a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8e:	1092      	asrs	r2, r2, #2
 8000a90:	17db      	asrs	r3, r3, #31
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	743b      	strb	r3, [r7, #16]
	        	sTime.Minutes = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	747b      	strb	r3, [r7, #17]
	        	sTime.Seconds = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	74bb      	strb	r3, [r7, #18]
	        	snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000aa0:	7c3b      	ldrb	r3, [r7, #16]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	7c7b      	ldrb	r3, [r7, #17]
 8000aa6:	1d38      	adds	r0, r7, #4
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	4a6f      	ldr	r2, [pc, #444]	; (8000c6c <main+0x2b8>)
 8000aae:	2106      	movs	r1, #6
 8000ab0:	f003 ffaa 	bl	8004a08 <sniprintf>
	        	Segment_Display(displayStr);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fde6 	bl	8001688 <Segment_Display>

        		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4864      	ldr	r0, [pc, #400]	; (8000c58 <main+0x2a4>)
 8000ac6:	f002 fb0f 	bl	80030e8 <HAL_RTC_SetTime>
        		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4861      	ldr	r0, [pc, #388]	; (8000c58 <main+0x2a4>)
 8000ad4:	f002 fc00 	bl	80032d8 <HAL_RTC_SetDate>
	            break;
 8000ad8:	e08e      	b.n	8000bf8 <main+0x244>
	        case 2:
	        	if(!minutes_set) {
 8000ada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ade:	f083 0301 	eor.w	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <main+0x14c>
	        		encoder_count = sTime.Minutes * 10;
 8000ae8:	7c7b      	ldrb	r3, [r7, #17]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b5b      	ldr	r3, [pc, #364]	; (8000c64 <main+0x2b0>)
 8000af8:	601a      	str	r2, [r3, #0]
	        		minutes_set = true;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	        	}
	            sTime.Minutes = encoder_count;
 8000b00:	4b58      	ldr	r3, [pc, #352]	; (8000c64 <main+0x2b0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	747b      	strb	r3, [r7, #17]
	            sTime.Seconds = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	74bb      	strb	r3, [r7, #18]

	            if(encoder_count > 590) encoder_count = 590;  // 59 * 10
 8000b0c:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <main+0x2b0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f240 224e 	movw	r2, #590	; 0x24e
 8000b14:	4293      	cmp	r3, r2
 8000b16:	dd03      	ble.n	8000b20 <main+0x16c>
 8000b18:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <main+0x2b0>)
 8000b1a:	f240 224e 	movw	r2, #590	; 0x24e
 8000b1e:	601a      	str	r2, [r3, #0]
	            if(encoder_count < 0) encoder_count = 0;
 8000b20:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <main+0x2b0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da02      	bge.n	8000b2e <main+0x17a>
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <main+0x2b0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]

	            sTime.Minutes = encoder_count / 10;
 8000b2e:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <main+0x2b0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a4d      	ldr	r2, [pc, #308]	; (8000c68 <main+0x2b4>)
 8000b34:	fb82 1203 	smull	r1, r2, r2, r3
 8000b38:	1092      	asrs	r2, r2, #2
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	747b      	strb	r3, [r7, #17]

	            snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000b42:	7c3b      	ldrb	r3, [r7, #16]
 8000b44:	461a      	mov	r2, r3
 8000b46:	7c7b      	ldrb	r3, [r7, #17]
 8000b48:	1d38      	adds	r0, r7, #4
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	4a47      	ldr	r2, [pc, #284]	; (8000c6c <main+0x2b8>)
 8000b50:	2106      	movs	r1, #6
 8000b52:	f003 ff59 	bl	8004a08 <sniprintf>
	            Segment_Display(displayStr);
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fd95 	bl	8001688 <Segment_Display>

        		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2200      	movs	r2, #0
 8000b64:	4619      	mov	r1, r3
 8000b66:	483c      	ldr	r0, [pc, #240]	; (8000c58 <main+0x2a4>)
 8000b68:	f002 fabe 	bl	80030e8 <HAL_RTC_SetTime>
        		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	4619      	mov	r1, r3
 8000b74:	4838      	ldr	r0, [pc, #224]	; (8000c58 <main+0x2a4>)
 8000b76:	f002 fbaf 	bl	80032d8 <HAL_RTC_SetDate>
	            break;
 8000b7a:	e03d      	b.n	8000bf8 <main+0x244>
	        case 3:
	        	if(!color_set) {
 8000b7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b80:	f083 0301 	eor.w	r3, r3, #1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <main+0x1e2>
	        		encoder_count = 0;
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <main+0x2b0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
	        		color_set = true;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	        	}

	            if(encoder_count > 160) encoder_count = 160; // 160 * 10
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <main+0x2b0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2ba0      	cmp	r3, #160	; 0xa0
 8000b9c:	dd02      	ble.n	8000ba4 <main+0x1f0>
 8000b9e:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <main+0x2b0>)
 8000ba0:	22a0      	movs	r2, #160	; 0xa0
 8000ba2:	601a      	str	r2, [r3, #0]
	            if(encoder_count < 0) encoder_count = 0;
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <main+0x2b0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	da02      	bge.n	8000bb2 <main+0x1fe>
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <main+0x2b0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]

	            color_preset = (encoder_count / 10);
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <main+0x2b0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a2c      	ldr	r2, [pc, #176]	; (8000c68 <main+0x2b4>)
 8000bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbc:	1092      	asrs	r2, r2, #2
 8000bbe:	17db      	asrs	r3, r3, #31
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	        	snprintf(displayStr, sizeof(displayStr), "%04d", (encoder_count / 10));
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <main+0x2b0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <main+0x2b4>)
 8000bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd0:	1092      	asrs	r2, r2, #2
 8000bd2:	17db      	asrs	r3, r3, #31
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	1d38      	adds	r0, r7, #4
 8000bd8:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <main+0x2bc>)
 8000bda:	2106      	movs	r1, #6
 8000bdc:	f003 ff14 	bl	8004a08 <sniprintf>
	            Segment_Display(displayStr);
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fd50 	bl	8001688 <Segment_Display>
	        	break;
 8000be8:	e006      	b.n	8000bf8 <main+0x244>
	        case 4:

	        default:
	            Segment_Display("ERR");
 8000bea:	4822      	ldr	r0, [pc, #136]	; (8000c74 <main+0x2c0>)
 8000bec:	f000 fd4c 	bl	8001688 <Segment_Display>
	            button_state = 0;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <main+0x2a8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	            break;
 8000bf6:	bf00      	nop

	    }



	    HAL_GPIO_WritePin(GPIOA, LED_Pin, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfe:	481e      	ldr	r0, [pc, #120]	; (8000c78 <main+0x2c4>)
 8000c00:	f001 fcb6 	bl	8002570 <HAL_GPIO_WritePin>

	    HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fe4f 	bl	80018a8 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <main+0x2c4>)
 8000c12:	f001 fcad 	bl	8002570 <HAL_GPIO_WritePin>




	// Now you can safely use sTime to display the time or perform other operations
	display_time(sTime.Hours, sTime.Minutes);
 8000c16:	7c3b      	ldrb	r3, [r7, #16]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	7c7b      	ldrb	r3, [r7, #17]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4610      	mov	r0, r2
 8000c20:	f7ff fde8 	bl	80007f4 <display_time>
	display_bmp(color_preset);
 8000c24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd8d 	bl	8000748 <display_bmp>
	WS2812B_Send(htim1);
 8000c2e:	4e13      	ldr	r6, [pc, #76]	; (8000c7c <main+0x2c8>)
 8000c30:	466d      	mov	r5, sp
 8000c32:	f106 0410 	add.w	r4, r6, #16
 8000c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c46:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c4a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c4e:	f003 fe1b 	bl	8004888 <WS2812B_Send>

	clear_display_buffer();
 8000c52:	f7ff fd09 	bl	8000668 <clear_display_buffer>
  {
 8000c56:	e6c8      	b.n	80009ea <main+0x36>
 8000c58:	20000128 	.word	0x20000128
 8000c5c:	200001f5 	.word	0x200001f5
 8000c60:	08005324 	.word	0x08005324
 8000c64:	200001f0 	.word	0x200001f0
 8000c68:	66666667 	.word	0x66666667
 8000c6c:	0800532c 	.word	0x0800532c
 8000c70:	08005338 	.word	0x08005338
 8000c74:	08005340 	.word	0x08005340
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	20000148 	.word	0x20000148

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2230      	movs	r2, #48	; 0x30
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 feb2 	bl	80049f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <SystemClock_Config+0xcc>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cdc:	230a      	movs	r3, #10
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cf8:	2348      	movs	r3, #72	; 0x48
 8000cfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d00:	2304      	movs	r3, #4
 8000d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fc63 	bl	80025d4 <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d14:	f000 fa60 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	230f      	movs	r3, #15
 8000d1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2102      	movs	r1, #2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fec5 	bl	8002ac4 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d40:	f000 fa4a 	bl	80011d8 <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3750      	adds	r7, #80	; 0x50
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <MX_RTC_Init+0xac>)
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <MX_RTC_Init+0xb0>)
 8000d70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <MX_RTC_Init+0xac>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_RTC_Init+0xac>)
 8000d7a:	227f      	movs	r2, #127	; 0x7f
 8000d7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <MX_RTC_Init+0xac>)
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_RTC_Init+0xac>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_RTC_Init+0xac>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_RTC_Init+0xac>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d96:	481a      	ldr	r0, [pc, #104]	; (8000e00 <MX_RTC_Init+0xac>)
 8000d98:	f002 f930 	bl	8002ffc <HAL_RTC_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000da2:	f000 fa19 	bl	80011d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8000da6:	2307      	movs	r3, #7
 8000da8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 8000daa:	230f      	movs	r3, #15
 8000dac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 8000dae:	2332      	movs	r3, #50	; 0x32
 8000db0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480f      	ldr	r0, [pc, #60]	; (8000e00 <MX_RTC_Init+0xac>)
 8000dc2:	f002 f991 	bl	80030e8 <HAL_RTC_SetTime>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000dcc:	f000 fa04 	bl	80011d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 8000dd8:	2317      	movs	r3, #23
 8000dda:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8000ddc:	2318      	movs	r3, #24
 8000dde:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_RTC_Init+0xac>)
 8000de8:	f002 fa76 	bl	80032d8 <HAL_RTC_SetDate>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000df2:	f000 f9f1 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000128 	.word	0x20000128
 8000e04:	40002800 	.word	0x40002800

08000e08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b096      	sub	sp, #88	; 0x58
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	615a      	str	r2, [r3, #20]
 8000e38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 fdd9 	bl	80049f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e46:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e48:	4a3e      	ldr	r2, [pc, #248]	; (8000f44 <MX_TIM1_Init+0x13c>)
 8000e4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e4c:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e5a:	2259      	movs	r2, #89	; 0x59
 8000e5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e70:	4833      	ldr	r0, [pc, #204]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e72:	f002 fbc1 	bl	80035f8 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e7c:	f000 f9ac 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482c      	ldr	r0, [pc, #176]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e8e:	f002 ff93 	bl	8003db8 <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e98:	f000 f99e 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000e9e:	f002 fbfa 	bl	8003696 <HAL_TIM_PWM_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ea8:	f000 f996 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4821      	ldr	r0, [pc, #132]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000ebc:	f003 fbf4 	bl	80046a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ec6:	f000 f987 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eca:	2360      	movs	r3, #96	; 0x60
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	2200      	movs	r2, #0
 8000eec:	4619      	mov	r1, r3
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000ef0:	f002 fea0 	bl	8003c34 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000efa:	f000 f96d 	bl	80011d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000f22:	f003 fc2f 	bl	8004784 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000f2c:	f000 f954 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM1_Init+0x138>)
 8000f32:	f000 f9ff 	bl	8001334 <HAL_TIM_MspPostInit>

}
 8000f36:	bf00      	nop
 8000f38:	3758      	adds	r7, #88	; 0x58
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000148 	.word	0x20000148
 8000f44:	40010000 	.word	0x40010000

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2039      	movs	r0, #57	; 0x39
 8000f70:	f000 fd99 	bl	8001aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f74:	2039      	movs	r0, #57	; 0x39
 8000f76:	f000 fdb2 	bl	8001ade <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a3c      	ldr	r2, [pc, #240]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a35      	ldr	r2, [pc, #212]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_GPIO_Init+0x110>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8000ff8:	4828      	ldr	r0, [pc, #160]	; (800109c <MX_GPIO_Init+0x114>)
 8000ffa:	f001 fab9 	bl	8002570 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8000ffe:	2200      	movs	r2, #0
 8001000:	f241 4107 	movw	r1, #5127	; 0x1407
 8001004:	4826      	ldr	r0, [pc, #152]	; (80010a0 <MX_GPIO_Init+0x118>)
 8001006:	f001 fab3 	bl	8002570 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800100a:	f248 03ff 	movw	r3, #33023	; 0x80ff
 800100e:	60fb      	str	r3, [r7, #12]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	481e      	ldr	r0, [pc, #120]	; (800109c <MX_GPIO_Init+0x114>)
 8001024:	f001 f908 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001028:	f241 4307 	movw	r3, #5127	; 0x1407
 800102c:	60fb      	str	r3, [r7, #12]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4619      	mov	r1, r3
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_GPIO_Init+0x118>)
 8001042:	f001 f8f9 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_CH_A_Pin ENC_CH_B_Pin */
  GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CH_B_Pin;
 8001046:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800104a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800104c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	4810      	ldr	r0, [pc, #64]	; (80010a0 <MX_GPIO_Init+0x118>)
 800105e:	f001 f8eb 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001068:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MX_GPIO_Init+0x118>)
 800107a:	f001 f8dd 	bl	8002238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2028      	movs	r0, #40	; 0x28
 8001084:	f000 fd0f 	bl	8001aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001088:	2028      	movs	r0, #40	; 0x28
 800108a:	f000 fd28 	bl	8001ade <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400

080010a4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */

volatile int32_t a_count = 0;
volatile int32_t b_count = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
    uint8_t currentState;
    uint8_t aState;
    uint8_t bState;
    const uint32_t debounce_delay = 50;  // milliseconds
 80010ae:	2332      	movs	r3, #50	; 0x32
 80010b0:	617b      	str	r3, [r7, #20]

    // Read the current encoder states
    aState = HAL_GPIO_ReadPin(GPIOB, ENC_CH_A_Pin);
 80010b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b6:	4843      	ldr	r0, [pc, #268]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x120>)
 80010b8:	f001 fa42 	bl	8002540 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	74fb      	strb	r3, [r7, #19]
    bState = HAL_GPIO_ReadPin(GPIOB, ENC_CH_B_Pin);
 80010c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c4:	483f      	ldr	r0, [pc, #252]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x120>)
 80010c6:	f001 fa3b 	bl	8002540 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	74bb      	strb	r3, [r7, #18]
    currentState = (aState << 1) | bState;
 80010ce:	7cfb      	ldrb	r3, [r7, #19]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80010d8:	4313      	orrs	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	747b      	strb	r3, [r7, #17]

    // Only consider state changes if either A or B has generated an interrupt
    if ((GPIO_Pin == ENC_CH_A_Pin) || (GPIO_Pin == ENC_CH_B_Pin)) {
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_EXTI_Callback+0x4a>
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010ec:	d14e      	bne.n	800118c <HAL_GPIO_EXTI_Callback+0xe8>
        // Determine the rotation direction based on the state transition
        if ((lastState == 0x0 && currentState == 0x2) ||
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <HAL_GPIO_EXTI_Callback+0x5a>
 80010f8:	7c7b      	ldrb	r3, [r7, #17]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d017      	beq.n	800112e <HAL_GPIO_EXTI_Callback+0x8a>
            (lastState == 0x3 && currentState == 0x1) ||
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
        if ((lastState == 0x0 && currentState == 0x2) ||
 8001104:	2b03      	cmp	r3, #3
 8001106:	d102      	bne.n	800110e <HAL_GPIO_EXTI_Callback+0x6a>
            (lastState == 0x3 && currentState == 0x1) ||
 8001108:	7c7b      	ldrb	r3, [r7, #17]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d00f      	beq.n	800112e <HAL_GPIO_EXTI_Callback+0x8a>
            (lastState == 0x2 && currentState == 0x3) ||
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
            (lastState == 0x3 && currentState == 0x1) ||
 8001114:	2b02      	cmp	r3, #2
 8001116:	d102      	bne.n	800111e <HAL_GPIO_EXTI_Callback+0x7a>
            (lastState == 0x2 && currentState == 0x3) ||
 8001118:	7c7b      	ldrb	r3, [r7, #17]
 800111a:	2b03      	cmp	r3, #3
 800111c:	d007      	beq.n	800112e <HAL_GPIO_EXTI_Callback+0x8a>
            (lastState == 0x1 && currentState == 0x0)) {
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
            (lastState == 0x2 && currentState == 0x3) ||
 8001124:	2b01      	cmp	r3, #1
 8001126:	d108      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x96>
            (lastState == 0x1 && currentState == 0x0)) {
 8001128:	7c7b      	ldrb	r3, [r7, #17]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d105      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x96>
            // Encoder has moved clockwise
        	encoder_count++;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_GPIO_EXTI_Callback+0x128>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a25      	ldr	r2, [pc, #148]	; (80011cc <HAL_GPIO_EXTI_Callback+0x128>)
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e024      	b.n	8001184 <HAL_GPIO_EXTI_Callback+0xe0>
        }
        else if ((lastState == 0x0 && currentState == 0x1) ||
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <HAL_GPIO_EXTI_Callback+0xa6>
 8001144:	7c7b      	ldrb	r3, [r7, #17]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d017      	beq.n	800117a <HAL_GPIO_EXTI_Callback+0xd6>
                 (lastState == 0x1 && currentState == 0x3) ||
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
        else if ((lastState == 0x0 && currentState == 0x1) ||
 8001150:	2b01      	cmp	r3, #1
 8001152:	d102      	bne.n	800115a <HAL_GPIO_EXTI_Callback+0xb6>
                 (lastState == 0x1 && currentState == 0x3) ||
 8001154:	7c7b      	ldrb	r3, [r7, #17]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d00f      	beq.n	800117a <HAL_GPIO_EXTI_Callback+0xd6>
                 (lastState == 0x3 && currentState == 0x2) ||
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
                 (lastState == 0x1 && currentState == 0x3) ||
 8001160:	2b03      	cmp	r3, #3
 8001162:	d102      	bne.n	800116a <HAL_GPIO_EXTI_Callback+0xc6>
                 (lastState == 0x3 && currentState == 0x2) ||
 8001164:	7c7b      	ldrb	r3, [r7, #17]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_EXTI_Callback+0xd6>
                 (lastState == 0x2 && currentState == 0x0)) {
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
                 (lastState == 0x3 && currentState == 0x2) ||
 8001170:	2b02      	cmp	r3, #2
 8001172:	d107      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0xe0>
                 (lastState == 0x2 && currentState == 0x0)) {
 8001174:	7c7b      	ldrb	r3, [r7, #17]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d104      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0xe0>
            // Encoder has moved counterclockwise
            encoder_count--;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_GPIO_EXTI_Callback+0x128>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_GPIO_EXTI_Callback+0x128>)
 8001182:	6013      	str	r3, [r2, #0]
        }

        // Save the new state
        lastState = currentState;
 8001184:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001186:	7c7b      	ldrb	r3, [r7, #17]
 8001188:	7013      	strb	r3, [r2, #0]
            last_debounce_time = current_time;  // update last debounce time
        }
    }

    // Handle other GPIO pins (if any)
}
 800118a:	e017      	b.n	80011bc <HAL_GPIO_EXTI_Callback+0x118>
    } else if (GPIO_Pin == BTN_Pin) {
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001192:	d113      	bne.n	80011bc <HAL_GPIO_EXTI_Callback+0x118>
        uint32_t current_time = HAL_GetTick();  // Assuming HAL_GetTick() gives you the system tick in ms
 8001194:	f000 fb7c 	bl	8001890 <HAL_GetTick>
 8001198:	60f8      	str	r0, [r7, #12]
        if ((current_time - last_debounce_time) > debounce_delay) {
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x12c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d209      	bcs.n	80011bc <HAL_GPIO_EXTI_Callback+0x118>
            button_state++;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80011b4:	701a      	strb	r2, [r3, #0]
            last_debounce_time = current_time;  // update last debounce time
 80011b6:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020400 	.word	0x40020400
 80011c8:	200001f4 	.word	0x200001f4
 80011cc:	200001f0 	.word	0x200001f0
 80011d0:	200001f8 	.word	0x200001f8
 80011d4:	200001f5 	.word	0x200001f5

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_MspInit+0x4c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_MspInit+0x4c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_RTC_MspInit+0x50>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d111      	bne.n	800127c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001258:	2302      	movs	r3, #2
 800125a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800125c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001260:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fdd8 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001272:	f7ff ffb1 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_RTC_MspInit+0x54>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40002800 	.word	0x40002800
 8001288:	42470e3c 	.word	0x42470e3c

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <HAL_TIM_Base_MspInit+0x98>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d13d      	bne.n	800131a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_TIM_Base_MspInit+0x9c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a20      	ldr	r2, [pc, #128]	; (8001328 <HAL_TIM_Base_MspInit+0x9c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_TIM_Base_MspInit+0x9c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012bc:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <HAL_TIM_Base_MspInit+0xa4>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012c2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012da:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80012fe:	480b      	ldr	r0, [pc, #44]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 8001300:	f000 fc08 	bl	8001b14 <HAL_DMA_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800130a:	f7ff ff65 	bl	80011d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_TIM_Base_MspInit+0xa0>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40010000 	.word	0x40010000
 8001328:	40023800 	.word	0x40023800
 800132c:	20000190 	.word	0x20000190
 8001330:	40026428 	.word	0x40026428

08001334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_TIM_MspPostInit+0x68>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d11e      	bne.n	8001394 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_TIM_MspPostInit+0x6c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_TIM_MspPostInit+0x6c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_TIM_MspPostInit+0x6c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_TIM_MspPostInit+0x70>)
 8001390:	f000 ff52 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40010000 	.word	0x40010000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 fa38 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_CH_A_Pin);
 8001400:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001404:	f001 f8ce 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_CH_B_Pin);
 8001408:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800140c:	f001 f8ca 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001410:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001414:	f001 f8c6 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <DMA2_Stream1_IRQHandler+0x10>)
 8001422:	f000 fc9f 	bl	8001d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000190 	.word	0x20000190

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f003 faa0 	bl	80049a4 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20020000 	.word	0x20020000
 8001490:	00000400 	.word	0x00000400
 8001494:	200001fc 	.word	0x200001fc
 8001498:	20001c68 	.word	0x20001c68

0800149c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <SystemInit+0x20>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <SystemInit+0x20>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c6:	490e      	ldr	r1, [pc, #56]	; (8001500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014dc:	4c0b      	ldr	r4, [pc, #44]	; (800150c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ea:	f7ff ffd7 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f003 fa5f 	bl	80049b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff fa5f 	bl	80009b4 <main>
  bx  lr    
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001504:	0800569c 	.word	0x0800569c
  ldr r2, =_sbss
 8001508:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800150c:	20001c64 	.word	0x20001c64

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>
	...

08001514 <setSegments>:
		[' '] = 0x00, // Blank character
		['.'] = 0x80, // Decimal point assuming it's on a separate segment
};

// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	2104      	movs	r1, #4
 8001532:	4830      	ldr	r0, [pc, #192]	; (80015f4 <setSegments+0xe0>)
 8001534:	f001 f81c 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf0c      	ite	eq
 8001542:	2301      	moveq	r3, #1
 8001544:	2300      	movne	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	2101      	movs	r1, #1
 800154c:	4829      	ldr	r0, [pc, #164]	; (80015f4 <setSegments+0xe0>)
 800154e:	f001 f80f 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	2108      	movs	r1, #8
 8001566:	4823      	ldr	r0, [pc, #140]	; (80015f4 <setSegments+0xe0>)
 8001568:	f001 f802 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf0c      	ite	eq
 8001576:	2301      	moveq	r3, #1
 8001578:	2300      	movne	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	2104      	movs	r1, #4
 8001580:	481d      	ldr	r0, [pc, #116]	; (80015f8 <setSegments+0xe4>)
 8001582:	f000 fff5 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	2101      	movs	r1, #1
 800159a:	4817      	ldr	r0, [pc, #92]	; (80015f8 <setSegments+0xe4>)
 800159c:	f000 ffe8 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf0c      	ite	eq
 80015aa:	2301      	moveq	r3, #1
 80015ac:	2300      	movne	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	2110      	movs	r1, #16
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <setSegments+0xe0>)
 80015b6:	f000 ffdb 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	2102      	movs	r1, #2
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <setSegments+0xe0>)
 80015d0:	f000 ffce 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	43db      	mvns	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	09db      	lsrs	r3, r3, #7
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	2140      	movs	r1, #64	; 0x40
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <setSegments+0xe0>)
 80015e6:	f000 ffc3 	bl	8002570 <HAL_GPIO_WritePin>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020400 	.word	0x40020400

080015fc <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b01      	cmp	r3, #1
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001618:	4819      	ldr	r0, [pc, #100]	; (8001680 <activateDigit+0x84>)
 800161a:	f000 ffa9 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b02      	cmp	r3, #2
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <activateDigit+0x84>)
 8001632:	f000 ff9d 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b03      	cmp	r3, #3
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <activateDigit+0x88>)
 8001648:	f000 ff92 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf0c      	ite	eq
 8001652:	2301      	moveq	r3, #1
 8001654:	2300      	movne	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	2120      	movs	r1, #32
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <activateDigit+0x88>)
 800165e:	f000 ff87 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b05      	cmp	r3, #5
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	2102      	movs	r1, #2
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <activateDigit+0x84>)
 8001674:	f000 ff7c 	bl	8002570 <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020400 	.word	0x40020400
 8001684:	40020000 	.word	0x40020000

08001688 <Segment_Display>:


// Display up to four characters on the 7-segment displays
void Segment_Display(const char* input) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	char output[6] = "";  // Assuming maximum input length of 5 digits + null terminator
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	2300      	movs	r3, #0
 8001696:	823b      	strh	r3, [r7, #16]
	bool hasColon = false;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for (int i = 0; i < strlen(input); i++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	e024      	b.n	80016ee <Segment_Display+0x66>
		if (input[i] != ':') {
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b3a      	cmp	r3, #58	; 0x3a
 80016ae:	d018      	beq.n	80016e2 <Segment_Display+0x5a>
			int len = strlen(output);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fd93 	bl	80001e0 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	617b      	str	r3, [r7, #20]
			output[len] = input[i];
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	7819      	ldrb	r1, [r3, #0]
 80016c6:	f107 020c 	add.w	r2, r7, #12
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	4413      	add	r3, r2
 80016ce:	460a      	mov	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
			output[len + 1] = '\0';
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	3328      	adds	r3, #40	; 0x28
 80016d8:	443b      	add	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80016e0:	e002      	b.n	80016e8 <Segment_Display+0x60>
		}
		else {
			hasColon = true;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (int i = 0; i < strlen(input); i++) {
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	3301      	adds	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7fe fd76 	bl	80001e0 <strlen>
 80016f4:	4602      	mov	r2, r0
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8d3      	bhi.n	80016a4 <Segment_Display+0x1c>
		}
	}


  // clearing all digits
  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001702:	482d      	ldr	r0, [pc, #180]	; (80017b8 <Segment_Display+0x130>)
 8001704:	f000 ff34 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170e:	482a      	ldr	r0, [pc, #168]	; (80017b8 <Segment_Display+0x130>)
 8001710:	f000 ff2e 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	4828      	ldr	r0, [pc, #160]	; (80017bc <Segment_Display+0x134>)
 800171a:	f000 ff29 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2120      	movs	r1, #32
 8001722:	4826      	ldr	r0, [pc, #152]	; (80017bc <Segment_Display+0x134>)
 8001724:	f000 ff24 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	2102      	movs	r1, #2
 800172c:	4822      	ldr	r0, [pc, #136]	; (80017b8 <Segment_Display+0x130>)
 800172e:	f000 ff1f 	bl	8002570 <HAL_GPIO_WritePin>

  uint8_t numChars = MIN(strlen(output), NUM_DIGITS);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fd52 	bl	80001e0 <strlen>
 800173c:	4603      	mov	r3, r0
 800173e:	2b03      	cmp	r3, #3
 8001740:	d807      	bhi.n	8001752 <Segment_Display+0xca>
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd4a 	bl	80001e0 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	e000      	b.n	8001754 <Segment_Display+0xcc>
 8001752:	2304      	movs	r3, #4
 8001754:	76fb      	strb	r3, [r7, #27]
  for (int i = 0; i < (numChars + hasColon); i++) {
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e01e      	b.n	800179a <Segment_Display+0x112>
	  activateDigit(i + 1); // Activate the correct digit
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	3301      	adds	r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff49 	bl	80015fc <activateDigit>
	  if((i + 1) == 5) { //colon
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d103      	bne.n	8001778 <Segment_Display+0xf0>
		  setSegments(0b11);
 8001770:	2003      	movs	r0, #3
 8001772:	f7ff fecf 	bl	8001514 <setSegments>
 8001776:	e00a      	b.n	800178e <Segment_Display+0x106>
	  } else {
		  setSegments(charToSegmentsMap[(uint8_t) output[i]]); // Set the correct segments
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <Segment_Display+0x138>)
 8001786:	5c9b      	ldrb	r3, [r3, r2]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fec3 	bl	8001514 <setSegments>
	  }
	  HAL_Delay(1); // Delay to allow the segments to light up
 800178e:	2001      	movs	r0, #1
 8001790:	f000 f88a 	bl	80018a8 <HAL_Delay>
  for (int i = 0; i < (numChars + hasColon); i++) {
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3301      	adds	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	7efa      	ldrb	r2, [r7, #27]
 800179c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a0:	4413      	add	r3, r2
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbd9      	blt.n	800175c <Segment_Display+0xd4>
  }
  activateDigit(0); // Turn off all digits
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff ff27 	bl	80015fc <activateDigit>
}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020000 	.word	0x40020000
 80017c0:	080055f4 	.word	0x080055f4

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_Init+0x40>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_Init+0x40>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x40>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f94f 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	200f      	movs	r0, #15
 80017f4:	f000 f808 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fcf4 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x54>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x58>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f967 	bl	8001afa <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f000 f92f 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_InitTick+0x5c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000018 	.word	0x20000018
 8001860:	20000020 	.word	0x20000020
 8001864:	2000001c 	.word	0x2000001c

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000020 	.word	0x20000020
 800188c:	20000200 	.word	0x20000200

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000200 	.word	0x20000200

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff ffee 	bl	8001890 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_Delay+0x44>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffde 	bl	8001890 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000020 	.word	0x20000020

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4907      	ldr	r1, [pc, #28]	; (800198c <__NVIC_EnableIRQ+0x38>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff29 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff3e 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff31 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa2 	bl	8001a4c <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff feb6 	bl	8001890 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e099      	b.n	8001c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b50:	e00f      	b.n	8001b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b52:	f7ff fe9d 	bl	8001890 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d908      	bls.n	8001b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e078      	b.n	8001c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1e8      	bne.n	8001b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_DMA_Init+0x158>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d107      	bne.n	8001bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f023 0307 	bic.w	r3, r3, #7
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d117      	bne.n	8001c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fa91 	bl	8002140 <DMA_CheckFifoParam>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c32:	2301      	movs	r3, #1
 8001c34:	e016      	b.n	8001c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fa48 	bl	80020d4 <DMA_CalcBaseAndBitshift>
 8001c44:	4603      	mov	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	223f      	movs	r2, #63	; 0x3f
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	f010803f 	.word	0xf010803f

08001c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_DMA_Start_IT+0x26>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e040      	b.n	8001d18 <HAL_DMA_Start_IT+0xa8>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d12f      	bne.n	8001d0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f9da 	bl	8002078 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	223f      	movs	r2, #63	; 0x3f
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0216 	orr.w	r2, r2, #22
 8001cde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0208 	orr.w	r2, r2, #8
 8001cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e005      	b.n	8001d16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d12:	2302      	movs	r3, #2
 8001d14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d004      	beq.n	8001d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00c      	b.n	8001d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2205      	movs	r2, #5
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d70:	4b8e      	ldr	r3, [pc, #568]	; (8001fac <HAL_DMA_IRQHandler+0x248>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a8e      	ldr	r2, [pc, #568]	; (8001fb0 <HAL_DMA_IRQHandler+0x24c>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0a9b      	lsrs	r3, r3, #10
 8001d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2208      	movs	r2, #8
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d01a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0204 	bic.w	r2, r2, #4
 8001db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d012      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2201      	movs	r2, #1
 8001df4:	409a      	lsls	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	f043 0202 	orr.w	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00b      	beq.n	8001e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	2204      	movs	r2, #4
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	f043 0204 	orr.w	r2, r3, #4
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	2210      	movs	r2, #16
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d043      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03c      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	2210      	movs	r2, #16
 8001e60:	409a      	lsls	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d018      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d108      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d024      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
 8001e92:	e01f      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
 8001ea4:	e016      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0208 	bic.w	r2, r2, #8
 8001ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2220      	movs	r2, #32
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 808f 	beq.w	8002004 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8087 	beq.w	8002004 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2220      	movs	r2, #32
 8001efc:	409a      	lsls	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d136      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0216 	bic.w	r2, r2, #22
 8001f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <HAL_DMA_IRQHandler+0x1da>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	223f      	movs	r2, #63	; 0x3f
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d07e      	beq.n	8002070 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
        }
        return;
 8001f7a:	e079      	b.n	8002070 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01d      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d031      	beq.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
 8001fa8:	e02c      	b.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
 8001faa:	bf00      	nop
 8001fac:	20000018 	.word	0x20000018
 8001fb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d023      	beq.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
 8001fc4:	e01e      	b.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10f      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0210 	bic.w	r2, r2, #16
 8001fe2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	2b00      	cmp	r3, #0
 800200a:	d032      	beq.n	8002072 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d022      	beq.n	800205e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2205      	movs	r2, #5
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3301      	adds	r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	429a      	cmp	r2, r3
 800203a:	d307      	bcc.n	800204c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f2      	bne.n	8002030 <HAL_DMA_IRQHandler+0x2cc>
 800204a:	e000      	b.n	800204e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800204c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
 800206e:	e000      	b.n	8002072 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002070:	bf00      	nop
    }
  }
}
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002094:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d108      	bne.n	80020b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020b6:	e007      	b.n	80020c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3b10      	subs	r3, #16
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <DMA_CalcBaseAndBitshift+0x64>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020ee:	4a13      	ldr	r2, [pc, #76]	; (800213c <DMA_CalcBaseAndBitshift+0x68>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d909      	bls.n	8002116 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	1d1a      	adds	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	659a      	str	r2, [r3, #88]	; 0x58
 8002114:	e007      	b.n	8002126 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	aaaaaaab 	.word	0xaaaaaaab
 800213c:	08005650 	.word	0x08005650

08002140 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11f      	bne.n	800219a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d856      	bhi.n	800220e <DMA_CheckFifoParam+0xce>
 8002160:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <DMA_CheckFifoParam+0x28>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	08002179 	.word	0x08002179
 800216c:	0800218b 	.word	0x0800218b
 8002170:	08002179 	.word	0x08002179
 8002174:	0800220f 	.word	0x0800220f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d046      	beq.n	8002212 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002188:	e043      	b.n	8002212 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002192:	d140      	bne.n	8002216 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002198:	e03d      	b.n	8002216 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a2:	d121      	bne.n	80021e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d837      	bhi.n	800221a <DMA_CheckFifoParam+0xda>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <DMA_CheckFifoParam+0x70>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080021c1 	.word	0x080021c1
 80021b4:	080021c7 	.word	0x080021c7
 80021b8:	080021c1 	.word	0x080021c1
 80021bc:	080021d9 	.word	0x080021d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
      break;
 80021c4:	e030      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d025      	beq.n	800221e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d6:	e022      	b.n	800221e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021e0:	d11f      	bne.n	8002222 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021e6:	e01c      	b.n	8002222 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d903      	bls.n	80021f6 <DMA_CheckFifoParam+0xb6>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d003      	beq.n	80021fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021f4:	e018      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
      break;
 80021fa:	e015      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00e      	beq.n	8002226 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      break;
 800220c:	e00b      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      break;
 800220e:	bf00      	nop
 8002210:	e00a      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
 8002214:	e008      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
      break;
 8002216:	bf00      	nop
 8002218:	e006      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
      break;
 800221a:	bf00      	nop
 800221c:	e004      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
 8002220:	e002      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
      break;   
 8002222:	bf00      	nop
 8002224:	e000      	b.n	8002228 <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
    }
  } 
  
  return status; 
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e159      	b.n	8002508 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8148 	bne.w	8002502 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d005      	beq.n	800228a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	2b02      	cmp	r3, #2
 8002288:	d130      	bne.n	80022ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d017      	beq.n	8002328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d123      	bne.n	800237c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	69b9      	ldr	r1, [r7, #24]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a2 	beq.w	8002502 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a56      	ldr	r2, [pc, #344]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023da:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_GPIO_Init+0x2ec>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a49      	ldr	r2, [pc, #292]	; (8002528 <HAL_GPIO_Init+0x2f0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x202>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a48      	ldr	r2, [pc, #288]	; (800252c <HAL_GPIO_Init+0x2f4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x1fe>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a47      	ldr	r2, [pc, #284]	; (8002530 <HAL_GPIO_Init+0x2f8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x1fa>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a46      	ldr	r2, [pc, #280]	; (8002534 <HAL_GPIO_Init+0x2fc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x1f6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a45      	ldr	r2, [pc, #276]	; (8002538 <HAL_GPIO_Init+0x300>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x1f2>
 8002426:	2304      	movs	r3, #4
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x204>
 800242a:	2307      	movs	r3, #7
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x204>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x204>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x204>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x204>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_GPIO_Init+0x2ec>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b38      	ldr	r3, [pc, #224]	; (800253c <HAL_GPIO_Init+0x304>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247e:	4a2f      	ldr	r2, [pc, #188]	; (800253c <HAL_GPIO_Init+0x304>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_GPIO_Init+0x304>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a8:	4a24      	ldr	r2, [pc, #144]	; (800253c <HAL_GPIO_Init+0x304>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_GPIO_Init+0x304>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d2:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_GPIO_Init+0x304>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_GPIO_Init+0x304>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_GPIO_Init+0x304>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f aea2 	bls.w	8002254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40013800 	.word	0x40013800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	887b      	ldrh	r3, [r7, #2]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e001      	b.n	8002562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fd6e 	bl	80010a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40013c00 	.word	0x40013c00

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e267      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d075      	beq.n	80026de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d00c      	beq.n	8002618 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002606:	2b08      	cmp	r3, #8
 8002608:	d112      	bne.n	8002630 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260a:	4b82      	ldr	r3, [pc, #520]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002616:	d10b      	bne.n	8002630 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	4b7e      	ldr	r3, [pc, #504]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d05b      	beq.n	80026dc <HAL_RCC_OscConfig+0x108>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d157      	bne.n	80026dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e242      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d106      	bne.n	8002648 <HAL_RCC_OscConfig+0x74>
 800263a:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a75      	ldr	r2, [pc, #468]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e01d      	b.n	8002684 <HAL_RCC_OscConfig+0xb0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x98>
 8002652:	4b70      	ldr	r3, [pc, #448]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6f      	ldr	r2, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b6d      	ldr	r3, [pc, #436]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6c      	ldr	r2, [pc, #432]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0xb0>
 800266c:	4b69      	ldr	r3, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a68      	ldr	r2, [pc, #416]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b66      	ldr	r3, [pc, #408]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a65      	ldr	r2, [pc, #404]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 800267e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d013      	beq.n	80026b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7ff f900 	bl	8001890 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff f8fc 	bl	8001890 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e207      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0xc0>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff f8ec 	bl	8001890 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026bc:	f7ff f8e8 	bl	8001890 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1f3      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0xe8>
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d063      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ea:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d11c      	bne.n	800273c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b44      	ldr	r3, [pc, #272]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	4b41      	ldr	r3, [pc, #260]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x152>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d001      	beq.n	8002726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e1c7      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4937      	ldr	r1, [pc, #220]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	e03a      	b.n	80027b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002744:	4b34      	ldr	r3, [pc, #208]	; (8002818 <HAL_RCC_OscConfig+0x244>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7ff f8a1 	bl	8001890 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002752:	f7ff f89d 	bl	8001890 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1a8      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4925      	ldr	r1, [pc, #148]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_OscConfig+0x244>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7ff f880 	bl	8001890 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002794:	f7ff f87c 	bl	8001890 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e187      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d036      	beq.n	800282c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_RCC_OscConfig+0x248>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7ff f860 	bl	8001890 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d4:	f7ff f85c 	bl	8001890 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e167      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_OscConfig+0x240>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x200>
 80027f2:	e01b      	b.n	800282c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_OscConfig+0x248>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7ff f849 	bl	8001890 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002800:	e00e      	b.n	8002820 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002802:	f7ff f845 	bl	8001890 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d907      	bls.n	8002820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e150      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
 8002814:	40023800 	.word	0x40023800
 8002818:	42470000 	.word	0x42470000
 800281c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ea      	bne.n	8002802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8097 	beq.w	8002968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b81      	ldr	r3, [pc, #516]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b7d      	ldr	r3, [pc, #500]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a7c      	ldr	r2, [pc, #496]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b7a      	ldr	r3, [pc, #488]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b77      	ldr	r3, [pc, #476]	; (8002a48 <HAL_RCC_OscConfig+0x474>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b74      	ldr	r3, [pc, #464]	; (8002a48 <HAL_RCC_OscConfig+0x474>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a73      	ldr	r2, [pc, #460]	; (8002a48 <HAL_RCC_OscConfig+0x474>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7ff f805 	bl	8001890 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7ff f801 	bl	8001890 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e10c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_RCC_OscConfig+0x474>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x2ea>
 80028b0:	4b64      	ldr	r3, [pc, #400]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a63      	ldr	r2, [pc, #396]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	e01c      	b.n	80028f8 <HAL_RCC_OscConfig+0x324>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x30c>
 80028c6:	4b5f      	ldr	r3, [pc, #380]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a5e      	ldr	r2, [pc, #376]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a5b      	ldr	r2, [pc, #364]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0x324>
 80028e0:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
 80028ec:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe ffc6 	bl	8001890 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002906:	e00a      	b.n	800291e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe ffc2 	bl	8001890 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0cb      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0ee      	beq.n	8002908 <HAL_RCC_OscConfig+0x334>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7fe ffb0 	bl	8001890 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe ffac 	bl	8001890 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0b5      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294a:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ee      	bne.n	8002934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	4a38      	ldr	r2, [pc, #224]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002966:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a1 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b08      	cmp	r3, #8
 800297c:	d05c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d141      	bne.n	8002a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_RCC_OscConfig+0x478>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe ff80 	bl	8001890 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe ff7c 	bl	8001890 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e087      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	491b      	ldr	r1, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x478>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe ff55 	bl	8001890 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe ff51 	bl	8001890 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e05c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x416>
 8002a08:	e054      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_RCC_OscConfig+0x478>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe ff3e 	bl	8001890 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe ff3a 	bl	8001890 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e045      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x444>
 8002a36:	e03d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e038      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x4ec>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d121      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d11a      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d111      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0cc      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d90c      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	494d      	ldr	r1, [pc, #308]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d044      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d119      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e06f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e067      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4934      	ldr	r1, [pc, #208]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fe6c 	bl	8001890 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7fe fe68 	bl	8001890 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e04f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 020c 	and.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1eb      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d20c      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e032      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4916      	ldr	r1, [pc, #88]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	490e      	ldr	r1, [pc, #56]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4a:	f000 f821 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	490a      	ldr	r1, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	5ccb      	ldrb	r3, [r1, r3]
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fdcc 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023c00 	.word	0x40023c00
 8002c80:	40023800 	.word	0x40023800
 8002c84:	080055e4 	.word	0x080055e4
 8002c88:	20000018 	.word	0x20000018
 8002c8c:	2000001c 	.word	0x2000001c

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b090      	sub	sp, #64	; 0x40
 8002c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	f200 80a1 	bhi.w	8002dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x3a>
 8002cc2:	e09b      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cc8:	e09b      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cca:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cce:	e098      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cda:	4b4d      	ldr	r3, [pc, #308]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	099b      	lsrs	r3, r3, #6
 8002cec:	2200      	movs	r2, #0
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cfc:	fb03 f201 	mul.w	r2, r3, r1
 8002d00:	2300      	movs	r3, #0
 8002d02:	fb00 f303 	mul.w	r3, r0, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	4a43      	ldr	r2, [pc, #268]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d10:	460a      	mov	r2, r1
 8002d12:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d16:	4413      	add	r3, r2
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	61fa      	str	r2, [r7, #28]
 8002d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d2a:	f7fd fab1 	bl	8000290 <__aeabi_uldivmod>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4613      	mov	r3, r2
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d36:	e053      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	2200      	movs	r2, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	617a      	str	r2, [r7, #20]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d4a:	f04f 0b00 	mov.w	fp, #0
 8002d4e:	4652      	mov	r2, sl
 8002d50:	465b      	mov	r3, fp
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0159      	lsls	r1, r3, #5
 8002d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d60:	0150      	lsls	r0, r2, #5
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	ebb2 080a 	subs.w	r8, r2, sl
 8002d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d82:	ebb2 0408 	subs.w	r4, r2, r8
 8002d86:	eb63 0509 	sbc.w	r5, r3, r9
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	00eb      	lsls	r3, r5, #3
 8002d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d98:	00e2      	lsls	r2, r4, #3
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	461d      	mov	r5, r3
 8002d9e:	eb14 030a 	adds.w	r3, r4, sl
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	eb45 030b 	adc.w	r3, r5, fp
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db6:	4629      	mov	r1, r5
 8002db8:	028b      	lsls	r3, r1, #10
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	028a      	lsls	r2, r1, #10
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	60fa      	str	r2, [r7, #12]
 8002dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd4:	f7fd fa5c 	bl	8000290 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	3301      	adds	r3, #1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dfa:	e002      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3740      	adds	r7, #64	; 0x40
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	016e3600 	.word	0x016e3600

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d038      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e4a:	f7fe fd21 	bl	8001890 <HAL_GetTick>
 8002e4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e52:	f7fe fd1d 	bl	8001890 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0bd      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e64:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	071b      	lsls	r3, r3, #28
 8002e82:	495a      	ldr	r1, [pc, #360]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e8a:	4b57      	ldr	r3, [pc, #348]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fcfe 	bl	8001890 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e98:	f7fe fcfa 	bl	8001890 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e09a      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eaa:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8083 	beq.w	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	4b48      	ldr	r3, [pc, #288]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	4a47      	ldr	r2, [pc, #284]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed4:	4b45      	ldr	r3, [pc, #276]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ee0:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a42      	ldr	r2, [pc, #264]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eec:	f7fe fcd0 	bl	8001890 <HAL_GetTick>
 8002ef0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ef4:	f7fe fccc 	bl	8001890 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e06c      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f06:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f12:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d02f      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d028      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f30:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f40:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f46:	4a29      	ldr	r2, [pc, #164]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d114      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fe fc9a 	bl	8001890 <HAL_GetTick>
 8002f5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fe fc96 	bl	8001890 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e034      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0ee      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa4:	4911      	ldr	r1, [pc, #68]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
 8002faa:	e005      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fb6:	6093      	str	r3, [r2, #8]
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	4909      	ldr	r1, [pc, #36]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7d1a      	ldrb	r2, [r3, #20]
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002fdc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	42470068 	.word	0x42470068
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	42470e40 	.word	0x42470e40
 8002ff8:	424711e0 	.word	0x424711e0

08002ffc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e066      	b.n	80030e0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7f5b      	ldrb	r3, [r3, #29]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe f906 	bl	8001234 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	22ca      	movs	r2, #202	; 0xca
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2253      	movs	r2, #83	; 0x53
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa45 	bl	80034ce <RTC_EnterInitMode>
 8003044:	4603      	mov	r3, r0
 8003046:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d12c      	bne.n	80030a8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800305c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003060:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6899      	ldr	r1, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68d2      	ldr	r2, [r2, #12]
 8003088:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6919      	ldr	r1, [r3, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	041a      	lsls	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa4c 	bl	800353c <RTC_ExitInitMode>
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d113      	bne.n	80030d6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	22ff      	movs	r2, #255	; 0xff
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80030de:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	7f1b      	ldrb	r3, [r3, #28]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_RTC_SetTime+0x1c>
 8003100:	2302      	movs	r3, #2
 8003102:	e087      	b.n	8003214 <HAL_RTC_SetTime+0x12c>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2202      	movs	r2, #2
 800310e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d126      	bne.n	8003164 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa29 	bl	8003586 <RTC_ByteToBcd2>
 8003134:	4603      	mov	r3, r0
 8003136:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fa22 	bl	8003586 <RTC_ByteToBcd2>
 8003142:	4603      	mov	r3, r0
 8003144:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003146:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	789b      	ldrb	r3, [r3, #2]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fa1a 	bl	8003586 <RTC_ByteToBcd2>
 8003152:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003154:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e018      	b.n	8003196 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003184:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800318a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	78db      	ldrb	r3, [r3, #3]
 8003190:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	22ca      	movs	r2, #202	; 0xca
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2253      	movs	r2, #83	; 0x53
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f991 	bl	80034ce <RTC_EnterInitMode>
 80031ac:	4603      	mov	r3, r0
 80031ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d120      	bne.n	80031f8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f9a4 	bl	800353c <RTC_ExitInitMode>
 80031f4:	4603      	mov	r3, r0
 80031f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	22ff      	movs	r2, #255	; 0xff
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]

  return status;
 8003212:	7cfb      	ldrb	r3, [r7, #19]
}
 8003214:	4618      	mov	r0, r3
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}

0800321c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800324e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003252:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	0c1b      	lsrs	r3, r3, #16
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	0d9b      	lsrs	r3, r3, #22
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11a      	bne.n	80032ce <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f98f 	bl	80035c0 <RTC_Bcd2ToByte>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f986 	bl	80035c0 <RTC_Bcd2ToByte>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	789b      	ldrb	r3, [r3, #2]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f97d 	bl	80035c0 <RTC_Bcd2ToByte>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	7f1b      	ldrb	r3, [r3, #28]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_RTC_SetDate+0x1c>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e071      	b.n	80033d8 <HAL_RTC_SetDate+0x100>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2202      	movs	r2, #2
 80032fe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10e      	bne.n	8003324 <HAL_RTC_SetDate+0x4c>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	785b      	ldrb	r3, [r3, #1]
 8003316:	f023 0310 	bic.w	r3, r3, #16
 800331a:	b2db      	uxtb	r3, r3
 800331c:	330a      	adds	r3, #10
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11c      	bne.n	8003364 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	78db      	ldrb	r3, [r3, #3]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f929 	bl	8003586 <RTC_ByteToBcd2>
 8003334:	4603      	mov	r3, r0
 8003336:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f922 	bl	8003586 <RTC_ByteToBcd2>
 8003342:	4603      	mov	r3, r0
 8003344:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003346:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	789b      	ldrb	r3, [r3, #2]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f91a 	bl	8003586 <RTC_ByteToBcd2>
 8003352:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003354:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e00e      	b.n	8003382 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	78db      	ldrb	r3, [r3, #3]
 8003368:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003370:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003376:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	22ca      	movs	r2, #202	; 0xca
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2253      	movs	r2, #83	; 0x53
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f89b 	bl	80034ce <RTC_EnterInitMode>
 8003398:	4603      	mov	r3, r0
 800339a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f8c2 	bl	800353c <RTC_ExitInitMode>
 80033b8:	4603      	mov	r3, r0
 80033ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	22ff      	movs	r2, #255	; 0xff
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	771a      	strb	r2, [r3, #28]

  return status;
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd90      	pop	{r4, r7, pc}

080033e0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	0b5b      	lsrs	r3, r3, #13
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11a      	bne.n	8003474 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f8bc 	bl	80035c0 <RTC_Bcd2ToByte>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f8b3 	bl	80035c0 <RTC_Bcd2ToByte>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	789b      	ldrb	r3, [r3, #2]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f8aa 	bl	80035c0 <RTC_Bcd2ToByte>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003498:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800349a:	f7fe f9f9 	bl	8001890 <HAL_GetTick>
 800349e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034a0:	e009      	b.n	80034b6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034a2:	f7fe f9f5 	bl	8001890 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b0:	d901      	bls.n	80034b6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e007      	b.n	80034c6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ee      	beq.n	80034a2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d122      	bne.n	8003532 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034fc:	f7fe f9c8 	bl	8001890 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003502:	e00c      	b.n	800351e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003504:	f7fe f9c4 	bl	8001890 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003512:	d904      	bls.n	800351e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2204      	movs	r2, #4
 8003518:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <RTC_EnterInitMode+0x64>
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d1e8      	bne.n	8003504 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003556:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ff89 	bl	800347e <HAL_RTC_WaitForSynchro>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003586:	b480      	push	{r7}
 8003588:	b085      	sub	sp, #20
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003594:	e005      	b.n	80035a2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	3301      	adds	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	3b0a      	subs	r3, #10
 80035a0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	2b09      	cmp	r3, #9
 80035a6:	d8f6      	bhi.n	8003596 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b2db      	uxtb	r3, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	0092      	lsls	r2, r2, #2
 80035d8:	4413      	add	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	4413      	add	r3, r2
 80035ea:	b2db      	uxtb	r3, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e041      	b.n	800368e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd fe34 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 fd6a 	bl	8004110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e041      	b.n	800372c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f839 	bl	8003734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2202      	movs	r2, #2
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f000 fd1b 	bl	8004110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	e022      	b.n	80037ba <HAL_TIM_PWM_Start_DMA+0x72>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d109      	bne.n	800378e <HAL_TIM_PWM_Start_DMA+0x46>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e015      	b.n	80037ba <HAL_TIM_PWM_Start_DMA+0x72>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start_DMA+0x60>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e008      	b.n	80037ba <HAL_TIM_PWM_Start_DMA+0x72>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
 80037c0:	e15d      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_TIM_PWM_Start_DMA+0x94>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e022      	b.n	8003822 <HAL_TIM_PWM_Start_DMA+0xda>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d109      	bne.n	80037f6 <HAL_TIM_PWM_Start_DMA+0xae>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e015      	b.n	8003822 <HAL_TIM_PWM_Start_DMA+0xda>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d109      	bne.n	8003810 <HAL_TIM_PWM_Start_DMA+0xc8>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e008      	b.n	8003822 <HAL_TIM_PWM_Start_DMA+0xda>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d024      	beq.n	8003870 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d104      	bne.n	8003836 <HAL_TIM_PWM_Start_DMA+0xee>
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e123      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <HAL_TIM_PWM_Start_DMA+0xfe>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	e016      	b.n	8003874 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d104      	bne.n	8003856 <HAL_TIM_PWM_Start_DMA+0x10e>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003854:	e00e      	b.n	8003874 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d104      	bne.n	8003866 <HAL_TIM_PWM_Start_DMA+0x11e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003864:	e006      	b.n	8003874 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800386e:	e001      	b.n	8003874 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e104      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	f200 80ae 	bhi.w	80039d8 <HAL_TIM_PWM_Start_DMA+0x290>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038b9 	.word	0x080038b9
 8003888:	080039d9 	.word	0x080039d9
 800388c:	080039d9 	.word	0x080039d9
 8003890:	080039d9 	.word	0x080039d9
 8003894:	08003901 	.word	0x08003901
 8003898:	080039d9 	.word	0x080039d9
 800389c:	080039d9 	.word	0x080039d9
 80038a0:	080039d9 	.word	0x080039d9
 80038a4:	08003949 	.word	0x08003949
 80038a8:	080039d9 	.word	0x080039d9
 80038ac:	080039d9 	.word	0x080039d9
 80038b0:	080039d9 	.word	0x080039d9
 80038b4:	08003991 	.word	0x08003991
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	4a72      	ldr	r2, [pc, #456]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x340>)
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	4a71      	ldr	r2, [pc, #452]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x344>)
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	4a70      	ldr	r2, [pc, #448]	; (8003a90 <HAL_TIM_PWM_Start_DMA+0x348>)
 80038ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3334      	adds	r3, #52	; 0x34
 80038dc:	461a      	mov	r2, r3
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	f7fe f9c6 	bl	8001c70 <HAL_DMA_Start_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0c7      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fc:	60da      	str	r2, [r3, #12]
      break;
 80038fe:	e06e      	b.n	80039de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	4a60      	ldr	r2, [pc, #384]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	4a5f      	ldr	r2, [pc, #380]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x344>)
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	4a5e      	ldr	r2, [pc, #376]	; (8003a90 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003916:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3338      	adds	r3, #56	; 0x38
 8003924:	461a      	mov	r2, r3
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	f7fe f9a2 	bl	8001c70 <HAL_DMA_Start_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0a3      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003944:	60da      	str	r2, [r3, #12]
      break;
 8003946:	e04a      	b.n	80039de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	4a4e      	ldr	r2, [pc, #312]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x340>)
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a4d      	ldr	r2, [pc, #308]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4a4c      	ldr	r2, [pc, #304]	; (8003a90 <HAL_TIM_PWM_Start_DMA+0x348>)
 800395e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	333c      	adds	r3, #60	; 0x3c
 800396c:	461a      	mov	r2, r3
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	f7fe f97e 	bl	8001c70 <HAL_DMA_Start_IT>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e07f      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398c:	60da      	str	r2, [r3, #12]
      break;
 800398e:	e026      	b.n	80039de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4a3c      	ldr	r2, [pc, #240]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a3b      	ldr	r2, [pc, #236]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x344>)
 800399e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4a3a      	ldr	r2, [pc, #232]	; (8003a90 <HAL_TIM_PWM_Start_DMA+0x348>)
 80039a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3340      	adds	r3, #64	; 0x40
 80039b4:	461a      	mov	r2, r3
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	f7fe f95a 	bl	8001c70 <HAL_DMA_Start_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e05b      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039d4:	60da      	str	r2, [r3, #12]
      break;
 80039d6:	e002      	b.n	80039de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
      break;
 80039dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d14b      	bne.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fe35 	bl	800465c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d107      	bne.n	8003a0c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a20      	ldr	r2, [pc, #128]	; (8003a94 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d018      	beq.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d013      	beq.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_TIM_PWM_Start_DMA+0x354>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d111      	bne.n	8003a6c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d010      	beq.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	e007      	b.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	08004001 	.word	0x08004001
 8003a8c:	080040a9 	.word	0x080040a9
 8003a90:	08003f6f 	.word	0x08003f6f
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40014000 	.word	0x40014000

08003aa8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b0c      	cmp	r3, #12
 8003aba:	d855      	bhi.n	8003b68 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003b69 	.word	0x08003b69
 8003acc:	08003b69 	.word	0x08003b69
 8003ad0:	08003b69 	.word	0x08003b69
 8003ad4:	08003b15 	.word	0x08003b15
 8003ad8:	08003b69 	.word	0x08003b69
 8003adc:	08003b69 	.word	0x08003b69
 8003ae0:	08003b69 	.word	0x08003b69
 8003ae4:	08003b31 	.word	0x08003b31
 8003ae8:	08003b69 	.word	0x08003b69
 8003aec:	08003b69 	.word	0x08003b69
 8003af0:	08003b69 	.word	0x08003b69
 8003af4:	08003b4d 	.word	0x08003b4d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe f907 	bl	8001d20 <HAL_DMA_Abort_IT>
      break;
 8003b12:	e02c      	b.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe f8f9 	bl	8001d20 <HAL_DMA_Abort_IT>
      break;
 8003b2e:	e01e      	b.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe f8eb 	bl	8001d20 <HAL_DMA_Abort_IT>
      break;
 8003b4a:	e010      	b.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe f8dd 	bl	8001d20 <HAL_DMA_Abort_IT>
      break;
 8003b66:	e002      	b.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d157      	bne.n	8003c24 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	6839      	ldr	r1, [r7, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fd6d 	bl	800465c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d117      	bne.n	8003bbc <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6a1a      	ldr	r2, [r3, #32]
 8003b92:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10f      	bne.n	8003bbc <HAL_TIM_PWM_Stop_DMA+0x114>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6a1a      	ldr	r2, [r3, #32]
 8003ba2:	f240 4344 	movw	r3, #1092	; 0x444
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <HAL_TIM_PWM_Stop_DMA+0x114>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10f      	bne.n	8003bec <HAL_TIM_PWM_Stop_DMA+0x144>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	f240 4344 	movw	r3, #1092	; 0x444
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_PWM_Stop_DMA+0x144>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_TIM_PWM_Stop_DMA+0x154>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bfa:	e013      	b.n	8003c24 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d104      	bne.n	8003c0c <HAL_TIM_PWM_Stop_DMA+0x164>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0a:	e00b      	b.n	8003c24 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d104      	bne.n	8003c1c <HAL_TIM_PWM_Stop_DMA+0x174>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1a:	e003      	b.n	8003c24 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000

08003c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e0ae      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	f200 809f 	bhi.w	8003da0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003da1 	.word	0x08003da1
 8003c70:	08003da1 	.word	0x08003da1
 8003c74:	08003da1 	.word	0x08003da1
 8003c78:	08003cdd 	.word	0x08003cdd
 8003c7c:	08003da1 	.word	0x08003da1
 8003c80:	08003da1 	.word	0x08003da1
 8003c84:	08003da1 	.word	0x08003da1
 8003c88:	08003d1f 	.word	0x08003d1f
 8003c8c:	08003da1 	.word	0x08003da1
 8003c90:	08003da1 	.word	0x08003da1
 8003c94:	08003da1 	.word	0x08003da1
 8003c98:	08003d5f 	.word	0x08003d5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fab4 	bl	8004210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0208 	orr.w	r2, r2, #8
 8003cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0204 	bic.w	r2, r2, #4
 8003cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	619a      	str	r2, [r3, #24]
      break;
 8003cda:	e064      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fafa 	bl	80042dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6999      	ldr	r1, [r3, #24]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	021a      	lsls	r2, r3, #8
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	619a      	str	r2, [r3, #24]
      break;
 8003d1c:	e043      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fb45 	bl	80043b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0208 	orr.w	r2, r2, #8
 8003d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0204 	bic.w	r2, r2, #4
 8003d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69d9      	ldr	r1, [r3, #28]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	61da      	str	r2, [r3, #28]
      break;
 8003d5c:	e023      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fb8f 	bl	8004488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69d9      	ldr	r1, [r3, #28]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	021a      	lsls	r2, r3, #8
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	61da      	str	r2, [r3, #28]
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	75fb      	strb	r3, [r7, #23]
      break;
 8003da4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0b4      	b.n	8003f3e <HAL_TIM_ConfigClockSource+0x186>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0c:	d03e      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0xd4>
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	f200 8087 	bhi.w	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	f000 8086 	beq.w	8003f2a <HAL_TIM_ConfigClockSource+0x172>
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e22:	d87f      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b70      	cmp	r3, #112	; 0x70
 8003e26:	d01a      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0xa6>
 8003e28:	2b70      	cmp	r3, #112	; 0x70
 8003e2a:	d87b      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b60      	cmp	r3, #96	; 0x60
 8003e2e:	d050      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8003e30:	2b60      	cmp	r3, #96	; 0x60
 8003e32:	d877      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b50      	cmp	r3, #80	; 0x50
 8003e36:	d03c      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d873      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d058      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d86f      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b30      	cmp	r3, #48	; 0x30
 8003e46:	d064      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x15a>
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d86b      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d060      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x15a>
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d867      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05c      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x15a>
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d05a      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x15a>
 8003e5c:	e062      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6899      	ldr	r1, [r3, #8]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f000 fbd5 	bl	800461c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	609a      	str	r2, [r3, #8]
      break;
 8003e8a:	e04f      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f000 fbbe 	bl	800461c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eae:	609a      	str	r2, [r3, #8]
      break;
 8003eb0:	e03c      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 fb32 	bl	8004528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2150      	movs	r1, #80	; 0x50
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fb8b 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e02c      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f000 fb51 	bl	8004586 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2160      	movs	r1, #96	; 0x60
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fb7b 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003ef0:	e01c      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 fb12 	bl	8004528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2140      	movs	r1, #64	; 0x40
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fb6b 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003f10:	e00c      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f000 fb62 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003f22:	e003      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      break;
 8003f28:	e000      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d107      	bne.n	8003f96 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f94:	e02a      	b.n	8003fec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d107      	bne.n	8003fb0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fae:	e01d      	b.n	8003fec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d107      	bne.n	8003fca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc8:	e010      	b.n	8003fec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d107      	bne.n	8003fe4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe2:	e003      	b.n	8003fec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff ffb4 	bl	8003f5a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	771a      	strb	r2, [r3, #28]
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d10b      	bne.n	8004030 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d136      	bne.n	8004094 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402e:	e031      	b.n	8004094 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	429a      	cmp	r2, r3
 8004038:	d10b      	bne.n	8004052 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2202      	movs	r2, #2
 800403e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d125      	bne.n	8004094 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004050:	e020      	b.n	8004094 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	d10b      	bne.n	8004074 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2204      	movs	r2, #4
 8004060:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d114      	bne.n	8004094 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004072:	e00f      	b.n	8004094 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d10a      	bne.n	8004094 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2208      	movs	r2, #8
 8004082:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fc73 	bl	8004980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d103      	bne.n	80040c8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	771a      	strb	r2, [r3, #28]
 80040c6:	e019      	b.n	80040fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d103      	bne.n	80040da <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2202      	movs	r2, #2
 80040d6:	771a      	strb	r2, [r3, #28]
 80040d8:	e010      	b.n	80040fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d103      	bne.n	80040ec <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2204      	movs	r2, #4
 80040e8:	771a      	strb	r2, [r3, #28]
 80040ea:	e007      	b.n	80040fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d102      	bne.n	80040fc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2208      	movs	r2, #8
 80040fa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff ff22 	bl	8003f46 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a34      	ldr	r2, [pc, #208]	; (80041f4 <TIM_Base_SetConfig+0xe4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00f      	beq.n	8004148 <TIM_Base_SetConfig+0x38>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d00b      	beq.n	8004148 <TIM_Base_SetConfig+0x38>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a31      	ldr	r2, [pc, #196]	; (80041f8 <TIM_Base_SetConfig+0xe8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_Base_SetConfig+0x38>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a30      	ldr	r2, [pc, #192]	; (80041fc <TIM_Base_SetConfig+0xec>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x38>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <TIM_Base_SetConfig+0xf0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a25      	ldr	r2, [pc, #148]	; (80041f4 <TIM_Base_SetConfig+0xe4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01b      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d017      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <TIM_Base_SetConfig+0xe8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a21      	ldr	r2, [pc, #132]	; (80041fc <TIM_Base_SetConfig+0xec>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a20      	ldr	r2, [pc, #128]	; (8004200 <TIM_Base_SetConfig+0xf0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <TIM_Base_SetConfig+0xf4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <TIM_Base_SetConfig+0xf8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0x8a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1d      	ldr	r2, [pc, #116]	; (800420c <TIM_Base_SetConfig+0xfc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <TIM_Base_SetConfig+0xe4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d103      	bne.n	80041e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	615a      	str	r2, [r3, #20]
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800

08004210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f023 0302 	bic.w	r3, r3, #2
 8004258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <TIM_OC1_SetConfig+0xc8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d10c      	bne.n	8004286 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0308 	bic.w	r3, r3, #8
 8004272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <TIM_OC1_SetConfig+0xc8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d111      	bne.n	80042b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800429c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	621a      	str	r2, [r3, #32]
}
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40010000 	.word	0x40010000

080042dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0210 	bic.w	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0320 	bic.w	r3, r3, #32
 8004326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <TIM_OC2_SetConfig+0xd4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10d      	bne.n	8004358 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <TIM_OC2_SetConfig+0xd4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d113      	bne.n	8004388 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800436e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000

080043b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0303 	bic.w	r3, r3, #3
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <TIM_OC3_SetConfig+0xd0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10d      	bne.n	800442e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800442c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <TIM_OC3_SetConfig+0xd0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d113      	bne.n	800445e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800443c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40010000 	.word	0x40010000

08004488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	031b      	lsls	r3, r3, #12
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a10      	ldr	r2, [pc, #64]	; (8004524 <TIM_OC4_SetConfig+0x9c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d109      	bne.n	80044fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000

08004528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f023 030a 	bic.w	r3, r3, #10
 8004564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	f043 0307 	orr.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2201      	movs	r2, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	43db      	mvns	r3, r3
 800467e:	401a      	ands	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	fa01 f303 	lsl.w	r3, r1, r3
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046bc:	2302      	movs	r3, #2
 80046be:	e050      	b.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d013      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a18      	ldr	r2, [pc, #96]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a16      	ldr	r2, [pc, #88]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a15      	ldr	r2, [pc, #84]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10c      	bne.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	4313      	orrs	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40014000 	.word	0x40014000

08004784 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800479c:	2302      	movs	r3, #2
 800479e:	e03d      	b.n	800481c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <Set_LED>:
#include "WS2812B.h"

uint8_t LED_Data[NUM_LEDS][3]; // Remove unnecessary LED num
volatile int datasentflag;

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
    LED_Data[LEDnum][0] = Green;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	b2d8      	uxtb	r0, r3
 800483a:	4912      	ldr	r1, [pc, #72]	; (8004884 <Set_LED+0x5c>)
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4613      	mov	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4413      	add	r3, r2
 8004844:	440b      	add	r3, r1
 8004846:	4602      	mov	r2, r0
 8004848:	701a      	strb	r2, [r3, #0]
    LED_Data[LEDnum][1] = Red;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	b2d8      	uxtb	r0, r3
 800484e:	490d      	ldr	r1, [pc, #52]	; (8004884 <Set_LED+0x5c>)
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	440b      	add	r3, r1
 800485a:	3301      	adds	r3, #1
 800485c:	4602      	mov	r2, r0
 800485e:	701a      	strb	r2, [r3, #0]
    LED_Data[LEDnum][2] = Blue;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	b2d8      	uxtb	r0, r3
 8004864:	4907      	ldr	r1, [pc, #28]	; (8004884 <Set_LED+0x5c>)
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	440b      	add	r3, r1
 8004870:	3302      	adds	r3, #2
 8004872:	4602      	mov	r2, r0
 8004874:	701a      	strb	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000204 	.word	0x20000204

08004888 <WS2812B_Send>:

uint16_t pwmData[(24 * NUM_LEDS) + RESET_SLOTS]; // Each LED requires 24 bits.



void WS2812B_Send(TIM_HandleTypeDef htim1) {
 8004888:	b084      	sub	sp, #16
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	f107 0c20 	add.w	ip, r7, #32
 8004894:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t indx = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
    uint32_t data;

    // Shifting colors into 24 bit buffer
    for (int i = 0; i < NUM_LEDS; i++) {
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	e03e      	b.n	8004920 <WS2812B_Send+0x98>

        data = ((LED_Data[i][0] << 16) | (LED_Data[i][1] << 8) | (LED_Data[i][2]));
 80048a2:	4934      	ldr	r1, [pc, #208]	; (8004974 <WS2812B_Send+0xec>)
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	440b      	add	r3, r1
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	0419      	lsls	r1, r3, #16
 80048b2:	4830      	ldr	r0, [pc, #192]	; (8004974 <WS2812B_Send+0xec>)
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	4403      	add	r3, r0
 80048be:	3301      	adds	r3, #1
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	4319      	orrs	r1, r3
 80048c6:	482b      	ldr	r0, [pc, #172]	; (8004974 <WS2812B_Send+0xec>)
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	4403      	add	r3, r0
 80048d2:	3302      	adds	r3, #2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	607b      	str	r3, [r7, #4]

        for (int j = 23; j >= 0; j--) {
 80048da:	2317      	movs	r3, #23
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e019      	b.n	8004914 <WS2812B_Send+0x8c>
            if (data & (1 << j))
 80048e0:	2201      	movs	r2, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <WS2812B_Send+0x76>
                pwmData[indx] = ONE; // Use defined duty cycle for ONE
 80048f2:	4a21      	ldr	r2, [pc, #132]	; (8004978 <WS2812B_Send+0xf0>)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2136      	movs	r1, #54	; 0x36
 80048f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80048fc:	e004      	b.n	8004908 <WS2812B_Send+0x80>
            else
                pwmData[indx] = ZERO; // Use defined duty cycle for ZERO
 80048fe:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <WS2812B_Send+0xf0>)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	211b      	movs	r1, #27
 8004904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            indx++;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	3301      	adds	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
        for (int j = 23; j >= 0; j--) {
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3b01      	subs	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dae2      	bge.n	80048e0 <WS2812B_Send+0x58>
    for (int i = 0; i < NUM_LEDS; i++) {
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	3301      	adds	r3, #1
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b81      	cmp	r3, #129	; 0x81
 8004924:	ddbd      	ble.n	80048a2 <WS2812B_Send+0x1a>
        }
    }

    // Create the reset signal by putting low values (0) at the end of pwmData
    for (int j = 0; j < RESET_SLOTS; j++) {
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	e009      	b.n	8004940 <WS2812B_Send+0xb8>
        pwmData[indx++] = 0;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	617a      	str	r2, [r7, #20]
 8004932:	4a11      	ldr	r2, [pc, #68]	; (8004978 <WS2812B_Send+0xf0>)
 8004934:	2100      	movs	r1, #0
 8004936:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int j = 0; j < RESET_SLOTS; j++) {
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3301      	adds	r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b31      	cmp	r3, #49	; 0x31
 8004944:	ddf2      	ble.n	800492c <WS2812B_Send+0xa4>
    }

    // Start transmitting PWM data
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData, indx);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	b29b      	uxth	r3, r3
 800494a:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <WS2812B_Send+0xf0>)
 800494c:	2100      	movs	r1, #0
 800494e:	f107 0020 	add.w	r0, r7, #32
 8004952:	f7fe fef9 	bl	8003748 <HAL_TIM_PWM_Start_DMA>

    // Wait until the data has been sent
    while (!datasentflag) {}
 8004956:	bf00      	nop
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <WS2812B_Send+0xf4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0fb      	beq.n	8004958 <WS2812B_Send+0xd0>

    // Reset the data sent flag for the next transmission
    datasentflag = 0;
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <WS2812B_Send+0xf4>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004970:	b004      	add	sp, #16
 8004972:	4770      	bx	lr
 8004974:	20000204 	.word	0x20000204
 8004978:	20000390 	.word	0x20000390
 800497c:	2000038c 	.word	0x2000038c

08004980 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff f88c 	bl	8003aa8 <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    datasentflag = 1;
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8004992:	2201      	movs	r2, #1
 8004994:	601a      	str	r2, [r3, #0]
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	2000038c 	.word	0x2000038c

080049a4 <__errno>:
 80049a4:	4b01      	ldr	r3, [pc, #4]	; (80049ac <__errno+0x8>)
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20000024 	.word	0x20000024

080049b0 <__libc_init_array>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4d0d      	ldr	r5, [pc, #52]	; (80049e8 <__libc_init_array+0x38>)
 80049b4:	4c0d      	ldr	r4, [pc, #52]	; (80049ec <__libc_init_array+0x3c>)
 80049b6:	1b64      	subs	r4, r4, r5
 80049b8:	10a4      	asrs	r4, r4, #2
 80049ba:	2600      	movs	r6, #0
 80049bc:	42a6      	cmp	r6, r4
 80049be:	d109      	bne.n	80049d4 <__libc_init_array+0x24>
 80049c0:	4d0b      	ldr	r5, [pc, #44]	; (80049f0 <__libc_init_array+0x40>)
 80049c2:	4c0c      	ldr	r4, [pc, #48]	; (80049f4 <__libc_init_array+0x44>)
 80049c4:	f000 fca2 	bl	800530c <_init>
 80049c8:	1b64      	subs	r4, r4, r5
 80049ca:	10a4      	asrs	r4, r4, #2
 80049cc:	2600      	movs	r6, #0
 80049ce:	42a6      	cmp	r6, r4
 80049d0:	d105      	bne.n	80049de <__libc_init_array+0x2e>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d8:	4798      	blx	r3
 80049da:	3601      	adds	r6, #1
 80049dc:	e7ee      	b.n	80049bc <__libc_init_array+0xc>
 80049de:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e2:	4798      	blx	r3
 80049e4:	3601      	adds	r6, #1
 80049e6:	e7f2      	b.n	80049ce <__libc_init_array+0x1e>
 80049e8:	08005694 	.word	0x08005694
 80049ec:	08005694 	.word	0x08005694
 80049f0:	08005694 	.word	0x08005694
 80049f4:	08005698 	.word	0x08005698

080049f8 <memset>:
 80049f8:	4402      	add	r2, r0
 80049fa:	4603      	mov	r3, r0
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d100      	bne.n	8004a02 <memset+0xa>
 8004a00:	4770      	bx	lr
 8004a02:	f803 1b01 	strb.w	r1, [r3], #1
 8004a06:	e7f9      	b.n	80049fc <memset+0x4>

08004a08 <sniprintf>:
 8004a08:	b40c      	push	{r2, r3}
 8004a0a:	b530      	push	{r4, r5, lr}
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <sniprintf+0x64>)
 8004a0e:	1e0c      	subs	r4, r1, #0
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	b09d      	sub	sp, #116	; 0x74
 8004a14:	da08      	bge.n	8004a28 <sniprintf+0x20>
 8004a16:	238b      	movs	r3, #139	; 0x8b
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	b01d      	add	sp, #116	; 0x74
 8004a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a24:	b002      	add	sp, #8
 8004a26:	4770      	bx	lr
 8004a28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004a2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a30:	bf14      	ite	ne
 8004a32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a36:	4623      	moveq	r3, r4
 8004a38:	9304      	str	r3, [sp, #16]
 8004a3a:	9307      	str	r3, [sp, #28]
 8004a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a40:	9002      	str	r0, [sp, #8]
 8004a42:	9006      	str	r0, [sp, #24]
 8004a44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a4a:	ab21      	add	r3, sp, #132	; 0x84
 8004a4c:	a902      	add	r1, sp, #8
 8004a4e:	4628      	mov	r0, r5
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	f000 f869 	bl	8004b28 <_svfiprintf_r>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	bfbc      	itt	lt
 8004a5a:	238b      	movlt	r3, #139	; 0x8b
 8004a5c:	602b      	strlt	r3, [r5, #0]
 8004a5e:	2c00      	cmp	r4, #0
 8004a60:	d0dd      	beq.n	8004a1e <sniprintf+0x16>
 8004a62:	9b02      	ldr	r3, [sp, #8]
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e7d9      	b.n	8004a1e <sniprintf+0x16>
 8004a6a:	bf00      	nop
 8004a6c:	20000024 	.word	0x20000024

08004a70 <__ssputs_r>:
 8004a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a74:	688e      	ldr	r6, [r1, #8]
 8004a76:	429e      	cmp	r6, r3
 8004a78:	4682      	mov	sl, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4690      	mov	r8, r2
 8004a7e:	461f      	mov	r7, r3
 8004a80:	d838      	bhi.n	8004af4 <__ssputs_r+0x84>
 8004a82:	898a      	ldrh	r2, [r1, #12]
 8004a84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a88:	d032      	beq.n	8004af0 <__ssputs_r+0x80>
 8004a8a:	6825      	ldr	r5, [r4, #0]
 8004a8c:	6909      	ldr	r1, [r1, #16]
 8004a8e:	eba5 0901 	sub.w	r9, r5, r1
 8004a92:	6965      	ldr	r5, [r4, #20]
 8004a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	444b      	add	r3, r9
 8004aa0:	106d      	asrs	r5, r5, #1
 8004aa2:	429d      	cmp	r5, r3
 8004aa4:	bf38      	it	cc
 8004aa6:	461d      	movcc	r5, r3
 8004aa8:	0553      	lsls	r3, r2, #21
 8004aaa:	d531      	bpl.n	8004b10 <__ssputs_r+0xa0>
 8004aac:	4629      	mov	r1, r5
 8004aae:	f000 fb63 	bl	8005178 <_malloc_r>
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	b950      	cbnz	r0, 8004acc <__ssputs_r+0x5c>
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	f8ca 3000 	str.w	r3, [sl]
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004acc:	6921      	ldr	r1, [r4, #16]
 8004ace:	464a      	mov	r2, r9
 8004ad0:	f000 fabe 	bl	8005050 <memcpy>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	6126      	str	r6, [r4, #16]
 8004ae2:	6165      	str	r5, [r4, #20]
 8004ae4:	444e      	add	r6, r9
 8004ae6:	eba5 0509 	sub.w	r5, r5, r9
 8004aea:	6026      	str	r6, [r4, #0]
 8004aec:	60a5      	str	r5, [r4, #8]
 8004aee:	463e      	mov	r6, r7
 8004af0:	42be      	cmp	r6, r7
 8004af2:	d900      	bls.n	8004af6 <__ssputs_r+0x86>
 8004af4:	463e      	mov	r6, r7
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	4632      	mov	r2, r6
 8004afa:	4641      	mov	r1, r8
 8004afc:	f000 fab6 	bl	800506c <memmove>
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	1b9b      	subs	r3, r3, r6
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	4433      	add	r3, r6
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e7db      	b.n	8004ac8 <__ssputs_r+0x58>
 8004b10:	462a      	mov	r2, r5
 8004b12:	f000 fba5 	bl	8005260 <_realloc_r>
 8004b16:	4606      	mov	r6, r0
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d1e1      	bne.n	8004ae0 <__ssputs_r+0x70>
 8004b1c:	6921      	ldr	r1, [r4, #16]
 8004b1e:	4650      	mov	r0, sl
 8004b20:	f000 fabe 	bl	80050a0 <_free_r>
 8004b24:	e7c7      	b.n	8004ab6 <__ssputs_r+0x46>
	...

08004b28 <_svfiprintf_r>:
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	4698      	mov	r8, r3
 8004b2e:	898b      	ldrh	r3, [r1, #12]
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	b09d      	sub	sp, #116	; 0x74
 8004b34:	4607      	mov	r7, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	d50e      	bpl.n	8004b5a <_svfiprintf_r+0x32>
 8004b3c:	690b      	ldr	r3, [r1, #16]
 8004b3e:	b963      	cbnz	r3, 8004b5a <_svfiprintf_r+0x32>
 8004b40:	2140      	movs	r1, #64	; 0x40
 8004b42:	f000 fb19 	bl	8005178 <_malloc_r>
 8004b46:	6028      	str	r0, [r5, #0]
 8004b48:	6128      	str	r0, [r5, #16]
 8004b4a:	b920      	cbnz	r0, 8004b56 <_svfiprintf_r+0x2e>
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	e0d1      	b.n	8004cfa <_svfiprintf_r+0x1d2>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	616b      	str	r3, [r5, #20]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5e:	2320      	movs	r3, #32
 8004b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b68:	2330      	movs	r3, #48	; 0x30
 8004b6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d14 <_svfiprintf_r+0x1ec>
 8004b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b72:	f04f 0901 	mov.w	r9, #1
 8004b76:	4623      	mov	r3, r4
 8004b78:	469a      	mov	sl, r3
 8004b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7e:	b10a      	cbz	r2, 8004b84 <_svfiprintf_r+0x5c>
 8004b80:	2a25      	cmp	r2, #37	; 0x25
 8004b82:	d1f9      	bne.n	8004b78 <_svfiprintf_r+0x50>
 8004b84:	ebba 0b04 	subs.w	fp, sl, r4
 8004b88:	d00b      	beq.n	8004ba2 <_svfiprintf_r+0x7a>
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff ff6d 	bl	8004a70 <__ssputs_r>
 8004b96:	3001      	adds	r0, #1
 8004b98:	f000 80aa 	beq.w	8004cf0 <_svfiprintf_r+0x1c8>
 8004b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b9e:	445a      	add	r2, fp
 8004ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80a2 	beq.w	8004cf0 <_svfiprintf_r+0x1c8>
 8004bac:	2300      	movs	r3, #0
 8004bae:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb6:	f10a 0a01 	add.w	sl, sl, #1
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc4:	4654      	mov	r4, sl
 8004bc6:	2205      	movs	r2, #5
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	4851      	ldr	r0, [pc, #324]	; (8004d14 <_svfiprintf_r+0x1ec>)
 8004bce:	f7fb fb0f 	bl	80001f0 <memchr>
 8004bd2:	9a04      	ldr	r2, [sp, #16]
 8004bd4:	b9d8      	cbnz	r0, 8004c0e <_svfiprintf_r+0xe6>
 8004bd6:	06d0      	lsls	r0, r2, #27
 8004bd8:	bf44      	itt	mi
 8004bda:	2320      	movmi	r3, #32
 8004bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be0:	0711      	lsls	r1, r2, #28
 8004be2:	bf44      	itt	mi
 8004be4:	232b      	movmi	r3, #43	; 0x2b
 8004be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bea:	f89a 3000 	ldrb.w	r3, [sl]
 8004bee:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf0:	d015      	beq.n	8004c1e <_svfiprintf_r+0xf6>
 8004bf2:	9a07      	ldr	r2, [sp, #28]
 8004bf4:	4654      	mov	r4, sl
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f04f 0c0a 	mov.w	ip, #10
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c02:	3b30      	subs	r3, #48	; 0x30
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d94e      	bls.n	8004ca6 <_svfiprintf_r+0x17e>
 8004c08:	b1b0      	cbz	r0, 8004c38 <_svfiprintf_r+0x110>
 8004c0a:	9207      	str	r2, [sp, #28]
 8004c0c:	e014      	b.n	8004c38 <_svfiprintf_r+0x110>
 8004c0e:	eba0 0308 	sub.w	r3, r0, r8
 8004c12:	fa09 f303 	lsl.w	r3, r9, r3
 8004c16:	4313      	orrs	r3, r2
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	46a2      	mov	sl, r4
 8004c1c:	e7d2      	b.n	8004bc4 <_svfiprintf_r+0x9c>
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	9103      	str	r1, [sp, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bfbb      	ittet	lt
 8004c2a:	425b      	neglt	r3, r3
 8004c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c30:	9307      	strge	r3, [sp, #28]
 8004c32:	9307      	strlt	r3, [sp, #28]
 8004c34:	bfb8      	it	lt
 8004c36:	9204      	strlt	r2, [sp, #16]
 8004c38:	7823      	ldrb	r3, [r4, #0]
 8004c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c3c:	d10c      	bne.n	8004c58 <_svfiprintf_r+0x130>
 8004c3e:	7863      	ldrb	r3, [r4, #1]
 8004c40:	2b2a      	cmp	r3, #42	; 0x2a
 8004c42:	d135      	bne.n	8004cb0 <_svfiprintf_r+0x188>
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	9203      	str	r2, [sp, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bfb8      	it	lt
 8004c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c54:	3402      	adds	r4, #2
 8004c56:	9305      	str	r3, [sp, #20]
 8004c58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d24 <_svfiprintf_r+0x1fc>
 8004c5c:	7821      	ldrb	r1, [r4, #0]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4650      	mov	r0, sl
 8004c62:	f7fb fac5 	bl	80001f0 <memchr>
 8004c66:	b140      	cbz	r0, 8004c7a <_svfiprintf_r+0x152>
 8004c68:	2340      	movs	r3, #64	; 0x40
 8004c6a:	eba0 000a 	sub.w	r0, r0, sl
 8004c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	4303      	orrs	r3, r0
 8004c76:	3401      	adds	r4, #1
 8004c78:	9304      	str	r3, [sp, #16]
 8004c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7e:	4826      	ldr	r0, [pc, #152]	; (8004d18 <_svfiprintf_r+0x1f0>)
 8004c80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c84:	2206      	movs	r2, #6
 8004c86:	f7fb fab3 	bl	80001f0 <memchr>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d038      	beq.n	8004d00 <_svfiprintf_r+0x1d8>
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <_svfiprintf_r+0x1f4>)
 8004c90:	bb1b      	cbnz	r3, 8004cda <_svfiprintf_r+0x1b2>
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	3307      	adds	r3, #7
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	9303      	str	r3, [sp, #12]
 8004c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca0:	4433      	add	r3, r6
 8004ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca4:	e767      	b.n	8004b76 <_svfiprintf_r+0x4e>
 8004ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004caa:	460c      	mov	r4, r1
 8004cac:	2001      	movs	r0, #1
 8004cae:	e7a5      	b.n	8004bfc <_svfiprintf_r+0xd4>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	3401      	adds	r4, #1
 8004cb4:	9305      	str	r3, [sp, #20]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f04f 0c0a 	mov.w	ip, #10
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc2:	3a30      	subs	r2, #48	; 0x30
 8004cc4:	2a09      	cmp	r2, #9
 8004cc6:	d903      	bls.n	8004cd0 <_svfiprintf_r+0x1a8>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0c5      	beq.n	8004c58 <_svfiprintf_r+0x130>
 8004ccc:	9105      	str	r1, [sp, #20]
 8004cce:	e7c3      	b.n	8004c58 <_svfiprintf_r+0x130>
 8004cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e7f0      	b.n	8004cbc <_svfiprintf_r+0x194>
 8004cda:	ab03      	add	r3, sp, #12
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	462a      	mov	r2, r5
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <_svfiprintf_r+0x1f8>)
 8004ce2:	a904      	add	r1, sp, #16
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f3af 8000 	nop.w
 8004cea:	1c42      	adds	r2, r0, #1
 8004cec:	4606      	mov	r6, r0
 8004cee:	d1d6      	bne.n	8004c9e <_svfiprintf_r+0x176>
 8004cf0:	89ab      	ldrh	r3, [r5, #12]
 8004cf2:	065b      	lsls	r3, r3, #25
 8004cf4:	f53f af2c 	bmi.w	8004b50 <_svfiprintf_r+0x28>
 8004cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cfa:	b01d      	add	sp, #116	; 0x74
 8004cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d00:	ab03      	add	r3, sp, #12
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	462a      	mov	r2, r5
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <_svfiprintf_r+0x1f8>)
 8004d08:	a904      	add	r1, sp, #16
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f000 f87a 	bl	8004e04 <_printf_i>
 8004d10:	e7eb      	b.n	8004cea <_svfiprintf_r+0x1c2>
 8004d12:	bf00      	nop
 8004d14:	08005658 	.word	0x08005658
 8004d18:	08005662 	.word	0x08005662
 8004d1c:	00000000 	.word	0x00000000
 8004d20:	08004a71 	.word	0x08004a71
 8004d24:	0800565e 	.word	0x0800565e

08004d28 <_printf_common>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	4699      	mov	r9, r3
 8004d30:	688a      	ldr	r2, [r1, #8]
 8004d32:	690b      	ldr	r3, [r1, #16]
 8004d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	bfb8      	it	lt
 8004d3c:	4613      	movlt	r3, r2
 8004d3e:	6033      	str	r3, [r6, #0]
 8004d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d44:	4607      	mov	r7, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b10a      	cbz	r2, 8004d4e <_printf_common+0x26>
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	0699      	lsls	r1, r3, #26
 8004d52:	bf42      	ittt	mi
 8004d54:	6833      	ldrmi	r3, [r6, #0]
 8004d56:	3302      	addmi	r3, #2
 8004d58:	6033      	strmi	r3, [r6, #0]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	f015 0506 	ands.w	r5, r5, #6
 8004d60:	d106      	bne.n	8004d70 <_printf_common+0x48>
 8004d62:	f104 0a19 	add.w	sl, r4, #25
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	6832      	ldr	r2, [r6, #0]
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	dc26      	bgt.n	8004dbe <_printf_common+0x96>
 8004d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d74:	1e13      	subs	r3, r2, #0
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	bf18      	it	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	0692      	lsls	r2, r2, #26
 8004d7e:	d42b      	bmi.n	8004dd8 <_printf_common+0xb0>
 8004d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d84:	4649      	mov	r1, r9
 8004d86:	4638      	mov	r0, r7
 8004d88:	47c0      	blx	r8
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d01e      	beq.n	8004dcc <_printf_common+0xa4>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	68e5      	ldr	r5, [r4, #12]
 8004d92:	6832      	ldr	r2, [r6, #0]
 8004d94:	f003 0306 	and.w	r3, r3, #6
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	bf08      	it	eq
 8004d9c:	1aad      	subeq	r5, r5, r2
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	6922      	ldr	r2, [r4, #16]
 8004da2:	bf0c      	ite	eq
 8004da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da8:	2500      	movne	r5, #0
 8004daa:	4293      	cmp	r3, r2
 8004dac:	bfc4      	itt	gt
 8004dae:	1a9b      	subgt	r3, r3, r2
 8004db0:	18ed      	addgt	r5, r5, r3
 8004db2:	2600      	movs	r6, #0
 8004db4:	341a      	adds	r4, #26
 8004db6:	42b5      	cmp	r5, r6
 8004db8:	d11a      	bne.n	8004df0 <_printf_common+0xc8>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e008      	b.n	8004dd0 <_printf_common+0xa8>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d103      	bne.n	8004dd4 <_printf_common+0xac>
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	e7c6      	b.n	8004d66 <_printf_common+0x3e>
 8004dd8:	18e1      	adds	r1, r4, r3
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	2030      	movs	r0, #48	; 0x30
 8004dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de2:	4422      	add	r2, r4
 8004de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dec:	3302      	adds	r3, #2
 8004dee:	e7c7      	b.n	8004d80 <_printf_common+0x58>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4622      	mov	r2, r4
 8004df4:	4649      	mov	r1, r9
 8004df6:	4638      	mov	r0, r7
 8004df8:	47c0      	blx	r8
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d0e6      	beq.n	8004dcc <_printf_common+0xa4>
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7d9      	b.n	8004db6 <_printf_common+0x8e>
	...

08004e04 <_printf_i>:
 8004e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	7e0f      	ldrb	r7, [r1, #24]
 8004e0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e0c:	2f78      	cmp	r7, #120	; 0x78
 8004e0e:	4691      	mov	r9, r2
 8004e10:	4680      	mov	r8, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	469a      	mov	sl, r3
 8004e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e1a:	d807      	bhi.n	8004e2c <_printf_i+0x28>
 8004e1c:	2f62      	cmp	r7, #98	; 0x62
 8004e1e:	d80a      	bhi.n	8004e36 <_printf_i+0x32>
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	f000 80d8 	beq.w	8004fd6 <_printf_i+0x1d2>
 8004e26:	2f58      	cmp	r7, #88	; 0x58
 8004e28:	f000 80a3 	beq.w	8004f72 <_printf_i+0x16e>
 8004e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e34:	e03a      	b.n	8004eac <_printf_i+0xa8>
 8004e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e3a:	2b15      	cmp	r3, #21
 8004e3c:	d8f6      	bhi.n	8004e2c <_printf_i+0x28>
 8004e3e:	a101      	add	r1, pc, #4	; (adr r1, 8004e44 <_printf_i+0x40>)
 8004e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	08004e2d 	.word	0x08004e2d
 8004e50:	08004e2d 	.word	0x08004e2d
 8004e54:	08004e2d 	.word	0x08004e2d
 8004e58:	08004e2d 	.word	0x08004e2d
 8004e5c:	08004eb1 	.word	0x08004eb1
 8004e60:	08004e2d 	.word	0x08004e2d
 8004e64:	08004e2d 	.word	0x08004e2d
 8004e68:	08004e2d 	.word	0x08004e2d
 8004e6c:	08004e2d 	.word	0x08004e2d
 8004e70:	08004fbd 	.word	0x08004fbd
 8004e74:	08004ee1 	.word	0x08004ee1
 8004e78:	08004f9f 	.word	0x08004f9f
 8004e7c:	08004e2d 	.word	0x08004e2d
 8004e80:	08004e2d 	.word	0x08004e2d
 8004e84:	08004fdf 	.word	0x08004fdf
 8004e88:	08004e2d 	.word	0x08004e2d
 8004e8c:	08004ee1 	.word	0x08004ee1
 8004e90:	08004e2d 	.word	0x08004e2d
 8004e94:	08004e2d 	.word	0x08004e2d
 8004e98:	08004fa7 	.word	0x08004fa7
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	602a      	str	r2, [r5, #0]
 8004ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0a3      	b.n	8004ff8 <_printf_i+0x1f4>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	6829      	ldr	r1, [r5, #0]
 8004eb4:	0606      	lsls	r6, r0, #24
 8004eb6:	f101 0304 	add.w	r3, r1, #4
 8004eba:	d50a      	bpl.n	8004ed2 <_printf_i+0xce>
 8004ebc:	680e      	ldr	r6, [r1, #0]
 8004ebe:	602b      	str	r3, [r5, #0]
 8004ec0:	2e00      	cmp	r6, #0
 8004ec2:	da03      	bge.n	8004ecc <_printf_i+0xc8>
 8004ec4:	232d      	movs	r3, #45	; 0x2d
 8004ec6:	4276      	negs	r6, r6
 8004ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ecc:	485e      	ldr	r0, [pc, #376]	; (8005048 <_printf_i+0x244>)
 8004ece:	230a      	movs	r3, #10
 8004ed0:	e019      	b.n	8004f06 <_printf_i+0x102>
 8004ed2:	680e      	ldr	r6, [r1, #0]
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004eda:	bf18      	it	ne
 8004edc:	b236      	sxthne	r6, r6
 8004ede:	e7ef      	b.n	8004ec0 <_printf_i+0xbc>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	6820      	ldr	r0, [r4, #0]
 8004ee4:	1d19      	adds	r1, r3, #4
 8004ee6:	6029      	str	r1, [r5, #0]
 8004ee8:	0601      	lsls	r1, r0, #24
 8004eea:	d501      	bpl.n	8004ef0 <_printf_i+0xec>
 8004eec:	681e      	ldr	r6, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <_printf_i+0xf2>
 8004ef0:	0646      	lsls	r6, r0, #25
 8004ef2:	d5fb      	bpl.n	8004eec <_printf_i+0xe8>
 8004ef4:	881e      	ldrh	r6, [r3, #0]
 8004ef6:	4854      	ldr	r0, [pc, #336]	; (8005048 <_printf_i+0x244>)
 8004ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8004efa:	bf0c      	ite	eq
 8004efc:	2308      	moveq	r3, #8
 8004efe:	230a      	movne	r3, #10
 8004f00:	2100      	movs	r1, #0
 8004f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f06:	6865      	ldr	r5, [r4, #4]
 8004f08:	60a5      	str	r5, [r4, #8]
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	bfa2      	ittt	ge
 8004f0e:	6821      	ldrge	r1, [r4, #0]
 8004f10:	f021 0104 	bicge.w	r1, r1, #4
 8004f14:	6021      	strge	r1, [r4, #0]
 8004f16:	b90e      	cbnz	r6, 8004f1c <_printf_i+0x118>
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	d04d      	beq.n	8004fb8 <_printf_i+0x1b4>
 8004f1c:	4615      	mov	r5, r2
 8004f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f22:	fb03 6711 	mls	r7, r3, r1, r6
 8004f26:	5dc7      	ldrb	r7, [r0, r7]
 8004f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f2c:	4637      	mov	r7, r6
 8004f2e:	42bb      	cmp	r3, r7
 8004f30:	460e      	mov	r6, r1
 8004f32:	d9f4      	bls.n	8004f1e <_printf_i+0x11a>
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d10b      	bne.n	8004f50 <_printf_i+0x14c>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	07de      	lsls	r6, r3, #31
 8004f3c:	d508      	bpl.n	8004f50 <_printf_i+0x14c>
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	6861      	ldr	r1, [r4, #4]
 8004f42:	4299      	cmp	r1, r3
 8004f44:	bfde      	ittt	le
 8004f46:	2330      	movle	r3, #48	; 0x30
 8004f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f50:	1b52      	subs	r2, r2, r5
 8004f52:	6122      	str	r2, [r4, #16]
 8004f54:	f8cd a000 	str.w	sl, [sp]
 8004f58:	464b      	mov	r3, r9
 8004f5a:	aa03      	add	r2, sp, #12
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f7ff fee2 	bl	8004d28 <_printf_common>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d14c      	bne.n	8005002 <_printf_i+0x1fe>
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	b004      	add	sp, #16
 8004f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f72:	4835      	ldr	r0, [pc, #212]	; (8005048 <_printf_i+0x244>)
 8004f74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f78:	6829      	ldr	r1, [r5, #0]
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f80:	6029      	str	r1, [r5, #0]
 8004f82:	061d      	lsls	r5, r3, #24
 8004f84:	d514      	bpl.n	8004fb0 <_printf_i+0x1ac>
 8004f86:	07df      	lsls	r7, r3, #31
 8004f88:	bf44      	itt	mi
 8004f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8e:	6023      	strmi	r3, [r4, #0]
 8004f90:	b91e      	cbnz	r6, 8004f9a <_printf_i+0x196>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f023 0320 	bic.w	r3, r3, #32
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	e7b0      	b.n	8004f00 <_printf_i+0xfc>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f043 0320 	orr.w	r3, r3, #32
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	2378      	movs	r3, #120	; 0x78
 8004fa8:	4828      	ldr	r0, [pc, #160]	; (800504c <_printf_i+0x248>)
 8004faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fae:	e7e3      	b.n	8004f78 <_printf_i+0x174>
 8004fb0:	0659      	lsls	r1, r3, #25
 8004fb2:	bf48      	it	mi
 8004fb4:	b2b6      	uxthmi	r6, r6
 8004fb6:	e7e6      	b.n	8004f86 <_printf_i+0x182>
 8004fb8:	4615      	mov	r5, r2
 8004fba:	e7bb      	b.n	8004f34 <_printf_i+0x130>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	6826      	ldr	r6, [r4, #0]
 8004fc0:	6961      	ldr	r1, [r4, #20]
 8004fc2:	1d18      	adds	r0, r3, #4
 8004fc4:	6028      	str	r0, [r5, #0]
 8004fc6:	0635      	lsls	r5, r6, #24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0x1cc>
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0x1d2>
 8004fd0:	0670      	lsls	r0, r6, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0x1c8>
 8004fd4:	8019      	strh	r1, [r3, #0]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6123      	str	r3, [r4, #16]
 8004fda:	4615      	mov	r5, r2
 8004fdc:	e7ba      	b.n	8004f54 <_printf_i+0x150>
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	602a      	str	r2, [r5, #0]
 8004fe4:	681d      	ldr	r5, [r3, #0]
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4628      	mov	r0, r5
 8004fec:	f7fb f900 	bl	80001f0 <memchr>
 8004ff0:	b108      	cbz	r0, 8004ff6 <_printf_i+0x1f2>
 8004ff2:	1b40      	subs	r0, r0, r5
 8004ff4:	6060      	str	r0, [r4, #4]
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005000:	e7a8      	b.n	8004f54 <_printf_i+0x150>
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	462a      	mov	r2, r5
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	47d0      	blx	sl
 800500c:	3001      	adds	r0, #1
 800500e:	d0ab      	beq.n	8004f68 <_printf_i+0x164>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	079b      	lsls	r3, r3, #30
 8005014:	d413      	bmi.n	800503e <_printf_i+0x23a>
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	4298      	cmp	r0, r3
 800501c:	bfb8      	it	lt
 800501e:	4618      	movlt	r0, r3
 8005020:	e7a4      	b.n	8004f6c <_printf_i+0x168>
 8005022:	2301      	movs	r3, #1
 8005024:	4632      	mov	r2, r6
 8005026:	4649      	mov	r1, r9
 8005028:	4640      	mov	r0, r8
 800502a:	47d0      	blx	sl
 800502c:	3001      	adds	r0, #1
 800502e:	d09b      	beq.n	8004f68 <_printf_i+0x164>
 8005030:	3501      	adds	r5, #1
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	9903      	ldr	r1, [sp, #12]
 8005036:	1a5b      	subs	r3, r3, r1
 8005038:	42ab      	cmp	r3, r5
 800503a:	dcf2      	bgt.n	8005022 <_printf_i+0x21e>
 800503c:	e7eb      	b.n	8005016 <_printf_i+0x212>
 800503e:	2500      	movs	r5, #0
 8005040:	f104 0619 	add.w	r6, r4, #25
 8005044:	e7f5      	b.n	8005032 <_printf_i+0x22e>
 8005046:	bf00      	nop
 8005048:	08005669 	.word	0x08005669
 800504c:	0800567a 	.word	0x0800567a

08005050 <memcpy>:
 8005050:	440a      	add	r2, r1
 8005052:	4291      	cmp	r1, r2
 8005054:	f100 33ff 	add.w	r3, r0, #4294967295
 8005058:	d100      	bne.n	800505c <memcpy+0xc>
 800505a:	4770      	bx	lr
 800505c:	b510      	push	{r4, lr}
 800505e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005066:	4291      	cmp	r1, r2
 8005068:	d1f9      	bne.n	800505e <memcpy+0xe>
 800506a:	bd10      	pop	{r4, pc}

0800506c <memmove>:
 800506c:	4288      	cmp	r0, r1
 800506e:	b510      	push	{r4, lr}
 8005070:	eb01 0402 	add.w	r4, r1, r2
 8005074:	d902      	bls.n	800507c <memmove+0x10>
 8005076:	4284      	cmp	r4, r0
 8005078:	4623      	mov	r3, r4
 800507a:	d807      	bhi.n	800508c <memmove+0x20>
 800507c:	1e43      	subs	r3, r0, #1
 800507e:	42a1      	cmp	r1, r4
 8005080:	d008      	beq.n	8005094 <memmove+0x28>
 8005082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800508a:	e7f8      	b.n	800507e <memmove+0x12>
 800508c:	4402      	add	r2, r0
 800508e:	4601      	mov	r1, r0
 8005090:	428a      	cmp	r2, r1
 8005092:	d100      	bne.n	8005096 <memmove+0x2a>
 8005094:	bd10      	pop	{r4, pc}
 8005096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800509a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800509e:	e7f7      	b.n	8005090 <memmove+0x24>

080050a0 <_free_r>:
 80050a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050a2:	2900      	cmp	r1, #0
 80050a4:	d044      	beq.n	8005130 <_free_r+0x90>
 80050a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050aa:	9001      	str	r0, [sp, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f1a1 0404 	sub.w	r4, r1, #4
 80050b2:	bfb8      	it	lt
 80050b4:	18e4      	addlt	r4, r4, r3
 80050b6:	f000 f913 	bl	80052e0 <__malloc_lock>
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <_free_r+0x94>)
 80050bc:	9801      	ldr	r0, [sp, #4]
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	b933      	cbnz	r3, 80050d0 <_free_r+0x30>
 80050c2:	6063      	str	r3, [r4, #4]
 80050c4:	6014      	str	r4, [r2, #0]
 80050c6:	b003      	add	sp, #12
 80050c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050cc:	f000 b90e 	b.w	80052ec <__malloc_unlock>
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	d908      	bls.n	80050e6 <_free_r+0x46>
 80050d4:	6825      	ldr	r5, [r4, #0]
 80050d6:	1961      	adds	r1, r4, r5
 80050d8:	428b      	cmp	r3, r1
 80050da:	bf01      	itttt	eq
 80050dc:	6819      	ldreq	r1, [r3, #0]
 80050de:	685b      	ldreq	r3, [r3, #4]
 80050e0:	1949      	addeq	r1, r1, r5
 80050e2:	6021      	streq	r1, [r4, #0]
 80050e4:	e7ed      	b.n	80050c2 <_free_r+0x22>
 80050e6:	461a      	mov	r2, r3
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	b10b      	cbz	r3, 80050f0 <_free_r+0x50>
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d9fa      	bls.n	80050e6 <_free_r+0x46>
 80050f0:	6811      	ldr	r1, [r2, #0]
 80050f2:	1855      	adds	r5, r2, r1
 80050f4:	42a5      	cmp	r5, r4
 80050f6:	d10b      	bne.n	8005110 <_free_r+0x70>
 80050f8:	6824      	ldr	r4, [r4, #0]
 80050fa:	4421      	add	r1, r4
 80050fc:	1854      	adds	r4, r2, r1
 80050fe:	42a3      	cmp	r3, r4
 8005100:	6011      	str	r1, [r2, #0]
 8005102:	d1e0      	bne.n	80050c6 <_free_r+0x26>
 8005104:	681c      	ldr	r4, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	6053      	str	r3, [r2, #4]
 800510a:	4421      	add	r1, r4
 800510c:	6011      	str	r1, [r2, #0]
 800510e:	e7da      	b.n	80050c6 <_free_r+0x26>
 8005110:	d902      	bls.n	8005118 <_free_r+0x78>
 8005112:	230c      	movs	r3, #12
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	e7d6      	b.n	80050c6 <_free_r+0x26>
 8005118:	6825      	ldr	r5, [r4, #0]
 800511a:	1961      	adds	r1, r4, r5
 800511c:	428b      	cmp	r3, r1
 800511e:	bf04      	itt	eq
 8005120:	6819      	ldreq	r1, [r3, #0]
 8005122:	685b      	ldreq	r3, [r3, #4]
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	bf04      	itt	eq
 8005128:	1949      	addeq	r1, r1, r5
 800512a:	6021      	streq	r1, [r4, #0]
 800512c:	6054      	str	r4, [r2, #4]
 800512e:	e7ca      	b.n	80050c6 <_free_r+0x26>
 8005130:	b003      	add	sp, #12
 8005132:	bd30      	pop	{r4, r5, pc}
 8005134:	20001c54 	.word	0x20001c54

08005138 <sbrk_aligned>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4e0e      	ldr	r6, [pc, #56]	; (8005174 <sbrk_aligned+0x3c>)
 800513c:	460c      	mov	r4, r1
 800513e:	6831      	ldr	r1, [r6, #0]
 8005140:	4605      	mov	r5, r0
 8005142:	b911      	cbnz	r1, 800514a <sbrk_aligned+0x12>
 8005144:	f000 f8bc 	bl	80052c0 <_sbrk_r>
 8005148:	6030      	str	r0, [r6, #0]
 800514a:	4621      	mov	r1, r4
 800514c:	4628      	mov	r0, r5
 800514e:	f000 f8b7 	bl	80052c0 <_sbrk_r>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	d00a      	beq.n	800516c <sbrk_aligned+0x34>
 8005156:	1cc4      	adds	r4, r0, #3
 8005158:	f024 0403 	bic.w	r4, r4, #3
 800515c:	42a0      	cmp	r0, r4
 800515e:	d007      	beq.n	8005170 <sbrk_aligned+0x38>
 8005160:	1a21      	subs	r1, r4, r0
 8005162:	4628      	mov	r0, r5
 8005164:	f000 f8ac 	bl	80052c0 <_sbrk_r>
 8005168:	3001      	adds	r0, #1
 800516a:	d101      	bne.n	8005170 <sbrk_aligned+0x38>
 800516c:	f04f 34ff 	mov.w	r4, #4294967295
 8005170:	4620      	mov	r0, r4
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	20001c58 	.word	0x20001c58

08005178 <_malloc_r>:
 8005178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517c:	1ccd      	adds	r5, r1, #3
 800517e:	f025 0503 	bic.w	r5, r5, #3
 8005182:	3508      	adds	r5, #8
 8005184:	2d0c      	cmp	r5, #12
 8005186:	bf38      	it	cc
 8005188:	250c      	movcc	r5, #12
 800518a:	2d00      	cmp	r5, #0
 800518c:	4607      	mov	r7, r0
 800518e:	db01      	blt.n	8005194 <_malloc_r+0x1c>
 8005190:	42a9      	cmp	r1, r5
 8005192:	d905      	bls.n	80051a0 <_malloc_r+0x28>
 8005194:	230c      	movs	r3, #12
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	2600      	movs	r6, #0
 800519a:	4630      	mov	r0, r6
 800519c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a0:	4e2e      	ldr	r6, [pc, #184]	; (800525c <_malloc_r+0xe4>)
 80051a2:	f000 f89d 	bl	80052e0 <__malloc_lock>
 80051a6:	6833      	ldr	r3, [r6, #0]
 80051a8:	461c      	mov	r4, r3
 80051aa:	bb34      	cbnz	r4, 80051fa <_malloc_r+0x82>
 80051ac:	4629      	mov	r1, r5
 80051ae:	4638      	mov	r0, r7
 80051b0:	f7ff ffc2 	bl	8005138 <sbrk_aligned>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	4604      	mov	r4, r0
 80051b8:	d14d      	bne.n	8005256 <_malloc_r+0xde>
 80051ba:	6834      	ldr	r4, [r6, #0]
 80051bc:	4626      	mov	r6, r4
 80051be:	2e00      	cmp	r6, #0
 80051c0:	d140      	bne.n	8005244 <_malloc_r+0xcc>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	4631      	mov	r1, r6
 80051c6:	4638      	mov	r0, r7
 80051c8:	eb04 0803 	add.w	r8, r4, r3
 80051cc:	f000 f878 	bl	80052c0 <_sbrk_r>
 80051d0:	4580      	cmp	r8, r0
 80051d2:	d13a      	bne.n	800524a <_malloc_r+0xd2>
 80051d4:	6821      	ldr	r1, [r4, #0]
 80051d6:	3503      	adds	r5, #3
 80051d8:	1a6d      	subs	r5, r5, r1
 80051da:	f025 0503 	bic.w	r5, r5, #3
 80051de:	3508      	adds	r5, #8
 80051e0:	2d0c      	cmp	r5, #12
 80051e2:	bf38      	it	cc
 80051e4:	250c      	movcc	r5, #12
 80051e6:	4629      	mov	r1, r5
 80051e8:	4638      	mov	r0, r7
 80051ea:	f7ff ffa5 	bl	8005138 <sbrk_aligned>
 80051ee:	3001      	adds	r0, #1
 80051f0:	d02b      	beq.n	800524a <_malloc_r+0xd2>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	442b      	add	r3, r5
 80051f6:	6023      	str	r3, [r4, #0]
 80051f8:	e00e      	b.n	8005218 <_malloc_r+0xa0>
 80051fa:	6822      	ldr	r2, [r4, #0]
 80051fc:	1b52      	subs	r2, r2, r5
 80051fe:	d41e      	bmi.n	800523e <_malloc_r+0xc6>
 8005200:	2a0b      	cmp	r2, #11
 8005202:	d916      	bls.n	8005232 <_malloc_r+0xba>
 8005204:	1961      	adds	r1, r4, r5
 8005206:	42a3      	cmp	r3, r4
 8005208:	6025      	str	r5, [r4, #0]
 800520a:	bf18      	it	ne
 800520c:	6059      	strne	r1, [r3, #4]
 800520e:	6863      	ldr	r3, [r4, #4]
 8005210:	bf08      	it	eq
 8005212:	6031      	streq	r1, [r6, #0]
 8005214:	5162      	str	r2, [r4, r5]
 8005216:	604b      	str	r3, [r1, #4]
 8005218:	4638      	mov	r0, r7
 800521a:	f104 060b 	add.w	r6, r4, #11
 800521e:	f000 f865 	bl	80052ec <__malloc_unlock>
 8005222:	f026 0607 	bic.w	r6, r6, #7
 8005226:	1d23      	adds	r3, r4, #4
 8005228:	1af2      	subs	r2, r6, r3
 800522a:	d0b6      	beq.n	800519a <_malloc_r+0x22>
 800522c:	1b9b      	subs	r3, r3, r6
 800522e:	50a3      	str	r3, [r4, r2]
 8005230:	e7b3      	b.n	800519a <_malloc_r+0x22>
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	42a3      	cmp	r3, r4
 8005236:	bf0c      	ite	eq
 8005238:	6032      	streq	r2, [r6, #0]
 800523a:	605a      	strne	r2, [r3, #4]
 800523c:	e7ec      	b.n	8005218 <_malloc_r+0xa0>
 800523e:	4623      	mov	r3, r4
 8005240:	6864      	ldr	r4, [r4, #4]
 8005242:	e7b2      	b.n	80051aa <_malloc_r+0x32>
 8005244:	4634      	mov	r4, r6
 8005246:	6876      	ldr	r6, [r6, #4]
 8005248:	e7b9      	b.n	80051be <_malloc_r+0x46>
 800524a:	230c      	movs	r3, #12
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4638      	mov	r0, r7
 8005250:	f000 f84c 	bl	80052ec <__malloc_unlock>
 8005254:	e7a1      	b.n	800519a <_malloc_r+0x22>
 8005256:	6025      	str	r5, [r4, #0]
 8005258:	e7de      	b.n	8005218 <_malloc_r+0xa0>
 800525a:	bf00      	nop
 800525c:	20001c54 	.word	0x20001c54

08005260 <_realloc_r>:
 8005260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005264:	4680      	mov	r8, r0
 8005266:	4614      	mov	r4, r2
 8005268:	460e      	mov	r6, r1
 800526a:	b921      	cbnz	r1, 8005276 <_realloc_r+0x16>
 800526c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	4611      	mov	r1, r2
 8005272:	f7ff bf81 	b.w	8005178 <_malloc_r>
 8005276:	b92a      	cbnz	r2, 8005284 <_realloc_r+0x24>
 8005278:	f7ff ff12 	bl	80050a0 <_free_r>
 800527c:	4625      	mov	r5, r4
 800527e:	4628      	mov	r0, r5
 8005280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005284:	f000 f838 	bl	80052f8 <_malloc_usable_size_r>
 8005288:	4284      	cmp	r4, r0
 800528a:	4607      	mov	r7, r0
 800528c:	d802      	bhi.n	8005294 <_realloc_r+0x34>
 800528e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005292:	d812      	bhi.n	80052ba <_realloc_r+0x5a>
 8005294:	4621      	mov	r1, r4
 8005296:	4640      	mov	r0, r8
 8005298:	f7ff ff6e 	bl	8005178 <_malloc_r>
 800529c:	4605      	mov	r5, r0
 800529e:	2800      	cmp	r0, #0
 80052a0:	d0ed      	beq.n	800527e <_realloc_r+0x1e>
 80052a2:	42bc      	cmp	r4, r7
 80052a4:	4622      	mov	r2, r4
 80052a6:	4631      	mov	r1, r6
 80052a8:	bf28      	it	cs
 80052aa:	463a      	movcs	r2, r7
 80052ac:	f7ff fed0 	bl	8005050 <memcpy>
 80052b0:	4631      	mov	r1, r6
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7ff fef4 	bl	80050a0 <_free_r>
 80052b8:	e7e1      	b.n	800527e <_realloc_r+0x1e>
 80052ba:	4635      	mov	r5, r6
 80052bc:	e7df      	b.n	800527e <_realloc_r+0x1e>
	...

080052c0 <_sbrk_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4d06      	ldr	r5, [pc, #24]	; (80052dc <_sbrk_r+0x1c>)
 80052c4:	2300      	movs	r3, #0
 80052c6:	4604      	mov	r4, r0
 80052c8:	4608      	mov	r0, r1
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	f7fc f8b0 	bl	8001430 <_sbrk>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_sbrk_r+0x1a>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_sbrk_r+0x1a>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20001c5c 	.word	0x20001c5c

080052e0 <__malloc_lock>:
 80052e0:	4801      	ldr	r0, [pc, #4]	; (80052e8 <__malloc_lock+0x8>)
 80052e2:	f000 b811 	b.w	8005308 <__retarget_lock_acquire_recursive>
 80052e6:	bf00      	nop
 80052e8:	20001c60 	.word	0x20001c60

080052ec <__malloc_unlock>:
 80052ec:	4801      	ldr	r0, [pc, #4]	; (80052f4 <__malloc_unlock+0x8>)
 80052ee:	f000 b80c 	b.w	800530a <__retarget_lock_release_recursive>
 80052f2:	bf00      	nop
 80052f4:	20001c60 	.word	0x20001c60

080052f8 <_malloc_usable_size_r>:
 80052f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fc:	1f18      	subs	r0, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfbc      	itt	lt
 8005302:	580b      	ldrlt	r3, [r1, r0]
 8005304:	18c0      	addlt	r0, r0, r3
 8005306:	4770      	bx	lr

08005308 <__retarget_lock_acquire_recursive>:
 8005308:	4770      	bx	lr

0800530a <__retarget_lock_release_recursive>:
 800530a:	4770      	bx	lr

0800530c <_init>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr

08005318 <_fini>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr
