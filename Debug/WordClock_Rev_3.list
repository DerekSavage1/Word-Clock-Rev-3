
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f8  080062f8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006300  08006300  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006304  08006304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f08  20000098  080063a0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001fa0  080063a0  00021fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d535  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002376  00000000  00000000  0002d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00030640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c7b  00000000  00000000  000311d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f16d  00000000  00000000  00048e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093826  00000000  00000000  00057fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb7e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000eb838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005da4 	.word	0x08005da4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08005da4 	.word	0x08005da4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <getRainbowColor>:
   240, 251, 261, 271, 282, 293, 304, 316, 327, 339, 351, 363, 376, 388, 401, 414,
   428, 441, 455, 469, 483, 497, 511, 526, 541, 556, 572, 587, 603, 619, 635, 651,
   668, 685, 702, 719, 736, 754, 772, 790, 808, 827, 845, 864, 883, 903, 922, 942,
   962, 982,1002,1023,};

uint32_t getRainbowColor(uint8_t colorOption) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    switch (colorOption) {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d84a      	bhi.n	800063c <getRainbowColor+0xa8>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <getRainbowColor+0x18>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	080005f3 	.word	0x080005f3
 80005b4:	080005f7 	.word	0x080005f7
 80005b8:	080005fb 	.word	0x080005fb
 80005bc:	080005ff 	.word	0x080005ff
 80005c0:	08000605 	.word	0x08000605
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000611 	.word	0x08000611
 80005cc:	08000617 	.word	0x08000617
 80005d0:	0800061b 	.word	0x0800061b
 80005d4:	0800061f 	.word	0x0800061f
 80005d8:	08000625 	.word	0x08000625
 80005dc:	08000629 	.word	0x08000629
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	08000631 	.word	0x08000631
 80005e8:	08000637 	.word	0x08000637
        case 1:
            return 0xFF0000; // Red
 80005ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80005f0:	e026      	b.n	8000640 <getRainbowColor+0xac>
        case 2:
            return 0xFF7F00; // Orange
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <getRainbowColor+0xb8>)
 80005f4:	e024      	b.n	8000640 <getRainbowColor+0xac>
        case 3:
            return 0xFFFF00; // Yellow
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <getRainbowColor+0xbc>)
 80005f8:	e022      	b.n	8000640 <getRainbowColor+0xac>
        case 4:
            return 0x7FFF00; // Yellow-Green
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <getRainbowColor+0xc0>)
 80005fc:	e020      	b.n	8000640 <getRainbowColor+0xac>
        case 5:
            return 0x00FF00; // Green
 80005fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000602:	e01d      	b.n	8000640 <getRainbowColor+0xac>
        case 6:
            return 0x00FF7F; // Spring Green
 8000604:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000608:	e01a      	b.n	8000640 <getRainbowColor+0xac>
        case 7:
            return 0x00FFFF; // Cyan
 800060a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060e:	e017      	b.n	8000640 <getRainbowColor+0xac>
        case 8:
            return 0x007FFF; // Sky Blue
 8000610:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000614:	e014      	b.n	8000640 <getRainbowColor+0xac>
        case 9:
            return 0x0000FF; // Blue
 8000616:	23ff      	movs	r3, #255	; 0xff
 8000618:	e012      	b.n	8000640 <getRainbowColor+0xac>
        case 10:
            return 0x7F00FF; // Violet
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <getRainbowColor+0xc4>)
 800061c:	e010      	b.n	8000640 <getRainbowColor+0xac>
        case 11:
            return 0xFF00FF; // Magenta
 800061e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8000622:	e00d      	b.n	8000640 <getRainbowColor+0xac>
        case 12:
            return 0xFF007F; // Rose
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <getRainbowColor+0xc8>)
 8000626:	e00b      	b.n	8000640 <getRainbowColor+0xac>
        case 13:
            return 0xFF1493; // Deep Pink
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <getRainbowColor+0xcc>)
 800062a:	e009      	b.n	8000640 <getRainbowColor+0xac>
        case 14:
            return 0xC71585; // Medium Violet Red
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <getRainbowColor+0xd0>)
 800062e:	e007      	b.n	8000640 <getRainbowColor+0xac>
        case 15:
            return 0x800080; // Purple
 8000630:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
 8000634:	e004      	b.n	8000640 <getRainbowColor+0xac>
        case 16:
            return 0x8B008B; // Dark Magenta
 8000636:	f04f 138b 	mov.w	r3, #9109643	; 0x8b008b
 800063a:	e001      	b.n	8000640 <getRainbowColor+0xac>
        default:
            return 0xFFFFFF; // Default to White if an unexpected value is provided
 800063c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    }
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	00ff7f00 	.word	0x00ff7f00
 8000650:	00ffff00 	.word	0x00ffff00
 8000654:	007fff00 	.word	0x007fff00
 8000658:	007f00ff 	.word	0x007f00ff
 800065c:	00ff007f 	.word	0x00ff007f
 8000660:	00ff1493 	.word	0x00ff1493
 8000664:	00c71585 	.word	0x00c71585

08000668 <clear_display_buffer>:
    MINUTE_THIRTY
};

unsigned char displayBuffer[12][11] = {0}; // Adjust the buffer to be 12 rows by 11 columns

void clear_display_buffer() {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
    for (int row = 0; row < 12; row++) {
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	e017      	b.n	80006a4 <clear_display_buffer+0x3c>
        for (int col = 0; col < 11; col++) {
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	e00e      	b.n	8000698 <clear_display_buffer+0x30>
            displayBuffer[row][col] = 0; // Clear the bit in the display buffer
 800067a:	490f      	ldr	r1, [pc, #60]	; (80006b8 <clear_display_buffer+0x50>)
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	18ca      	adds	r2, r1, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) {
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	2b0a      	cmp	r3, #10
 800069c:	dded      	ble.n	800067a <clear_display_buffer+0x12>
    for (int row = 0; row < 12; row++) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b0b      	cmp	r3, #11
 80006a8:	dde4      	ble.n	8000674 <clear_display_buffer+0xc>
        }
    }
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	200000b4 	.word	0x200000b4

080006bc <add_bmp>:

void add_bmp(const uint16_t bmp[12]) {
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    for (int row = 0; row < 12; row++) { // Loop over each row
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e032      	b.n	8000730 <add_bmp+0x74>
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	e029      	b.n	8000724 <add_bmp+0x68>
            if ((bmp[row] & (1 << col)) != 0) { // Check if the bit is set in bmp at (row, col)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	fa42 f303 	asr.w	r3, r2, r3
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d019      	beq.n	800071e <add_bmp+0x62>
                displayBuffer[row][col] |= 1; // Set the bit in the display buffer
 80006ea:	4916      	ldr	r1, [pc, #88]	; (8000744 <add_bmp+0x88>)
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	18ca      	adds	r2, r1, r3
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	b2d8      	uxtb	r0, r3
 8000706:	490f      	ldr	r1, [pc, #60]	; (8000744 <add_bmp+0x88>)
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	18ca      	adds	r2, r1, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	4602      	mov	r2, r0
 800071c:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 11; col++) { // Loop over the first 11 columns
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3301      	adds	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b0a      	cmp	r3, #10
 8000728:	ddd2      	ble.n	80006d0 <add_bmp+0x14>
    for (int row = 0; row < 12; row++) { // Loop over each row
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b0b      	cmp	r3, #11
 8000734:	ddc9      	ble.n	80006ca <add_bmp+0xe>
            }
        }
    }
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	200000b4 	.word	0x200000b4

08000748 <display_bmp>:

void display_bmp(uint16_t preset, uint16_t brightness) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	80fb      	strh	r3, [r7, #6]
 8000754:	4613      	mov	r3, r2
 8000756:	80bb      	strh	r3, [r7, #4]
    if (brightness < 1 || brightness > 100) {
 8000758:	88bb      	ldrh	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d077      	beq.n	800084e <display_bmp+0x106>
 800075e:	88bb      	ldrh	r3, [r7, #4]
 8000760:	2b64      	cmp	r3, #100	; 0x64
 8000762:	d874      	bhi.n	800084e <display_bmp+0x106>
        // Ensure the brightness index is within the valid range to avoid out-of-bounds access
        return;
    }

    uint32_t color = getRainbowColor(preset);
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff13 	bl	8000594 <getRainbowColor>
 800076e:	6178      	str	r0, [r7, #20]
    // Extract the red, green, and blue components from the color
    uint8_t red = (color >> 16) & 0xFF;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	74fb      	strb	r3, [r7, #19]
    uint8_t green = (color >> 8) & 0xFF;
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	74bb      	strb	r3, [r7, #18]
    uint8_t blue = color & 0xFF;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	747b      	strb	r3, [r7, #17]

    // Adjust the brightness based on the gamma lookup table
    // Since the maximum value in gamma_lut is 1023 (for brightness=100),
    // and the maximum value for each color component is 255, a scaling is required.
    uint16_t brightnessValue = gamma_lut[brightness - 1];
 8000780:	88bb      	ldrh	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	4a34      	ldr	r2, [pc, #208]	; (8000858 <display_bmp+0x110>)
 8000786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078a:	81fb      	strh	r3, [r7, #14]

    // Scale and adjust the RGB values based on the brightness
    red = (uint8_t)(((uint32_t)red * brightnessValue) / 1023);
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	89fa      	ldrh	r2, [r7, #14]
 8000790:	fb03 f202 	mul.w	r2, r3, r2
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <display_bmp+0x114>)
 8000796:	fba3 1302 	umull	r1, r3, r3, r2
 800079a:	1ad2      	subs	r2, r2, r3
 800079c:	0852      	lsrs	r2, r2, #1
 800079e:	4413      	add	r3, r2
 80007a0:	0a5b      	lsrs	r3, r3, #9
 80007a2:	74fb      	strb	r3, [r7, #19]
    green = (uint8_t)(((uint32_t)green * brightnessValue) / 1023);
 80007a4:	7cbb      	ldrb	r3, [r7, #18]
 80007a6:	89fa      	ldrh	r2, [r7, #14]
 80007a8:	fb03 f202 	mul.w	r2, r3, r2
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <display_bmp+0x114>)
 80007ae:	fba3 1302 	umull	r1, r3, r3, r2
 80007b2:	1ad2      	subs	r2, r2, r3
 80007b4:	0852      	lsrs	r2, r2, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	0a5b      	lsrs	r3, r3, #9
 80007ba:	74bb      	strb	r3, [r7, #18]
    blue = (uint8_t)(((uint32_t)blue * brightnessValue) / 1023);
 80007bc:	7c7b      	ldrb	r3, [r7, #17]
 80007be:	89fa      	ldrh	r2, [r7, #14]
 80007c0:	fb03 f202 	mul.w	r2, r3, r2
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <display_bmp+0x114>)
 80007c6:	fba3 1302 	umull	r1, r3, r3, r2
 80007ca:	1ad2      	subs	r2, r2, r3
 80007cc:	0852      	lsrs	r2, r2, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	747b      	strb	r3, [r7, #17]

    for (int row = 0; row < 12; row++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	e035      	b.n	8000846 <display_bmp+0xfe>
        for (int col = 0; col < 11; col++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	e02c      	b.n	800083a <display_bmp+0xf2>
            if (displayBuffer[row][col] & 1) { // Check if the bit is set
 80007e0:	491f      	ldr	r1, [pc, #124]	; (8000860 <display_bmp+0x118>)
 80007e2:	69fa      	ldr	r2, [r7, #28]
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	18ca      	adds	r2, r1, r3
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00d      	beq.n	800081a <display_bmp+0xd2>
                // Set the LED to the adjusted color for specified brightness
                Set_LED((row * 11) + col, red, green, blue);
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	441a      	add	r2, r3
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	18d0      	adds	r0, r2, r3
 800080e:	7cf9      	ldrb	r1, [r7, #19]
 8000810:	7cba      	ldrb	r2, [r7, #18]
 8000812:	7c7b      	ldrb	r3, [r7, #17]
 8000814:	f004 fd24 	bl	8005260 <Set_LED>
 8000818:	e00c      	b.n	8000834 <display_bmp+0xec>
            } else {
                // Turn the LED off
                Set_LED((row * 11) + col, 0, 0, 0);
 800081a:	69fa      	ldr	r2, [r7, #28]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	441a      	add	r2, r3
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	18d0      	adds	r0, r2, r3
 800082a:	2300      	movs	r3, #0
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	f004 fd16 	bl	8005260 <Set_LED>
        for (int col = 0; col < 11; col++) {
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	3301      	adds	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	2b0a      	cmp	r3, #10
 800083e:	ddcf      	ble.n	80007e0 <display_bmp+0x98>
    for (int row = 0; row < 12; row++) {
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	3301      	adds	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	2b0b      	cmp	r3, #11
 800084a:	ddc6      	ble.n	80007da <display_bmp+0x92>
 800084c:	e000      	b.n	8000850 <display_bmp+0x108>
        return;
 800084e:	bf00      	nop
            }
        }
    }
}
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	08005de8 	.word	0x08005de8
 800085c:	00401005 	.word	0x00401005
 8000860:	200000b4 	.word	0x200000b4

08000864 <display_time>:



void display_time(int hour, int minute) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
	add_bmp(BMP_ITS);
 800086e:	4859      	ldr	r0, [pc, #356]	; (80009d4 <display_time+0x170>)
 8000870:	f7ff ff24 	bl	80006bc <add_bmp>
    // Round down to the nearest five minutes
    minute = (minute / 5) * 5;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	4a58      	ldr	r2, [pc, #352]	; (80009d8 <display_time+0x174>)
 8000878:	fb82 1203 	smull	r1, r2, r2, r3
 800087c:	1052      	asrs	r2, r2, #1
 800087e:	17db      	asrs	r3, r3, #31
 8000880:	1ad2      	subs	r2, r2, r3
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	603b      	str	r3, [r7, #0]

    // Display minute, accounting for 'past' or 'to'
    if (minute < 5) {
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2b04      	cmp	r3, #4
 800088e:	dd10      	ble.n	80008b2 <display_time+0x4e>
    	//no past or till
    } else if (minute < 35) {
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	2b22      	cmp	r3, #34	; 0x22
 8000894:	dc03      	bgt.n	800089e <display_time+0x3a>
        add_bmp(BMP_PAST);
 8000896:	4851      	ldr	r0, [pc, #324]	; (80009dc <display_time+0x178>)
 8000898:	f7ff ff10 	bl	80006bc <add_bmp>
 800089c:	e009      	b.n	80008b2 <display_time+0x4e>
    } else {
        minute = 60 - minute;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80008a4:	603b      	str	r3, [r7, #0]
        hour++;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3301      	adds	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
        add_bmp(BMP_TILL);
 80008ac:	484c      	ldr	r0, [pc, #304]	; (80009e0 <display_time+0x17c>)
 80008ae:	f7ff ff05 	bl	80006bc <add_bmp>
    }

    if(hour == 0 || hour == 12);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00c      	beq.n	80008d2 <display_time+0x6e>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b0c      	cmp	r3, #12
 80008bc:	d009      	beq.n	80008d2 <display_time+0x6e>
    else if(hour < 12) add_bmp(BMP_AM);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0b      	cmp	r3, #11
 80008c2:	dc03      	bgt.n	80008cc <display_time+0x68>
 80008c4:	4847      	ldr	r0, [pc, #284]	; (80009e4 <display_time+0x180>)
 80008c6:	f7ff fef9 	bl	80006bc <add_bmp>
 80008ca:	e002      	b.n	80008d2 <display_time+0x6e>
    else add_bmp(BMP_PM);
 80008cc:	4846      	ldr	r0, [pc, #280]	; (80009e8 <display_time+0x184>)
 80008ce:	f7ff fef5 	bl	80006bc <add_bmp>

    // Display hour
    switch(hour) {
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b17      	cmp	r3, #23
 80008d6:	d867      	bhi.n	80009a8 <display_time+0x144>
 80008d8:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <display_time+0x7c>)
 80008da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008de:	bf00      	nop
 80008e0:	08000941 	.word	0x08000941
 80008e4:	08000949 	.word	0x08000949
 80008e8:	08000951 	.word	0x08000951
 80008ec:	08000959 	.word	0x08000959
 80008f0:	08000961 	.word	0x08000961
 80008f4:	08000969 	.word	0x08000969
 80008f8:	08000971 	.word	0x08000971
 80008fc:	08000979 	.word	0x08000979
 8000900:	08000981 	.word	0x08000981
 8000904:	08000989 	.word	0x08000989
 8000908:	08000991 	.word	0x08000991
 800090c:	08000999 	.word	0x08000999
 8000910:	080009a1 	.word	0x080009a1
 8000914:	08000949 	.word	0x08000949
 8000918:	08000951 	.word	0x08000951
 800091c:	08000959 	.word	0x08000959
 8000920:	08000961 	.word	0x08000961
 8000924:	08000969 	.word	0x08000969
 8000928:	08000971 	.word	0x08000971
 800092c:	08000979 	.word	0x08000979
 8000930:	08000981 	.word	0x08000981
 8000934:	08000989 	.word	0x08000989
 8000938:	08000991 	.word	0x08000991
 800093c:	08000999 	.word	0x08000999
        case 0:
            add_bmp(HOUR_MIDNIGHT);
 8000940:	482a      	ldr	r0, [pc, #168]	; (80009ec <display_time+0x188>)
 8000942:	f7ff febb 	bl	80006bc <add_bmp>
            break;
 8000946:	e030      	b.n	80009aa <display_time+0x146>
        case 1:
        case 13:
            add_bmp(HOUR_ONE);
 8000948:	4829      	ldr	r0, [pc, #164]	; (80009f0 <display_time+0x18c>)
 800094a:	f7ff feb7 	bl	80006bc <add_bmp>
            break;
 800094e:	e02c      	b.n	80009aa <display_time+0x146>
        case 2:
        case 14:
            add_bmp(HOUR_TWO);
 8000950:	4828      	ldr	r0, [pc, #160]	; (80009f4 <display_time+0x190>)
 8000952:	f7ff feb3 	bl	80006bc <add_bmp>
            break;
 8000956:	e028      	b.n	80009aa <display_time+0x146>
        case 3:
        case 15:
            add_bmp(HOUR_THREE);
 8000958:	4827      	ldr	r0, [pc, #156]	; (80009f8 <display_time+0x194>)
 800095a:	f7ff feaf 	bl	80006bc <add_bmp>
            break;
 800095e:	e024      	b.n	80009aa <display_time+0x146>
        case 4:
        case 16:
            add_bmp(HOUR_FOUR);
 8000960:	4826      	ldr	r0, [pc, #152]	; (80009fc <display_time+0x198>)
 8000962:	f7ff feab 	bl	80006bc <add_bmp>
            break;
 8000966:	e020      	b.n	80009aa <display_time+0x146>
        case 5:
        case 17:
            add_bmp(HOUR_FIVE);
 8000968:	4825      	ldr	r0, [pc, #148]	; (8000a00 <display_time+0x19c>)
 800096a:	f7ff fea7 	bl	80006bc <add_bmp>
            break;
 800096e:	e01c      	b.n	80009aa <display_time+0x146>
        case 6:
        case 18:
            add_bmp(HOUR_SIX);
 8000970:	4824      	ldr	r0, [pc, #144]	; (8000a04 <display_time+0x1a0>)
 8000972:	f7ff fea3 	bl	80006bc <add_bmp>
            break;
 8000976:	e018      	b.n	80009aa <display_time+0x146>
        case 7:
        case 19:
            add_bmp(HOUR_SEVEN);
 8000978:	4823      	ldr	r0, [pc, #140]	; (8000a08 <display_time+0x1a4>)
 800097a:	f7ff fe9f 	bl	80006bc <add_bmp>
            break;
 800097e:	e014      	b.n	80009aa <display_time+0x146>
        case 8:
        case 20:
            add_bmp(HOUR_EIGHT);
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <display_time+0x1a8>)
 8000982:	f7ff fe9b 	bl	80006bc <add_bmp>
            break;
 8000986:	e010      	b.n	80009aa <display_time+0x146>
        case 9:
        case 21:
            add_bmp(HOUR_NINE);
 8000988:	4821      	ldr	r0, [pc, #132]	; (8000a10 <display_time+0x1ac>)
 800098a:	f7ff fe97 	bl	80006bc <add_bmp>
            break;
 800098e:	e00c      	b.n	80009aa <display_time+0x146>
        case 10:
        case 22:
            add_bmp(HOUR_TEN);
 8000990:	4820      	ldr	r0, [pc, #128]	; (8000a14 <display_time+0x1b0>)
 8000992:	f7ff fe93 	bl	80006bc <add_bmp>
            break;
 8000996:	e008      	b.n	80009aa <display_time+0x146>
        case 11:
        case 23:
            add_bmp(HOUR_ELEVEN);
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <display_time+0x1b4>)
 800099a:	f7ff fe8f 	bl	80006bc <add_bmp>
            break;
 800099e:	e004      	b.n	80009aa <display_time+0x146>
        case 12:
            add_bmp(HOUR_NOON);
 80009a0:	481e      	ldr	r0, [pc, #120]	; (8000a1c <display_time+0x1b8>)
 80009a2:	f7ff fe8b 	bl	80006bc <add_bmp>
            break;
 80009a6:	e000      	b.n	80009aa <display_time+0x146>
        default:
            // Handle error or invalid hour
            break;
 80009a8:	bf00      	nop
    }

    // Display minute in intervals of five using an array pointing to the bitmaps
    if (minute > 0) {
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dd0d      	ble.n	80009cc <display_time+0x168>
        add_bmp(minuteBitmaps[(minute / 5) - 1]);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <display_time+0x174>)
 80009b4:	fb82 1203 	smull	r1, r2, r2, r3
 80009b8:	1052      	asrs	r2, r2, #1
 80009ba:	17db      	asrs	r3, r3, #31
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	3b01      	subs	r3, #1
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <display_time+0x1bc>)
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fe78 	bl	80006bc <add_bmp>
    }
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	08006078 	.word	0x08006078
 80009d8:	66666667 	.word	0x66666667
 80009dc:	08006090 	.word	0x08006090
 80009e0:	080060a8 	.word	0x080060a8
 80009e4:	08006120 	.word	0x08006120
 80009e8:	08006138 	.word	0x08006138
 80009ec:	08005fd0 	.word	0x08005fd0
 80009f0:	08005eb0 	.word	0x08005eb0
 80009f4:	08005ec8 	.word	0x08005ec8
 80009f8:	08005ee0 	.word	0x08005ee0
 80009fc:	08005ef8 	.word	0x08005ef8
 8000a00:	08005f10 	.word	0x08005f10
 8000a04:	08005f28 	.word	0x08005f28
 8000a08:	08005f40 	.word	0x08005f40
 8000a0c:	08005f58 	.word	0x08005f58
 8000a10:	08005f70 	.word	0x08005f70
 8000a14:	08005f88 	.word	0x08005f88
 8000a18:	08005fa0 	.word	0x08005fa0
 8000a1c:	08005fb8 	.word	0x08005fb8
 8000a20:	20000000 	.word	0x20000000

08000a24 <Blink_LED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Blink_LED(uint16_t LED, uint32_t color) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	80fb      	strh	r3, [r7, #6]

	if(LED != lastLED) {
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <Blink_LED+0x90>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	88fa      	ldrh	r2, [r7, #6]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d009      	beq.n	8000a50 <Blink_LED+0x2c>
		Set_LED_Hex(lastLED, 0);
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <Blink_LED+0x90>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 fc42 	bl	80052cc <Set_LED_Hex>
		lastLED = LED;
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <Blink_LED+0x90>)
 8000a4e:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() - lastTick >= delayMs) {
 8000a50:	f001 fb92 	bl	8002178 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <Blink_LED+0x94>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1ad2      	subs	r2, r2, r3
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <Blink_LED+0x98>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d322      	bcc.n	8000aaa <Blink_LED+0x86>

		//Toggle LED
		if(isOff){
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <Blink_LED+0x9c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d005      	beq.n	8000a78 <Blink_LED+0x54>
			Set_LED_Hex(LED, color);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	6839      	ldr	r1, [r7, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 fc2b 	bl	80052cc <Set_LED_Hex>
 8000a76:	e004      	b.n	8000a82 <Blink_LED+0x5e>
		} else {
			Set_LED_Hex(LED, 0);
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f004 fc25 	bl	80052cc <Set_LED_Hex>
		}

		isOff = !isOff;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <Blink_LED+0x9c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <Blink_LED+0x9c>)
 8000a9e:	701a      	strb	r2, [r3, #0]
		lastTick = HAL_GetTick();
 8000aa0:	f001 fb6a 	bl	8002178 <HAL_GetTick>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <Blink_LED+0x94>)
 8000aa8:	6013      	str	r3, [r2, #0]
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000026 	.word	0x20000026
 8000ab8:	200002f4 	.word	0x200002f4
 8000abc:	20000020 	.word	0x20000020
 8000ac0:	20000024 	.word	0x20000024

08000ac4 <clampValue>:

uint16_t clampValue(uint16_t value, uint16_t minVal, uint16_t maxVal) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	80bb      	strh	r3, [r7, #4]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	807b      	strh	r3, [r7, #2]
    if (abs(0xFFFF - value) < abs(maxVal - value)) {
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000adc:	33ff      	adds	r3, #255	; 0xff
 8000ade:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ae2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ae6:	8879      	ldrh	r1, [r7, #2]
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	1acb      	subs	r3, r1, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bfb8      	it	lt
 8000af0:	425b      	neglt	r3, r3
 8000af2:	429a      	cmp	r2, r3
 8000af4:	da01      	bge.n	8000afa <clampValue+0x36>
  	  return minVal;
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	e00c      	b.n	8000b14 <clampValue+0x50>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 8000afa:	88fa      	ldrh	r2, [r7, #6]
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d201      	bcs.n	8000b06 <clampValue+0x42>
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	e006      	b.n	8000b14 <clampValue+0x50>
        if (value > maxVal) return maxVal;
 8000b06:	88fa      	ldrh	r2, [r7, #6]
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d901      	bls.n	8000b12 <clampValue+0x4e>
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	e000      	b.n	8000b14 <clampValue+0x50>
        return value;
 8000b12:	88fb      	ldrh	r3, [r7, #6]
    }
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <switchState>:

bool userSelectingFeature = true; // True when in SELECT state to decide what feature to adjust

void switchState(RTC_DateTypeDef * tDate) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    switch(currentState) {
 8000b28:	4b92      	ldr	r3, [pc, #584]	; (8000d74 <switchState+0x254>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b09      	cmp	r3, #9
 8000b30:	f200 8116 	bhi.w	8000d60 <switchState+0x240>
 8000b34:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <switchState+0x1c>)
 8000b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3a:	bf00      	nop
 8000b3c:	08000b65 	.word	0x08000b65
 8000b40:	08000b6d 	.word	0x08000b6d
 8000b44:	08000b75 	.word	0x08000b75
 8000b48:	08000c27 	.word	0x08000c27
 8000b4c:	08000c71 	.word	0x08000c71
 8000b50:	08000d3b 	.word	0x08000d3b
 8000b54:	08000d59 	.word	0x08000d59
 8000b58:	08000ca3 	.word	0x08000ca3
 8000b5c:	08000cdd 	.word	0x08000cdd
 8000b60:	08000d17 	.word	0x08000d17
        case SLEEP:
            currentState = WAKE;
 8000b64:	4b83      	ldr	r3, [pc, #524]	; (8000d74 <switchState+0x254>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
            break;
 8000b6a:	e0fe      	b.n	8000d6a <switchState+0x24a>
        case WAKE:
            currentState = SELECT;
 8000b6c:	4b81      	ldr	r3, [pc, #516]	; (8000d74 <switchState+0x254>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	701a      	strb	r2, [r3, #0]

            break;
 8000b72:	e0fa      	b.n	8000d6a <switchState+0x24a>
        case SELECT:
        	switch((counter / sensitivity)){
 8000b74:	4b80      	ldr	r3, [pc, #512]	; (8000d78 <switchState+0x258>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b7f      	ldr	r3, [pc, #508]	; (8000d7c <switchState+0x25c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	f200 80ef 	bhi.w	8000d68 <switchState+0x248>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <switchState+0x70>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000ba1 	.word	0x08000ba1
 8000b94:	08000bbf 	.word	0x08000bbf
 8000b98:	08000bdd 	.word	0x08000bdd
 8000b9c:	08000c01 	.word	0x08000c01
        	case 0:
        		counter = sTime.Hours * sensitivity;
 8000ba0:	4b77      	ldr	r3, [pc, #476]	; (8000d80 <switchState+0x260>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b75      	ldr	r3, [pc, #468]	; (8000d7c <switchState+0x25c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	fb12 f303 	smulbb	r3, r2, r3
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b71      	ldr	r3, [pc, #452]	; (8000d78 <switchState+0x258>)
 8000bb4:	801a      	strh	r2, [r3, #0]
        		currentState = SET_HOURS;
 8000bb6:	4b6f      	ldr	r3, [pc, #444]	; (8000d74 <switchState+0x254>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	701a      	strb	r2, [r3, #0]
        		break;
 8000bbc:	e032      	b.n	8000c24 <switchState+0x104>
        	case 1:
        		currentState = SET_COLOR;
 8000bbe:	4b6d      	ldr	r3, [pc, #436]	; (8000d74 <switchState+0x254>)
 8000bc0:	2205      	movs	r2, #5
 8000bc2:	701a      	strb	r2, [r3, #0]
        		counter = color * sensitivity;
 8000bc4:	4b6d      	ldr	r3, [pc, #436]	; (8000d7c <switchState+0x25c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b6e      	ldr	r3, [pc, #440]	; (8000d84 <switchState+0x264>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	fb12 f303 	smulbb	r3, r2, r3
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <switchState+0x258>)
 8000bd8:	801a      	strh	r2, [r3, #0]
        		break;
 8000bda:	e023      	b.n	8000c24 <switchState+0x104>
        	case 2:
        		currentDateType = ANNIVERSARY_DATE;
 8000bdc:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <switchState+0x268>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
            	counter = aDate.Month * sensitivity;
 8000be2:	4b6a      	ldr	r3, [pc, #424]	; (8000d8c <switchState+0x26c>)
 8000be4:	785b      	ldrb	r3, [r3, #1]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <switchState+0x25c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	fb12 f303 	smulbb	r3, r2, r3
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <switchState+0x258>)
 8000bf6:	801a      	strh	r2, [r3, #0]
            	currentState = SET_MONTH;
 8000bf8:	4b5e      	ldr	r3, [pc, #376]	; (8000d74 <switchState+0x254>)
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	701a      	strb	r2, [r3, #0]
        		break;
 8000bfe:	e011      	b.n	8000c24 <switchState+0x104>
        	case 3:
        		currentDateType = BIRTHDAY_DATE;
 8000c00:	4b61      	ldr	r3, [pc, #388]	; (8000d88 <switchState+0x268>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	701a      	strb	r2, [r3, #0]
            	counter = bDate.Month * sensitivity;
 8000c06:	4b62      	ldr	r3, [pc, #392]	; (8000d90 <switchState+0x270>)
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <switchState+0x25c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	fb12 f303 	smulbb	r3, r2, r3
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <switchState+0x258>)
 8000c1a:	801a      	strh	r2, [r3, #0]
            	currentState = SET_MONTH;
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <switchState+0x254>)
 8000c1e:	2207      	movs	r2, #7
 8000c20:	701a      	strb	r2, [r3, #0]
        		break;
 8000c22:	bf00      	nop
        	}
            break;
 8000c24:	e0a0      	b.n	8000d68 <switchState+0x248>
        case SET_HOURS:
        	counter = sTime.Minutes * sensitivity;
 8000c26:	4b56      	ldr	r3, [pc, #344]	; (8000d80 <switchState+0x260>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <switchState+0x25c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	fb12 f303 	smulbb	r3, r2, r3
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b4f      	ldr	r3, [pc, #316]	; (8000d78 <switchState+0x258>)
 8000c3a:	801a      	strh	r2, [r3, #0]
        	Set_LED_Hex(141, getRainbowColor(color));
 8000c3c:	4b51      	ldr	r3, [pc, #324]	; (8000d84 <switchState+0x264>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fca5 	bl	8000594 <getRainbowColor>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	208d      	movs	r0, #141	; 0x8d
 8000c50:	f004 fb3c 	bl	80052cc <Set_LED_Hex>
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000c54:	2200      	movs	r2, #0
 8000c56:	494a      	ldr	r1, [pc, #296]	; (8000d80 <switchState+0x260>)
 8000c58:	484e      	ldr	r0, [pc, #312]	; (8000d94 <switchState+0x274>)
 8000c5a:	f002 fea1 	bl	80039a0 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	494d      	ldr	r1, [pc, #308]	; (8000d98 <switchState+0x278>)
 8000c62:	484c      	ldr	r0, [pc, #304]	; (8000d94 <switchState+0x274>)
 8000c64:	f002 ff94 	bl	8003b90 <HAL_RTC_SetDate>
            currentState = SET_MINUTES; // After setting hours, set minutes
 8000c68:	4b42      	ldr	r3, [pc, #264]	; (8000d74 <switchState+0x254>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	701a      	strb	r2, [r3, #0]
            break;
 8000c6e:	e07c      	b.n	8000d6a <switchState+0x24a>
        case SET_MINUTES:
        	counter = sDate.Month * sensitivity;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <switchState+0x278>)
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <switchState+0x25c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	fb12 f303 	smulbb	r3, r2, r3
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <switchState+0x258>)
 8000c84:	801a      	strh	r2, [r3, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000c86:	2200      	movs	r2, #0
 8000c88:	493d      	ldr	r1, [pc, #244]	; (8000d80 <switchState+0x260>)
 8000c8a:	4842      	ldr	r0, [pc, #264]	; (8000d94 <switchState+0x274>)
 8000c8c:	f002 fe88 	bl	80039a0 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c90:	2200      	movs	r2, #0
 8000c92:	4941      	ldr	r1, [pc, #260]	; (8000d98 <switchState+0x278>)
 8000c94:	483f      	ldr	r0, [pc, #252]	; (8000d94 <switchState+0x274>)
 8000c96:	f002 ff7b 	bl	8003b90 <HAL_RTC_SetDate>
            currentState = SET_MONTH; // Return to SLEEP after setting time
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <switchState+0x254>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	701a      	strb	r2, [r3, #0]
            break;
 8000ca0:	e063      	b.n	8000d6a <switchState+0x24a>
        case SET_MONTH:
        	counter = tDate->Date * sensitivity;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	789b      	ldrb	r3, [r3, #2]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <switchState+0x25c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	fb12 f303 	smulbb	r3, r2, r3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <switchState+0x258>)
 8000cb6:	801a      	strh	r2, [r3, #0]
        	if(currentDateType == SYSTEM_DATE){
 8000cb8:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <switchState+0x268>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d109      	bne.n	8000cd4 <switchState+0x1b4>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	492f      	ldr	r1, [pc, #188]	; (8000d80 <switchState+0x260>)
 8000cc4:	4833      	ldr	r0, [pc, #204]	; (8000d94 <switchState+0x274>)
 8000cc6:	f002 fe6b 	bl	80039a0 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4932      	ldr	r1, [pc, #200]	; (8000d98 <switchState+0x278>)
 8000cce:	4831      	ldr	r0, [pc, #196]	; (8000d94 <switchState+0x274>)
 8000cd0:	f002 ff5e 	bl	8003b90 <HAL_RTC_SetDate>
        	}

        	currentState = SET_DAY;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <switchState+0x254>)
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	701a      	strb	r2, [r3, #0]
        	break;
 8000cda:	e046      	b.n	8000d6a <switchState+0x24a>
        case SET_DAY:
        	counter = tDate->Year * sensitivity;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	78db      	ldrb	r3, [r3, #3]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <switchState+0x25c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	fb12 f303 	smulbb	r3, r2, r3
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <switchState+0x258>)
 8000cf0:	801a      	strh	r2, [r3, #0]
        	if(currentDateType == SYSTEM_DATE) {
 8000cf2:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <switchState+0x268>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d109      	bne.n	8000d0e <switchState+0x1ee>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4920      	ldr	r1, [pc, #128]	; (8000d80 <switchState+0x260>)
 8000cfe:	4825      	ldr	r0, [pc, #148]	; (8000d94 <switchState+0x274>)
 8000d00:	f002 fe4e 	bl	80039a0 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d04:	2200      	movs	r2, #0
 8000d06:	4924      	ldr	r1, [pc, #144]	; (8000d98 <switchState+0x278>)
 8000d08:	4822      	ldr	r0, [pc, #136]	; (8000d94 <switchState+0x274>)
 8000d0a:	f002 ff41 	bl	8003b90 <HAL_RTC_SetDate>
        	}

        	currentState = SET_YEAR;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <switchState+0x254>)
 8000d10:	2209      	movs	r2, #9
 8000d12:	701a      	strb	r2, [r3, #0]
        	break;
 8000d14:	e029      	b.n	8000d6a <switchState+0x24a>
        case SET_YEAR:
        	if(currentDateType == SYSTEM_DATE) {
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <switchState+0x268>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <switchState+0x212>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4917      	ldr	r1, [pc, #92]	; (8000d80 <switchState+0x260>)
 8000d22:	481c      	ldr	r0, [pc, #112]	; (8000d94 <switchState+0x274>)
 8000d24:	f002 fe3c 	bl	80039a0 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	491b      	ldr	r1, [pc, #108]	; (8000d98 <switchState+0x278>)
 8000d2c:	4819      	ldr	r0, [pc, #100]	; (8000d94 <switchState+0x274>)
 8000d2e:	f002 ff2f 	bl	8003b90 <HAL_RTC_SetDate>
        	}

        	currentState = SLEEP;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <switchState+0x254>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
        	break;
 8000d38:	e017      	b.n	8000d6a <switchState+0x24a>
        case SET_COLOR:
        	counter = brightness * sensitivity;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <switchState+0x25c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <switchState+0x27c>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	fb12 f303 	smulbb	r3, r2, r3
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <switchState+0x258>)
 8000d4e:	801a      	strh	r2, [r3, #0]
            currentState = SET_BRIGHTNESS; // After color, set brightness
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <switchState+0x254>)
 8000d52:	2206      	movs	r2, #6
 8000d54:	701a      	strb	r2, [r3, #0]
            break;
 8000d56:	e008      	b.n	8000d6a <switchState+0x24a>
        case SET_BRIGHTNESS:
            currentState = SLEEP; // Return to SLEEP after setting LED features
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <switchState+0x254>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
            break;
 8000d5e:	e004      	b.n	8000d6a <switchState+0x24a>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            currentState = SLEEP;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <switchState+0x254>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
            break;
 8000d66:	e000      	b.n	8000d6a <switchState+0x24a>
            break;
 8000d68:	bf00      	nop
    }
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000026e 	.word	0x2000026e
 8000d78:	20000248 	.word	0x20000248
 8000d7c:	2000001c 	.word	0x2000001c
 8000d80:	2000024c 	.word	0x2000024c
 8000d84:	2000026c 	.word	0x2000026c
 8000d88:	200002f8 	.word	0x200002f8
 8000d8c:	20000264 	.word	0x20000264
 8000d90:	20000268 	.word	0x20000268
 8000d94:	20000138 	.word	0x20000138
 8000d98:	20000260 	.word	0x20000260
 8000d9c:	20000018 	.word	0x20000018

08000da0 <checkButtonPress>:

void checkButtonPress(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 8000da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <checkButtonPress+0x40>)
 8000dac:	f002 f83c 	bl	8002e28 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <checkButtonPress+0x44>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d106      	bne.n	8000dca <checkButtonPress+0x2a>
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <checkButtonPress+0x2a>
        // Button was pressed - perform actions here.
    	stateChangeRequest = true;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <checkButtonPress+0x48>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e002      	b.n	8000dd0 <checkButtonPress+0x30>
    } else {
    	stateChangeRequest = false;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <checkButtonPress+0x48>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <checkButtonPress+0x44>)
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	7013      	strb	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40020400 	.word	0x40020400
 8000de4:	20000027 	.word	0x20000027
 8000de8:	200002f0 	.word	0x200002f0

08000dec <SetHours>:




void SetHours() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af02      	add	r7, sp, #8
    Set_LED(136, 100, 100, 100);
 8000df2:	2364      	movs	r3, #100	; 0x64
 8000df4:	2264      	movs	r2, #100	; 0x64
 8000df6:	2164      	movs	r1, #100	; 0x64
 8000df8:	2088      	movs	r0, #136	; 0x88
 8000dfa:	f004 fa31 	bl	8005260 <Set_LED>
    counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <SetHours+0x70>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	b298      	uxth	r0, r3
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <SetHours+0x74>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	0052      	lsls	r2, r2, #1
 8000e0e:	441a      	add	r2, r3
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f7ff fe53 	bl	8000ac4 <clampValue>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <SetHours+0x70>)
 8000e24:	801a      	strh	r2, [r3, #0]
    sTime.Hours = counter / sensitivity;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <SetHours+0x70>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <SetHours+0x74>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <SetHours+0x78>)
 8000e3a:	701a      	strb	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <SetHours+0x78>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <SetHours+0x78>)
 8000e44:	785b      	ldrb	r3, [r3, #1]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <SetHours+0x7c>)
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <SetHours+0x80>)
 8000e50:	f004 fb1a 	bl	8005488 <sniprintf>
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000248 	.word	0x20000248
 8000e60:	2000001c 	.word	0x2000001c
 8000e64:	2000024c 	.word	0x2000024c
 8000e68:	08005dbc 	.word	0x08005dbc
 8000e6c:	20000270 	.word	0x20000270

08000e70 <SetMinutes>:

void SetMinutes() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af02      	add	r7, sp, #8
    counter = clampValue(counter, 0, 59 * sensitivity); //59 minutes
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <SetMinutes+0x64>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	b298      	uxth	r0, r3
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <SetMinutes+0x68>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	f7ff fe17 	bl	8000ac4 <clampValue>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <SetMinutes+0x64>)
 8000e9c:	801a      	strh	r2, [r3, #0]
    sTime.Minutes = counter / sensitivity;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <SetMinutes+0x64>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <SetMinutes+0x68>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <SetMinutes+0x6c>)
 8000eb2:	705a      	strb	r2, [r3, #1]
    snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <SetMinutes+0x6c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <SetMinutes+0x6c>)
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <SetMinutes+0x70>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <SetMinutes+0x74>)
 8000ec8:	f004 fade 	bl	8005488 <sniprintf>
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000248 	.word	0x20000248
 8000ed8:	2000001c 	.word	0x2000001c
 8000edc:	2000024c 	.word	0x2000024c
 8000ee0:	08005dbc 	.word	0x08005dbc
 8000ee4:	20000270 	.word	0x20000270

08000ee8 <SetMonth>:

int SetMonth(RTC_DateTypeDef * tDate) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 12 * sensitivity); //12 months
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <SetMonth+0x74>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <SetMonth+0x78>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	0052      	lsls	r2, r2, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f7ff fddb 	bl	8000ac4 <clampValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <SetMonth+0x74>)
 8000f14:	801a      	strh	r2, [r3, #0]
    tDate->Month = counter / sensitivity;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <SetMonth+0x74>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <SetMonth+0x78>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	705a      	strb	r2, [r3, #1]
    snprintf(displayStr, sizeof(displayStr), "%02u%02u", tDate->Month, tDate->Date);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	785b      	ldrb	r3, [r3, #1]
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	789b      	ldrb	r3, [r3, #2]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <SetMonth+0x7c>)
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	480a      	ldr	r0, [pc, #40]	; (8000f68 <SetMonth+0x80>)
 8000f40:	f004 faa2 	bl	8005488 <sniprintf>
    return counter / sensitivity;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SetMonth+0x74>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SetMonth+0x78>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000248 	.word	0x20000248
 8000f60:	2000001c 	.word	0x2000001c
 8000f64:	08005dc8 	.word	0x08005dc8
 8000f68:	20000270 	.word	0x20000270

08000f6c <SetDay>:

int SetDay(RTC_DateTypeDef * tDate) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 31 * sensitivity); //31 days
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <SetDay+0x74>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <SetDay+0x78>)
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	4611      	mov	r1, r2
 8000f82:	0149      	lsls	r1, r1, #5
 8000f84:	1a8a      	subs	r2, r1, r2
 8000f86:	b292      	uxth	r2, r2
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fd9a 	bl	8000ac4 <clampValue>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <SetDay+0x74>)
 8000f96:	801a      	strh	r2, [r3, #0]
    //FIXME: user could enter February 31 which is wrong
    tDate->Date = counter / sensitivity;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <SetDay+0x74>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <SetDay+0x78>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	709a      	strb	r2, [r3, #2]
    snprintf(displayStr, sizeof(displayStr), "%02u%02u", tDate->Month, tDate->Date);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	789b      	ldrb	r3, [r3, #2]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SetDay+0x7c>)
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	480a      	ldr	r0, [pc, #40]	; (8000fec <SetDay+0x80>)
 8000fc2:	f004 fa61 	bl	8005488 <sniprintf>
    return counter / sensitivity;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SetDay+0x74>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SetDay+0x78>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000248 	.word	0x20000248
 8000fe4:	2000001c 	.word	0x2000001c
 8000fe8:	08005dc8 	.word	0x08005dc8
 8000fec:	20000270 	.word	0x20000270

08000ff0 <SetYear>:

int SetYear(RTC_DateTypeDef * tDate) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 3000 * sensitivity); //12 months
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <SetYear+0x7c>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b298      	uxth	r0, r3
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <SetYear+0x80>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	4413      	add	r3, r2
 800100a:	461a      	mov	r2, r3
 800100c:	0091      	lsls	r1, r2, #2
 800100e:	461a      	mov	r2, r3
 8001010:	460b      	mov	r3, r1
 8001012:	4413      	add	r3, r2
 8001014:	461a      	mov	r2, r3
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	b29b      	uxth	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	2100      	movs	r1, #0
 8001022:	f7ff fd4f 	bl	8000ac4 <clampValue>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <SetYear+0x7c>)
 800102c:	801a      	strh	r2, [r3, #0]
    tDate->Year = counter / sensitivity;
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <SetYear+0x7c>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <SetYear+0x80>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	fb92 f3f3 	sdiv	r3, r2, r3
 800103e:	b2da      	uxtb	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	70da      	strb	r2, [r3, #3]
    snprintf(displayStr, sizeof(displayStr), "%04u", tDate->Year);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	78db      	ldrb	r3, [r3, #3]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SetYear+0x84>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <SetYear+0x88>)
 800104e:	f004 fa1b 	bl	8005488 <sniprintf>
    return counter / sensitivity;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <SetYear+0x7c>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SetYear+0x80>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000248 	.word	0x20000248
 8001070:	2000001c 	.word	0x2000001c
 8001074:	08005dd4 	.word	0x08005dd4
 8001078:	20000270 	.word	0x20000270

0800107c <SetColor>:

void SetColor() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <SetColor+0x80>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b298      	uxth	r0, r3
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <SetColor+0x84>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	b29b      	uxth	r3, r3
 8001090:	461a      	mov	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	f7ff fd16 	bl	8000ac4 <clampValue>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <SetColor+0x80>)
 800109e:	801a      	strh	r2, [r3, #0]
    color = counter / sensitivity;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <SetColor+0x80>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <SetColor+0x84>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <SetColor+0x88>)
 80010b4:	801a      	strh	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%04u", color);
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <SetColor+0x88>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <SetColor+0x8c>)
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	4812      	ldr	r0, [pc, #72]	; (800110c <SetColor+0x90>)
 80010c2:	f004 f9e1 	bl	8005488 <sniprintf>
    Set_LED_Hex(136, getRainbowColor(color));
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <SetColor+0x88>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa60 	bl	8000594 <getRainbowColor>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4619      	mov	r1, r3
 80010d8:	2088      	movs	r0, #136	; 0x88
 80010da:	f004 f8f7 	bl	80052cc <Set_LED_Hex>
    Set_LED_Hex(140, getRainbowColor(color));
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <SetColor+0x88>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa54 	bl	8000594 <getRainbowColor>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4619      	mov	r1, r3
 80010f0:	208c      	movs	r0, #140	; 0x8c
 80010f2:	f004 f8eb 	bl	80052cc <Set_LED_Hex>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000248 	.word	0x20000248
 8001100:	2000001c 	.word	0x2000001c
 8001104:	2000026c 	.word	0x2000026c
 8001108:	08005dd4 	.word	0x08005dd4
 800110c:	20000270 	.word	0x20000270

08001110 <SetBrightness>:


void SetBrightness() {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <SetBrightness+0x6c>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b298      	uxth	r0, r3
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <SetBrightness+0x70>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0fda      	lsrs	r2, r3, #31
 8001120:	4413      	add	r3, r2
 8001122:	105b      	asrs	r3, r3, #1
 8001124:	b29b      	uxth	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4413      	add	r3, r2
 800112c:	461a      	mov	r2, r3
 800112e:	0091      	lsls	r1, r2, #2
 8001130:	461a      	mov	r2, r3
 8001132:	460b      	mov	r3, r1
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	b29b      	uxth	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	2101      	movs	r1, #1
 800113e:	f7ff fcc1 	bl	8000ac4 <clampValue>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <SetBrightness+0x6c>)
 8001148:	801a      	strh	r2, [r3, #0]
    brightness = counter / (sensitivity / 2);
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <SetBrightness+0x6c>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <SetBrightness+0x70>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0fda      	lsrs	r2, r3, #31
 8001158:	4413      	add	r3, r2
 800115a:	105b      	asrs	r3, r3, #1
 800115c:	fb91 f3f3 	sdiv	r3, r1, r3
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <SetBrightness+0x74>)
 8001164:	801a      	strh	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%04u", brightness);
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <SetBrightness+0x74>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <SetBrightness+0x78>)
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <SetBrightness+0x7c>)
 8001172:	f004 f989 	bl	8005488 <sniprintf>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000248 	.word	0x20000248
 8001180:	2000001c 	.word	0x2000001c
 8001184:	20000018 	.word	0x20000018
 8001188:	08005dd4 	.word	0x08005dd4
 800118c:	20000270 	.word	0x20000270

08001190 <Select>:

void Select() {
 8001190:	b598      	push	{r3, r4, r7, lr}
 8001192:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 3 * sensitivity);
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <Select+0x9c>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4a25      	ldr	r2, [pc, #148]	; (8001230 <Select+0xa0>)
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	b292      	uxth	r2, r2
 80011a0:	4611      	mov	r1, r2
 80011a2:	0049      	lsls	r1, r1, #1
 80011a4:	440a      	add	r2, r1
 80011a6:	b292      	uxth	r2, r2
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fc8a 	bl	8000ac4 <clampValue>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <Select+0x9c>)
 80011b6:	801a      	strh	r2, [r3, #0]
	Set_LED_Hex(LED_SET + (!isSet), getRainbowColor(color));
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <Select+0xa4>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f083 0301 	eor.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <Select+0xa8>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9e0 	bl	8000594 <getRainbowColor>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4620      	mov	r0, r4
 80011da:	f004 f877 	bl	80052cc <Set_LED_Hex>
	Blink_LED(LED_SET_TIME - (counter/sensitivity), getRainbowColor(color));
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <Select+0x9c>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <Select+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f1c3 038d 	rsb	r3, r3, #141	; 0x8d
 80011f4:	b29c      	uxth	r4, r3
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <Select+0xa8>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9c8 	bl	8000594 <getRainbowColor>
 8001204:	4603      	mov	r3, r0
 8001206:	4619      	mov	r1, r3
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff fc0b 	bl	8000a24 <Blink_LED>
	snprintf(displayStr, sizeof(displayStr), "%04u", counter/sensitivity);
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <Select+0x9c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <Select+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	fb92 f3f3 	sdiv	r3, r2, r3
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <Select+0xac>)
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <Select+0xb0>)
 8001224:	f004 f930 	bl	8005488 <sniprintf>
}
 8001228:	bf00      	nop
 800122a:	bd98      	pop	{r3, r4, r7, pc}
 800122c:	20000248 	.word	0x20000248
 8001230:	2000001c 	.word	0x2000001c
 8001234:	20000025 	.word	0x20000025
 8001238:	2000026c 	.word	0x2000026c
 800123c:	08005dd4 	.word	0x08005dd4
 8001240:	20000270 	.word	0x20000270

08001244 <Wake>:

void Wake() {
 8001244:	b598      	push	{r3, r4, r7, lr}
 8001246:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 1);
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <Wake+0x68>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	2201      	movs	r2, #1
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fc36 	bl	8000ac4 <clampValue>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <Wake+0x68>)
 800125e:	801a      	strh	r2, [r3, #0]
	Blink_LED(LED_SET + counter, getRainbowColor(color));
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <Wake+0x68>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	3388      	adds	r3, #136	; 0x88
 8001268:	b29c      	uxth	r4, r3
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <Wake+0x6c>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f98e 	bl	8000594 <getRainbowColor>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff fbd1 	bl	8000a24 <Blink_LED>
	snprintf(displayStr, sizeof(displayStr), "%04u", LED_SET + counter);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <Wake+0x68>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	3388      	adds	r3, #136	; 0x88
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <Wake+0x70>)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	480a      	ldr	r0, [pc, #40]	; (80012b8 <Wake+0x74>)
 8001290:	f004 f8fa 	bl	8005488 <sniprintf>

	//counter = 0 -> isSet
	//counter = 1 -> isNotSet
	isSet = !counter;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <Wake+0x68>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <Wake+0x78>)
 80012a6:	701a      	strb	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	bd98      	pop	{r3, r4, r7, pc}
 80012ac:	20000248 	.word	0x20000248
 80012b0:	2000026c 	.word	0x2000026c
 80012b4:	08005dd4 	.word	0x08005dd4
 80012b8:	20000270 	.word	0x20000270
 80012bc:	20000025 	.word	0x20000025

080012c0 <HAL_TIM_PWM_PulseFinishedCallback>:

volatile int hi = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80012c8:	2100      	movs	r1, #0
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f002 fff0 	bl	80042b0 <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    hi = 1;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002fc 	.word	0x200002fc

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SCB->VTOR = FLASH_BASE | 0;
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <main+0x1b4>)
 80012ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ee:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f000 fedc 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f4:	f000 f8f0 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f8:	f000 faa8 	bl	800184c <MX_GPIO_Init>
  MX_DMA_Init();
 80012fc:	f000 fa86 	bl	800180c <MX_DMA_Init>
  MX_TIM1_Init();
 8001300:	f000 f9ae 	bl	8001660 <MX_TIM1_Init>
  MX_RTC_Init();
 8001304:	f000 f952 	bl	80015ac <MX_RTC_Init>
  MX_TIM3_Init();
 8001308:	f000 fa2c 	bl	8001764 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 800130c:	213c      	movs	r1, #60	; 0x3c
 800130e:	4863      	ldr	r0, [pc, #396]	; (800149c <main+0x1b8>)
 8001310:	f003 f93a 	bl	8004588 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001314:	4b61      	ldr	r3, [pc, #388]	; (800149c <main+0x1b8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <main+0x1bc>)
 800131e:	801a      	strh	r2, [r3, #0]

	checkButtonPress();
 8001320:	f7ff fd3e 	bl	8000da0 <checkButtonPress>
	if(stateChangeRequest){
 8001324:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <main+0x1c0>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d01e      	beq.n	800136a <main+0x86>
		switchState((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 800132c:	4b5e      	ldr	r3, [pc, #376]	; (80014a8 <main+0x1c4>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <main+0x60>
 8001334:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <main+0x1c4>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d101      	bne.n	8001340 <main+0x5c>
 800133c:	4b5b      	ldr	r3, [pc, #364]	; (80014ac <main+0x1c8>)
 800133e:	e002      	b.n	8001346 <main+0x62>
 8001340:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <main+0x1cc>)
 8001342:	e000      	b.n	8001346 <main+0x62>
 8001344:	4b5b      	ldr	r3, [pc, #364]	; (80014b4 <main+0x1d0>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fbea 	bl	8000b20 <switchState>
		stateChangeRequest = !stateChangeRequest;
 800134c:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <main+0x1c0>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f083 0301 	eor.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <main+0x1c0>)
 8001368:	701a      	strb	r2, [r3, #0]
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800136a:	2200      	movs	r2, #0
 800136c:	4952      	ldr	r1, [pc, #328]	; (80014b8 <main+0x1d4>)
 800136e:	4853      	ldr	r0, [pc, #332]	; (80014bc <main+0x1d8>)
 8001370:	f002 fbb0 	bl	8003ad4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001374:	2200      	movs	r2, #0
 8001376:	494f      	ldr	r1, [pc, #316]	; (80014b4 <main+0x1d0>)
 8001378:	4850      	ldr	r0, [pc, #320]	; (80014bc <main+0x1d8>)
 800137a:	f002 fc8d 	bl	8003c98 <HAL_RTC_GetDate>


	switch(currentState) {
 800137e:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <main+0x1dc>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b09      	cmp	r3, #9
 8001386:	d864      	bhi.n	8001452 <main+0x16e>
 8001388:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <main+0xac>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	080013b9 	.word	0x080013b9
 8001394:	080013c7 	.word	0x080013c7
 8001398:	080013cd 	.word	0x080013cd
 800139c:	080013d3 	.word	0x080013d3
 80013a0:	080013d9 	.word	0x080013d9
 80013a4:	08001445 	.word	0x08001445
 80013a8:	0800144d 	.word	0x0800144d
 80013ac:	080013df 	.word	0x080013df
 80013b0:	08001401 	.word	0x08001401
 80013b4:	08001423 	.word	0x08001423
		case SLEEP:
			snprintf(displayStr, sizeof(displayStr), "%s", "0000");
 80013b8:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <main+0x1e0>)
 80013ba:	4a43      	ldr	r2, [pc, #268]	; (80014c8 <main+0x1e4>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	4843      	ldr	r0, [pc, #268]	; (80014cc <main+0x1e8>)
 80013c0:	f004 f862 	bl	8005488 <sniprintf>
			break;
 80013c4:	e046      	b.n	8001454 <main+0x170>
		case WAKE:
			Wake();
 80013c6:	f7ff ff3d 	bl	8001244 <Wake>
			break;
 80013ca:	e043      	b.n	8001454 <main+0x170>
		case SELECT:
			Select();
 80013cc:	f7ff fee0 	bl	8001190 <Select>
			break;
 80013d0:	e040      	b.n	8001454 <main+0x170>
		case SET_HOURS:
			SetHours();
 80013d2:	f7ff fd0b 	bl	8000dec <SetHours>
			break;
 80013d6:	e03d      	b.n	8001454 <main+0x170>
		case SET_MINUTES:
			SetMinutes();
 80013d8:	f7ff fd4a 	bl	8000e70 <SetMinutes>
			break;
 80013dc:	e03a      	b.n	8001454 <main+0x170>
		case SET_MONTH:
			SetMonth((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <main+0x1c4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <main+0x112>
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <main+0x1c4>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d101      	bne.n	80013f2 <main+0x10e>
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <main+0x1c8>)
 80013f0:	e002      	b.n	80013f8 <main+0x114>
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <main+0x1cc>)
 80013f4:	e000      	b.n	80013f8 <main+0x114>
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <main+0x1d0>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fd75 	bl	8000ee8 <SetMonth>
			break;
 80013fe:	e029      	b.n	8001454 <main+0x170>
		case SET_DAY:
			SetDay((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <main+0x1c4>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <main+0x134>
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <main+0x1c4>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d101      	bne.n	8001414 <main+0x130>
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <main+0x1c8>)
 8001412:	e002      	b.n	800141a <main+0x136>
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <main+0x1cc>)
 8001416:	e000      	b.n	800141a <main+0x136>
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <main+0x1d0>)
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fda6 	bl	8000f6c <SetDay>
			break;
 8001420:	e018      	b.n	8001454 <main+0x170>
		case SET_YEAR:
			SetYear((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <main+0x1c4>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <main+0x156>
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <main+0x1c4>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d101      	bne.n	8001436 <main+0x152>
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <main+0x1c8>)
 8001434:	e002      	b.n	800143c <main+0x158>
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <main+0x1cc>)
 8001438:	e000      	b.n	800143c <main+0x158>
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <main+0x1d0>)
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fdd7 	bl	8000ff0 <SetYear>
			break;
 8001442:	e007      	b.n	8001454 <main+0x170>
		case SET_COLOR:
			SetColor(&sDate);
 8001444:	481b      	ldr	r0, [pc, #108]	; (80014b4 <main+0x1d0>)
 8001446:	f7ff fe19 	bl	800107c <SetColor>
			break;
 800144a:	e003      	b.n	8001454 <main+0x170>
		case SET_BRIGHTNESS:
			SetBrightness();
 800144c:	f7ff fe60 	bl	8001110 <SetBrightness>
			break;
 8001450:	e000      	b.n	8001454 <main+0x170>
		default:
			break;
 8001452:	bf00      	nop
	}

	__HAL_TIM_SET_COUNTER(&htim3, counter);
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <main+0x1bc>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <main+0x1b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
	Segment_Display(displayStr);
 8001460:	481a      	ldr	r0, [pc, #104]	; (80014cc <main+0x1e8>)
 8001462:	f000 fdd9 	bl	8002018 <Segment_Display>


	display_time(sTime.Hours, sTime.Minutes);
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <main+0x1d4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <main+0x1d4>)
 800146e:	785b      	ldrb	r3, [r3, #1]
 8001470:	4619      	mov	r1, r3
 8001472:	4610      	mov	r0, r2
 8001474:	f7ff f9f6 	bl	8000864 <display_time>
	display_bmp(color, brightness);
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <main+0x1ec>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <main+0x1f0>)
 8001480:	8812      	ldrh	r2, [r2, #0]
 8001482:	b292      	uxth	r2, r2
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f95e 	bl	8000748 <display_bmp>
	WS2812B_Send();
 800148c:	f003 ff54 	bl	8005338 <WS2812B_Send>
	clear_display_buffer();
 8001490:	f7ff f8ea 	bl	8000668 <clear_display_buffer>
	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001494:	e73e      	b.n	8001314 <main+0x30>
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	200001a0 	.word	0x200001a0
 80014a0:	20000248 	.word	0x20000248
 80014a4:	200002f0 	.word	0x200002f0
 80014a8:	200002f8 	.word	0x200002f8
 80014ac:	20000268 	.word	0x20000268
 80014b0:	20000264 	.word	0x20000264
 80014b4:	20000260 	.word	0x20000260
 80014b8:	2000024c 	.word	0x2000024c
 80014bc:	20000138 	.word	0x20000138
 80014c0:	2000026e 	.word	0x2000026e
 80014c4:	08005ddc 	.word	0x08005ddc
 80014c8:	08005de4 	.word	0x08005de4
 80014cc:	20000270 	.word	0x20000270
 80014d0:	2000026c 	.word	0x2000026c
 80014d4:	20000018 	.word	0x20000018

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	2230      	movs	r2, #48	; 0x30
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 ffc6 	bl	8005478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <SystemClock_Config+0xcc>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <SystemClock_Config+0xcc>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <SystemClock_Config+0xcc>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <SystemClock_Config+0xd0>)
 8001522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <SystemClock_Config+0xd0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001534:	2306      	movs	r3, #6
 8001536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	2301      	movs	r3, #1
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001540:	2310      	movs	r3, #16
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001544:	2302      	movs	r3, #2
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800154c:	2308      	movs	r3, #8
 800154e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001550:	2348      	movs	r3, #72	; 0x48
 8001552:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001554:	2302      	movs	r3, #2
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001558:	2304      	movs	r3, #4
 800155a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fc93 	bl	8002e8c <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800156c:	f000 f9f2 	bl	8001954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001570:	230f      	movs	r3, #15
 8001572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001574:	2302      	movs	r3, #2
 8001576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2102      	movs	r1, #2
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fef5 	bl	800337c <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001598:	f000 f9dc 	bl	8001954 <Error_Handler>
  }
}
 800159c:	bf00      	nop
 800159e:	3750      	adds	r7, #80	; 0x50
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

080015ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <MX_RTC_Init+0xac>)
 80015c6:	4a25      	ldr	r2, [pc, #148]	; (800165c <MX_RTC_Init+0xb0>)
 80015c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <MX_RTC_Init+0xac>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <MX_RTC_Init+0xac>)
 80015d2:	227f      	movs	r2, #127	; 0x7f
 80015d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_RTC_Init+0xac>)
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_RTC_Init+0xac>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_RTC_Init+0xac>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_RTC_Init+0xac>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015ee:	481a      	ldr	r0, [pc, #104]	; (8001658 <MX_RTC_Init+0xac>)
 80015f0:	f002 f960 	bl	80038b4 <HAL_RTC_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80015fa:	f000 f9ab 	bl	8001954 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 80015fe:	2307      	movs	r3, #7
 8001600:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 8001602:	230f      	movs	r3, #15
 8001604:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 8001606:	2332      	movs	r3, #50	; 0x32
 8001608:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <MX_RTC_Init+0xac>)
 800161a:	f002 f9c1 	bl	80039a0 <HAL_RTC_SetTime>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001624:	f000 f996 	bl	8001954 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001628:	2302      	movs	r3, #2
 800162a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800162c:	2301      	movs	r3, #1
 800162e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 8001630:	2317      	movs	r3, #23
 8001632:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001634:	2318      	movs	r3, #24
 8001636:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_RTC_Init+0xac>)
 8001640:	f002 faa6 	bl	8003b90 <HAL_RTC_SetDate>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800164a:	f000 f983 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000138 	.word	0x20000138
 800165c:	40002800 	.word	0x40002800

08001660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b092      	sub	sp, #72	; 0x48
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2220      	movs	r2, #32
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fef4 	bl	8005478 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <MX_TIM1_Init+0xfc>)
 8001692:	4a33      	ldr	r2, [pc, #204]	; (8001760 <MX_TIM1_Init+0x100>)
 8001694:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <MX_TIM1_Init+0xfc>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <MX_TIM1_Init+0xfc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <MX_TIM1_Init+0xfc>)
 80016a4:	2259      	movs	r2, #89	; 0x59
 80016a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <MX_TIM1_Init+0xfc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <MX_TIM1_Init+0xfc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <MX_TIM1_Init+0xfc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ba:	4828      	ldr	r0, [pc, #160]	; (800175c <MX_TIM1_Init+0xfc>)
 80016bc:	f002 fbf8 	bl	8003eb0 <HAL_TIM_PWM_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80016c6:	f000 f945 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d6:	4619      	mov	r1, r3
 80016d8:	4820      	ldr	r0, [pc, #128]	; (800175c <MX_TIM1_Init+0xfc>)
 80016da:	f003 fced 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80016e4:	f000 f936 	bl	8001954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e8:	2360      	movs	r3, #96	; 0x60
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	2200      	movs	r2, #0
 800170a:	4619      	mov	r1, r3
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_TIM1_Init+0xfc>)
 800170e:	f003 f8d1 	bl	80048b4 <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001718:	f000 f91c 	bl	8001954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <MX_TIM1_Init+0xfc>)
 8001740:	f003 fd28 	bl	8005194 <HAL_TIMEx_ConfigBreakDeadTime>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800174a:	f000 f903 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <MX_TIM1_Init+0xfc>)
 8001750:	f000 fa40 	bl	8001bd4 <HAL_TIM_MspPostInit>

}
 8001754:	bf00      	nop
 8001756:	3748      	adds	r7, #72	; 0x48
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000158 	.word	0x20000158
 8001760:	40010000 	.word	0x40010000

08001764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	2224      	movs	r2, #36	; 0x24
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fe80 	bl	8005478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <MX_TIM3_Init+0xa0>)
 8001782:	4a21      	ldr	r2, [pc, #132]	; (8001808 <MX_TIM3_Init+0xa4>)
 8001784:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001786:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <MX_TIM3_Init+0xa0>)
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <MX_TIM3_Init+0xa0>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <MX_TIM3_Init+0xa0>)
 8001794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001798:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_TIM3_Init+0xa0>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_TIM3_Init+0xa0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017a6:	2303      	movs	r3, #3
 80017a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ae:	2301      	movs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017be:	2301      	movs	r3, #1
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <MX_TIM3_Init+0xa0>)
 80017d2:	f002 fe33 	bl	800443c <HAL_TIM_Encoder_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017dc:	f000 f8ba 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_TIM3_Init+0xa0>)
 80017ee:	f003 fc63 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017f8:	f000 f8ac 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200001a0 	.word	0x200001a0
 8001808:	40000400 	.word	0x40000400

0800180c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_DMA_Init+0x3c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <MX_DMA_Init+0x3c>)
 800181c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_DMA_Init+0x3c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2108      	movs	r1, #8
 8001832:	2039      	movs	r0, #57	; 0x39
 8001834:	f000 fdab 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001838:	2039      	movs	r0, #57	; 0x39
 800183a:	f000 fdc4 	bl	80023c6 <HAL_NVIC_EnableIRQ>

}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <MX_GPIO_Init+0xfc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a37      	ldr	r2, [pc, #220]	; (8001948 <MX_GPIO_Init+0xfc>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b35      	ldr	r3, [pc, #212]	; (8001948 <MX_GPIO_Init+0xfc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <MX_GPIO_Init+0xfc>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a30      	ldr	r2, [pc, #192]	; (8001948 <MX_GPIO_Init+0xfc>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <MX_GPIO_Init+0xfc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <MX_GPIO_Init+0xfc>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a29      	ldr	r2, [pc, #164]	; (8001948 <MX_GPIO_Init+0xfc>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <MX_GPIO_Init+0xfc>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <MX_GPIO_Init+0xfc>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <MX_GPIO_Init+0xfc>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <MX_GPIO_Init+0xfc>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 80018d2:	2200      	movs	r2, #0
 80018d4:	f248 01ff 	movw	r1, #33023	; 0x80ff
 80018d8:	481c      	ldr	r0, [pc, #112]	; (800194c <MX_GPIO_Init+0x100>)
 80018da:	f001 fabd 	bl	8002e58 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 80018de:	2200      	movs	r2, #0
 80018e0:	f241 4107 	movw	r1, #5127	; 0x1407
 80018e4:	481a      	ldr	r0, [pc, #104]	; (8001950 <MX_GPIO_Init+0x104>)
 80018e6:	f001 fab7 	bl	8002e58 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 80018ea:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80018ee:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4812      	ldr	r0, [pc, #72]	; (800194c <MX_GPIO_Init+0x100>)
 8001904:	f001 f90c 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001908:	f241 4307 	movw	r3, #5127	; 0x1407
 800190c:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <MX_GPIO_Init+0x104>)
 8001922:	f001 f8fd 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001930:	2301      	movs	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_GPIO_Init+0x104>)
 800193c:	f001 f8f0 	bl	8002b20 <HAL_GPIO_Init>

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400

08001954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001958:	b672      	cpsid	i
}
 800195a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195c:	e7fe      	b.n	800195c <Error_Handler+0x8>
	...

08001960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_MspInit+0x90>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <HAL_MspInit+0x90>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_MspInit+0x90>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_MspInit+0x90>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_MspInit+0x90>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_MspInit+0x90>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2101      	movs	r1, #1
 80019a2:	f06f 000b 	mvn.w	r0, #11
 80019a6:	f000 fcf2 	bl	800238e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2102      	movs	r1, #2
 80019ae:	f06f 000a 	mvn.w	r0, #10
 80019b2:	f000 fcec 	bl	800238e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2103      	movs	r1, #3
 80019ba:	f06f 0009 	mvn.w	r0, #9
 80019be:	f000 fce6 	bl	800238e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2104      	movs	r1, #4
 80019c6:	f06f 0004 	mvn.w	r0, #4
 80019ca:	f000 fce0 	bl	800238e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	f06f 0003 	mvn.w	r0, #3
 80019d6:	f000 fcda 	bl	800238e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2106      	movs	r1, #6
 80019de:	f06f 0001 	mvn.w	r0, #1
 80019e2:	f000 fcd4 	bl	800238e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <HAL_RTC_MspInit+0x50>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d111      	bne.n	8001a3c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a20:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 fe54 	bl	80036d4 <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a32:	f7ff ff8f 	bl	8001954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_RTC_MspInit+0x54>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40002800 	.word	0x40002800
 8001a48:	42470e3c 	.word	0x42470e3c

08001a4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <HAL_TIM_PWM_MspInit+0xd8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d15d      	bne.n	8001b1a <HAL_TIM_PWM_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001a7c:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <HAL_TIM_PWM_MspInit+0xe4>)
 8001a7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001a82:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001a86:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aa2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aaa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001abe:	481b      	ldr	r0, [pc, #108]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ac0:	f000 fc9c 	bl	80023fc <HAL_DMA_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001aca:	f7ff ff43 	bl	8001954 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ad4:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2018      	movs	r0, #24
 8001ae0:	f000 fc55 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ae4:	2018      	movs	r0, #24
 8001ae6:	f000 fc6e 	bl	80023c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2019      	movs	r0, #25
 8001af0:	f000 fc4d 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001af4:	2019      	movs	r0, #25
 8001af6:	f000 fc66 	bl	80023c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	201a      	movs	r0, #26
 8001b00:	f000 fc45 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b04:	201a      	movs	r0, #26
 8001b06:	f000 fc5e 	bl	80023c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	201b      	movs	r0, #27
 8001b10:	f000 fc3d 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b14:	201b      	movs	r0, #27
 8001b16:	f000 fc56 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	200001e8 	.word	0x200001e8
 8001b30:	40026428 	.word	0x40026428

08001b34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d133      	bne.n	8001bbe <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <HAL_TIM_Encoder_MspInit+0x98>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_TIM_Encoder_MspInit+0x98>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_TIM_Encoder_MspInit+0x98>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_TIM_Encoder_MspInit+0x98>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <HAL_TIM_Encoder_MspInit+0x98>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_TIM_Encoder_MspInit+0x98>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b8e:	2330      	movs	r3, #48	; 0x30
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001baa:	f000 ffb9 	bl	8002b20 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2109      	movs	r1, #9
 8001bb2:	201d      	movs	r0, #29
 8001bb4:	f000 fbeb 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bb8:	201d      	movs	r0, #29
 8001bba:	f000 fc04 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <HAL_TIM_MspPostInit+0x68>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d11e      	bne.n	8001c34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_TIM_MspPostInit+0x6c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_TIM_MspPostInit+0x6c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_TIM_MspPostInit+0x6c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <HAL_TIM_MspPostInit+0x70>)
 8001c30:	f000 ff76 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c34:	bf00      	nop
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020000 	.word	0x40020000

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void){
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 fa5c 	bl	8002150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001ca2:	f002 fcff 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000158 	.word	0x20000158

08001cb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cb6:	f002 fcf5 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000158 	.word	0x20000158

08001cc4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cca:	f002 fceb 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000158 	.word	0x20000158

08001cd8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <TIM1_CC_IRQHandler+0x10>)
 8001cde:	f002 fce1 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000158 	.word	0x20000158

08001cec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <TIM3_IRQHandler+0x10>)
 8001cf2:	f002 fcd7 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200001a0 	.word	0x200001a0

08001d00 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <DMA2_Stream1_IRQHandler+0x10>)
 8001d06:	f000 fca1 	bl	800264c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200001e8 	.word	0x200001e8

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f003 fb6e 	bl	8005424 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20020000 	.word	0x20020000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	20000300 	.word	0x20000300
 8001d7c:	20001fa0 	.word	0x20001fa0

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da8:	480d      	ldr	r0, [pc, #52]	; (8001de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001daa:	490e      	ldr	r1, [pc, #56]	; (8001de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dc0:	4c0b      	ldr	r4, [pc, #44]	; (8001df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dce:	f7ff ffd7 	bl	8001d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f003 fb2d 	bl	8005430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7ff fa85 	bl	80012e4 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001de8:	08006308 	.word	0x08006308
  ldr r2, =_sbss
 8001dec:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001df0:	20001fa0 	.word	0x20001fa0

08001df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC_IRQHandler>
	...

08001df8 <setSegments>:
		['Y'] = 0x6E, ['Z'] = 0x5B,  // 'Z' uses same as '2'
		[' '] = 0x00, // Blank character
};

// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	2104      	movs	r1, #4
 8001e16:	4830      	ldr	r0, [pc, #192]	; (8001ed8 <setSegments+0xe0>)
 8001e18:	f001 f81e 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf0c      	ite	eq
 8001e26:	2301      	moveq	r3, #1
 8001e28:	2300      	movne	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <setSegments+0xe0>)
 8001e32:	f001 f811 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	2108      	movs	r1, #8
 8001e4a:	4823      	ldr	r0, [pc, #140]	; (8001ed8 <setSegments+0xe0>)
 8001e4c:	f001 f804 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	2104      	movs	r1, #4
 8001e64:	481d      	ldr	r0, [pc, #116]	; (8001edc <setSegments+0xe4>)
 8001e66:	f000 fff7 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4817      	ldr	r0, [pc, #92]	; (8001edc <setSegments+0xe4>)
 8001e80:	f000 ffea 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	2300      	movne	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	2110      	movs	r1, #16
 8001e98:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <setSegments+0xe0>)
 8001e9a:	f000 ffdd 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4809      	ldr	r0, [pc, #36]	; (8001ed8 <setSegments+0xe0>)
 8001eb4:	f000 ffd0 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	09db      	lsrs	r3, r3, #7
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2140      	movs	r1, #64	; 0x40
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <setSegments+0xe0>)
 8001eca:	f000 ffc5 	bl	8002e58 <HAL_GPIO_WritePin>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400

08001ee0 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001efc:	4819      	ldr	r0, [pc, #100]	; (8001f64 <activateDigit+0x84>)
 8001efe:	f000 ffab 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <activateDigit+0x84>)
 8001f16:	f000 ff9f 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	480f      	ldr	r0, [pc, #60]	; (8001f68 <activateDigit+0x88>)
 8001f2c:	f000 ff94 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2120      	movs	r1, #32
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <activateDigit+0x88>)
 8001f42:	f000 ff89 	bl	8002e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	2102      	movs	r1, #2
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <activateDigit+0x84>)
 8001f58:	f000 ff7e 	bl	8002e58 <HAL_GPIO_WritePin>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020000 	.word	0x40020000

08001f6c <processInput>:

// Prevent errors by formatting string
void processInput(const char *input) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    size_t inputLength = strlen(input);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe f933 	bl	80001e0 <strlen>
 8001f7a:	60f8      	str	r0, [r7, #12]

    // We are assuming that outputBuffer is large enough to hold all digits
    memset(outputBuffer, 0, sizeof(outputBuffer)); // Clear the output buffer
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4822      	ldr	r0, [pc, #136]	; (800200c <processInput+0xa0>)
 8001f82:	f003 fa79 	bl	8005478 <memset>

    for (size_t i = 0, j = 0; i < inputLength && j < NUM_DIGITS; ++i) {
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e032      	b.n	8001ff6 <processInput+0x8a>
        // Convert lowercase letters to uppercase
        uint8_t c = (uint8_t)toupper((unsigned char)input[i]); // Cast to avoid potential negative values
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	4413      	add	r3, r2
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	72fb      	strb	r3, [r7, #11]
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <processInput+0xa4>)
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d102      	bne.n	8001fb2 <processInput+0x46>
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	3b20      	subs	r3, #32
 8001fb0:	e000      	b.n	8001fb4 <processInput+0x48>
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	72bb      	strb	r3, [r7, #10]

        if (c == ':') {
 8001fb6:	7abb      	ldrb	r3, [r7, #10]
 8001fb8:	2b3a      	cmp	r3, #58	; 0x3a
 8001fba:	d018      	beq.n	8001fee <processInput+0x82>
            // If colon, handle separately
            continue;
        }
        if (c < ' ' || c > 'Z' || charToSegmentsMap[c] == 0) {
 8001fbc:	7abb      	ldrb	r3, [r7, #10]
 8001fbe:	2b1f      	cmp	r3, #31
 8001fc0:	d907      	bls.n	8001fd2 <processInput+0x66>
 8001fc2:	7abb      	ldrb	r3, [r7, #10]
 8001fc4:	2b5a      	cmp	r3, #90	; 0x5a
 8001fc6:	d804      	bhi.n	8001fd2 <processInput+0x66>
 8001fc8:	7abb      	ldrb	r3, [r7, #10]
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <processInput+0xa8>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <processInput+0x74>
            // Replace invalid character with 'E'
            outputBuffer[j++] = 'E';
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	613a      	str	r2, [r7, #16]
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	; (800200c <processInput+0xa0>)
 8001fda:	2145      	movs	r1, #69	; 0x45
 8001fdc:	54d1      	strb	r1, [r2, r3]
 8001fde:	e007      	b.n	8001ff0 <processInput+0x84>
        } else {
            // Copy valid character to output buffer
            outputBuffer[j++] = c; // Now 'c' contains the uppercase version, if applicable
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	613a      	str	r2, [r7, #16]
 8001fe6:	4909      	ldr	r1, [pc, #36]	; (800200c <processInput+0xa0>)
 8001fe8:	7aba      	ldrb	r2, [r7, #10]
 8001fea:	54ca      	strb	r2, [r1, r3]
 8001fec:	e000      	b.n	8001ff0 <processInput+0x84>
            continue;
 8001fee:	bf00      	nop
    for (size_t i = 0, j = 0; i < inputLength && j < NUM_DIGITS; ++i) {
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d202      	bcs.n	8002004 <processInput+0x98>
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d9c5      	bls.n	8001f90 <processInput+0x24>
        }
    }

    // Null-termination is ensured by static buffer initialization to {0}
}
 8002004:	bf00      	nop
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000304 	.word	0x20000304
 8002010:	080061c4 	.word	0x080061c4
 8002014:	08006160 	.word	0x08006160

08002018 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    processInput(input);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffa3 	bl	8001f6c <processInput>
    bool hasColon = strchr(input, ':') != NULL; // Check if input contains a colon
 8002026:	213a      	movs	r1, #58	; 0x3a
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f003 fa61 	bl	80054f0 <strchr>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	74fb      	strb	r3, [r7, #19]

    // Clearing all digits can be optimized out if carefully controlling the display digits
    // activateDigit(0); // Assuming the digits are off to begin with

    // Calculate the number of characters to display
    size_t numChars = strlen(outputBuffer);
 800203a:	481a      	ldr	r0, [pc, #104]	; (80020a4 <Segment_Display+0x8c>)
 800203c:	f7fe f8d0 	bl	80001e0 <strlen>
 8002040:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < numChars; i++) {
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e016      	b.n	8002076 <Segment_Display+0x5e>
        activateDigit(i + 1); // Activate the correct digit
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff45 	bl	8001ee0 <activateDigit>
        setSegments(charToSegmentsMap[(uint8_t)outputBuffer[i]]); // Set segments
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <Segment_Display+0x8c>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <Segment_Display+0x90>)
 8002062:	5c9b      	ldrb	r3, [r3, r2]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fec7 	bl	8001df8 <setSegments>
        HAL_Delay(1); // Delay to allow the segments to light up
 800206a:	2001      	movs	r0, #1
 800206c:	f000 f890 	bl	8002190 <HAL_Delay>
    for (size_t i = 0; i < numChars; i++) {
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	429a      	cmp	r2, r3
 800207c:	d3e4      	bcc.n	8002048 <Segment_Display+0x30>
    }

    if (hasColon) {
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <Segment_Display+0x7e>
        // Handle case for the colon display
        activateDigit(5); // Assuming the fifth "digit" is for the colon
 8002084:	2005      	movs	r0, #5
 8002086:	f7ff ff2b 	bl	8001ee0 <activateDigit>
        setSegments(0b11); // Set segments to display the colon
 800208a:	2003      	movs	r0, #3
 800208c:	f7ff feb4 	bl	8001df8 <setSegments>
        HAL_Delay(1);
 8002090:	2001      	movs	r0, #1
 8002092:	f000 f87d 	bl	8002190 <HAL_Delay>
    }

    activateDigit(0); // Turn off all digits after showing the sequence
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff ff22 	bl	8001ee0 <activateDigit>
}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000304 	.word	0x20000304
 80020a8:	08006160 	.word	0x08006160

080020ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_Init+0x40>)
 80020b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_Init+0x40>)
 80020c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_Init+0x40>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 f94f 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020da:	200f      	movs	r0, #15
 80020dc:	f000 f808 	bl	80020f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e0:	f7ff fc3e 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x54>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x58>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002106:	fbb3 f3f1 	udiv	r3, r3, r1
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f967 	bl	80023e2 <HAL_SYSTICK_Config>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00e      	b.n	800213c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	d80a      	bhi.n	800213a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002124:	2200      	movs	r2, #0
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f000 f92f 	bl	800238e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002130:	4a06      	ldr	r2, [pc, #24]	; (800214c <HAL_InitTick+0x5c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000028 	.word	0x20000028
 8002148:	20000030 	.word	0x20000030
 800214c:	2000002c 	.word	0x2000002c

08002150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x20>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_IncTick+0x24>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_IncTick+0x24>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000030 	.word	0x20000030
 8002174:	2000030c 	.word	0x2000030c

08002178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_GetTick+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	2000030c 	.word	0x2000030c

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff ffee 	bl	8002178 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_Delay+0x44>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffde 	bl	8002178 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000030 	.word	0x20000030

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	; (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f7ff ff8e 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff29 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a0:	f7ff ff3e 	bl	8002220 <__NVIC_GetPriorityGrouping>
 80023a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	6978      	ldr	r0, [r7, #20]
 80023ac:	f7ff ff8e 	bl	80022cc <NVIC_EncodePriority>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff5d 	bl	8002278 <__NVIC_SetPriority>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff31 	bl	800223c <__NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffa2 	bl	8002334 <SysTick_Config>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff feb6 	bl	8002178 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e099      	b.n	800254c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002438:	e00f      	b.n	800245a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243a:	f7ff fe9d 	bl	8002178 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b05      	cmp	r3, #5
 8002446:	d908      	bls.n	800245a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e078      	b.n	800254c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e8      	bne.n	800243a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_DMA_Init+0x158>)
 8002474:	4013      	ands	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d107      	bne.n	80024c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4313      	orrs	r3, r2
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f023 0307 	bic.w	r3, r3, #7
 80024da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d117      	bne.n	800251e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00e      	beq.n	800251e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fa91 	bl	8002a28 <DMA_CheckFifoParam>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800251a:	2301      	movs	r3, #1
 800251c:	e016      	b.n	800254c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa48 	bl	80029bc <DMA_CalcBaseAndBitshift>
 800252c:	4603      	mov	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	223f      	movs	r2, #63	; 0x3f
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	f010803f 	.word	0xf010803f

08002558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_DMA_Start_IT+0x26>
 800257a:	2302      	movs	r3, #2
 800257c:	e040      	b.n	8002600 <HAL_DMA_Start_IT+0xa8>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d12f      	bne.n	80025f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f9da 	bl	8002960 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	223f      	movs	r2, #63	; 0x3f
 80025b2:	409a      	lsls	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0216 	orr.w	r2, r2, #22
 80025c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0208 	orr.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e005      	b.n	80025fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d004      	beq.n	8002626 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00c      	b.n	8002640 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2205      	movs	r2, #5
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002658:	4b8e      	ldr	r3, [pc, #568]	; (8002894 <HAL_DMA_IRQHandler+0x248>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a8e      	ldr	r2, [pc, #568]	; (8002898 <HAL_DMA_IRQHandler+0x24c>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0a9b      	lsrs	r3, r3, #10
 8002664:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	2208      	movs	r2, #8
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01a      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0204 	bic.w	r2, r2, #4
 800269e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	2208      	movs	r2, #8
 80026a6:	409a      	lsls	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0201 	orr.w	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2201      	movs	r2, #1
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d012      	beq.n	80026ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	2201      	movs	r2, #1
 80026dc:	409a      	lsls	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0202 	orr.w	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2204      	movs	r2, #4
 80026f4:	409a      	lsls	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d012      	beq.n	8002724 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00b      	beq.n	8002724 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	2204      	movs	r2, #4
 8002712:	409a      	lsls	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	f043 0204 	orr.w	r2, r3, #4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	2210      	movs	r2, #16
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d043      	beq.n	80027bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d03c      	beq.n	80027bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	2210      	movs	r2, #16
 8002748:	409a      	lsls	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d018      	beq.n	800278e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d024      	beq.n	80027bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
 800277a:	e01f      	b.n	80027bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01b      	beq.n	80027bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
 800278c:	e016      	b.n	80027bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0208 	bic.w	r2, r2, #8
 80027aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	2220      	movs	r2, #32
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 808f 	beq.w	80028ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8087 	beq.w	80028ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	2220      	movs	r2, #32
 80027e4:	409a      	lsls	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d136      	bne.n	8002864 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0216 	bic.w	r2, r2, #22
 8002804:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002814:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <HAL_DMA_IRQHandler+0x1da>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0208 	bic.w	r2, r2, #8
 8002834:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	223f      	movs	r2, #63	; 0x3f
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002856:	2b00      	cmp	r3, #0
 8002858:	d07e      	beq.n	8002958 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
        }
        return;
 8002862:	e079      	b.n	8002958 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01d      	beq.n	80028ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10d      	bne.n	800289c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	2b00      	cmp	r3, #0
 8002886:	d031      	beq.n	80028ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
 8002890:	e02c      	b.n	80028ec <HAL_DMA_IRQHandler+0x2a0>
 8002892:	bf00      	nop
 8002894:	20000028 	.word	0x20000028
 8002898:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d023      	beq.n	80028ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
 80028ac:	e01e      	b.n	80028ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10f      	bne.n	80028dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0210 	bic.w	r2, r2, #16
 80028ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d032      	beq.n	800295a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2205      	movs	r2, #5
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	3301      	adds	r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	d307      	bcc.n	8002934 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f2      	bne.n	8002918 <HAL_DMA_IRQHandler+0x2cc>
 8002932:	e000      	b.n	8002936 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002934:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4798      	blx	r3
 8002956:	e000      	b.n	800295a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002958:	bf00      	nop
    }
  }
}
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800297c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d108      	bne.n	80029a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800299e:	e007      	b.n	80029b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	60da      	str	r2, [r3, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3b10      	subs	r3, #16
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <DMA_CalcBaseAndBitshift+0x64>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <DMA_CalcBaseAndBitshift+0x68>)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d909      	bls.n	80029fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	1d1a      	adds	r2, r3, #4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	659a      	str	r2, [r3, #88]	; 0x58
 80029fc:	e007      	b.n	8002a0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	aaaaaaab 	.word	0xaaaaaaab
 8002a24:	080061bc 	.word	0x080061bc

08002a28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11f      	bne.n	8002a82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d856      	bhi.n	8002af6 <DMA_CheckFifoParam+0xce>
 8002a48:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <DMA_CheckFifoParam+0x28>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002a73 	.word	0x08002a73
 8002a58:	08002a61 	.word	0x08002a61
 8002a5c:	08002af7 	.word	0x08002af7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d046      	beq.n	8002afa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a70:	e043      	b.n	8002afa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a7a:	d140      	bne.n	8002afe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e03d      	b.n	8002afe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8a:	d121      	bne.n	8002ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d837      	bhi.n	8002b02 <DMA_CheckFifoParam+0xda>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <DMA_CheckFifoParam+0x70>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002aaf 	.word	0x08002aaf
 8002aa0:	08002aa9 	.word	0x08002aa9
 8002aa4:	08002ac1 	.word	0x08002ac1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e030      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d025      	beq.n	8002b06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abe:	e022      	b.n	8002b06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ac8:	d11f      	bne.n	8002b0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ace:	e01c      	b.n	8002b0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d903      	bls.n	8002ade <DMA_CheckFifoParam+0xb6>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d003      	beq.n	8002ae4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002adc:	e018      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae2:	e015      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e00b      	b.n	8002b0e <DMA_CheckFifoParam+0xe6>
      break;
 8002af6:	bf00      	nop
 8002af8:	e00a      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
 8002afc:	e008      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
      break;
 8002afe:	bf00      	nop
 8002b00:	e006      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e004      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e002      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e159      	b.n	8002df0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f040 8148 	bne.w	8002dea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d005      	beq.n	8002b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d130      	bne.n	8002bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0201 	and.w	r2, r3, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d017      	beq.n	8002c10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d123      	bne.n	8002c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	08da      	lsrs	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3208      	adds	r2, #8
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	220f      	movs	r2, #15
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	08da      	lsrs	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	69b9      	ldr	r1, [r7, #24]
 8002c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0203 	and.w	r2, r3, #3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a2 	beq.w	8002dea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <HAL_GPIO_Init+0x2e8>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <HAL_GPIO_Init+0x2e8>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b54      	ldr	r3, [pc, #336]	; (8002e08 <HAL_GPIO_Init+0x2e8>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc2:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_GPIO_Init+0x2ec>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a49      	ldr	r2, [pc, #292]	; (8002e10 <HAL_GPIO_Init+0x2f0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d019      	beq.n	8002d22 <HAL_GPIO_Init+0x202>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a48      	ldr	r2, [pc, #288]	; (8002e14 <HAL_GPIO_Init+0x2f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_GPIO_Init+0x1fe>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a47      	ldr	r2, [pc, #284]	; (8002e18 <HAL_GPIO_Init+0x2f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_GPIO_Init+0x1fa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a46      	ldr	r2, [pc, #280]	; (8002e1c <HAL_GPIO_Init+0x2fc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <HAL_GPIO_Init+0x1f6>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <HAL_GPIO_Init+0x300>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_GPIO_Init+0x1f2>
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d12:	2307      	movs	r3, #7
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d34:	4935      	ldr	r1, [pc, #212]	; (8002e0c <HAL_GPIO_Init+0x2ec>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d66:	4a2f      	ldr	r2, [pc, #188]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d90:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d96:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dba:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de4:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f aea2 	bls.w	8002b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020c00 	.word	0x40020c00
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40013c00 	.word	0x40013c00

08002e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	e001      	b.n	8002e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e74:	e003      	b.n	8002e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	041a      	lsls	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	619a      	str	r2, [r3, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e267      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d075      	beq.n	8002f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eaa:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4b85      	ldr	r3, [pc, #532]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d112      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec2:	4b82      	ldr	r3, [pc, #520]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ece:	d10b      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	4b7e      	ldr	r3, [pc, #504]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d05b      	beq.n	8002f94 <HAL_RCC_OscConfig+0x108>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d157      	bne.n	8002f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e242      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d106      	bne.n	8002f00 <HAL_RCC_OscConfig+0x74>
 8002ef2:	4b76      	ldr	r3, [pc, #472]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a75      	ldr	r2, [pc, #468]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e01d      	b.n	8002f3c <HAL_RCC_OscConfig+0xb0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x98>
 8002f0a:	4b70      	ldr	r3, [pc, #448]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6f      	ldr	r2, [pc, #444]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a6c      	ldr	r2, [pc, #432]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0xb0>
 8002f24:	4b69      	ldr	r3, [pc, #420]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a68      	ldr	r2, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b66      	ldr	r3, [pc, #408]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a65      	ldr	r2, [pc, #404]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7ff f918 	bl	8002178 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7ff f914 	bl	8002178 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e207      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b5b      	ldr	r3, [pc, #364]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0xc0>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7ff f904 	bl	8002178 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7ff f900 	bl	8002178 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e1f3      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0xe8>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d063      	beq.n	800306a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	4b44      	ldr	r3, [pc, #272]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d116      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	4b41      	ldr	r3, [pc, #260]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x152>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e1c7      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4937      	ldr	r1, [pc, #220]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	e03a      	b.n	800306a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffc:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_OscConfig+0x244>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7ff f8b9 	bl	8002178 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300a:	f7ff f8b5 	bl	8002178 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1a8      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301c:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4925      	ldr	r1, [pc, #148]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
 800303c:	e015      	b.n	800306a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_OscConfig+0x244>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7ff f898 	bl	8002178 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304c:	f7ff f894 	bl	8002178 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e187      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d036      	beq.n	80030e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_RCC_OscConfig+0x248>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7ff f878 	bl	8002178 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308c:	f7ff f874 	bl	8002178 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e167      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_OscConfig+0x240>)
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x200>
 80030aa:	e01b      	b.n	80030e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_OscConfig+0x248>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7ff f861 	bl	8002178 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	e00e      	b.n	80030d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ba:	f7ff f85d 	bl	8002178 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d907      	bls.n	80030d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e150      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
 80030cc:	40023800 	.word	0x40023800
 80030d0:	42470000 	.word	0x42470000
 80030d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 80030da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ea      	bne.n	80030ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8097 	beq.w	8003220 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f6:	4b81      	ldr	r3, [pc, #516]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10f      	bne.n	8003122 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4b7d      	ldr	r3, [pc, #500]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a7c      	ldr	r2, [pc, #496]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b7a      	ldr	r3, [pc, #488]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	4b77      	ldr	r3, [pc, #476]	; (8003300 <HAL_RCC_OscConfig+0x474>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d118      	bne.n	8003160 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312e:	4b74      	ldr	r3, [pc, #464]	; (8003300 <HAL_RCC_OscConfig+0x474>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a73      	ldr	r2, [pc, #460]	; (8003300 <HAL_RCC_OscConfig+0x474>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313a:	f7ff f81d 	bl	8002178 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7ff f819 	bl	8002178 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e10c      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <HAL_RCC_OscConfig+0x474>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x2ea>
 8003168:	4b64      	ldr	r3, [pc, #400]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a63      	ldr	r2, [pc, #396]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
 8003174:	e01c      	b.n	80031b0 <HAL_RCC_OscConfig+0x324>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b05      	cmp	r3, #5
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x30c>
 800317e:	4b5f      	ldr	r3, [pc, #380]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a5e      	ldr	r2, [pc, #376]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003184:	f043 0304 	orr.w	r3, r3, #4
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	4b5c      	ldr	r3, [pc, #368]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a5b      	ldr	r2, [pc, #364]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0x324>
 8003198:	4b58      	ldr	r3, [pc, #352]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a57      	ldr	r2, [pc, #348]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
 80031a4:	4b55      	ldr	r3, [pc, #340]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a54      	ldr	r2, [pc, #336]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 80031aa:	f023 0304 	bic.w	r3, r3, #4
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d015      	beq.n	80031e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fe ffde 	bl	8002178 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe ffda 	bl	8002178 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0cb      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d6:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0ee      	beq.n	80031c0 <HAL_RCC_OscConfig+0x334>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e4:	f7fe ffc8 	bl	8002178 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7fe ffc4 	bl	8002178 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0b5      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003202:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ee      	bne.n	80031ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d105      	bne.n	8003220 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003214:	4b39      	ldr	r3, [pc, #228]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	4a38      	ldr	r2, [pc, #224]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 800321a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a1 	beq.w	800336c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b08      	cmp	r3, #8
 8003234:	d05c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d141      	bne.n	80032c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_RCC_OscConfig+0x478>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe ff98 	bl	8002178 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324c:	f7fe ff94 	bl	8002178 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e087      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	3b01      	subs	r3, #1
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	491b      	ldr	r1, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x478>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fe ff6d 	bl	8002178 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe ff69 	bl	8002178 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e05c      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x416>
 80032c0:	e054      	b.n	800336c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_RCC_OscConfig+0x478>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe ff56 	bl	8002178 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe ff52 	bl	8002178 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e045      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_OscConfig+0x470>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x444>
 80032ee:	e03d      	b.n	800336c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e038      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
 80032fc:	40023800 	.word	0x40023800
 8003300:	40007000 	.word	0x40007000
 8003304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x4ec>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d028      	beq.n	8003368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d121      	bne.n	8003368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d11a      	bne.n	8003368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003340:	4293      	cmp	r3, r2
 8003342:	d111      	bne.n	8003368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	3b01      	subs	r3, #1
 8003352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d107      	bne.n	8003368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0cc      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b68      	ldr	r3, [pc, #416]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d90c      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b65      	ldr	r3, [pc, #404]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0b8      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	494d      	ldr	r1, [pc, #308]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d044      	beq.n	800349c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d119      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e07f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d003      	beq.n	800343a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003436:	2b03      	cmp	r3, #3
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e06f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e067      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 0203 	bic.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4934      	ldr	r1, [pc, #208]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346c:	f7fe fe84 	bl	8002178 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fe fe80 	bl	8002178 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e04f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 020c 	and.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d1eb      	bne.n	8003474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d20c      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b22      	ldr	r3, [pc, #136]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e032      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4916      	ldr	r1, [pc, #88]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	490e      	ldr	r1, [pc, #56]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003502:	f000 f821 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003506:	4602      	mov	r2, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	490a      	ldr	r1, [pc, #40]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	5ccb      	ldrb	r3, [r1, r3]
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fde4 	bl	80020f0 <HAL_InitTick>

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023c00 	.word	0x40023c00
 8003538:	40023800 	.word	0x40023800
 800353c:	08006150 	.word	0x08006150
 8003540:	20000028 	.word	0x20000028
 8003544:	2000002c 	.word	0x2000002c

08003548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800354c:	b090      	sub	sp, #64	; 0x40
 800354e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
 8003554:	2300      	movs	r3, #0
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	2300      	movs	r3, #0
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d00d      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x40>
 800356c:	2b08      	cmp	r3, #8
 800356e:	f200 80a1 	bhi.w	80036b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x34>
 8003576:	2b04      	cmp	r3, #4
 8003578:	d003      	beq.n	8003582 <HAL_RCC_GetSysClockFreq+0x3a>
 800357a:	e09b      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_GetSysClockFreq+0x184>)
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003580:	e09b      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003582:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003586:	e098      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003588:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003592:	4b4d      	ldr	r3, [pc, #308]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d028      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359e:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	2200      	movs	r2, #0
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	627a      	str	r2, [r7, #36]	; 0x24
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035b0:	2100      	movs	r1, #0
 80035b2:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035b4:	fb03 f201 	mul.w	r2, r3, r1
 80035b8:	2300      	movs	r3, #0
 80035ba:	fb00 f303 	mul.w	r3, r0, r3
 80035be:	4413      	add	r3, r2
 80035c0:	4a43      	ldr	r2, [pc, #268]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035c2:	fba0 1202 	umull	r1, r2, r0, r2
 80035c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035c8:	460a      	mov	r2, r1
 80035ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80035cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ce:	4413      	add	r3, r2
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d4:	2200      	movs	r2, #0
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	61fa      	str	r2, [r7, #28]
 80035da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035e2:	f7fc fe55 	bl	8000290 <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4613      	mov	r3, r2
 80035ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ee:	e053      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f0:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	2200      	movs	r2, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	617a      	str	r2, [r7, #20]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003602:	f04f 0b00 	mov.w	fp, #0
 8003606:	4652      	mov	r2, sl
 8003608:	465b      	mov	r3, fp
 800360a:	f04f 0000 	mov.w	r0, #0
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	0159      	lsls	r1, r3, #5
 8003614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003618:	0150      	lsls	r0, r2, #5
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	ebb2 080a 	subs.w	r8, r2, sl
 8003622:	eb63 090b 	sbc.w	r9, r3, fp
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003632:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003636:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800363a:	ebb2 0408 	subs.w	r4, r2, r8
 800363e:	eb63 0509 	sbc.w	r5, r3, r9
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	00eb      	lsls	r3, r5, #3
 800364c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003650:	00e2      	lsls	r2, r4, #3
 8003652:	4614      	mov	r4, r2
 8003654:	461d      	mov	r5, r3
 8003656:	eb14 030a 	adds.w	r3, r4, sl
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	eb45 030b 	adc.w	r3, r5, fp
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800366e:	4629      	mov	r1, r5
 8003670:	028b      	lsls	r3, r1, #10
 8003672:	4621      	mov	r1, r4
 8003674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003678:	4621      	mov	r1, r4
 800367a:	028a      	lsls	r2, r1, #10
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	2200      	movs	r2, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	60fa      	str	r2, [r7, #12]
 8003688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800368c:	f7fc fe00 	bl	8000290 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	3301      	adds	r3, #1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036b2:	e002      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetSysClockFreq+0x184>)
 80036b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3740      	adds	r7, #64	; 0x40
 80036c0:	46bd      	mov	sp, r7
 80036c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	016e3600 	.word	0x016e3600

080036d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d038      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036fc:	4b68      	ldr	r3, [pc, #416]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003702:	f7fe fd39 	bl	8002178 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003708:	e008      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800370a:	f7fe fd35 	bl	8002178 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0bd      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800371c:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	071b      	lsls	r3, r3, #28
 800373a:	495a      	ldr	r1, [pc, #360]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003742:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003748:	f7fe fd16 	bl	8002178 <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003750:	f7fe fd12 	bl	8002178 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e09a      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003762:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8083 	beq.w	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	4b48      	ldr	r3, [pc, #288]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	4a47      	ldr	r2, [pc, #284]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378a:	6413      	str	r3, [r2, #64]	; 0x40
 800378c:	4b45      	ldr	r3, [pc, #276]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003798:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a42      	ldr	r2, [pc, #264]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800379e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037a4:	f7fe fce8 	bl	8002178 <HAL_GetTick>
 80037a8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037ac:	f7fe fce4 	bl	8002178 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e06c      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037be:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ca:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d02f      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d028      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037f2:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037fe:	4a29      	ldr	r2, [pc, #164]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d114      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe fcb2 	bl	8002178 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe fcae 	bl	8002178 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e034      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0ee      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003846:	d10d      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385c:	4911      	ldr	r1, [pc, #68]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
 8003862:	e005      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800386e:	6093      	str	r3, [r2, #8]
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	4909      	ldr	r1, [pc, #36]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7d1a      	ldrb	r2, [r3, #20]
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003894:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	42470068 	.word	0x42470068
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40007000 	.word	0x40007000
 80038ac:	42470e40 	.word	0x42470e40
 80038b0:	424711e0 	.word	0x424711e0

080038b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e066      	b.n	8003998 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7f5b      	ldrb	r3, [r3, #29]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fe f88a 	bl	80019f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	22ca      	movs	r2, #202	; 0xca
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2253      	movs	r2, #83	; 0x53
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa45 	bl	8003d86 <RTC_EnterInitMode>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d12c      	bne.n	8003960 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003918:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6899      	ldr	r1, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68d2      	ldr	r2, [r2, #12]
 8003940:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6919      	ldr	r1, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	041a      	lsls	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa4c 	bl	8003df4 <RTC_ExitInitMode>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d113      	bne.n	800398e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	22ff      	movs	r2, #255	; 0xff
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003996:	7bfb      	ldrb	r3, [r7, #15]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	7f1b      	ldrb	r3, [r3, #28]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_RTC_SetTime+0x1c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e087      	b.n	8003acc <HAL_RTC_SetTime+0x12c>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2202      	movs	r2, #2
 80039c6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d126      	bne.n	8003a1c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2200      	movs	r2, #0
 80039e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fa29 	bl	8003e3e <RTC_ByteToBcd2>
 80039ec:	4603      	mov	r3, r0
 80039ee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fa22 	bl	8003e3e <RTC_ByteToBcd2>
 80039fa:	4603      	mov	r3, r0
 80039fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039fe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	789b      	ldrb	r3, [r3, #2]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fa1a 	bl	8003e3e <RTC_ByteToBcd2>
 8003a0a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a0c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	78db      	ldrb	r3, [r3, #3]
 8003a14:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	e018      	b.n	8003a4e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a3c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a42:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	78db      	ldrb	r3, [r3, #3]
 8003a48:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	22ca      	movs	r2, #202	; 0xca
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2253      	movs	r2, #83	; 0x53
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f991 	bl	8003d86 <RTC_EnterInitMode>
 8003a64:	4603      	mov	r3, r0
 8003a66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d120      	bne.n	8003ab0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a7c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f9a4 	bl	8003df4 <RTC_ExitInitMode>
 8003aac:	4603      	mov	r3, r0
 8003aae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	771a      	strb	r2, [r3, #28]

  return status;
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd90      	pop	{r4, r7, pc}

08003ad4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003b06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	0d9b      	lsrs	r3, r3, #22
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11a      	bne.n	8003b86 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 f98f 	bl	8003e78 <RTC_Bcd2ToByte>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f986 	bl	8003e78 <RTC_Bcd2ToByte>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	789b      	ldrb	r3, [r3, #2]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f97d 	bl	8003e78 <RTC_Bcd2ToByte>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	7f1b      	ldrb	r3, [r3, #28]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_RTC_SetDate+0x1c>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e071      	b.n	8003c90 <HAL_RTC_SetDate+0x100>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10e      	bne.n	8003bdc <HAL_RTC_SetDate+0x4c>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	f023 0310 	bic.w	r3, r3, #16
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	330a      	adds	r3, #10
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11c      	bne.n	8003c1c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f929 	bl	8003e3e <RTC_ByteToBcd2>
 8003bec:	4603      	mov	r3, r0
 8003bee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 f922 	bl	8003e3e <RTC_ByteToBcd2>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bfe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	789b      	ldrb	r3, [r3, #2]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f91a 	bl	8003e3e <RTC_ByteToBcd2>
 8003c0a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c0c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e00e      	b.n	8003c3a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	78db      	ldrb	r3, [r3, #3]
 8003c20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c28:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	22ca      	movs	r2, #202	; 0xca
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2253      	movs	r2, #83	; 0x53
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f89b 	bl	8003d86 <RTC_EnterInitMode>
 8003c50:	4603      	mov	r3, r0
 8003c52:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c68:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f8c2 	bl	8003df4 <RTC_ExitInitMode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	22ff      	movs	r2, #255	; 0xff
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	771a      	strb	r2, [r3, #28]

  return status;
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd90      	pop	{r4, r7, pc}

08003c98 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cb2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	0c1b      	lsrs	r3, r3, #16
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	0b5b      	lsrs	r3, r3, #13
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11a      	bne.n	8003d2c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	78db      	ldrb	r3, [r3, #3]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f8bc 	bl	8003e78 <RTC_Bcd2ToByte>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f8b3 	bl	8003e78 <RTC_Bcd2ToByte>
 8003d12:	4603      	mov	r3, r0
 8003d14:	461a      	mov	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	789b      	ldrb	r3, [r3, #2]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f8aa 	bl	8003e78 <RTC_Bcd2ToByte>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d50:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d52:	f7fe fa11 	bl	8002178 <HAL_GetTick>
 8003d56:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d58:	e009      	b.n	8003d6e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d5a:	f7fe fa0d 	bl	8002178 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d68:	d901      	bls.n	8003d6e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e007      	b.n	8003d7e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ee      	beq.n	8003d5a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d122      	bne.n	8003dea <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003db2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003db4:	f7fe f9e0 	bl	8002178 <HAL_GetTick>
 8003db8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dba:	e00c      	b.n	8003dd6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dbc:	f7fe f9dc 	bl	8002178 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dca:	d904      	bls.n	8003dd6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <RTC_EnterInitMode+0x64>
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d1e8      	bne.n	8003dbc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e0e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff89 	bl	8003d36 <HAL_RTC_WaitForSynchro>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003e4c:	e005      	b.n	8003e5a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	3301      	adds	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	3b0a      	subs	r3, #10
 8003e58:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	d8f6      	bhi.n	8003e4e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b2db      	uxtb	r3, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	0092      	lsls	r2, r2, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	b2db      	uxtb	r3, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e041      	b.n	8003f46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fdb8 	bl	8001a4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f000 feb0 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e022      	b.n	8003fc2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d109      	bne.n	8003f96 <HAL_TIM_PWM_Start_DMA+0x46>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	bf0c      	ite	eq
 8003f8e:	2301      	moveq	r3, #1
 8003f90:	2300      	movne	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	e015      	b.n	8003fc2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d109      	bne.n	8003fb0 <HAL_TIM_PWM_Start_DMA+0x60>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e008      	b.n	8003fc2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e15d      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e022      	b.n	800402a <HAL_TIM_PWM_Start_DMA+0xda>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d109      	bne.n	8003ffe <HAL_TIM_PWM_Start_DMA+0xae>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e015      	b.n	800402a <HAL_TIM_PWM_Start_DMA+0xda>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d109      	bne.n	8004018 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e008      	b.n	800402a <HAL_TIM_PWM_Start_DMA+0xda>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d024      	beq.n	8004078 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start_DMA+0xee>
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e123      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	e016      	b.n	800407c <HAL_TIM_PWM_Start_DMA+0x12c>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405c:	e00e      	b.n	800407c <HAL_TIM_PWM_Start_DMA+0x12c>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406c:	e006      	b.n	800407c <HAL_TIM_PWM_Start_DMA+0x12c>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2202      	movs	r2, #2
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004076:	e001      	b.n	800407c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e104      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b0c      	cmp	r3, #12
 8004080:	f200 80ae 	bhi.w	80041e0 <HAL_TIM_PWM_Start_DMA+0x290>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080041e1 	.word	0x080041e1
 8004094:	080041e1 	.word	0x080041e1
 8004098:	080041e1 	.word	0x080041e1
 800409c:	08004109 	.word	0x08004109
 80040a0:	080041e1 	.word	0x080041e1
 80040a4:	080041e1 	.word	0x080041e1
 80040a8:	080041e1 	.word	0x080041e1
 80040ac:	08004151 	.word	0x08004151
 80040b0:	080041e1 	.word	0x080041e1
 80040b4:	080041e1 	.word	0x080041e1
 80040b8:	080041e1 	.word	0x080041e1
 80040bc:	08004199 	.word	0x08004199
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	4a72      	ldr	r2, [pc, #456]	; (8004290 <HAL_TIM_PWM_Start_DMA+0x340>)
 80040c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	4a71      	ldr	r2, [pc, #452]	; (8004294 <HAL_TIM_PWM_Start_DMA+0x344>)
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	4a70      	ldr	r2, [pc, #448]	; (8004298 <HAL_TIM_PWM_Start_DMA+0x348>)
 80040d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3334      	adds	r3, #52	; 0x34
 80040e4:	461a      	mov	r2, r3
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	f7fe fa36 	bl	8002558 <HAL_DMA_Start_IT>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0c7      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004104:	60da      	str	r2, [r3, #12]
      break;
 8004106:	e06e      	b.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	4a60      	ldr	r2, [pc, #384]	; (8004290 <HAL_TIM_PWM_Start_DMA+0x340>)
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	4a5f      	ldr	r2, [pc, #380]	; (8004294 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004116:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	4a5e      	ldr	r2, [pc, #376]	; (8004298 <HAL_TIM_PWM_Start_DMA+0x348>)
 800411e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3338      	adds	r3, #56	; 0x38
 800412c:	461a      	mov	r2, r3
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	f7fe fa12 	bl	8002558 <HAL_DMA_Start_IT>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0a3      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800414c:	60da      	str	r2, [r3, #12]
      break;
 800414e:	e04a      	b.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	4a4e      	ldr	r2, [pc, #312]	; (8004290 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a4d      	ldr	r2, [pc, #308]	; (8004294 <HAL_TIM_PWM_Start_DMA+0x344>)
 800415e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4a4c      	ldr	r2, [pc, #304]	; (8004298 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004166:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	333c      	adds	r3, #60	; 0x3c
 8004174:	461a      	mov	r2, r3
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	f7fe f9ee 	bl	8002558 <HAL_DMA_Start_IT>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07f      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004194:	60da      	str	r2, [r3, #12]
      break;
 8004196:	e026      	b.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	4a3c      	ldr	r2, [pc, #240]	; (8004290 <HAL_TIM_PWM_Start_DMA+0x340>)
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	4a3b      	ldr	r2, [pc, #236]	; (8004294 <HAL_TIM_PWM_Start_DMA+0x344>)
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <HAL_TIM_PWM_Start_DMA+0x348>)
 80041ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3340      	adds	r3, #64	; 0x40
 80041bc:	461a      	mov	r2, r3
 80041be:	887b      	ldrh	r3, [r7, #2]
 80041c0:	f7fe f9ca 	bl	8002558 <HAL_DMA_Start_IT>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e05b      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041dc:	60da      	str	r2, [r3, #12]
      break;
 80041de:	e002      	b.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	75fb      	strb	r3, [r7, #23]
      break;
 80041e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d14b      	bne.n	8004284 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 ff39 	bl	800506c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a27      	ldr	r2, [pc, #156]	; (800429c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d107      	bne.n	8004214 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_TIM_PWM_Start_DMA+0x34c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d018      	beq.n	8004250 <HAL_TIM_PWM_Start_DMA+0x300>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d013      	beq.n	8004250 <HAL_TIM_PWM_Start_DMA+0x300>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <HAL_TIM_PWM_Start_DMA+0x300>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_TIM_PWM_Start_DMA+0x300>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_TIM_PWM_Start_DMA+0x300>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_TIM_PWM_Start_DMA+0x35c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d111      	bne.n	8004274 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b06      	cmp	r3, #6
 8004260:	d010      	beq.n	8004284 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004272:	e007      	b.n	8004284 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	08004b43 	.word	0x08004b43
 8004294:	08004beb 	.word	0x08004beb
 8004298:	08004ab1 	.word	0x08004ab1
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40014000 	.word	0x40014000

080042b0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d855      	bhi.n	8004370 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004371 	.word	0x08004371
 80042d4:	08004371 	.word	0x08004371
 80042d8:	08004371 	.word	0x08004371
 80042dc:	0800431d 	.word	0x0800431d
 80042e0:	08004371 	.word	0x08004371
 80042e4:	08004371 	.word	0x08004371
 80042e8:	08004371 	.word	0x08004371
 80042ec:	08004339 	.word	0x08004339
 80042f0:	08004371 	.word	0x08004371
 80042f4:	08004371 	.word	0x08004371
 80042f8:	08004371 	.word	0x08004371
 80042fc:	08004355 	.word	0x08004355
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800430e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe f977 	bl	8002608 <HAL_DMA_Abort_IT>
      break;
 800431a:	e02c      	b.n	8004376 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe f969 	bl	8002608 <HAL_DMA_Abort_IT>
      break;
 8004336:	e01e      	b.n	8004376 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004346:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe f95b 	bl	8002608 <HAL_DMA_Abort_IT>
      break;
 8004352:	e010      	b.n	8004376 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004362:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe f94d 	bl	8002608 <HAL_DMA_Abort_IT>
      break;
 800436e:	e002      	b.n	8004376 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
      break;
 8004374:	bf00      	nop
  }

  if (status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d157      	bne.n	800442c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	6839      	ldr	r1, [r7, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe71 	bl	800506c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2a      	ldr	r2, [pc, #168]	; (8004438 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d117      	bne.n	80043c4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a1a      	ldr	r2, [r3, #32]
 800439a:	f241 1311 	movw	r3, #4369	; 0x1111
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	f240 4344 	movw	r3, #1092	; 0x444
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a1a      	ldr	r2, [r3, #32]
 80043ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	f240 4344 	movw	r3, #1092	; 0x444
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_TIM_PWM_Stop_DMA+0x154>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004402:	e013      	b.n	800442c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b04      	cmp	r3, #4
 8004408:	d104      	bne.n	8004414 <HAL_TIM_PWM_Stop_DMA+0x164>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004412:	e00b      	b.n	800442c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b08      	cmp	r3, #8
 8004418:	d104      	bne.n	8004424 <HAL_TIM_PWM_Stop_DMA+0x174>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004422:	e003      	b.n	800442c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000

0800443c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e097      	b.n	8004580 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fd fb65 	bl	8001b34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004480:	f023 0307 	bic.w	r3, r3, #7
 8004484:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f000 fbdf 	bl	8004c54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	4313      	orrs	r3, r2
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044dc:	f023 030c 	bic.w	r3, r3, #12
 80044e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	4313      	orrs	r3, r2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	011a      	lsls	r2, r3, #4
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	031b      	lsls	r3, r3, #12
 800450c:	4313      	orrs	r3, r2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4313      	orrs	r3, r2
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004598:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d110      	bne.n	80045da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d102      	bne.n	80045c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045be:	7b7b      	ldrb	r3, [r7, #13]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e069      	b.n	800469c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	e031      	b.n	800463e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d110      	bne.n	8004602 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045e0:	7bbb      	ldrb	r3, [r7, #14]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045e6:	7b3b      	ldrb	r3, [r7, #12]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d001      	beq.n	80045f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e055      	b.n	800469c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004600:	e01d      	b.n	800463e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d108      	bne.n	800461a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004608:	7bbb      	ldrb	r3, [r7, #14]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800460e:	7b7b      	ldrb	r3, [r7, #13]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d102      	bne.n	800461a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004614:	7b3b      	ldrb	r3, [r7, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e03e      	b.n	800469c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_TIM_Encoder_Start+0xc4>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d008      	beq.n	800465c <HAL_TIM_Encoder_Start+0xd4>
 800464a:	e00f      	b.n	800466c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2201      	movs	r2, #1
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fd09 	bl	800506c <TIM_CCxChannelCmd>
      break;
 800465a:	e016      	b.n	800468a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	2104      	movs	r1, #4
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fd01 	bl	800506c <TIM_CCxChannelCmd>
      break;
 800466a:	e00e      	b.n	800468a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2201      	movs	r2, #1
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fcf9 	bl	800506c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2201      	movs	r2, #1
 8004680:	2104      	movs	r1, #4
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fcf2 	bl	800506c <TIM_CCxChannelCmd>
      break;
 8004688:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d122      	bne.n	8004700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d11b      	bne.n	8004700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0202 	mvn.w	r2, #2
 80046d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9ba 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9ac 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fc fde3 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0204 	mvn.w	r2, #4
 8004724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f990 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f982 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fc fdb9 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b08      	cmp	r3, #8
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0208 	mvn.w	r2, #8
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f966 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f958 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fc fd8f 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0210 	mvn.w	r2, #16
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2208      	movs	r2, #8
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f93c 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f92e 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fc fd65 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10e      	bne.n	8004828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d107      	bne.n	8004828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0201 	mvn.w	r2, #1
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f908 	bl	8004a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d10e      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d107      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fcfc 	bl	800524c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f904 	bl	8004a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b20      	cmp	r3, #32
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b20      	cmp	r3, #32
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0220 	mvn.w	r2, #32
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fcc6 	bl	8005238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e0ae      	b.n	8004a30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b0c      	cmp	r3, #12
 80048de:	f200 809f 	bhi.w	8004a20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048e2:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	0800491d 	.word	0x0800491d
 80048ec:	08004a21 	.word	0x08004a21
 80048f0:	08004a21 	.word	0x08004a21
 80048f4:	08004a21 	.word	0x08004a21
 80048f8:	0800495d 	.word	0x0800495d
 80048fc:	08004a21 	.word	0x08004a21
 8004900:	08004a21 	.word	0x08004a21
 8004904:	08004a21 	.word	0x08004a21
 8004908:	0800499f 	.word	0x0800499f
 800490c:	08004a21 	.word	0x08004a21
 8004910:	08004a21 	.word	0x08004a21
 8004914:	08004a21 	.word	0x08004a21
 8004918:	080049df 	.word	0x080049df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fa16 	bl	8004d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0208 	orr.w	r2, r2, #8
 8004936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0204 	bic.w	r2, r2, #4
 8004946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6999      	ldr	r1, [r3, #24]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	619a      	str	r2, [r3, #24]
      break;
 800495a:	e064      	b.n	8004a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fa5c 	bl	8004e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6999      	ldr	r1, [r3, #24]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	619a      	str	r2, [r3, #24]
      break;
 800499c:	e043      	b.n	8004a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 faa7 	bl	8004ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0208 	orr.w	r2, r2, #8
 80049b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0204 	bic.w	r2, r2, #4
 80049c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69d9      	ldr	r1, [r3, #28]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	61da      	str	r2, [r3, #28]
      break;
 80049dc:	e023      	b.n	8004a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 faf1 	bl	8004fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69d9      	ldr	r1, [r3, #28]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	021a      	lsls	r2, r3, #8
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	61da      	str	r2, [r3, #28]
      break;
 8004a1e:	e002      	b.n	8004a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	75fb      	strb	r3, [r7, #23]
      break;
 8004a24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d107      	bne.n	8004ad8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad6:	e02a      	b.n	8004b2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d107      	bne.n	8004af2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af0:	e01d      	b.n	8004b2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d107      	bne.n	8004b0c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2204      	movs	r2, #4
 8004b00:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b0a:	e010      	b.n	8004b2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d107      	bne.n	8004b26 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2208      	movs	r2, #8
 8004b1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b24:	e003      	b.n	8004b2e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff ffb4 	bl	8004a9c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	771a      	strb	r2, [r3, #28]
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d10b      	bne.n	8004b72 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d136      	bne.n	8004bd6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b70:	e031      	b.n	8004bd6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d10b      	bne.n	8004b94 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d125      	bne.n	8004bd6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b92:	e020      	b.n	8004bd6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d10b      	bne.n	8004bb6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb4:	e00f      	b.n	8004bd6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d10a      	bne.n	8004bd6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7fc fb72 	bl	80012c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d103      	bne.n	8004c0a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	771a      	strb	r2, [r3, #28]
 8004c08:	e019      	b.n	8004c3e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d103      	bne.n	8004c1c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2202      	movs	r2, #2
 8004c18:	771a      	strb	r2, [r3, #28]
 8004c1a:	e010      	b.n	8004c3e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d103      	bne.n	8004c2e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	771a      	strb	r2, [r3, #28]
 8004c2c:	e007      	b.n	8004c3e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d102      	bne.n	8004c3e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff ff18 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	771a      	strb	r2, [r3, #28]
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a34      	ldr	r2, [pc, #208]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00f      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a31      	ldr	r2, [pc, #196]	; (8004d3c <TIM_Base_SetConfig+0xe8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a30      	ldr	r2, [pc, #192]	; (8004d40 <TIM_Base_SetConfig+0xec>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a2f      	ldr	r2, [pc, #188]	; (8004d44 <TIM_Base_SetConfig+0xf0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01b      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cac:	d017      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <TIM_Base_SetConfig+0xe8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <TIM_Base_SetConfig+0xec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00f      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a20      	ldr	r2, [pc, #128]	; (8004d44 <TIM_Base_SetConfig+0xf0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <TIM_Base_SetConfig+0xf4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <TIM_Base_SetConfig+0xf8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <TIM_Base_SetConfig+0xfc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d108      	bne.n	8004cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <TIM_Base_SetConfig+0xe4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d103      	bne.n	8004d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	615a      	str	r2, [r3, #20]
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800

08004d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0303 	bic.w	r3, r3, #3
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f023 0302 	bic.w	r3, r3, #2
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <TIM_OC1_SetConfig+0xc8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10c      	bne.n	8004dca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0308 	bic.w	r3, r3, #8
 8004db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 0304 	bic.w	r3, r3, #4
 8004dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <TIM_OC1_SetConfig+0xc8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40010000 	.word	0x40010000

08004e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f023 0210 	bic.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0320 	bic.w	r3, r3, #32
 8004e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <TIM_OC2_SetConfig+0xd4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d10d      	bne.n	8004e9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <TIM_OC2_SetConfig+0xd4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d113      	bne.n	8004ecc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000

08004ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <TIM_OC3_SetConfig+0xd0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10d      	bne.n	8004f72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <TIM_OC3_SetConfig+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d113      	bne.n	8004fa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40010000 	.word	0x40010000

08004fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	031b      	lsls	r3, r3, #12
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <TIM_OC4_SetConfig+0x9c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d109      	bne.n	8005040 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	019b      	lsls	r3, r3, #6
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000

0800506c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2201      	movs	r2, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e050      	b.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d018      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d013      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a16      	ldr	r2, [pc, #88]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10c      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4313      	orrs	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40014000 	.word	0x40014000

08005194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e03d      	b.n	800522c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <Set_LED>:

uint8_t LED_Data[NUM_LEDS][3]; // color data green / red / blue
volatile int datasentflag;


void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
    if(LEDnum >= 0 && LEDnum < NUM_LEDS) {
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	db22      	blt.n	80052ba <Set_LED+0x5a>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b8c      	cmp	r3, #140	; 0x8c
 8005278:	dc1f      	bgt.n	80052ba <Set_LED+0x5a>
        LED_Data[LEDnum][0] = Green;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	b2d8      	uxtb	r0, r3
 800527e:	4912      	ldr	r1, [pc, #72]	; (80052c8 <Set_LED+0x68>)
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4613      	mov	r3, r2
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	4413      	add	r3, r2
 8005288:	440b      	add	r3, r1
 800528a:	4602      	mov	r2, r0
 800528c:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	b2d8      	uxtb	r0, r3
 8005292:	490d      	ldr	r1, [pc, #52]	; (80052c8 <Set_LED+0x68>)
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	440b      	add	r3, r1
 800529e:	3301      	adds	r3, #1
 80052a0:	4602      	mov	r2, r0
 80052a2:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	b2d8      	uxtb	r0, r3
 80052a8:	4907      	ldr	r1, [pc, #28]	; (80052c8 <Set_LED+0x68>)
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4613      	mov	r3, r2
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4413      	add	r3, r2
 80052b2:	440b      	add	r3, r1
 80052b4:	3302      	adds	r3, #2
 80052b6:	4602      	mov	r2, r0
 80052b8:	701a      	strb	r2, [r3, #0]
    }
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000310 	.word	0x20000310

080052cc <Set_LED_Hex>:

void Set_LED_Hex(int LEDnum, uint32_t color) {
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
    if(LEDnum >= 0 && LEDnum < NUM_LEDS) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	db24      	blt.n	8005326 <Set_LED_Hex+0x5a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b8c      	cmp	r3, #140	; 0x8c
 80052e0:	dc21      	bgt.n	8005326 <Set_LED_Hex+0x5a>
        uint8_t Red = (color >> 16) & 0xFF;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	73fb      	strb	r3, [r7, #15]
        uint8_t Green = (color >> 8) & 0xFF;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	73bb      	strb	r3, [r7, #14]
        uint8_t Blue = color & 0xFF;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	737b      	strb	r3, [r7, #13]
        LED_Data[LEDnum][0] = Green;
 80052f2:	4910      	ldr	r1, [pc, #64]	; (8005334 <Set_LED_Hex+0x68>)
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	440b      	add	r3, r1
 80052fe:	7bba      	ldrb	r2, [r7, #14]
 8005300:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 8005302:	490c      	ldr	r1, [pc, #48]	; (8005334 <Set_LED_Hex+0x68>)
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	4413      	add	r3, r2
 800530c:	440b      	add	r3, r1
 800530e:	3301      	adds	r3, #1
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 8005314:	4907      	ldr	r1, [pc, #28]	; (8005334 <Set_LED_Hex+0x68>)
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4413      	add	r3, r2
 800531e:	440b      	add	r3, r1
 8005320:	3302      	adds	r3, #2
 8005322:	7b7a      	ldrb	r2, [r7, #13]
 8005324:	701a      	strb	r2, [r3, #0]
    }
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000310 	.word	0x20000310

08005338 <WS2812B_Send>:

extern TIM_HandleTypeDef htim1;

uint16_t pwmData[(24 * NUM_LEDS) + RESET_SLOTS]; // Each LED requires 24 bits.

void WS2812B_Send() { // Changed to pointer to match typical HAL use.
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
    uint32_t indx = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
    uint32_t data;

//     Shifting colors into 24-bit buffer
    for (int i = 0; i < NUM_LEDS; i++) {
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	e03e      	b.n	80053c6 <WS2812B_Send+0x8e>

        data = ((LED_Data[i][0] << 16) | (LED_Data[i][1] << 8) | (LED_Data[i][2]));
 8005348:	4932      	ldr	r1, [pc, #200]	; (8005414 <WS2812B_Send+0xdc>)
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4613      	mov	r3, r2
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	4413      	add	r3, r2
 8005352:	440b      	add	r3, r1
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	0419      	lsls	r1, r3, #16
 8005358:	482e      	ldr	r0, [pc, #184]	; (8005414 <WS2812B_Send+0xdc>)
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4613      	mov	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4413      	add	r3, r2
 8005362:	4403      	add	r3, r0
 8005364:	3301      	adds	r3, #1
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	4319      	orrs	r1, r3
 800536c:	4829      	ldr	r0, [pc, #164]	; (8005414 <WS2812B_Send+0xdc>)
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	4403      	add	r3, r0
 8005378:	3302      	adds	r3, #2
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	430b      	orrs	r3, r1
 800537e:	607b      	str	r3, [r7, #4]

        for (int j = 23; j >= 0; j--) {
 8005380:	2317      	movs	r3, #23
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	e019      	b.n	80053ba <WS2812B_Send+0x82>
            if (data & (1 << j))
 8005386:	2201      	movs	r2, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <WS2812B_Send+0x6c>
                pwmData[indx] = ONE; // Use defined duty cycle for ONE
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <WS2812B_Send+0xe0>)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2136      	movs	r1, #54	; 0x36
 800539e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80053a2:	e004      	b.n	80053ae <WS2812B_Send+0x76>
            else
                pwmData[indx] = ZERO; // Use defined duty cycle for ZERO
 80053a4:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <WS2812B_Send+0xe0>)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	211b      	movs	r1, #27
 80053aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            indx++;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	3301      	adds	r3, #1
 80053b2:	617b      	str	r3, [r7, #20]
        for (int j = 23; j >= 0; j--) {
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	dae2      	bge.n	8005386 <WS2812B_Send+0x4e>
    for (int i = 0; i < NUM_LEDS; i++) {
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	3301      	adds	r3, #1
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b8c      	cmp	r3, #140	; 0x8c
 80053ca:	ddbd      	ble.n	8005348 <WS2812B_Send+0x10>
        }
    }

    // Create the reset signal by putting low values (0) at the end of pwmData
    for (int j = 0; j < RESET_SLOTS; j++) {
 80053cc:	2300      	movs	r3, #0
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	e009      	b.n	80053e6 <WS2812B_Send+0xae>
        pwmData[indx++] = 0;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	617a      	str	r2, [r7, #20]
 80053d8:	4a0f      	ldr	r2, [pc, #60]	; (8005418 <WS2812B_Send+0xe0>)
 80053da:	2100      	movs	r1, #0
 80053dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int j = 0; j < RESET_SLOTS; j++) {
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b31      	cmp	r3, #49	; 0x31
 80053ea:	ddf2      	ble.n	80053d2 <WS2812B_Send+0x9a>
    }


    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint16_t*)pwmData, indx);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4a09      	ldr	r2, [pc, #36]	; (8005418 <WS2812B_Send+0xe0>)
 80053f2:	2100      	movs	r1, #0
 80053f4:	4809      	ldr	r0, [pc, #36]	; (800541c <WS2812B_Send+0xe4>)
 80053f6:	f7fe fdab 	bl	8003f50 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 80053fa:	bf00      	nop
 80053fc:	4b08      	ldr	r3, [pc, #32]	; (8005420 <WS2812B_Send+0xe8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0fb      	beq.n	80053fc <WS2812B_Send+0xc4>
	datasentflag = 0;
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <WS2812B_Send+0xe8>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]


}
 800540a:	bf00      	nop
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000310 	.word	0x20000310
 8005418:	200004bc 	.word	0x200004bc
 800541c:	20000158 	.word	0x20000158
 8005420:	200004b8 	.word	0x200004b8

08005424 <__errno>:
 8005424:	4b01      	ldr	r3, [pc, #4]	; (800542c <__errno+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20000034 	.word	0x20000034

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	4d0d      	ldr	r5, [pc, #52]	; (8005468 <__libc_init_array+0x38>)
 8005434:	4c0d      	ldr	r4, [pc, #52]	; (800546c <__libc_init_array+0x3c>)
 8005436:	1b64      	subs	r4, r4, r5
 8005438:	10a4      	asrs	r4, r4, #2
 800543a:	2600      	movs	r6, #0
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	4d0b      	ldr	r5, [pc, #44]	; (8005470 <__libc_init_array+0x40>)
 8005442:	4c0c      	ldr	r4, [pc, #48]	; (8005474 <__libc_init_array+0x44>)
 8005444:	f000 fcae 	bl	8005da4 <_init>
 8005448:	1b64      	subs	r4, r4, r5
 800544a:	10a4      	asrs	r4, r4, #2
 800544c:	2600      	movs	r6, #0
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	f855 3b04 	ldr.w	r3, [r5], #4
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	08006300 	.word	0x08006300
 800546c:	08006300 	.word	0x08006300
 8005470:	08006300 	.word	0x08006300
 8005474:	08006304 	.word	0x08006304

08005478 <memset>:
 8005478:	4402      	add	r2, r0
 800547a:	4603      	mov	r3, r0
 800547c:	4293      	cmp	r3, r2
 800547e:	d100      	bne.n	8005482 <memset+0xa>
 8005480:	4770      	bx	lr
 8005482:	f803 1b01 	strb.w	r1, [r3], #1
 8005486:	e7f9      	b.n	800547c <memset+0x4>

08005488 <sniprintf>:
 8005488:	b40c      	push	{r2, r3}
 800548a:	b530      	push	{r4, r5, lr}
 800548c:	4b17      	ldr	r3, [pc, #92]	; (80054ec <sniprintf+0x64>)
 800548e:	1e0c      	subs	r4, r1, #0
 8005490:	681d      	ldr	r5, [r3, #0]
 8005492:	b09d      	sub	sp, #116	; 0x74
 8005494:	da08      	bge.n	80054a8 <sniprintf+0x20>
 8005496:	238b      	movs	r3, #139	; 0x8b
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	b01d      	add	sp, #116	; 0x74
 80054a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054a4:	b002      	add	sp, #8
 80054a6:	4770      	bx	lr
 80054a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80054ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80054b0:	bf14      	ite	ne
 80054b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80054b6:	4623      	moveq	r3, r4
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	9307      	str	r3, [sp, #28]
 80054bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054c0:	9002      	str	r0, [sp, #8]
 80054c2:	9006      	str	r0, [sp, #24]
 80054c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80054c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054ca:	ab21      	add	r3, sp, #132	; 0x84
 80054cc:	a902      	add	r1, sp, #8
 80054ce:	4628      	mov	r0, r5
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	f000 f875 	bl	80055c0 <_svfiprintf_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	bfbc      	itt	lt
 80054da:	238b      	movlt	r3, #139	; 0x8b
 80054dc:	602b      	strlt	r3, [r5, #0]
 80054de:	2c00      	cmp	r4, #0
 80054e0:	d0dd      	beq.n	800549e <sniprintf+0x16>
 80054e2:	9b02      	ldr	r3, [sp, #8]
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e7d9      	b.n	800549e <sniprintf+0x16>
 80054ea:	bf00      	nop
 80054ec:	20000034 	.word	0x20000034

080054f0 <strchr>:
 80054f0:	b2c9      	uxtb	r1, r1
 80054f2:	4603      	mov	r3, r0
 80054f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054f8:	b11a      	cbz	r2, 8005502 <strchr+0x12>
 80054fa:	428a      	cmp	r2, r1
 80054fc:	d1f9      	bne.n	80054f2 <strchr+0x2>
 80054fe:	4618      	mov	r0, r3
 8005500:	4770      	bx	lr
 8005502:	2900      	cmp	r1, #0
 8005504:	bf18      	it	ne
 8005506:	2300      	movne	r3, #0
 8005508:	e7f9      	b.n	80054fe <strchr+0xe>

0800550a <__ssputs_r>:
 800550a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550e:	688e      	ldr	r6, [r1, #8]
 8005510:	429e      	cmp	r6, r3
 8005512:	4682      	mov	sl, r0
 8005514:	460c      	mov	r4, r1
 8005516:	4690      	mov	r8, r2
 8005518:	461f      	mov	r7, r3
 800551a:	d838      	bhi.n	800558e <__ssputs_r+0x84>
 800551c:	898a      	ldrh	r2, [r1, #12]
 800551e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005522:	d032      	beq.n	800558a <__ssputs_r+0x80>
 8005524:	6825      	ldr	r5, [r4, #0]
 8005526:	6909      	ldr	r1, [r1, #16]
 8005528:	eba5 0901 	sub.w	r9, r5, r1
 800552c:	6965      	ldr	r5, [r4, #20]
 800552e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005532:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005536:	3301      	adds	r3, #1
 8005538:	444b      	add	r3, r9
 800553a:	106d      	asrs	r5, r5, #1
 800553c:	429d      	cmp	r5, r3
 800553e:	bf38      	it	cc
 8005540:	461d      	movcc	r5, r3
 8005542:	0553      	lsls	r3, r2, #21
 8005544:	d531      	bpl.n	80055aa <__ssputs_r+0xa0>
 8005546:	4629      	mov	r1, r5
 8005548:	f000 fb62 	bl	8005c10 <_malloc_r>
 800554c:	4606      	mov	r6, r0
 800554e:	b950      	cbnz	r0, 8005566 <__ssputs_r+0x5c>
 8005550:	230c      	movs	r3, #12
 8005552:	f8ca 3000 	str.w	r3, [sl]
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	f04f 30ff 	mov.w	r0, #4294967295
 8005562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005566:	6921      	ldr	r1, [r4, #16]
 8005568:	464a      	mov	r2, r9
 800556a:	f000 fabd 	bl	8005ae8 <memcpy>
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	6126      	str	r6, [r4, #16]
 800557c:	6165      	str	r5, [r4, #20]
 800557e:	444e      	add	r6, r9
 8005580:	eba5 0509 	sub.w	r5, r5, r9
 8005584:	6026      	str	r6, [r4, #0]
 8005586:	60a5      	str	r5, [r4, #8]
 8005588:	463e      	mov	r6, r7
 800558a:	42be      	cmp	r6, r7
 800558c:	d900      	bls.n	8005590 <__ssputs_r+0x86>
 800558e:	463e      	mov	r6, r7
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	4632      	mov	r2, r6
 8005594:	4641      	mov	r1, r8
 8005596:	f000 fab5 	bl	8005b04 <memmove>
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	1b9b      	subs	r3, r3, r6
 800559e:	60a3      	str	r3, [r4, #8]
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	4433      	add	r3, r6
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	2000      	movs	r0, #0
 80055a8:	e7db      	b.n	8005562 <__ssputs_r+0x58>
 80055aa:	462a      	mov	r2, r5
 80055ac:	f000 fba4 	bl	8005cf8 <_realloc_r>
 80055b0:	4606      	mov	r6, r0
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d1e1      	bne.n	800557a <__ssputs_r+0x70>
 80055b6:	6921      	ldr	r1, [r4, #16]
 80055b8:	4650      	mov	r0, sl
 80055ba:	f000 fabd 	bl	8005b38 <_free_r>
 80055be:	e7c7      	b.n	8005550 <__ssputs_r+0x46>

080055c0 <_svfiprintf_r>:
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	4698      	mov	r8, r3
 80055c6:	898b      	ldrh	r3, [r1, #12]
 80055c8:	061b      	lsls	r3, r3, #24
 80055ca:	b09d      	sub	sp, #116	; 0x74
 80055cc:	4607      	mov	r7, r0
 80055ce:	460d      	mov	r5, r1
 80055d0:	4614      	mov	r4, r2
 80055d2:	d50e      	bpl.n	80055f2 <_svfiprintf_r+0x32>
 80055d4:	690b      	ldr	r3, [r1, #16]
 80055d6:	b963      	cbnz	r3, 80055f2 <_svfiprintf_r+0x32>
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	f000 fb19 	bl	8005c10 <_malloc_r>
 80055de:	6028      	str	r0, [r5, #0]
 80055e0:	6128      	str	r0, [r5, #16]
 80055e2:	b920      	cbnz	r0, 80055ee <_svfiprintf_r+0x2e>
 80055e4:	230c      	movs	r3, #12
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	e0d1      	b.n	8005792 <_svfiprintf_r+0x1d2>
 80055ee:	2340      	movs	r3, #64	; 0x40
 80055f0:	616b      	str	r3, [r5, #20]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9309      	str	r3, [sp, #36]	; 0x24
 80055f6:	2320      	movs	r3, #32
 80055f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005600:	2330      	movs	r3, #48	; 0x30
 8005602:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057ac <_svfiprintf_r+0x1ec>
 8005606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800560a:	f04f 0901 	mov.w	r9, #1
 800560e:	4623      	mov	r3, r4
 8005610:	469a      	mov	sl, r3
 8005612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005616:	b10a      	cbz	r2, 800561c <_svfiprintf_r+0x5c>
 8005618:	2a25      	cmp	r2, #37	; 0x25
 800561a:	d1f9      	bne.n	8005610 <_svfiprintf_r+0x50>
 800561c:	ebba 0b04 	subs.w	fp, sl, r4
 8005620:	d00b      	beq.n	800563a <_svfiprintf_r+0x7a>
 8005622:	465b      	mov	r3, fp
 8005624:	4622      	mov	r2, r4
 8005626:	4629      	mov	r1, r5
 8005628:	4638      	mov	r0, r7
 800562a:	f7ff ff6e 	bl	800550a <__ssputs_r>
 800562e:	3001      	adds	r0, #1
 8005630:	f000 80aa 	beq.w	8005788 <_svfiprintf_r+0x1c8>
 8005634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005636:	445a      	add	r2, fp
 8005638:	9209      	str	r2, [sp, #36]	; 0x24
 800563a:	f89a 3000 	ldrb.w	r3, [sl]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80a2 	beq.w	8005788 <_svfiprintf_r+0x1c8>
 8005644:	2300      	movs	r3, #0
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800564e:	f10a 0a01 	add.w	sl, sl, #1
 8005652:	9304      	str	r3, [sp, #16]
 8005654:	9307      	str	r3, [sp, #28]
 8005656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800565a:	931a      	str	r3, [sp, #104]	; 0x68
 800565c:	4654      	mov	r4, sl
 800565e:	2205      	movs	r2, #5
 8005660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005664:	4851      	ldr	r0, [pc, #324]	; (80057ac <_svfiprintf_r+0x1ec>)
 8005666:	f7fa fdc3 	bl	80001f0 <memchr>
 800566a:	9a04      	ldr	r2, [sp, #16]
 800566c:	b9d8      	cbnz	r0, 80056a6 <_svfiprintf_r+0xe6>
 800566e:	06d0      	lsls	r0, r2, #27
 8005670:	bf44      	itt	mi
 8005672:	2320      	movmi	r3, #32
 8005674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005678:	0711      	lsls	r1, r2, #28
 800567a:	bf44      	itt	mi
 800567c:	232b      	movmi	r3, #43	; 0x2b
 800567e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005682:	f89a 3000 	ldrb.w	r3, [sl]
 8005686:	2b2a      	cmp	r3, #42	; 0x2a
 8005688:	d015      	beq.n	80056b6 <_svfiprintf_r+0xf6>
 800568a:	9a07      	ldr	r2, [sp, #28]
 800568c:	4654      	mov	r4, sl
 800568e:	2000      	movs	r0, #0
 8005690:	f04f 0c0a 	mov.w	ip, #10
 8005694:	4621      	mov	r1, r4
 8005696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800569a:	3b30      	subs	r3, #48	; 0x30
 800569c:	2b09      	cmp	r3, #9
 800569e:	d94e      	bls.n	800573e <_svfiprintf_r+0x17e>
 80056a0:	b1b0      	cbz	r0, 80056d0 <_svfiprintf_r+0x110>
 80056a2:	9207      	str	r2, [sp, #28]
 80056a4:	e014      	b.n	80056d0 <_svfiprintf_r+0x110>
 80056a6:	eba0 0308 	sub.w	r3, r0, r8
 80056aa:	fa09 f303 	lsl.w	r3, r9, r3
 80056ae:	4313      	orrs	r3, r2
 80056b0:	9304      	str	r3, [sp, #16]
 80056b2:	46a2      	mov	sl, r4
 80056b4:	e7d2      	b.n	800565c <_svfiprintf_r+0x9c>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	9103      	str	r1, [sp, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bfbb      	ittet	lt
 80056c2:	425b      	neglt	r3, r3
 80056c4:	f042 0202 	orrlt.w	r2, r2, #2
 80056c8:	9307      	strge	r3, [sp, #28]
 80056ca:	9307      	strlt	r3, [sp, #28]
 80056cc:	bfb8      	it	lt
 80056ce:	9204      	strlt	r2, [sp, #16]
 80056d0:	7823      	ldrb	r3, [r4, #0]
 80056d2:	2b2e      	cmp	r3, #46	; 0x2e
 80056d4:	d10c      	bne.n	80056f0 <_svfiprintf_r+0x130>
 80056d6:	7863      	ldrb	r3, [r4, #1]
 80056d8:	2b2a      	cmp	r3, #42	; 0x2a
 80056da:	d135      	bne.n	8005748 <_svfiprintf_r+0x188>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	9203      	str	r2, [sp, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bfb8      	it	lt
 80056e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80056ec:	3402      	adds	r4, #2
 80056ee:	9305      	str	r3, [sp, #20]
 80056f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057bc <_svfiprintf_r+0x1fc>
 80056f4:	7821      	ldrb	r1, [r4, #0]
 80056f6:	2203      	movs	r2, #3
 80056f8:	4650      	mov	r0, sl
 80056fa:	f7fa fd79 	bl	80001f0 <memchr>
 80056fe:	b140      	cbz	r0, 8005712 <_svfiprintf_r+0x152>
 8005700:	2340      	movs	r3, #64	; 0x40
 8005702:	eba0 000a 	sub.w	r0, r0, sl
 8005706:	fa03 f000 	lsl.w	r0, r3, r0
 800570a:	9b04      	ldr	r3, [sp, #16]
 800570c:	4303      	orrs	r3, r0
 800570e:	3401      	adds	r4, #1
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005716:	4826      	ldr	r0, [pc, #152]	; (80057b0 <_svfiprintf_r+0x1f0>)
 8005718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800571c:	2206      	movs	r2, #6
 800571e:	f7fa fd67 	bl	80001f0 <memchr>
 8005722:	2800      	cmp	r0, #0
 8005724:	d038      	beq.n	8005798 <_svfiprintf_r+0x1d8>
 8005726:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <_svfiprintf_r+0x1f4>)
 8005728:	bb1b      	cbnz	r3, 8005772 <_svfiprintf_r+0x1b2>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	3307      	adds	r3, #7
 800572e:	f023 0307 	bic.w	r3, r3, #7
 8005732:	3308      	adds	r3, #8
 8005734:	9303      	str	r3, [sp, #12]
 8005736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005738:	4433      	add	r3, r6
 800573a:	9309      	str	r3, [sp, #36]	; 0x24
 800573c:	e767      	b.n	800560e <_svfiprintf_r+0x4e>
 800573e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005742:	460c      	mov	r4, r1
 8005744:	2001      	movs	r0, #1
 8005746:	e7a5      	b.n	8005694 <_svfiprintf_r+0xd4>
 8005748:	2300      	movs	r3, #0
 800574a:	3401      	adds	r4, #1
 800574c:	9305      	str	r3, [sp, #20]
 800574e:	4619      	mov	r1, r3
 8005750:	f04f 0c0a 	mov.w	ip, #10
 8005754:	4620      	mov	r0, r4
 8005756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800575a:	3a30      	subs	r2, #48	; 0x30
 800575c:	2a09      	cmp	r2, #9
 800575e:	d903      	bls.n	8005768 <_svfiprintf_r+0x1a8>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0c5      	beq.n	80056f0 <_svfiprintf_r+0x130>
 8005764:	9105      	str	r1, [sp, #20]
 8005766:	e7c3      	b.n	80056f0 <_svfiprintf_r+0x130>
 8005768:	fb0c 2101 	mla	r1, ip, r1, r2
 800576c:	4604      	mov	r4, r0
 800576e:	2301      	movs	r3, #1
 8005770:	e7f0      	b.n	8005754 <_svfiprintf_r+0x194>
 8005772:	ab03      	add	r3, sp, #12
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	462a      	mov	r2, r5
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <_svfiprintf_r+0x1f8>)
 800577a:	a904      	add	r1, sp, #16
 800577c:	4638      	mov	r0, r7
 800577e:	f3af 8000 	nop.w
 8005782:	1c42      	adds	r2, r0, #1
 8005784:	4606      	mov	r6, r0
 8005786:	d1d6      	bne.n	8005736 <_svfiprintf_r+0x176>
 8005788:	89ab      	ldrh	r3, [r5, #12]
 800578a:	065b      	lsls	r3, r3, #25
 800578c:	f53f af2c 	bmi.w	80055e8 <_svfiprintf_r+0x28>
 8005790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005792:	b01d      	add	sp, #116	; 0x74
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005798:	ab03      	add	r3, sp, #12
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	462a      	mov	r2, r5
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <_svfiprintf_r+0x1f8>)
 80057a0:	a904      	add	r1, sp, #16
 80057a2:	4638      	mov	r0, r7
 80057a4:	f000 f87a 	bl	800589c <_printf_i>
 80057a8:	e7eb      	b.n	8005782 <_svfiprintf_r+0x1c2>
 80057aa:	bf00      	nop
 80057ac:	080062c5 	.word	0x080062c5
 80057b0:	080062cf 	.word	0x080062cf
 80057b4:	00000000 	.word	0x00000000
 80057b8:	0800550b 	.word	0x0800550b
 80057bc:	080062cb 	.word	0x080062cb

080057c0 <_printf_common>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	4616      	mov	r6, r2
 80057c6:	4699      	mov	r9, r3
 80057c8:	688a      	ldr	r2, [r1, #8]
 80057ca:	690b      	ldr	r3, [r1, #16]
 80057cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057d0:	4293      	cmp	r3, r2
 80057d2:	bfb8      	it	lt
 80057d4:	4613      	movlt	r3, r2
 80057d6:	6033      	str	r3, [r6, #0]
 80057d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057dc:	4607      	mov	r7, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	b10a      	cbz	r2, 80057e6 <_printf_common+0x26>
 80057e2:	3301      	adds	r3, #1
 80057e4:	6033      	str	r3, [r6, #0]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	0699      	lsls	r1, r3, #26
 80057ea:	bf42      	ittt	mi
 80057ec:	6833      	ldrmi	r3, [r6, #0]
 80057ee:	3302      	addmi	r3, #2
 80057f0:	6033      	strmi	r3, [r6, #0]
 80057f2:	6825      	ldr	r5, [r4, #0]
 80057f4:	f015 0506 	ands.w	r5, r5, #6
 80057f8:	d106      	bne.n	8005808 <_printf_common+0x48>
 80057fa:	f104 0a19 	add.w	sl, r4, #25
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	6832      	ldr	r2, [r6, #0]
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	42ab      	cmp	r3, r5
 8005806:	dc26      	bgt.n	8005856 <_printf_common+0x96>
 8005808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800580c:	1e13      	subs	r3, r2, #0
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	bf18      	it	ne
 8005812:	2301      	movne	r3, #1
 8005814:	0692      	lsls	r2, r2, #26
 8005816:	d42b      	bmi.n	8005870 <_printf_common+0xb0>
 8005818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800581c:	4649      	mov	r1, r9
 800581e:	4638      	mov	r0, r7
 8005820:	47c0      	blx	r8
 8005822:	3001      	adds	r0, #1
 8005824:	d01e      	beq.n	8005864 <_printf_common+0xa4>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	68e5      	ldr	r5, [r4, #12]
 800582a:	6832      	ldr	r2, [r6, #0]
 800582c:	f003 0306 	and.w	r3, r3, #6
 8005830:	2b04      	cmp	r3, #4
 8005832:	bf08      	it	eq
 8005834:	1aad      	subeq	r5, r5, r2
 8005836:	68a3      	ldr	r3, [r4, #8]
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	bf0c      	ite	eq
 800583c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005840:	2500      	movne	r5, #0
 8005842:	4293      	cmp	r3, r2
 8005844:	bfc4      	itt	gt
 8005846:	1a9b      	subgt	r3, r3, r2
 8005848:	18ed      	addgt	r5, r5, r3
 800584a:	2600      	movs	r6, #0
 800584c:	341a      	adds	r4, #26
 800584e:	42b5      	cmp	r5, r6
 8005850:	d11a      	bne.n	8005888 <_printf_common+0xc8>
 8005852:	2000      	movs	r0, #0
 8005854:	e008      	b.n	8005868 <_printf_common+0xa8>
 8005856:	2301      	movs	r3, #1
 8005858:	4652      	mov	r2, sl
 800585a:	4649      	mov	r1, r9
 800585c:	4638      	mov	r0, r7
 800585e:	47c0      	blx	r8
 8005860:	3001      	adds	r0, #1
 8005862:	d103      	bne.n	800586c <_printf_common+0xac>
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	3501      	adds	r5, #1
 800586e:	e7c6      	b.n	80057fe <_printf_common+0x3e>
 8005870:	18e1      	adds	r1, r4, r3
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	2030      	movs	r0, #48	; 0x30
 8005876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800587a:	4422      	add	r2, r4
 800587c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005884:	3302      	adds	r3, #2
 8005886:	e7c7      	b.n	8005818 <_printf_common+0x58>
 8005888:	2301      	movs	r3, #1
 800588a:	4622      	mov	r2, r4
 800588c:	4649      	mov	r1, r9
 800588e:	4638      	mov	r0, r7
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d0e6      	beq.n	8005864 <_printf_common+0xa4>
 8005896:	3601      	adds	r6, #1
 8005898:	e7d9      	b.n	800584e <_printf_common+0x8e>
	...

0800589c <_printf_i>:
 800589c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	7e0f      	ldrb	r7, [r1, #24]
 80058a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058a4:	2f78      	cmp	r7, #120	; 0x78
 80058a6:	4691      	mov	r9, r2
 80058a8:	4680      	mov	r8, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	469a      	mov	sl, r3
 80058ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058b2:	d807      	bhi.n	80058c4 <_printf_i+0x28>
 80058b4:	2f62      	cmp	r7, #98	; 0x62
 80058b6:	d80a      	bhi.n	80058ce <_printf_i+0x32>
 80058b8:	2f00      	cmp	r7, #0
 80058ba:	f000 80d8 	beq.w	8005a6e <_printf_i+0x1d2>
 80058be:	2f58      	cmp	r7, #88	; 0x58
 80058c0:	f000 80a3 	beq.w	8005a0a <_printf_i+0x16e>
 80058c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058cc:	e03a      	b.n	8005944 <_printf_i+0xa8>
 80058ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058d2:	2b15      	cmp	r3, #21
 80058d4:	d8f6      	bhi.n	80058c4 <_printf_i+0x28>
 80058d6:	a101      	add	r1, pc, #4	; (adr r1, 80058dc <_printf_i+0x40>)
 80058d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058dc:	08005935 	.word	0x08005935
 80058e0:	08005949 	.word	0x08005949
 80058e4:	080058c5 	.word	0x080058c5
 80058e8:	080058c5 	.word	0x080058c5
 80058ec:	080058c5 	.word	0x080058c5
 80058f0:	080058c5 	.word	0x080058c5
 80058f4:	08005949 	.word	0x08005949
 80058f8:	080058c5 	.word	0x080058c5
 80058fc:	080058c5 	.word	0x080058c5
 8005900:	080058c5 	.word	0x080058c5
 8005904:	080058c5 	.word	0x080058c5
 8005908:	08005a55 	.word	0x08005a55
 800590c:	08005979 	.word	0x08005979
 8005910:	08005a37 	.word	0x08005a37
 8005914:	080058c5 	.word	0x080058c5
 8005918:	080058c5 	.word	0x080058c5
 800591c:	08005a77 	.word	0x08005a77
 8005920:	080058c5 	.word	0x080058c5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058c5 	.word	0x080058c5
 800592c:	080058c5 	.word	0x080058c5
 8005930:	08005a3f 	.word	0x08005a3f
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	1d1a      	adds	r2, r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	602a      	str	r2, [r5, #0]
 800593c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005944:	2301      	movs	r3, #1
 8005946:	e0a3      	b.n	8005a90 <_printf_i+0x1f4>
 8005948:	6820      	ldr	r0, [r4, #0]
 800594a:	6829      	ldr	r1, [r5, #0]
 800594c:	0606      	lsls	r6, r0, #24
 800594e:	f101 0304 	add.w	r3, r1, #4
 8005952:	d50a      	bpl.n	800596a <_printf_i+0xce>
 8005954:	680e      	ldr	r6, [r1, #0]
 8005956:	602b      	str	r3, [r5, #0]
 8005958:	2e00      	cmp	r6, #0
 800595a:	da03      	bge.n	8005964 <_printf_i+0xc8>
 800595c:	232d      	movs	r3, #45	; 0x2d
 800595e:	4276      	negs	r6, r6
 8005960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005964:	485e      	ldr	r0, [pc, #376]	; (8005ae0 <_printf_i+0x244>)
 8005966:	230a      	movs	r3, #10
 8005968:	e019      	b.n	800599e <_printf_i+0x102>
 800596a:	680e      	ldr	r6, [r1, #0]
 800596c:	602b      	str	r3, [r5, #0]
 800596e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005972:	bf18      	it	ne
 8005974:	b236      	sxthne	r6, r6
 8005976:	e7ef      	b.n	8005958 <_printf_i+0xbc>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	6820      	ldr	r0, [r4, #0]
 800597c:	1d19      	adds	r1, r3, #4
 800597e:	6029      	str	r1, [r5, #0]
 8005980:	0601      	lsls	r1, r0, #24
 8005982:	d501      	bpl.n	8005988 <_printf_i+0xec>
 8005984:	681e      	ldr	r6, [r3, #0]
 8005986:	e002      	b.n	800598e <_printf_i+0xf2>
 8005988:	0646      	lsls	r6, r0, #25
 800598a:	d5fb      	bpl.n	8005984 <_printf_i+0xe8>
 800598c:	881e      	ldrh	r6, [r3, #0]
 800598e:	4854      	ldr	r0, [pc, #336]	; (8005ae0 <_printf_i+0x244>)
 8005990:	2f6f      	cmp	r7, #111	; 0x6f
 8005992:	bf0c      	ite	eq
 8005994:	2308      	moveq	r3, #8
 8005996:	230a      	movne	r3, #10
 8005998:	2100      	movs	r1, #0
 800599a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800599e:	6865      	ldr	r5, [r4, #4]
 80059a0:	60a5      	str	r5, [r4, #8]
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	bfa2      	ittt	ge
 80059a6:	6821      	ldrge	r1, [r4, #0]
 80059a8:	f021 0104 	bicge.w	r1, r1, #4
 80059ac:	6021      	strge	r1, [r4, #0]
 80059ae:	b90e      	cbnz	r6, 80059b4 <_printf_i+0x118>
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	d04d      	beq.n	8005a50 <_printf_i+0x1b4>
 80059b4:	4615      	mov	r5, r2
 80059b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ba:	fb03 6711 	mls	r7, r3, r1, r6
 80059be:	5dc7      	ldrb	r7, [r0, r7]
 80059c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059c4:	4637      	mov	r7, r6
 80059c6:	42bb      	cmp	r3, r7
 80059c8:	460e      	mov	r6, r1
 80059ca:	d9f4      	bls.n	80059b6 <_printf_i+0x11a>
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d10b      	bne.n	80059e8 <_printf_i+0x14c>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	07de      	lsls	r6, r3, #31
 80059d4:	d508      	bpl.n	80059e8 <_printf_i+0x14c>
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	6861      	ldr	r1, [r4, #4]
 80059da:	4299      	cmp	r1, r3
 80059dc:	bfde      	ittt	le
 80059de:	2330      	movle	r3, #48	; 0x30
 80059e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059e8:	1b52      	subs	r2, r2, r5
 80059ea:	6122      	str	r2, [r4, #16]
 80059ec:	f8cd a000 	str.w	sl, [sp]
 80059f0:	464b      	mov	r3, r9
 80059f2:	aa03      	add	r2, sp, #12
 80059f4:	4621      	mov	r1, r4
 80059f6:	4640      	mov	r0, r8
 80059f8:	f7ff fee2 	bl	80057c0 <_printf_common>
 80059fc:	3001      	adds	r0, #1
 80059fe:	d14c      	bne.n	8005a9a <_printf_i+0x1fe>
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295
 8005a04:	b004      	add	sp, #16
 8005a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0a:	4835      	ldr	r0, [pc, #212]	; (8005ae0 <_printf_i+0x244>)
 8005a0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a10:	6829      	ldr	r1, [r5, #0]
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a18:	6029      	str	r1, [r5, #0]
 8005a1a:	061d      	lsls	r5, r3, #24
 8005a1c:	d514      	bpl.n	8005a48 <_printf_i+0x1ac>
 8005a1e:	07df      	lsls	r7, r3, #31
 8005a20:	bf44      	itt	mi
 8005a22:	f043 0320 	orrmi.w	r3, r3, #32
 8005a26:	6023      	strmi	r3, [r4, #0]
 8005a28:	b91e      	cbnz	r6, 8005a32 <_printf_i+0x196>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f023 0320 	bic.w	r3, r3, #32
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	2310      	movs	r3, #16
 8005a34:	e7b0      	b.n	8005998 <_printf_i+0xfc>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f043 0320 	orr.w	r3, r3, #32
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	2378      	movs	r3, #120	; 0x78
 8005a40:	4828      	ldr	r0, [pc, #160]	; (8005ae4 <_printf_i+0x248>)
 8005a42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a46:	e7e3      	b.n	8005a10 <_printf_i+0x174>
 8005a48:	0659      	lsls	r1, r3, #25
 8005a4a:	bf48      	it	mi
 8005a4c:	b2b6      	uxthmi	r6, r6
 8005a4e:	e7e6      	b.n	8005a1e <_printf_i+0x182>
 8005a50:	4615      	mov	r5, r2
 8005a52:	e7bb      	b.n	80059cc <_printf_i+0x130>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	6826      	ldr	r6, [r4, #0]
 8005a58:	6961      	ldr	r1, [r4, #20]
 8005a5a:	1d18      	adds	r0, r3, #4
 8005a5c:	6028      	str	r0, [r5, #0]
 8005a5e:	0635      	lsls	r5, r6, #24
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	d501      	bpl.n	8005a68 <_printf_i+0x1cc>
 8005a64:	6019      	str	r1, [r3, #0]
 8005a66:	e002      	b.n	8005a6e <_printf_i+0x1d2>
 8005a68:	0670      	lsls	r0, r6, #25
 8005a6a:	d5fb      	bpl.n	8005a64 <_printf_i+0x1c8>
 8005a6c:	8019      	strh	r1, [r3, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	4615      	mov	r5, r2
 8005a74:	e7ba      	b.n	80059ec <_printf_i+0x150>
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	1d1a      	adds	r2, r3, #4
 8005a7a:	602a      	str	r2, [r5, #0]
 8005a7c:	681d      	ldr	r5, [r3, #0]
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	2100      	movs	r1, #0
 8005a82:	4628      	mov	r0, r5
 8005a84:	f7fa fbb4 	bl	80001f0 <memchr>
 8005a88:	b108      	cbz	r0, 8005a8e <_printf_i+0x1f2>
 8005a8a:	1b40      	subs	r0, r0, r5
 8005a8c:	6060      	str	r0, [r4, #4]
 8005a8e:	6863      	ldr	r3, [r4, #4]
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	2300      	movs	r3, #0
 8005a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a98:	e7a8      	b.n	80059ec <_printf_i+0x150>
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	462a      	mov	r2, r5
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	47d0      	blx	sl
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d0ab      	beq.n	8005a00 <_printf_i+0x164>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	079b      	lsls	r3, r3, #30
 8005aac:	d413      	bmi.n	8005ad6 <_printf_i+0x23a>
 8005aae:	68e0      	ldr	r0, [r4, #12]
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	4298      	cmp	r0, r3
 8005ab4:	bfb8      	it	lt
 8005ab6:	4618      	movlt	r0, r3
 8005ab8:	e7a4      	b.n	8005a04 <_printf_i+0x168>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4632      	mov	r2, r6
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	47d0      	blx	sl
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d09b      	beq.n	8005a00 <_printf_i+0x164>
 8005ac8:	3501      	adds	r5, #1
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	9903      	ldr	r1, [sp, #12]
 8005ace:	1a5b      	subs	r3, r3, r1
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	dcf2      	bgt.n	8005aba <_printf_i+0x21e>
 8005ad4:	e7eb      	b.n	8005aae <_printf_i+0x212>
 8005ad6:	2500      	movs	r5, #0
 8005ad8:	f104 0619 	add.w	r6, r4, #25
 8005adc:	e7f5      	b.n	8005aca <_printf_i+0x22e>
 8005ade:	bf00      	nop
 8005ae0:	080062d6 	.word	0x080062d6
 8005ae4:	080062e7 	.word	0x080062e7

08005ae8 <memcpy>:
 8005ae8:	440a      	add	r2, r1
 8005aea:	4291      	cmp	r1, r2
 8005aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005af0:	d100      	bne.n	8005af4 <memcpy+0xc>
 8005af2:	4770      	bx	lr
 8005af4:	b510      	push	{r4, lr}
 8005af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005afe:	4291      	cmp	r1, r2
 8005b00:	d1f9      	bne.n	8005af6 <memcpy+0xe>
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <memmove>:
 8005b04:	4288      	cmp	r0, r1
 8005b06:	b510      	push	{r4, lr}
 8005b08:	eb01 0402 	add.w	r4, r1, r2
 8005b0c:	d902      	bls.n	8005b14 <memmove+0x10>
 8005b0e:	4284      	cmp	r4, r0
 8005b10:	4623      	mov	r3, r4
 8005b12:	d807      	bhi.n	8005b24 <memmove+0x20>
 8005b14:	1e43      	subs	r3, r0, #1
 8005b16:	42a1      	cmp	r1, r4
 8005b18:	d008      	beq.n	8005b2c <memmove+0x28>
 8005b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b22:	e7f8      	b.n	8005b16 <memmove+0x12>
 8005b24:	4402      	add	r2, r0
 8005b26:	4601      	mov	r1, r0
 8005b28:	428a      	cmp	r2, r1
 8005b2a:	d100      	bne.n	8005b2e <memmove+0x2a>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b36:	e7f7      	b.n	8005b28 <memmove+0x24>

08005b38 <_free_r>:
 8005b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b3a:	2900      	cmp	r1, #0
 8005b3c:	d044      	beq.n	8005bc8 <_free_r+0x90>
 8005b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b42:	9001      	str	r0, [sp, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f1a1 0404 	sub.w	r4, r1, #4
 8005b4a:	bfb8      	it	lt
 8005b4c:	18e4      	addlt	r4, r4, r3
 8005b4e:	f000 f913 	bl	8005d78 <__malloc_lock>
 8005b52:	4a1e      	ldr	r2, [pc, #120]	; (8005bcc <_free_r+0x94>)
 8005b54:	9801      	ldr	r0, [sp, #4]
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	b933      	cbnz	r3, 8005b68 <_free_r+0x30>
 8005b5a:	6063      	str	r3, [r4, #4]
 8005b5c:	6014      	str	r4, [r2, #0]
 8005b5e:	b003      	add	sp, #12
 8005b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b64:	f000 b90e 	b.w	8005d84 <__malloc_unlock>
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d908      	bls.n	8005b7e <_free_r+0x46>
 8005b6c:	6825      	ldr	r5, [r4, #0]
 8005b6e:	1961      	adds	r1, r4, r5
 8005b70:	428b      	cmp	r3, r1
 8005b72:	bf01      	itttt	eq
 8005b74:	6819      	ldreq	r1, [r3, #0]
 8005b76:	685b      	ldreq	r3, [r3, #4]
 8005b78:	1949      	addeq	r1, r1, r5
 8005b7a:	6021      	streq	r1, [r4, #0]
 8005b7c:	e7ed      	b.n	8005b5a <_free_r+0x22>
 8005b7e:	461a      	mov	r2, r3
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b10b      	cbz	r3, 8005b88 <_free_r+0x50>
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d9fa      	bls.n	8005b7e <_free_r+0x46>
 8005b88:	6811      	ldr	r1, [r2, #0]
 8005b8a:	1855      	adds	r5, r2, r1
 8005b8c:	42a5      	cmp	r5, r4
 8005b8e:	d10b      	bne.n	8005ba8 <_free_r+0x70>
 8005b90:	6824      	ldr	r4, [r4, #0]
 8005b92:	4421      	add	r1, r4
 8005b94:	1854      	adds	r4, r2, r1
 8005b96:	42a3      	cmp	r3, r4
 8005b98:	6011      	str	r1, [r2, #0]
 8005b9a:	d1e0      	bne.n	8005b5e <_free_r+0x26>
 8005b9c:	681c      	ldr	r4, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	6053      	str	r3, [r2, #4]
 8005ba2:	4421      	add	r1, r4
 8005ba4:	6011      	str	r1, [r2, #0]
 8005ba6:	e7da      	b.n	8005b5e <_free_r+0x26>
 8005ba8:	d902      	bls.n	8005bb0 <_free_r+0x78>
 8005baa:	230c      	movs	r3, #12
 8005bac:	6003      	str	r3, [r0, #0]
 8005bae:	e7d6      	b.n	8005b5e <_free_r+0x26>
 8005bb0:	6825      	ldr	r5, [r4, #0]
 8005bb2:	1961      	adds	r1, r4, r5
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	bf04      	itt	eq
 8005bb8:	6819      	ldreq	r1, [r3, #0]
 8005bba:	685b      	ldreq	r3, [r3, #4]
 8005bbc:	6063      	str	r3, [r4, #4]
 8005bbe:	bf04      	itt	eq
 8005bc0:	1949      	addeq	r1, r1, r5
 8005bc2:	6021      	streq	r1, [r4, #0]
 8005bc4:	6054      	str	r4, [r2, #4]
 8005bc6:	e7ca      	b.n	8005b5e <_free_r+0x26>
 8005bc8:	b003      	add	sp, #12
 8005bca:	bd30      	pop	{r4, r5, pc}
 8005bcc:	20001f90 	.word	0x20001f90

08005bd0 <sbrk_aligned>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	4e0e      	ldr	r6, [pc, #56]	; (8005c0c <sbrk_aligned+0x3c>)
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	6831      	ldr	r1, [r6, #0]
 8005bd8:	4605      	mov	r5, r0
 8005bda:	b911      	cbnz	r1, 8005be2 <sbrk_aligned+0x12>
 8005bdc:	f000 f8bc 	bl	8005d58 <_sbrk_r>
 8005be0:	6030      	str	r0, [r6, #0]
 8005be2:	4621      	mov	r1, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 f8b7 	bl	8005d58 <_sbrk_r>
 8005bea:	1c43      	adds	r3, r0, #1
 8005bec:	d00a      	beq.n	8005c04 <sbrk_aligned+0x34>
 8005bee:	1cc4      	adds	r4, r0, #3
 8005bf0:	f024 0403 	bic.w	r4, r4, #3
 8005bf4:	42a0      	cmp	r0, r4
 8005bf6:	d007      	beq.n	8005c08 <sbrk_aligned+0x38>
 8005bf8:	1a21      	subs	r1, r4, r0
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f000 f8ac 	bl	8005d58 <_sbrk_r>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d101      	bne.n	8005c08 <sbrk_aligned+0x38>
 8005c04:	f04f 34ff 	mov.w	r4, #4294967295
 8005c08:	4620      	mov	r0, r4
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	20001f94 	.word	0x20001f94

08005c10 <_malloc_r>:
 8005c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c14:	1ccd      	adds	r5, r1, #3
 8005c16:	f025 0503 	bic.w	r5, r5, #3
 8005c1a:	3508      	adds	r5, #8
 8005c1c:	2d0c      	cmp	r5, #12
 8005c1e:	bf38      	it	cc
 8005c20:	250c      	movcc	r5, #12
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	4607      	mov	r7, r0
 8005c26:	db01      	blt.n	8005c2c <_malloc_r+0x1c>
 8005c28:	42a9      	cmp	r1, r5
 8005c2a:	d905      	bls.n	8005c38 <_malloc_r+0x28>
 8005c2c:	230c      	movs	r3, #12
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	2600      	movs	r6, #0
 8005c32:	4630      	mov	r0, r6
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	4e2e      	ldr	r6, [pc, #184]	; (8005cf4 <_malloc_r+0xe4>)
 8005c3a:	f000 f89d 	bl	8005d78 <__malloc_lock>
 8005c3e:	6833      	ldr	r3, [r6, #0]
 8005c40:	461c      	mov	r4, r3
 8005c42:	bb34      	cbnz	r4, 8005c92 <_malloc_r+0x82>
 8005c44:	4629      	mov	r1, r5
 8005c46:	4638      	mov	r0, r7
 8005c48:	f7ff ffc2 	bl	8005bd0 <sbrk_aligned>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	4604      	mov	r4, r0
 8005c50:	d14d      	bne.n	8005cee <_malloc_r+0xde>
 8005c52:	6834      	ldr	r4, [r6, #0]
 8005c54:	4626      	mov	r6, r4
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	d140      	bne.n	8005cdc <_malloc_r+0xcc>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4638      	mov	r0, r7
 8005c60:	eb04 0803 	add.w	r8, r4, r3
 8005c64:	f000 f878 	bl	8005d58 <_sbrk_r>
 8005c68:	4580      	cmp	r8, r0
 8005c6a:	d13a      	bne.n	8005ce2 <_malloc_r+0xd2>
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	3503      	adds	r5, #3
 8005c70:	1a6d      	subs	r5, r5, r1
 8005c72:	f025 0503 	bic.w	r5, r5, #3
 8005c76:	3508      	adds	r5, #8
 8005c78:	2d0c      	cmp	r5, #12
 8005c7a:	bf38      	it	cc
 8005c7c:	250c      	movcc	r5, #12
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7ff ffa5 	bl	8005bd0 <sbrk_aligned>
 8005c86:	3001      	adds	r0, #1
 8005c88:	d02b      	beq.n	8005ce2 <_malloc_r+0xd2>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	442b      	add	r3, r5
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	e00e      	b.n	8005cb0 <_malloc_r+0xa0>
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	1b52      	subs	r2, r2, r5
 8005c96:	d41e      	bmi.n	8005cd6 <_malloc_r+0xc6>
 8005c98:	2a0b      	cmp	r2, #11
 8005c9a:	d916      	bls.n	8005cca <_malloc_r+0xba>
 8005c9c:	1961      	adds	r1, r4, r5
 8005c9e:	42a3      	cmp	r3, r4
 8005ca0:	6025      	str	r5, [r4, #0]
 8005ca2:	bf18      	it	ne
 8005ca4:	6059      	strne	r1, [r3, #4]
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	bf08      	it	eq
 8005caa:	6031      	streq	r1, [r6, #0]
 8005cac:	5162      	str	r2, [r4, r5]
 8005cae:	604b      	str	r3, [r1, #4]
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f104 060b 	add.w	r6, r4, #11
 8005cb6:	f000 f865 	bl	8005d84 <__malloc_unlock>
 8005cba:	f026 0607 	bic.w	r6, r6, #7
 8005cbe:	1d23      	adds	r3, r4, #4
 8005cc0:	1af2      	subs	r2, r6, r3
 8005cc2:	d0b6      	beq.n	8005c32 <_malloc_r+0x22>
 8005cc4:	1b9b      	subs	r3, r3, r6
 8005cc6:	50a3      	str	r3, [r4, r2]
 8005cc8:	e7b3      	b.n	8005c32 <_malloc_r+0x22>
 8005cca:	6862      	ldr	r2, [r4, #4]
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	bf0c      	ite	eq
 8005cd0:	6032      	streq	r2, [r6, #0]
 8005cd2:	605a      	strne	r2, [r3, #4]
 8005cd4:	e7ec      	b.n	8005cb0 <_malloc_r+0xa0>
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	6864      	ldr	r4, [r4, #4]
 8005cda:	e7b2      	b.n	8005c42 <_malloc_r+0x32>
 8005cdc:	4634      	mov	r4, r6
 8005cde:	6876      	ldr	r6, [r6, #4]
 8005ce0:	e7b9      	b.n	8005c56 <_malloc_r+0x46>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f000 f84c 	bl	8005d84 <__malloc_unlock>
 8005cec:	e7a1      	b.n	8005c32 <_malloc_r+0x22>
 8005cee:	6025      	str	r5, [r4, #0]
 8005cf0:	e7de      	b.n	8005cb0 <_malloc_r+0xa0>
 8005cf2:	bf00      	nop
 8005cf4:	20001f90 	.word	0x20001f90

08005cf8 <_realloc_r>:
 8005cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	4614      	mov	r4, r2
 8005d00:	460e      	mov	r6, r1
 8005d02:	b921      	cbnz	r1, 8005d0e <_realloc_r+0x16>
 8005d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d08:	4611      	mov	r1, r2
 8005d0a:	f7ff bf81 	b.w	8005c10 <_malloc_r>
 8005d0e:	b92a      	cbnz	r2, 8005d1c <_realloc_r+0x24>
 8005d10:	f7ff ff12 	bl	8005b38 <_free_r>
 8005d14:	4625      	mov	r5, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d1c:	f000 f838 	bl	8005d90 <_malloc_usable_size_r>
 8005d20:	4284      	cmp	r4, r0
 8005d22:	4607      	mov	r7, r0
 8005d24:	d802      	bhi.n	8005d2c <_realloc_r+0x34>
 8005d26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d2a:	d812      	bhi.n	8005d52 <_realloc_r+0x5a>
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4640      	mov	r0, r8
 8005d30:	f7ff ff6e 	bl	8005c10 <_malloc_r>
 8005d34:	4605      	mov	r5, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d0ed      	beq.n	8005d16 <_realloc_r+0x1e>
 8005d3a:	42bc      	cmp	r4, r7
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	4631      	mov	r1, r6
 8005d40:	bf28      	it	cs
 8005d42:	463a      	movcs	r2, r7
 8005d44:	f7ff fed0 	bl	8005ae8 <memcpy>
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f7ff fef4 	bl	8005b38 <_free_r>
 8005d50:	e7e1      	b.n	8005d16 <_realloc_r+0x1e>
 8005d52:	4635      	mov	r5, r6
 8005d54:	e7df      	b.n	8005d16 <_realloc_r+0x1e>
	...

08005d58 <_sbrk_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d06      	ldr	r5, [pc, #24]	; (8005d74 <_sbrk_r+0x1c>)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	f7fb ffd6 	bl	8001d14 <_sbrk>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_sbrk_r+0x1a>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_sbrk_r+0x1a>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20001f98 	.word	0x20001f98

08005d78 <__malloc_lock>:
 8005d78:	4801      	ldr	r0, [pc, #4]	; (8005d80 <__malloc_lock+0x8>)
 8005d7a:	f000 b811 	b.w	8005da0 <__retarget_lock_acquire_recursive>
 8005d7e:	bf00      	nop
 8005d80:	20001f9c 	.word	0x20001f9c

08005d84 <__malloc_unlock>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__malloc_unlock+0x8>)
 8005d86:	f000 b80c 	b.w	8005da2 <__retarget_lock_release_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	20001f9c 	.word	0x20001f9c

08005d90 <_malloc_usable_size_r>:
 8005d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d94:	1f18      	subs	r0, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bfbc      	itt	lt
 8005d9a:	580b      	ldrlt	r3, [r1, r0]
 8005d9c:	18c0      	addlt	r0, r0, r3
 8005d9e:	4770      	bx	lr

08005da0 <__retarget_lock_acquire_recursive>:
 8005da0:	4770      	bx	lr

08005da2 <__retarget_lock_release_recursive>:
 8005da2:	4770      	bx	lr

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
