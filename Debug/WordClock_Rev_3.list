
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005274  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005414  08005414  00006414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005480  08005480  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005480  08005480  00006480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005488  08005488  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005488  08005488  00006488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800548c  0800548c  0000648c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005490  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  2000006c  080054fc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000548  080054fc  00007548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c943  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a7  00000000  00000000  000139df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00015d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009da  00000000  00000000  00016a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179c3  00000000  00000000  0001740a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6d6  00000000  00000000  0002edcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000932cb  00000000  00000000  0003e4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d176e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d4  00000000  00000000  000d17b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d5088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053fc 	.word	0x080053fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080053fc 	.word	0x080053fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <getRainbowColor>:
   240, 251, 261, 271, 282, 293, 304, 316, 327, 339, 351, 363, 376, 388, 401, 414,
   428, 441, 455, 469, 483, 497, 511, 526, 541, 556, 572, 587, 603, 619, 635, 651,
   668, 685, 702, 719, 736, 754, 772, 790, 808, 827, 845, 864, 883, 903, 922, 942,
   962, 982,1002,1023,};

uint32_t getRainbowColor(uint8_t colorOption) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    switch (colorOption) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	3b01      	subs	r3, #1
 800058e:	2b0f      	cmp	r3, #15
 8000590:	d84a      	bhi.n	8000628 <getRainbowColor+0xa8>
 8000592:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <getRainbowColor+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005d9 	.word	0x080005d9
 800059c:	080005df 	.word	0x080005df
 80005a0:	080005e3 	.word	0x080005e3
 80005a4:	080005e7 	.word	0x080005e7
 80005a8:	080005eb 	.word	0x080005eb
 80005ac:	080005f1 	.word	0x080005f1
 80005b0:	080005f7 	.word	0x080005f7
 80005b4:	080005fd 	.word	0x080005fd
 80005b8:	08000603 	.word	0x08000603
 80005bc:	08000607 	.word	0x08000607
 80005c0:	0800060b 	.word	0x0800060b
 80005c4:	08000611 	.word	0x08000611
 80005c8:	08000615 	.word	0x08000615
 80005cc:	08000619 	.word	0x08000619
 80005d0:	0800061d 	.word	0x0800061d
 80005d4:	08000623 	.word	0x08000623
        case 1:
            return 0xFF0000; // Red
 80005d8:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 80005dc:	e026      	b.n	800062c <getRainbowColor+0xac>
        case 2:
            return 0xFF7F00; // Orange
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <getRainbowColor+0xb8>)
 80005e0:	e024      	b.n	800062c <getRainbowColor+0xac>
        case 3:
            return 0xFFFF00; // Yellow
 80005e2:	4b16      	ldr	r3, [pc, #88]	@ (800063c <getRainbowColor+0xbc>)
 80005e4:	e022      	b.n	800062c <getRainbowColor+0xac>
        case 4:
            return 0x7FFF00; // Yellow-Green
 80005e6:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <getRainbowColor+0xc0>)
 80005e8:	e020      	b.n	800062c <getRainbowColor+0xac>
        case 5:
            return 0x00FF00; // Green
 80005ea:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80005ee:	e01d      	b.n	800062c <getRainbowColor+0xac>
        case 6:
            return 0x00FF7F; // Spring Green
 80005f0:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80005f4:	e01a      	b.n	800062c <getRainbowColor+0xac>
        case 7:
            return 0x00FFFF; // Cyan
 80005f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005fa:	e017      	b.n	800062c <getRainbowColor+0xac>
        case 8:
            return 0x007FFF; // Sky Blue
 80005fc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000600:	e014      	b.n	800062c <getRainbowColor+0xac>
        case 9:
            return 0x0000FF; // Blue
 8000602:	23ff      	movs	r3, #255	@ 0xff
 8000604:	e012      	b.n	800062c <getRainbowColor+0xac>
        case 10:
            return 0x7F00FF; // Violet
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <getRainbowColor+0xc4>)
 8000608:	e010      	b.n	800062c <getRainbowColor+0xac>
        case 11:
            return 0xFF00FF; // Magenta
 800060a:	f04f 13ff 	mov.w	r3, #16711935	@ 0xff00ff
 800060e:	e00d      	b.n	800062c <getRainbowColor+0xac>
        case 12:
            return 0xFF007F; // Rose
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <getRainbowColor+0xc8>)
 8000612:	e00b      	b.n	800062c <getRainbowColor+0xac>
        case 13:
            return 0xFF1493; // Deep Pink
 8000614:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <getRainbowColor+0xcc>)
 8000616:	e009      	b.n	800062c <getRainbowColor+0xac>
        case 14:
            return 0xC71585; // Medium Violet Red
 8000618:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <getRainbowColor+0xd0>)
 800061a:	e007      	b.n	800062c <getRainbowColor+0xac>
        case 15:
            return 0x800080; // Purple
 800061c:	f04f 1380 	mov.w	r3, #8388736	@ 0x800080
 8000620:	e004      	b.n	800062c <getRainbowColor+0xac>
        case 16:
            return 0x8B008B; // Dark Magenta
 8000622:	f04f 138b 	mov.w	r3, #9109643	@ 0x8b008b
 8000626:	e001      	b.n	800062c <getRainbowColor+0xac>
        default:
            return 0xFFFFFF; // Default to White if an unexpected value is provided
 8000628:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
    }
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	00ff7f00 	.word	0x00ff7f00
 800063c:	00ffff00 	.word	0x00ffff00
 8000640:	007fff00 	.word	0x007fff00
 8000644:	007f00ff 	.word	0x007f00ff
 8000648:	00ff007f 	.word	0x00ff007f
 800064c:	00ff1493 	.word	0x00ff1493
 8000650:	00c71585 	.word	0x00c71585

08000654 <Blink_LED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Blink_LED(uint16_t LED, uint32_t color) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	80fb      	strh	r3, [r7, #6]


	if(LED != lastLED) {
 8000660:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <Blink_LED+0x90>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	4293      	cmp	r3, r2
 800066a:	d009      	beq.n	8000680 <Blink_LED+0x2c>
		Set_LED_Hex(lastLED, 0);
 800066c:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <Blink_LED+0x90>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f9c0 	bl	80049f8 <Set_LED_Hex>
		lastLED = LED;
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <Blink_LED+0x90>)
 800067e:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() - lastTick >= delayMs) {
 8000680:	f001 fc26 	bl	8001ed0 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <Blink_LED+0x94>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1ad2      	subs	r2, r2, r3
 800068c:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <Blink_LED+0x98>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	d322      	bcc.n	80006da <Blink_LED+0x86>

		//Toggle LED
		if(isOff){
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <Blink_LED+0x9c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d005      	beq.n	80006a8 <Blink_LED+0x54>
			Set_LED_Hex(LED, color);
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	6839      	ldr	r1, [r7, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 f9a9 	bl	80049f8 <Set_LED_Hex>
 80006a6:	e004      	b.n	80006b2 <Blink_LED+0x5e>
		} else {
			Set_LED_Hex(LED, 0);
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 f9a3 	bl	80049f8 <Set_LED_Hex>
		}

		isOff = !isOff;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <Blink_LED+0x9c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	bf14      	ite	ne
 80006ba:	2301      	movne	r3, #1
 80006bc:	2300      	moveq	r3, #0
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f083 0301 	eor.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <Blink_LED+0x9c>)
 80006ce:	701a      	strb	r2, [r3, #0]
		lastTick = HAL_GetTick();
 80006d0:	f001 fbfe 	bl	8001ed0 <HAL_GetTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <Blink_LED+0x94>)
 80006d8:	6013      	str	r3, [r2, #0]
	}
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000000e 	.word	0x2000000e
 80006e8:	20000244 	.word	0x20000244
 80006ec:	20000008 	.word	0x20000008
 80006f0:	2000000c 	.word	0x2000000c

080006f4 <clampValue>:

uint16_t clampValue(uint16_t value, uint16_t minVal, uint16_t maxVal) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
 80006fe:	460b      	mov	r3, r1
 8000700:	80bb      	strh	r3, [r7, #4]
 8000702:	4613      	mov	r3, r2
 8000704:	807b      	strh	r3, [r7, #2]
    if (abs(0xFFFF - value) < abs(maxVal - value)) {
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800070c:	33ff      	adds	r3, #255	@ 0xff
 800070e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000712:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000716:	8879      	ldrh	r1, [r7, #2]
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	1acb      	subs	r3, r1, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	bfb8      	it	lt
 8000720:	425b      	neglt	r3, r3
 8000722:	429a      	cmp	r2, r3
 8000724:	da01      	bge.n	800072a <clampValue+0x36>
  	  return minVal;
 8000726:	88bb      	ldrh	r3, [r7, #4]
 8000728:	e00c      	b.n	8000744 <clampValue+0x50>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 800072a:	88fa      	ldrh	r2, [r7, #6]
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	d201      	bcs.n	8000736 <clampValue+0x42>
 8000732:	88bb      	ldrh	r3, [r7, #4]
 8000734:	e006      	b.n	8000744 <clampValue+0x50>
        if (value > maxVal) return maxVal;
 8000736:	88fa      	ldrh	r2, [r7, #6]
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	429a      	cmp	r2, r3
 800073c:	d901      	bls.n	8000742 <clampValue+0x4e>
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	e000      	b.n	8000744 <clampValue+0x50>
        return value;
 8000742:	88fb      	ldrh	r3, [r7, #6]
    }
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <switchState>:

bool userSelectingFeature = true; // True when in SELECT state to decide what feature to adjust

void switchState(RTC_DateTypeDef * tDate) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    switch(currentState) {
 8000758:	4b8d      	ldr	r3, [pc, #564]	@ (8000990 <switchState+0x240>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b09      	cmp	r3, #9
 8000760:	f200 810d 	bhi.w	800097e <switchState+0x22e>
 8000764:	a201      	add	r2, pc, #4	@ (adr r2, 800076c <switchState+0x1c>)
 8000766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076a:	bf00      	nop
 800076c:	08000795 	.word	0x08000795
 8000770:	0800079d 	.word	0x0800079d
 8000774:	080007a5 	.word	0x080007a5
 8000778:	0800084d 	.word	0x0800084d
 800077c:	08000895 	.word	0x08000895
 8000780:	08000959 	.word	0x08000959
 8000784:	08000977 	.word	0x08000977
 8000788:	080008c5 	.word	0x080008c5
 800078c:	080008fd 	.word	0x080008fd
 8000790:	08000935 	.word	0x08000935
        case SLEEP:
            currentState = WAKE;
 8000794:	4b7e      	ldr	r3, [pc, #504]	@ (8000990 <switchState+0x240>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
            break;
 800079a:	e0f5      	b.n	8000988 <switchState+0x238>
        case WAKE:
            currentState = SELECT;
 800079c:	4b7c      	ldr	r3, [pc, #496]	@ (8000990 <switchState+0x240>)
 800079e:	2202      	movs	r2, #2
 80007a0:	701a      	strb	r2, [r3, #0]

            break;
 80007a2:	e0f1      	b.n	8000988 <switchState+0x238>
        case SELECT:
        	switch((counter / sensitivity)){
 80007a4:	4b7b      	ldr	r3, [pc, #492]	@ (8000994 <switchState+0x244>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a7b      	ldr	r2, [pc, #492]	@ (8000998 <switchState+0x248>)
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	f200 80e8 	bhi.w	8000986 <switchState+0x236>
 80007b6:	a201      	add	r2, pc, #4	@ (adr r2, 80007bc <switchState+0x6c>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007cd 	.word	0x080007cd
 80007c0:	080007e9 	.word	0x080007e9
 80007c4:	08000807 	.word	0x08000807
 80007c8:	08000829 	.word	0x08000829
        	case 0:
        		counter = sTime.Hours * sensitivity;
 80007cc:	4b73      	ldr	r3, [pc, #460]	@ (800099c <switchState+0x24c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b71      	ldr	r3, [pc, #452]	@ (8000998 <switchState+0x248>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	4b6d      	ldr	r3, [pc, #436]	@ (8000994 <switchState+0x244>)
 80007de:	601a      	str	r2, [r3, #0]
        		currentState = SET_HOURS;
 80007e0:	4b6b      	ldr	r3, [pc, #428]	@ (8000990 <switchState+0x240>)
 80007e2:	2203      	movs	r2, #3
 80007e4:	701a      	strb	r2, [r3, #0]
        		break;
 80007e6:	e030      	b.n	800084a <switchState+0xfa>
        	case 1:
        		currentState = SET_COLOR;
 80007e8:	4b69      	ldr	r3, [pc, #420]	@ (8000990 <switchState+0x240>)
 80007ea:	2205      	movs	r2, #5
 80007ec:	701a      	strb	r2, [r3, #0]
        		counter = color * sensitivity;
 80007ee:	4b6c      	ldr	r3, [pc, #432]	@ (80009a0 <switchState+0x250>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b68      	ldr	r3, [pc, #416]	@ (8000998 <switchState+0x248>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	4b64      	ldr	r3, [pc, #400]	@ (8000994 <switchState+0x244>)
 8000802:	601a      	str	r2, [r3, #0]
        		break;
 8000804:	e021      	b.n	800084a <switchState+0xfa>
        	case 2:
        		currentDateType = ANNIVERSARY_DATE;
 8000806:	4b67      	ldr	r3, [pc, #412]	@ (80009a4 <switchState+0x254>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
            	counter = aDate.Month * sensitivity;
 800080c:	4b66      	ldr	r3, [pc, #408]	@ (80009a8 <switchState+0x258>)
 800080e:	785b      	ldrb	r3, [r3, #1]
 8000810:	461a      	mov	r2, r3
 8000812:	4b61      	ldr	r3, [pc, #388]	@ (8000998 <switchState+0x248>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	461a      	mov	r2, r3
 800081c:	4b5d      	ldr	r3, [pc, #372]	@ (8000994 <switchState+0x244>)
 800081e:	601a      	str	r2, [r3, #0]
            	currentState = SET_MONTH;
 8000820:	4b5b      	ldr	r3, [pc, #364]	@ (8000990 <switchState+0x240>)
 8000822:	2207      	movs	r2, #7
 8000824:	701a      	strb	r2, [r3, #0]
        		break;
 8000826:	e010      	b.n	800084a <switchState+0xfa>
        	case 3:
        		currentDateType = BIRTHDAY_DATE;
 8000828:	4b5e      	ldr	r3, [pc, #376]	@ (80009a4 <switchState+0x254>)
 800082a:	2202      	movs	r2, #2
 800082c:	701a      	strb	r2, [r3, #0]
            	counter = bDate.Month * sensitivity;
 800082e:	4b5f      	ldr	r3, [pc, #380]	@ (80009ac <switchState+0x25c>)
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	461a      	mov	r2, r3
 8000834:	4b58      	ldr	r3, [pc, #352]	@ (8000998 <switchState+0x248>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	fb02 f303 	mul.w	r3, r2, r3
 800083c:	461a      	mov	r2, r3
 800083e:	4b55      	ldr	r3, [pc, #340]	@ (8000994 <switchState+0x244>)
 8000840:	601a      	str	r2, [r3, #0]
            	currentState = SET_MONTH;
 8000842:	4b53      	ldr	r3, [pc, #332]	@ (8000990 <switchState+0x240>)
 8000844:	2207      	movs	r2, #7
 8000846:	701a      	strb	r2, [r3, #0]
        		break;
 8000848:	bf00      	nop
        	}
            break;
 800084a:	e09c      	b.n	8000986 <switchState+0x236>
        case SET_HOURS:
        	counter = sTime.Minutes * sensitivity;
 800084c:	4b53      	ldr	r3, [pc, #332]	@ (800099c <switchState+0x24c>)
 800084e:	785b      	ldrb	r3, [r3, #1]
 8000850:	461a      	mov	r2, r3
 8000852:	4b51      	ldr	r3, [pc, #324]	@ (8000998 <switchState+0x248>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	fb02 f303 	mul.w	r3, r2, r3
 800085a:	461a      	mov	r2, r3
 800085c:	4b4d      	ldr	r3, [pc, #308]	@ (8000994 <switchState+0x244>)
 800085e:	601a      	str	r2, [r3, #0]
        	Set_LED_Hex(141, getRainbowColor(color));
 8000860:	4b4f      	ldr	r3, [pc, #316]	@ (80009a0 <switchState+0x250>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe89 	bl	8000580 <getRainbowColor>
 800086e:	4603      	mov	r3, r0
 8000870:	4619      	mov	r1, r3
 8000872:	208d      	movs	r0, #141	@ 0x8d
 8000874:	f004 f8c0 	bl	80049f8 <Set_LED_Hex>
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000878:	2200      	movs	r2, #0
 800087a:	4948      	ldr	r1, [pc, #288]	@ (800099c <switchState+0x24c>)
 800087c:	484c      	ldr	r0, [pc, #304]	@ (80009b0 <switchState+0x260>)
 800087e:	f002 feb5 	bl	80035ec <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000882:	2200      	movs	r2, #0
 8000884:	494b      	ldr	r1, [pc, #300]	@ (80009b4 <switchState+0x264>)
 8000886:	484a      	ldr	r0, [pc, #296]	@ (80009b0 <switchState+0x260>)
 8000888:	f002 ffa8 	bl	80037dc <HAL_RTC_SetDate>
            currentState = SET_MINUTES; // After setting hours, set minutes
 800088c:	4b40      	ldr	r3, [pc, #256]	@ (8000990 <switchState+0x240>)
 800088e:	2204      	movs	r2, #4
 8000890:	701a      	strb	r2, [r3, #0]
            break;
 8000892:	e079      	b.n	8000988 <switchState+0x238>
        case SET_MINUTES:
        	counter = sDate.Month * sensitivity;
 8000894:	4b47      	ldr	r3, [pc, #284]	@ (80009b4 <switchState+0x264>)
 8000896:	785b      	ldrb	r3, [r3, #1]
 8000898:	461a      	mov	r2, r3
 800089a:	4b3f      	ldr	r3, [pc, #252]	@ (8000998 <switchState+0x248>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000994 <switchState+0x244>)
 80008a6:	601a      	str	r2, [r3, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008a8:	2200      	movs	r2, #0
 80008aa:	493c      	ldr	r1, [pc, #240]	@ (800099c <switchState+0x24c>)
 80008ac:	4840      	ldr	r0, [pc, #256]	@ (80009b0 <switchState+0x260>)
 80008ae:	f002 fe9d 	bl	80035ec <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008b2:	2200      	movs	r2, #0
 80008b4:	493f      	ldr	r1, [pc, #252]	@ (80009b4 <switchState+0x264>)
 80008b6:	483e      	ldr	r0, [pc, #248]	@ (80009b0 <switchState+0x260>)
 80008b8:	f002 ff90 	bl	80037dc <HAL_RTC_SetDate>
            currentState = SET_MONTH; // Return to SLEEP after setting time
 80008bc:	4b34      	ldr	r3, [pc, #208]	@ (8000990 <switchState+0x240>)
 80008be:	2207      	movs	r2, #7
 80008c0:	701a      	strb	r2, [r3, #0]
            break;
 80008c2:	e061      	b.n	8000988 <switchState+0x238>
        case SET_MONTH:
        	counter = tDate->Date * sensitivity;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b33      	ldr	r3, [pc, #204]	@ (8000998 <switchState+0x248>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	fb02 f303 	mul.w	r3, r2, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <switchState+0x244>)
 80008d6:	601a      	str	r2, [r3, #0]
        	if(currentDateType == SYSTEM_DATE){
 80008d8:	4b32      	ldr	r3, [pc, #200]	@ (80009a4 <switchState+0x254>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d109      	bne.n	80008f4 <switchState+0x1a4>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008e0:	2200      	movs	r2, #0
 80008e2:	492e      	ldr	r1, [pc, #184]	@ (800099c <switchState+0x24c>)
 80008e4:	4832      	ldr	r0, [pc, #200]	@ (80009b0 <switchState+0x260>)
 80008e6:	f002 fe81 	bl	80035ec <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008ea:	2200      	movs	r2, #0
 80008ec:	4931      	ldr	r1, [pc, #196]	@ (80009b4 <switchState+0x264>)
 80008ee:	4830      	ldr	r0, [pc, #192]	@ (80009b0 <switchState+0x260>)
 80008f0:	f002 ff74 	bl	80037dc <HAL_RTC_SetDate>
        	}

        	currentState = SET_DAY;
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <switchState+0x240>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	701a      	strb	r2, [r3, #0]
        	break;
 80008fa:	e045      	b.n	8000988 <switchState+0x238>
        case SET_DAY:
        	counter = tDate->Year * sensitivity;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	78db      	ldrb	r3, [r3, #3]
 8000900:	461a      	mov	r2, r3
 8000902:	4b25      	ldr	r3, [pc, #148]	@ (8000998 <switchState+0x248>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	461a      	mov	r2, r3
 800090c:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <switchState+0x244>)
 800090e:	601a      	str	r2, [r3, #0]
        	if(currentDateType == SYSTEM_DATE) {
 8000910:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <switchState+0x254>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d109      	bne.n	800092c <switchState+0x1dc>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000918:	2200      	movs	r2, #0
 800091a:	4920      	ldr	r1, [pc, #128]	@ (800099c <switchState+0x24c>)
 800091c:	4824      	ldr	r0, [pc, #144]	@ (80009b0 <switchState+0x260>)
 800091e:	f002 fe65 	bl	80035ec <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000922:	2200      	movs	r2, #0
 8000924:	4923      	ldr	r1, [pc, #140]	@ (80009b4 <switchState+0x264>)
 8000926:	4822      	ldr	r0, [pc, #136]	@ (80009b0 <switchState+0x260>)
 8000928:	f002 ff58 	bl	80037dc <HAL_RTC_SetDate>
        	}

        	currentState = SET_YEAR;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <switchState+0x240>)
 800092e:	2209      	movs	r2, #9
 8000930:	701a      	strb	r2, [r3, #0]
        	break;
 8000932:	e029      	b.n	8000988 <switchState+0x238>
        case SET_YEAR:
        	if(currentDateType == SYSTEM_DATE) {
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <switchState+0x254>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <switchState+0x200>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800093c:	2200      	movs	r2, #0
 800093e:	4917      	ldr	r1, [pc, #92]	@ (800099c <switchState+0x24c>)
 8000940:	481b      	ldr	r0, [pc, #108]	@ (80009b0 <switchState+0x260>)
 8000942:	f002 fe53 	bl	80035ec <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000946:	2200      	movs	r2, #0
 8000948:	491a      	ldr	r1, [pc, #104]	@ (80009b4 <switchState+0x264>)
 800094a:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <switchState+0x260>)
 800094c:	f002 ff46 	bl	80037dc <HAL_RTC_SetDate>
        	}

        	currentState = SLEEP;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <switchState+0x240>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
        	break;
 8000956:	e017      	b.n	8000988 <switchState+0x238>
        case SET_COLOR:
        	counter = brightness * sensitivity;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <switchState+0x268>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	b29b      	uxth	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <switchState+0x248>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	461a      	mov	r2, r3
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <switchState+0x244>)
 800096c:	601a      	str	r2, [r3, #0]
            currentState = SET_BRIGHTNESS; // After color, set brightness
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <switchState+0x240>)
 8000970:	2206      	movs	r2, #6
 8000972:	701a      	strb	r2, [r3, #0]
            break;
 8000974:	e008      	b.n	8000988 <switchState+0x238>
        case SET_BRIGHTNESS:
            currentState = SLEEP; // Return to SLEEP after setting LED features
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <switchState+0x240>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
            break;
 800097c:	e004      	b.n	8000988 <switchState+0x238>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            currentState = SLEEP;
 800097e:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <switchState+0x240>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
            break;
 8000984:	e000      	b.n	8000988 <switchState+0x238>
            break;
 8000986:	bf00      	nop
    }
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200001be 	.word	0x200001be
 8000994:	20000198 	.word	0x20000198
 8000998:	20000004 	.word	0x20000004
 800099c:	2000019c 	.word	0x2000019c
 80009a0:	200001bc 	.word	0x200001bc
 80009a4:	20000248 	.word	0x20000248
 80009a8:	200001b4 	.word	0x200001b4
 80009ac:	200001b8 	.word	0x200001b8
 80009b0:	20000088 	.word	0x20000088
 80009b4:	200001b0 	.word	0x200001b0
 80009b8:	20000000 	.word	0x20000000

080009bc <checkButtonPress>:

void checkButtonPress(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 80009c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <checkButtonPress+0x40>)
 80009c8:	f002 f854 	bl	8002a74 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 80009d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <checkButtonPress+0x44>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d106      	bne.n	80009e6 <checkButtonPress+0x2a>
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <checkButtonPress+0x2a>
        // Button was pressed - perform actions here.
    	stateChangeRequest = true;
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <checkButtonPress+0x48>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e002      	b.n	80009ec <checkButtonPress+0x30>
    } else {
    	stateChangeRequest = false;
 80009e6:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <checkButtonPress+0x48>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <checkButtonPress+0x44>)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	7013      	strb	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020400 	.word	0x40020400
 8000a00:	2000000f 	.word	0x2000000f
 8000a04:	20000240 	.word	0x20000240

08000a08 <SetHours>:




void SetHours() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af02      	add	r7, sp, #8
    Set_LED(136, 100, 100, 100);
 8000a0e:	2364      	movs	r3, #100	@ 0x64
 8000a10:	2264      	movs	r2, #100	@ 0x64
 8000a12:	2164      	movs	r1, #100	@ 0x64
 8000a14:	2088      	movs	r0, #136	@ 0x88
 8000a16:	f003 ffb3 	bl	8004980 <Set_LED>
    counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <SetHours+0x6c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	b298      	uxth	r0, r3
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <SetHours+0x70>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	0052      	lsls	r2, r2, #1
 8000a2a:	441a      	add	r2, r3
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f7ff fe5d 	bl	80006f4 <clampValue>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <SetHours+0x6c>)
 8000a40:	601a      	str	r2, [r3, #0]
    sTime.Hours = counter / sensitivity;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <SetHours+0x6c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <SetHours+0x70>)
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <SetHours+0x74>)
 8000a52:	701a      	strb	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <SetHours+0x74>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <SetHours+0x74>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	4613      	mov	r3, r2
 8000a62:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <SetHours+0x78>)
 8000a64:	2180      	movs	r1, #128	@ 0x80
 8000a66:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <SetHours+0x7c>)
 8000a68:	f004 f814 	bl	8004a94 <sniprintf>
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000198 	.word	0x20000198
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	2000019c 	.word	0x2000019c
 8000a80:	08005414 	.word	0x08005414
 8000a84:	200001c0 	.word	0x200001c0

08000a88 <SetMinutes>:

void SetMinutes() {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af02      	add	r7, sp, #8
    counter = clampValue(counter, 0, 59 * sensitivity); //59 minutes
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <SetMinutes+0x60>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	b298      	uxth	r0, r3
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <SetMinutes+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	1ad2      	subs	r2, r2, r3
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f7ff fe23 	bl	80006f4 <clampValue>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <SetMinutes+0x60>)
 8000ab4:	601a      	str	r2, [r3, #0]
    sTime.Minutes = counter / sensitivity;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <SetMinutes+0x60>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0c      	ldr	r2, [pc, #48]	@ (8000aec <SetMinutes+0x64>)
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <SetMinutes+0x68>)
 8000ac6:	705a      	strb	r2, [r3, #1]
    snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <SetMinutes+0x68>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <SetMinutes+0x68>)
 8000ad0:	785b      	ldrb	r3, [r3, #1]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <SetMinutes+0x6c>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <SetMinutes+0x70>)
 8000adc:	f003 ffda 	bl	8004a94 <sniprintf>
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000198 	.word	0x20000198
 8000aec:	20000004 	.word	0x20000004
 8000af0:	2000019c 	.word	0x2000019c
 8000af4:	08005414 	.word	0x08005414
 8000af8:	200001c0 	.word	0x200001c0

08000afc <SetMonth>:

int SetMonth(RTC_DateTypeDef * tDate) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 12 * sensitivity); //12 months
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <SetMonth+0x6c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	b298      	uxth	r0, r3
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SetMonth+0x70>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	0052      	lsls	r2, r2, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f7ff fde9 	bl	80006f4 <clampValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <SetMonth+0x6c>)
 8000b28:	601a      	str	r2, [r3, #0]
    tDate->Month = counter / sensitivity;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <SetMonth+0x6c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b6c <SetMonth+0x70>)
 8000b30:	6812      	ldr	r2, [r2, #0]
 8000b32:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	705a      	strb	r2, [r3, #1]
    snprintf(displayStr, sizeof(displayStr), "%02u%02u", tDate->Month, tDate->Date);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	785b      	ldrb	r3, [r3, #1]
 8000b40:	461a      	mov	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <SetMonth+0x74>)
 8000b4c:	2180      	movs	r1, #128	@ 0x80
 8000b4e:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <SetMonth+0x78>)
 8000b50:	f003 ffa0 	bl	8004a94 <sniprintf>
    return counter / sensitivity;
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <SetMonth+0x6c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <SetMonth+0x70>)
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000198 	.word	0x20000198
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	08005420 	.word	0x08005420
 8000b74:	200001c0 	.word	0x200001c0

08000b78 <SetDay>:

int SetDay(RTC_DateTypeDef * tDate) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 31 * sensitivity); //31 days
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <SetDay+0x6c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4a18      	ldr	r2, [pc, #96]	@ (8000be8 <SetDay+0x70>)
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	b292      	uxth	r2, r2
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	0149      	lsls	r1, r1, #5
 8000b90:	1a8a      	subs	r2, r1, r2
 8000b92:	b292      	uxth	r2, r2
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fdac 	bl	80006f4 <clampValue>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <SetDay+0x6c>)
 8000ba2:	601a      	str	r2, [r3, #0]
    //FIXME: user could enter February 31 which is wrong
    tDate->Date = counter / sensitivity;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <SetDay+0x6c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <SetDay+0x70>)
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	709a      	strb	r2, [r3, #2]
    snprintf(displayStr, sizeof(displayStr), "%02u%02u", tDate->Month, tDate->Date);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	789b      	ldrb	r3, [r3, #2]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <SetDay+0x74>)
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <SetDay+0x78>)
 8000bca:	f003 ff63 	bl	8004a94 <sniprintf>
    return counter / sensitivity;
 8000bce:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <SetDay+0x6c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SetDay+0x70>)
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000198 	.word	0x20000198
 8000be8:	20000004 	.word	0x20000004
 8000bec:	08005420 	.word	0x08005420
 8000bf0:	200001c0 	.word	0x200001c0

08000bf4 <SetYear>:

int SetYear(RTC_DateTypeDef * tDate) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 3000 * sensitivity); //12 months
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <SetYear+0x74>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	b298      	uxth	r0, r3
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <SetYear+0x78>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	461a      	mov	r2, r3
 8000c10:	0091      	lsls	r1, r2, #2
 8000c12:	461a      	mov	r2, r3
 8000c14:	460b      	mov	r3, r1
 8000c16:	4413      	add	r3, r2
 8000c18:	461a      	mov	r2, r3
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	2100      	movs	r1, #0
 8000c26:	f7ff fd65 	bl	80006f4 <clampValue>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <SetYear+0x74>)
 8000c30:	601a      	str	r2, [r3, #0]
    tDate->Year = counter / sensitivity;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <SetYear+0x74>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <SetYear+0x78>)
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	70da      	strb	r2, [r3, #3]
    snprintf(displayStr, sizeof(displayStr), "%04u", tDate->Year);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	78db      	ldrb	r3, [r3, #3]
 8000c48:	4a09      	ldr	r2, [pc, #36]	@ (8000c70 <SetYear+0x7c>)
 8000c4a:	2180      	movs	r1, #128	@ 0x80
 8000c4c:	4809      	ldr	r0, [pc, #36]	@ (8000c74 <SetYear+0x80>)
 8000c4e:	f003 ff21 	bl	8004a94 <sniprintf>
    return counter / sensitivity;
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <SetYear+0x74>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SetYear+0x78>)
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000198 	.word	0x20000198
 8000c6c:	20000004 	.word	0x20000004
 8000c70:	0800542c 	.word	0x0800542c
 8000c74:	200001c0 	.word	0x200001c0

08000c78 <SetColor>:

void SetColor() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <SetColor+0x7c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	b298      	uxth	r0, r3
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <SetColor+0x80>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f7ff fd30 	bl	80006f4 <clampValue>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <SetColor+0x7c>)
 8000c9a:	601a      	str	r2, [r3, #0]
    color = counter / sensitivity;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <SetColor+0x7c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a15      	ldr	r2, [pc, #84]	@ (8000cf8 <SetColor+0x80>)
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <SetColor+0x84>)
 8000cac:	801a      	strh	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%04u", color);
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <SetColor+0x84>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <SetColor+0x88>)
 8000cb6:	2180      	movs	r1, #128	@ 0x80
 8000cb8:	4812      	ldr	r0, [pc, #72]	@ (8000d04 <SetColor+0x8c>)
 8000cba:	f003 feeb 	bl	8004a94 <sniprintf>
    Set_LED_Hex(136, getRainbowColor(color));
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <SetColor+0x84>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc5a 	bl	8000580 <getRainbowColor>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2088      	movs	r0, #136	@ 0x88
 8000cd2:	f003 fe91 	bl	80049f8 <Set_LED_Hex>
    Set_LED_Hex(140, getRainbowColor(color));
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <SetColor+0x84>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fc4e 	bl	8000580 <getRainbowColor>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	208c      	movs	r0, #140	@ 0x8c
 8000cea:	f003 fe85 	bl	80049f8 <Set_LED_Hex>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000198 	.word	0x20000198
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	200001bc 	.word	0x200001bc
 8000d00:	0800542c 	.word	0x0800542c
 8000d04:	200001c0 	.word	0x200001c0

08000d08 <SetBrightness>:


void SetBrightness() {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <SetBrightness+0x68>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	b298      	uxth	r0, r3
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <SetBrightness+0x6c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	0fda      	lsrs	r2, r3, #31
 8000d18:	4413      	add	r3, r2
 8000d1a:	105b      	asrs	r3, r3, #1
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	0091      	lsls	r1, r2, #2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	2101      	movs	r1, #1
 8000d36:	f7ff fcdd 	bl	80006f4 <clampValue>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <SetBrightness+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
    brightness = counter / (sensitivity / 2);
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <SetBrightness+0x68>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <SetBrightness+0x6c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	0fd9      	lsrs	r1, r3, #31
 8000d4c:	440b      	add	r3, r1
 8000d4e:	105b      	asrs	r3, r3, #1
 8000d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <SetBrightness+0x70>)
 8000d58:	801a      	strh	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%04u", brightness);
 8000d5a:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <SetBrightness+0x70>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <SetBrightness+0x74>)
 8000d62:	2180      	movs	r1, #128	@ 0x80
 8000d64:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <SetBrightness+0x78>)
 8000d66:	f003 fe95 	bl	8004a94 <sniprintf>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000198 	.word	0x20000198
 8000d74:	20000004 	.word	0x20000004
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	0800542c 	.word	0x0800542c
 8000d80:	200001c0 	.word	0x200001c0

08000d84 <Select>:

void Select() {
 8000d84:	b598      	push	{r3, r4, r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 3 * sensitivity);
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <Select+0x94>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	4a23      	ldr	r2, [pc, #140]	@ (8000e1c <Select+0x98>)
 8000d90:	6812      	ldr	r2, [r2, #0]
 8000d92:	b292      	uxth	r2, r2
 8000d94:	4611      	mov	r1, r2
 8000d96:	0049      	lsls	r1, r1, #1
 8000d98:	440a      	add	r2, r1
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fca8 	bl	80006f4 <clampValue>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <Select+0x94>)
 8000daa:	601a      	str	r2, [r3, #0]
	Set_LED_Hex(LED_SET + (!isSet), getRainbowColor(color));
 8000dac:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <Select+0x9c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	f083 0301 	eor.w	r3, r3, #1
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f103 0488 	add.w	r4, r3, #136	@ 0x88
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <Select+0xa0>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fbdc 	bl	8000580 <getRainbowColor>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f003 fe13 	bl	80049f8 <Set_LED_Hex>
	Blink_LED(LED_SET_TIME - (counter/sensitivity), getRainbowColor(color));
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <Select+0x94>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a11      	ldr	r2, [pc, #68]	@ (8000e1c <Select+0x98>)
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	f1c3 038d 	rsb	r3, r3, #141	@ 0x8d
 8000de4:	b29c      	uxth	r4, r3
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <Select+0xa0>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fbc6 	bl	8000580 <getRainbowColor>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff fc2b 	bl	8000654 <Blink_LED>
	snprintf(displayStr, sizeof(displayStr), "%04u", counter/sensitivity);
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <Select+0x94>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <Select+0x98>)
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e0a:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <Select+0xa4>)
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	4807      	ldr	r0, [pc, #28]	@ (8000e2c <Select+0xa8>)
 8000e10:	f003 fe40 	bl	8004a94 <sniprintf>
}
 8000e14:	bf00      	nop
 8000e16:	bd98      	pop	{r3, r4, r7, pc}
 8000e18:	20000198 	.word	0x20000198
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	2000000d 	.word	0x2000000d
 8000e24:	200001bc 	.word	0x200001bc
 8000e28:	0800542c 	.word	0x0800542c
 8000e2c:	200001c0 	.word	0x200001c0

08000e30 <Wake>:

void Wake() {
 8000e30:	b598      	push	{r3, r4, r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 1);
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <Wake+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc58 	bl	80006f4 <clampValue>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <Wake+0x64>)
 8000e4a:	601a      	str	r2, [r3, #0]
	Blink_LED(LED_SET + counter, getRainbowColor(color));
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <Wake+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	3388      	adds	r3, #136	@ 0x88
 8000e54:	b29c      	uxth	r4, r3
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <Wake+0x68>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fb8e 	bl	8000580 <getRainbowColor>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff fbf3 	bl	8000654 <Blink_LED>
	snprintf(displayStr, sizeof(displayStr), "%04u", LED_SET + counter);
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <Wake+0x64>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3388      	adds	r3, #136	@ 0x88
 8000e74:	4a09      	ldr	r2, [pc, #36]	@ (8000e9c <Wake+0x6c>)
 8000e76:	2180      	movs	r1, #128	@ 0x80
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <Wake+0x70>)
 8000e7a:	f003 fe0b 	bl	8004a94 <sniprintf>

	//counter = 0 -> isSet
	//counter = 1 -> isNotSet
	isSet = !counter;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <Wake+0x64>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf0c      	ite	eq
 8000e86:	2301      	moveq	r3, #1
 8000e88:	2300      	movne	r3, #0
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <Wake+0x74>)
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd98      	pop	{r3, r4, r7, pc}
 8000e94:	20000198 	.word	0x20000198
 8000e98:	200001bc 	.word	0x200001bc
 8000e9c:	0800542c 	.word	0x0800542c
 8000ea0:	200001c0 	.word	0x200001c0
 8000ea4:	2000000d 	.word	0x2000000d

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SCB->VTOR = FLASH_BASE | 0;
 8000eac:	4b5e      	ldr	r3, [pc, #376]	@ (8001028 <main+0x180>)
 8000eae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eb2:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f000 ffa6 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f8d0 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 fa88 	bl	80013d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec0:	f000 fa66 	bl	8001390 <MX_DMA_Init>
  MX_TIM1_Init();
 8000ec4:	f000 f98e 	bl	80011e4 <MX_TIM1_Init>
  MX_RTC_Init();
 8000ec8:	f000 f932 	bl	8001130 <MX_RTC_Init>
  MX_TIM3_Init();
 8000ecc:	f000 fa0c 	bl	80012e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 8000ed0:	213c      	movs	r1, #60	@ 0x3c
 8000ed2:	4856      	ldr	r0, [pc, #344]	@ (800102c <main+0x184>)
 8000ed4:	f002 ffce 	bl	8003e74 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000ed8:	4b54      	ldr	r3, [pc, #336]	@ (800102c <main+0x184>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ede:	4a54      	ldr	r2, [pc, #336]	@ (8001030 <main+0x188>)
 8000ee0:	6013      	str	r3, [r2, #0]

	checkButtonPress();
 8000ee2:	f7ff fd6b 	bl	80009bc <checkButtonPress>
	if(stateChangeRequest){
 8000ee6:	4b53      	ldr	r3, [pc, #332]	@ (8001034 <main+0x18c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01e      	beq.n	8000f2c <main+0x84>
		switchState((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000eee:	4b52      	ldr	r3, [pc, #328]	@ (8001038 <main+0x190>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <main+0x5e>
 8000ef6:	4b50      	ldr	r3, [pc, #320]	@ (8001038 <main+0x190>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d101      	bne.n	8000f02 <main+0x5a>
 8000efe:	4b4f      	ldr	r3, [pc, #316]	@ (800103c <main+0x194>)
 8000f00:	e002      	b.n	8000f08 <main+0x60>
 8000f02:	4b4f      	ldr	r3, [pc, #316]	@ (8001040 <main+0x198>)
 8000f04:	e000      	b.n	8000f08 <main+0x60>
 8000f06:	4b4f      	ldr	r3, [pc, #316]	@ (8001044 <main+0x19c>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fc21 	bl	8000750 <switchState>
		stateChangeRequest = !stateChangeRequest;
 8000f0e:	4b49      	ldr	r3, [pc, #292]	@ (8001034 <main+0x18c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bf14      	ite	ne
 8000f16:	2301      	movne	r3, #1
 8000f18:	2300      	moveq	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f083 0301 	eor.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b42      	ldr	r3, [pc, #264]	@ (8001034 <main+0x18c>)
 8000f2a:	701a      	strb	r2, [r3, #0]
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	4946      	ldr	r1, [pc, #280]	@ (8001048 <main+0x1a0>)
 8000f30:	4846      	ldr	r0, [pc, #280]	@ (800104c <main+0x1a4>)
 8000f32:	f002 fbf5 	bl	8003720 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f36:	2200      	movs	r2, #0
 8000f38:	4942      	ldr	r1, [pc, #264]	@ (8001044 <main+0x19c>)
 8000f3a:	4844      	ldr	r0, [pc, #272]	@ (800104c <main+0x1a4>)
 8000f3c:	f002 fcd2 	bl	80038e4 <HAL_RTC_GetDate>


	switch(currentState) {
 8000f40:	4b43      	ldr	r3, [pc, #268]	@ (8001050 <main+0x1a8>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b09      	cmp	r3, #9
 8000f48:	d864      	bhi.n	8001014 <main+0x16c>
 8000f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f50 <main+0xa8>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000f79 	.word	0x08000f79
 8000f54:	08000f89 	.word	0x08000f89
 8000f58:	08000f8f 	.word	0x08000f8f
 8000f5c:	08000f95 	.word	0x08000f95
 8000f60:	08000f9b 	.word	0x08000f9b
 8000f64:	08001007 	.word	0x08001007
 8000f68:	0800100f 	.word	0x0800100f
 8000f6c:	08000fa1 	.word	0x08000fa1
 8000f70:	08000fc3 	.word	0x08000fc3
 8000f74:	08000fe5 	.word	0x08000fe5
		case SLEEP:
			snprintf(displayStr, 4, "%04u", counter);
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <main+0x188>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a35      	ldr	r2, [pc, #212]	@ (8001054 <main+0x1ac>)
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4835      	ldr	r0, [pc, #212]	@ (8001058 <main+0x1b0>)
 8000f82:	f003 fd87 	bl	8004a94 <sniprintf>
			break;
 8000f86:	e046      	b.n	8001016 <main+0x16e>
		case WAKE:
			Wake();
 8000f88:	f7ff ff52 	bl	8000e30 <Wake>
			break;
 8000f8c:	e043      	b.n	8001016 <main+0x16e>
		case SELECT:
			Select();
 8000f8e:	f7ff fef9 	bl	8000d84 <Select>
			break;
 8000f92:	e040      	b.n	8001016 <main+0x16e>
		case SET_HOURS:
			SetHours();
 8000f94:	f7ff fd38 	bl	8000a08 <SetHours>
			break;
 8000f98:	e03d      	b.n	8001016 <main+0x16e>
		case SET_MINUTES:
			SetMinutes();
 8000f9a:	f7ff fd75 	bl	8000a88 <SetMinutes>
			break;
 8000f9e:	e03a      	b.n	8001016 <main+0x16e>
		case SET_MONTH:
			SetMonth((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <main+0x190>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <main+0x110>
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <main+0x190>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d101      	bne.n	8000fb4 <main+0x10c>
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <main+0x194>)
 8000fb2:	e002      	b.n	8000fba <main+0x112>
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <main+0x198>)
 8000fb6:	e000      	b.n	8000fba <main+0x112>
 8000fb8:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <main+0x19c>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fd9e 	bl	8000afc <SetMonth>
			break;
 8000fc0:	e029      	b.n	8001016 <main+0x16e>
		case SET_DAY:
			SetDay((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <main+0x190>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <main+0x132>
 8000fca:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <main+0x190>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d101      	bne.n	8000fd6 <main+0x12e>
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <main+0x194>)
 8000fd4:	e002      	b.n	8000fdc <main+0x134>
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <main+0x198>)
 8000fd8:	e000      	b.n	8000fdc <main+0x134>
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <main+0x19c>)
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fdcb 	bl	8000b78 <SetDay>
			break;
 8000fe2:	e018      	b.n	8001016 <main+0x16e>
		case SET_YEAR:
			SetYear((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <main+0x190>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <main+0x154>
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <main+0x190>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d101      	bne.n	8000ff8 <main+0x150>
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <main+0x194>)
 8000ff6:	e002      	b.n	8000ffe <main+0x156>
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <main+0x198>)
 8000ffa:	e000      	b.n	8000ffe <main+0x156>
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <main+0x19c>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fdf8 	bl	8000bf4 <SetYear>
			break;
 8001004:	e007      	b.n	8001016 <main+0x16e>
		case SET_COLOR:
			SetColor(&sDate);
 8001006:	480f      	ldr	r0, [pc, #60]	@ (8001044 <main+0x19c>)
 8001008:	f7ff fe36 	bl	8000c78 <SetColor>
			break;
 800100c:	e003      	b.n	8001016 <main+0x16e>
		case SET_BRIGHTNESS:
			SetBrightness();
 800100e:	f7ff fe7b 	bl	8000d08 <SetBrightness>
			break;
 8001012:	e000      	b.n	8001016 <main+0x16e>
		default:
			break;
 8001014:	bf00      	nop
	}

	__HAL_TIM_SET_COUNTER(&htim3, counter);
 8001016:	4b05      	ldr	r3, [pc, #20]	@ (800102c <main+0x184>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <main+0x188>)
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
	Segment_Display(displayStr);
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <main+0x1b0>)
 8001022:	f000 fd6b 	bl	8001afc <Segment_Display>
	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001026:	e757      	b.n	8000ed8 <main+0x30>
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	200000f0 	.word	0x200000f0
 8001030:	20000198 	.word	0x20000198
 8001034:	20000240 	.word	0x20000240
 8001038:	20000248 	.word	0x20000248
 800103c:	200001b8 	.word	0x200001b8
 8001040:	200001b4 	.word	0x200001b4
 8001044:	200001b0 	.word	0x200001b0
 8001048:	2000019c 	.word	0x2000019c
 800104c:	20000088 	.word	0x20000088
 8001050:	200001be 	.word	0x200001be
 8001054:	0800542c 	.word	0x0800542c
 8001058:	200001c0 	.word	0x200001c0

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	@ 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	@ 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fd46 	bl	8004afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <SystemClock_Config+0xcc>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001090:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b22      	ldr	r3, [pc, #136]	@ (800112c <SystemClock_Config+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a21      	ldr	r2, [pc, #132]	@ (800112c <SystemClock_Config+0xd0>)
 80010a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80010b8:	2306      	movs	r3, #6
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c4:	2310      	movs	r3, #16
 80010c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	2302      	movs	r3, #2
 80010ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d0:	2308      	movs	r3, #8
 80010d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010d4:	2348      	movs	r3, #72	@ 0x48
 80010d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fcf7 	bl	8002ad8 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010f0:	f000 f9f2 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2102      	movs	r1, #2
 8001110:	4618      	mov	r0, r3
 8001112:	f001 ff59 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800111c:	f000 f9dc 	bl	80014d8 <Error_Handler>
  }
}
 8001120:	bf00      	nop
 8001122:	3750      	adds	r7, #80	@ 0x50
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001148:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <MX_RTC_Init+0xac>)
 800114a:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <MX_RTC_Init+0xb0>)
 800114c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <MX_RTC_Init+0xac>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001154:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <MX_RTC_Init+0xac>)
 8001156:	227f      	movs	r2, #127	@ 0x7f
 8001158:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <MX_RTC_Init+0xac>)
 800115c:	22ff      	movs	r2, #255	@ 0xff
 800115e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <MX_RTC_Init+0xac>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <MX_RTC_Init+0xac>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800116c:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <MX_RTC_Init+0xac>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001172:	481a      	ldr	r0, [pc, #104]	@ (80011dc <MX_RTC_Init+0xac>)
 8001174:	f002 f9c4 	bl	8003500 <HAL_RTC_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800117e:	f000 f9ab 	bl	80014d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8001182:	2307      	movs	r3, #7
 8001184:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 8001186:	230f      	movs	r3, #15
 8001188:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 800118a:	2332      	movs	r3, #50	@ 0x32
 800118c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	480f      	ldr	r0, [pc, #60]	@ (80011dc <MX_RTC_Init+0xac>)
 800119e:	f002 fa25 	bl	80035ec <HAL_RTC_SetTime>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80011a8:	f000 f996 	bl	80014d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80011ac:	2302      	movs	r3, #2
 80011ae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80011b0:	2301      	movs	r3, #1
 80011b2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 80011b4:	2317      	movs	r3, #23
 80011b6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 80011b8:	2318      	movs	r3, #24
 80011ba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_RTC_Init+0xac>)
 80011c4:	f002 fb0a 	bl	80037dc <HAL_RTC_SetDate>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011ce:	f000 f983 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000088 	.word	0x20000088
 80011e0:	40002800 	.word	0x40002800

080011e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b092      	sub	sp, #72	@ 0x48
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2220      	movs	r2, #32
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fc74 	bl	8004afc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001214:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 8001216:	4a33      	ldr	r2, [pc, #204]	@ (80012e4 <MX_TIM1_Init+0x100>)
 8001218:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001226:	4b2e      	ldr	r3, [pc, #184]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 8001228:	2259      	movs	r2, #89	@ 0x59
 800122a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b2c      	ldr	r3, [pc, #176]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001232:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800123e:	4828      	ldr	r0, [pc, #160]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 8001240:	f002 fc5c 	bl	8003afc <HAL_TIM_PWM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800124a:	f000 f945 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001256:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800125a:	4619      	mov	r1, r3
 800125c:	4820      	ldr	r0, [pc, #128]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 800125e:	f003 fabb 	bl	80047d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001268:	f000 f936 	bl	80014d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126c:	2360      	movs	r3, #96	@ 0x60
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001278:	2300      	movs	r3, #0
 800127a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 8001292:	f002 ff85 	bl	80041a0 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800129c:	f000 f91c 	bl	80014d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 80012c4:	f003 faf6 	bl	80048b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80012ce:	f000 f903 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012d2:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <MX_TIM1_Init+0xfc>)
 80012d4:	f000 fa40 	bl	8001758 <HAL_TIM_MspPostInit>

}
 80012d8:	bf00      	nop
 80012da:	3748      	adds	r7, #72	@ 0x48
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000a8 	.word	0x200000a8
 80012e4:	40010000 	.word	0x40010000

080012e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2224      	movs	r2, #36	@ 0x24
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fc00 	bl	8004afc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <MX_TIM3_Init+0xa0>)
 8001306:	4a21      	ldr	r2, [pc, #132]	@ (800138c <MX_TIM3_Init+0xa4>)
 8001308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <MX_TIM3_Init+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_TIM3_Init+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <MX_TIM3_Init+0xa0>)
 8001318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800131c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_TIM3_Init+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_TIM3_Init+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800132a:	2303      	movs	r3, #3
 800132c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800132e:	2302      	movs	r3, #2
 8001330:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001332:	2301      	movs	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001342:	2301      	movs	r3, #1
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <MX_TIM3_Init+0xa0>)
 8001356:	f002 fce7 	bl	8003d28 <HAL_TIM_Encoder_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001360:	f000 f8ba 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_TIM3_Init+0xa0>)
 8001372:	f003 fa31 	bl	80047d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800137c:	f000 f8ac 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3730      	adds	r7, #48	@ 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200000f0 	.word	0x200000f0
 800138c:	40000400 	.word	0x40000400

08001390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_DMA_Init+0x3c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <MX_DMA_Init+0x3c>)
 80013a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_DMA_Init+0x3c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2108      	movs	r1, #8
 80013b6:	2039      	movs	r0, #57	@ 0x39
 80013b8:	f000 fe95 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013bc:	2039      	movs	r0, #57	@ 0x39
 80013be:	f000 feae 	bl	800211e <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <MX_GPIO_Init+0xfc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a37      	ldr	r2, [pc, #220]	@ (80014cc <MX_GPIO_Init+0xfc>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <MX_GPIO_Init+0xfc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a30      	ldr	r2, [pc, #192]	@ (80014cc <MX_GPIO_Init+0xfc>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a29      	ldr	r2, [pc, #164]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <MX_GPIO_Init+0xfc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001456:	2200      	movs	r2, #0
 8001458:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 800145c:	481c      	ldr	r0, [pc, #112]	@ (80014d0 <MX_GPIO_Init+0x100>)
 800145e:	f001 fb21 	bl	8002aa4 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001462:	2200      	movs	r2, #0
 8001464:	f241 4107 	movw	r1, #5127	@ 0x1407
 8001468:	481a      	ldr	r0, [pc, #104]	@ (80014d4 <MX_GPIO_Init+0x104>)
 800146a:	f001 fb1b 	bl	8002aa4 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800146e:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8001472:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <MX_GPIO_Init+0x100>)
 8001488:	f001 f970 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 800148c:	f241 4307 	movw	r3, #5127	@ 0x1407
 8001490:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <MX_GPIO_Init+0x104>)
 80014a6:	f001 f961 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80014aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_GPIO_Init+0x104>)
 80014c0:	f001 f954 	bl	800276c <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <HAL_MspInit+0x90>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a20      	ldr	r2, [pc, #128]	@ (8001574 <HAL_MspInit+0x90>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <HAL_MspInit+0x90>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <HAL_MspInit+0x90>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <HAL_MspInit+0x90>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <HAL_MspInit+0x90>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2101      	movs	r1, #1
 8001526:	f06f 000b 	mvn.w	r0, #11
 800152a:	f000 fddc 	bl	80020e6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2102      	movs	r1, #2
 8001532:	f06f 000a 	mvn.w	r0, #10
 8001536:	f000 fdd6 	bl	80020e6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2103      	movs	r1, #3
 800153e:	f06f 0009 	mvn.w	r0, #9
 8001542:	f000 fdd0 	bl	80020e6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2104      	movs	r1, #4
 800154a:	f06f 0004 	mvn.w	r0, #4
 800154e:	f000 fdca 	bl	80020e6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2105      	movs	r1, #5
 8001556:	f06f 0003 	mvn.w	r0, #3
 800155a:	f000 fdc4 	bl	80020e6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2106      	movs	r1, #6
 8001562:	f06f 0001 	mvn.w	r0, #1
 8001566:	f000 fdbe 	bl	80020e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a0c      	ldr	r2, [pc, #48]	@ (80015c8 <HAL_RTC_MspInit+0x50>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d111      	bne.n	80015c0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800159c:	2302      	movs	r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 feb8 	bl	8003320 <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80015b6:	f7ff ff8f 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015ba:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <HAL_RTC_MspInit+0x54>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40002800 	.word	0x40002800
 80015cc:	42470e3c 	.word	0x42470e3c

080015d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a32      	ldr	r2, [pc, #200]	@ (80016a8 <HAL_TIM_PWM_MspInit+0xd8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d15d      	bne.n	800169e <HAL_TIM_PWM_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <HAL_TIM_PWM_MspInit+0xdc>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	4a30      	ldr	r2, [pc, #192]	@ (80016ac <HAL_TIM_PWM_MspInit+0xdc>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f2:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <HAL_TIM_PWM_MspInit+0xdc>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80015fe:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 8001600:	4a2c      	ldr	r2, [pc, #176]	@ (80016b4 <HAL_TIM_PWM_MspInit+0xe4>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001604:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 8001606:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800160a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160c:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001618:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 800161a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800161e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001620:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 8001622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001626:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 800162a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001630:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163c:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001642:	481b      	ldr	r0, [pc, #108]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 8001644:	f000 fd86 	bl	8002154 <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800164e:	f7ff ff43 	bl	80014d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a16      	ldr	r2, [pc, #88]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24
 8001658:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <HAL_TIM_PWM_MspInit+0xe0>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2018      	movs	r0, #24
 8001664:	f000 fd3f 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001668:	2018      	movs	r0, #24
 800166a:	f000 fd58 	bl	800211e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2019      	movs	r0, #25
 8001674:	f000 fd37 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001678:	2019      	movs	r0, #25
 800167a:	f000 fd50 	bl	800211e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	201a      	movs	r0, #26
 8001684:	f000 fd2f 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001688:	201a      	movs	r0, #26
 800168a:	f000 fd48 	bl	800211e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	201b      	movs	r0, #27
 8001694:	f000 fd27 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001698:	201b      	movs	r0, #27
 800169a:	f000 fd40 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40010000 	.word	0x40010000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	20000138 	.word	0x20000138
 80016b4:	40026428 	.word	0x40026428

080016b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <HAL_TIM_Encoder_MspInit+0x94>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d133      	bne.n	8001742 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <HAL_TIM_Encoder_MspInit+0x98>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001750 <HAL_TIM_Encoder_MspInit+0x98>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_TIM_Encoder_MspInit+0x98>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_TIM_Encoder_MspInit+0x98>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <HAL_TIM_Encoder_MspInit+0x98>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_TIM_Encoder_MspInit+0x98>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001712:	2330      	movs	r3, #48	@ 0x30
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001722:	2302      	movs	r3, #2
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4809      	ldr	r0, [pc, #36]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x9c>)
 800172e:	f001 f81d 	bl	800276c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2109      	movs	r1, #9
 8001736:	201d      	movs	r0, #29
 8001738:	f000 fcd5 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800173c:	201d      	movs	r0, #29
 800173e:	f000 fcee 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40000400 	.word	0x40000400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <HAL_TIM_MspPostInit+0x68>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d11e      	bne.n	80017b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_TIM_MspPostInit+0x6c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <HAL_TIM_MspPostInit+0x6c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <HAL_TIM_MspPostInit+0x6c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800179a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <HAL_TIM_MspPostInit+0x70>)
 80017b4:	f000 ffda 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40010000 	.word	0x40010000
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <NMI_Handler+0x4>

080017d4 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void){
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <MemManage_Handler+0x4>

080017e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001822:	f000 fb41 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001832:	f002 fbad 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200000a8 	.word	0x200000a8

08001840 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001846:	f002 fba3 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200000a8 	.word	0x200000a8

08001854 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800185a:	f002 fb99 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200000a8 	.word	0x200000a8

08001868 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <TIM1_CC_IRQHandler+0x10>)
 800186e:	f002 fb8f 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200000a8 	.word	0x200000a8

0800187c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <TIM3_IRQHandler+0x10>)
 8001882:	f002 fb85 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000f0 	.word	0x200000f0

08001890 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <DMA2_Stream1_IRQHandler+0x10>)
 8001896:	f000 fd2d 	bl	80022f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000138 	.word	0x20000138

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f003 f91a 	bl	8004b0c <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20020000 	.word	0x20020000
 8001904:	00000400 	.word	0x00000400
 8001908:	2000024c 	.word	0x2000024c
 800190c:	20000548 	.word	0x20000548

08001910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	@ (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	@ (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	@ (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	@ (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	@ (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195e:	f7ff ffd7 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f003 f8d9 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7ff fa9f 	bl	8000ea8 <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800196c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001978:	08005490 	.word	0x08005490
  ldr r2, =_sbss
 800197c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001980:	20000548 	.word	0x20000548

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>
	...

08001988 <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(int segments) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	2104      	movs	r1, #4
 80019a4:	4830      	ldr	r0, [pc, #192]	@ (8001a68 <setSegments+0xe0>)
 80019a6:	f001 f87d 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	2101      	movs	r1, #1
 80019be:	482a      	ldr	r0, [pc, #168]	@ (8001a68 <setSegments+0xe0>)
 80019c0:	f001 f870 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf0c      	ite	eq
 80019ce:	2301      	moveq	r3, #1
 80019d0:	2300      	movne	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	2108      	movs	r1, #8
 80019d8:	4823      	ldr	r0, [pc, #140]	@ (8001a68 <setSegments+0xe0>)
 80019da:	f001 f863 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	2104      	movs	r1, #4
 80019f2:	481e      	ldr	r0, [pc, #120]	@ (8001a6c <setSegments+0xe4>)
 80019f4:	f001 f856 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4817      	ldr	r0, [pc, #92]	@ (8001a6c <setSegments+0xe4>)
 8001a0e:	f001 f849 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	2110      	movs	r1, #16
 8001a26:	4810      	ldr	r0, [pc, #64]	@ (8001a68 <setSegments+0xe0>)
 8001a28:	f001 f83c 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2102      	movs	r1, #2
 8001a40:	4809      	ldr	r0, [pc, #36]	@ (8001a68 <setSegments+0xe0>)
 8001a42:	f001 f82f 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	2140      	movs	r1, #64	@ 0x40
 8001a5a:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <setSegments+0xe0>)
 8001a5c:	f001 f822 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400

08001a70 <activateDigit>:

// Activate a single digit
void activateDigit(int digit) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a8a:	481a      	ldr	r0, [pc, #104]	@ (8001af4 <activateDigit+0x84>)
 8001a8c:	f001 f80a 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aa2:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <activateDigit+0x84>)
 8001aa4:	f000 fffe 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2180      	movs	r1, #128	@ 0x80
 8001ab8:	480f      	ldr	r0, [pc, #60]	@ (8001af8 <activateDigit+0x88>)
 8001aba:	f000 fff3 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	2120      	movs	r1, #32
 8001ace:	480a      	ldr	r0, [pc, #40]	@ (8001af8 <activateDigit+0x88>)
 8001ad0:	f000 ffe8 	bl	8002aa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <activateDigit+0x84>)
 8001ae6:	f000 ffdd 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40020000 	.word	0x40020000

08001afc <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    // Calculate the number of characters to display

    for(int i = 0; i < 4; i++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e172      	b.n	8001df0 <Segment_Display+0x2f4>
        activateDigit(i + 1);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ffae 	bl	8001a70 <activateDigit>

        if(strlen(input) < i) {
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7fe fb63 	bl	80001e0 <strlen>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	f0c0 816b 	bcc.w	8001dfa <Segment_Display+0x2fe>
        	break;
        }


		char ch = input[i];
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	72fb      	strb	r3, [r7, #11]
        switch(ch) {
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	3b20      	subs	r3, #32
 8001b32:	2b5a      	cmp	r3, #90	@ 0x5a
 8001b34:	f200 8152 	bhi.w	8001ddc <Segment_Display+0x2e0>
 8001b38:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <Segment_Display+0x44>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001dcd 	.word	0x08001dcd
 8001b44:	08001ddd 	.word	0x08001ddd
 8001b48:	08001ddd 	.word	0x08001ddd
 8001b4c:	08001ddd 	.word	0x08001ddd
 8001b50:	08001ddd 	.word	0x08001ddd
 8001b54:	08001ddd 	.word	0x08001ddd
 8001b58:	08001ddd 	.word	0x08001ddd
 8001b5c:	08001ddd 	.word	0x08001ddd
 8001b60:	08001ddd 	.word	0x08001ddd
 8001b64:	08001ddd 	.word	0x08001ddd
 8001b68:	08001ddd 	.word	0x08001ddd
 8001b6c:	08001ddd 	.word	0x08001ddd
 8001b70:	08001ddd 	.word	0x08001ddd
 8001b74:	08001dd5 	.word	0x08001dd5
 8001b78:	08001ddd 	.word	0x08001ddd
 8001b7c:	08001ddd 	.word	0x08001ddd
 8001b80:	08001cad 	.word	0x08001cad
 8001b84:	08001cb5 	.word	0x08001cb5
 8001b88:	08001cbd 	.word	0x08001cbd
 8001b8c:	08001cc5 	.word	0x08001cc5
 8001b90:	08001ccd 	.word	0x08001ccd
 8001b94:	08001cd5 	.word	0x08001cd5
 8001b98:	08001cdd 	.word	0x08001cdd
 8001b9c:	08001ce5 	.word	0x08001ce5
 8001ba0:	08001ced 	.word	0x08001ced
 8001ba4:	08001cf5 	.word	0x08001cf5
 8001ba8:	08001ddd 	.word	0x08001ddd
 8001bac:	08001ddd 	.word	0x08001ddd
 8001bb0:	08001ddd 	.word	0x08001ddd
 8001bb4:	08001ddd 	.word	0x08001ddd
 8001bb8:	08001ddd 	.word	0x08001ddd
 8001bbc:	08001ddd 	.word	0x08001ddd
 8001bc0:	08001ddd 	.word	0x08001ddd
 8001bc4:	08001cfd 	.word	0x08001cfd
 8001bc8:	08001d05 	.word	0x08001d05
 8001bcc:	08001d0d 	.word	0x08001d0d
 8001bd0:	08001d15 	.word	0x08001d15
 8001bd4:	08001d1d 	.word	0x08001d1d
 8001bd8:	08001d25 	.word	0x08001d25
 8001bdc:	08001d2d 	.word	0x08001d2d
 8001be0:	08001d35 	.word	0x08001d35
 8001be4:	08001d3d 	.word	0x08001d3d
 8001be8:	08001d45 	.word	0x08001d45
 8001bec:	08001d4d 	.word	0x08001d4d
 8001bf0:	08001d55 	.word	0x08001d55
 8001bf4:	08001d5d 	.word	0x08001d5d
 8001bf8:	08001d65 	.word	0x08001d65
 8001bfc:	08001d6d 	.word	0x08001d6d
 8001c00:	08001d75 	.word	0x08001d75
 8001c04:	08001d7d 	.word	0x08001d7d
 8001c08:	08001d85 	.word	0x08001d85
 8001c0c:	08001d8d 	.word	0x08001d8d
 8001c10:	08001d95 	.word	0x08001d95
 8001c14:	08001d9d 	.word	0x08001d9d
 8001c18:	08001da5 	.word	0x08001da5
 8001c1c:	08001dad 	.word	0x08001dad
 8001c20:	08001db5 	.word	0x08001db5
 8001c24:	08001dbd 	.word	0x08001dbd
 8001c28:	08001dc5 	.word	0x08001dc5
 8001c2c:	08001ddd 	.word	0x08001ddd
 8001c30:	08001ddd 	.word	0x08001ddd
 8001c34:	08001ddd 	.word	0x08001ddd
 8001c38:	08001ddd 	.word	0x08001ddd
 8001c3c:	08001ddd 	.word	0x08001ddd
 8001c40:	08001ddd 	.word	0x08001ddd
 8001c44:	08001cfd 	.word	0x08001cfd
 8001c48:	08001d05 	.word	0x08001d05
 8001c4c:	08001d0d 	.word	0x08001d0d
 8001c50:	08001d15 	.word	0x08001d15
 8001c54:	08001d1d 	.word	0x08001d1d
 8001c58:	08001d25 	.word	0x08001d25
 8001c5c:	08001d2d 	.word	0x08001d2d
 8001c60:	08001d35 	.word	0x08001d35
 8001c64:	08001d3d 	.word	0x08001d3d
 8001c68:	08001d45 	.word	0x08001d45
 8001c6c:	08001d4d 	.word	0x08001d4d
 8001c70:	08001d55 	.word	0x08001d55
 8001c74:	08001d5d 	.word	0x08001d5d
 8001c78:	08001d65 	.word	0x08001d65
 8001c7c:	08001d6d 	.word	0x08001d6d
 8001c80:	08001d75 	.word	0x08001d75
 8001c84:	08001d7d 	.word	0x08001d7d
 8001c88:	08001d85 	.word	0x08001d85
 8001c8c:	08001d8d 	.word	0x08001d8d
 8001c90:	08001d95 	.word	0x08001d95
 8001c94:	08001d9d 	.word	0x08001d9d
 8001c98:	08001da5 	.word	0x08001da5
 8001c9c:	08001dad 	.word	0x08001dad
 8001ca0:	08001db5 	.word	0x08001db5
 8001ca4:	08001dbd 	.word	0x08001dbd
 8001ca8:	08001dc5 	.word	0x08001dc5
            case '0':
                setSegments(0x3F);
 8001cac:	203f      	movs	r0, #63	@ 0x3f
 8001cae:	f7ff fe6b 	bl	8001988 <setSegments>
                break;
 8001cb2:	e097      	b.n	8001de4 <Segment_Display+0x2e8>
            case '1':
                setSegments(0x06);
 8001cb4:	2006      	movs	r0, #6
 8001cb6:	f7ff fe67 	bl	8001988 <setSegments>
                break;
 8001cba:	e093      	b.n	8001de4 <Segment_Display+0x2e8>
            case '2':
                setSegments(0x5B);
 8001cbc:	205b      	movs	r0, #91	@ 0x5b
 8001cbe:	f7ff fe63 	bl	8001988 <setSegments>
                break;
 8001cc2:	e08f      	b.n	8001de4 <Segment_Display+0x2e8>
            case '3':
                setSegments(0x4F);
 8001cc4:	204f      	movs	r0, #79	@ 0x4f
 8001cc6:	f7ff fe5f 	bl	8001988 <setSegments>
                break;
 8001cca:	e08b      	b.n	8001de4 <Segment_Display+0x2e8>
            case '4':
                setSegments(0x66);
 8001ccc:	2066      	movs	r0, #102	@ 0x66
 8001cce:	f7ff fe5b 	bl	8001988 <setSegments>
                break;
 8001cd2:	e087      	b.n	8001de4 <Segment_Display+0x2e8>
            case '5':
                setSegments(0x6D);
 8001cd4:	206d      	movs	r0, #109	@ 0x6d
 8001cd6:	f7ff fe57 	bl	8001988 <setSegments>
                break;
 8001cda:	e083      	b.n	8001de4 <Segment_Display+0x2e8>
            case '6':
                setSegments(0x7D);
 8001cdc:	207d      	movs	r0, #125	@ 0x7d
 8001cde:	f7ff fe53 	bl	8001988 <setSegments>
                break;
 8001ce2:	e07f      	b.n	8001de4 <Segment_Display+0x2e8>
            case '7':
                setSegments(0x07);
 8001ce4:	2007      	movs	r0, #7
 8001ce6:	f7ff fe4f 	bl	8001988 <setSegments>
                break;
 8001cea:	e07b      	b.n	8001de4 <Segment_Display+0x2e8>
            case '8':
                setSegments(0x7F);
 8001cec:	207f      	movs	r0, #127	@ 0x7f
 8001cee:	f7ff fe4b 	bl	8001988 <setSegments>
                break;
 8001cf2:	e077      	b.n	8001de4 <Segment_Display+0x2e8>
            case '9':
                setSegments(0x6F);
 8001cf4:	206f      	movs	r0, #111	@ 0x6f
 8001cf6:	f7ff fe47 	bl	8001988 <setSegments>
                break;
 8001cfa:	e073      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'a':
            case 'A':
                setSegments(0x77);
 8001cfc:	2077      	movs	r0, #119	@ 0x77
 8001cfe:	f7ff fe43 	bl	8001988 <setSegments>
                break;
 8001d02:	e06f      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'b':
            case 'B':
                setSegments(0x7C);
 8001d04:	207c      	movs	r0, #124	@ 0x7c
 8001d06:	f7ff fe3f 	bl	8001988 <setSegments>
                break;
 8001d0a:	e06b      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'c':
            case 'C':
                setSegments(0x39);
 8001d0c:	2039      	movs	r0, #57	@ 0x39
 8001d0e:	f7ff fe3b 	bl	8001988 <setSegments>
                break;
 8001d12:	e067      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'd':
            case 'D':
                setSegments(0x5E);
 8001d14:	205e      	movs	r0, #94	@ 0x5e
 8001d16:	f7ff fe37 	bl	8001988 <setSegments>
                break;
 8001d1a:	e063      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'e':
            case 'E':
                setSegments(0x79);
 8001d1c:	2079      	movs	r0, #121	@ 0x79
 8001d1e:	f7ff fe33 	bl	8001988 <setSegments>
                break;
 8001d22:	e05f      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'f':
            case 'F':
                setSegments(0x71);
 8001d24:	2071      	movs	r0, #113	@ 0x71
 8001d26:	f7ff fe2f 	bl	8001988 <setSegments>
                break;
 8001d2a:	e05b      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'g':
            case 'G':
                setSegments(0x3D);
 8001d2c:	203d      	movs	r0, #61	@ 0x3d
 8001d2e:	f7ff fe2b 	bl	8001988 <setSegments>
                break;
 8001d32:	e057      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'h':
            case 'H':
                setSegments(0x76);
 8001d34:	2076      	movs	r0, #118	@ 0x76
 8001d36:	f7ff fe27 	bl	8001988 <setSegments>
                break;
 8001d3a:	e053      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'i':
            case 'I':
                setSegments(0x30);
 8001d3c:	2030      	movs	r0, #48	@ 0x30
 8001d3e:	f7ff fe23 	bl	8001988 <setSegments>
                break;
 8001d42:	e04f      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'j':
            case 'J':
                setSegments(0x1E);
 8001d44:	201e      	movs	r0, #30
 8001d46:	f7ff fe1f 	bl	8001988 <setSegments>
                break;
 8001d4a:	e04b      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 8001d4c:	2076      	movs	r0, #118	@ 0x76
 8001d4e:	f7ff fe1b 	bl	8001988 <setSegments>
                break;
 8001d52:	e047      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'l':
            case 'L':
                setSegments(0x38);
 8001d54:	2038      	movs	r0, #56	@ 0x38
 8001d56:	f7ff fe17 	bl	8001988 <setSegments>
                break;
 8001d5a:	e043      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 8001d5c:	2037      	movs	r0, #55	@ 0x37
 8001d5e:	f7ff fe13 	bl	8001988 <setSegments>
                break;
 8001d62:	e03f      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'n':
            case 'N':
                setSegments(0x54);
 8001d64:	2054      	movs	r0, #84	@ 0x54
 8001d66:	f7ff fe0f 	bl	8001988 <setSegments>
                break;
 8001d6a:	e03b      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'o':
            case 'O':
                setSegments(0x3F);
 8001d6c:	203f      	movs	r0, #63	@ 0x3f
 8001d6e:	f7ff fe0b 	bl	8001988 <setSegments>
                break;
 8001d72:	e037      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'p':
            case 'P':
                setSegments(0x73);
 8001d74:	2073      	movs	r0, #115	@ 0x73
 8001d76:	f7ff fe07 	bl	8001988 <setSegments>
                break;
 8001d7a:	e033      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'q':
            case 'Q':
                setSegments(0x67);
 8001d7c:	2067      	movs	r0, #103	@ 0x67
 8001d7e:	f7ff fe03 	bl	8001988 <setSegments>
                break;
 8001d82:	e02f      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'r':
            case 'R':
                setSegments(0x50);
 8001d84:	2050      	movs	r0, #80	@ 0x50
 8001d86:	f7ff fdff 	bl	8001988 <setSegments>
                break;
 8001d8a:	e02b      	b.n	8001de4 <Segment_Display+0x2e8>
            case 's':
            case 'S':
                setSegments(0x6D);
 8001d8c:	206d      	movs	r0, #109	@ 0x6d
 8001d8e:	f7ff fdfb 	bl	8001988 <setSegments>
                break;
 8001d92:	e027      	b.n	8001de4 <Segment_Display+0x2e8>
            case 't':
            case 'T':
                setSegments(0x78);
 8001d94:	2078      	movs	r0, #120	@ 0x78
 8001d96:	f7ff fdf7 	bl	8001988 <setSegments>
                break;
 8001d9a:	e023      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'u':
            case 'U':
                setSegments(0x3E);
 8001d9c:	203e      	movs	r0, #62	@ 0x3e
 8001d9e:	f7ff fdf3 	bl	8001988 <setSegments>
                break;
 8001da2:	e01f      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8001da4:	203e      	movs	r0, #62	@ 0x3e
 8001da6:	f7ff fdef 	bl	8001988 <setSegments>
                break;
 8001daa:	e01b      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 8001dac:	202a      	movs	r0, #42	@ 0x2a
 8001dae:	f7ff fdeb 	bl	8001988 <setSegments>
                break;
 8001db2:	e017      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8001db4:	2076      	movs	r0, #118	@ 0x76
 8001db6:	f7ff fde7 	bl	8001988 <setSegments>
                break;
 8001dba:	e013      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 8001dbc:	206e      	movs	r0, #110	@ 0x6e
 8001dbe:	f7ff fde3 	bl	8001988 <setSegments>
                break;
 8001dc2:	e00f      	b.n	8001de4 <Segment_Display+0x2e8>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8001dc4:	205b      	movs	r0, #91	@ 0x5b
 8001dc6:	f7ff fddf 	bl	8001988 <setSegments>
                break;
 8001dca:	e00b      	b.n	8001de4 <Segment_Display+0x2e8>
            case ' ':
                // Blank character
                setSegments(0x00);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fddb 	bl	8001988 <setSegments>
                break;
 8001dd2:	e007      	b.n	8001de4 <Segment_Display+0x2e8>
            case '-':
            	setSegments(0b000100000);
 8001dd4:	2020      	movs	r0, #32
 8001dd6:	f7ff fdd7 	bl	8001988 <setSegments>
            	break;
 8001dda:	e003      	b.n	8001de4 <Segment_Display+0x2e8>
            default:
            	setSegments(0x00);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fdd3 	bl	8001988 <setSegments>
                break;
 8001de2:	bf00      	nop
        }
        HAL_Delay(5);
 8001de4:	2005      	movs	r0, #5
 8001de6:	f000 f87f 	bl	8001ee8 <HAL_Delay>
    for(int i = 0; i < 4; i++) {
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3301      	adds	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f77f ae89 	ble.w	8001b0a <Segment_Display+0xe>
    }
}
 8001df8:	e000      	b.n	8001dfc <Segment_Display+0x300>
        	break;
 8001dfa:	bf00      	nop
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f94f 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	200f      	movs	r0, #15
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fb54 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f967 	bl	800213a <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 f92f 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	@ (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	20000018 	.word	0x20000018
 8001ea4:	20000014 	.word	0x20000014

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	20000250 	.word	0x20000250

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000250 	.word	0x20000250

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_Delay+0x44>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffde 	bl	8001ed0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
  {
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000018 	.word	0x20000018

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	@ (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	@ (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	@ (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	@ 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff3e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff31 	bl	8001f94 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff feb6 	bl	8001ed0 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e099      	b.n	80022a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002190:	e00f      	b.n	80021b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002192:	f7ff fe9d 	bl	8001ed0 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b05      	cmp	r3, #5
 800219e:	d908      	bls.n	80021b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e078      	b.n	80022a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e8      	bne.n	8002192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4b38      	ldr	r3, [pc, #224]	@ (80022ac <HAL_DMA_Init+0x158>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	2b04      	cmp	r3, #4
 800220a:	d107      	bne.n	800221c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	4313      	orrs	r3, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	2b04      	cmp	r3, #4
 8002244:	d117      	bne.n	8002276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fa0b 	bl	8002674 <DMA_CheckFifoParam>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2240      	movs	r2, #64	@ 0x40
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002272:	2301      	movs	r3, #1
 8002274:	e016      	b.n	80022a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f9c2 	bl	8002608 <DMA_CalcBaseAndBitshift>
 8002284:	4603      	mov	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	223f      	movs	r2, #63	@ 0x3f
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	f010803f 	.word	0xf010803f

080022b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d004      	beq.n	80022ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2280      	movs	r2, #128	@ 0x80
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00c      	b.n	80022e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2205      	movs	r2, #5
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002300:	4b8e      	ldr	r3, [pc, #568]	@ (800253c <HAL_DMA_IRQHandler+0x248>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a8e      	ldr	r2, [pc, #568]	@ (8002540 <HAL_DMA_IRQHandler+0x24c>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0a9b      	lsrs	r3, r3, #10
 800230c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	2208      	movs	r2, #8
 8002320:	409a      	lsls	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d01a      	beq.n	8002360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d013      	beq.n	8002360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0204 	bic.w	r2, r2, #4
 8002346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234c:	2208      	movs	r2, #8
 800234e:	409a      	lsls	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002364:	2201      	movs	r2, #1
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d012      	beq.n	8002396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	2201      	movs	r2, #1
 8002384:	409a      	lsls	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238e:	f043 0202 	orr.w	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239a:	2204      	movs	r2, #4
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00b      	beq.n	80023cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b8:	2204      	movs	r2, #4
 80023ba:	409a      	lsls	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	f043 0204 	orr.w	r2, r3, #4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	2210      	movs	r2, #16
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d043      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d03c      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	2210      	movs	r2, #16
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d018      	beq.n	8002436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d024      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
 8002422:	e01f      	b.n	8002464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	e016      	b.n	8002464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0208 	bic.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	2220      	movs	r2, #32
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 808f 	beq.w	8002594 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8087 	beq.w	8002594 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248a:	2220      	movs	r2, #32
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b05      	cmp	r3, #5
 800249c:	d136      	bne.n	800250c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0216 	bic.w	r2, r2, #22
 80024ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <HAL_DMA_IRQHandler+0x1da>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0208 	bic.w	r2, r2, #8
 80024dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e2:	223f      	movs	r2, #63	@ 0x3f
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d07e      	beq.n	8002600 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
        }
        return;
 800250a:	e079      	b.n	8002600 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01d      	beq.n	8002556 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10d      	bne.n	8002544 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252c:	2b00      	cmp	r3, #0
 800252e:	d031      	beq.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e02c      	b.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
 800253a:	bf00      	nop
 800253c:	20000010 	.word	0x20000010
 8002540:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d023      	beq.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
 8002554:	e01e      	b.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0210 	bic.w	r2, r2, #16
 8002572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002598:	2b00      	cmp	r3, #0
 800259a:	d032      	beq.n	8002602 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2205      	movs	r2, #5
 80025ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	3301      	adds	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d307      	bcc.n	80025dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f2      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x2cc>
 80025da:	e000      	b.n	80025de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
 80025fe:	e000      	b.n	8002602 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002600:	bf00      	nop
    }
  }
}
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3b10      	subs	r3, #16
 8002618:	4a14      	ldr	r2, [pc, #80]	@ (800266c <DMA_CalcBaseAndBitshift+0x64>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002622:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <DMA_CalcBaseAndBitshift+0x68>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d909      	bls.n	800264a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	@ 0x58
 8002648:	e007      	b.n	800265a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002652:	f023 0303 	bic.w	r3, r3, #3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	aaaaaaab 	.word	0xaaaaaaab
 8002670:	08005444 	.word	0x08005444

08002674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11f      	bne.n	80026ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d856      	bhi.n	8002742 <DMA_CheckFifoParam+0xce>
 8002694:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <DMA_CheckFifoParam+0x28>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026bf 	.word	0x080026bf
 80026a4:	080026ad 	.word	0x080026ad
 80026a8:	08002743 	.word	0x08002743
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d046      	beq.n	8002746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e043      	b.n	8002746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026c6:	d140      	bne.n	800274a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e03d      	b.n	800274a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d6:	d121      	bne.n	800271c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d837      	bhi.n	800274e <DMA_CheckFifoParam+0xda>
 80026de:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <DMA_CheckFifoParam+0x70>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	080026fb 	.word	0x080026fb
 80026ec:	080026f5 	.word	0x080026f5
 80026f0:	0800270d 	.word	0x0800270d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e030      	b.n	800275c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d025      	beq.n	8002752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e022      	b.n	8002752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800271a:	e01c      	b.n	8002756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d903      	bls.n	800272a <DMA_CheckFifoParam+0xb6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002728:	e018      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      break;
 800272e:	e015      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e00b      	b.n	800275a <DMA_CheckFifoParam+0xe6>
      break;
 8002742:	bf00      	nop
 8002744:	e00a      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e008      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e006      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e004      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;   
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
    }
  } 
  
  return status; 
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e159      	b.n	8002a3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 8148 	bne.w	8002a36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d005      	beq.n	80027be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d130      	bne.n	8002820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0201 	and.w	r2, r3, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b03      	cmp	r3, #3
 800282a:	d017      	beq.n	800285c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a2 	beq.w	8002a36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b57      	ldr	r3, [pc, #348]	@ (8002a54 <HAL_GPIO_Init+0x2e8>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	4a56      	ldr	r2, [pc, #344]	@ (8002a54 <HAL_GPIO_Init+0x2e8>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002900:	6453      	str	r3, [r2, #68]	@ 0x44
 8002902:	4b54      	ldr	r3, [pc, #336]	@ (8002a54 <HAL_GPIO_Init+0x2e8>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290e:	4a52      	ldr	r2, [pc, #328]	@ (8002a58 <HAL_GPIO_Init+0x2ec>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a49      	ldr	r2, [pc, #292]	@ (8002a5c <HAL_GPIO_Init+0x2f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_GPIO_Init+0x202>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a48      	ldr	r2, [pc, #288]	@ (8002a60 <HAL_GPIO_Init+0x2f4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x1fe>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a47      	ldr	r2, [pc, #284]	@ (8002a64 <HAL_GPIO_Init+0x2f8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x1fa>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a46      	ldr	r2, [pc, #280]	@ (8002a68 <HAL_GPIO_Init+0x2fc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x1f6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a45      	ldr	r2, [pc, #276]	@ (8002a6c <HAL_GPIO_Init+0x300>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x1f2>
 800295a:	2304      	movs	r3, #4
 800295c:	e008      	b.n	8002970 <HAL_GPIO_Init+0x204>
 800295e:	2307      	movs	r3, #7
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x204>
 8002962:	2303      	movs	r3, #3
 8002964:	e004      	b.n	8002970 <HAL_GPIO_Init+0x204>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x204>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x204>
 800296e:	2300      	movs	r3, #0
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f002 0203 	and.w	r2, r2, #3
 8002976:	0092      	lsls	r2, r2, #2
 8002978:	4093      	lsls	r3, r2
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002980:	4935      	ldr	r1, [pc, #212]	@ (8002a58 <HAL_GPIO_Init+0x2ec>)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298e:	4b38      	ldr	r3, [pc, #224]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029dc:	4a24      	ldr	r2, [pc, #144]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e2:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a06:	4a1a      	ldr	r2, [pc, #104]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a30:	4a0f      	ldr	r2, [pc, #60]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b0f      	cmp	r3, #15
 8002a40:	f67f aea2 	bls.w	8002788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3724      	adds	r7, #36	@ 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40013800 	.word	0x40013800
 8002a5c:	40020000 	.word	0x40020000
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020800 	.word	0x40020800
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40013c00 	.word	0x40013c00

08002a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e001      	b.n	8002a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac0:	e003      	b.n	8002aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	041a      	lsls	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e267      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d075      	beq.n	8002be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af6:	4b88      	ldr	r3, [pc, #544]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b85      	ldr	r3, [pc, #532]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d112      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b82      	ldr	r3, [pc, #520]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d157      	bne.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e242      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x74>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x98>
 8002b56:	4b70      	ldr	r3, [pc, #448]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b6d      	ldr	r3, [pc, #436]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6c      	ldr	r2, [pc, #432]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b70:	4b69      	ldr	r3, [pc, #420]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a68      	ldr	r2, [pc, #416]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a65      	ldr	r2, [pc, #404]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7ff f99e 	bl	8001ed0 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7ff f99a 	bl	8001ed0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e207      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b5b      	ldr	r3, [pc, #364]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f98a 	bl	8001ed0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff f986 	bl	8001ed0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1f3      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b51      	ldr	r3, [pc, #324]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bee:	4b4a      	ldr	r3, [pc, #296]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b44      	ldr	r3, [pc, #272]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b41      	ldr	r3, [pc, #260]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c7      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4937      	ldr	r1, [pc, #220]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7ff f93f 	bl	8001ed0 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7ff f93b 	bl	8001ed0 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1a8      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b28      	ldr	r3, [pc, #160]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4925      	ldr	r1, [pc, #148]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7ff f91e 	bl	8001ed0 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7ff f91a 	bl	8001ed0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e187      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d036      	beq.n	8002d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7ff f8fe 	bl	8001ed0 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7ff f8fa 	bl	8001ed0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e167      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x200>
 8002cf6:	e01b      	b.n	8002d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7ff f8e7 	bl	8001ed0 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d06:	f7ff f8e3 	bl	8001ed0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d907      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e150      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	42470000 	.word	0x42470000
 8002d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b88      	ldr	r3, [pc, #544]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ea      	bne.n	8002d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8097 	beq.w	8002e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b81      	ldr	r3, [pc, #516]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b7d      	ldr	r3, [pc, #500]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	4a7c      	ldr	r2, [pc, #496]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b77      	ldr	r3, [pc, #476]	@ (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b74      	ldr	r3, [pc, #464]	@ (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a73      	ldr	r2, [pc, #460]	@ (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7ff f8a3 	bl	8001ed0 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7ff f89f 	bl	8001ed0 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e10c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2ea>
 8002db4:	4b64      	ldr	r3, [pc, #400]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4a63      	ldr	r2, [pc, #396]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x30c>
 8002dca:	4b5f      	ldr	r3, [pc, #380]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	4a5e      	ldr	r2, [pc, #376]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	4a5b      	ldr	r2, [pc, #364]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002de4:	4b58      	ldr	r3, [pc, #352]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de8:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df0:	4b55      	ldr	r3, [pc, #340]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	4a54      	ldr	r2, [pc, #336]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7ff f864 	bl	8001ed0 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7ff f860 	bl	8001ed0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0cb      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	4b49      	ldr	r3, [pc, #292]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ee      	beq.n	8002e0c <HAL_RCC_OscConfig+0x334>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7ff f84e 	bl	8001ed0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7ff f84a 	bl	8001ed0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0b5      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ee      	bne.n	8002e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	4a38      	ldr	r2, [pc, #224]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a1 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e76:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d05c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d141      	bne.n	8002f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b31      	ldr	r3, [pc, #196]	@ (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7ff f81e 	bl	8001ed0 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7ff f81a 	bl	8001ed0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e087      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b27      	ldr	r3, [pc, #156]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	491b      	ldr	r1, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fff3 	bl	8001ed0 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe ffef 	bl	8001ed0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e05c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x416>
 8002f0c:	e054      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe ffdc 	bl	8001ed0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe ffd8 	bl	8001ed0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e045      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x444>
 8002f3a:	e03d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e038      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d121      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d11a      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe ff0a 	bl	8001ed0 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe ff06 	bl	8001ed0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f821 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fe6a 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08005434 	.word	0x08005434
 800318c:	20000010 	.word	0x20000010
 8003190:	20000014 	.word	0x20000014

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b090      	sub	sp, #64	@ 0x40
 800319a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a4:	2300      	movs	r3, #0
 80031a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ac:	4b59      	ldr	r3, [pc, #356]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d00d      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x40>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	f200 80a1 	bhi.w	8003300 <HAL_RCC_GetSysClockFreq+0x16c>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x34>
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x3a>
 80031c6:	e09b      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b53      	ldr	r3, [pc, #332]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x184>)
 80031ca:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80031cc:	e09b      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ce:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 80031d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031d2:	e098      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031de:	4b4d      	ldr	r3, [pc, #308]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d028      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	2200      	movs	r2, #0
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031fc:	2100      	movs	r1, #0
 80031fe:	4b47      	ldr	r3, [pc, #284]	@ (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 8003200:	fb03 f201 	mul.w	r2, r3, r1
 8003204:	2300      	movs	r3, #0
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	4413      	add	r3, r2
 800320c:	4a43      	ldr	r2, [pc, #268]	@ (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 800320e:	fba0 1202 	umull	r1, r2, r0, r2
 8003212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003214:	460a      	mov	r2, r1
 8003216:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800321a:	4413      	add	r3, r2
 800321c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800321e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003220:	2200      	movs	r2, #0
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	61fa      	str	r2, [r7, #28]
 8003226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800322e:	f7fd f82f 	bl	8000290 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4613      	mov	r3, r2
 8003238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800323a:	e053      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323c:	4b35      	ldr	r3, [pc, #212]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	2200      	movs	r2, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	617a      	str	r2, [r7, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800324e:	f04f 0b00 	mov.w	fp, #0
 8003252:	4652      	mov	r2, sl
 8003254:	465b      	mov	r3, fp
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	0159      	lsls	r1, r3, #5
 8003260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003264:	0150      	lsls	r0, r2, #5
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	ebb2 080a 	subs.w	r8, r2, sl
 800326e:	eb63 090b 	sbc.w	r9, r3, fp
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800327e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003282:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003286:	ebb2 0408 	subs.w	r4, r2, r8
 800328a:	eb63 0509 	sbc.w	r5, r3, r9
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	00eb      	lsls	r3, r5, #3
 8003298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800329c:	00e2      	lsls	r2, r4, #3
 800329e:	4614      	mov	r4, r2
 80032a0:	461d      	mov	r5, r3
 80032a2:	eb14 030a 	adds.w	r3, r4, sl
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	eb45 030b 	adc.w	r3, r5, fp
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ba:	4629      	mov	r1, r5
 80032bc:	028b      	lsls	r3, r1, #10
 80032be:	4621      	mov	r1, r4
 80032c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c4:	4621      	mov	r1, r4
 80032c6:	028a      	lsls	r2, r1, #10
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ce:	2200      	movs	r2, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	60fa      	str	r2, [r7, #12]
 80032d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d8:	f7fc ffda 	bl	8000290 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4613      	mov	r3, r2
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	3301      	adds	r3, #1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80032f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003300:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x184>)
 8003302:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003308:	4618      	mov	r0, r3
 800330a:	3740      	adds	r7, #64	@ 0x40
 800330c:	46bd      	mov	sp, r7
 800330e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	00f42400 	.word	0x00f42400
 800331c:	016e3600 	.word	0x016e3600

08003320 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003344:	2b00      	cmp	r3, #0
 8003346:	d038      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003348:	4b68      	ldr	r3, [pc, #416]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800334e:	f7fe fdbf 	bl	8001ed0 <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003356:	f7fe fdbb 	bl	8001ed0 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0bd      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003368:	4b61      	ldr	r3, [pc, #388]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	071b      	lsls	r3, r3, #28
 8003386:	495a      	ldr	r1, [pc, #360]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800338e:	4b57      	ldr	r3, [pc, #348]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003394:	f7fe fd9c 	bl	8001ed0 <HAL_GetTick>
 8003398:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800339c:	f7fe fd98 	bl	8001ed0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e09a      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ae:	4b50      	ldr	r3, [pc, #320]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8083 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	4b48      	ldr	r3, [pc, #288]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	4a47      	ldr	r2, [pc, #284]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d8:	4b45      	ldr	r3, [pc, #276]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033e4:	4b43      	ldr	r3, [pc, #268]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a42      	ldr	r2, [pc, #264]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fd6e 	bl	8001ed0 <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033f8:	f7fe fd6a 	bl	8001ed0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e06c      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800340a:	4b3a      	ldr	r3, [pc, #232]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003416:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02f      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	429a      	cmp	r2, r3
 8003432:	d028      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003434:	4b2e      	ldr	r3, [pc, #184]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800343e:	4b2e      	ldr	r3, [pc, #184]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003444:	4b2c      	ldr	r3, [pc, #176]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800344a:	4a29      	ldr	r2, [pc, #164]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003450:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d114      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fd38 	bl	8001ed0 <HAL_GetTick>
 8003460:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003462:	e00a      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003464:	f7fe fd34 	bl	8001ed0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e034      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ee      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003492:	d10d      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003494:	4b16      	ldr	r3, [pc, #88]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80034a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a8:	4911      	ldr	r1, [pc, #68]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
 80034ae:	e005      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80034b0:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a0e      	ldr	r2, [pc, #56]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80034ba:	6093      	str	r3, [r2, #8]
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c8:	4909      	ldr	r1, [pc, #36]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	7d1a      	ldrb	r2, [r3, #20]
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80034e0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	42470068 	.word	0x42470068
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42470e40 	.word	0x42470e40
 80034fc:	424711e0 	.word	0x424711e0

08003500 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e066      	b.n	80035e4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7f5b      	ldrb	r3, [r3, #29]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe f826 	bl	8001578 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	22ca      	movs	r2, #202	@ 0xca
 8003538:	625a      	str	r2, [r3, #36]	@ 0x24
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2253      	movs	r2, #83	@ 0x53
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa45 	bl	80039d2 <RTC_EnterInitMode>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d12c      	bne.n	80035ac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003564:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6899      	ldr	r1, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68d2      	ldr	r2, [r2, #12]
 800358c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6919      	ldr	r1, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	041a      	lsls	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa4c 	bl	8003a40 <RTC_ExitInitMode>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d113      	bne.n	80035da <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035c0:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	22ff      	movs	r2, #255	@ 0xff
 80035e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	7f1b      	ldrb	r3, [r3, #28]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_RTC_SetTime+0x1c>
 8003604:	2302      	movs	r3, #2
 8003606:	e087      	b.n	8003718 <HAL_RTC_SetTime+0x12c>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2202      	movs	r2, #2
 8003612:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d126      	bne.n	8003668 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fa29 	bl	8003a8a <RTC_ByteToBcd2>
 8003638:	4603      	mov	r3, r0
 800363a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fa22 	bl	8003a8a <RTC_ByteToBcd2>
 8003646:	4603      	mov	r3, r0
 8003648:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800364a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	789b      	ldrb	r3, [r3, #2]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fa1a 	bl	8003a8a <RTC_ByteToBcd2>
 8003656:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003658:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	78db      	ldrb	r3, [r3, #3]
 8003660:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e018      	b.n	800369a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2200      	movs	r2, #0
 800367a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003688:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800368e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	78db      	ldrb	r3, [r3, #3]
 8003694:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	22ca      	movs	r2, #202	@ 0xca
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2253      	movs	r2, #83	@ 0x53
 80036a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f991 	bl	80039d2 <RTC_EnterInitMode>
 80036b0:	4603      	mov	r3, r0
 80036b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d120      	bne.n	80036fc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80036c4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80036c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6899      	ldr	r1, [r3, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f9a4 	bl	8003a40 <RTC_ExitInitMode>
 80036f8:	4603      	mov	r3, r0
 80036fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	22ff      	movs	r2, #255	@ 0xff
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	771a      	strb	r2, [r3, #28]

  return status;
 8003716:	7cfb      	ldrb	r3, [r7, #19]
}
 8003718:	4618      	mov	r0, r3
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}

08003720 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003752:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003756:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	0d9b      	lsrs	r3, r3, #22
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11a      	bne.n	80037d2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 f98f 	bl	8003ac4 <RTC_Bcd2ToByte>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f986 	bl	8003ac4 <RTC_Bcd2ToByte>
 80037b8:	4603      	mov	r3, r0
 80037ba:	461a      	mov	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	789b      	ldrb	r3, [r3, #2]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 f97d 	bl	8003ac4 <RTC_Bcd2ToByte>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	7f1b      	ldrb	r3, [r3, #28]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_RTC_SetDate+0x1c>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e071      	b.n	80038dc <HAL_RTC_SetDate+0x100>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2202      	movs	r2, #2
 8003802:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <HAL_RTC_SetDate+0x4c>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	785b      	ldrb	r3, [r3, #1]
 800381a:	f023 0310 	bic.w	r3, r3, #16
 800381e:	b2db      	uxtb	r3, r3
 8003820:	330a      	adds	r3, #10
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11c      	bne.n	8003868 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	78db      	ldrb	r3, [r3, #3]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f929 	bl	8003a8a <RTC_ByteToBcd2>
 8003838:	4603      	mov	r3, r0
 800383a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	785b      	ldrb	r3, [r3, #1]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 f922 	bl	8003a8a <RTC_ByteToBcd2>
 8003846:	4603      	mov	r3, r0
 8003848:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800384a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	789b      	ldrb	r3, [r3, #2]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f91a 	bl	8003a8a <RTC_ByteToBcd2>
 8003856:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003858:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e00e      	b.n	8003886 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	78db      	ldrb	r3, [r3, #3]
 800386c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	785b      	ldrb	r3, [r3, #1]
 8003872:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003874:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800387a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	22ca      	movs	r2, #202	@ 0xca
 800388c:	625a      	str	r2, [r3, #36]	@ 0x24
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2253      	movs	r2, #83	@ 0x53
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f89b 	bl	80039d2 <RTC_EnterInitMode>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80038b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80038b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f8c2 	bl	8003a40 <RTC_ExitInitMode>
 80038bc:	4603      	mov	r3, r0
 80038be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	22ff      	movs	r2, #255	@ 0xff
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	771a      	strb	r2, [r3, #28]

  return status;
 80038da:	7cfb      	ldrb	r3, [r7, #19]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}

080038e4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80038fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003902:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	0c1b      	lsrs	r3, r3, #16
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	0b5b      	lsrs	r3, r3, #13
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11a      	bne.n	8003978 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f8bc 	bl	8003ac4 <RTC_Bcd2ToByte>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f8b3 	bl	8003ac4 <RTC_Bcd2ToByte>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	789b      	ldrb	r3, [r3, #2]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f8aa 	bl	8003ac4 <RTC_Bcd2ToByte>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800399c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800399e:	f7fe fa97 	bl	8001ed0 <HAL_GetTick>
 80039a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039a4:	e009      	b.n	80039ba <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039a6:	f7fe fa93 	bl	8001ed0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039b4:	d901      	bls.n	80039ba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e007      	b.n	80039ca <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ee      	beq.n	80039a6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d122      	bne.n	8003a36 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fe fa66 	bl	8001ed0 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003a06:	e00c      	b.n	8003a22 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a08:	f7fe fa62 	bl	8001ed0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a16:	d904      	bls.n	8003a22 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <RTC_EnterInitMode+0x64>
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d1e8      	bne.n	8003a08 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a5a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff89 	bl	8003982 <HAL_RTC_WaitForSynchro>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003a98:	e005      	b.n	8003aa6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	3b0a      	subs	r3, #10
 8003aa4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	2b09      	cmp	r3, #9
 8003aaa:	d8f6      	bhi.n	8003a9a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	b2db      	uxtb	r3, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	0092      	lsls	r2, r2, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	4413      	add	r3, r2
 8003aee:	b2db      	uxtb	r3, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e041      	b.n	8003b92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fd54 	bl	80015d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f000 fc1a 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d855      	bhi.n	8003c5c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003c5d 	.word	0x08003c5d
 8003bc0:	08003c5d 	.word	0x08003c5d
 8003bc4:	08003c5d 	.word	0x08003c5d
 8003bc8:	08003c09 	.word	0x08003c09
 8003bcc:	08003c5d 	.word	0x08003c5d
 8003bd0:	08003c5d 	.word	0x08003c5d
 8003bd4:	08003c5d 	.word	0x08003c5d
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c5d 	.word	0x08003c5d
 8003be0:	08003c5d 	.word	0x08003c5d
 8003be4:	08003c5d 	.word	0x08003c5d
 8003be8:	08003c41 	.word	0x08003c41
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bfa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fb55 	bl	80022b0 <HAL_DMA_Abort_IT>
      break;
 8003c06:	e02c      	b.n	8003c62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe fb47 	bl	80022b0 <HAL_DMA_Abort_IT>
      break;
 8003c22:	e01e      	b.n	8003c62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fb39 	bl	80022b0 <HAL_DMA_Abort_IT>
      break;
 8003c3e:	e010      	b.n	8003c62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fb2b 	bl	80022b0 <HAL_DMA_Abort_IT>
      break;
 8003c5a:	e002      	b.n	8003c62 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c60:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d157      	bne.n	8003d18 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	6839      	ldr	r1, [r7, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fd8b 	bl	800478c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d117      	bne.n	8003cb0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	f240 4344 	movw	r3, #1092	@ 0x444
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cee:	e013      	b.n	8003d18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d104      	bne.n	8003d00 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cfe:	e00b      	b.n	8003d18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d104      	bne.n	8003d10 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d0e:	e003      	b.n	8003d18 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000

08003d28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e097      	b.n	8003e6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fd fcb1 	bl	80016b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d6c:	f023 0307 	bic.w	r3, r3, #7
 8003d70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f000 faf9 	bl	8004374 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003dc8:	f023 030c 	bic.w	r3, r3, #12
 8003dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	4313      	orrs	r3, r2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	031b      	lsls	r3, r3, #12
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d110      	bne.n	8003ec6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d102      	bne.n	8003eb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eaa:	7b7b      	ldrb	r3, [r7, #13]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e069      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ec4:	e031      	b.n	8003f2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d110      	bne.n	8003eee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ecc:	7bbb      	ldrb	r3, [r7, #14]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ed2:	7b3b      	ldrb	r3, [r7, #12]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e055      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003eec:	e01d      	b.n	8003f2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003efa:	7b7b      	ldrb	r3, [r7, #13]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f00:	7b3b      	ldrb	r3, [r7, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03e      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_TIM_Encoder_Start+0xc4>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d008      	beq.n	8003f48 <HAL_TIM_Encoder_Start+0xd4>
 8003f36:	e00f      	b.n	8003f58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fc23 	bl	800478c <TIM_CCxChannelCmd>
      break;
 8003f46:	e016      	b.n	8003f76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	2104      	movs	r1, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fc1b 	bl	800478c <TIM_CCxChannelCmd>
      break;
 8003f56:	e00e      	b.n	8003f76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fc13 	bl	800478c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fc0c 	bl	800478c <TIM_CCxChannelCmd>
      break;
 8003f74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d122      	bne.n	8003fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d11b      	bne.n	8003fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0202 	mvn.w	r2, #2
 8003fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f9ba 	bl	800434c <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9ac 	bl	8004338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fd45 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d122      	bne.n	8004040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d11b      	bne.n	8004040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0204 	mvn.w	r2, #4
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f990 	bl	800434c <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f982 	bl	8004338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fd1b 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b08      	cmp	r3, #8
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0208 	mvn.w	r2, #8
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2204      	movs	r2, #4
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f966 	bl	800434c <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f958 	bl	8004338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fcf1 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0210 	mvn.w	r2, #16
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2208      	movs	r2, #8
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f93c 	bl	800434c <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f92e 	bl	8004338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fcc7 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0201 	mvn.w	r2, #1
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f908 	bl	8004324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411e:	2b80      	cmp	r3, #128	@ 0x80
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412c:	2b80      	cmp	r3, #128	@ 0x80
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fc16 	bl	800496c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d10e      	bne.n	800416c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004158:	2b40      	cmp	r3, #64	@ 0x40
 800415a:	d107      	bne.n	800416c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f8fa 	bl	8004360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b20      	cmp	r3, #32
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0220 	mvn.w	r2, #32
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fbe0 	bl	8004958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e0ae      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	f200 809f 	bhi.w	800430c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041ce:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	08004209 	.word	0x08004209
 80041d8:	0800430d 	.word	0x0800430d
 80041dc:	0800430d 	.word	0x0800430d
 80041e0:	0800430d 	.word	0x0800430d
 80041e4:	08004249 	.word	0x08004249
 80041e8:	0800430d 	.word	0x0800430d
 80041ec:	0800430d 	.word	0x0800430d
 80041f0:	0800430d 	.word	0x0800430d
 80041f4:	0800428b 	.word	0x0800428b
 80041f8:	0800430d 	.word	0x0800430d
 80041fc:	0800430d 	.word	0x0800430d
 8004200:	0800430d 	.word	0x0800430d
 8004204:	080042cb 	.word	0x080042cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f930 	bl	8004474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0208 	orr.w	r2, r2, #8
 8004222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0204 	bic.w	r2, r2, #4
 8004232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6999      	ldr	r1, [r3, #24]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	619a      	str	r2, [r3, #24]
      break;
 8004246:	e064      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f976 	bl	8004540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6999      	ldr	r1, [r3, #24]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	021a      	lsls	r2, r3, #8
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	619a      	str	r2, [r3, #24]
      break;
 8004288:	e043      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f9c1 	bl	8004618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0208 	orr.w	r2, r2, #8
 80042a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0204 	bic.w	r2, r2, #4
 80042b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69d9      	ldr	r1, [r3, #28]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	61da      	str	r2, [r3, #28]
      break;
 80042c8:	e023      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fa0b 	bl	80046ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69d9      	ldr	r1, [r3, #28]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	021a      	lsls	r2, r3, #8
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	61da      	str	r2, [r3, #28]
      break;
 800430a:	e002      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
      break;
 8004310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800431a:	7dfb      	ldrb	r3, [r7, #23]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a34      	ldr	r2, [pc, #208]	@ (8004458 <TIM_Base_SetConfig+0xe4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00f      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004392:	d00b      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a31      	ldr	r2, [pc, #196]	@ (800445c <TIM_Base_SetConfig+0xe8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a30      	ldr	r2, [pc, #192]	@ (8004460 <TIM_Base_SetConfig+0xec>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004464 <TIM_Base_SetConfig+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a25      	ldr	r2, [pc, #148]	@ (8004458 <TIM_Base_SetConfig+0xe4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01b      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043cc:	d017      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a22      	ldr	r2, [pc, #136]	@ (800445c <TIM_Base_SetConfig+0xe8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a21      	ldr	r2, [pc, #132]	@ (8004460 <TIM_Base_SetConfig+0xec>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00f      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a20      	ldr	r2, [pc, #128]	@ (8004464 <TIM_Base_SetConfig+0xf0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00b      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004468 <TIM_Base_SetConfig+0xf4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d007      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1e      	ldr	r2, [pc, #120]	@ (800446c <TIM_Base_SetConfig+0xf8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004470 <TIM_Base_SetConfig+0xfc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d108      	bne.n	8004410 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a08      	ldr	r2, [pc, #32]	@ (8004458 <TIM_Base_SetConfig+0xe4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	615a      	str	r2, [r3, #20]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0302 	bic.w	r3, r3, #2
 80044bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a1c      	ldr	r2, [pc, #112]	@ (800453c <TIM_OC1_SetConfig+0xc8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10c      	bne.n	80044ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0308 	bic.w	r3, r3, #8
 80044d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a13      	ldr	r2, [pc, #76]	@ (800453c <TIM_OC1_SetConfig+0xc8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d111      	bne.n	8004516 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	621a      	str	r2, [r3, #32]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40010000 	.word	0x40010000

08004540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0210 	bic.w	r2, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0320 	bic.w	r3, r3, #32
 800458a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1e      	ldr	r2, [pc, #120]	@ (8004614 <TIM_OC2_SetConfig+0xd4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10d      	bne.n	80045bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <TIM_OC2_SetConfig+0xd4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d113      	bne.n	80045ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000

08004618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <TIM_OC3_SetConfig+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10d      	bne.n	8004692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800467c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a14      	ldr	r2, [pc, #80]	@ (80046e8 <TIM_OC3_SetConfig+0xd0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d113      	bne.n	80046c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40010000 	.word	0x40010000

080046ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	031b      	lsls	r3, r3, #12
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a10      	ldr	r2, [pc, #64]	@ (8004788 <TIM_OC4_SetConfig+0x9c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d109      	bne.n	8004760 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000

0800478c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2201      	movs	r2, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1a      	ldr	r2, [r3, #32]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e050      	b.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1c      	ldr	r2, [pc, #112]	@ (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483c:	d013      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a18      	ldr	r2, [pc, #96]	@ (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a16      	ldr	r2, [pc, #88]	@ (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a13      	ldr	r2, [pc, #76]	@ (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10c      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800486c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40014000 	.word	0x40014000

080048b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e03d      	b.n	800494c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <Set_LED>:

uint8_t LED_Data[NUM_LEDS][3]; // color data green / red / blue
volatile int datasentflag;


void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
	while(!datasentflag){}
 800498e:	bf00      	nop
 8004990:	4b17      	ldr	r3, [pc, #92]	@ (80049f0 <Set_LED+0x70>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0fb      	beq.n	8004990 <Set_LED+0x10>
    if(LEDnum >= 0 && LEDnum < NUM_LEDS) {
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	db22      	blt.n	80049e4 <Set_LED+0x64>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b8c      	cmp	r3, #140	@ 0x8c
 80049a2:	dc1f      	bgt.n	80049e4 <Set_LED+0x64>
        LED_Data[LEDnum][0] = Green;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	b2d8      	uxtb	r0, r3
 80049a8:	4912      	ldr	r1, [pc, #72]	@ (80049f4 <Set_LED+0x74>)
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	440b      	add	r3, r1
 80049b4:	4602      	mov	r2, r0
 80049b6:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	b2d8      	uxtb	r0, r3
 80049bc:	490d      	ldr	r1, [pc, #52]	@ (80049f4 <Set_LED+0x74>)
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4613      	mov	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	440b      	add	r3, r1
 80049c8:	3301      	adds	r3, #1
 80049ca:	4602      	mov	r2, r0
 80049cc:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	b2d8      	uxtb	r0, r3
 80049d2:	4908      	ldr	r1, [pc, #32]	@ (80049f4 <Set_LED+0x74>)
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4613      	mov	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	440b      	add	r3, r1
 80049de:	3302      	adds	r3, #2
 80049e0:	4602      	mov	r2, r0
 80049e2:	701a      	strb	r2, [r3, #0]
    }
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	200003fc 	.word	0x200003fc
 80049f4:	20000254 	.word	0x20000254

080049f8 <Set_LED_Hex>:

void Set_LED_Hex(int LEDnum, uint32_t color) {
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
	while(!datasentflag){}
 8004a02:	bf00      	nop
 8004a04:	4b18      	ldr	r3, [pc, #96]	@ (8004a68 <Set_LED_Hex+0x70>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0fb      	beq.n	8004a04 <Set_LED_Hex+0xc>
    if(LEDnum >= 0 && LEDnum < NUM_LEDS) {
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db24      	blt.n	8004a5c <Set_LED_Hex+0x64>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b8c      	cmp	r3, #140	@ 0x8c
 8004a16:	dc21      	bgt.n	8004a5c <Set_LED_Hex+0x64>
        uint8_t Red = (color >> 16) & 0xFF;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	73fb      	strb	r3, [r7, #15]
        uint8_t Green = (color >> 8) & 0xFF;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	73bb      	strb	r3, [r7, #14]
        uint8_t Blue = color & 0xFF;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	737b      	strb	r3, [r7, #13]
        LED_Data[LEDnum][0] = Green;
 8004a28:	4910      	ldr	r1, [pc, #64]	@ (8004a6c <Set_LED_Hex+0x74>)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	4413      	add	r3, r2
 8004a32:	440b      	add	r3, r1
 8004a34:	7bba      	ldrb	r2, [r7, #14]
 8004a36:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 8004a38:	490c      	ldr	r1, [pc, #48]	@ (8004a6c <Set_LED_Hex+0x74>)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4413      	add	r3, r2
 8004a42:	440b      	add	r3, r1
 8004a44:	3301      	adds	r3, #1
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 8004a4a:	4908      	ldr	r1, [pc, #32]	@ (8004a6c <Set_LED_Hex+0x74>)
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	440b      	add	r3, r1
 8004a56:	3302      	adds	r3, #2
 8004a58:	7b7a      	ldrb	r2, [r7, #13]
 8004a5a:	701a      	strb	r2, [r3, #0]
    }
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	200003fc 	.word	0x200003fc
 8004a6c:	20000254 	.word	0x20000254

08004a70 <HAL_TIM_PWM_PulseFinishedCallback>:
	while (!datasentflag) {}
	datasentflag = 0;

}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8004a78:	2100      	movs	r1, #0
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff f88e 	bl	8003b9c <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    datasentflag = 1;
 8004a80:	4b03      	ldr	r3, [pc, #12]	@ (8004a90 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200003fc 	.word	0x200003fc

08004a94 <sniprintf>:
 8004a94:	b40c      	push	{r2, r3}
 8004a96:	b530      	push	{r4, r5, lr}
 8004a98:	4b17      	ldr	r3, [pc, #92]	@ (8004af8 <sniprintf+0x64>)
 8004a9a:	1e0c      	subs	r4, r1, #0
 8004a9c:	681d      	ldr	r5, [r3, #0]
 8004a9e:	b09d      	sub	sp, #116	@ 0x74
 8004aa0:	da08      	bge.n	8004ab4 <sniprintf+0x20>
 8004aa2:	238b      	movs	r3, #139	@ 0x8b
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aaa:	b01d      	add	sp, #116	@ 0x74
 8004aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ab0:	b002      	add	sp, #8
 8004ab2:	4770      	bx	lr
 8004ab4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004ab8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004abc:	bf14      	ite	ne
 8004abe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004ac2:	4623      	moveq	r3, r4
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	9307      	str	r3, [sp, #28]
 8004ac8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	9006      	str	r0, [sp, #24]
 8004ad0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ad4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ad6:	ab21      	add	r3, sp, #132	@ 0x84
 8004ad8:	a902      	add	r1, sp, #8
 8004ada:	4628      	mov	r0, r5
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	f000 f995 	bl	8004e0c <_svfiprintf_r>
 8004ae2:	1c43      	adds	r3, r0, #1
 8004ae4:	bfbc      	itt	lt
 8004ae6:	238b      	movlt	r3, #139	@ 0x8b
 8004ae8:	602b      	strlt	r3, [r5, #0]
 8004aea:	2c00      	cmp	r4, #0
 8004aec:	d0dd      	beq.n	8004aaa <sniprintf+0x16>
 8004aee:	9b02      	ldr	r3, [sp, #8]
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e7d9      	b.n	8004aaa <sniprintf+0x16>
 8004af6:	bf00      	nop
 8004af8:	2000001c 	.word	0x2000001c

08004afc <memset>:
 8004afc:	4402      	add	r2, r0
 8004afe:	4603      	mov	r3, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d100      	bne.n	8004b06 <memset+0xa>
 8004b04:	4770      	bx	lr
 8004b06:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0a:	e7f9      	b.n	8004b00 <memset+0x4>

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	@ (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2000001c 	.word	0x2000001c

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	@ (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 fc66 	bl	80053fc <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08005488 	.word	0x08005488
 8004b54:	08005488 	.word	0x08005488
 8004b58:	08005488 	.word	0x08005488
 8004b5c:	0800548c 	.word	0x0800548c

08004b60 <__retarget_lock_acquire_recursive>:
 8004b60:	4770      	bx	lr

08004b62 <__retarget_lock_release_recursive>:
 8004b62:	4770      	bx	lr

08004b64 <_free_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4605      	mov	r5, r0
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d041      	beq.n	8004bf0 <_free_r+0x8c>
 8004b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b70:	1f0c      	subs	r4, r1, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bfb8      	it	lt
 8004b76:	18e4      	addlt	r4, r4, r3
 8004b78:	f000 f8e0 	bl	8004d3c <__malloc_lock>
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf4 <_free_r+0x90>)
 8004b7e:	6813      	ldr	r3, [r2, #0]
 8004b80:	b933      	cbnz	r3, 8004b90 <_free_r+0x2c>
 8004b82:	6063      	str	r3, [r4, #4]
 8004b84:	6014      	str	r4, [r2, #0]
 8004b86:	4628      	mov	r0, r5
 8004b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b8c:	f000 b8dc 	b.w	8004d48 <__malloc_unlock>
 8004b90:	42a3      	cmp	r3, r4
 8004b92:	d908      	bls.n	8004ba6 <_free_r+0x42>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	1821      	adds	r1, r4, r0
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	bf01      	itttt	eq
 8004b9c:	6819      	ldreq	r1, [r3, #0]
 8004b9e:	685b      	ldreq	r3, [r3, #4]
 8004ba0:	1809      	addeq	r1, r1, r0
 8004ba2:	6021      	streq	r1, [r4, #0]
 8004ba4:	e7ed      	b.n	8004b82 <_free_r+0x1e>
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	b10b      	cbz	r3, 8004bb0 <_free_r+0x4c>
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	d9fa      	bls.n	8004ba6 <_free_r+0x42>
 8004bb0:	6811      	ldr	r1, [r2, #0]
 8004bb2:	1850      	adds	r0, r2, r1
 8004bb4:	42a0      	cmp	r0, r4
 8004bb6:	d10b      	bne.n	8004bd0 <_free_r+0x6c>
 8004bb8:	6820      	ldr	r0, [r4, #0]
 8004bba:	4401      	add	r1, r0
 8004bbc:	1850      	adds	r0, r2, r1
 8004bbe:	4283      	cmp	r3, r0
 8004bc0:	6011      	str	r1, [r2, #0]
 8004bc2:	d1e0      	bne.n	8004b86 <_free_r+0x22>
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	6053      	str	r3, [r2, #4]
 8004bca:	4408      	add	r0, r1
 8004bcc:	6010      	str	r0, [r2, #0]
 8004bce:	e7da      	b.n	8004b86 <_free_r+0x22>
 8004bd0:	d902      	bls.n	8004bd8 <_free_r+0x74>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	602b      	str	r3, [r5, #0]
 8004bd6:	e7d6      	b.n	8004b86 <_free_r+0x22>
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	1821      	adds	r1, r4, r0
 8004bdc:	428b      	cmp	r3, r1
 8004bde:	bf04      	itt	eq
 8004be0:	6819      	ldreq	r1, [r3, #0]
 8004be2:	685b      	ldreq	r3, [r3, #4]
 8004be4:	6063      	str	r3, [r4, #4]
 8004be6:	bf04      	itt	eq
 8004be8:	1809      	addeq	r1, r1, r0
 8004bea:	6021      	streq	r1, [r4, #0]
 8004bec:	6054      	str	r4, [r2, #4]
 8004bee:	e7ca      	b.n	8004b86 <_free_r+0x22>
 8004bf0:	bd38      	pop	{r3, r4, r5, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000544 	.word	0x20000544

08004bf8 <sbrk_aligned>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8004c38 <sbrk_aligned+0x40>)
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	6831      	ldr	r1, [r6, #0]
 8004c00:	4605      	mov	r5, r0
 8004c02:	b911      	cbnz	r1, 8004c0a <sbrk_aligned+0x12>
 8004c04:	f000 fba6 	bl	8005354 <_sbrk_r>
 8004c08:	6030      	str	r0, [r6, #0]
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f000 fba1 	bl	8005354 <_sbrk_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	d103      	bne.n	8004c1e <sbrk_aligned+0x26>
 8004c16:	f04f 34ff 	mov.w	r4, #4294967295
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
 8004c1e:	1cc4      	adds	r4, r0, #3
 8004c20:	f024 0403 	bic.w	r4, r4, #3
 8004c24:	42a0      	cmp	r0, r4
 8004c26:	d0f8      	beq.n	8004c1a <sbrk_aligned+0x22>
 8004c28:	1a21      	subs	r1, r4, r0
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f000 fb92 	bl	8005354 <_sbrk_r>
 8004c30:	3001      	adds	r0, #1
 8004c32:	d1f2      	bne.n	8004c1a <sbrk_aligned+0x22>
 8004c34:	e7ef      	b.n	8004c16 <sbrk_aligned+0x1e>
 8004c36:	bf00      	nop
 8004c38:	20000540 	.word	0x20000540

08004c3c <_malloc_r>:
 8004c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c40:	1ccd      	adds	r5, r1, #3
 8004c42:	f025 0503 	bic.w	r5, r5, #3
 8004c46:	3508      	adds	r5, #8
 8004c48:	2d0c      	cmp	r5, #12
 8004c4a:	bf38      	it	cc
 8004c4c:	250c      	movcc	r5, #12
 8004c4e:	2d00      	cmp	r5, #0
 8004c50:	4606      	mov	r6, r0
 8004c52:	db01      	blt.n	8004c58 <_malloc_r+0x1c>
 8004c54:	42a9      	cmp	r1, r5
 8004c56:	d904      	bls.n	8004c62 <_malloc_r+0x26>
 8004c58:	230c      	movs	r3, #12
 8004c5a:	6033      	str	r3, [r6, #0]
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d38 <_malloc_r+0xfc>
 8004c66:	f000 f869 	bl	8004d3c <__malloc_lock>
 8004c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c6e:	461c      	mov	r4, r3
 8004c70:	bb44      	cbnz	r4, 8004cc4 <_malloc_r+0x88>
 8004c72:	4629      	mov	r1, r5
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7ff ffbf 	bl	8004bf8 <sbrk_aligned>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	d158      	bne.n	8004d32 <_malloc_r+0xf6>
 8004c80:	f8d8 4000 	ldr.w	r4, [r8]
 8004c84:	4627      	mov	r7, r4
 8004c86:	2f00      	cmp	r7, #0
 8004c88:	d143      	bne.n	8004d12 <_malloc_r+0xd6>
 8004c8a:	2c00      	cmp	r4, #0
 8004c8c:	d04b      	beq.n	8004d26 <_malloc_r+0xea>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	4639      	mov	r1, r7
 8004c92:	4630      	mov	r0, r6
 8004c94:	eb04 0903 	add.w	r9, r4, r3
 8004c98:	f000 fb5c 	bl	8005354 <_sbrk_r>
 8004c9c:	4581      	cmp	r9, r0
 8004c9e:	d142      	bne.n	8004d26 <_malloc_r+0xea>
 8004ca0:	6821      	ldr	r1, [r4, #0]
 8004ca2:	1a6d      	subs	r5, r5, r1
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f7ff ffa6 	bl	8004bf8 <sbrk_aligned>
 8004cac:	3001      	adds	r0, #1
 8004cae:	d03a      	beq.n	8004d26 <_malloc_r+0xea>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	442b      	add	r3, r5
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	bb62      	cbnz	r2, 8004d18 <_malloc_r+0xdc>
 8004cbe:	f8c8 7000 	str.w	r7, [r8]
 8004cc2:	e00f      	b.n	8004ce4 <_malloc_r+0xa8>
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	1b52      	subs	r2, r2, r5
 8004cc8:	d420      	bmi.n	8004d0c <_malloc_r+0xd0>
 8004cca:	2a0b      	cmp	r2, #11
 8004ccc:	d917      	bls.n	8004cfe <_malloc_r+0xc2>
 8004cce:	1961      	adds	r1, r4, r5
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	6025      	str	r5, [r4, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	6059      	strne	r1, [r3, #4]
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	bf08      	it	eq
 8004cdc:	f8c8 1000 	streq.w	r1, [r8]
 8004ce0:	5162      	str	r2, [r4, r5]
 8004ce2:	604b      	str	r3, [r1, #4]
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f000 f82f 	bl	8004d48 <__malloc_unlock>
 8004cea:	f104 000b 	add.w	r0, r4, #11
 8004cee:	1d23      	adds	r3, r4, #4
 8004cf0:	f020 0007 	bic.w	r0, r0, #7
 8004cf4:	1ac2      	subs	r2, r0, r3
 8004cf6:	bf1c      	itt	ne
 8004cf8:	1a1b      	subne	r3, r3, r0
 8004cfa:	50a3      	strne	r3, [r4, r2]
 8004cfc:	e7af      	b.n	8004c5e <_malloc_r+0x22>
 8004cfe:	6862      	ldr	r2, [r4, #4]
 8004d00:	42a3      	cmp	r3, r4
 8004d02:	bf0c      	ite	eq
 8004d04:	f8c8 2000 	streq.w	r2, [r8]
 8004d08:	605a      	strne	r2, [r3, #4]
 8004d0a:	e7eb      	b.n	8004ce4 <_malloc_r+0xa8>
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	6864      	ldr	r4, [r4, #4]
 8004d10:	e7ae      	b.n	8004c70 <_malloc_r+0x34>
 8004d12:	463c      	mov	r4, r7
 8004d14:	687f      	ldr	r7, [r7, #4]
 8004d16:	e7b6      	b.n	8004c86 <_malloc_r+0x4a>
 8004d18:	461a      	mov	r2, r3
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	42a3      	cmp	r3, r4
 8004d1e:	d1fb      	bne.n	8004d18 <_malloc_r+0xdc>
 8004d20:	2300      	movs	r3, #0
 8004d22:	6053      	str	r3, [r2, #4]
 8004d24:	e7de      	b.n	8004ce4 <_malloc_r+0xa8>
 8004d26:	230c      	movs	r3, #12
 8004d28:	6033      	str	r3, [r6, #0]
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 f80c 	bl	8004d48 <__malloc_unlock>
 8004d30:	e794      	b.n	8004c5c <_malloc_r+0x20>
 8004d32:	6005      	str	r5, [r0, #0]
 8004d34:	e7d6      	b.n	8004ce4 <_malloc_r+0xa8>
 8004d36:	bf00      	nop
 8004d38:	20000544 	.word	0x20000544

08004d3c <__malloc_lock>:
 8004d3c:	4801      	ldr	r0, [pc, #4]	@ (8004d44 <__malloc_lock+0x8>)
 8004d3e:	f7ff bf0f 	b.w	8004b60 <__retarget_lock_acquire_recursive>
 8004d42:	bf00      	nop
 8004d44:	2000053c 	.word	0x2000053c

08004d48 <__malloc_unlock>:
 8004d48:	4801      	ldr	r0, [pc, #4]	@ (8004d50 <__malloc_unlock+0x8>)
 8004d4a:	f7ff bf0a 	b.w	8004b62 <__retarget_lock_release_recursive>
 8004d4e:	bf00      	nop
 8004d50:	2000053c 	.word	0x2000053c

08004d54 <__ssputs_r>:
 8004d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d58:	688e      	ldr	r6, [r1, #8]
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	42be      	cmp	r6, r7
 8004d5e:	680b      	ldr	r3, [r1, #0]
 8004d60:	4682      	mov	sl, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	4690      	mov	r8, r2
 8004d66:	d82d      	bhi.n	8004dc4 <__ssputs_r+0x70>
 8004d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d70:	d026      	beq.n	8004dc0 <__ssputs_r+0x6c>
 8004d72:	6965      	ldr	r5, [r4, #20]
 8004d74:	6909      	ldr	r1, [r1, #16]
 8004d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d7a:	eba3 0901 	sub.w	r9, r3, r1
 8004d7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d82:	1c7b      	adds	r3, r7, #1
 8004d84:	444b      	add	r3, r9
 8004d86:	106d      	asrs	r5, r5, #1
 8004d88:	429d      	cmp	r5, r3
 8004d8a:	bf38      	it	cc
 8004d8c:	461d      	movcc	r5, r3
 8004d8e:	0553      	lsls	r3, r2, #21
 8004d90:	d527      	bpl.n	8004de2 <__ssputs_r+0x8e>
 8004d92:	4629      	mov	r1, r5
 8004d94:	f7ff ff52 	bl	8004c3c <_malloc_r>
 8004d98:	4606      	mov	r6, r0
 8004d9a:	b360      	cbz	r0, 8004df6 <__ssputs_r+0xa2>
 8004d9c:	6921      	ldr	r1, [r4, #16]
 8004d9e:	464a      	mov	r2, r9
 8004da0:	f000 fae8 	bl	8005374 <memcpy>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	6126      	str	r6, [r4, #16]
 8004db2:	6165      	str	r5, [r4, #20]
 8004db4:	444e      	add	r6, r9
 8004db6:	eba5 0509 	sub.w	r5, r5, r9
 8004dba:	6026      	str	r6, [r4, #0]
 8004dbc:	60a5      	str	r5, [r4, #8]
 8004dbe:	463e      	mov	r6, r7
 8004dc0:	42be      	cmp	r6, r7
 8004dc2:	d900      	bls.n	8004dc6 <__ssputs_r+0x72>
 8004dc4:	463e      	mov	r6, r7
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	4632      	mov	r2, r6
 8004dca:	4641      	mov	r1, r8
 8004dcc:	f000 faa8 	bl	8005320 <memmove>
 8004dd0:	68a3      	ldr	r3, [r4, #8]
 8004dd2:	1b9b      	subs	r3, r3, r6
 8004dd4:	60a3      	str	r3, [r4, #8]
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	4433      	add	r3, r6
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de2:	462a      	mov	r2, r5
 8004de4:	f000 fad4 	bl	8005390 <_realloc_r>
 8004de8:	4606      	mov	r6, r0
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d1e0      	bne.n	8004db0 <__ssputs_r+0x5c>
 8004dee:	6921      	ldr	r1, [r4, #16]
 8004df0:	4650      	mov	r0, sl
 8004df2:	f7ff feb7 	bl	8004b64 <_free_r>
 8004df6:	230c      	movs	r3, #12
 8004df8:	f8ca 3000 	str.w	r3, [sl]
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e02:	81a3      	strh	r3, [r4, #12]
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	e7e9      	b.n	8004dde <__ssputs_r+0x8a>
	...

08004e0c <_svfiprintf_r>:
 8004e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	4698      	mov	r8, r3
 8004e12:	898b      	ldrh	r3, [r1, #12]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	b09d      	sub	sp, #116	@ 0x74
 8004e18:	4607      	mov	r7, r0
 8004e1a:	460d      	mov	r5, r1
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	d510      	bpl.n	8004e42 <_svfiprintf_r+0x36>
 8004e20:	690b      	ldr	r3, [r1, #16]
 8004e22:	b973      	cbnz	r3, 8004e42 <_svfiprintf_r+0x36>
 8004e24:	2140      	movs	r1, #64	@ 0x40
 8004e26:	f7ff ff09 	bl	8004c3c <_malloc_r>
 8004e2a:	6028      	str	r0, [r5, #0]
 8004e2c:	6128      	str	r0, [r5, #16]
 8004e2e:	b930      	cbnz	r0, 8004e3e <_svfiprintf_r+0x32>
 8004e30:	230c      	movs	r3, #12
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	b01d      	add	sp, #116	@ 0x74
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3e:	2340      	movs	r3, #64	@ 0x40
 8004e40:	616b      	str	r3, [r5, #20]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e46:	2320      	movs	r3, #32
 8004e48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e50:	2330      	movs	r3, #48	@ 0x30
 8004e52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ff0 <_svfiprintf_r+0x1e4>
 8004e56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e5a:	f04f 0901 	mov.w	r9, #1
 8004e5e:	4623      	mov	r3, r4
 8004e60:	469a      	mov	sl, r3
 8004e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e66:	b10a      	cbz	r2, 8004e6c <_svfiprintf_r+0x60>
 8004e68:	2a25      	cmp	r2, #37	@ 0x25
 8004e6a:	d1f9      	bne.n	8004e60 <_svfiprintf_r+0x54>
 8004e6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004e70:	d00b      	beq.n	8004e8a <_svfiprintf_r+0x7e>
 8004e72:	465b      	mov	r3, fp
 8004e74:	4622      	mov	r2, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	4638      	mov	r0, r7
 8004e7a:	f7ff ff6b 	bl	8004d54 <__ssputs_r>
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f000 80a7 	beq.w	8004fd2 <_svfiprintf_r+0x1c6>
 8004e84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e86:	445a      	add	r2, fp
 8004e88:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 809f 	beq.w	8004fd2 <_svfiprintf_r+0x1c6>
 8004e94:	2300      	movs	r3, #0
 8004e96:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e9e:	f10a 0a01 	add.w	sl, sl, #1
 8004ea2:	9304      	str	r3, [sp, #16]
 8004ea4:	9307      	str	r3, [sp, #28]
 8004ea6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eaa:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eac:	4654      	mov	r4, sl
 8004eae:	2205      	movs	r2, #5
 8004eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb4:	484e      	ldr	r0, [pc, #312]	@ (8004ff0 <_svfiprintf_r+0x1e4>)
 8004eb6:	f7fb f99b 	bl	80001f0 <memchr>
 8004eba:	9a04      	ldr	r2, [sp, #16]
 8004ebc:	b9d8      	cbnz	r0, 8004ef6 <_svfiprintf_r+0xea>
 8004ebe:	06d0      	lsls	r0, r2, #27
 8004ec0:	bf44      	itt	mi
 8004ec2:	2320      	movmi	r3, #32
 8004ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ec8:	0711      	lsls	r1, r2, #28
 8004eca:	bf44      	itt	mi
 8004ecc:	232b      	movmi	r3, #43	@ 0x2b
 8004ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed8:	d015      	beq.n	8004f06 <_svfiprintf_r+0xfa>
 8004eda:	9a07      	ldr	r2, [sp, #28]
 8004edc:	4654      	mov	r4, sl
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f04f 0c0a 	mov.w	ip, #10
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eea:	3b30      	subs	r3, #48	@ 0x30
 8004eec:	2b09      	cmp	r3, #9
 8004eee:	d94b      	bls.n	8004f88 <_svfiprintf_r+0x17c>
 8004ef0:	b1b0      	cbz	r0, 8004f20 <_svfiprintf_r+0x114>
 8004ef2:	9207      	str	r2, [sp, #28]
 8004ef4:	e014      	b.n	8004f20 <_svfiprintf_r+0x114>
 8004ef6:	eba0 0308 	sub.w	r3, r0, r8
 8004efa:	fa09 f303 	lsl.w	r3, r9, r3
 8004efe:	4313      	orrs	r3, r2
 8004f00:	9304      	str	r3, [sp, #16]
 8004f02:	46a2      	mov	sl, r4
 8004f04:	e7d2      	b.n	8004eac <_svfiprintf_r+0xa0>
 8004f06:	9b03      	ldr	r3, [sp, #12]
 8004f08:	1d19      	adds	r1, r3, #4
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	9103      	str	r1, [sp, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bfbb      	ittet	lt
 8004f12:	425b      	neglt	r3, r3
 8004f14:	f042 0202 	orrlt.w	r2, r2, #2
 8004f18:	9307      	strge	r3, [sp, #28]
 8004f1a:	9307      	strlt	r3, [sp, #28]
 8004f1c:	bfb8      	it	lt
 8004f1e:	9204      	strlt	r2, [sp, #16]
 8004f20:	7823      	ldrb	r3, [r4, #0]
 8004f22:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f24:	d10a      	bne.n	8004f3c <_svfiprintf_r+0x130>
 8004f26:	7863      	ldrb	r3, [r4, #1]
 8004f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f2a:	d132      	bne.n	8004f92 <_svfiprintf_r+0x186>
 8004f2c:	9b03      	ldr	r3, [sp, #12]
 8004f2e:	1d1a      	adds	r2, r3, #4
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	9203      	str	r2, [sp, #12]
 8004f34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f38:	3402      	adds	r4, #2
 8004f3a:	9305      	str	r3, [sp, #20]
 8004f3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005000 <_svfiprintf_r+0x1f4>
 8004f40:	7821      	ldrb	r1, [r4, #0]
 8004f42:	2203      	movs	r2, #3
 8004f44:	4650      	mov	r0, sl
 8004f46:	f7fb f953 	bl	80001f0 <memchr>
 8004f4a:	b138      	cbz	r0, 8004f5c <_svfiprintf_r+0x150>
 8004f4c:	9b04      	ldr	r3, [sp, #16]
 8004f4e:	eba0 000a 	sub.w	r0, r0, sl
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	4082      	lsls	r2, r0
 8004f56:	4313      	orrs	r3, r2
 8004f58:	3401      	adds	r4, #1
 8004f5a:	9304      	str	r3, [sp, #16]
 8004f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f60:	4824      	ldr	r0, [pc, #144]	@ (8004ff4 <_svfiprintf_r+0x1e8>)
 8004f62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f66:	2206      	movs	r2, #6
 8004f68:	f7fb f942 	bl	80001f0 <memchr>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d036      	beq.n	8004fde <_svfiprintf_r+0x1d2>
 8004f70:	4b21      	ldr	r3, [pc, #132]	@ (8004ff8 <_svfiprintf_r+0x1ec>)
 8004f72:	bb1b      	cbnz	r3, 8004fbc <_svfiprintf_r+0x1b0>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	3307      	adds	r3, #7
 8004f78:	f023 0307 	bic.w	r3, r3, #7
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	9303      	str	r3, [sp, #12]
 8004f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f82:	4433      	add	r3, r6
 8004f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f86:	e76a      	b.n	8004e5e <_svfiprintf_r+0x52>
 8004f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	2001      	movs	r0, #1
 8004f90:	e7a8      	b.n	8004ee4 <_svfiprintf_r+0xd8>
 8004f92:	2300      	movs	r3, #0
 8004f94:	3401      	adds	r4, #1
 8004f96:	9305      	str	r3, [sp, #20]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f04f 0c0a 	mov.w	ip, #10
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa4:	3a30      	subs	r2, #48	@ 0x30
 8004fa6:	2a09      	cmp	r2, #9
 8004fa8:	d903      	bls.n	8004fb2 <_svfiprintf_r+0x1a6>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0c6      	beq.n	8004f3c <_svfiprintf_r+0x130>
 8004fae:	9105      	str	r1, [sp, #20]
 8004fb0:	e7c4      	b.n	8004f3c <_svfiprintf_r+0x130>
 8004fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e7f0      	b.n	8004f9e <_svfiprintf_r+0x192>
 8004fbc:	ab03      	add	r3, sp, #12
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <_svfiprintf_r+0x1f0>)
 8004fc4:	a904      	add	r1, sp, #16
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	f3af 8000 	nop.w
 8004fcc:	1c42      	adds	r2, r0, #1
 8004fce:	4606      	mov	r6, r0
 8004fd0:	d1d6      	bne.n	8004f80 <_svfiprintf_r+0x174>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	065b      	lsls	r3, r3, #25
 8004fd6:	f53f af2d 	bmi.w	8004e34 <_svfiprintf_r+0x28>
 8004fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fdc:	e72c      	b.n	8004e38 <_svfiprintf_r+0x2c>
 8004fde:	ab03      	add	r3, sp, #12
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <_svfiprintf_r+0x1f0>)
 8004fe6:	a904      	add	r1, sp, #16
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f000 f879 	bl	80050e0 <_printf_i>
 8004fee:	e7ed      	b.n	8004fcc <_svfiprintf_r+0x1c0>
 8004ff0:	0800544c 	.word	0x0800544c
 8004ff4:	08005456 	.word	0x08005456
 8004ff8:	00000000 	.word	0x00000000
 8004ffc:	08004d55 	.word	0x08004d55
 8005000:	08005452 	.word	0x08005452

08005004 <_printf_common>:
 8005004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	4616      	mov	r6, r2
 800500a:	4698      	mov	r8, r3
 800500c:	688a      	ldr	r2, [r1, #8]
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005014:	4293      	cmp	r3, r2
 8005016:	bfb8      	it	lt
 8005018:	4613      	movlt	r3, r2
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005020:	4607      	mov	r7, r0
 8005022:	460c      	mov	r4, r1
 8005024:	b10a      	cbz	r2, 800502a <_printf_common+0x26>
 8005026:	3301      	adds	r3, #1
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	0699      	lsls	r1, r3, #26
 800502e:	bf42      	ittt	mi
 8005030:	6833      	ldrmi	r3, [r6, #0]
 8005032:	3302      	addmi	r3, #2
 8005034:	6033      	strmi	r3, [r6, #0]
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	f015 0506 	ands.w	r5, r5, #6
 800503c:	d106      	bne.n	800504c <_printf_common+0x48>
 800503e:	f104 0a19 	add.w	sl, r4, #25
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	6832      	ldr	r2, [r6, #0]
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	42ab      	cmp	r3, r5
 800504a:	dc26      	bgt.n	800509a <_printf_common+0x96>
 800504c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	3b00      	subs	r3, #0
 8005054:	bf18      	it	ne
 8005056:	2301      	movne	r3, #1
 8005058:	0692      	lsls	r2, r2, #26
 800505a:	d42b      	bmi.n	80050b4 <_printf_common+0xb0>
 800505c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005060:	4641      	mov	r1, r8
 8005062:	4638      	mov	r0, r7
 8005064:	47c8      	blx	r9
 8005066:	3001      	adds	r0, #1
 8005068:	d01e      	beq.n	80050a8 <_printf_common+0xa4>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	6922      	ldr	r2, [r4, #16]
 800506e:	f003 0306 	and.w	r3, r3, #6
 8005072:	2b04      	cmp	r3, #4
 8005074:	bf02      	ittt	eq
 8005076:	68e5      	ldreq	r5, [r4, #12]
 8005078:	6833      	ldreq	r3, [r6, #0]
 800507a:	1aed      	subeq	r5, r5, r3
 800507c:	68a3      	ldr	r3, [r4, #8]
 800507e:	bf0c      	ite	eq
 8005080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005084:	2500      	movne	r5, #0
 8005086:	4293      	cmp	r3, r2
 8005088:	bfc4      	itt	gt
 800508a:	1a9b      	subgt	r3, r3, r2
 800508c:	18ed      	addgt	r5, r5, r3
 800508e:	2600      	movs	r6, #0
 8005090:	341a      	adds	r4, #26
 8005092:	42b5      	cmp	r5, r6
 8005094:	d11a      	bne.n	80050cc <_printf_common+0xc8>
 8005096:	2000      	movs	r0, #0
 8005098:	e008      	b.n	80050ac <_printf_common+0xa8>
 800509a:	2301      	movs	r3, #1
 800509c:	4652      	mov	r2, sl
 800509e:	4641      	mov	r1, r8
 80050a0:	4638      	mov	r0, r7
 80050a2:	47c8      	blx	r9
 80050a4:	3001      	adds	r0, #1
 80050a6:	d103      	bne.n	80050b0 <_printf_common+0xac>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b0:	3501      	adds	r5, #1
 80050b2:	e7c6      	b.n	8005042 <_printf_common+0x3e>
 80050b4:	18e1      	adds	r1, r4, r3
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	2030      	movs	r0, #48	@ 0x30
 80050ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050be:	4422      	add	r2, r4
 80050c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050c8:	3302      	adds	r3, #2
 80050ca:	e7c7      	b.n	800505c <_printf_common+0x58>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4622      	mov	r2, r4
 80050d0:	4641      	mov	r1, r8
 80050d2:	4638      	mov	r0, r7
 80050d4:	47c8      	blx	r9
 80050d6:	3001      	adds	r0, #1
 80050d8:	d0e6      	beq.n	80050a8 <_printf_common+0xa4>
 80050da:	3601      	adds	r6, #1
 80050dc:	e7d9      	b.n	8005092 <_printf_common+0x8e>
	...

080050e0 <_printf_i>:
 80050e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	7e0f      	ldrb	r7, [r1, #24]
 80050e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050e8:	2f78      	cmp	r7, #120	@ 0x78
 80050ea:	4691      	mov	r9, r2
 80050ec:	4680      	mov	r8, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	469a      	mov	sl, r3
 80050f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050f6:	d807      	bhi.n	8005108 <_printf_i+0x28>
 80050f8:	2f62      	cmp	r7, #98	@ 0x62
 80050fa:	d80a      	bhi.n	8005112 <_printf_i+0x32>
 80050fc:	2f00      	cmp	r7, #0
 80050fe:	f000 80d2 	beq.w	80052a6 <_printf_i+0x1c6>
 8005102:	2f58      	cmp	r7, #88	@ 0x58
 8005104:	f000 80b9 	beq.w	800527a <_printf_i+0x19a>
 8005108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800510c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005110:	e03a      	b.n	8005188 <_printf_i+0xa8>
 8005112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005116:	2b15      	cmp	r3, #21
 8005118:	d8f6      	bhi.n	8005108 <_printf_i+0x28>
 800511a:	a101      	add	r1, pc, #4	@ (adr r1, 8005120 <_printf_i+0x40>)
 800511c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005120:	08005179 	.word	0x08005179
 8005124:	0800518d 	.word	0x0800518d
 8005128:	08005109 	.word	0x08005109
 800512c:	08005109 	.word	0x08005109
 8005130:	08005109 	.word	0x08005109
 8005134:	08005109 	.word	0x08005109
 8005138:	0800518d 	.word	0x0800518d
 800513c:	08005109 	.word	0x08005109
 8005140:	08005109 	.word	0x08005109
 8005144:	08005109 	.word	0x08005109
 8005148:	08005109 	.word	0x08005109
 800514c:	0800528d 	.word	0x0800528d
 8005150:	080051b7 	.word	0x080051b7
 8005154:	08005247 	.word	0x08005247
 8005158:	08005109 	.word	0x08005109
 800515c:	08005109 	.word	0x08005109
 8005160:	080052af 	.word	0x080052af
 8005164:	08005109 	.word	0x08005109
 8005168:	080051b7 	.word	0x080051b7
 800516c:	08005109 	.word	0x08005109
 8005170:	08005109 	.word	0x08005109
 8005174:	0800524f 	.word	0x0800524f
 8005178:	6833      	ldr	r3, [r6, #0]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6032      	str	r2, [r6, #0]
 8005180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005188:	2301      	movs	r3, #1
 800518a:	e09d      	b.n	80052c8 <_printf_i+0x1e8>
 800518c:	6833      	ldr	r3, [r6, #0]
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	6031      	str	r1, [r6, #0]
 8005194:	0606      	lsls	r6, r0, #24
 8005196:	d501      	bpl.n	800519c <_printf_i+0xbc>
 8005198:	681d      	ldr	r5, [r3, #0]
 800519a:	e003      	b.n	80051a4 <_printf_i+0xc4>
 800519c:	0645      	lsls	r5, r0, #25
 800519e:	d5fb      	bpl.n	8005198 <_printf_i+0xb8>
 80051a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051a4:	2d00      	cmp	r5, #0
 80051a6:	da03      	bge.n	80051b0 <_printf_i+0xd0>
 80051a8:	232d      	movs	r3, #45	@ 0x2d
 80051aa:	426d      	negs	r5, r5
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b0:	4859      	ldr	r0, [pc, #356]	@ (8005318 <_printf_i+0x238>)
 80051b2:	230a      	movs	r3, #10
 80051b4:	e011      	b.n	80051da <_printf_i+0xfa>
 80051b6:	6821      	ldr	r1, [r4, #0]
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	0608      	lsls	r0, r1, #24
 80051bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80051c0:	d402      	bmi.n	80051c8 <_printf_i+0xe8>
 80051c2:	0649      	lsls	r1, r1, #25
 80051c4:	bf48      	it	mi
 80051c6:	b2ad      	uxthmi	r5, r5
 80051c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ca:	4853      	ldr	r0, [pc, #332]	@ (8005318 <_printf_i+0x238>)
 80051cc:	6033      	str	r3, [r6, #0]
 80051ce:	bf14      	ite	ne
 80051d0:	230a      	movne	r3, #10
 80051d2:	2308      	moveq	r3, #8
 80051d4:	2100      	movs	r1, #0
 80051d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051da:	6866      	ldr	r6, [r4, #4]
 80051dc:	60a6      	str	r6, [r4, #8]
 80051de:	2e00      	cmp	r6, #0
 80051e0:	bfa2      	ittt	ge
 80051e2:	6821      	ldrge	r1, [r4, #0]
 80051e4:	f021 0104 	bicge.w	r1, r1, #4
 80051e8:	6021      	strge	r1, [r4, #0]
 80051ea:	b90d      	cbnz	r5, 80051f0 <_printf_i+0x110>
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	d04b      	beq.n	8005288 <_printf_i+0x1a8>
 80051f0:	4616      	mov	r6, r2
 80051f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80051f6:	fb03 5711 	mls	r7, r3, r1, r5
 80051fa:	5dc7      	ldrb	r7, [r0, r7]
 80051fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005200:	462f      	mov	r7, r5
 8005202:	42bb      	cmp	r3, r7
 8005204:	460d      	mov	r5, r1
 8005206:	d9f4      	bls.n	80051f2 <_printf_i+0x112>
 8005208:	2b08      	cmp	r3, #8
 800520a:	d10b      	bne.n	8005224 <_printf_i+0x144>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	07df      	lsls	r7, r3, #31
 8005210:	d508      	bpl.n	8005224 <_printf_i+0x144>
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	6861      	ldr	r1, [r4, #4]
 8005216:	4299      	cmp	r1, r3
 8005218:	bfde      	ittt	le
 800521a:	2330      	movle	r3, #48	@ 0x30
 800521c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005224:	1b92      	subs	r2, r2, r6
 8005226:	6122      	str	r2, [r4, #16]
 8005228:	f8cd a000 	str.w	sl, [sp]
 800522c:	464b      	mov	r3, r9
 800522e:	aa03      	add	r2, sp, #12
 8005230:	4621      	mov	r1, r4
 8005232:	4640      	mov	r0, r8
 8005234:	f7ff fee6 	bl	8005004 <_printf_common>
 8005238:	3001      	adds	r0, #1
 800523a:	d14a      	bne.n	80052d2 <_printf_i+0x1f2>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	b004      	add	sp, #16
 8005242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	f043 0320 	orr.w	r3, r3, #32
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	4833      	ldr	r0, [pc, #204]	@ (800531c <_printf_i+0x23c>)
 8005250:	2778      	movs	r7, #120	@ 0x78
 8005252:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	6831      	ldr	r1, [r6, #0]
 800525a:	061f      	lsls	r7, r3, #24
 800525c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005260:	d402      	bmi.n	8005268 <_printf_i+0x188>
 8005262:	065f      	lsls	r7, r3, #25
 8005264:	bf48      	it	mi
 8005266:	b2ad      	uxthmi	r5, r5
 8005268:	6031      	str	r1, [r6, #0]
 800526a:	07d9      	lsls	r1, r3, #31
 800526c:	bf44      	itt	mi
 800526e:	f043 0320 	orrmi.w	r3, r3, #32
 8005272:	6023      	strmi	r3, [r4, #0]
 8005274:	b11d      	cbz	r5, 800527e <_printf_i+0x19e>
 8005276:	2310      	movs	r3, #16
 8005278:	e7ac      	b.n	80051d4 <_printf_i+0xf4>
 800527a:	4827      	ldr	r0, [pc, #156]	@ (8005318 <_printf_i+0x238>)
 800527c:	e7e9      	b.n	8005252 <_printf_i+0x172>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f023 0320 	bic.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	e7f6      	b.n	8005276 <_printf_i+0x196>
 8005288:	4616      	mov	r6, r2
 800528a:	e7bd      	b.n	8005208 <_printf_i+0x128>
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	6825      	ldr	r5, [r4, #0]
 8005290:	6961      	ldr	r1, [r4, #20]
 8005292:	1d18      	adds	r0, r3, #4
 8005294:	6030      	str	r0, [r6, #0]
 8005296:	062e      	lsls	r6, r5, #24
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0x1c0>
 800529c:	6019      	str	r1, [r3, #0]
 800529e:	e002      	b.n	80052a6 <_printf_i+0x1c6>
 80052a0:	0668      	lsls	r0, r5, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0x1bc>
 80052a4:	8019      	strh	r1, [r3, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	4616      	mov	r6, r2
 80052ac:	e7bc      	b.n	8005228 <_printf_i+0x148>
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	1d1a      	adds	r2, r3, #4
 80052b2:	6032      	str	r2, [r6, #0]
 80052b4:	681e      	ldr	r6, [r3, #0]
 80052b6:	6862      	ldr	r2, [r4, #4]
 80052b8:	2100      	movs	r1, #0
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7fa ff98 	bl	80001f0 <memchr>
 80052c0:	b108      	cbz	r0, 80052c6 <_printf_i+0x1e6>
 80052c2:	1b80      	subs	r0, r0, r6
 80052c4:	6060      	str	r0, [r4, #4]
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	2300      	movs	r3, #0
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d0:	e7aa      	b.n	8005228 <_printf_i+0x148>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	4632      	mov	r2, r6
 80052d6:	4649      	mov	r1, r9
 80052d8:	4640      	mov	r0, r8
 80052da:	47d0      	blx	sl
 80052dc:	3001      	adds	r0, #1
 80052de:	d0ad      	beq.n	800523c <_printf_i+0x15c>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	079b      	lsls	r3, r3, #30
 80052e4:	d413      	bmi.n	800530e <_printf_i+0x22e>
 80052e6:	68e0      	ldr	r0, [r4, #12]
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	4298      	cmp	r0, r3
 80052ec:	bfb8      	it	lt
 80052ee:	4618      	movlt	r0, r3
 80052f0:	e7a6      	b.n	8005240 <_printf_i+0x160>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4632      	mov	r2, r6
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	47d0      	blx	sl
 80052fc:	3001      	adds	r0, #1
 80052fe:	d09d      	beq.n	800523c <_printf_i+0x15c>
 8005300:	3501      	adds	r5, #1
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	9903      	ldr	r1, [sp, #12]
 8005306:	1a5b      	subs	r3, r3, r1
 8005308:	42ab      	cmp	r3, r5
 800530a:	dcf2      	bgt.n	80052f2 <_printf_i+0x212>
 800530c:	e7eb      	b.n	80052e6 <_printf_i+0x206>
 800530e:	2500      	movs	r5, #0
 8005310:	f104 0619 	add.w	r6, r4, #25
 8005314:	e7f5      	b.n	8005302 <_printf_i+0x222>
 8005316:	bf00      	nop
 8005318:	0800545d 	.word	0x0800545d
 800531c:	0800546e 	.word	0x0800546e

08005320 <memmove>:
 8005320:	4288      	cmp	r0, r1
 8005322:	b510      	push	{r4, lr}
 8005324:	eb01 0402 	add.w	r4, r1, r2
 8005328:	d902      	bls.n	8005330 <memmove+0x10>
 800532a:	4284      	cmp	r4, r0
 800532c:	4623      	mov	r3, r4
 800532e:	d807      	bhi.n	8005340 <memmove+0x20>
 8005330:	1e43      	subs	r3, r0, #1
 8005332:	42a1      	cmp	r1, r4
 8005334:	d008      	beq.n	8005348 <memmove+0x28>
 8005336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800533a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800533e:	e7f8      	b.n	8005332 <memmove+0x12>
 8005340:	4402      	add	r2, r0
 8005342:	4601      	mov	r1, r0
 8005344:	428a      	cmp	r2, r1
 8005346:	d100      	bne.n	800534a <memmove+0x2a>
 8005348:	bd10      	pop	{r4, pc}
 800534a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800534e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005352:	e7f7      	b.n	8005344 <memmove+0x24>

08005354 <_sbrk_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4d06      	ldr	r5, [pc, #24]	@ (8005370 <_sbrk_r+0x1c>)
 8005358:	2300      	movs	r3, #0
 800535a:	4604      	mov	r4, r0
 800535c:	4608      	mov	r0, r1
 800535e:	602b      	str	r3, [r5, #0]
 8005360:	f7fc faa0 	bl	80018a4 <_sbrk>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_sbrk_r+0x1a>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_sbrk_r+0x1a>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000538 	.word	0x20000538

08005374 <memcpy>:
 8005374:	440a      	add	r2, r1
 8005376:	4291      	cmp	r1, r2
 8005378:	f100 33ff 	add.w	r3, r0, #4294967295
 800537c:	d100      	bne.n	8005380 <memcpy+0xc>
 800537e:	4770      	bx	lr
 8005380:	b510      	push	{r4, lr}
 8005382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538a:	4291      	cmp	r1, r2
 800538c:	d1f9      	bne.n	8005382 <memcpy+0xe>
 800538e:	bd10      	pop	{r4, pc}

08005390 <_realloc_r>:
 8005390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005394:	4680      	mov	r8, r0
 8005396:	4615      	mov	r5, r2
 8005398:	460c      	mov	r4, r1
 800539a:	b921      	cbnz	r1, 80053a6 <_realloc_r+0x16>
 800539c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053a0:	4611      	mov	r1, r2
 80053a2:	f7ff bc4b 	b.w	8004c3c <_malloc_r>
 80053a6:	b92a      	cbnz	r2, 80053b4 <_realloc_r+0x24>
 80053a8:	f7ff fbdc 	bl	8004b64 <_free_r>
 80053ac:	2400      	movs	r4, #0
 80053ae:	4620      	mov	r0, r4
 80053b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b4:	f000 f81a 	bl	80053ec <_malloc_usable_size_r>
 80053b8:	4285      	cmp	r5, r0
 80053ba:	4606      	mov	r6, r0
 80053bc:	d802      	bhi.n	80053c4 <_realloc_r+0x34>
 80053be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80053c2:	d8f4      	bhi.n	80053ae <_realloc_r+0x1e>
 80053c4:	4629      	mov	r1, r5
 80053c6:	4640      	mov	r0, r8
 80053c8:	f7ff fc38 	bl	8004c3c <_malloc_r>
 80053cc:	4607      	mov	r7, r0
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d0ec      	beq.n	80053ac <_realloc_r+0x1c>
 80053d2:	42b5      	cmp	r5, r6
 80053d4:	462a      	mov	r2, r5
 80053d6:	4621      	mov	r1, r4
 80053d8:	bf28      	it	cs
 80053da:	4632      	movcs	r2, r6
 80053dc:	f7ff ffca 	bl	8005374 <memcpy>
 80053e0:	4621      	mov	r1, r4
 80053e2:	4640      	mov	r0, r8
 80053e4:	f7ff fbbe 	bl	8004b64 <_free_r>
 80053e8:	463c      	mov	r4, r7
 80053ea:	e7e0      	b.n	80053ae <_realloc_r+0x1e>

080053ec <_malloc_usable_size_r>:
 80053ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f0:	1f18      	subs	r0, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bfbc      	itt	lt
 80053f6:	580b      	ldrlt	r3, [r1, r0]
 80053f8:	18c0      	addlt	r0, r0, r3
 80053fa:	4770      	bx	lr

080053fc <_init>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr

08005408 <_fini>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr
