
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006df8  08006df8  00007df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  000090c4  2**0
                  CONTENTS
  4 .ARM          00000008  08007208  08007208  00008208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007210  08007210  000090c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007210  08007210  00008210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007214  08007214  00008214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08007218  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002550  200000c4  080072dc  000090c4  2**2
                  ALLOC
 10 ._user_heap_stack 00010404  20002614  080072dc  00009614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d710  00000000  00000000  000090f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002786  00000000  00000000  00016804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00018f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a78  00000000  00000000  00019d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001917b  00000000  00000000  0001a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113b9  00000000  00000000  0003393b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000955aa  00000000  00000000  00044cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da29e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a4  00000000  00000000  000da2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000de588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006de0 	.word	0x08006de0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	08006de0 	.word	0x08006de0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(uint8_t segments) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	2104      	movs	r1, #4
 800058e:	4830      	ldr	r0, [pc, #192]	@ (8000650 <setSegments+0xe0>)
 8000590:	f002 fe8e 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	2b00      	cmp	r3, #0
 800059c:	bf0c      	ite	eq
 800059e:	2301      	moveq	r3, #1
 80005a0:	2300      	movne	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	2101      	movs	r1, #1
 80005a8:	4829      	ldr	r0, [pc, #164]	@ (8000650 <setSegments+0xe0>)
 80005aa:	f002 fe81 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf0c      	ite	eq
 80005b8:	2301      	moveq	r3, #1
 80005ba:	2300      	movne	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	2108      	movs	r1, #8
 80005c2:	4823      	ldr	r0, [pc, #140]	@ (8000650 <setSegments+0xe0>)
 80005c4:	f002 fe74 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	2104      	movs	r1, #4
 80005dc:	481d      	ldr	r0, [pc, #116]	@ (8000654 <setSegments+0xe4>)
 80005de:	f002 fe67 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 0310 	and.w	r3, r3, #16
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2101      	movs	r1, #1
 80005f6:	4817      	ldr	r0, [pc, #92]	@ (8000654 <setSegments+0xe4>)
 80005f8:	f002 fe5a 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	2110      	movs	r1, #16
 8000610:	480f      	ldr	r0, [pc, #60]	@ (8000650 <setSegments+0xe0>)
 8000612:	f002 fe4d 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	2102      	movs	r1, #2
 800062a:	4809      	ldr	r0, [pc, #36]	@ (8000650 <setSegments+0xe0>)
 800062c:	f002 fe40 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	43db      	mvns	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	09db      	lsrs	r3, r3, #7
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	2140      	movs	r1, #64	@ 0x40
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <setSegments+0xe0>)
 8000642:	f002 fe35 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400

08000658 <activateDigit>:

// Activate a single digit
void activateDigit(uint8_t digit) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b01      	cmp	r3, #1
 8000666:	bf0c      	ite	eq
 8000668:	2301      	moveq	r3, #1
 800066a:	2300      	movne	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000674:	4819      	ldr	r0, [pc, #100]	@ (80006dc <activateDigit+0x84>)
 8000676:	f002 fe1b 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b02      	cmp	r3, #2
 800067e:	bf0c      	ite	eq
 8000680:	2301      	moveq	r3, #1
 8000682:	2300      	movne	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	4813      	ldr	r0, [pc, #76]	@ (80006dc <activateDigit+0x84>)
 800068e:	f002 fe0f 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b03      	cmp	r3, #3
 8000696:	bf0c      	ite	eq
 8000698:	2301      	moveq	r3, #1
 800069a:	2300      	movne	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	480f      	ldr	r0, [pc, #60]	@ (80006e0 <activateDigit+0x88>)
 80006a4:	f002 fe04 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	bf0c      	ite	eq
 80006ae:	2301      	moveq	r3, #1
 80006b0:	2300      	movne	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2120      	movs	r1, #32
 80006b8:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <activateDigit+0x88>)
 80006ba:	f002 fdf9 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	bf0c      	ite	eq
 80006c4:	2301      	moveq	r3, #1
 80006c6:	2300      	movne	r3, #0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	2102      	movs	r1, #2
 80006ce:	4803      	ldr	r0, [pc, #12]	@ (80006dc <activateDigit+0x84>)
 80006d0:	f002 fdee 	bl	80032b0 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40020000 	.word	0x40020000

080006e4 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

    // Truncate the input to 4 characters
    char truncatedInput[5];
    strncpy(truncatedInput, input, 4);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2204      	movs	r2, #4
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f005 fb18 	bl	8005d2a <strncpy>
    truncatedInput[4] = '\0';
 80006fa:	2300      	movs	r3, #0
 80006fc:	733b      	strb	r3, [r7, #12]

    for(uint8_t i = 0; i < 4; i++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e1ab      	b.n	8000a5c <Segment_Display+0x378>
        activateDigit(i + 1);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	3301      	adds	r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ffa4 	bl	8000658 <activateDigit>

		char ch = truncatedInput[i];
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3310      	adds	r3, #16
 8000714:	443b      	add	r3, r7
 8000716:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800071a:	73bb      	strb	r3, [r7, #14]
        switch(ch) {
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000720:	f200 8192 	bhi.w	8000a48 <Segment_Display+0x364>
 8000724:	a201      	add	r2, pc, #4	@ (adr r2, 800072c <Segment_Display+0x48>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	08000a67 	.word	0x08000a67
 8000730:	08000a49 	.word	0x08000a49
 8000734:	08000a49 	.word	0x08000a49
 8000738:	08000a49 	.word	0x08000a49
 800073c:	08000a49 	.word	0x08000a49
 8000740:	08000a49 	.word	0x08000a49
 8000744:	08000a49 	.word	0x08000a49
 8000748:	08000a49 	.word	0x08000a49
 800074c:	08000a49 	.word	0x08000a49
 8000750:	08000a49 	.word	0x08000a49
 8000754:	08000a49 	.word	0x08000a49
 8000758:	08000a49 	.word	0x08000a49
 800075c:	08000a49 	.word	0x08000a49
 8000760:	08000a49 	.word	0x08000a49
 8000764:	08000a49 	.word	0x08000a49
 8000768:	08000a49 	.word	0x08000a49
 800076c:	08000a49 	.word	0x08000a49
 8000770:	08000a49 	.word	0x08000a49
 8000774:	08000a49 	.word	0x08000a49
 8000778:	08000a49 	.word	0x08000a49
 800077c:	08000a49 	.word	0x08000a49
 8000780:	08000a49 	.word	0x08000a49
 8000784:	08000a49 	.word	0x08000a49
 8000788:	08000a49 	.word	0x08000a49
 800078c:	08000a49 	.word	0x08000a49
 8000790:	08000a49 	.word	0x08000a49
 8000794:	08000a49 	.word	0x08000a49
 8000798:	08000a49 	.word	0x08000a49
 800079c:	08000a49 	.word	0x08000a49
 80007a0:	08000a49 	.word	0x08000a49
 80007a4:	08000a49 	.word	0x08000a49
 80007a8:	08000a49 	.word	0x08000a49
 80007ac:	08000a39 	.word	0x08000a39
 80007b0:	08000a49 	.word	0x08000a49
 80007b4:	08000a49 	.word	0x08000a49
 80007b8:	08000a49 	.word	0x08000a49
 80007bc:	08000a49 	.word	0x08000a49
 80007c0:	08000a49 	.word	0x08000a49
 80007c4:	08000a49 	.word	0x08000a49
 80007c8:	08000a49 	.word	0x08000a49
 80007cc:	08000a49 	.word	0x08000a49
 80007d0:	08000a49 	.word	0x08000a49
 80007d4:	08000a49 	.word	0x08000a49
 80007d8:	08000a49 	.word	0x08000a49
 80007dc:	08000a49 	.word	0x08000a49
 80007e0:	08000a41 	.word	0x08000a41
 80007e4:	08000a49 	.word	0x08000a49
 80007e8:	08000a49 	.word	0x08000a49
 80007ec:	08000919 	.word	0x08000919
 80007f0:	08000921 	.word	0x08000921
 80007f4:	08000929 	.word	0x08000929
 80007f8:	08000931 	.word	0x08000931
 80007fc:	08000939 	.word	0x08000939
 8000800:	08000941 	.word	0x08000941
 8000804:	08000949 	.word	0x08000949
 8000808:	08000951 	.word	0x08000951
 800080c:	08000959 	.word	0x08000959
 8000810:	08000961 	.word	0x08000961
 8000814:	08000a49 	.word	0x08000a49
 8000818:	08000a49 	.word	0x08000a49
 800081c:	08000a49 	.word	0x08000a49
 8000820:	08000a49 	.word	0x08000a49
 8000824:	08000a49 	.word	0x08000a49
 8000828:	08000a49 	.word	0x08000a49
 800082c:	08000a49 	.word	0x08000a49
 8000830:	08000969 	.word	0x08000969
 8000834:	08000971 	.word	0x08000971
 8000838:	08000979 	.word	0x08000979
 800083c:	08000981 	.word	0x08000981
 8000840:	08000989 	.word	0x08000989
 8000844:	08000991 	.word	0x08000991
 8000848:	08000999 	.word	0x08000999
 800084c:	080009a1 	.word	0x080009a1
 8000850:	080009a9 	.word	0x080009a9
 8000854:	080009b1 	.word	0x080009b1
 8000858:	080009b9 	.word	0x080009b9
 800085c:	080009c1 	.word	0x080009c1
 8000860:	080009c9 	.word	0x080009c9
 8000864:	080009d1 	.word	0x080009d1
 8000868:	080009d9 	.word	0x080009d9
 800086c:	080009e1 	.word	0x080009e1
 8000870:	080009e9 	.word	0x080009e9
 8000874:	080009f1 	.word	0x080009f1
 8000878:	080009f9 	.word	0x080009f9
 800087c:	08000a01 	.word	0x08000a01
 8000880:	08000a09 	.word	0x08000a09
 8000884:	08000a11 	.word	0x08000a11
 8000888:	08000a19 	.word	0x08000a19
 800088c:	08000a21 	.word	0x08000a21
 8000890:	08000a29 	.word	0x08000a29
 8000894:	08000a31 	.word	0x08000a31
 8000898:	08000a49 	.word	0x08000a49
 800089c:	08000a49 	.word	0x08000a49
 80008a0:	08000a49 	.word	0x08000a49
 80008a4:	08000a49 	.word	0x08000a49
 80008a8:	08000a49 	.word	0x08000a49
 80008ac:	08000a49 	.word	0x08000a49
 80008b0:	08000969 	.word	0x08000969
 80008b4:	08000971 	.word	0x08000971
 80008b8:	08000979 	.word	0x08000979
 80008bc:	08000981 	.word	0x08000981
 80008c0:	08000989 	.word	0x08000989
 80008c4:	08000991 	.word	0x08000991
 80008c8:	08000999 	.word	0x08000999
 80008cc:	080009a1 	.word	0x080009a1
 80008d0:	080009a9 	.word	0x080009a9
 80008d4:	080009b1 	.word	0x080009b1
 80008d8:	080009b9 	.word	0x080009b9
 80008dc:	080009c1 	.word	0x080009c1
 80008e0:	080009c9 	.word	0x080009c9
 80008e4:	080009d1 	.word	0x080009d1
 80008e8:	080009d9 	.word	0x080009d9
 80008ec:	080009e1 	.word	0x080009e1
 80008f0:	080009e9 	.word	0x080009e9
 80008f4:	080009f1 	.word	0x080009f1
 80008f8:	080009f9 	.word	0x080009f9
 80008fc:	08000a01 	.word	0x08000a01
 8000900:	08000a09 	.word	0x08000a09
 8000904:	08000a11 	.word	0x08000a11
 8000908:	08000a19 	.word	0x08000a19
 800090c:	08000a21 	.word	0x08000a21
 8000910:	08000a29 	.word	0x08000a29
 8000914:	08000a31 	.word	0x08000a31
        	case '\0':
        		return;
            case '0':
                setSegments(0x3F);
 8000918:	203f      	movs	r0, #63	@ 0x3f
 800091a:	f7ff fe29 	bl	8000570 <setSegments>
                break;
 800091e:	e097      	b.n	8000a50 <Segment_Display+0x36c>
            case '1':
                setSegments(0x06);
 8000920:	2006      	movs	r0, #6
 8000922:	f7ff fe25 	bl	8000570 <setSegments>
                break;
 8000926:	e093      	b.n	8000a50 <Segment_Display+0x36c>
            case '2':
                setSegments(0x5B);
 8000928:	205b      	movs	r0, #91	@ 0x5b
 800092a:	f7ff fe21 	bl	8000570 <setSegments>
                break;
 800092e:	e08f      	b.n	8000a50 <Segment_Display+0x36c>
            case '3':
                setSegments(0x4F);
 8000930:	204f      	movs	r0, #79	@ 0x4f
 8000932:	f7ff fe1d 	bl	8000570 <setSegments>
                break;
 8000936:	e08b      	b.n	8000a50 <Segment_Display+0x36c>
            case '4':
                setSegments(0x66);
 8000938:	2066      	movs	r0, #102	@ 0x66
 800093a:	f7ff fe19 	bl	8000570 <setSegments>
                break;
 800093e:	e087      	b.n	8000a50 <Segment_Display+0x36c>
            case '5':
                setSegments(0x6D);
 8000940:	206d      	movs	r0, #109	@ 0x6d
 8000942:	f7ff fe15 	bl	8000570 <setSegments>
                break;
 8000946:	e083      	b.n	8000a50 <Segment_Display+0x36c>
            case '6':
                setSegments(0x7D);
 8000948:	207d      	movs	r0, #125	@ 0x7d
 800094a:	f7ff fe11 	bl	8000570 <setSegments>
                break;
 800094e:	e07f      	b.n	8000a50 <Segment_Display+0x36c>
            case '7':
                setSegments(0x07);
 8000950:	2007      	movs	r0, #7
 8000952:	f7ff fe0d 	bl	8000570 <setSegments>
                break;
 8000956:	e07b      	b.n	8000a50 <Segment_Display+0x36c>
            case '8':
                setSegments(0x7F);
 8000958:	207f      	movs	r0, #127	@ 0x7f
 800095a:	f7ff fe09 	bl	8000570 <setSegments>
                break;
 800095e:	e077      	b.n	8000a50 <Segment_Display+0x36c>
            case '9':
                setSegments(0x6F);
 8000960:	206f      	movs	r0, #111	@ 0x6f
 8000962:	f7ff fe05 	bl	8000570 <setSegments>
                break;
 8000966:	e073      	b.n	8000a50 <Segment_Display+0x36c>
            case 'a':
            case 'A':
                setSegments(0x77);
 8000968:	2077      	movs	r0, #119	@ 0x77
 800096a:	f7ff fe01 	bl	8000570 <setSegments>
                break;
 800096e:	e06f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'b':
            case 'B':
                setSegments(0x7C);
 8000970:	207c      	movs	r0, #124	@ 0x7c
 8000972:	f7ff fdfd 	bl	8000570 <setSegments>
                break;
 8000976:	e06b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'c':
            case 'C':
                setSegments(0x39);
 8000978:	2039      	movs	r0, #57	@ 0x39
 800097a:	f7ff fdf9 	bl	8000570 <setSegments>
                break;
 800097e:	e067      	b.n	8000a50 <Segment_Display+0x36c>
            case 'd':
            case 'D':
                setSegments(0x5E);
 8000980:	205e      	movs	r0, #94	@ 0x5e
 8000982:	f7ff fdf5 	bl	8000570 <setSegments>
                break;
 8000986:	e063      	b.n	8000a50 <Segment_Display+0x36c>
            case 'e':
            case 'E':
                setSegments(0x79);
 8000988:	2079      	movs	r0, #121	@ 0x79
 800098a:	f7ff fdf1 	bl	8000570 <setSegments>
                break;
 800098e:	e05f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'f':
            case 'F':
                setSegments(0x71);
 8000990:	2071      	movs	r0, #113	@ 0x71
 8000992:	f7ff fded 	bl	8000570 <setSegments>
                break;
 8000996:	e05b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'g':
            case 'G':
                setSegments(0x3D);
 8000998:	203d      	movs	r0, #61	@ 0x3d
 800099a:	f7ff fde9 	bl	8000570 <setSegments>
                break;
 800099e:	e057      	b.n	8000a50 <Segment_Display+0x36c>
            case 'h':
            case 'H':
                setSegments(0x76);
 80009a0:	2076      	movs	r0, #118	@ 0x76
 80009a2:	f7ff fde5 	bl	8000570 <setSegments>
                break;
 80009a6:	e053      	b.n	8000a50 <Segment_Display+0x36c>
            case 'i':
            case 'I':
                setSegments(0x30);
 80009a8:	2030      	movs	r0, #48	@ 0x30
 80009aa:	f7ff fde1 	bl	8000570 <setSegments>
                break;
 80009ae:	e04f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'j':
            case 'J':
                setSegments(0x1E);
 80009b0:	201e      	movs	r0, #30
 80009b2:	f7ff fddd 	bl	8000570 <setSegments>
                break;
 80009b6:	e04b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 80009b8:	2076      	movs	r0, #118	@ 0x76
 80009ba:	f7ff fdd9 	bl	8000570 <setSegments>
                break;
 80009be:	e047      	b.n	8000a50 <Segment_Display+0x36c>
            case 'l':
            case 'L':
                setSegments(0x38);
 80009c0:	2038      	movs	r0, #56	@ 0x38
 80009c2:	f7ff fdd5 	bl	8000570 <setSegments>
                break;
 80009c6:	e043      	b.n	8000a50 <Segment_Display+0x36c>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 80009c8:	2037      	movs	r0, #55	@ 0x37
 80009ca:	f7ff fdd1 	bl	8000570 <setSegments>
                break;
 80009ce:	e03f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'n':
            case 'N':
                setSegments(0x54);
 80009d0:	2054      	movs	r0, #84	@ 0x54
 80009d2:	f7ff fdcd 	bl	8000570 <setSegments>
                break;
 80009d6:	e03b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'o':
            case 'O':
                setSegments(0x3F);
 80009d8:	203f      	movs	r0, #63	@ 0x3f
 80009da:	f7ff fdc9 	bl	8000570 <setSegments>
                break;
 80009de:	e037      	b.n	8000a50 <Segment_Display+0x36c>
            case 'p':
            case 'P':
                setSegments(0x73);
 80009e0:	2073      	movs	r0, #115	@ 0x73
 80009e2:	f7ff fdc5 	bl	8000570 <setSegments>
                break;
 80009e6:	e033      	b.n	8000a50 <Segment_Display+0x36c>
            case 'q':
            case 'Q':
                setSegments(0x67);
 80009e8:	2067      	movs	r0, #103	@ 0x67
 80009ea:	f7ff fdc1 	bl	8000570 <setSegments>
                break;
 80009ee:	e02f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'r':
            case 'R':
                setSegments(0x50);
 80009f0:	2050      	movs	r0, #80	@ 0x50
 80009f2:	f7ff fdbd 	bl	8000570 <setSegments>
                break;
 80009f6:	e02b      	b.n	8000a50 <Segment_Display+0x36c>
            case 's':
            case 'S':
                setSegments(0x6D);
 80009f8:	206d      	movs	r0, #109	@ 0x6d
 80009fa:	f7ff fdb9 	bl	8000570 <setSegments>
                break;
 80009fe:	e027      	b.n	8000a50 <Segment_Display+0x36c>
            case 't':
            case 'T':
                setSegments(0x78);
 8000a00:	2078      	movs	r0, #120	@ 0x78
 8000a02:	f7ff fdb5 	bl	8000570 <setSegments>
                break;
 8000a06:	e023      	b.n	8000a50 <Segment_Display+0x36c>
            case 'u':
            case 'U':
                setSegments(0x3E);
 8000a08:	203e      	movs	r0, #62	@ 0x3e
 8000a0a:	f7ff fdb1 	bl	8000570 <setSegments>
                break;
 8000a0e:	e01f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8000a10:	203e      	movs	r0, #62	@ 0x3e
 8000a12:	f7ff fdad 	bl	8000570 <setSegments>
                break;
 8000a16:	e01b      	b.n	8000a50 <Segment_Display+0x36c>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 8000a18:	202a      	movs	r0, #42	@ 0x2a
 8000a1a:	f7ff fda9 	bl	8000570 <setSegments>
                break;
 8000a1e:	e017      	b.n	8000a50 <Segment_Display+0x36c>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8000a20:	2076      	movs	r0, #118	@ 0x76
 8000a22:	f7ff fda5 	bl	8000570 <setSegments>
                break;
 8000a26:	e013      	b.n	8000a50 <Segment_Display+0x36c>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 8000a28:	206e      	movs	r0, #110	@ 0x6e
 8000a2a:	f7ff fda1 	bl	8000570 <setSegments>
                break;
 8000a2e:	e00f      	b.n	8000a50 <Segment_Display+0x36c>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8000a30:	205b      	movs	r0, #91	@ 0x5b
 8000a32:	f7ff fd9d 	bl	8000570 <setSegments>
                break;
 8000a36:	e00b      	b.n	8000a50 <Segment_Display+0x36c>
            case ' ':
                // Blank character
                setSegments(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fd99 	bl	8000570 <setSegments>
                break;
 8000a3e:	e007      	b.n	8000a50 <Segment_Display+0x36c>
            case '-':
            	setSegments(0x04);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f7ff fd95 	bl	8000570 <setSegments>
            	break;
 8000a46:	e003      	b.n	8000a50 <Segment_Display+0x36c>
            default:
            	setSegments(0x00);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff fd91 	bl	8000570 <setSegments>
                break;
 8000a4e:	bf00      	nop
        }
        HAL_Delay(5);
 8000a50:	2005      	movs	r0, #5
 8000a52:	f001 fdc9 	bl	80025e8 <HAL_Delay>
    for(uint8_t i = 0; i < 4; i++) {
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	f67f ae50 	bls.w	8000704 <Segment_Display+0x20>
 8000a64:	e000      	b.n	8000a68 <Segment_Display+0x384>
        		return;
 8000a66:	bf00      	nop
    }
}
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop

08000a70 <turnOnLED>:
/**
 * @brief   Turns on an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn on.
 */
void turnOnLED(LED *frame, uint8_t index) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	frame[index].on = true;
 8000a7c:	78fa      	ldrb	r2, [r7, #3]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	2201      	movs	r2, #1
 8000a8a:	711a      	strb	r2, [r3, #4]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <turnOffLED>:
/**
 * @brief   Turns off an LED by setting its 'draw' flag to false.
 *
 * @param   number The number of the LED to turn off.
 */
void turnOffLED(LED *frame, uint8_t index) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	frame[index].on = false;
 8000aa4:	78fa      	ldrb	r2, [r7, #3]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	711a      	strb	r2, [r3, #4]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <getLEDsWithEffect>:
 * @param   arr Pointer to an array for storing indices of lit LEDs.
 *            This array should be preallocated by the caller.
 *
 * @return  Number of lit LEDs found. This value represents the size of the updated array.
 */
uint8_t getLEDsWithEffect(uint8_t *result, LED *display, Effect effect) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	4613      	mov	r3, r2
 8000acc:	71fb      	strb	r3, [r7, #7]

    uint32_t index = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	e015      	b.n	8000b04 <getLEDsWithEffect+0x44>
    	if(display[i].effect == effect) {
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	78db      	ldrb	r3, [r3, #3]
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d108      	bne.n	8000afe <getLEDsWithEffect+0x3e>
    		result[index] = i;
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	701a      	strb	r2, [r3, #0]
            index++;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < MATRIX_SIZE; i++) {
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	3301      	adds	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b8e      	cmp	r3, #142	@ 0x8e
 8000b08:	dde6      	ble.n	8000ad8 <getLEDsWithEffect+0x18>
    	}
    }

    return index++;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	617a      	str	r2, [r7, #20]
 8000b10:	b2db      	uxtb	r3, r3
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <wipePWMBuffer>:
 * @brief Converts a bitmap to PWM data for WS2812B LEDs.
 *
 * Wipes PWM Buffer by filling it with user defined ZERO PWM values.
 *
 */
void wipePWMBuffer(void) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	e007      	b.n	8000b3c <wipePWMBuffer+0x1c>
        pwmBuffer[i] = ZERO;
 8000b2c:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <wipePWMBuffer+0x34>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	211b      	movs	r1, #27
 8000b32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < PWM_ARRAY_SIZE; i++) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f640 5299 	movw	r2, #3481	@ 0xd99
 8000b42:	4293      	cmp	r3, r2
 8000b44:	ddf2      	ble.n	8000b2c <wipePWMBuffer+0xc>
    }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	200000e4 	.word	0x200000e4

08000b58 <updatePwmBuffer>:
 * (green, red, blue) order.
 *
 * @note    The PWM buffer must be appropriately sized to accommodate the
 *          LED data. Each LED requires 24 bits in the PWM buffer.
 */
void updatePwmBuffer(LED *currentFrame) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

    wipePWMBuffer();
 8000b60:	f7ff ffde 	bl	8000b20 <wipePWMBuffer>

    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e067      	b.n	8000c3a <updatePwmBuffer+0xe2>

        if(!currentFrame[ledNumber].on) {
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d157      	bne.n	8000c32 <updatePwmBuffer+0xda>
            continue;
        }


        uint8_t red     = currentFrame[ledNumber].red;
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	73fb      	strb	r3, [r7, #15]
        uint8_t green   = currentFrame[ledNumber].green;
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	73bb      	strb	r3, [r7, #14]
        uint8_t blue    = currentFrame[ledNumber].blue;
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	789b      	ldrb	r3, [r3, #2]
 8000bb0:	737b      	strb	r3, [r7, #13]
        uint32_t arrayIndex = ledNumber * 24;
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	60bb      	str	r3, [r7, #8]

        // ws2812b is GRB, so we swap the positions of red and green
        for(int bit = 0; bit < 8; bit++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	e032      	b.n	8000c2a <updatePwmBuffer+0xd2>

            if(green & (1 << bit)) {
 8000bc4:	7bba      	ldrb	r2, [r7, #14]
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	fa42 f303 	asr.w	r3, r2, r3
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <updatePwmBuffer+0x8c>
                pwmBuffer[arrayIndex + 16 + (7 - bit)] = ONE;
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	3317      	adds	r3, #23
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <updatePwmBuffer+0xf4>)
 8000bde:	2136      	movs	r1, #54	@ 0x36
 8000be0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(red & (1 << bit)) {
 8000be4:	7bfa      	ldrb	r2, [r7, #15]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fa42 f303 	asr.w	r3, r2, r3
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <updatePwmBuffer+0xac>
                pwmBuffer[arrayIndex + 8 + (7 - bit)] = ONE;
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	330f      	adds	r3, #15
 8000bfc:	4a13      	ldr	r2, [pc, #76]	@ (8000c4c <updatePwmBuffer+0xf4>)
 8000bfe:	2136      	movs	r1, #54	@ 0x36
 8000c00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if(blue & (1 << bit)) {
 8000c04:	7b7a      	ldrb	r2, [r7, #13]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa42 f303 	asr.w	r3, r2, r3
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <updatePwmBuffer+0xcc>
                pwmBuffer[arrayIndex + (7 - bit)] = ONE;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	3307      	adds	r3, #7
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <updatePwmBuffer+0xf4>)
 8000c1e:	2136      	movs	r1, #54	@ 0x36
 8000c20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(int bit = 0; bit < 8; bit++) {
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	3301      	adds	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	2b07      	cmp	r3, #7
 8000c2e:	ddc9      	ble.n	8000bc4 <updatePwmBuffer+0x6c>
 8000c30:	e000      	b.n	8000c34 <updatePwmBuffer+0xdc>
            continue;
 8000c32:	bf00      	nop
    for(int ledNumber = 0; ledNumber < MATRIX_SIZE; ledNumber++) {
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3301      	adds	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b8e      	cmp	r3, #142	@ 0x8e
 8000c3e:	dd94      	ble.n	8000b6a <updatePwmBuffer+0x12>
            }
        }

    }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000e4 	.word	0x200000e4

08000c50 <DMA_Send>:


void DMA_Send() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmBuffer, PWM_ARRAY_SIZE + 1);
 8000c54:	f640 539b 	movw	r3, #3483	@ 0xd9b
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <DMA_Send+0x28>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <DMA_Send+0x2c>)
 8000c5e:	f003 fc09 	bl	8004474 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {}
 8000c62:	bf00      	nop
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <DMA_Send+0x30>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0fb      	beq.n	8000c64 <DMA_Send+0x14>
	datasentflag = 0;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <DMA_Send+0x30>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000e4 	.word	0x200000e4
 8000c7c:	2000231c 	.word	0x2000231c
 8000c80:	200000e0 	.word	0x200000e0

08000c84 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f003 fda0 	bl	80047d4 <HAL_TIM_PWM_Stop_DMA>
    datasentflag = 1;
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000e0 	.word	0x200000e0

08000ca8 <shuffleArray>:
 * @param   size  Number of elements in the array.
 *
 * @note    The array must be non-empty and contain at least two elements for shuffling to occur.
 *          Otherwise, the function does nothing.
 */
void shuffleArray(uint8_t *array, uint32_t size) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
    if (size > 1) {
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d92d      	bls.n	8000d14 <shuffleArray+0x6c>
        for (uint32_t i = 0; i < size - 1; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e025      	b.n	8000d0a <shuffleArray+0x62>
            uint32_t j = i + (uint32_t) rand() / (RAND_MAX / (size - i) + 1);
 8000cbe:	f004 feb5 	bl	8005a2c <rand>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4413      	add	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
            uint8_t t = array[j];
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	73fb      	strb	r3, [r7, #15]
            array[j] = array[i];
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	441a      	add	r2, r3
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	440b      	add	r3, r1
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	701a      	strb	r2, [r3, #0]
            array[i] = t;
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	4413      	add	r3, r2
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size - 1; i++) {
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3d4      	bcc.n	8000cbe <shuffleArray+0x16>
        }
    }
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <addBitmapToDisplay>:
 *
 * @param[in] bitmap     Bitmap representing LED layout.
 * @param[in] color      24-bit color value (0xRRGGBB).
 * @param[in] brightness Brightness level (0-255).
 */
void addBitmapToDisplay(const uint16_t matrix[MATRIX_HEIGHT], LED *display, RgbColor color, Effect effect) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	70fb      	strb	r3, [r7, #3]

    //TODO: create function
    // applyBrightness((uint8_t*) red, (uint8_t*) green, (uint8_t*) blue, brightness);

    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e04c      	b.n	8000dca <addBitmapToDisplay+0xae>
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	e043      	b.n	8000dbe <addBitmapToDisplay+0xa2>

            uint8_t ledNumber = (MATRIX_WIDTH * i) + j;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	441a      	add	r2, r3
 8000d40:	0052      	lsls	r2, r2, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	75fb      	strb	r3, [r7, #23]

            if(matrix[i] & (1 << j)) {
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	fa42 f303 	asr.w	r3, r2, r3
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d027      	beq.n	8000db8 <addBitmapToDisplay+0x9c>
            	display[ledNumber].red = color.r;
 8000d68:	7dfa      	ldrb	r2, [r7, #23]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	4413      	add	r3, r2
 8000d74:	793a      	ldrb	r2, [r7, #4]
 8000d76:	701a      	strb	r2, [r3, #0]
            	display[ledNumber].green = color.g;
 8000d78:	7dfa      	ldrb	r2, [r7, #23]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	4413      	add	r3, r2
 8000d84:	797a      	ldrb	r2, [r7, #5]
 8000d86:	705a      	strb	r2, [r3, #1]
            	display[ledNumber].blue = color.b;
 8000d88:	7dfa      	ldrb	r2, [r7, #23]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	4413      	add	r3, r2
 8000d94:	79ba      	ldrb	r2, [r7, #6]
 8000d96:	709a      	strb	r2, [r3, #2]
            	display[ledNumber].on = true;
 8000d98:	7dfa      	ldrb	r2, [r7, #23]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	4413      	add	r3, r2
 8000da4:	2201      	movs	r2, #1
 8000da6:	711a      	strb	r2, [r3, #4]
            	display[ledNumber].effect = effect;
 8000da8:	7dfa      	ldrb	r2, [r7, #23]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	4413      	add	r3, r2
 8000db4:	78fa      	ldrb	r2, [r7, #3]
 8000db6:	70da      	strb	r2, [r3, #3]
        for(int j = 0; j < MATRIX_WIDTH; j++) {
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	ddb8      	ble.n	8000d36 <addBitmapToDisplay+0x1a>
    for(int i = 0; i < MATRIX_HEIGHT; i++) {
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	2b0c      	cmp	r3, #12
 8000dce:	ddaf      	ble.n	8000d30 <addBitmapToDisplay+0x14>
            }

        }
    }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3724      	adds	r7, #36	@ 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <checkUpdateTime>:
FlickerState currentFlickerState = STATE_IDLE;
static RTC_TimeTypeDef previousDisplayedTime = {0}; // Initialize to some value
bool needToUpdateDisplay = true;
bool isFlickering = false;

void checkUpdateTime(RTC_TimeTypeDef currentTime) {
 8000de0:	b084      	sub	sp, #16
 8000de2:	b490      	push	{r4, r7}
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	f107 0408 	add.w	r4, r7, #8
 8000dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Check if minute ends in 5 and is different from the previous time
    if ((currentTime.Minutes % 5 == 0) && ((currentTime.Minutes != previousDisplayedTime.Minutes) || (currentTime.Hours != previousDisplayedTime.Hours))) {
 8000dee:	7a7a      	ldrb	r2, [r7, #9]
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <checkUpdateTime+0x4c>)
 8000df2:	fba3 1302 	umull	r1, r3, r3, r2
 8000df6:	0899      	lsrs	r1, r3, #2
 8000df8:	460b      	mov	r3, r1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <checkUpdateTime+0x40>
 8000e06:	7a7a      	ldrb	r2, [r7, #9]
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <checkUpdateTime+0x50>)
 8000e0a:	785b      	ldrb	r3, [r3, #1]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d104      	bne.n	8000e1a <checkUpdateTime+0x3a>
 8000e10:	7a3a      	ldrb	r2, [r7, #8]
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <checkUpdateTime+0x50>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d002      	beq.n	8000e20 <checkUpdateTime+0x40>
        needToUpdateDisplay = true;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <checkUpdateTime+0x54>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
    }
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc90      	pop	{r4, r7}
 8000e26:	b004      	add	sp, #16
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	cccccccd 	.word	0xcccccccd
 8000e30:	200021b0 	.word	0x200021b0
 8000e34:	20000000 	.word	0x20000000

08000e38 <updateDisplay>:

void updateDisplay(RTC_TimeTypeDef currentTime) {
 8000e38:	b084      	sub	sp, #16
 8000e3a:	b5b0      	push	{r4, r5, r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	f107 0418 	add.w	r4, r7, #24
 8000e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Call flicker effects based on the state
    switch (currentFlickerState) {
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <updateDisplay+0xcc>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d02e      	beq.n	8000eae <updateDisplay+0x76>
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	dc48      	bgt.n	8000ee6 <updateDisplay+0xae>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <updateDisplay+0x26>
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d008      	beq.n	8000e6e <updateDisplay+0x36>
                needToUpdateDisplay = false;
                previousDisplayedTime = currentTime; // Update the time once the whole effect is done
            }
            break;
        default:
        	break;
 8000e5c:	e043      	b.n	8000ee6 <updateDisplay+0xae>
            if (needToUpdateDisplay) {
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <updateDisplay+0xd0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d041      	beq.n	8000eea <updateDisplay+0xb2>
                currentFlickerState = STATE_FLICKER_OUT; // Start the flicker out effect
 8000e66:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <updateDisplay+0xcc>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
            break;
 8000e6c:	e03d      	b.n	8000eea <updateDisplay+0xb2>
            isFlickering = flickerOut(); // This function automatically resets its state when done
 8000e6e:	f000 f899 	bl	8000fa4 <flickerOut>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b25      	ldr	r3, [pc, #148]	@ (8000f0c <updateDisplay+0xd4>)
 8000e78:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) { // Assume you have a way to check if flickering out has finished
 8000e7a:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <updateDisplay+0xd4>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	f083 0301 	eor.w	r3, r3, #1
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d032      	beq.n	8000eee <updateDisplay+0xb6>
                currentFlickerState = STATE_FLICKER_IN; // Proceed to flicker in the new display
 8000e88:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <updateDisplay+0xcc>)
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	701a      	strb	r2, [r3, #0]
                color.r = 5;
 8000e8e:	2305      	movs	r3, #5
 8000e90:	713b      	strb	r3, [r7, #4]
                color.g = 5;
 8000e92:	2305      	movs	r3, #5
 8000e94:	717b      	strb	r3, [r7, #5]
                color.b = 5;
 8000e96:	2305      	movs	r3, #5
 8000e98:	71bb      	strb	r3, [r7, #6]
                display_time(currentTime.Hours, currentTime.Minutes, color); // Update the nextFrame for flicker in
 8000e9a:	7e3b      	ldrb	r3, [r7, #24]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	7e7b      	ldrb	r3, [r7, #25]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f000 f9c2 	bl	800122c <display_time>
                advanceDisplay();
 8000ea8:	f000 f868 	bl	8000f7c <advanceDisplay>
            break;
 8000eac:	e01f      	b.n	8000eee <updateDisplay+0xb6>
        	isFlickering = flickerIn(); // This function automatically resets its state when done
 8000eae:	f000 f91b 	bl	80010e8 <flickerIn>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <updateDisplay+0xd4>)
 8000eb8:	701a      	strb	r2, [r3, #0]
            if (!isFlickering) { // Assume you have a way to check if flickering in has finished
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <updateDisplay+0xd4>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	f083 0301 	eor.w	r3, r3, #1
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d014      	beq.n	8000ef2 <updateDisplay+0xba>
                currentFlickerState = STATE_IDLE; // Go back to idle state
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <updateDisplay+0xcc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
                needToUpdateDisplay = false;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <updateDisplay+0xd0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
                previousDisplayedTime = currentTime; // Update the time once the whole effect is done
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <updateDisplay+0xd8>)
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	f107 0418 	add.w	r4, r7, #24
 8000edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	602b      	str	r3, [r5, #0]
            break;
 8000ee4:	e005      	b.n	8000ef2 <updateDisplay+0xba>
        	break;
 8000ee6:	bf00      	nop
 8000ee8:	e004      	b.n	8000ef4 <updateDisplay+0xbc>
            break;
 8000eea:	bf00      	nop
 8000eec:	e002      	b.n	8000ef4 <updateDisplay+0xbc>
            break;
 8000eee:	bf00      	nop
 8000ef0:	e000      	b.n	8000ef4 <updateDisplay+0xbc>
            break;
 8000ef2:	bf00      	nop
    }
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000efe:	b004      	add	sp, #16
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200021af 	.word	0x200021af
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	200021c4 	.word	0x200021c4
 8000f10:	200021b0 	.word	0x200021b0

08000f14 <wipeDisplay>:



void wipeDisplay(LED *display) {
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e022      	b.n	8000f68 <wipeDisplay+0x54>
		display[i].blue = 0;
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	709a      	strb	r2, [r3, #2]
		display[i].green = 0;
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
		display[i].red = 0;
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
		display[i].effect = NONE;
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < MATRIX_SIZE; i++) {
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b8e      	cmp	r3, #142	@ 0x8e
 8000f6c:	ddd9      	ble.n	8000f22 <wipeDisplay+0xe>
	}
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <advanceDisplay>:

void advanceDisplay() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
    memcpy(currentDisplay, targetDisplay, sizeof(currentDisplay));
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <advanceDisplay+0x20>)
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <advanceDisplay+0x24>)
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f240 23cb 	movw	r3, #715	@ 0x2cb
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f004 ff52 	bl	8005e36 <memcpy>
    wipeDisplay((LED *) targetDisplay);
 8000f92:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <advanceDisplay+0x24>)
 8000f94:	f7ff ffbe 	bl	8000f14 <wipeDisplay>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20001ee4 	.word	0x20001ee4
 8000fa0:	20001c18 	.word	0x20001c18

08000fa4 <flickerOut>:



uint32_t lastTickFlicker;

bool flickerOut(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
    static uint8_t litLEDs[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 8000faa:	230a      	movs	r3, #10
 8000fac:	717b      	strb	r3, [r7, #5]
    const uint32_t delayInterval = 50; // milliseconds
 8000fae:	2332      	movs	r3, #50	@ 0x32
 8000fb0:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 8000fb2:	4b47      	ldr	r3, [pc, #284]	@ (80010d0 <flickerOut+0x12c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d019      	beq.n	8000ff4 <flickerOut+0x50>
        numLit = getLEDsWithEffect(litLEDs, (LED *) currentDisplay, FLICKER);
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4944      	ldr	r1, [pc, #272]	@ (80010d4 <flickerOut+0x130>)
 8000fc4:	4844      	ldr	r0, [pc, #272]	@ (80010d8 <flickerOut+0x134>)
 8000fc6:	f7ff fd7b 	bl	8000ac0 <getLEDsWithEffect>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b43      	ldr	r3, [pc, #268]	@ (80010dc <flickerOut+0x138>)
 8000fd0:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 8000fd2:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <flickerOut+0x138>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <flickerOut+0x3a>
            return true; // Function did not start flickering, return false
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e073      	b.n	80010c6 <flickerOut+0x122>
        }
        loop = 0;
 8000fde:	4b40      	ldr	r3, [pc, #256]	@ (80010e0 <flickerOut+0x13c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 8000fe4:	f001 faf4 	bl	80025d0 <HAL_GetTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a3e      	ldr	r2, [pc, #248]	@ (80010e4 <flickerOut+0x140>)
 8000fec:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 8000fee:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <flickerOut+0x12c>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayInterval) {
 8000ff4:	f001 faec 	bl	80025d0 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80010e4 <flickerOut+0x140>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	429a      	cmp	r2, r3
 8001004:	d85e      	bhi.n	80010c4 <flickerOut+0x120>
        if (loop >= flickerLoops) {
 8001006:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <flickerOut+0x13c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	797a      	ldrb	r2, [r7, #5]
 800100c:	429a      	cmp	r2, r3
 800100e:	d81b      	bhi.n	8001048 <flickerOut+0xa4>
            // Ensure all LEDs are turned off at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 8001010:	2300      	movs	r3, #0
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	e009      	b.n	800102a <flickerOut+0x86>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a2f      	ldr	r2, [pc, #188]	@ (80010d8 <flickerOut+0x134>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	4619      	mov	r1, r3
 800101e:	482d      	ldr	r0, [pc, #180]	@ (80010d4 <flickerOut+0x130>)
 8001020:	f7ff fd3a 	bl	8000a98 <turnOffLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	3301      	adds	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <flickerOut+0x138>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3f0      	bcc.n	8001016 <flickerOut+0x72>
            }
            updatePwmBuffer((LED *) currentDisplay);
 8001034:	4827      	ldr	r0, [pc, #156]	@ (80010d4 <flickerOut+0x130>)
 8001036:	f7ff fd8f 	bl	8000b58 <updatePwmBuffer>
            DMA_Send(); // Update LEDs through DMA
 800103a:	f7ff fe09 	bl	8000c50 <DMA_Send>
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 800103e:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <flickerOut+0x12c>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 8001044:	2300      	movs	r3, #0
 8001046:	e03e      	b.n	80010c6 <flickerOut+0x122>
        }

        shuffleArray(litLEDs, numLit);
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <flickerOut+0x138>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4822      	ldr	r0, [pc, #136]	@ (80010d8 <flickerOut+0x134>)
 8001050:	f7ff fe2a 	bl	8000ca8 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001054:	2300      	movs	r3, #0
 8001056:	71bb      	strb	r3, [r7, #6]
 8001058:	e01f      	b.n	800109a <flickerOut+0xf6>
            if (RANDOM_IN_RANGE(0, flickerLoops) < loop) {
 800105a:	f004 fce7 	bl	8005a2c <rand>
 800105e:	4602      	mov	r2, r0
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	3301      	adds	r3, #1
 8001064:	fb92 f1f3 	sdiv	r1, r2, r3
 8001068:	fb01 f303 	mul.w	r3, r1, r3
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a1c      	ldr	r2, [pc, #112]	@ (80010e0 <flickerOut+0x13c>)
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	4293      	cmp	r3, r2
 8001074:	da07      	bge.n	8001086 <flickerOut+0xe2>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <flickerOut+0x134>)
 800107a:	5cd3      	ldrb	r3, [r2, r3]
 800107c:	4619      	mov	r1, r3
 800107e:	4815      	ldr	r0, [pc, #84]	@ (80010d4 <flickerOut+0x130>)
 8001080:	f7ff fd0a 	bl	8000a98 <turnOffLED>
 8001084:	e006      	b.n	8001094 <flickerOut+0xf0>
            } else {
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <flickerOut+0x134>)
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	4619      	mov	r1, r3
 800108e:	4811      	ldr	r0, [pc, #68]	@ (80010d4 <flickerOut+0x130>)
 8001090:	f7ff fcee 	bl	8000a70 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	3301      	adds	r3, #1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <flickerOut+0x138>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	79ba      	ldrb	r2, [r7, #6]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3da      	bcc.n	800105a <flickerOut+0xb6>
            }
        }
        updatePwmBuffer((LED *) currentDisplay);
 80010a4:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <flickerOut+0x130>)
 80010a6:	f7ff fd57 	bl	8000b58 <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 80010aa:	f7ff fdd1 	bl	8000c50 <DMA_Send>
        lastTickEffect = HAL_GetTick();
 80010ae:	f001 fa8f 	bl	80025d0 <HAL_GetTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <flickerOut+0x140>)
 80010b6:	6013      	str	r3, [r2, #0]
        loop++;
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <flickerOut+0x13c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <flickerOut+0x13c>)
 80010c2:	701a      	strb	r2, [r3, #0]
    }
    return true;
 80010c4:	2301      	movs	r3, #1
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200021c5 	.word	0x200021c5
 80010d4:	20001ee4 	.word	0x20001ee4
 80010d8:	200021c8 	.word	0x200021c8
 80010dc:	20002257 	.word	0x20002257
 80010e0:	20002258 	.word	0x20002258
 80010e4:	2000225c 	.word	0x2000225c

080010e8 <flickerIn>:

bool flickerIn(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
    static uint8_t litLEDs[MATRIX_SIZE] = {0};
    static uint8_t numLit = 0;
    static uint32_t lastTickEffect = 0;
    static uint8_t loop = 0;
    static bool isInitialized = false;
    const uint8_t flickerLoops = 10;
 80010ee:	230a      	movs	r3, #10
 80010f0:	717b      	strb	r3, [r7, #5]
    const uint32_t delayInterval = 50; // milliseconds
 80010f2:	2332      	movs	r3, #50	@ 0x32
 80010f4:	603b      	str	r3, [r7, #0]

    if (!isInitialized) {
 80010f6:	4b47      	ldr	r3, [pc, #284]	@ (8001214 <flickerIn+0x12c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f083 0301 	eor.w	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d019      	beq.n	8001138 <flickerIn+0x50>
        numLit = getLEDsWithEffect(litLEDs, (LED *) currentDisplay, FLICKER);
 8001104:	2202      	movs	r2, #2
 8001106:	4944      	ldr	r1, [pc, #272]	@ (8001218 <flickerIn+0x130>)
 8001108:	4844      	ldr	r0, [pc, #272]	@ (800121c <flickerIn+0x134>)
 800110a:	f7ff fcd9 	bl	8000ac0 <getLEDsWithEffect>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b43      	ldr	r3, [pc, #268]	@ (8001220 <flickerIn+0x138>)
 8001114:	701a      	strb	r2, [r3, #0]
        if (numLit == 0) {
 8001116:	4b42      	ldr	r3, [pc, #264]	@ (8001220 <flickerIn+0x138>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <flickerIn+0x3a>
            return true;
 800111e:	2301      	movs	r3, #1
 8001120:	e073      	b.n	800120a <flickerIn+0x122>
        }
        loop = 0;
 8001122:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <flickerIn+0x13c>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
        lastTickEffect = HAL_GetTick();
 8001128:	f001 fa52 	bl	80025d0 <HAL_GetTick>
 800112c:	4603      	mov	r3, r0
 800112e:	4a3e      	ldr	r2, [pc, #248]	@ (8001228 <flickerIn+0x140>)
 8001130:	6013      	str	r3, [r2, #0]
        isInitialized = true;
 8001132:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <flickerIn+0x12c>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
    }

    if ((HAL_GetTick() - lastTickEffect) >= delayInterval) {
 8001138:	f001 fa4a 	bl	80025d0 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	4b3a      	ldr	r3, [pc, #232]	@ (8001228 <flickerIn+0x140>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d85e      	bhi.n	8001208 <flickerIn+0x120>
        if (loop >= flickerLoops) {
 800114a:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <flickerIn+0x13c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	797a      	ldrb	r2, [r7, #5]
 8001150:	429a      	cmp	r2, r3
 8001152:	d81b      	bhi.n	800118c <flickerIn+0xa4>
            // Ensure all LEDs are turned on at the end
            for (uint8_t i = 0; i < numLit; ++i) {
 8001154:	2300      	movs	r3, #0
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	e009      	b.n	800116e <flickerIn+0x86>
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <flickerIn+0x134>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	4619      	mov	r1, r3
 8001162:	482d      	ldr	r0, [pc, #180]	@ (8001218 <flickerIn+0x130>)
 8001164:	f7ff fc84 	bl	8000a70 <turnOnLED>
            for (uint8_t i = 0; i < numLit; ++i) {
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	3301      	adds	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <flickerIn+0x138>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3f0      	bcc.n	800115a <flickerIn+0x72>
            }
            updatePwmBuffer((LED *) currentDisplay);
 8001178:	4827      	ldr	r0, [pc, #156]	@ (8001218 <flickerIn+0x130>)
 800117a:	f7ff fced 	bl	8000b58 <updatePwmBuffer>
            DMA_Send(); // Update LEDs through DMA
 800117e:	f7ff fd67 	bl	8000c50 <DMA_Send>
            // Reset for next call or trigger completion
            isInitialized = false; // Reset the state
 8001182:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <flickerIn+0x12c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
            return false; // Finish the effect
 8001188:	2300      	movs	r3, #0
 800118a:	e03e      	b.n	800120a <flickerIn+0x122>
        }

        shuffleArray(litLEDs, numLit);
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <flickerIn+0x138>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	4822      	ldr	r0, [pc, #136]	@ (800121c <flickerIn+0x134>)
 8001194:	f7ff fd88 	bl	8000ca8 <shuffleArray>
        for (uint8_t i = 0; i < numLit; ++i) {
 8001198:	2300      	movs	r3, #0
 800119a:	71bb      	strb	r3, [r7, #6]
 800119c:	e01f      	b.n	80011de <flickerIn+0xf6>
            if (RANDOM_IN_RANGE(0, flickerLoops) > loop) {
 800119e:	f004 fc45 	bl	8005a2c <rand>
 80011a2:	4602      	mov	r2, r0
 80011a4:	797b      	ldrb	r3, [r7, #5]
 80011a6:	3301      	adds	r3, #1
 80011a8:	fb92 f1f3 	sdiv	r1, r2, r3
 80011ac:	fb01 f303 	mul.w	r3, r1, r3
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001224 <flickerIn+0x13c>)
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	4293      	cmp	r3, r2
 80011b8:	dd07      	ble.n	80011ca <flickerIn+0xe2>
                turnOffLED((LED *) currentDisplay, litLEDs[i]);
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	4a17      	ldr	r2, [pc, #92]	@ (800121c <flickerIn+0x134>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4815      	ldr	r0, [pc, #84]	@ (8001218 <flickerIn+0x130>)
 80011c4:	f7ff fc68 	bl	8000a98 <turnOffLED>
 80011c8:	e006      	b.n	80011d8 <flickerIn+0xf0>
            } else {
                turnOnLED((LED *) currentDisplay, litLEDs[i]);
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	4a13      	ldr	r2, [pc, #76]	@ (800121c <flickerIn+0x134>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4811      	ldr	r0, [pc, #68]	@ (8001218 <flickerIn+0x130>)
 80011d4:	f7ff fc4c 	bl	8000a70 <turnOnLED>
        for (uint8_t i = 0; i < numLit; ++i) {
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	3301      	adds	r3, #1
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <flickerIn+0x138>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	79ba      	ldrb	r2, [r7, #6]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3da      	bcc.n	800119e <flickerIn+0xb6>
            }
        }
        updatePwmBuffer((LED *) currentDisplay);
 80011e8:	480b      	ldr	r0, [pc, #44]	@ (8001218 <flickerIn+0x130>)
 80011ea:	f7ff fcb5 	bl	8000b58 <updatePwmBuffer>
        DMA_Send(); // Update LEDs through DMA
 80011ee:	f7ff fd2f 	bl	8000c50 <DMA_Send>
        lastTickEffect = HAL_GetTick();
 80011f2:	f001 f9ed 	bl	80025d0 <HAL_GetTick>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001228 <flickerIn+0x140>)
 80011fa:	6013      	str	r3, [r2, #0]
        loop++;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <flickerIn+0x13c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <flickerIn+0x13c>)
 8001206:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20002260 	.word	0x20002260
 8001218:	20001ee4 	.word	0x20001ee4
 800121c:	20002264 	.word	0x20002264
 8001220:	200022f3 	.word	0x200022f3
 8001224:	200022f4 	.word	0x200022f4
 8001228:	200022f8 	.word	0x200022f8

0800122c <display_time>:
		MINUTE_TWENTY,
		MINUTE_TWENTYFIVE,
		MINUTE_THIRTY
};

void display_time(int hour, int minute, RgbColor color) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
    addBitmapToDisplay(BMP_ITS, (LED *) targetDisplay, color, FLICKER);
 8001238:	2302      	movs	r3, #2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4943      	ldr	r1, [pc, #268]	@ (800134c <display_time+0x120>)
 800123e:	4844      	ldr	r0, [pc, #272]	@ (8001350 <display_time+0x124>)
 8001240:	f7ff fd6c 	bl	8000d1c <addBitmapToDisplay>

    // Round down to the nearest five minutes and determine if it is 'past' or 'to' the hour
    int roundedMinute = (minute / 5) * 5;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <display_time+0x128>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1052      	asrs	r2, r2, #1
 800124e:	17db      	asrs	r3, r3, #31
 8001250:	1ad2      	subs	r2, r2, r3
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
    if (roundedMinute > 0) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd16      	ble.n	800128e <display_time+0x62>
        if (roundedMinute < 35) {
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b22      	cmp	r3, #34	@ 0x22
 8001264:	dc06      	bgt.n	8001274 <display_time+0x48>
            addBitmapToDisplay(BMP_PAST, (LED *) targetDisplay, color, FLICKER);
 8001266:	2302      	movs	r3, #2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4938      	ldr	r1, [pc, #224]	@ (800134c <display_time+0x120>)
 800126c:	483a      	ldr	r0, [pc, #232]	@ (8001358 <display_time+0x12c>)
 800126e:	f7ff fd55 	bl	8000d1c <addBitmapToDisplay>
 8001272:	e00c      	b.n	800128e <display_time+0x62>
        } else {
            roundedMinute = 60 - roundedMinute;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800127a:	617b      	str	r3, [r7, #20]
            hour++;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
            addBitmapToDisplay(BMP_TILL, (LED *) targetDisplay, color, FLICKER);
 8001282:	2302      	movs	r3, #2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4931      	ldr	r1, [pc, #196]	@ (800134c <display_time+0x120>)
 8001288:	4834      	ldr	r0, [pc, #208]	@ (800135c <display_time+0x130>)
 800128a:	f7ff fd47 	bl	8000d1c <addBitmapToDisplay>
        }
    }

    // Normalize the hour to a 12-hour format and display AM/PM where applicable
    hour %= 24; // Normalize hour to 0-23
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <display_time+0x134>)
 8001292:	fb83 1302 	smull	r1, r3, r3, r2
 8001296:	1099      	asrs	r1, r3, #2
 8001298:	17d3      	asrs	r3, r2, #31
 800129a:	1ac9      	subs	r1, r1, r3
 800129c:	460b      	mov	r3, r1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	440b      	add	r3, r1
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	60fb      	str	r3, [r7, #12]
    if(hour == 0 || hour == 12) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d012      	beq.n	80012d4 <display_time+0xa8>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d00f      	beq.n	80012d4 <display_time+0xa8>
        // It's exactly midnight or noon, so we will handle it in the hour display section.
    } else if (hour < 12) {
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b0b      	cmp	r3, #11
 80012b8:	dc06      	bgt.n	80012c8 <display_time+0x9c>
        addBitmapToDisplay(BMP_AM, (LED *) targetDisplay, color, FLICKER);
 80012ba:	2302      	movs	r3, #2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4923      	ldr	r1, [pc, #140]	@ (800134c <display_time+0x120>)
 80012c0:	4828      	ldr	r0, [pc, #160]	@ (8001364 <display_time+0x138>)
 80012c2:	f7ff fd2b 	bl	8000d1c <addBitmapToDisplay>
 80012c6:	e005      	b.n	80012d4 <display_time+0xa8>
    } else {
        addBitmapToDisplay(BMP_PM, (LED *) targetDisplay, color, FLICKER);
 80012c8:	2302      	movs	r3, #2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	491f      	ldr	r1, [pc, #124]	@ (800134c <display_time+0x120>)
 80012ce:	4826      	ldr	r0, [pc, #152]	@ (8001368 <display_time+0x13c>)
 80012d0:	f7ff fd24 	bl	8000d1c <addBitmapToDisplay>
    }

    // Display the hour, normalizing hour again for 12-hour format with special cases for noon and midnight
    if (hour > 12) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b0c      	cmp	r3, #12
 80012d8:	dd02      	ble.n	80012e0 <display_time+0xb4>
        hour -= 12; // Convert to 12-hour format
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3b0c      	subs	r3, #12
 80012de:	60fb      	str	r3, [r7, #12]
    }
    if (hour == 0) {
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <display_time+0xbe>
        hour = 12; // Adjust for midnight/noon display
 80012e6:	230c      	movs	r3, #12
 80012e8:	60fb      	str	r3, [r7, #12]
    }

    // Use an array to simplify hour display logic
    if(hour >= 1 && hour <= 12) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dd16      	ble.n	800131e <display_time+0xf2>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	dc13      	bgt.n	800131e <display_time+0xf2>
        addBitmapToDisplay(hourBitmaps[hour % 12], (LED *) targetDisplay, color, FLICKER);
 80012f6:	68f9      	ldr	r1, [r7, #12]
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <display_time+0x134>)
 80012fa:	fb83 2301 	smull	r2, r3, r3, r1
 80012fe:	105a      	asrs	r2, r3, #1
 8001300:	17cb      	asrs	r3, r1, #31
 8001302:	1ad2      	subs	r2, r2, r3
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	1aca      	subs	r2, r1, r3
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <display_time+0x140>)
 8001310:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001314:	2302      	movs	r3, #2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	490c      	ldr	r1, [pc, #48]	@ (800134c <display_time+0x120>)
 800131a:	f7ff fcff 	bl	8000d1c <addBitmapToDisplay>
    }

    // Display the minute in intervals of five using an array pointing to the bitmaps
    if (roundedMinute > 0) {
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd0f      	ble.n	8001344 <display_time+0x118>
        addBitmapToDisplay(minuteBitmaps[(roundedMinute / 5) - 1], (LED *) targetDisplay, color, FLICKER);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <display_time+0x128>)
 8001328:	fb82 1203 	smull	r1, r2, r2, r3
 800132c:	1052      	asrs	r2, r2, #1
 800132e:	17db      	asrs	r3, r3, #31
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <display_time+0x144>)
 8001336:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800133a:	2302      	movs	r3, #2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4903      	ldr	r1, [pc, #12]	@ (800134c <display_time+0x120>)
 8001340:	f7ff fcec 	bl	8000d1c <addBitmapToDisplay>
    }
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20001c18 	.word	0x20001c18
 8001350:	08006ff2 	.word	0x08006ff2
 8001354:	66666667 	.word	0x66666667
 8001358:	0800700c 	.word	0x0800700c
 800135c:	08007026 	.word	0x08007026
 8001360:	2aaaaaab 	.word	0x2aaaaaab
 8001364:	080070a8 	.word	0x080070a8
 8001368:	080070c2 	.word	0x080070c2
 800136c:	20000004 	.word	0x20000004
 8001370:	20000038 	.word	0x20000038

08001374 <clampValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t clampValue(uint32_t value, uint32_t minVal, uint32_t maxVal) {
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
    if ((0xFFFF - value) < (maxVal - value)) {
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001386:	33ff      	adds	r3, #255	@ 0xff
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	1a8a      	subs	r2, r1, r2
 800138e:	4293      	cmp	r3, r2
 8001390:	d201      	bcs.n	8001396 <clampValue+0x22>
  	  return minVal;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	e00c      	b.n	80013b0 <clampValue+0x3c>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	429a      	cmp	r2, r3
 800139c:	d201      	bcs.n	80013a2 <clampValue+0x2e>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	e006      	b.n	80013b0 <clampValue+0x3c>
        if (value > maxVal) return maxVal;
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d901      	bls.n	80013ae <clampValue+0x3a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	e000      	b.n	80013b0 <clampValue+0x3c>
        return value;
 80013ae:	68fb      	ldr	r3, [r7, #12]
    }
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <switchState>:

bool userSelectingFeature = true; // True when in SELECT state to decide what feature to adjust

void switchState(RTC_DateTypeDef * tDate) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    switch(currentState) {
 80013c4:	4b83      	ldr	r3, [pc, #524]	@ (80015d4 <switchState+0x218>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	f200 80f9 	bhi.w	80015c2 <switchState+0x206>
 80013d0:	a201      	add	r2, pc, #4	@ (adr r2, 80013d8 <switchState+0x1c>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	08001401 	.word	0x08001401
 80013dc:	08001409 	.word	0x08001409
 80013e0:	08001411 	.word	0x08001411
 80013e4:	080014b3 	.word	0x080014b3
 80013e8:	080014e1 	.word	0x080014e1
 80013ec:	0800159f 	.word	0x0800159f
 80013f0:	080015bb 	.word	0x080015bb
 80013f4:	0800150f 	.word	0x0800150f
 80013f8:	08001545 	.word	0x08001545
 80013fc:	0800157b 	.word	0x0800157b
        case SLEEP:
            currentState = WAKE;
 8001400:	4b74      	ldr	r3, [pc, #464]	@ (80015d4 <switchState+0x218>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
            break;
 8001406:	e0e0      	b.n	80015ca <switchState+0x20e>
        case WAKE:
            currentState = SELECT;
 8001408:	4b72      	ldr	r3, [pc, #456]	@ (80015d4 <switchState+0x218>)
 800140a:	2202      	movs	r2, #2
 800140c:	701a      	strb	r2, [r3, #0]

            break;
 800140e:	e0dc      	b.n	80015ca <switchState+0x20e>
        case SELECT:
        	switch(counter / sensitivity){
 8001410:	4b71      	ldr	r3, [pc, #452]	@ (80015d8 <switchState+0x21c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b71      	ldr	r3, [pc, #452]	@ (80015dc <switchState+0x220>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	2b03      	cmp	r3, #3
 800141e:	d846      	bhi.n	80014ae <switchState+0xf2>
 8001420:	a201      	add	r2, pc, #4	@ (adr r2, 8001428 <switchState+0x6c>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001439 	.word	0x08001439
 800142c:	08001453 	.word	0x08001453
 8001430:	0800146f 	.word	0x0800146f
 8001434:	0800148f 	.word	0x0800148f
        	case 0:
        		counter = sTime.Hours * sensitivity;
 8001438:	4b69      	ldr	r3, [pc, #420]	@ (80015e0 <switchState+0x224>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b67      	ldr	r3, [pc, #412]	@ (80015dc <switchState+0x220>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	4a64      	ldr	r2, [pc, #400]	@ (80015d8 <switchState+0x21c>)
 8001448:	6013      	str	r3, [r2, #0]
        		currentState = SET_HOURS;
 800144a:	4b62      	ldr	r3, [pc, #392]	@ (80015d4 <switchState+0x218>)
 800144c:	2203      	movs	r2, #3
 800144e:	701a      	strb	r2, [r3, #0]
        		break;
 8001450:	e02e      	b.n	80014b0 <switchState+0xf4>
        	case 1:
        		currentState = SET_COLOR;
 8001452:	4b60      	ldr	r3, [pc, #384]	@ (80015d4 <switchState+0x218>)
 8001454:	2205      	movs	r2, #5
 8001456:	701a      	strb	r2, [r3, #0]
        		counter = color * sensitivity;
 8001458:	4b62      	ldr	r3, [pc, #392]	@ (80015e4 <switchState+0x228>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4b5e      	ldr	r3, [pc, #376]	@ (80015dc <switchState+0x220>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fb02 f303 	mul.w	r3, r2, r3
 8001468:	4a5b      	ldr	r2, [pc, #364]	@ (80015d8 <switchState+0x21c>)
 800146a:	6013      	str	r3, [r2, #0]
        		break;
 800146c:	e020      	b.n	80014b0 <switchState+0xf4>
        	case 2:
        		currentDateType = ANNIVERSARY_DATE;
 800146e:	4b5e      	ldr	r3, [pc, #376]	@ (80015e8 <switchState+0x22c>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
            	counter = aDate.Month * sensitivity;
 8001474:	4b5d      	ldr	r3, [pc, #372]	@ (80015ec <switchState+0x230>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	461a      	mov	r2, r3
 800147a:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <switchState+0x220>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4a55      	ldr	r2, [pc, #340]	@ (80015d8 <switchState+0x21c>)
 8001484:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 8001486:	4b53      	ldr	r3, [pc, #332]	@ (80015d4 <switchState+0x218>)
 8001488:	2207      	movs	r2, #7
 800148a:	701a      	strb	r2, [r3, #0]
        		break;
 800148c:	e010      	b.n	80014b0 <switchState+0xf4>
        	case 3:
        		currentDateType = BIRTHDAY_DATE;
 800148e:	4b56      	ldr	r3, [pc, #344]	@ (80015e8 <switchState+0x22c>)
 8001490:	2202      	movs	r2, #2
 8001492:	701a      	strb	r2, [r3, #0]
            	counter = bDate.Month * sensitivity;
 8001494:	4b56      	ldr	r3, [pc, #344]	@ (80015f0 <switchState+0x234>)
 8001496:	785b      	ldrb	r3, [r3, #1]
 8001498:	461a      	mov	r2, r3
 800149a:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <switchState+0x220>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	4a4d      	ldr	r2, [pc, #308]	@ (80015d8 <switchState+0x21c>)
 80014a4:	6013      	str	r3, [r2, #0]
            	currentState = SET_MONTH;
 80014a6:	4b4b      	ldr	r3, [pc, #300]	@ (80015d4 <switchState+0x218>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	701a      	strb	r2, [r3, #0]
        		break;
 80014ac:	e000      	b.n	80014b0 <switchState+0xf4>
        	default:
        		break;
 80014ae:	bf00      	nop
        	}
            break;
 80014b0:	e08b      	b.n	80015ca <switchState+0x20e>
        case SET_HOURS:
        	counter = sTime.Minutes * sensitivity;
 80014b2:	4b4b      	ldr	r3, [pc, #300]	@ (80015e0 <switchState+0x224>)
 80014b4:	785b      	ldrb	r3, [r3, #1]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b48      	ldr	r3, [pc, #288]	@ (80015dc <switchState+0x220>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	4a45      	ldr	r2, [pc, #276]	@ (80015d8 <switchState+0x21c>)
 80014c2:	6013      	str	r3, [r2, #0]

        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80014c4:	2200      	movs	r2, #0
 80014c6:	4946      	ldr	r1, [pc, #280]	@ (80015e0 <switchState+0x224>)
 80014c8:	484a      	ldr	r0, [pc, #296]	@ (80015f4 <switchState+0x238>)
 80014ca:	f002 fca2 	bl	8003e12 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014ce:	2200      	movs	r2, #0
 80014d0:	4949      	ldr	r1, [pc, #292]	@ (80015f8 <switchState+0x23c>)
 80014d2:	4848      	ldr	r0, [pc, #288]	@ (80015f4 <switchState+0x238>)
 80014d4:	f002 fd95 	bl	8004002 <HAL_RTC_SetDate>
            currentState = SET_MINUTES; // After setting hours, set minutes
 80014d8:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <switchState+0x218>)
 80014da:	2204      	movs	r2, #4
 80014dc:	701a      	strb	r2, [r3, #0]
            break;
 80014de:	e074      	b.n	80015ca <switchState+0x20e>
        case SET_MINUTES:
        	counter = sDate.Month * sensitivity;
 80014e0:	4b45      	ldr	r3, [pc, #276]	@ (80015f8 <switchState+0x23c>)
 80014e2:	785b      	ldrb	r3, [r3, #1]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <switchState+0x220>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	4a3a      	ldr	r2, [pc, #232]	@ (80015d8 <switchState+0x21c>)
 80014f0:	6013      	str	r3, [r2, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80014f2:	2200      	movs	r2, #0
 80014f4:	493a      	ldr	r1, [pc, #232]	@ (80015e0 <switchState+0x224>)
 80014f6:	483f      	ldr	r0, [pc, #252]	@ (80015f4 <switchState+0x238>)
 80014f8:	f002 fc8b 	bl	8003e12 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014fc:	2200      	movs	r2, #0
 80014fe:	493e      	ldr	r1, [pc, #248]	@ (80015f8 <switchState+0x23c>)
 8001500:	483c      	ldr	r0, [pc, #240]	@ (80015f4 <switchState+0x238>)
 8001502:	f002 fd7e 	bl	8004002 <HAL_RTC_SetDate>
            currentState = SET_MONTH; // Return to SLEEP after setting time
 8001506:	4b33      	ldr	r3, [pc, #204]	@ (80015d4 <switchState+0x218>)
 8001508:	2207      	movs	r2, #7
 800150a:	701a      	strb	r2, [r3, #0]
            break;
 800150c:	e05d      	b.n	80015ca <switchState+0x20e>
        case SET_MONTH:
        	counter = tDate->Date * sensitivity;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	789b      	ldrb	r3, [r3, #2]
 8001512:	461a      	mov	r2, r3
 8001514:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <switchState+0x220>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	fb02 f303 	mul.w	r3, r2, r3
 800151c:	4a2e      	ldr	r2, [pc, #184]	@ (80015d8 <switchState+0x21c>)
 800151e:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE){
 8001520:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <switchState+0x22c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <switchState+0x180>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001528:	2200      	movs	r2, #0
 800152a:	492d      	ldr	r1, [pc, #180]	@ (80015e0 <switchState+0x224>)
 800152c:	4831      	ldr	r0, [pc, #196]	@ (80015f4 <switchState+0x238>)
 800152e:	f002 fc70 	bl	8003e12 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001532:	2200      	movs	r2, #0
 8001534:	4930      	ldr	r1, [pc, #192]	@ (80015f8 <switchState+0x23c>)
 8001536:	482f      	ldr	r0, [pc, #188]	@ (80015f4 <switchState+0x238>)
 8001538:	f002 fd63 	bl	8004002 <HAL_RTC_SetDate>
        	}

        	currentState = SET_DAY;
 800153c:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <switchState+0x218>)
 800153e:	2208      	movs	r2, #8
 8001540:	701a      	strb	r2, [r3, #0]
        	break;
 8001542:	e042      	b.n	80015ca <switchState+0x20e>
        case SET_DAY:
        	counter = tDate->Year * sensitivity;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	461a      	mov	r2, r3
 800154a:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <switchState+0x220>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	4a21      	ldr	r2, [pc, #132]	@ (80015d8 <switchState+0x21c>)
 8001554:	6013      	str	r3, [r2, #0]
        	if(currentDateType == SYSTEM_DATE) {
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <switchState+0x22c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <switchState+0x1b6>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800155e:	2200      	movs	r2, #0
 8001560:	491f      	ldr	r1, [pc, #124]	@ (80015e0 <switchState+0x224>)
 8001562:	4824      	ldr	r0, [pc, #144]	@ (80015f4 <switchState+0x238>)
 8001564:	f002 fc55 	bl	8003e12 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001568:	2200      	movs	r2, #0
 800156a:	4923      	ldr	r1, [pc, #140]	@ (80015f8 <switchState+0x23c>)
 800156c:	4821      	ldr	r0, [pc, #132]	@ (80015f4 <switchState+0x238>)
 800156e:	f002 fd48 	bl	8004002 <HAL_RTC_SetDate>
        	}

        	currentState = SET_YEAR;
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <switchState+0x218>)
 8001574:	2209      	movs	r2, #9
 8001576:	701a      	strb	r2, [r3, #0]
        	break;
 8001578:	e027      	b.n	80015ca <switchState+0x20e>
        case SET_YEAR:
        	if(currentDateType == SYSTEM_DATE) {
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <switchState+0x22c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <switchState+0x1da>
            	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001582:	2200      	movs	r2, #0
 8001584:	4916      	ldr	r1, [pc, #88]	@ (80015e0 <switchState+0x224>)
 8001586:	481b      	ldr	r0, [pc, #108]	@ (80015f4 <switchState+0x238>)
 8001588:	f002 fc43 	bl	8003e12 <HAL_RTC_SetTime>
            	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800158c:	2200      	movs	r2, #0
 800158e:	491a      	ldr	r1, [pc, #104]	@ (80015f8 <switchState+0x23c>)
 8001590:	4818      	ldr	r0, [pc, #96]	@ (80015f4 <switchState+0x238>)
 8001592:	f002 fd36 	bl	8004002 <HAL_RTC_SetDate>
        	}

        	currentState = SLEEP;
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <switchState+0x218>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
        	break;
 800159c:	e015      	b.n	80015ca <switchState+0x20e>
        case SET_COLOR:
        	counter = brightness * sensitivity;
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <switchState+0x240>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <switchState+0x220>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <switchState+0x21c>)
 80015b0:	6013      	str	r3, [r2, #0]
            currentState = SET_BRIGHTNESS; // After color, set brightness
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <switchState+0x218>)
 80015b4:	2206      	movs	r2, #6
 80015b6:	701a      	strb	r2, [r3, #0]
            break;
 80015b8:	e007      	b.n	80015ca <switchState+0x20e>
        case SET_BRIGHTNESS:
            currentState = SLEEP; // Return to SLEEP after setting LED features
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <switchState+0x218>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
            break;
 80015c0:	e003      	b.n	80015ca <switchState+0x20e>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            currentState = SLEEP;
 80015c2:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <switchState+0x218>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
            break;
 80015c8:	bf00      	nop
    }
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20002431 	.word	0x20002431
 80015d8:	2000240c 	.word	0x2000240c
 80015dc:	20000054 	.word	0x20000054
 80015e0:	20002410 	.word	0x20002410
 80015e4:	20002430 	.word	0x20002430
 80015e8:	200024bc 	.word	0x200024bc
 80015ec:	20002428 	.word	0x20002428
 80015f0:	2000242c 	.word	0x2000242c
 80015f4:	200022fc 	.word	0x200022fc
 80015f8:	20002424 	.word	0x20002424
 80015fc:	20000050 	.word	0x20000050

08001600 <checkButtonPress>:

void checkButtonPress(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 8001606:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800160a:	480d      	ldr	r0, [pc, #52]	@ (8001640 <checkButtonPress+0x40>)
 800160c:	f001 fe38 	bl	8003280 <HAL_GPIO_ReadPin>
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <checkButtonPress+0x44>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <checkButtonPress+0x2a>
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <checkButtonPress+0x2a>
        // Button was pressed - perform actions here.
    	stateChangeRequest = true;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <checkButtonPress+0x48>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e002      	b.n	8001630 <checkButtonPress+0x30>
    } else {
    	stateChangeRequest = false;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <checkButtonPress+0x48>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <checkButtonPress+0x44>)
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	7013      	strb	r3, [r2, #0]
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40020400 	.word	0x40020400
 8001644:	20000059 	.word	0x20000059
 8001648:	200024b4 	.word	0x200024b4

0800164c <SetHours>:




void SetHours() {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

    counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <SetHours+0x3c>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <SetHours+0x40>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	461a      	mov	r2, r3
 8001664:	2100      	movs	r1, #0
 8001666:	f7ff fe85 	bl	8001374 <clampValue>
 800166a:	4603      	mov	r3, r0
 800166c:	4a06      	ldr	r2, [pc, #24]	@ (8001688 <SetHours+0x3c>)
 800166e:	6013      	str	r3, [r2, #0]
    sTime.Hours = (uint8_t) (counter / sensitivity);
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SetHours+0x3c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <SetHours+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fbb2 f3f3 	udiv	r3, r2, r3
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <SetHours+0x44>)
 8001680:	701a      	strb	r2, [r3, #0]

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000240c 	.word	0x2000240c
 800168c:	20000054 	.word	0x20000054
 8001690:	20002410 	.word	0x20002410

08001694 <SetMinutes>:

void SetMinutes() {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 59 * sensitivity); //59 minutes
 8001698:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <SetMinutes+0x3c>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <SetMinutes+0x40>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4613      	mov	r3, r2
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	2100      	movs	r1, #0
 80016ae:	f7ff fe61 	bl	8001374 <clampValue>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a06      	ldr	r2, [pc, #24]	@ (80016d0 <SetMinutes+0x3c>)
 80016b6:	6013      	str	r3, [r2, #0]
    sTime.Minutes = (uint8_t) (counter / sensitivity);
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <SetMinutes+0x3c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <SetMinutes+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <SetMinutes+0x44>)
 80016c8:	705a      	strb	r2, [r3, #1]

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000240c 	.word	0x2000240c
 80016d4:	20000054 	.word	0x20000054
 80016d8:	20002410 	.word	0x20002410

080016dc <SetMonth>:

uint8_t SetMonth(RTC_DateTypeDef * tDate) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 12 * sensitivity); //12 months
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <SetMonth+0x50>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <SetMonth+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	461a      	mov	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f7ff fe3c 	bl	8001374 <clampValue>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <SetMonth+0x50>)
 8001700:	6013      	str	r3, [r2, #0]
    tDate->Month = (uint8_t) (counter / sensitivity);
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <SetMonth+0x50>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <SetMonth+0x54>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	b2da      	uxtb	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	705a      	strb	r2, [r3, #1]

    return (uint8_t) (counter / sensitivity);
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SetMonth+0x50>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SetMonth+0x54>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	b2db      	uxtb	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000240c 	.word	0x2000240c
 8001730:	20000054 	.word	0x20000054

08001734 <SetDay>:

uint8_t SetDay(RTC_DateTypeDef * tDate) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 31 * sensitivity); //31 days
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <SetDay+0x4c>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <SetDay+0x50>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	015b      	lsls	r3, r3, #5
 8001748:	1a9b      	subs	r3, r3, r2
 800174a:	461a      	mov	r2, r3
 800174c:	2100      	movs	r1, #0
 800174e:	f7ff fe11 	bl	8001374 <clampValue>
 8001752:	4603      	mov	r3, r0
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <SetDay+0x4c>)
 8001756:	6013      	str	r3, [r2, #0]
    //FIXME: user could enter February 31 which is wrong
    tDate->Date = (uint8_t) (counter / sensitivity);
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <SetDay+0x4c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <SetDay+0x50>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	709a      	strb	r2, [r3, #2]

    return (uint8_t) (counter / sensitivity);
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <SetDay+0x4c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <SetDay+0x50>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	b2db      	uxtb	r3, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000240c 	.word	0x2000240c
 8001784:	20000054 	.word	0x20000054

08001788 <SetYear>:

uint8_t SetYear(RTC_DateTypeDef * tDate) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    counter = clampValue(counter, 0, 3000 * sensitivity); //12 months
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <SetYear+0x50>)
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <SetYear+0x54>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	2100      	movs	r1, #0
 80017a4:	f7ff fde6 	bl	8001374 <clampValue>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <SetYear+0x50>)
 80017ac:	6013      	str	r3, [r2, #0]
    tDate->Year = (uint8_t) (counter / sensitivity);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <SetYear+0x50>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <SetYear+0x54>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	70da      	strb	r2, [r3, #3]

    return (uint8_t) (counter / sensitivity);
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <SetYear+0x50>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <SetYear+0x54>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	b2db      	uxtb	r3, r3
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000240c 	.word	0x2000240c
 80017dc:	20000054 	.word	0x20000054

080017e0 <SetColor>:

void SetColor() {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <SetColor+0x34>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <SetColor+0x38>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	461a      	mov	r2, r3
 80017f0:	2100      	movs	r1, #0
 80017f2:	f7ff fdbf 	bl	8001374 <clampValue>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <SetColor+0x34>)
 80017fa:	6013      	str	r3, [r2, #0]
    color = (uint8_t) (counter / sensitivity);
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SetColor+0x34>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <SetColor+0x38>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <SetColor+0x3c>)
 800180c:	701a      	strb	r2, [r3, #0]


}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000240c 	.word	0x2000240c
 8001818:	20000054 	.word	0x20000054
 800181c:	20002430 	.word	0x20002430

08001820 <SetBrightness>:


void SetBrightness() {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 8001824:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <SetBrightness+0x3c>)
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <SetBrightness+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	2264      	movs	r2, #100	@ 0x64
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	461a      	mov	r2, r3
 8001836:	2101      	movs	r1, #1
 8001838:	f7ff fd9c 	bl	8001374 <clampValue>
 800183c:	4603      	mov	r3, r0
 800183e:	4a07      	ldr	r2, [pc, #28]	@ (800185c <SetBrightness+0x3c>)
 8001840:	6013      	str	r3, [r2, #0]
    brightness = (uint8_t) (counter / (sensitivity / 2));
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <SetBrightness+0x3c>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <SetBrightness+0x40>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <SetBrightness+0x44>)
 8001854:	701a      	strb	r2, [r3, #0]

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000240c 	.word	0x2000240c
 8001860:	20000054 	.word	0x20000054
 8001864:	20000050 	.word	0x20000050

08001868 <Select>:

void Select() {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 3 * sensitivity);
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <Select+0x24>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <Select+0x28>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	461a      	mov	r2, r3
 800187c:	2100      	movs	r1, #0
 800187e:	f7ff fd79 	bl	8001374 <clampValue>
 8001882:	4603      	mov	r3, r0
 8001884:	4a01      	ldr	r2, [pc, #4]	@ (800188c <Select+0x24>)
 8001886:	6013      	str	r3, [r2, #0]

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000240c 	.word	0x2000240c
 8001890:	20000054 	.word	0x20000054

08001894 <Wake>:

void Wake() {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 1);
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <Wake+0x30>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fd67 	bl	8001374 <clampValue>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a06      	ldr	r2, [pc, #24]	@ (80018c4 <Wake+0x30>)
 80018aa:	6013      	str	r3, [r2, #0]
	//counter = 0 -> isSet
	//counter = 1 -> isNotSet
	isSet = !counter;
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <Wake+0x30>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <Wake+0x34>)
 80018bc:	701a      	strb	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000240c 	.word	0x2000240c
 80018c8:	20000058 	.word	0x20000058

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d2:	f000 fe17 	bl	8002504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d6:	f000 f919 	bl	8001b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018da:	f000 faef 	bl	8001ebc <MX_GPIO_Init>
  MX_DMA_Init();
 80018de:	f000 facd 	bl	8001e7c <MX_DMA_Init>
  MX_TIM1_Init();
 80018e2:	f000 f9d7 	bl	8001c94 <MX_TIM1_Init>
  MX_TIM3_Init();
 80018e6:	f000 fa75 	bl	8001dd4 <MX_TIM3_Init>
  MX_RTC_Init();
 80018ea:	f000 f979 	bl	8001be0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 80018ee:	213c      	movs	r1, #60	@ 0x3c
 80018f0:	4879      	ldr	r0, [pc, #484]	@ (8001ad8 <main+0x20c>)
 80018f2:	f003 f8db 	bl	8004aac <HAL_TIM_Encoder_Start>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80018f6:	2200      	movs	r2, #0
 80018f8:	4978      	ldr	r1, [pc, #480]	@ (8001adc <main+0x210>)
 80018fa:	4879      	ldr	r0, [pc, #484]	@ (8001ae0 <main+0x214>)
 80018fc:	f002 fb23 	bl	8003f46 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001900:	2200      	movs	r2, #0
 8001902:	4978      	ldr	r1, [pc, #480]	@ (8001ae4 <main+0x218>)
 8001904:	4876      	ldr	r0, [pc, #472]	@ (8001ae0 <main+0x214>)
 8001906:	f002 fc00 	bl	800410a <HAL_RTC_GetDate>
  RgbColor color;
  color.r = 5;
 800190a:	2305      	movs	r3, #5
 800190c:	713b      	strb	r3, [r7, #4]
  color.g = 5;
 800190e:	2305      	movs	r3, #5
 8001910:	717b      	strb	r3, [r7, #5]
  color.b = 5;
 8001912:	2305      	movs	r3, #5
 8001914:	71bb      	strb	r3, [r7, #6]
  display_time(sTime.Hours, sTime.Minutes, color);
 8001916:	4b71      	ldr	r3, [pc, #452]	@ (8001adc <main+0x210>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	4b6f      	ldr	r3, [pc, #444]	@ (8001adc <main+0x210>)
 800191e:	785b      	ldrb	r3, [r3, #1]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff fc82 	bl	800122c <display_time>
  advanceDisplay();
 8001928:	f7ff fb28 	bl	8000f7c <advanceDisplay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	counter = __HAL_TIM_GET_COUNTER(&htim3);
 800192c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <main+0x20c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	4a6d      	ldr	r2, [pc, #436]	@ (8001ae8 <main+0x21c>)
 8001934:	6013      	str	r3, [r2, #0]

	checkButtonPress();
 8001936:	f7ff fe63 	bl	8001600 <checkButtonPress>
	if(stateChangeRequest){
 800193a:	4b6c      	ldr	r3, [pc, #432]	@ (8001aec <main+0x220>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01e      	beq.n	8001980 <main+0xb4>
		switchState((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001942:	4b6b      	ldr	r3, [pc, #428]	@ (8001af0 <main+0x224>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <main+0x8e>
 800194a:	4b69      	ldr	r3, [pc, #420]	@ (8001af0 <main+0x224>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d101      	bne.n	8001956 <main+0x8a>
 8001952:	4b68      	ldr	r3, [pc, #416]	@ (8001af4 <main+0x228>)
 8001954:	e002      	b.n	800195c <main+0x90>
 8001956:	4b68      	ldr	r3, [pc, #416]	@ (8001af8 <main+0x22c>)
 8001958:	e000      	b.n	800195c <main+0x90>
 800195a:	4b62      	ldr	r3, [pc, #392]	@ (8001ae4 <main+0x218>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fd2d 	bl	80013bc <switchState>
		stateChangeRequest = !stateChangeRequest;
 8001962:	4b62      	ldr	r3, [pc, #392]	@ (8001aec <main+0x220>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf14      	ite	ne
 800196a:	2301      	movne	r3, #1
 800196c:	2300      	moveq	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f083 0301 	eor.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b5b      	ldr	r3, [pc, #364]	@ (8001aec <main+0x220>)
 800197e:	701a      	strb	r2, [r3, #0]
	}

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001980:	2200      	movs	r2, #0
 8001982:	4956      	ldr	r1, [pc, #344]	@ (8001adc <main+0x210>)
 8001984:	4856      	ldr	r0, [pc, #344]	@ (8001ae0 <main+0x214>)
 8001986:	f002 fade 	bl	8003f46 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800198a:	2200      	movs	r2, #0
 800198c:	4955      	ldr	r1, [pc, #340]	@ (8001ae4 <main+0x218>)
 800198e:	4854      	ldr	r0, [pc, #336]	@ (8001ae0 <main+0x214>)
 8001990:	f002 fbbb 	bl	800410a <HAL_RTC_GetDate>


	switch(currentState) {
 8001994:	4b59      	ldr	r3, [pc, #356]	@ (8001afc <main+0x230>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b09      	cmp	r3, #9
 800199c:	d85c      	bhi.n	8001a58 <main+0x18c>
 800199e:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <main+0xd8>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	08001a59 	.word	0x08001a59
 80019a8:	080019cd 	.word	0x080019cd
 80019ac:	080019d3 	.word	0x080019d3
 80019b0:	080019d9 	.word	0x080019d9
 80019b4:	080019df 	.word	0x080019df
 80019b8:	08001a4b 	.word	0x08001a4b
 80019bc:	08001a53 	.word	0x08001a53
 80019c0:	080019e5 	.word	0x080019e5
 80019c4:	08001a07 	.word	0x08001a07
 80019c8:	08001a29 	.word	0x08001a29
		case SLEEP:

			break;
		case WAKE:
			Wake();
 80019cc:	f7ff ff62 	bl	8001894 <Wake>
			break;
 80019d0:	e043      	b.n	8001a5a <main+0x18e>
		case SELECT:
			Select();
 80019d2:	f7ff ff49 	bl	8001868 <Select>
			break;
 80019d6:	e040      	b.n	8001a5a <main+0x18e>
		case SET_HOURS:
			SetHours();
 80019d8:	f7ff fe38 	bl	800164c <SetHours>
			break;
 80019dc:	e03d      	b.n	8001a5a <main+0x18e>
		case SET_MINUTES:
			SetMinutes();
 80019de:	f7ff fe59 	bl	8001694 <SetMinutes>
			break;
 80019e2:	e03a      	b.n	8001a5a <main+0x18e>
		case SET_MONTH:
			SetMonth((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 80019e4:	4b42      	ldr	r3, [pc, #264]	@ (8001af0 <main+0x224>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <main+0x130>
 80019ec:	4b40      	ldr	r3, [pc, #256]	@ (8001af0 <main+0x224>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d101      	bne.n	80019f8 <main+0x12c>
 80019f4:	4b3f      	ldr	r3, [pc, #252]	@ (8001af4 <main+0x228>)
 80019f6:	e002      	b.n	80019fe <main+0x132>
 80019f8:	4b3f      	ldr	r3, [pc, #252]	@ (8001af8 <main+0x22c>)
 80019fa:	e000      	b.n	80019fe <main+0x132>
 80019fc:	4b39      	ldr	r3, [pc, #228]	@ (8001ae4 <main+0x218>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fe6c 	bl	80016dc <SetMonth>
			break;
 8001a04:	e029      	b.n	8001a5a <main+0x18e>
		case SET_DAY:
			SetDay((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001a06:	4b3a      	ldr	r3, [pc, #232]	@ (8001af0 <main+0x224>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <main+0x152>
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <main+0x224>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d101      	bne.n	8001a1a <main+0x14e>
 8001a16:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <main+0x228>)
 8001a18:	e002      	b.n	8001a20 <main+0x154>
 8001a1a:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <main+0x22c>)
 8001a1c:	e000      	b.n	8001a20 <main+0x154>
 8001a1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <main+0x218>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe87 	bl	8001734 <SetDay>
			break;
 8001a26:	e018      	b.n	8001a5a <main+0x18e>
		case SET_YEAR:
			SetYear((currentDateType == SYSTEM_DATE) ? &sDate : (currentDateType == BIRTHDAY_DATE) ? &bDate : &aDate);
 8001a28:	4b31      	ldr	r3, [pc, #196]	@ (8001af0 <main+0x224>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d007      	beq.n	8001a40 <main+0x174>
 8001a30:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <main+0x224>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d101      	bne.n	8001a3c <main+0x170>
 8001a38:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <main+0x228>)
 8001a3a:	e002      	b.n	8001a42 <main+0x176>
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <main+0x22c>)
 8001a3e:	e000      	b.n	8001a42 <main+0x176>
 8001a40:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <main+0x218>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fea0 	bl	8001788 <SetYear>
			break;
 8001a48:	e007      	b.n	8001a5a <main+0x18e>
		case SET_COLOR:
			SetColor(&sDate);
 8001a4a:	4826      	ldr	r0, [pc, #152]	@ (8001ae4 <main+0x218>)
 8001a4c:	f7ff fec8 	bl	80017e0 <SetColor>
			break;
 8001a50:	e003      	b.n	8001a5a <main+0x18e>
		case SET_BRIGHTNESS:
			SetBrightness();
 8001a52:	f7ff fee5 	bl	8001820 <SetBrightness>
			break;
 8001a56:	e000      	b.n	8001a5a <main+0x18e>
		default:
			break;
 8001a58:	bf00      	nop
	}

	 snprintf(displayStr, sizeof(displayStr), "%02d:%02d", sTime.Hours, sTime.Minutes);
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <main+0x210>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <main+0x210>)
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	4a25      	ldr	r2, [pc, #148]	@ (8001b00 <main+0x234>)
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	4825      	ldr	r0, [pc, #148]	@ (8001b04 <main+0x238>)
 8001a6e:	f004 f8dd 	bl	8005c2c <sniprintf>
	__HAL_TIM_SET_COUNTER(&htim3, counter);
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <main+0x20c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae8 <main+0x21c>)
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24
	Segment_Display(displayStr);
 8001a7c:	4821      	ldr	r0, [pc, #132]	@ (8001b04 <main+0x238>)
 8001a7e:	f7fe fe31 	bl	80006e4 <Segment_Display>



	checkUpdateTime(sTime);
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <main+0x210>)
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a8a:	f7ff f9a9 	bl	8000de0 <checkUpdateTime>
	updateDisplay(sTime);
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <main+0x210>)
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a96:	f7ff f9cf 	bl	8000e38 <updateDisplay>

//	setAnniversary(5);

	if(HAL_GetTick() - lastTick > 1000) {
 8001a9a:	f000 fd99 	bl	80025d0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <main+0x23c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001aaa:	d90a      	bls.n	8001ac2 <main+0x1f6>
		sTime.Minutes = sTime.Minutes + 1;
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <main+0x210>)
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <main+0x210>)
 8001ab6:	705a      	strb	r2, [r3, #1]
		lastTick = HAL_GetTick();
 8001ab8:	f000 fd8a 	bl	80025d0 <HAL_GetTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a12      	ldr	r2, [pc, #72]	@ (8001b08 <main+0x23c>)
 8001ac0:	6013      	str	r3, [r2, #0]
	}

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4905      	ldr	r1, [pc, #20]	@ (8001adc <main+0x210>)
 8001ac6:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <main+0x214>)
 8001ac8:	f002 f9a3 	bl	8003e12 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001acc:	2200      	movs	r2, #0
 8001ace:	4905      	ldr	r1, [pc, #20]	@ (8001ae4 <main+0x218>)
 8001ad0:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <main+0x214>)
 8001ad2:	f002 fa96 	bl	8004002 <HAL_RTC_SetDate>
	counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001ad6:	e729      	b.n	800192c <main+0x60>
 8001ad8:	20002364 	.word	0x20002364
 8001adc:	20002410 	.word	0x20002410
 8001ae0:	200022fc 	.word	0x200022fc
 8001ae4:	20002424 	.word	0x20002424
 8001ae8:	2000240c 	.word	0x2000240c
 8001aec:	200024b4 	.word	0x200024b4
 8001af0:	200024bc 	.word	0x200024bc
 8001af4:	2000242c 	.word	0x2000242c
 8001af8:	20002428 	.word	0x20002428
 8001afc:	20002431 	.word	0x20002431
 8001b00:	08006df8 	.word	0x08006df8
 8001b04:	20002434 	.word	0x20002434
 8001b08:	200024b8 	.word	0x200024b8

08001b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b094      	sub	sp, #80	@ 0x50
 8001b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	2230      	movs	r2, #48	@ 0x30
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 f8fd 	bl	8005d1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <SystemClock_Config+0xcc>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	4a27      	ldr	r2, [pc, #156]	@ (8001bd8 <SystemClock_Config+0xcc>)
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b40:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <SystemClock_Config+0xcc>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <SystemClock_Config+0xd0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a21      	ldr	r2, [pc, #132]	@ (8001bdc <SystemClock_Config+0xd0>)
 8001b56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <SystemClock_Config+0xd0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b68:	2305      	movs	r3, #5
 8001b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b72:	2301      	movs	r3, #1
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001b80:	230c      	movs	r3, #12
 8001b82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b84:	2348      	movs	r3, #72	@ 0x48
 8001b86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 fba5 	bl	80032e4 <HAL_RCC_OscConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ba0:	f000 fa10 	bl	8001fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 fe07 	bl	80037d4 <HAL_RCC_ClockConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bcc:	f000 f9fa 	bl	8001fc4 <Error_Handler>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3750      	adds	r7, #80	@ 0x50
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000

08001be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bf8:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001bfa:	4a25      	ldr	r2, [pc, #148]	@ (8001c90 <MX_RTC_Init+0xb0>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c04:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c06:	227f      	movs	r2, #127	@ 0x7f
 8001c08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c0c:	22ff      	movs	r2, #255	@ 0xff
 8001c0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c22:	481a      	ldr	r0, [pc, #104]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c24:	f002 f872 	bl	8003d0c <HAL_RTC_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c2e:	f000 f9c9 	bl	8001fc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 8001c32:	2303      	movs	r3, #3
 8001c34:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 8001c36:	2359      	movs	r3, #89	@ 0x59
 8001c38:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 8001c3a:	2350      	movs	r3, #80	@ 0x50
 8001c3c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480f      	ldr	r0, [pc, #60]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c4e:	f002 f8e0 	bl	8003e12 <HAL_RTC_SetTime>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c58:	f000 f9b4 	bl	8001fc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c60:	2301      	movs	r3, #1
 8001c62:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	@ (8001c8c <MX_RTC_Init+0xac>)
 8001c74:	f002 f9c5 	bl	8004002 <HAL_RTC_SetDate>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c7e:	f000 f9a1 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200022fc 	.word	0x200022fc
 8001c90:	40002800 	.word	0x40002800

08001c94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b096      	sub	sp, #88	@ 0x58
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2220      	movs	r2, #32
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 f824 	bl	8005d1a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001cd4:	4a3e      	ldr	r2, [pc, #248]	@ (8001dd0 <MX_TIM1_Init+0x13c>)
 8001cd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cde:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001ce4:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001ce6:	2259      	movs	r2, #89	@ 0x59
 8001ce8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cea:	4b38      	ldr	r3, [pc, #224]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cf0:	4b36      	ldr	r3, [pc, #216]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b35      	ldr	r3, [pc, #212]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cfc:	4833      	ldr	r0, [pc, #204]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001cfe:	f002 fb11 	bl	8004324 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001d08:	f000 f95c 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d10:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d16:	4619      	mov	r1, r3
 8001d18:	482c      	ldr	r0, [pc, #176]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001d1a:	f003 f907 	bl	8004f2c <HAL_TIM_ConfigClockSource>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001d24:	f000 f94e 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d28:	4828      	ldr	r0, [pc, #160]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001d2a:	f002 fb4a 	bl	80043c2 <HAL_TIM_PWM_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001d34:	f000 f946 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d44:	4619      	mov	r1, r3
 8001d46:	4821      	ldr	r0, [pc, #132]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001d48:	f003 fd9c 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001d52:	f000 f937 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d56:	2360      	movs	r3, #96	@ 0x60
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d76:	2200      	movs	r2, #0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4814      	ldr	r0, [pc, #80]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001d7c:	f003 f814 	bl	8004da8 <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d86:	f000 f91d 	bl	8001fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001da2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4807      	ldr	r0, [pc, #28]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001dae:	f003 fdd7 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001db8:	f000 f904 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dbc:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <MX_TIM1_Init+0x138>)
 8001dbe:	f000 fa21 	bl	8002204 <HAL_TIM_MspPostInit>

}
 8001dc2:	bf00      	nop
 8001dc4:	3758      	adds	r7, #88	@ 0x58
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000231c 	.word	0x2000231c
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	@ 0x30
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	2224      	movs	r2, #36	@ 0x24
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 ff99 	bl	8005d1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001df0:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <MX_TIM3_Init+0xa0>)
 8001df2:	4a21      	ldr	r2, [pc, #132]	@ (8001e78 <MX_TIM3_Init+0xa4>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <MX_TIM3_Init+0xa0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <MX_TIM3_Init+0xa0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <MX_TIM3_Init+0xa0>)
 8001e04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <MX_TIM3_Init+0xa0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <MX_TIM3_Init+0xa0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e16:	2303      	movs	r3, #3
 8001e18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <MX_TIM3_Init+0xa0>)
 8001e42:	f002 fd8d 	bl	8004960 <HAL_TIM_Encoder_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e4c:	f000 f8ba 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	@ (8001e74 <MX_TIM3_Init+0xa0>)
 8001e5e:	f003 fd11 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e68:	f000 f8ac 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3730      	adds	r7, #48	@ 0x30
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20002364 	.word	0x20002364
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <MX_DMA_Init+0x3c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <MX_DMA_Init+0x3c>)
 8001e8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <MX_DMA_Init+0x3c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2108      	movs	r1, #8
 8001ea2:	2039      	movs	r0, #57	@ 0x39
 8001ea4:	f000 fc9f 	bl	80027e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ea8:	2039      	movs	r0, #57	@ 0x39
 8001eaa:	f000 fcb8 	bl	800281e <HAL_NVIC_EnableIRQ>

}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b38      	ldr	r3, [pc, #224]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a37      	ldr	r2, [pc, #220]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b35      	ldr	r3, [pc, #212]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b31      	ldr	r3, [pc, #196]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a30      	ldr	r2, [pc, #192]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a29      	ldr	r2, [pc, #164]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b23      	ldr	r3, [pc, #140]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a22      	ldr	r2, [pc, #136]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b20      	ldr	r3, [pc, #128]	@ (8001fb8 <MX_GPIO_Init+0xfc>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001f42:	2200      	movs	r2, #0
 8001f44:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 8001f48:	481c      	ldr	r0, [pc, #112]	@ (8001fbc <MX_GPIO_Init+0x100>)
 8001f4a:	f001 f9b1 	bl	80032b0 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f241 4107 	movw	r1, #5127	@ 0x1407
 8001f54:	481a      	ldr	r0, [pc, #104]	@ (8001fc0 <MX_GPIO_Init+0x104>)
 8001f56:	f001 f9ab 	bl	80032b0 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001f5a:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8001f5e:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <MX_GPIO_Init+0x100>)
 8001f74:	f001 f800 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001f78:	f241 4307 	movw	r3, #5127	@ 0x1407
 8001f7c:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480b      	ldr	r0, [pc, #44]	@ (8001fc0 <MX_GPIO_Init+0x104>)
 8001f92:	f000 fff1 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <MX_GPIO_Init+0x104>)
 8001fac:	f000 ffe4 	bl	8002f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	@ 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400

08001fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc8:	b672      	cpsid	i
}
 8001fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <Error_Handler+0x8>

08001fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <HAL_MspInit+0x90>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <HAL_MspInit+0x90>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <HAL_MspInit+0x90>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <HAL_MspInit+0x90>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <HAL_MspInit+0x90>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002000:	6413      	str	r3, [r2, #64]	@ 0x40
 8002002:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <HAL_MspInit+0x90>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2101      	movs	r1, #1
 8002012:	f06f 000b 	mvn.w	r0, #11
 8002016:	f000 fbe6 	bl	80027e6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2102      	movs	r1, #2
 800201e:	f06f 000a 	mvn.w	r0, #10
 8002022:	f000 fbe0 	bl	80027e6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2103      	movs	r1, #3
 800202a:	f06f 0009 	mvn.w	r0, #9
 800202e:	f000 fbda 	bl	80027e6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2104      	movs	r1, #4
 8002036:	f06f 0004 	mvn.w	r0, #4
 800203a:	f000 fbd4 	bl	80027e6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2105      	movs	r1, #5
 8002042:	f06f 0003 	mvn.w	r0, #3
 8002046:	f000 fbce 	bl	80027e6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2106      	movs	r1, #6
 800204e:	f06f 0001 	mvn.w	r0, #1
 8002052:	f000 fbc8 	bl	80027e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a0c      	ldr	r2, [pc, #48]	@ (80020b4 <HAL_RTC_MspInit+0x50>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002088:	2302      	movs	r3, #2
 800208a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800208c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002090:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	4618      	mov	r0, r3
 8002098:	f001 fd48 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80020a2:	f7ff ff8f 	bl	8001fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020a6:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <HAL_RTC_MspInit+0x54>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020ac:	bf00      	nop
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40002800 	.word	0x40002800
 80020b8:	42470e3c 	.word	0x42470e3c

080020bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a22      	ldr	r2, [pc, #136]	@ (8002154 <HAL_TIM_Base_MspInit+0x98>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d13d      	bne.n	800214a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <HAL_TIM_Base_MspInit+0x9c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	4a20      	ldr	r2, [pc, #128]	@ (8002158 <HAL_TIM_Base_MspInit+0x9c>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_TIM_Base_MspInit+0x9c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 80020ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <HAL_TIM_Base_MspInit+0xa4>)
 80020ee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 80020f2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80020f6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 80020fa:	2240      	movs	r2, #64	@ 0x40
 80020fc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fe:	4b17      	ldr	r3, [pc, #92]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002104:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002106:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800210a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 800210e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002112:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002116:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800211a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800211c:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800212e:	480b      	ldr	r0, [pc, #44]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002130:	f000 fb90 	bl	8002854 <HAL_DMA_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800213a:	f7ff ff43 	bl	8001fc4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a06      	ldr	r2, [pc, #24]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002142:	625a      	str	r2, [r3, #36]	@ 0x24
 8002144:	4a05      	ldr	r2, [pc, #20]	@ (800215c <HAL_TIM_Base_MspInit+0xa0>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	40023800 	.word	0x40023800
 800215c:	200023ac 	.word	0x200023ac
 8002160:	40026428 	.word	0x40026428

08002164 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1d      	ldr	r2, [pc, #116]	@ (80021f8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d133      	bne.n	80021ee <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <HAL_TIM_Encoder_MspInit+0x98>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_TIM_Encoder_MspInit+0x98>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_TIM_Encoder_MspInit+0x98>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <HAL_TIM_Encoder_MspInit+0x98>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a14      	ldr	r2, [pc, #80]	@ (80021fc <HAL_TIM_Encoder_MspInit+0x98>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_TIM_Encoder_MspInit+0x98>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021be:	2330      	movs	r3, #48	@ 0x30
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ce:	2302      	movs	r3, #2
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4809      	ldr	r0, [pc, #36]	@ (8002200 <HAL_TIM_Encoder_MspInit+0x9c>)
 80021da:	f000 fecd 	bl	8002f78 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2109      	movs	r1, #9
 80021e2:	201d      	movs	r0, #29
 80021e4:	f000 faff 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021e8:	201d      	movs	r0, #29
 80021ea:	f000 fb18 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	@ 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020400 	.word	0x40020400

08002204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a12      	ldr	r2, [pc, #72]	@ (800226c <HAL_TIM_MspPostInit+0x68>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d11e      	bne.n	8002264 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_TIM_MspPostInit+0x6c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a10      	ldr	r2, [pc, #64]	@ (8002270 <HAL_TIM_MspPostInit+0x6c>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_TIM_MspPostInit+0x6c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002242:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002246:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002254:	2301      	movs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	4805      	ldr	r0, [pc, #20]	@ (8002274 <HAL_TIM_MspPostInit+0x70>)
 8002260:	f000 fe8a 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002264:	bf00      	nop
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010000 	.word	0x40010000
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <NMI_Handler+0x4>

08002280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <MemManage_Handler+0x4>

08002290 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <BusFault_Handler+0x4>

08002298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <UsageFault_Handler+0x4>

080022a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ce:	f000 f96b 	bl	80025a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <TIM3_IRQHandler+0x10>)
 80022de:	f002 fc73 	bl	8004bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20002364 	.word	0x20002364

080022ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <DMA2_Stream1_IRQHandler+0x10>)
 80022f2:	f000 fbd7 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200023ac 	.word	0x200023ac

08002300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return 1;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_kill>:

int _kill(int pid, int sig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800231a:	f003 fd5f 	bl	8005ddc <__errno>
 800231e:	4603      	mov	r3, r0
 8002320:	2216      	movs	r2, #22
 8002322:	601a      	str	r2, [r3, #0]
  return -1;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_exit>:

void _exit (int status)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ffe7 	bl	8002310 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002342:	bf00      	nop
 8002344:	e7fd      	b.n	8002342 <_exit+0x12>

08002346 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e00a      	b.n	800236e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002358:	f3af 8000 	nop.w
 800235c:	4601      	mov	r1, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3301      	adds	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	dbf0      	blt.n	8002358 <_read+0x12>
  }

  return len;
 8002376:	687b      	ldr	r3, [r7, #4]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e009      	b.n	80023a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	60ba      	str	r2, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dbf1      	blt.n	8002392 <_write+0x12>
  }
  return len;
 80023ae:	687b      	ldr	r3, [r7, #4]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_close>:

int _close(int file)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023e0:	605a      	str	r2, [r3, #4]
  return 0;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_isatty>:

int _isatty(int file)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002428:	4a14      	ldr	r2, [pc, #80]	@ (800247c <_sbrk+0x5c>)
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <_sbrk+0x60>)
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <_sbrk+0x64>)
 800243e:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <_sbrk+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	429a      	cmp	r2, r3
 800244e:	d207      	bcs.n	8002460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002450:	f003 fcc4 	bl	8005ddc <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	220c      	movs	r2, #12
 8002458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	e009      	b.n	8002474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002466:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	4a05      	ldr	r2, [pc, #20]	@ (8002484 <_sbrk+0x64>)
 8002470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20020000 	.word	0x20020000
 8002480:	00010000 	.word	0x00010000
 8002484:	200024c0 	.word	0x200024c0
 8002488:	20002618 	.word	0x20002618

0800248c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <SystemInit+0x20>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <SystemInit+0x20>)
 8002498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800249c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b4:	480d      	ldr	r0, [pc, #52]	@ (80024ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024b6:	490e      	ldr	r1, [pc, #56]	@ (80024f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b8:	4a0e      	ldr	r2, [pc, #56]	@ (80024f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024cc:	4c0b      	ldr	r4, [pc, #44]	@ (80024fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024da:	f7ff ffd7 	bl	800248c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024de:	f003 fc83 	bl	8005de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7ff f9f3 	bl	80018cc <main>
  bx  lr    
 80024e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80024f4:	08007218 	.word	0x08007218
  ldr r2, =_sbss
 80024f8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80024fc:	20002614 	.word	0x20002614

08002500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC_IRQHandler>
	...

08002504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002508:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <HAL_Init+0x40>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <HAL_Init+0x40>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <HAL_Init+0x40>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800252c:	2003      	movs	r0, #3
 800252e:	f000 f94f 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002532:	200f      	movs	r0, #15
 8002534:	f000 f808 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002538:	f7ff fd4a 	bl	8001fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002550:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_InitTick+0x54>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_InitTick+0x58>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f967 	bl	800283a <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00e      	b.n	8002594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0f      	cmp	r3, #15
 800257a:	d80a      	bhi.n	8002592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f000 f92f 	bl	80027e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002588:	4a06      	ldr	r2, [pc, #24]	@ (80025a4 <HAL_InitTick+0x5c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000005c 	.word	0x2000005c
 80025a0:	20000064 	.word	0x20000064
 80025a4:	20000060 	.word	0x20000060

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000064 	.word	0x20000064
 80025cc:	200024c4 	.word	0x200024c4

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	200024c4 	.word	0x200024c4

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_Delay+0x44>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800260e:	bf00      	nop
 8002610:	f7ff ffde 	bl	80025d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000064 	.word	0x20000064

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	@ (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	@ (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	@ (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	@ (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	@ 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	@ 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff29 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff3e 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff8e 	bl	8002724 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5d 	bl	80026d0 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff31 	bl	8002694 <__NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffa2 	bl	800278c <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff feb6 	bl	80025d0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e099      	b.n	80029a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002890:	e00f      	b.n	80028b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002892:	f7ff fe9d 	bl	80025d0 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b05      	cmp	r3, #5
 800289e:	d908      	bls.n	80028b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2203      	movs	r2, #3
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e078      	b.n	80029a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e8      	bne.n	8002892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4b38      	ldr	r3, [pc, #224]	@ (80029ac <HAL_DMA_Init+0x158>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	2b04      	cmp	r3, #4
 800290a:	d107      	bne.n	800291c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	4313      	orrs	r3, r2
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 0307 	bic.w	r3, r3, #7
 8002932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	2b04      	cmp	r3, #4
 8002944:	d117      	bne.n	8002976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00e      	beq.n	8002976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fa91 	bl	8002e80 <DMA_CheckFifoParam>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002972:	2301      	movs	r3, #1
 8002974:	e016      	b.n	80029a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa48 	bl	8002e14 <DMA_CalcBaseAndBitshift>
 8002984:	4603      	mov	r3, r0
 8002986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	223f      	movs	r2, #63	@ 0x3f
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	f010803f 	.word	0xf010803f

080029b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_Start_IT+0x26>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e040      	b.n	8002a58 <HAL_DMA_Start_IT+0xa8>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d12f      	bne.n	8002a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f9da 	bl	8002db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	223f      	movs	r2, #63	@ 0x3f
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0216 	orr.w	r2, r2, #22
 8002a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0208 	orr.w	r2, r2, #8
 8002a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e005      	b.n	8002a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
 8002a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2280      	movs	r2, #128	@ 0x80
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00c      	b.n	8002a98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2205      	movs	r2, #5
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab0:	4b8e      	ldr	r3, [pc, #568]	@ (8002cec <HAL_DMA_IRQHandler+0x248>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a8e      	ldr	r2, [pc, #568]	@ (8002cf0 <HAL_DMA_IRQHandler+0x24c>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ace:	2208      	movs	r2, #8
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01a      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	2208      	movs	r2, #8
 8002afe:	409a      	lsls	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	2201      	movs	r2, #1
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b68:	2204      	movs	r2, #4
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b80:	2210      	movs	r2, #16
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d03c      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d018      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d024      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
 8002bd2:	e01f      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
 8002be4:	e016      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0208 	bic.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	2220      	movs	r2, #32
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 808f 	beq.w	8002d44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8087 	beq.w	8002d44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d136      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0216 	bic.w	r2, r2, #22
 8002c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x1da>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0208 	bic.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	223f      	movs	r2, #63	@ 0x3f
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d07e      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
        }
        return;
 8002cba:	e079      	b.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01d      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d031      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e02c      	b.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
 8002cea:	bf00      	nop
 8002cec:	2000005c 	.word	0x2000005c
 8002cf0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
 8002d04:	e01e      	b.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10f      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0210 	bic.w	r2, r2, #16
 8002d22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d032      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d307      	bcc.n	8002d8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f2      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x2cc>
 8002d8a:	e000      	b.n	8002d8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
 8002dae:	e000      	b.n	8002db2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002db0:	bf00      	nop
    }
  }
}
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b40      	cmp	r3, #64	@ 0x40
 8002de4:	d108      	bne.n	8002df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002df6:	e007      	b.n	8002e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	3b10      	subs	r3, #16
 8002e24:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <DMA_CalcBaseAndBitshift+0x64>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e2e:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <DMA_CalcBaseAndBitshift+0x68>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d909      	bls.n	8002e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e54:	e007      	b.n	8002e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	aaaaaaab 	.word	0xaaaaaaab
 8002e7c:	08007120 	.word	0x08007120

08002e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d856      	bhi.n	8002f4e <DMA_CheckFifoParam+0xce>
 8002ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <DMA_CheckFifoParam+0x28>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ecb 	.word	0x08002ecb
 8002eb0:	08002eb9 	.word	0x08002eb9
 8002eb4:	08002f4f 	.word	0x08002f4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d046      	beq.n	8002f52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e043      	b.n	8002f52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ed2:	d140      	bne.n	8002f56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e03d      	b.n	8002f56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee2:	d121      	bne.n	8002f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d837      	bhi.n	8002f5a <DMA_CheckFifoParam+0xda>
 8002eea:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef0 <DMA_CheckFifoParam+0x70>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f07 	.word	0x08002f07
 8002ef8:	08002f01 	.word	0x08002f01
 8002efc:	08002f19 	.word	0x08002f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e030      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d025      	beq.n	8002f5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f16:	e022      	b.n	8002f5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f20:	d11f      	bne.n	8002f62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f26:	e01c      	b.n	8002f62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d903      	bls.n	8002f36 <DMA_CheckFifoParam+0xb6>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d003      	beq.n	8002f3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f34:	e018      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3a:	e015      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4c:	e00b      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e00a      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
 8002f54:	e008      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e006      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e004      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
    }
  } 
  
  return status; 
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	@ 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	e159      	b.n	8003248 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f94:	2201      	movs	r2, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	f040 8148 	bne.w	8003242 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d005      	beq.n	8002fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d130      	bne.n	800302c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0201 	and.w	r2, r3, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b03      	cmp	r3, #3
 8003036:	d017      	beq.n	8003068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d123      	bne.n	80030bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3208      	adds	r2, #8
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a2 	beq.w	8003242 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b57      	ldr	r3, [pc, #348]	@ (8003260 <HAL_GPIO_Init+0x2e8>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	4a56      	ldr	r2, [pc, #344]	@ (8003260 <HAL_GPIO_Init+0x2e8>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800310c:	6453      	str	r3, [r2, #68]	@ 0x44
 800310e:	4b54      	ldr	r3, [pc, #336]	@ (8003260 <HAL_GPIO_Init+0x2e8>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311a:	4a52      	ldr	r2, [pc, #328]	@ (8003264 <HAL_GPIO_Init+0x2ec>)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a49      	ldr	r2, [pc, #292]	@ (8003268 <HAL_GPIO_Init+0x2f0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d019      	beq.n	800317a <HAL_GPIO_Init+0x202>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a48      	ldr	r2, [pc, #288]	@ (800326c <HAL_GPIO_Init+0x2f4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_GPIO_Init+0x1fe>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a47      	ldr	r2, [pc, #284]	@ (8003270 <HAL_GPIO_Init+0x2f8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00d      	beq.n	8003172 <HAL_GPIO_Init+0x1fa>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a46      	ldr	r2, [pc, #280]	@ (8003274 <HAL_GPIO_Init+0x2fc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <HAL_GPIO_Init+0x1f6>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a45      	ldr	r2, [pc, #276]	@ (8003278 <HAL_GPIO_Init+0x300>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_GPIO_Init+0x1f2>
 8003166:	2304      	movs	r3, #4
 8003168:	e008      	b.n	800317c <HAL_GPIO_Init+0x204>
 800316a:	2307      	movs	r3, #7
 800316c:	e006      	b.n	800317c <HAL_GPIO_Init+0x204>
 800316e:	2303      	movs	r3, #3
 8003170:	e004      	b.n	800317c <HAL_GPIO_Init+0x204>
 8003172:	2302      	movs	r3, #2
 8003174:	e002      	b.n	800317c <HAL_GPIO_Init+0x204>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_GPIO_Init+0x204>
 800317a:	2300      	movs	r3, #0
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	f002 0203 	and.w	r2, r2, #3
 8003182:	0092      	lsls	r2, r2, #2
 8003184:	4093      	lsls	r3, r2
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800318c:	4935      	ldr	r1, [pc, #212]	@ (8003264 <HAL_GPIO_Init+0x2ec>)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	3302      	adds	r3, #2
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319a:	4b38      	ldr	r3, [pc, #224]	@ (800327c <HAL_GPIO_Init+0x304>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031be:	4a2f      	ldr	r2, [pc, #188]	@ (800327c <HAL_GPIO_Init+0x304>)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c4:	4b2d      	ldr	r3, [pc, #180]	@ (800327c <HAL_GPIO_Init+0x304>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e8:	4a24      	ldr	r2, [pc, #144]	@ (800327c <HAL_GPIO_Init+0x304>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ee:	4b23      	ldr	r3, [pc, #140]	@ (800327c <HAL_GPIO_Init+0x304>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003212:	4a1a      	ldr	r2, [pc, #104]	@ (800327c <HAL_GPIO_Init+0x304>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003218:	4b18      	ldr	r3, [pc, #96]	@ (800327c <HAL_GPIO_Init+0x304>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800323c:	4a0f      	ldr	r2, [pc, #60]	@ (800327c <HAL_GPIO_Init+0x304>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3301      	adds	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b0f      	cmp	r3, #15
 800324c:	f67f aea2 	bls.w	8002f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3724      	adds	r7, #36	@ 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	40013800 	.word	0x40013800
 8003268:	40020000 	.word	0x40020000
 800326c:	40020400 	.word	0x40020400
 8003270:	40020800 	.word	0x40020800
 8003274:	40020c00 	.word	0x40020c00
 8003278:	40021000 	.word	0x40021000
 800327c:	40013c00 	.word	0x40013c00

08003280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e001      	b.n	80032a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
 80032bc:	4613      	mov	r3, r2
 80032be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032cc:	e003      	b.n	80032d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ce:	887b      	ldrh	r3, [r7, #2]
 80032d0:	041a      	lsls	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e267      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d075      	beq.n	80033ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003302:	4b88      	ldr	r3, [pc, #544]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b85      	ldr	r3, [pc, #532]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b82      	ldr	r3, [pc, #520]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b7e      	ldr	r3, [pc, #504]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x108>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e242      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x74>
 800334a:	4b76      	ldr	r3, [pc, #472]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b70      	ldr	r3, [pc, #448]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6f      	ldr	r2, [pc, #444]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b6d      	ldr	r3, [pc, #436]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6c      	ldr	r2, [pc, #432]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 800337c:	4b69      	ldr	r3, [pc, #420]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a68      	ldr	r2, [pc, #416]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b66      	ldr	r3, [pc, #408]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a65      	ldr	r2, [pc, #404]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7ff f918 	bl	80025d0 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff f914 	bl	80025d0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e207      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xc0>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7ff f904 	bl	80025d0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7ff f900 	bl	80025d0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1f3      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b51      	ldr	r3, [pc, #324]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0xe8>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b47      	ldr	r3, [pc, #284]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b44      	ldr	r3, [pc, #272]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b41      	ldr	r3, [pc, #260]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1c7      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4937      	ldr	r1, [pc, #220]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e03a      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_RCC_OscConfig+0x244>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7ff f8b9 	bl	80025d0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003462:	f7ff f8b5 	bl	80025d0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1a8      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b28      	ldr	r3, [pc, #160]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4925      	ldr	r1, [pc, #148]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <HAL_RCC_OscConfig+0x244>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7ff f898 	bl	80025d0 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a4:	f7ff f894 	bl	80025d0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e187      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d036      	beq.n	800353c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_RCC_OscConfig+0x248>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7ff f878 	bl	80025d0 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e4:	f7ff f874 	bl	80025d0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e167      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x200>
 8003502:	e01b      	b.n	800353c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b09      	ldr	r3, [pc, #36]	@ (800352c <HAL_RCC_OscConfig+0x248>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7ff f861 	bl	80025d0 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	e00e      	b.n	8003530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003512:	f7ff f85d 	bl	80025d0 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d907      	bls.n	8003530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e150      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	42470000 	.word	0x42470000
 800352c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b88      	ldr	r3, [pc, #544]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ea      	bne.n	8003512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8097 	beq.w	8003678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b81      	ldr	r3, [pc, #516]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b7d      	ldr	r3, [pc, #500]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	4a7c      	ldr	r2, [pc, #496]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	@ 0x40
 800356a:	4b7a      	ldr	r3, [pc, #488]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b77      	ldr	r3, [pc, #476]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b74      	ldr	r3, [pc, #464]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a73      	ldr	r2, [pc, #460]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7ff f81d 	bl	80025d0 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7ff f819 	bl	80025d0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e10c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x2ea>
 80035c0:	4b64      	ldr	r3, [pc, #400]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	4a63      	ldr	r2, [pc, #396]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80035cc:	e01c      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x30c>
 80035d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	4a5e      	ldr	r2, [pc, #376]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035f0:	4b58      	ldr	r3, [pc, #352]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f4:	4a57      	ldr	r2, [pc, #348]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fc:	4b55      	ldr	r3, [pc, #340]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	4a54      	ldr	r2, [pc, #336]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe ffde 	bl	80025d0 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe ffda 	bl	80025d0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0cb      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	4b49      	ldr	r3, [pc, #292]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RCC_OscConfig+0x334>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363c:	f7fe ffc8 	bl	80025d0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fe ffc4 	bl	80025d0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0b5      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	4b3e      	ldr	r3, [pc, #248]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ee      	bne.n	8003644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b39      	ldr	r3, [pc, #228]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	4a38      	ldr	r2, [pc, #224]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a1 	beq.w	80037c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003682:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b08      	cmp	r3, #8
 800368c:	d05c      	beq.n	8003748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d141      	bne.n	800371a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b31      	ldr	r3, [pc, #196]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe ff98 	bl	80025d0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fe ff94 	bl	80025d0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e087      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	3b01      	subs	r3, #1
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	491b      	ldr	r1, [pc, #108]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ec:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe ff6d 	bl	80025d0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fe ff69 	bl	80025d0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e05c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x416>
 8003718:	e054      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b10      	ldr	r3, [pc, #64]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe ff56 	bl	80025d0 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe ff52 	bl	80025d0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e045      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
 8003746:	e03d      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e038      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000
 800375c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003760:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x4ec>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d028      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d121      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d11a      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003798:	4293      	cmp	r3, r2
 800379a:	d111      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	3b01      	subs	r3, #1
 80037aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0cc      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b68      	ldr	r3, [pc, #416]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d90c      	bls.n	8003810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b65      	ldr	r3, [pc, #404]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a58      	ldr	r2, [pc, #352]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800384a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d044      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d119      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	2b03      	cmp	r3, #3
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b3f      	ldr	r3, [pc, #252]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e067      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4934      	ldr	r1, [pc, #208]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fe fe84 	bl	80025d0 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fe fe80 	bl	80025d0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b25      	ldr	r3, [pc, #148]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d20c      	bcs.n	800391c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b22      	ldr	r3, [pc, #136]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003946:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fde4 	bl	8002548 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023c00 	.word	0x40023c00
 8003990:	40023800 	.word	0x40023800
 8003994:	08007110 	.word	0x08007110
 8003998:	2000005c 	.word	0x2000005c
 800399c:	20000060 	.word	0x20000060

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b090      	sub	sp, #64	@ 0x40
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ac:	2300      	movs	r3, #0
 80039ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b0:	2300      	movs	r3, #0
 80039b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b8:	4b59      	ldr	r3, [pc, #356]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x40>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	f200 80a1 	bhi.w	8003b0c <HAL_RCC_GetSysClockFreq+0x16c>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x3a>
 80039d2:	e09b      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b53      	ldr	r3, [pc, #332]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x184>)
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80039d8:	e09b      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039da:	4b53      	ldr	r3, [pc, #332]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x188>)
 80039dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039de:	e098      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d028      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	2200      	movs	r2, #0
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4b47      	ldr	r3, [pc, #284]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a0c:	fb03 f201 	mul.w	r2, r3, r1
 8003a10:	2300      	movs	r3, #0
 8003a12:	fb00 f303 	mul.w	r3, r0, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	4a43      	ldr	r2, [pc, #268]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a1a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a20:	460a      	mov	r2, r1
 8003a22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a26:	4413      	add	r3, r2
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	61fa      	str	r2, [r7, #28]
 8003a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a3a:	f7fc fc21 	bl	8000280 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4613      	mov	r3, r2
 8003a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a46:	e053      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a48:	4b35      	ldr	r3, [pc, #212]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	2200      	movs	r2, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	617a      	str	r2, [r7, #20]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a5a:	f04f 0b00 	mov.w	fp, #0
 8003a5e:	4652      	mov	r2, sl
 8003a60:	465b      	mov	r3, fp
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	0159      	lsls	r1, r3, #5
 8003a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a70:	0150      	lsls	r0, r2, #5
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	ebb2 080a 	subs.w	r8, r2, sl
 8003a7a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a92:	ebb2 0408 	subs.w	r4, r2, r8
 8003a96:	eb63 0509 	sbc.w	r5, r3, r9
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	00eb      	lsls	r3, r5, #3
 8003aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa8:	00e2      	lsls	r2, r4, #3
 8003aaa:	4614      	mov	r4, r2
 8003aac:	461d      	mov	r5, r3
 8003aae:	eb14 030a 	adds.w	r3, r4, sl
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	eb45 030b 	adc.w	r3, r5, fp
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	028b      	lsls	r3, r1, #10
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	028a      	lsls	r2, r1, #10
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	2200      	movs	r2, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	60fa      	str	r2, [r7, #12]
 8003ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ae4:	f7fc fbcc 	bl	8000280 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	3301      	adds	r3, #1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003b00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3740      	adds	r7, #64	@ 0x40
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	00f42400 	.word	0x00f42400
 8003b28:	016e3600 	.word	0x016e3600

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d038      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b54:	4b68      	ldr	r3, [pc, #416]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b5a:	f7fe fd39 	bl	80025d0 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b62:	f7fe fd35 	bl	80025d0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0bd      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b74:	4b61      	ldr	r3, [pc, #388]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	071b      	lsls	r3, r3, #28
 8003b92:	495a      	ldr	r1, [pc, #360]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b9a:	4b57      	ldr	r3, [pc, #348]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba0:	f7fe fd16 	bl	80025d0 <HAL_GetTick>
 8003ba4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ba8:	f7fe fd12 	bl	80025d0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e09a      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bba:	4b50      	ldr	r3, [pc, #320]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8083 	beq.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	4b48      	ldr	r3, [pc, #288]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	4a47      	ldr	r2, [pc, #284]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be4:	4b45      	ldr	r3, [pc, #276]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bf0:	4b43      	ldr	r3, [pc, #268]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a42      	ldr	r2, [pc, #264]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7fe fce8 	bl	80025d0 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fe fce4 	bl	80025d0 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e06c      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c16:	4b3a      	ldr	r3, [pc, #232]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c22:	4b36      	ldr	r3, [pc, #216]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d02f      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d028      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c40:	4b2e      	ldr	r3, [pc, #184]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c48:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c50:	4b2c      	ldr	r3, [pc, #176]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c56:	4a29      	ldr	r2, [pc, #164]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c5c:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d114      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fcb2 	bl	80025d0 <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fe fcae 	bl	80025d0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e034      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	4b1d      	ldr	r3, [pc, #116]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ee      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003ca0:	4b16      	ldr	r3, [pc, #88]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb4:	4911      	ldr	r1, [pc, #68]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
 8003cba:	e005      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cc6:	6093      	str	r3, [r2, #8]
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	4909      	ldr	r1, [pc, #36]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	7d1a      	ldrb	r2, [r3, #20]
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003cec:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	42470068 	.word	0x42470068
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40007000 	.word	0x40007000
 8003d04:	42470e40 	.word	0x42470e40
 8003d08:	424711e0 	.word	0x424711e0

08003d0c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e073      	b.n	8003e0a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7f5b      	ldrb	r3, [r3, #29]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe f996 	bl	8002064 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d055      	beq.n	8003df8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	22ca      	movs	r2, #202	@ 0xca
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2253      	movs	r2, #83	@ 0x53
 8003d5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fa49 	bl	80041f4 <RTC_EnterInitMode>
 8003d62:	4603      	mov	r3, r0
 8003d64:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d12c      	bne.n	8003dc6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d7e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6899      	ldr	r1, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68d2      	ldr	r2, [r2, #12]
 8003da6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6919      	ldr	r1, [r3, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	041a      	lsls	r2, r3, #16
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fa50 	bl	8004262 <RTC_ExitInitMode>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d110      	bne.n	8003dee <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dda:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	22ff      	movs	r2, #255	@ 0xff
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003df6:	e001      	b.n	8003dfc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e12:	b590      	push	{r4, r7, lr}
 8003e14:	b087      	sub	sp, #28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	7f1b      	ldrb	r3, [r3, #28]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_RTC_SetTime+0x1c>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e087      	b.n	8003f3e <HAL_RTC_SetTime+0x12c>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2202      	movs	r2, #2
 8003e38:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d126      	bne.n	8003e8e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fa27 	bl	80042ac <RTC_ByteToBcd2>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	785b      	ldrb	r3, [r3, #1]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fa20 	bl	80042ac <RTC_ByteToBcd2>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e70:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	789b      	ldrb	r3, [r3, #2]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fa18 	bl	80042ac <RTC_ByteToBcd2>
 8003e7c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e7e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	78db      	ldrb	r3, [r3, #3]
 8003e86:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e018      	b.n	8003ec0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003eae:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003eb4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	78db      	ldrb	r3, [r3, #3]
 8003eba:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	22ca      	movs	r2, #202	@ 0xca
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2253      	movs	r2, #83	@ 0x53
 8003ece:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f98f 	bl	80041f4 <RTC_EnterInitMode>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d120      	bne.n	8003f22 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003eea:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003eee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003efe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f9a2 	bl	8004262 <RTC_ExitInitMode>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	22ff      	movs	r2, #255	@ 0xff
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]

  return status;
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd90      	pop	{r4, r7, pc}

08003f46 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003f78:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	0a1b      	lsrs	r3, r3, #8
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	0d9b      	lsrs	r3, r3, #22
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d11a      	bne.n	8003ff8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f98e 	bl	80042e8 <RTC_Bcd2ToByte>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f985 	bl	80042e8 <RTC_Bcd2ToByte>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	789b      	ldrb	r3, [r3, #2]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f97c 	bl	80042e8 <RTC_Bcd2ToByte>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004002:	b590      	push	{r4, r7, lr}
 8004004:	b087      	sub	sp, #28
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	7f1b      	ldrb	r3, [r3, #28]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_RTC_SetDate+0x1c>
 800401a:	2302      	movs	r3, #2
 800401c:	e071      	b.n	8004102 <HAL_RTC_SetDate+0x100>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2202      	movs	r2, #2
 8004028:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10e      	bne.n	800404e <HAL_RTC_SetDate+0x4c>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	785b      	ldrb	r3, [r3, #1]
 8004040:	f023 0310 	bic.w	r3, r3, #16
 8004044:	b2db      	uxtb	r3, r3
 8004046:	330a      	adds	r3, #10
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d11c      	bne.n	800408e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	78db      	ldrb	r3, [r3, #3]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f927 	bl	80042ac <RTC_ByteToBcd2>
 800405e:	4603      	mov	r3, r0
 8004060:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	785b      	ldrb	r3, [r3, #1]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f920 	bl	80042ac <RTC_ByteToBcd2>
 800406c:	4603      	mov	r3, r0
 800406e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004070:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	789b      	ldrb	r3, [r3, #2]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f918 	bl	80042ac <RTC_ByteToBcd2>
 800407c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800407e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e00e      	b.n	80040ac <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	78db      	ldrb	r3, [r3, #3]
 8004092:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	785b      	ldrb	r3, [r3, #1]
 8004098:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800409a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80040a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	22ca      	movs	r2, #202	@ 0xca
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2253      	movs	r2, #83	@ 0x53
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f899 	bl	80041f4 <RTC_EnterInitMode>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10c      	bne.n	80040e6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80040da:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f8c0 	bl	8004262 <RTC_ExitInitMode>
 80040e2:	4603      	mov	r3, r0
 80040e4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	22ff      	movs	r2, #255	@ 0xff
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]

  return status;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
}
 8004102:	4618      	mov	r0, r3
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd90      	pop	{r4, r7, pc}

0800410a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004124:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004128:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	0b5b      	lsrs	r3, r3, #13
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11a      	bne.n	800419e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	78db      	ldrb	r3, [r3, #3]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f8bb 	bl	80042e8 <RTC_Bcd2ToByte>
 8004172:	4603      	mov	r3, r0
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f8b2 	bl	80042e8 <RTC_Bcd2ToByte>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	789b      	ldrb	r3, [r3, #2]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f8a9 	bl	80042e8 <RTC_Bcd2ToByte>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <HAL_RTC_WaitForSynchro+0x48>)
 80041ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041bc:	f7fe fa08 	bl	80025d0 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041c2:	e009      	b.n	80041d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041c4:	f7fe fa04 	bl	80025d0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041d2:	d901      	bls.n	80041d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e007      	b.n	80041e8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ee      	beq.n	80041c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	00013f5f 	.word	0x00013f5f

080041f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d122      	bne.n	8004258 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004220:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004222:	f7fe f9d5 	bl	80025d0 <HAL_GetTick>
 8004226:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004228:	e00c      	b.n	8004244 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800422a:	f7fe f9d1 	bl	80025d0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004238:	d904      	bls.n	8004244 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <RTC_EnterInitMode+0x64>
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d1e8      	bne.n	800422a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800427c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ff8b 	bl	80041a8 <HAL_RTC_WaitForSynchro>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2204      	movs	r2, #4
 800429c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80042ba:	e005      	b.n	80042c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	3b0a      	subs	r3, #10
 80042c6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	2b09      	cmp	r3, #9
 80042cc:	d8f6      	bhi.n	80042bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	4313      	orrs	r3, r2
 80042da:	b2db      	uxtb	r3, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	b2db      	uxtb	r3, r3
 8004314:	4413      	add	r3, r2
 8004316:	b2db      	uxtb	r3, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e041      	b.n	80043ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fd feb6 	bl	80020bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 ffb6 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e041      	b.n	8004458 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f839 	bl	8004460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f000 ff67 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e022      	b.n	80044e6 <HAL_TIM_PWM_Start_DMA+0x72>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d109      	bne.n	80044ba <HAL_TIM_PWM_Start_DMA+0x46>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	e015      	b.n	80044e6 <HAL_TIM_PWM_Start_DMA+0x72>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d109      	bne.n	80044d4 <HAL_TIM_PWM_Start_DMA+0x60>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	e008      	b.n	80044e6 <HAL_TIM_PWM_Start_DMA+0x72>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
 80044ec:	e15d      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_TIM_PWM_Start_DMA+0x94>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	e022      	b.n	800454e <HAL_TIM_PWM_Start_DMA+0xda>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b04      	cmp	r3, #4
 800450c:	d109      	bne.n	8004522 <HAL_TIM_PWM_Start_DMA+0xae>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b01      	cmp	r3, #1
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	e015      	b.n	800454e <HAL_TIM_PWM_Start_DMA+0xda>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d109      	bne.n	800453c <HAL_TIM_PWM_Start_DMA+0xc8>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e008      	b.n	800454e <HAL_TIM_PWM_Start_DMA+0xda>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d024      	beq.n	800459c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_TIM_PWM_Start_DMA+0xea>
 8004558:	887b      	ldrh	r3, [r7, #2]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e123      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004570:	e016      	b.n	80045a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004580:	e00e      	b.n	80045a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004590:	e006      	b.n	80045a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800459a:	e001      	b.n	80045a0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e104      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	f200 80ae 	bhi.w	8004704 <HAL_TIM_PWM_Start_DMA+0x290>
 80045a8:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045e5 	.word	0x080045e5
 80045b4:	08004705 	.word	0x08004705
 80045b8:	08004705 	.word	0x08004705
 80045bc:	08004705 	.word	0x08004705
 80045c0:	0800462d 	.word	0x0800462d
 80045c4:	08004705 	.word	0x08004705
 80045c8:	08004705 	.word	0x08004705
 80045cc:	08004705 	.word	0x08004705
 80045d0:	08004675 	.word	0x08004675
 80045d4:	08004705 	.word	0x08004705
 80045d8:	08004705 	.word	0x08004705
 80045dc:	08004705 	.word	0x08004705
 80045e0:	080046bd 	.word	0x080046bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	4a72      	ldr	r2, [pc, #456]	@ (80047b4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80045ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	4a71      	ldr	r2, [pc, #452]	@ (80047b8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80045f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	4a70      	ldr	r2, [pc, #448]	@ (80047bc <HAL_TIM_PWM_Start_DMA+0x348>)
 80045fa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3334      	adds	r3, #52	@ 0x34
 8004608:	461a      	mov	r2, r3
 800460a:	887b      	ldrh	r3, [r7, #2]
 800460c:	f7fe f9d0 	bl	80029b0 <HAL_DMA_Start_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0c7      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004628:	60da      	str	r2, [r3, #12]
      break;
 800462a:	e06e      	b.n	800470a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	4a60      	ldr	r2, [pc, #384]	@ (80047b4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004632:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	4a5f      	ldr	r2, [pc, #380]	@ (80047b8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	4a5e      	ldr	r2, [pc, #376]	@ (80047bc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004642:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3338      	adds	r3, #56	@ 0x38
 8004650:	461a      	mov	r2, r3
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	f7fe f9ac 	bl	80029b0 <HAL_DMA_Start_IT>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0a3      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004670:	60da      	str	r2, [r3, #12]
      break;
 8004672:	e04a      	b.n	800470a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	4a4e      	ldr	r2, [pc, #312]	@ (80047b4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800467a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	4a4d      	ldr	r2, [pc, #308]	@ (80047b8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	4a4c      	ldr	r2, [pc, #304]	@ (80047bc <HAL_TIM_PWM_Start_DMA+0x348>)
 800468a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	333c      	adds	r3, #60	@ 0x3c
 8004698:	461a      	mov	r2, r3
 800469a:	887b      	ldrh	r3, [r7, #2]
 800469c:	f7fe f988 	bl	80029b0 <HAL_DMA_Start_IT>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e07f      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046b8:	60da      	str	r2, [r3, #12]
      break;
 80046ba:	e026      	b.n	800470a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c0:	4a3c      	ldr	r2, [pc, #240]	@ (80047b4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80046c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c8:	4a3b      	ldr	r2, [pc, #236]	@ (80047b8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	4a3a      	ldr	r2, [pc, #232]	@ (80047bc <HAL_TIM_PWM_Start_DMA+0x348>)
 80046d2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3340      	adds	r3, #64	@ 0x40
 80046e0:	461a      	mov	r2, r3
 80046e2:	887b      	ldrh	r3, [r7, #2]
 80046e4:	f7fe f964 	bl	80029b0 <HAL_DMA_Start_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e05b      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004700:	60da      	str	r2, [r3, #12]
      break;
 8004702:	e002      	b.n	800470a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	75fb      	strb	r3, [r7, #23]
      break;
 8004708:	bf00      	nop
  }

  if (status == HAL_OK)
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d14b      	bne.n	80047a8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2201      	movs	r2, #1
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	4618      	mov	r0, r3
 800471a:	f001 f88d 	bl	8005838 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a27      	ldr	r2, [pc, #156]	@ (80047c0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d107      	bne.n	8004738 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004736:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a20      	ldr	r2, [pc, #128]	@ (80047c0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d018      	beq.n	8004774 <HAL_TIM_PWM_Start_DMA+0x300>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d013      	beq.n	8004774 <HAL_TIM_PWM_Start_DMA+0x300>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1c      	ldr	r2, [pc, #112]	@ (80047c4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <HAL_TIM_PWM_Start_DMA+0x300>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d009      	beq.n	8004774 <HAL_TIM_PWM_Start_DMA+0x300>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a19      	ldr	r2, [pc, #100]	@ (80047cc <HAL_TIM_PWM_Start_DMA+0x358>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_TIM_PWM_Start_DMA+0x300>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a18      	ldr	r2, [pc, #96]	@ (80047d0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d010      	beq.n	80047a8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004796:	e007      	b.n	80047a8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	080051c5 	.word	0x080051c5
 80047b8:	0800526d 	.word	0x0800526d
 80047bc:	08005133 	.word	0x08005133
 80047c0:	40010000 	.word	0x40010000
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	40014000 	.word	0x40014000

080047d4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	d855      	bhi.n	8004894 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80047e8:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004825 	.word	0x08004825
 80047f4:	08004895 	.word	0x08004895
 80047f8:	08004895 	.word	0x08004895
 80047fc:	08004895 	.word	0x08004895
 8004800:	08004841 	.word	0x08004841
 8004804:	08004895 	.word	0x08004895
 8004808:	08004895 	.word	0x08004895
 800480c:	08004895 	.word	0x08004895
 8004810:	0800485d 	.word	0x0800485d
 8004814:	08004895 	.word	0x08004895
 8004818:	08004895 	.word	0x08004895
 800481c:	08004895 	.word	0x08004895
 8004820:	08004879 	.word	0x08004879
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004832:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	4618      	mov	r0, r3
 800483a:	f7fe f911 	bl	8002a60 <HAL_DMA_Abort_IT>
      break;
 800483e:	e02c      	b.n	800489a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe f903 	bl	8002a60 <HAL_DMA_Abort_IT>
      break;
 800485a:	e01e      	b.n	800489a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800486a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe f8f5 	bl	8002a60 <HAL_DMA_Abort_IT>
      break;
 8004876:	e010      	b.n	800489a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004886:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe f8e7 	bl	8002a60 <HAL_DMA_Abort_IT>
      break;
 8004892:	e002      	b.n	800489a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
      break;
 8004898:	bf00      	nop
  }

  if (status == HAL_OK)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d157      	bne.n	8004950 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 ffc5 	bl	8005838 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2a      	ldr	r2, [pc, #168]	@ (800495c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d117      	bne.n	80048e8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10f      	bne.n	8004918 <HAL_TIM_PWM_Stop_DMA+0x144>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	f240 4344 	movw	r3, #1092	@ 0x444
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <HAL_TIM_PWM_Stop_DMA+0x154>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004926:	e013      	b.n	8004950 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b04      	cmp	r3, #4
 800492c:	d104      	bne.n	8004938 <HAL_TIM_PWM_Stop_DMA+0x164>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004936:	e00b      	b.n	8004950 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b08      	cmp	r3, #8
 800493c:	d104      	bne.n	8004948 <HAL_TIM_PWM_Stop_DMA+0x174>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004946:	e003      	b.n	8004950 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40010000 	.word	0x40010000

08004960 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e097      	b.n	8004aa4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fd fbeb 	bl	8002164 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049a4:	f023 0307 	bic.w	r3, r3, #7
 80049a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 fc8d 	bl	80052d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	4313      	orrs	r3, r2
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004a00:	f023 030c 	bic.w	r3, r3, #12
 8004a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	011a      	lsls	r2, r3, #4
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	031b      	lsls	r3, r3, #12
 8004a30:	4313      	orrs	r3, r2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	4313      	orrs	r3, r2
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004abc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ac4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004acc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ad4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d110      	bne.n	8004afe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d102      	bne.n	8004ae8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ae2:	7b7b      	ldrb	r3, [r7, #13]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d001      	beq.n	8004aec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e069      	b.n	8004bc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004afc:	e031      	b.n	8004b62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d110      	bne.n	8004b26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b04:	7bbb      	ldrb	r3, [r7, #14]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d102      	bne.n	8004b10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b0a:	7b3b      	ldrb	r3, [r7, #12]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d001      	beq.n	8004b14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e055      	b.n	8004bc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b24:	e01d      	b.n	8004b62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d108      	bne.n	8004b3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b2c:	7bbb      	ldrb	r3, [r7, #14]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b32:	7b7b      	ldrb	r3, [r7, #13]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d102      	bne.n	8004b3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b38:	7b3b      	ldrb	r3, [r7, #12]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d001      	beq.n	8004b42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e03e      	b.n	8004bc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_TIM_Encoder_Start+0xc4>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d008      	beq.n	8004b80 <HAL_TIM_Encoder_Start+0xd4>
 8004b6e:	e00f      	b.n	8004b90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fe5d 	bl	8005838 <TIM_CCxChannelCmd>
      break;
 8004b7e:	e016      	b.n	8004bae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	2104      	movs	r1, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fe55 	bl	8005838 <TIM_CCxChannelCmd>
      break;
 8004b8e:	e00e      	b.n	8004bae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2201      	movs	r2, #1
 8004b96:	2100      	movs	r1, #0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fe4d 	bl	8005838 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fe46 	bl	8005838 <TIM_CCxChannelCmd>
      break;
 8004bac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0202 	mvn.w	r2, #2
 8004bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa65 	bl	80050e2 <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa57 	bl	80050ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fc f82f 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d020      	beq.n	8004c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0204 	mvn.w	r2, #4
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa3f 	bl	80050e2 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa31 	bl	80050ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fc f809 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d020      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0208 	mvn.w	r2, #8
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2204      	movs	r2, #4
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa19 	bl	80050e2 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa0b 	bl	80050ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fb ffe3 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d020      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01b      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0210 	mvn.w	r2, #16
 8004ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9f3 	bl	80050e2 <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f9e5 	bl	80050ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fb ffbd 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00c      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0201 	mvn.w	r2, #1
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9c3 	bl	80050ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fe60 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9c7 	bl	800510a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0220 	mvn.w	r2, #32
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fe32 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e0ae      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	f200 809f 	bhi.w	8004f14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e11 	.word	0x08004e11
 8004de0:	08004f15 	.word	0x08004f15
 8004de4:	08004f15 	.word	0x08004f15
 8004de8:	08004f15 	.word	0x08004f15
 8004dec:	08004e51 	.word	0x08004e51
 8004df0:	08004f15 	.word	0x08004f15
 8004df4:	08004f15 	.word	0x08004f15
 8004df8:	08004f15 	.word	0x08004f15
 8004dfc:	08004e93 	.word	0x08004e93
 8004e00:	08004f15 	.word	0x08004f15
 8004e04:	08004f15 	.word	0x08004f15
 8004e08:	08004f15 	.word	0x08004f15
 8004e0c:	08004ed3 	.word	0x08004ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fae8 	bl	80053ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0208 	orr.w	r2, r2, #8
 8004e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0204 	bic.w	r2, r2, #4
 8004e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6999      	ldr	r1, [r3, #24]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	619a      	str	r2, [r3, #24]
      break;
 8004e4e:	e064      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb2e 	bl	80054b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6999      	ldr	r1, [r3, #24]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	619a      	str	r2, [r3, #24]
      break;
 8004e90:	e043      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fb79 	bl	8005590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0208 	orr.w	r2, r2, #8
 8004eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0204 	bic.w	r2, r2, #4
 8004ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69d9      	ldr	r1, [r3, #28]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	61da      	str	r2, [r3, #28]
      break;
 8004ed0:	e023      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fbc3 	bl	8005664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69d9      	ldr	r1, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	021a      	lsls	r2, r3, #8
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	61da      	str	r2, [r3, #28]
      break;
 8004f12:	e002      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
      break;
 8004f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_ConfigClockSource+0x1c>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e0b4      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x186>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f80:	d03e      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0xd4>
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f86:	f200 8087 	bhi.w	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8e:	f000 8086 	beq.w	800509e <HAL_TIM_ConfigClockSource+0x172>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f96:	d87f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b70      	cmp	r3, #112	@ 0x70
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f9c:	2b70      	cmp	r3, #112	@ 0x70
 8004f9e:	d87b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b60      	cmp	r3, #96	@ 0x60
 8004fa2:	d050      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x11a>
 8004fa4:	2b60      	cmp	r3, #96	@ 0x60
 8004fa6:	d877      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b50      	cmp	r3, #80	@ 0x50
 8004faa:	d03c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xfa>
 8004fac:	2b50      	cmp	r3, #80	@ 0x50
 8004fae:	d873      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b40      	cmp	r3, #64	@ 0x40
 8004fb2:	d058      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x13a>
 8004fb4:	2b40      	cmp	r3, #64	@ 0x40
 8004fb6:	d86f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b30      	cmp	r3, #48	@ 0x30
 8004fba:	d064      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	2b30      	cmp	r3, #48	@ 0x30
 8004fbe:	d86b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d060      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d867      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d05a      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd0:	e062      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fe2:	f000 fc09 	bl	80057f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	609a      	str	r2, [r3, #8]
      break;
 8004ffe:	e04f      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005010:	f000 fbf2 	bl	80057f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005022:	609a      	str	r2, [r3, #8]
      break;
 8005024:	e03c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005032:	461a      	mov	r2, r3
 8005034:	f000 fb66 	bl	8005704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2150      	movs	r1, #80	@ 0x50
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fbbf 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 8005044:	e02c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fb85 	bl	8005762 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2160      	movs	r1, #96	@ 0x60
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fbaf 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 8005064:	e01c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fb46 	bl	8005704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2140      	movs	r1, #64	@ 0x40
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fb9f 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 8005084:	e00c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 fb96 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 8005096:	e003      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	e000      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800509e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d107      	bne.n	800515a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005158:	e02a      	b.n	80051b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d107      	bne.n	8005174 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2202      	movs	r2, #2
 8005168:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005172:	e01d      	b.n	80051b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d107      	bne.n	800518e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2204      	movs	r2, #4
 8005182:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800518c:	e010      	b.n	80051b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d107      	bne.n	80051a8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2208      	movs	r2, #8
 800519c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051a6:	e003      	b.n	80051b0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff ffb4 	bl	800511e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
}
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d10b      	bne.n	80051f4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d136      	bne.n	8005258 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f2:	e031      	b.n	8005258 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d10b      	bne.n	8005216 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2202      	movs	r2, #2
 8005202:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d125      	bne.n	8005258 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005214:	e020      	b.n	8005258 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d10b      	bne.n	8005238 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2204      	movs	r2, #4
 8005224:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d114      	bne.n	8005258 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005236:	e00f      	b.n	8005258 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	d10a      	bne.n	8005258 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2208      	movs	r2, #8
 8005246:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7fb fd13 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005278:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	d103      	bne.n	800528c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	771a      	strb	r2, [r3, #28]
 800528a:	e019      	b.n	80052c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d103      	bne.n	800529e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2202      	movs	r2, #2
 800529a:	771a      	strb	r2, [r3, #28]
 800529c:	e010      	b.n	80052c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d103      	bne.n	80052b0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2204      	movs	r2, #4
 80052ac:	771a      	strb	r2, [r3, #28]
 80052ae:	e007      	b.n	80052c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d102      	bne.n	80052c0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2208      	movs	r2, #8
 80052be:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff ff18 	bl	80050f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3a      	ldr	r2, [pc, #232]	@ (80053d0 <TIM_Base_SetConfig+0xfc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00f      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f2:	d00b      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a37      	ldr	r2, [pc, #220]	@ (80053d4 <TIM_Base_SetConfig+0x100>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a36      	ldr	r2, [pc, #216]	@ (80053d8 <TIM_Base_SetConfig+0x104>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a35      	ldr	r2, [pc, #212]	@ (80053dc <TIM_Base_SetConfig+0x108>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2b      	ldr	r2, [pc, #172]	@ (80053d0 <TIM_Base_SetConfig+0xfc>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01b      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532c:	d017      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a28      	ldr	r2, [pc, #160]	@ (80053d4 <TIM_Base_SetConfig+0x100>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a27      	ldr	r2, [pc, #156]	@ (80053d8 <TIM_Base_SetConfig+0x104>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a26      	ldr	r2, [pc, #152]	@ (80053dc <TIM_Base_SetConfig+0x108>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a25      	ldr	r2, [pc, #148]	@ (80053e0 <TIM_Base_SetConfig+0x10c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <TIM_Base_SetConfig+0x110>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a23      	ldr	r2, [pc, #140]	@ (80053e8 <TIM_Base_SetConfig+0x114>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0e      	ldr	r2, [pc, #56]	@ (80053d0 <TIM_Base_SetConfig+0xfc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f023 0201 	bic.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	611a      	str	r2, [r3, #16]
  }
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800

080053ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f023 0201 	bic.w	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 0302 	bic.w	r3, r3, #2
 8005434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1c      	ldr	r2, [pc, #112]	@ (80054b4 <TIM_OC1_SetConfig+0xc8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10c      	bne.n	8005462 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0308 	bic.w	r3, r3, #8
 800544e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0304 	bic.w	r3, r3, #4
 8005460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a13      	ldr	r2, [pc, #76]	@ (80054b4 <TIM_OC1_SetConfig+0xc8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d111      	bne.n	800548e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	621a      	str	r2, [r3, #32]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	40010000 	.word	0x40010000

080054b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f023 0210 	bic.w	r2, r3, #16
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f023 0320 	bic.w	r3, r3, #32
 8005502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a1e      	ldr	r2, [pc, #120]	@ (800558c <TIM_OC2_SetConfig+0xd4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d10d      	bne.n	8005534 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800551e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005532:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a15      	ldr	r2, [pc, #84]	@ (800558c <TIM_OC2_SetConfig+0xd4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d113      	bne.n	8005564 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800554a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000

08005590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <TIM_OC3_SetConfig+0xd0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d10d      	bne.n	800560a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a14      	ldr	r2, [pc, #80]	@ (8005660 <TIM_OC3_SetConfig+0xd0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d113      	bne.n	800563a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	621a      	str	r2, [r3, #32]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	40010000 	.word	0x40010000

08005664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	031b      	lsls	r3, r3, #12
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a10      	ldr	r2, [pc, #64]	@ (8005700 <TIM_OC4_SetConfig+0x9c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d109      	bne.n	80056d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	019b      	lsls	r3, r3, #6
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40010000 	.word	0x40010000

08005704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f023 0201 	bic.w	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800572e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f023 030a 	bic.w	r3, r3, #10
 8005740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005762:	b480      	push	{r7}
 8005764:	b087      	sub	sp, #28
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f023 0210 	bic.w	r2, r3, #16
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800578c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	031b      	lsls	r3, r3, #12
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800579e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f043 0307 	orr.w	r3, r3, #7
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	021a      	lsls	r2, r3, #8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	431a      	orrs	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4313      	orrs	r3, r2
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2201      	movs	r2, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	43db      	mvns	r3, r3
 800585a:	401a      	ands	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005898:	2302      	movs	r3, #2
 800589a:	e050      	b.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1c      	ldr	r2, [pc, #112]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e8:	d013      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a18      	ldr	r2, [pc, #96]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a16      	ldr	r2, [pc, #88]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a15      	ldr	r2, [pc, #84]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a13      	ldr	r2, [pc, #76]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10c      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4313      	orrs	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40014000 	.word	0x40014000

08005960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005978:	2302      	movs	r3, #2
 800597a:	e03d      	b.n	80059f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <rand>:
 8005a2c:	4b16      	ldr	r3, [pc, #88]	@ (8005a88 <rand+0x5c>)
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	681c      	ldr	r4, [r3, #0]
 8005a32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005a34:	b9b3      	cbnz	r3, 8005a64 <rand+0x38>
 8005a36:	2018      	movs	r0, #24
 8005a38:	f000 fa74 	bl	8005f24 <malloc>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005a40:	b920      	cbnz	r0, 8005a4c <rand+0x20>
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <rand+0x60>)
 8005a44:	4812      	ldr	r0, [pc, #72]	@ (8005a90 <rand+0x64>)
 8005a46:	2152      	movs	r1, #82	@ 0x52
 8005a48:	f000 fa04 	bl	8005e54 <__assert_func>
 8005a4c:	4911      	ldr	r1, [pc, #68]	@ (8005a94 <rand+0x68>)
 8005a4e:	4b12      	ldr	r3, [pc, #72]	@ (8005a98 <rand+0x6c>)
 8005a50:	e9c0 1300 	strd	r1, r3, [r0]
 8005a54:	4b11      	ldr	r3, [pc, #68]	@ (8005a9c <rand+0x70>)
 8005a56:	6083      	str	r3, [r0, #8]
 8005a58:	230b      	movs	r3, #11
 8005a5a:	8183      	strh	r3, [r0, #12]
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	2001      	movs	r0, #1
 8005a60:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005a64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a66:	480e      	ldr	r0, [pc, #56]	@ (8005aa0 <rand+0x74>)
 8005a68:	690b      	ldr	r3, [r1, #16]
 8005a6a:	694c      	ldr	r4, [r1, #20]
 8005a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa4 <rand+0x78>)
 8005a6e:	4358      	muls	r0, r3
 8005a70:	fb02 0004 	mla	r0, r2, r4, r0
 8005a74:	fba3 3202 	umull	r3, r2, r3, r2
 8005a78:	3301      	adds	r3, #1
 8005a7a:	eb40 0002 	adc.w	r0, r0, r2
 8005a7e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005a82:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005a86:	bd10      	pop	{r4, pc}
 8005a88:	20000074 	.word	0x20000074
 8005a8c:	08007128 	.word	0x08007128
 8005a90:	0800713f 	.word	0x0800713f
 8005a94:	abcd330e 	.word	0xabcd330e
 8005a98:	e66d1234 	.word	0xe66d1234
 8005a9c:	0005deec 	.word	0x0005deec
 8005aa0:	5851f42d 	.word	0x5851f42d
 8005aa4:	4c957f2d 	.word	0x4c957f2d

08005aa8 <std>:
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	4604      	mov	r4, r0
 8005aae:	e9c0 3300 	strd	r3, r3, [r0]
 8005ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ab6:	6083      	str	r3, [r0, #8]
 8005ab8:	8181      	strh	r1, [r0, #12]
 8005aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8005abc:	81c2      	strh	r2, [r0, #14]
 8005abe:	6183      	str	r3, [r0, #24]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	2208      	movs	r2, #8
 8005ac4:	305c      	adds	r0, #92	@ 0x5c
 8005ac6:	f000 f928 	bl	8005d1a <memset>
 8005aca:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <std+0x58>)
 8005acc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ace:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <std+0x5c>)
 8005ad0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <std+0x60>)
 8005ad4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b0c <std+0x64>)
 8005ad8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ada:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <std+0x68>)
 8005adc:	6224      	str	r4, [r4, #32]
 8005ade:	429c      	cmp	r4, r3
 8005ae0:	d006      	beq.n	8005af0 <std+0x48>
 8005ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ae6:	4294      	cmp	r4, r2
 8005ae8:	d002      	beq.n	8005af0 <std+0x48>
 8005aea:	33d0      	adds	r3, #208	@ 0xd0
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d105      	bne.n	8005afc <std+0x54>
 8005af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af8:	f000 b99a 	b.w	8005e30 <__retarget_lock_init_recursive>
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	bf00      	nop
 8005b00:	08005c95 	.word	0x08005c95
 8005b04:	08005cb7 	.word	0x08005cb7
 8005b08:	08005cef 	.word	0x08005cef
 8005b0c:	08005d13 	.word	0x08005d13
 8005b10:	200024c8 	.word	0x200024c8

08005b14 <stdio_exit_handler>:
 8005b14:	4a02      	ldr	r2, [pc, #8]	@ (8005b20 <stdio_exit_handler+0xc>)
 8005b16:	4903      	ldr	r1, [pc, #12]	@ (8005b24 <stdio_exit_handler+0x10>)
 8005b18:	4803      	ldr	r0, [pc, #12]	@ (8005b28 <stdio_exit_handler+0x14>)
 8005b1a:	f000 b869 	b.w	8005bf0 <_fwalk_sglue>
 8005b1e:	bf00      	nop
 8005b20:	20000068 	.word	0x20000068
 8005b24:	08006765 	.word	0x08006765
 8005b28:	20000078 	.word	0x20000078

08005b2c <cleanup_stdio>:
 8005b2c:	6841      	ldr	r1, [r0, #4]
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <cleanup_stdio+0x34>)
 8005b30:	4299      	cmp	r1, r3
 8005b32:	b510      	push	{r4, lr}
 8005b34:	4604      	mov	r4, r0
 8005b36:	d001      	beq.n	8005b3c <cleanup_stdio+0x10>
 8005b38:	f000 fe14 	bl	8006764 <_fflush_r>
 8005b3c:	68a1      	ldr	r1, [r4, #8]
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <cleanup_stdio+0x38>)
 8005b40:	4299      	cmp	r1, r3
 8005b42:	d002      	beq.n	8005b4a <cleanup_stdio+0x1e>
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fe0d 	bl	8006764 <_fflush_r>
 8005b4a:	68e1      	ldr	r1, [r4, #12]
 8005b4c:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <cleanup_stdio+0x3c>)
 8005b4e:	4299      	cmp	r1, r3
 8005b50:	d004      	beq.n	8005b5c <cleanup_stdio+0x30>
 8005b52:	4620      	mov	r0, r4
 8005b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b58:	f000 be04 	b.w	8006764 <_fflush_r>
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	bf00      	nop
 8005b60:	200024c8 	.word	0x200024c8
 8005b64:	20002530 	.word	0x20002530
 8005b68:	20002598 	.word	0x20002598

08005b6c <global_stdio_init.part.0>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b9c <global_stdio_init.part.0+0x30>)
 8005b70:	4c0b      	ldr	r4, [pc, #44]	@ (8005ba0 <global_stdio_init.part.0+0x34>)
 8005b72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba4 <global_stdio_init.part.0+0x38>)
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	4620      	mov	r0, r4
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2104      	movs	r1, #4
 8005b7c:	f7ff ff94 	bl	8005aa8 <std>
 8005b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b84:	2201      	movs	r2, #1
 8005b86:	2109      	movs	r1, #9
 8005b88:	f7ff ff8e 	bl	8005aa8 <std>
 8005b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b90:	2202      	movs	r2, #2
 8005b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b96:	2112      	movs	r1, #18
 8005b98:	f7ff bf86 	b.w	8005aa8 <std>
 8005b9c:	20002600 	.word	0x20002600
 8005ba0:	200024c8 	.word	0x200024c8
 8005ba4:	08005b15 	.word	0x08005b15

08005ba8 <__sfp_lock_acquire>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	@ (8005bb0 <__sfp_lock_acquire+0x8>)
 8005baa:	f000 b942 	b.w	8005e32 <__retarget_lock_acquire_recursive>
 8005bae:	bf00      	nop
 8005bb0:	20002609 	.word	0x20002609

08005bb4 <__sfp_lock_release>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	@ (8005bbc <__sfp_lock_release+0x8>)
 8005bb6:	f000 b93d 	b.w	8005e34 <__retarget_lock_release_recursive>
 8005bba:	bf00      	nop
 8005bbc:	20002609 	.word	0x20002609

08005bc0 <__sinit>:
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	f7ff fff0 	bl	8005ba8 <__sfp_lock_acquire>
 8005bc8:	6a23      	ldr	r3, [r4, #32]
 8005bca:	b11b      	cbz	r3, 8005bd4 <__sinit+0x14>
 8005bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd0:	f7ff bff0 	b.w	8005bb4 <__sfp_lock_release>
 8005bd4:	4b04      	ldr	r3, [pc, #16]	@ (8005be8 <__sinit+0x28>)
 8005bd6:	6223      	str	r3, [r4, #32]
 8005bd8:	4b04      	ldr	r3, [pc, #16]	@ (8005bec <__sinit+0x2c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f5      	bne.n	8005bcc <__sinit+0xc>
 8005be0:	f7ff ffc4 	bl	8005b6c <global_stdio_init.part.0>
 8005be4:	e7f2      	b.n	8005bcc <__sinit+0xc>
 8005be6:	bf00      	nop
 8005be8:	08005b2d 	.word	0x08005b2d
 8005bec:	20002600 	.word	0x20002600

08005bf0 <_fwalk_sglue>:
 8005bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf4:	4607      	mov	r7, r0
 8005bf6:	4688      	mov	r8, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c00:	f1b9 0901 	subs.w	r9, r9, #1
 8005c04:	d505      	bpl.n	8005c12 <_fwalk_sglue+0x22>
 8005c06:	6824      	ldr	r4, [r4, #0]
 8005c08:	2c00      	cmp	r4, #0
 8005c0a:	d1f7      	bne.n	8005bfc <_fwalk_sglue+0xc>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d907      	bls.n	8005c28 <_fwalk_sglue+0x38>
 8005c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	d003      	beq.n	8005c28 <_fwalk_sglue+0x38>
 8005c20:	4629      	mov	r1, r5
 8005c22:	4638      	mov	r0, r7
 8005c24:	47c0      	blx	r8
 8005c26:	4306      	orrs	r6, r0
 8005c28:	3568      	adds	r5, #104	@ 0x68
 8005c2a:	e7e9      	b.n	8005c00 <_fwalk_sglue+0x10>

08005c2c <sniprintf>:
 8005c2c:	b40c      	push	{r2, r3}
 8005c2e:	b530      	push	{r4, r5, lr}
 8005c30:	4b17      	ldr	r3, [pc, #92]	@ (8005c90 <sniprintf+0x64>)
 8005c32:	1e0c      	subs	r4, r1, #0
 8005c34:	681d      	ldr	r5, [r3, #0]
 8005c36:	b09d      	sub	sp, #116	@ 0x74
 8005c38:	da08      	bge.n	8005c4c <sniprintf+0x20>
 8005c3a:	238b      	movs	r3, #139	@ 0x8b
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	b01d      	add	sp, #116	@ 0x74
 8005c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c48:	b002      	add	sp, #8
 8005c4a:	4770      	bx	lr
 8005c4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c54:	bf14      	ite	ne
 8005c56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c5a:	4623      	moveq	r3, r4
 8005c5c:	9304      	str	r3, [sp, #16]
 8005c5e:	9307      	str	r3, [sp, #28]
 8005c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c64:	9002      	str	r0, [sp, #8]
 8005c66:	9006      	str	r0, [sp, #24]
 8005c68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c6e:	ab21      	add	r3, sp, #132	@ 0x84
 8005c70:	a902      	add	r1, sp, #8
 8005c72:	4628      	mov	r0, r5
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	f000 fa67 	bl	8006148 <_svfiprintf_r>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	bfbc      	itt	lt
 8005c7e:	238b      	movlt	r3, #139	@ 0x8b
 8005c80:	602b      	strlt	r3, [r5, #0]
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	d0dd      	beq.n	8005c42 <sniprintf+0x16>
 8005c86:	9b02      	ldr	r3, [sp, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e7d9      	b.n	8005c42 <sniprintf+0x16>
 8005c8e:	bf00      	nop
 8005c90:	20000074 	.word	0x20000074

08005c94 <__sread>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9c:	f000 f87a 	bl	8005d94 <_read_r>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	bfab      	itete	ge
 8005ca4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ca8:	181b      	addge	r3, r3, r0
 8005caa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005cae:	bfac      	ite	ge
 8005cb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cb2:	81a3      	strhlt	r3, [r4, #12]
 8005cb4:	bd10      	pop	{r4, pc}

08005cb6 <__swrite>:
 8005cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cba:	461f      	mov	r7, r3
 8005cbc:	898b      	ldrh	r3, [r1, #12]
 8005cbe:	05db      	lsls	r3, r3, #23
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	d505      	bpl.n	8005cd4 <__swrite+0x1e>
 8005cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ccc:	2302      	movs	r3, #2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f000 f84e 	bl	8005d70 <_lseek_r>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cde:	81a3      	strh	r3, [r4, #12]
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cea:	f000 b865 	b.w	8005db8 <_write_r>

08005cee <__sseek>:
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf6:	f000 f83b 	bl	8005d70 <_lseek_r>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	bf15      	itete	ne
 8005d00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d0a:	81a3      	strheq	r3, [r4, #12]
 8005d0c:	bf18      	it	ne
 8005d0e:	81a3      	strhne	r3, [r4, #12]
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <__sclose>:
 8005d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d16:	f000 b81b 	b.w	8005d50 <_close_r>

08005d1a <memset>:
 8005d1a:	4402      	add	r2, r0
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d100      	bne.n	8005d24 <memset+0xa>
 8005d22:	4770      	bx	lr
 8005d24:	f803 1b01 	strb.w	r1, [r3], #1
 8005d28:	e7f9      	b.n	8005d1e <memset+0x4>

08005d2a <strncpy>:
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	3901      	subs	r1, #1
 8005d2e:	4603      	mov	r3, r0
 8005d30:	b132      	cbz	r2, 8005d40 <strncpy+0x16>
 8005d32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d36:	f803 4b01 	strb.w	r4, [r3], #1
 8005d3a:	3a01      	subs	r2, #1
 8005d3c:	2c00      	cmp	r4, #0
 8005d3e:	d1f7      	bne.n	8005d30 <strncpy+0x6>
 8005d40:	441a      	add	r2, r3
 8005d42:	2100      	movs	r1, #0
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d100      	bne.n	8005d4a <strncpy+0x20>
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4e:	e7f9      	b.n	8005d44 <strncpy+0x1a>

08005d50 <_close_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d06      	ldr	r5, [pc, #24]	@ (8005d6c <_close_r+0x1c>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fc fb2c 	bl	80023b8 <_close>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_close_r+0x1a>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_close_r+0x1a>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20002604 	.word	0x20002604

08005d70 <_lseek_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d07      	ldr	r5, [pc, #28]	@ (8005d90 <_lseek_r+0x20>)
 8005d74:	4604      	mov	r4, r0
 8005d76:	4608      	mov	r0, r1
 8005d78:	4611      	mov	r1, r2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	602a      	str	r2, [r5, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7fc fb41 	bl	8002406 <_lseek>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_lseek_r+0x1e>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_lseek_r+0x1e>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	20002604 	.word	0x20002604

08005d94 <_read_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d07      	ldr	r5, [pc, #28]	@ (8005db4 <_read_r+0x20>)
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fc facf 	bl	8002346 <_read>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_read_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_read_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20002604 	.word	0x20002604

08005db8 <_write_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	@ (8005dd8 <_write_r+0x20>)
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7fc fada 	bl	8002380 <_write>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_write_r+0x1e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_write_r+0x1e>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20002604 	.word	0x20002604

08005ddc <__errno>:
 8005ddc:	4b01      	ldr	r3, [pc, #4]	@ (8005de4 <__errno+0x8>)
 8005dde:	6818      	ldr	r0, [r3, #0]
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000074 	.word	0x20000074

08005de8 <__libc_init_array>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4d0d      	ldr	r5, [pc, #52]	@ (8005e20 <__libc_init_array+0x38>)
 8005dec:	4c0d      	ldr	r4, [pc, #52]	@ (8005e24 <__libc_init_array+0x3c>)
 8005dee:	1b64      	subs	r4, r4, r5
 8005df0:	10a4      	asrs	r4, r4, #2
 8005df2:	2600      	movs	r6, #0
 8005df4:	42a6      	cmp	r6, r4
 8005df6:	d109      	bne.n	8005e0c <__libc_init_array+0x24>
 8005df8:	4d0b      	ldr	r5, [pc, #44]	@ (8005e28 <__libc_init_array+0x40>)
 8005dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8005e2c <__libc_init_array+0x44>)
 8005dfc:	f000 fff0 	bl	8006de0 <_init>
 8005e00:	1b64      	subs	r4, r4, r5
 8005e02:	10a4      	asrs	r4, r4, #2
 8005e04:	2600      	movs	r6, #0
 8005e06:	42a6      	cmp	r6, r4
 8005e08:	d105      	bne.n	8005e16 <__libc_init_array+0x2e>
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e10:	4798      	blx	r3
 8005e12:	3601      	adds	r6, #1
 8005e14:	e7ee      	b.n	8005df4 <__libc_init_array+0xc>
 8005e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1a:	4798      	blx	r3
 8005e1c:	3601      	adds	r6, #1
 8005e1e:	e7f2      	b.n	8005e06 <__libc_init_array+0x1e>
 8005e20:	08007210 	.word	0x08007210
 8005e24:	08007210 	.word	0x08007210
 8005e28:	08007210 	.word	0x08007210
 8005e2c:	08007214 	.word	0x08007214

08005e30 <__retarget_lock_init_recursive>:
 8005e30:	4770      	bx	lr

08005e32 <__retarget_lock_acquire_recursive>:
 8005e32:	4770      	bx	lr

08005e34 <__retarget_lock_release_recursive>:
 8005e34:	4770      	bx	lr

08005e36 <memcpy>:
 8005e36:	440a      	add	r2, r1
 8005e38:	4291      	cmp	r1, r2
 8005e3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e3e:	d100      	bne.n	8005e42 <memcpy+0xc>
 8005e40:	4770      	bx	lr
 8005e42:	b510      	push	{r4, lr}
 8005e44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e4c:	4291      	cmp	r1, r2
 8005e4e:	d1f9      	bne.n	8005e44 <memcpy+0xe>
 8005e50:	bd10      	pop	{r4, pc}
	...

08005e54 <__assert_func>:
 8005e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e56:	4614      	mov	r4, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <__assert_func+0x2c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4605      	mov	r5, r0
 8005e60:	68d8      	ldr	r0, [r3, #12]
 8005e62:	b954      	cbnz	r4, 8005e7a <__assert_func+0x26>
 8005e64:	4b07      	ldr	r3, [pc, #28]	@ (8005e84 <__assert_func+0x30>)
 8005e66:	461c      	mov	r4, r3
 8005e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e6c:	9100      	str	r1, [sp, #0]
 8005e6e:	462b      	mov	r3, r5
 8005e70:	4905      	ldr	r1, [pc, #20]	@ (8005e88 <__assert_func+0x34>)
 8005e72:	f000 fc9f 	bl	80067b4 <fiprintf>
 8005e76:	f000 fcd9 	bl	800682c <abort>
 8005e7a:	4b04      	ldr	r3, [pc, #16]	@ (8005e8c <__assert_func+0x38>)
 8005e7c:	e7f4      	b.n	8005e68 <__assert_func+0x14>
 8005e7e:	bf00      	nop
 8005e80:	20000074 	.word	0x20000074
 8005e84:	080071d2 	.word	0x080071d2
 8005e88:	080071a4 	.word	0x080071a4
 8005e8c:	08007197 	.word	0x08007197

08005e90 <_free_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4605      	mov	r5, r0
 8005e94:	2900      	cmp	r1, #0
 8005e96:	d041      	beq.n	8005f1c <_free_r+0x8c>
 8005e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9c:	1f0c      	subs	r4, r1, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfb8      	it	lt
 8005ea2:	18e4      	addlt	r4, r4, r3
 8005ea4:	f000 f8e8 	bl	8006078 <__malloc_lock>
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f20 <_free_r+0x90>)
 8005eaa:	6813      	ldr	r3, [r2, #0]
 8005eac:	b933      	cbnz	r3, 8005ebc <_free_r+0x2c>
 8005eae:	6063      	str	r3, [r4, #4]
 8005eb0:	6014      	str	r4, [r2, #0]
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eb8:	f000 b8e4 	b.w	8006084 <__malloc_unlock>
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	d908      	bls.n	8005ed2 <_free_r+0x42>
 8005ec0:	6820      	ldr	r0, [r4, #0]
 8005ec2:	1821      	adds	r1, r4, r0
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	bf01      	itttt	eq
 8005ec8:	6819      	ldreq	r1, [r3, #0]
 8005eca:	685b      	ldreq	r3, [r3, #4]
 8005ecc:	1809      	addeq	r1, r1, r0
 8005ece:	6021      	streq	r1, [r4, #0]
 8005ed0:	e7ed      	b.n	8005eae <_free_r+0x1e>
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	b10b      	cbz	r3, 8005edc <_free_r+0x4c>
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d9fa      	bls.n	8005ed2 <_free_r+0x42>
 8005edc:	6811      	ldr	r1, [r2, #0]
 8005ede:	1850      	adds	r0, r2, r1
 8005ee0:	42a0      	cmp	r0, r4
 8005ee2:	d10b      	bne.n	8005efc <_free_r+0x6c>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	4401      	add	r1, r0
 8005ee8:	1850      	adds	r0, r2, r1
 8005eea:	4283      	cmp	r3, r0
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	d1e0      	bne.n	8005eb2 <_free_r+0x22>
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	6053      	str	r3, [r2, #4]
 8005ef6:	4408      	add	r0, r1
 8005ef8:	6010      	str	r0, [r2, #0]
 8005efa:	e7da      	b.n	8005eb2 <_free_r+0x22>
 8005efc:	d902      	bls.n	8005f04 <_free_r+0x74>
 8005efe:	230c      	movs	r3, #12
 8005f00:	602b      	str	r3, [r5, #0]
 8005f02:	e7d6      	b.n	8005eb2 <_free_r+0x22>
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	1821      	adds	r1, r4, r0
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	bf04      	itt	eq
 8005f0c:	6819      	ldreq	r1, [r3, #0]
 8005f0e:	685b      	ldreq	r3, [r3, #4]
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	bf04      	itt	eq
 8005f14:	1809      	addeq	r1, r1, r0
 8005f16:	6021      	streq	r1, [r4, #0]
 8005f18:	6054      	str	r4, [r2, #4]
 8005f1a:	e7ca      	b.n	8005eb2 <_free_r+0x22>
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
 8005f1e:	bf00      	nop
 8005f20:	20002610 	.word	0x20002610

08005f24 <malloc>:
 8005f24:	4b02      	ldr	r3, [pc, #8]	@ (8005f30 <malloc+0xc>)
 8005f26:	4601      	mov	r1, r0
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	f000 b825 	b.w	8005f78 <_malloc_r>
 8005f2e:	bf00      	nop
 8005f30:	20000074 	.word	0x20000074

08005f34 <sbrk_aligned>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	4e0f      	ldr	r6, [pc, #60]	@ (8005f74 <sbrk_aligned+0x40>)
 8005f38:	460c      	mov	r4, r1
 8005f3a:	6831      	ldr	r1, [r6, #0]
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	b911      	cbnz	r1, 8005f46 <sbrk_aligned+0x12>
 8005f40:	f000 fc64 	bl	800680c <_sbrk_r>
 8005f44:	6030      	str	r0, [r6, #0]
 8005f46:	4621      	mov	r1, r4
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 fc5f 	bl	800680c <_sbrk_r>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d103      	bne.n	8005f5a <sbrk_aligned+0x26>
 8005f52:	f04f 34ff 	mov.w	r4, #4294967295
 8005f56:	4620      	mov	r0, r4
 8005f58:	bd70      	pop	{r4, r5, r6, pc}
 8005f5a:	1cc4      	adds	r4, r0, #3
 8005f5c:	f024 0403 	bic.w	r4, r4, #3
 8005f60:	42a0      	cmp	r0, r4
 8005f62:	d0f8      	beq.n	8005f56 <sbrk_aligned+0x22>
 8005f64:	1a21      	subs	r1, r4, r0
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 fc50 	bl	800680c <_sbrk_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d1f2      	bne.n	8005f56 <sbrk_aligned+0x22>
 8005f70:	e7ef      	b.n	8005f52 <sbrk_aligned+0x1e>
 8005f72:	bf00      	nop
 8005f74:	2000260c 	.word	0x2000260c

08005f78 <_malloc_r>:
 8005f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f7c:	1ccd      	adds	r5, r1, #3
 8005f7e:	f025 0503 	bic.w	r5, r5, #3
 8005f82:	3508      	adds	r5, #8
 8005f84:	2d0c      	cmp	r5, #12
 8005f86:	bf38      	it	cc
 8005f88:	250c      	movcc	r5, #12
 8005f8a:	2d00      	cmp	r5, #0
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	db01      	blt.n	8005f94 <_malloc_r+0x1c>
 8005f90:	42a9      	cmp	r1, r5
 8005f92:	d904      	bls.n	8005f9e <_malloc_r+0x26>
 8005f94:	230c      	movs	r3, #12
 8005f96:	6033      	str	r3, [r6, #0]
 8005f98:	2000      	movs	r0, #0
 8005f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006074 <_malloc_r+0xfc>
 8005fa2:	f000 f869 	bl	8006078 <__malloc_lock>
 8005fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8005faa:	461c      	mov	r4, r3
 8005fac:	bb44      	cbnz	r4, 8006000 <_malloc_r+0x88>
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f7ff ffbf 	bl	8005f34 <sbrk_aligned>
 8005fb6:	1c43      	adds	r3, r0, #1
 8005fb8:	4604      	mov	r4, r0
 8005fba:	d158      	bne.n	800606e <_malloc_r+0xf6>
 8005fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8005fc0:	4627      	mov	r7, r4
 8005fc2:	2f00      	cmp	r7, #0
 8005fc4:	d143      	bne.n	800604e <_malloc_r+0xd6>
 8005fc6:	2c00      	cmp	r4, #0
 8005fc8:	d04b      	beq.n	8006062 <_malloc_r+0xea>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	4639      	mov	r1, r7
 8005fce:	4630      	mov	r0, r6
 8005fd0:	eb04 0903 	add.w	r9, r4, r3
 8005fd4:	f000 fc1a 	bl	800680c <_sbrk_r>
 8005fd8:	4581      	cmp	r9, r0
 8005fda:	d142      	bne.n	8006062 <_malloc_r+0xea>
 8005fdc:	6821      	ldr	r1, [r4, #0]
 8005fde:	1a6d      	subs	r5, r5, r1
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7ff ffa6 	bl	8005f34 <sbrk_aligned>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d03a      	beq.n	8006062 <_malloc_r+0xea>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	442b      	add	r3, r5
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	bb62      	cbnz	r2, 8006054 <_malloc_r+0xdc>
 8005ffa:	f8c8 7000 	str.w	r7, [r8]
 8005ffe:	e00f      	b.n	8006020 <_malloc_r+0xa8>
 8006000:	6822      	ldr	r2, [r4, #0]
 8006002:	1b52      	subs	r2, r2, r5
 8006004:	d420      	bmi.n	8006048 <_malloc_r+0xd0>
 8006006:	2a0b      	cmp	r2, #11
 8006008:	d917      	bls.n	800603a <_malloc_r+0xc2>
 800600a:	1961      	adds	r1, r4, r5
 800600c:	42a3      	cmp	r3, r4
 800600e:	6025      	str	r5, [r4, #0]
 8006010:	bf18      	it	ne
 8006012:	6059      	strne	r1, [r3, #4]
 8006014:	6863      	ldr	r3, [r4, #4]
 8006016:	bf08      	it	eq
 8006018:	f8c8 1000 	streq.w	r1, [r8]
 800601c:	5162      	str	r2, [r4, r5]
 800601e:	604b      	str	r3, [r1, #4]
 8006020:	4630      	mov	r0, r6
 8006022:	f000 f82f 	bl	8006084 <__malloc_unlock>
 8006026:	f104 000b 	add.w	r0, r4, #11
 800602a:	1d23      	adds	r3, r4, #4
 800602c:	f020 0007 	bic.w	r0, r0, #7
 8006030:	1ac2      	subs	r2, r0, r3
 8006032:	bf1c      	itt	ne
 8006034:	1a1b      	subne	r3, r3, r0
 8006036:	50a3      	strne	r3, [r4, r2]
 8006038:	e7af      	b.n	8005f9a <_malloc_r+0x22>
 800603a:	6862      	ldr	r2, [r4, #4]
 800603c:	42a3      	cmp	r3, r4
 800603e:	bf0c      	ite	eq
 8006040:	f8c8 2000 	streq.w	r2, [r8]
 8006044:	605a      	strne	r2, [r3, #4]
 8006046:	e7eb      	b.n	8006020 <_malloc_r+0xa8>
 8006048:	4623      	mov	r3, r4
 800604a:	6864      	ldr	r4, [r4, #4]
 800604c:	e7ae      	b.n	8005fac <_malloc_r+0x34>
 800604e:	463c      	mov	r4, r7
 8006050:	687f      	ldr	r7, [r7, #4]
 8006052:	e7b6      	b.n	8005fc2 <_malloc_r+0x4a>
 8006054:	461a      	mov	r2, r3
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	42a3      	cmp	r3, r4
 800605a:	d1fb      	bne.n	8006054 <_malloc_r+0xdc>
 800605c:	2300      	movs	r3, #0
 800605e:	6053      	str	r3, [r2, #4]
 8006060:	e7de      	b.n	8006020 <_malloc_r+0xa8>
 8006062:	230c      	movs	r3, #12
 8006064:	6033      	str	r3, [r6, #0]
 8006066:	4630      	mov	r0, r6
 8006068:	f000 f80c 	bl	8006084 <__malloc_unlock>
 800606c:	e794      	b.n	8005f98 <_malloc_r+0x20>
 800606e:	6005      	str	r5, [r0, #0]
 8006070:	e7d6      	b.n	8006020 <_malloc_r+0xa8>
 8006072:	bf00      	nop
 8006074:	20002610 	.word	0x20002610

08006078 <__malloc_lock>:
 8006078:	4801      	ldr	r0, [pc, #4]	@ (8006080 <__malloc_lock+0x8>)
 800607a:	f7ff beda 	b.w	8005e32 <__retarget_lock_acquire_recursive>
 800607e:	bf00      	nop
 8006080:	20002608 	.word	0x20002608

08006084 <__malloc_unlock>:
 8006084:	4801      	ldr	r0, [pc, #4]	@ (800608c <__malloc_unlock+0x8>)
 8006086:	f7ff bed5 	b.w	8005e34 <__retarget_lock_release_recursive>
 800608a:	bf00      	nop
 800608c:	20002608 	.word	0x20002608

08006090 <__ssputs_r>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	688e      	ldr	r6, [r1, #8]
 8006096:	461f      	mov	r7, r3
 8006098:	42be      	cmp	r6, r7
 800609a:	680b      	ldr	r3, [r1, #0]
 800609c:	4682      	mov	sl, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	4690      	mov	r8, r2
 80060a2:	d82d      	bhi.n	8006100 <__ssputs_r+0x70>
 80060a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060ac:	d026      	beq.n	80060fc <__ssputs_r+0x6c>
 80060ae:	6965      	ldr	r5, [r4, #20]
 80060b0:	6909      	ldr	r1, [r1, #16]
 80060b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060b6:	eba3 0901 	sub.w	r9, r3, r1
 80060ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060be:	1c7b      	adds	r3, r7, #1
 80060c0:	444b      	add	r3, r9
 80060c2:	106d      	asrs	r5, r5, #1
 80060c4:	429d      	cmp	r5, r3
 80060c6:	bf38      	it	cc
 80060c8:	461d      	movcc	r5, r3
 80060ca:	0553      	lsls	r3, r2, #21
 80060cc:	d527      	bpl.n	800611e <__ssputs_r+0x8e>
 80060ce:	4629      	mov	r1, r5
 80060d0:	f7ff ff52 	bl	8005f78 <_malloc_r>
 80060d4:	4606      	mov	r6, r0
 80060d6:	b360      	cbz	r0, 8006132 <__ssputs_r+0xa2>
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	464a      	mov	r2, r9
 80060dc:	f7ff feab 	bl	8005e36 <memcpy>
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	6126      	str	r6, [r4, #16]
 80060ee:	6165      	str	r5, [r4, #20]
 80060f0:	444e      	add	r6, r9
 80060f2:	eba5 0509 	sub.w	r5, r5, r9
 80060f6:	6026      	str	r6, [r4, #0]
 80060f8:	60a5      	str	r5, [r4, #8]
 80060fa:	463e      	mov	r6, r7
 80060fc:	42be      	cmp	r6, r7
 80060fe:	d900      	bls.n	8006102 <__ssputs_r+0x72>
 8006100:	463e      	mov	r6, r7
 8006102:	6820      	ldr	r0, [r4, #0]
 8006104:	4632      	mov	r2, r6
 8006106:	4641      	mov	r1, r8
 8006108:	f000 fb66 	bl	80067d8 <memmove>
 800610c:	68a3      	ldr	r3, [r4, #8]
 800610e:	1b9b      	subs	r3, r3, r6
 8006110:	60a3      	str	r3, [r4, #8]
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	4433      	add	r3, r6
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	2000      	movs	r0, #0
 800611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611e:	462a      	mov	r2, r5
 8006120:	f000 fb8b 	bl	800683a <_realloc_r>
 8006124:	4606      	mov	r6, r0
 8006126:	2800      	cmp	r0, #0
 8006128:	d1e0      	bne.n	80060ec <__ssputs_r+0x5c>
 800612a:	6921      	ldr	r1, [r4, #16]
 800612c:	4650      	mov	r0, sl
 800612e:	f7ff feaf 	bl	8005e90 <_free_r>
 8006132:	230c      	movs	r3, #12
 8006134:	f8ca 3000 	str.w	r3, [sl]
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	e7e9      	b.n	800611a <__ssputs_r+0x8a>
	...

08006148 <_svfiprintf_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	4698      	mov	r8, r3
 800614e:	898b      	ldrh	r3, [r1, #12]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	b09d      	sub	sp, #116	@ 0x74
 8006154:	4607      	mov	r7, r0
 8006156:	460d      	mov	r5, r1
 8006158:	4614      	mov	r4, r2
 800615a:	d510      	bpl.n	800617e <_svfiprintf_r+0x36>
 800615c:	690b      	ldr	r3, [r1, #16]
 800615e:	b973      	cbnz	r3, 800617e <_svfiprintf_r+0x36>
 8006160:	2140      	movs	r1, #64	@ 0x40
 8006162:	f7ff ff09 	bl	8005f78 <_malloc_r>
 8006166:	6028      	str	r0, [r5, #0]
 8006168:	6128      	str	r0, [r5, #16]
 800616a:	b930      	cbnz	r0, 800617a <_svfiprintf_r+0x32>
 800616c:	230c      	movs	r3, #12
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	b01d      	add	sp, #116	@ 0x74
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	2340      	movs	r3, #64	@ 0x40
 800617c:	616b      	str	r3, [r5, #20]
 800617e:	2300      	movs	r3, #0
 8006180:	9309      	str	r3, [sp, #36]	@ 0x24
 8006182:	2320      	movs	r3, #32
 8006184:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006188:	f8cd 800c 	str.w	r8, [sp, #12]
 800618c:	2330      	movs	r3, #48	@ 0x30
 800618e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800632c <_svfiprintf_r+0x1e4>
 8006192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006196:	f04f 0901 	mov.w	r9, #1
 800619a:	4623      	mov	r3, r4
 800619c:	469a      	mov	sl, r3
 800619e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061a2:	b10a      	cbz	r2, 80061a8 <_svfiprintf_r+0x60>
 80061a4:	2a25      	cmp	r2, #37	@ 0x25
 80061a6:	d1f9      	bne.n	800619c <_svfiprintf_r+0x54>
 80061a8:	ebba 0b04 	subs.w	fp, sl, r4
 80061ac:	d00b      	beq.n	80061c6 <_svfiprintf_r+0x7e>
 80061ae:	465b      	mov	r3, fp
 80061b0:	4622      	mov	r2, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff ff6b 	bl	8006090 <__ssputs_r>
 80061ba:	3001      	adds	r0, #1
 80061bc:	f000 80a7 	beq.w	800630e <_svfiprintf_r+0x1c6>
 80061c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c2:	445a      	add	r2, fp
 80061c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80061c6:	f89a 3000 	ldrb.w	r3, [sl]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 809f 	beq.w	800630e <_svfiprintf_r+0x1c6>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295
 80061d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061da:	f10a 0a01 	add.w	sl, sl, #1
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	9307      	str	r3, [sp, #28]
 80061e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80061e8:	4654      	mov	r4, sl
 80061ea:	2205      	movs	r2, #5
 80061ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f0:	484e      	ldr	r0, [pc, #312]	@ (800632c <_svfiprintf_r+0x1e4>)
 80061f2:	f7f9 fff5 	bl	80001e0 <memchr>
 80061f6:	9a04      	ldr	r2, [sp, #16]
 80061f8:	b9d8      	cbnz	r0, 8006232 <_svfiprintf_r+0xea>
 80061fa:	06d0      	lsls	r0, r2, #27
 80061fc:	bf44      	itt	mi
 80061fe:	2320      	movmi	r3, #32
 8006200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006204:	0711      	lsls	r1, r2, #28
 8006206:	bf44      	itt	mi
 8006208:	232b      	movmi	r3, #43	@ 0x2b
 800620a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800620e:	f89a 3000 	ldrb.w	r3, [sl]
 8006212:	2b2a      	cmp	r3, #42	@ 0x2a
 8006214:	d015      	beq.n	8006242 <_svfiprintf_r+0xfa>
 8006216:	9a07      	ldr	r2, [sp, #28]
 8006218:	4654      	mov	r4, sl
 800621a:	2000      	movs	r0, #0
 800621c:	f04f 0c0a 	mov.w	ip, #10
 8006220:	4621      	mov	r1, r4
 8006222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006226:	3b30      	subs	r3, #48	@ 0x30
 8006228:	2b09      	cmp	r3, #9
 800622a:	d94b      	bls.n	80062c4 <_svfiprintf_r+0x17c>
 800622c:	b1b0      	cbz	r0, 800625c <_svfiprintf_r+0x114>
 800622e:	9207      	str	r2, [sp, #28]
 8006230:	e014      	b.n	800625c <_svfiprintf_r+0x114>
 8006232:	eba0 0308 	sub.w	r3, r0, r8
 8006236:	fa09 f303 	lsl.w	r3, r9, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	46a2      	mov	sl, r4
 8006240:	e7d2      	b.n	80061e8 <_svfiprintf_r+0xa0>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	1d19      	adds	r1, r3, #4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	9103      	str	r1, [sp, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfbb      	ittet	lt
 800624e:	425b      	neglt	r3, r3
 8006250:	f042 0202 	orrlt.w	r2, r2, #2
 8006254:	9307      	strge	r3, [sp, #28]
 8006256:	9307      	strlt	r3, [sp, #28]
 8006258:	bfb8      	it	lt
 800625a:	9204      	strlt	r2, [sp, #16]
 800625c:	7823      	ldrb	r3, [r4, #0]
 800625e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006260:	d10a      	bne.n	8006278 <_svfiprintf_r+0x130>
 8006262:	7863      	ldrb	r3, [r4, #1]
 8006264:	2b2a      	cmp	r3, #42	@ 0x2a
 8006266:	d132      	bne.n	80062ce <_svfiprintf_r+0x186>
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	9203      	str	r2, [sp, #12]
 8006270:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006274:	3402      	adds	r4, #2
 8006276:	9305      	str	r3, [sp, #20]
 8006278:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800633c <_svfiprintf_r+0x1f4>
 800627c:	7821      	ldrb	r1, [r4, #0]
 800627e:	2203      	movs	r2, #3
 8006280:	4650      	mov	r0, sl
 8006282:	f7f9 ffad 	bl	80001e0 <memchr>
 8006286:	b138      	cbz	r0, 8006298 <_svfiprintf_r+0x150>
 8006288:	9b04      	ldr	r3, [sp, #16]
 800628a:	eba0 000a 	sub.w	r0, r0, sl
 800628e:	2240      	movs	r2, #64	@ 0x40
 8006290:	4082      	lsls	r2, r0
 8006292:	4313      	orrs	r3, r2
 8006294:	3401      	adds	r4, #1
 8006296:	9304      	str	r3, [sp, #16]
 8006298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629c:	4824      	ldr	r0, [pc, #144]	@ (8006330 <_svfiprintf_r+0x1e8>)
 800629e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062a2:	2206      	movs	r2, #6
 80062a4:	f7f9 ff9c 	bl	80001e0 <memchr>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d036      	beq.n	800631a <_svfiprintf_r+0x1d2>
 80062ac:	4b21      	ldr	r3, [pc, #132]	@ (8006334 <_svfiprintf_r+0x1ec>)
 80062ae:	bb1b      	cbnz	r3, 80062f8 <_svfiprintf_r+0x1b0>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	3307      	adds	r3, #7
 80062b4:	f023 0307 	bic.w	r3, r3, #7
 80062b8:	3308      	adds	r3, #8
 80062ba:	9303      	str	r3, [sp, #12]
 80062bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062be:	4433      	add	r3, r6
 80062c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c2:	e76a      	b.n	800619a <_svfiprintf_r+0x52>
 80062c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062c8:	460c      	mov	r4, r1
 80062ca:	2001      	movs	r0, #1
 80062cc:	e7a8      	b.n	8006220 <_svfiprintf_r+0xd8>
 80062ce:	2300      	movs	r3, #0
 80062d0:	3401      	adds	r4, #1
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	4619      	mov	r1, r3
 80062d6:	f04f 0c0a 	mov.w	ip, #10
 80062da:	4620      	mov	r0, r4
 80062dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e0:	3a30      	subs	r2, #48	@ 0x30
 80062e2:	2a09      	cmp	r2, #9
 80062e4:	d903      	bls.n	80062ee <_svfiprintf_r+0x1a6>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0c6      	beq.n	8006278 <_svfiprintf_r+0x130>
 80062ea:	9105      	str	r1, [sp, #20]
 80062ec:	e7c4      	b.n	8006278 <_svfiprintf_r+0x130>
 80062ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80062f2:	4604      	mov	r4, r0
 80062f4:	2301      	movs	r3, #1
 80062f6:	e7f0      	b.n	80062da <_svfiprintf_r+0x192>
 80062f8:	ab03      	add	r3, sp, #12
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006338 <_svfiprintf_r+0x1f0>)
 8006300:	a904      	add	r1, sp, #16
 8006302:	4638      	mov	r0, r7
 8006304:	f3af 8000 	nop.w
 8006308:	1c42      	adds	r2, r0, #1
 800630a:	4606      	mov	r6, r0
 800630c:	d1d6      	bne.n	80062bc <_svfiprintf_r+0x174>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	065b      	lsls	r3, r3, #25
 8006312:	f53f af2d 	bmi.w	8006170 <_svfiprintf_r+0x28>
 8006316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006318:	e72c      	b.n	8006174 <_svfiprintf_r+0x2c>
 800631a:	ab03      	add	r3, sp, #12
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	462a      	mov	r2, r5
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <_svfiprintf_r+0x1f0>)
 8006322:	a904      	add	r1, sp, #16
 8006324:	4638      	mov	r0, r7
 8006326:	f000 f879 	bl	800641c <_printf_i>
 800632a:	e7ed      	b.n	8006308 <_svfiprintf_r+0x1c0>
 800632c:	080071d3 	.word	0x080071d3
 8006330:	080071dd 	.word	0x080071dd
 8006334:	00000000 	.word	0x00000000
 8006338:	08006091 	.word	0x08006091
 800633c:	080071d9 	.word	0x080071d9

08006340 <_printf_common>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	4616      	mov	r6, r2
 8006346:	4698      	mov	r8, r3
 8006348:	688a      	ldr	r2, [r1, #8]
 800634a:	690b      	ldr	r3, [r1, #16]
 800634c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006350:	4293      	cmp	r3, r2
 8006352:	bfb8      	it	lt
 8006354:	4613      	movlt	r3, r2
 8006356:	6033      	str	r3, [r6, #0]
 8006358:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800635c:	4607      	mov	r7, r0
 800635e:	460c      	mov	r4, r1
 8006360:	b10a      	cbz	r2, 8006366 <_printf_common+0x26>
 8006362:	3301      	adds	r3, #1
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	0699      	lsls	r1, r3, #26
 800636a:	bf42      	ittt	mi
 800636c:	6833      	ldrmi	r3, [r6, #0]
 800636e:	3302      	addmi	r3, #2
 8006370:	6033      	strmi	r3, [r6, #0]
 8006372:	6825      	ldr	r5, [r4, #0]
 8006374:	f015 0506 	ands.w	r5, r5, #6
 8006378:	d106      	bne.n	8006388 <_printf_common+0x48>
 800637a:	f104 0a19 	add.w	sl, r4, #25
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	6832      	ldr	r2, [r6, #0]
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	42ab      	cmp	r3, r5
 8006386:	dc26      	bgt.n	80063d6 <_printf_common+0x96>
 8006388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	3b00      	subs	r3, #0
 8006390:	bf18      	it	ne
 8006392:	2301      	movne	r3, #1
 8006394:	0692      	lsls	r2, r2, #26
 8006396:	d42b      	bmi.n	80063f0 <_printf_common+0xb0>
 8006398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800639c:	4641      	mov	r1, r8
 800639e:	4638      	mov	r0, r7
 80063a0:	47c8      	blx	r9
 80063a2:	3001      	adds	r0, #1
 80063a4:	d01e      	beq.n	80063e4 <_printf_common+0xa4>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	6922      	ldr	r2, [r4, #16]
 80063aa:	f003 0306 	and.w	r3, r3, #6
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	bf02      	ittt	eq
 80063b2:	68e5      	ldreq	r5, [r4, #12]
 80063b4:	6833      	ldreq	r3, [r6, #0]
 80063b6:	1aed      	subeq	r5, r5, r3
 80063b8:	68a3      	ldr	r3, [r4, #8]
 80063ba:	bf0c      	ite	eq
 80063bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063c0:	2500      	movne	r5, #0
 80063c2:	4293      	cmp	r3, r2
 80063c4:	bfc4      	itt	gt
 80063c6:	1a9b      	subgt	r3, r3, r2
 80063c8:	18ed      	addgt	r5, r5, r3
 80063ca:	2600      	movs	r6, #0
 80063cc:	341a      	adds	r4, #26
 80063ce:	42b5      	cmp	r5, r6
 80063d0:	d11a      	bne.n	8006408 <_printf_common+0xc8>
 80063d2:	2000      	movs	r0, #0
 80063d4:	e008      	b.n	80063e8 <_printf_common+0xa8>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4652      	mov	r2, sl
 80063da:	4641      	mov	r1, r8
 80063dc:	4638      	mov	r0, r7
 80063de:	47c8      	blx	r9
 80063e0:	3001      	adds	r0, #1
 80063e2:	d103      	bne.n	80063ec <_printf_common+0xac>
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ec:	3501      	adds	r5, #1
 80063ee:	e7c6      	b.n	800637e <_printf_common+0x3e>
 80063f0:	18e1      	adds	r1, r4, r3
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	2030      	movs	r0, #48	@ 0x30
 80063f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063fa:	4422      	add	r2, r4
 80063fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006400:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006404:	3302      	adds	r3, #2
 8006406:	e7c7      	b.n	8006398 <_printf_common+0x58>
 8006408:	2301      	movs	r3, #1
 800640a:	4622      	mov	r2, r4
 800640c:	4641      	mov	r1, r8
 800640e:	4638      	mov	r0, r7
 8006410:	47c8      	blx	r9
 8006412:	3001      	adds	r0, #1
 8006414:	d0e6      	beq.n	80063e4 <_printf_common+0xa4>
 8006416:	3601      	adds	r6, #1
 8006418:	e7d9      	b.n	80063ce <_printf_common+0x8e>
	...

0800641c <_printf_i>:
 800641c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	7e0f      	ldrb	r7, [r1, #24]
 8006422:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006424:	2f78      	cmp	r7, #120	@ 0x78
 8006426:	4691      	mov	r9, r2
 8006428:	4680      	mov	r8, r0
 800642a:	460c      	mov	r4, r1
 800642c:	469a      	mov	sl, r3
 800642e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006432:	d807      	bhi.n	8006444 <_printf_i+0x28>
 8006434:	2f62      	cmp	r7, #98	@ 0x62
 8006436:	d80a      	bhi.n	800644e <_printf_i+0x32>
 8006438:	2f00      	cmp	r7, #0
 800643a:	f000 80d2 	beq.w	80065e2 <_printf_i+0x1c6>
 800643e:	2f58      	cmp	r7, #88	@ 0x58
 8006440:	f000 80b9 	beq.w	80065b6 <_printf_i+0x19a>
 8006444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800644c:	e03a      	b.n	80064c4 <_printf_i+0xa8>
 800644e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006452:	2b15      	cmp	r3, #21
 8006454:	d8f6      	bhi.n	8006444 <_printf_i+0x28>
 8006456:	a101      	add	r1, pc, #4	@ (adr r1, 800645c <_printf_i+0x40>)
 8006458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800645c:	080064b5 	.word	0x080064b5
 8006460:	080064c9 	.word	0x080064c9
 8006464:	08006445 	.word	0x08006445
 8006468:	08006445 	.word	0x08006445
 800646c:	08006445 	.word	0x08006445
 8006470:	08006445 	.word	0x08006445
 8006474:	080064c9 	.word	0x080064c9
 8006478:	08006445 	.word	0x08006445
 800647c:	08006445 	.word	0x08006445
 8006480:	08006445 	.word	0x08006445
 8006484:	08006445 	.word	0x08006445
 8006488:	080065c9 	.word	0x080065c9
 800648c:	080064f3 	.word	0x080064f3
 8006490:	08006583 	.word	0x08006583
 8006494:	08006445 	.word	0x08006445
 8006498:	08006445 	.word	0x08006445
 800649c:	080065eb 	.word	0x080065eb
 80064a0:	08006445 	.word	0x08006445
 80064a4:	080064f3 	.word	0x080064f3
 80064a8:	08006445 	.word	0x08006445
 80064ac:	08006445 	.word	0x08006445
 80064b0:	0800658b 	.word	0x0800658b
 80064b4:	6833      	ldr	r3, [r6, #0]
 80064b6:	1d1a      	adds	r2, r3, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6032      	str	r2, [r6, #0]
 80064bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064c4:	2301      	movs	r3, #1
 80064c6:	e09d      	b.n	8006604 <_printf_i+0x1e8>
 80064c8:	6833      	ldr	r3, [r6, #0]
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	1d19      	adds	r1, r3, #4
 80064ce:	6031      	str	r1, [r6, #0]
 80064d0:	0606      	lsls	r6, r0, #24
 80064d2:	d501      	bpl.n	80064d8 <_printf_i+0xbc>
 80064d4:	681d      	ldr	r5, [r3, #0]
 80064d6:	e003      	b.n	80064e0 <_printf_i+0xc4>
 80064d8:	0645      	lsls	r5, r0, #25
 80064da:	d5fb      	bpl.n	80064d4 <_printf_i+0xb8>
 80064dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	da03      	bge.n	80064ec <_printf_i+0xd0>
 80064e4:	232d      	movs	r3, #45	@ 0x2d
 80064e6:	426d      	negs	r5, r5
 80064e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ec:	4859      	ldr	r0, [pc, #356]	@ (8006654 <_printf_i+0x238>)
 80064ee:	230a      	movs	r3, #10
 80064f0:	e011      	b.n	8006516 <_printf_i+0xfa>
 80064f2:	6821      	ldr	r1, [r4, #0]
 80064f4:	6833      	ldr	r3, [r6, #0]
 80064f6:	0608      	lsls	r0, r1, #24
 80064f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80064fc:	d402      	bmi.n	8006504 <_printf_i+0xe8>
 80064fe:	0649      	lsls	r1, r1, #25
 8006500:	bf48      	it	mi
 8006502:	b2ad      	uxthmi	r5, r5
 8006504:	2f6f      	cmp	r7, #111	@ 0x6f
 8006506:	4853      	ldr	r0, [pc, #332]	@ (8006654 <_printf_i+0x238>)
 8006508:	6033      	str	r3, [r6, #0]
 800650a:	bf14      	ite	ne
 800650c:	230a      	movne	r3, #10
 800650e:	2308      	moveq	r3, #8
 8006510:	2100      	movs	r1, #0
 8006512:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006516:	6866      	ldr	r6, [r4, #4]
 8006518:	60a6      	str	r6, [r4, #8]
 800651a:	2e00      	cmp	r6, #0
 800651c:	bfa2      	ittt	ge
 800651e:	6821      	ldrge	r1, [r4, #0]
 8006520:	f021 0104 	bicge.w	r1, r1, #4
 8006524:	6021      	strge	r1, [r4, #0]
 8006526:	b90d      	cbnz	r5, 800652c <_printf_i+0x110>
 8006528:	2e00      	cmp	r6, #0
 800652a:	d04b      	beq.n	80065c4 <_printf_i+0x1a8>
 800652c:	4616      	mov	r6, r2
 800652e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006532:	fb03 5711 	mls	r7, r3, r1, r5
 8006536:	5dc7      	ldrb	r7, [r0, r7]
 8006538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800653c:	462f      	mov	r7, r5
 800653e:	42bb      	cmp	r3, r7
 8006540:	460d      	mov	r5, r1
 8006542:	d9f4      	bls.n	800652e <_printf_i+0x112>
 8006544:	2b08      	cmp	r3, #8
 8006546:	d10b      	bne.n	8006560 <_printf_i+0x144>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	07df      	lsls	r7, r3, #31
 800654c:	d508      	bpl.n	8006560 <_printf_i+0x144>
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	6861      	ldr	r1, [r4, #4]
 8006552:	4299      	cmp	r1, r3
 8006554:	bfde      	ittt	le
 8006556:	2330      	movle	r3, #48	@ 0x30
 8006558:	f806 3c01 	strble.w	r3, [r6, #-1]
 800655c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006560:	1b92      	subs	r2, r2, r6
 8006562:	6122      	str	r2, [r4, #16]
 8006564:	f8cd a000 	str.w	sl, [sp]
 8006568:	464b      	mov	r3, r9
 800656a:	aa03      	add	r2, sp, #12
 800656c:	4621      	mov	r1, r4
 800656e:	4640      	mov	r0, r8
 8006570:	f7ff fee6 	bl	8006340 <_printf_common>
 8006574:	3001      	adds	r0, #1
 8006576:	d14a      	bne.n	800660e <_printf_i+0x1f2>
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	b004      	add	sp, #16
 800657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	f043 0320 	orr.w	r3, r3, #32
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	4833      	ldr	r0, [pc, #204]	@ (8006658 <_printf_i+0x23c>)
 800658c:	2778      	movs	r7, #120	@ 0x78
 800658e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	6831      	ldr	r1, [r6, #0]
 8006596:	061f      	lsls	r7, r3, #24
 8006598:	f851 5b04 	ldr.w	r5, [r1], #4
 800659c:	d402      	bmi.n	80065a4 <_printf_i+0x188>
 800659e:	065f      	lsls	r7, r3, #25
 80065a0:	bf48      	it	mi
 80065a2:	b2ad      	uxthmi	r5, r5
 80065a4:	6031      	str	r1, [r6, #0]
 80065a6:	07d9      	lsls	r1, r3, #31
 80065a8:	bf44      	itt	mi
 80065aa:	f043 0320 	orrmi.w	r3, r3, #32
 80065ae:	6023      	strmi	r3, [r4, #0]
 80065b0:	b11d      	cbz	r5, 80065ba <_printf_i+0x19e>
 80065b2:	2310      	movs	r3, #16
 80065b4:	e7ac      	b.n	8006510 <_printf_i+0xf4>
 80065b6:	4827      	ldr	r0, [pc, #156]	@ (8006654 <_printf_i+0x238>)
 80065b8:	e7e9      	b.n	800658e <_printf_i+0x172>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	f023 0320 	bic.w	r3, r3, #32
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	e7f6      	b.n	80065b2 <_printf_i+0x196>
 80065c4:	4616      	mov	r6, r2
 80065c6:	e7bd      	b.n	8006544 <_printf_i+0x128>
 80065c8:	6833      	ldr	r3, [r6, #0]
 80065ca:	6825      	ldr	r5, [r4, #0]
 80065cc:	6961      	ldr	r1, [r4, #20]
 80065ce:	1d18      	adds	r0, r3, #4
 80065d0:	6030      	str	r0, [r6, #0]
 80065d2:	062e      	lsls	r6, r5, #24
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	d501      	bpl.n	80065dc <_printf_i+0x1c0>
 80065d8:	6019      	str	r1, [r3, #0]
 80065da:	e002      	b.n	80065e2 <_printf_i+0x1c6>
 80065dc:	0668      	lsls	r0, r5, #25
 80065de:	d5fb      	bpl.n	80065d8 <_printf_i+0x1bc>
 80065e0:	8019      	strh	r1, [r3, #0]
 80065e2:	2300      	movs	r3, #0
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	4616      	mov	r6, r2
 80065e8:	e7bc      	b.n	8006564 <_printf_i+0x148>
 80065ea:	6833      	ldr	r3, [r6, #0]
 80065ec:	1d1a      	adds	r2, r3, #4
 80065ee:	6032      	str	r2, [r6, #0]
 80065f0:	681e      	ldr	r6, [r3, #0]
 80065f2:	6862      	ldr	r2, [r4, #4]
 80065f4:	2100      	movs	r1, #0
 80065f6:	4630      	mov	r0, r6
 80065f8:	f7f9 fdf2 	bl	80001e0 <memchr>
 80065fc:	b108      	cbz	r0, 8006602 <_printf_i+0x1e6>
 80065fe:	1b80      	subs	r0, r0, r6
 8006600:	6060      	str	r0, [r4, #4]
 8006602:	6863      	ldr	r3, [r4, #4]
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	2300      	movs	r3, #0
 8006608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800660c:	e7aa      	b.n	8006564 <_printf_i+0x148>
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	4632      	mov	r2, r6
 8006612:	4649      	mov	r1, r9
 8006614:	4640      	mov	r0, r8
 8006616:	47d0      	blx	sl
 8006618:	3001      	adds	r0, #1
 800661a:	d0ad      	beq.n	8006578 <_printf_i+0x15c>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	079b      	lsls	r3, r3, #30
 8006620:	d413      	bmi.n	800664a <_printf_i+0x22e>
 8006622:	68e0      	ldr	r0, [r4, #12]
 8006624:	9b03      	ldr	r3, [sp, #12]
 8006626:	4298      	cmp	r0, r3
 8006628:	bfb8      	it	lt
 800662a:	4618      	movlt	r0, r3
 800662c:	e7a6      	b.n	800657c <_printf_i+0x160>
 800662e:	2301      	movs	r3, #1
 8006630:	4632      	mov	r2, r6
 8006632:	4649      	mov	r1, r9
 8006634:	4640      	mov	r0, r8
 8006636:	47d0      	blx	sl
 8006638:	3001      	adds	r0, #1
 800663a:	d09d      	beq.n	8006578 <_printf_i+0x15c>
 800663c:	3501      	adds	r5, #1
 800663e:	68e3      	ldr	r3, [r4, #12]
 8006640:	9903      	ldr	r1, [sp, #12]
 8006642:	1a5b      	subs	r3, r3, r1
 8006644:	42ab      	cmp	r3, r5
 8006646:	dcf2      	bgt.n	800662e <_printf_i+0x212>
 8006648:	e7eb      	b.n	8006622 <_printf_i+0x206>
 800664a:	2500      	movs	r5, #0
 800664c:	f104 0619 	add.w	r6, r4, #25
 8006650:	e7f5      	b.n	800663e <_printf_i+0x222>
 8006652:	bf00      	nop
 8006654:	080071e4 	.word	0x080071e4
 8006658:	080071f5 	.word	0x080071f5

0800665c <__sflush_r>:
 800665c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006664:	0716      	lsls	r6, r2, #28
 8006666:	4605      	mov	r5, r0
 8006668:	460c      	mov	r4, r1
 800666a:	d454      	bmi.n	8006716 <__sflush_r+0xba>
 800666c:	684b      	ldr	r3, [r1, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	dc02      	bgt.n	8006678 <__sflush_r+0x1c>
 8006672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	dd48      	ble.n	800670a <__sflush_r+0xae>
 8006678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800667a:	2e00      	cmp	r6, #0
 800667c:	d045      	beq.n	800670a <__sflush_r+0xae>
 800667e:	2300      	movs	r3, #0
 8006680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006684:	682f      	ldr	r7, [r5, #0]
 8006686:	6a21      	ldr	r1, [r4, #32]
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	d030      	beq.n	80066ee <__sflush_r+0x92>
 800668c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	0759      	lsls	r1, r3, #29
 8006692:	d505      	bpl.n	80066a0 <__sflush_r+0x44>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800669a:	b10b      	cbz	r3, 80066a0 <__sflush_r+0x44>
 800669c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066a4:	6a21      	ldr	r1, [r4, #32]
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b0      	blx	r6
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	d106      	bne.n	80066be <__sflush_r+0x62>
 80066b0:	6829      	ldr	r1, [r5, #0]
 80066b2:	291d      	cmp	r1, #29
 80066b4:	d82b      	bhi.n	800670e <__sflush_r+0xb2>
 80066b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006760 <__sflush_r+0x104>)
 80066b8:	410a      	asrs	r2, r1
 80066ba:	07d6      	lsls	r6, r2, #31
 80066bc:	d427      	bmi.n	800670e <__sflush_r+0xb2>
 80066be:	2200      	movs	r2, #0
 80066c0:	6062      	str	r2, [r4, #4]
 80066c2:	04d9      	lsls	r1, r3, #19
 80066c4:	6922      	ldr	r2, [r4, #16]
 80066c6:	6022      	str	r2, [r4, #0]
 80066c8:	d504      	bpl.n	80066d4 <__sflush_r+0x78>
 80066ca:	1c42      	adds	r2, r0, #1
 80066cc:	d101      	bne.n	80066d2 <__sflush_r+0x76>
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	b903      	cbnz	r3, 80066d4 <__sflush_r+0x78>
 80066d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80066d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d6:	602f      	str	r7, [r5, #0]
 80066d8:	b1b9      	cbz	r1, 800670a <__sflush_r+0xae>
 80066da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066de:	4299      	cmp	r1, r3
 80066e0:	d002      	beq.n	80066e8 <__sflush_r+0x8c>
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7ff fbd4 	bl	8005e90 <_free_r>
 80066e8:	2300      	movs	r3, #0
 80066ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ec:	e00d      	b.n	800670a <__sflush_r+0xae>
 80066ee:	2301      	movs	r3, #1
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b0      	blx	r6
 80066f4:	4602      	mov	r2, r0
 80066f6:	1c50      	adds	r0, r2, #1
 80066f8:	d1c9      	bne.n	800668e <__sflush_r+0x32>
 80066fa:	682b      	ldr	r3, [r5, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0c6      	beq.n	800668e <__sflush_r+0x32>
 8006700:	2b1d      	cmp	r3, #29
 8006702:	d001      	beq.n	8006708 <__sflush_r+0xac>
 8006704:	2b16      	cmp	r3, #22
 8006706:	d11e      	bne.n	8006746 <__sflush_r+0xea>
 8006708:	602f      	str	r7, [r5, #0]
 800670a:	2000      	movs	r0, #0
 800670c:	e022      	b.n	8006754 <__sflush_r+0xf8>
 800670e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006712:	b21b      	sxth	r3, r3
 8006714:	e01b      	b.n	800674e <__sflush_r+0xf2>
 8006716:	690f      	ldr	r7, [r1, #16]
 8006718:	2f00      	cmp	r7, #0
 800671a:	d0f6      	beq.n	800670a <__sflush_r+0xae>
 800671c:	0793      	lsls	r3, r2, #30
 800671e:	680e      	ldr	r6, [r1, #0]
 8006720:	bf08      	it	eq
 8006722:	694b      	ldreq	r3, [r1, #20]
 8006724:	600f      	str	r7, [r1, #0]
 8006726:	bf18      	it	ne
 8006728:	2300      	movne	r3, #0
 800672a:	eba6 0807 	sub.w	r8, r6, r7
 800672e:	608b      	str	r3, [r1, #8]
 8006730:	f1b8 0f00 	cmp.w	r8, #0
 8006734:	dde9      	ble.n	800670a <__sflush_r+0xae>
 8006736:	6a21      	ldr	r1, [r4, #32]
 8006738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800673a:	4643      	mov	r3, r8
 800673c:	463a      	mov	r2, r7
 800673e:	4628      	mov	r0, r5
 8006740:	47b0      	blx	r6
 8006742:	2800      	cmp	r0, #0
 8006744:	dc08      	bgt.n	8006758 <__sflush_r+0xfc>
 8006746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006758:	4407      	add	r7, r0
 800675a:	eba8 0800 	sub.w	r8, r8, r0
 800675e:	e7e7      	b.n	8006730 <__sflush_r+0xd4>
 8006760:	dfbffffe 	.word	0xdfbffffe

08006764 <_fflush_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	4605      	mov	r5, r0
 800676a:	460c      	mov	r4, r1
 800676c:	b913      	cbnz	r3, 8006774 <_fflush_r+0x10>
 800676e:	2500      	movs	r5, #0
 8006770:	4628      	mov	r0, r5
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	b118      	cbz	r0, 800677e <_fflush_r+0x1a>
 8006776:	6a03      	ldr	r3, [r0, #32]
 8006778:	b90b      	cbnz	r3, 800677e <_fflush_r+0x1a>
 800677a:	f7ff fa21 	bl	8005bc0 <__sinit>
 800677e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f3      	beq.n	800676e <_fflush_r+0xa>
 8006786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006788:	07d0      	lsls	r0, r2, #31
 800678a:	d404      	bmi.n	8006796 <_fflush_r+0x32>
 800678c:	0599      	lsls	r1, r3, #22
 800678e:	d402      	bmi.n	8006796 <_fflush_r+0x32>
 8006790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006792:	f7ff fb4e 	bl	8005e32 <__retarget_lock_acquire_recursive>
 8006796:	4628      	mov	r0, r5
 8006798:	4621      	mov	r1, r4
 800679a:	f7ff ff5f 	bl	800665c <__sflush_r>
 800679e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067a0:	07da      	lsls	r2, r3, #31
 80067a2:	4605      	mov	r5, r0
 80067a4:	d4e4      	bmi.n	8006770 <_fflush_r+0xc>
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	059b      	lsls	r3, r3, #22
 80067aa:	d4e1      	bmi.n	8006770 <_fflush_r+0xc>
 80067ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ae:	f7ff fb41 	bl	8005e34 <__retarget_lock_release_recursive>
 80067b2:	e7dd      	b.n	8006770 <_fflush_r+0xc>

080067b4 <fiprintf>:
 80067b4:	b40e      	push	{r1, r2, r3}
 80067b6:	b503      	push	{r0, r1, lr}
 80067b8:	4601      	mov	r1, r0
 80067ba:	ab03      	add	r3, sp, #12
 80067bc:	4805      	ldr	r0, [pc, #20]	@ (80067d4 <fiprintf+0x20>)
 80067be:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	f000 f88f 	bl	80068e8 <_vfiprintf_r>
 80067ca:	b002      	add	sp, #8
 80067cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d0:	b003      	add	sp, #12
 80067d2:	4770      	bx	lr
 80067d4:	20000074 	.word	0x20000074

080067d8 <memmove>:
 80067d8:	4288      	cmp	r0, r1
 80067da:	b510      	push	{r4, lr}
 80067dc:	eb01 0402 	add.w	r4, r1, r2
 80067e0:	d902      	bls.n	80067e8 <memmove+0x10>
 80067e2:	4284      	cmp	r4, r0
 80067e4:	4623      	mov	r3, r4
 80067e6:	d807      	bhi.n	80067f8 <memmove+0x20>
 80067e8:	1e43      	subs	r3, r0, #1
 80067ea:	42a1      	cmp	r1, r4
 80067ec:	d008      	beq.n	8006800 <memmove+0x28>
 80067ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067f6:	e7f8      	b.n	80067ea <memmove+0x12>
 80067f8:	4402      	add	r2, r0
 80067fa:	4601      	mov	r1, r0
 80067fc:	428a      	cmp	r2, r1
 80067fe:	d100      	bne.n	8006802 <memmove+0x2a>
 8006800:	bd10      	pop	{r4, pc}
 8006802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800680a:	e7f7      	b.n	80067fc <memmove+0x24>

0800680c <_sbrk_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d06      	ldr	r5, [pc, #24]	@ (8006828 <_sbrk_r+0x1c>)
 8006810:	2300      	movs	r3, #0
 8006812:	4604      	mov	r4, r0
 8006814:	4608      	mov	r0, r1
 8006816:	602b      	str	r3, [r5, #0]
 8006818:	f7fb fe02 	bl	8002420 <_sbrk>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d102      	bne.n	8006826 <_sbrk_r+0x1a>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	b103      	cbz	r3, 8006826 <_sbrk_r+0x1a>
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	20002604 	.word	0x20002604

0800682c <abort>:
 800682c:	b508      	push	{r3, lr}
 800682e:	2006      	movs	r0, #6
 8006830:	f000 fa2e 	bl	8006c90 <raise>
 8006834:	2001      	movs	r0, #1
 8006836:	f7fb fd7b 	bl	8002330 <_exit>

0800683a <_realloc_r>:
 800683a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683e:	4680      	mov	r8, r0
 8006840:	4615      	mov	r5, r2
 8006842:	460c      	mov	r4, r1
 8006844:	b921      	cbnz	r1, 8006850 <_realloc_r+0x16>
 8006846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800684a:	4611      	mov	r1, r2
 800684c:	f7ff bb94 	b.w	8005f78 <_malloc_r>
 8006850:	b92a      	cbnz	r2, 800685e <_realloc_r+0x24>
 8006852:	f7ff fb1d 	bl	8005e90 <_free_r>
 8006856:	2400      	movs	r4, #0
 8006858:	4620      	mov	r0, r4
 800685a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800685e:	f000 fa33 	bl	8006cc8 <_malloc_usable_size_r>
 8006862:	4285      	cmp	r5, r0
 8006864:	4606      	mov	r6, r0
 8006866:	d802      	bhi.n	800686e <_realloc_r+0x34>
 8006868:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800686c:	d8f4      	bhi.n	8006858 <_realloc_r+0x1e>
 800686e:	4629      	mov	r1, r5
 8006870:	4640      	mov	r0, r8
 8006872:	f7ff fb81 	bl	8005f78 <_malloc_r>
 8006876:	4607      	mov	r7, r0
 8006878:	2800      	cmp	r0, #0
 800687a:	d0ec      	beq.n	8006856 <_realloc_r+0x1c>
 800687c:	42b5      	cmp	r5, r6
 800687e:	462a      	mov	r2, r5
 8006880:	4621      	mov	r1, r4
 8006882:	bf28      	it	cs
 8006884:	4632      	movcs	r2, r6
 8006886:	f7ff fad6 	bl	8005e36 <memcpy>
 800688a:	4621      	mov	r1, r4
 800688c:	4640      	mov	r0, r8
 800688e:	f7ff faff 	bl	8005e90 <_free_r>
 8006892:	463c      	mov	r4, r7
 8006894:	e7e0      	b.n	8006858 <_realloc_r+0x1e>

08006896 <__sfputc_r>:
 8006896:	6893      	ldr	r3, [r2, #8]
 8006898:	3b01      	subs	r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	b410      	push	{r4}
 800689e:	6093      	str	r3, [r2, #8]
 80068a0:	da08      	bge.n	80068b4 <__sfputc_r+0x1e>
 80068a2:	6994      	ldr	r4, [r2, #24]
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	db01      	blt.n	80068ac <__sfputc_r+0x16>
 80068a8:	290a      	cmp	r1, #10
 80068aa:	d103      	bne.n	80068b4 <__sfputc_r+0x1e>
 80068ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068b0:	f000 b932 	b.w	8006b18 <__swbuf_r>
 80068b4:	6813      	ldr	r3, [r2, #0]
 80068b6:	1c58      	adds	r0, r3, #1
 80068b8:	6010      	str	r0, [r2, #0]
 80068ba:	7019      	strb	r1, [r3, #0]
 80068bc:	4608      	mov	r0, r1
 80068be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <__sfputs_r>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	4606      	mov	r6, r0
 80068c8:	460f      	mov	r7, r1
 80068ca:	4614      	mov	r4, r2
 80068cc:	18d5      	adds	r5, r2, r3
 80068ce:	42ac      	cmp	r4, r5
 80068d0:	d101      	bne.n	80068d6 <__sfputs_r+0x12>
 80068d2:	2000      	movs	r0, #0
 80068d4:	e007      	b.n	80068e6 <__sfputs_r+0x22>
 80068d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068da:	463a      	mov	r2, r7
 80068dc:	4630      	mov	r0, r6
 80068de:	f7ff ffda 	bl	8006896 <__sfputc_r>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	d1f3      	bne.n	80068ce <__sfputs_r+0xa>
 80068e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068e8 <_vfiprintf_r>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	460d      	mov	r5, r1
 80068ee:	b09d      	sub	sp, #116	@ 0x74
 80068f0:	4614      	mov	r4, r2
 80068f2:	4698      	mov	r8, r3
 80068f4:	4606      	mov	r6, r0
 80068f6:	b118      	cbz	r0, 8006900 <_vfiprintf_r+0x18>
 80068f8:	6a03      	ldr	r3, [r0, #32]
 80068fa:	b90b      	cbnz	r3, 8006900 <_vfiprintf_r+0x18>
 80068fc:	f7ff f960 	bl	8005bc0 <__sinit>
 8006900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006902:	07d9      	lsls	r1, r3, #31
 8006904:	d405      	bmi.n	8006912 <_vfiprintf_r+0x2a>
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	059a      	lsls	r2, r3, #22
 800690a:	d402      	bmi.n	8006912 <_vfiprintf_r+0x2a>
 800690c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800690e:	f7ff fa90 	bl	8005e32 <__retarget_lock_acquire_recursive>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	071b      	lsls	r3, r3, #28
 8006916:	d501      	bpl.n	800691c <_vfiprintf_r+0x34>
 8006918:	692b      	ldr	r3, [r5, #16]
 800691a:	b99b      	cbnz	r3, 8006944 <_vfiprintf_r+0x5c>
 800691c:	4629      	mov	r1, r5
 800691e:	4630      	mov	r0, r6
 8006920:	f000 f938 	bl	8006b94 <__swsetup_r>
 8006924:	b170      	cbz	r0, 8006944 <_vfiprintf_r+0x5c>
 8006926:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006928:	07dc      	lsls	r4, r3, #31
 800692a:	d504      	bpl.n	8006936 <_vfiprintf_r+0x4e>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b01d      	add	sp, #116	@ 0x74
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	89ab      	ldrh	r3, [r5, #12]
 8006938:	0598      	lsls	r0, r3, #22
 800693a:	d4f7      	bmi.n	800692c <_vfiprintf_r+0x44>
 800693c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800693e:	f7ff fa79 	bl	8005e34 <__retarget_lock_release_recursive>
 8006942:	e7f3      	b.n	800692c <_vfiprintf_r+0x44>
 8006944:	2300      	movs	r3, #0
 8006946:	9309      	str	r3, [sp, #36]	@ 0x24
 8006948:	2320      	movs	r3, #32
 800694a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800694e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006952:	2330      	movs	r3, #48	@ 0x30
 8006954:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b04 <_vfiprintf_r+0x21c>
 8006958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800695c:	f04f 0901 	mov.w	r9, #1
 8006960:	4623      	mov	r3, r4
 8006962:	469a      	mov	sl, r3
 8006964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006968:	b10a      	cbz	r2, 800696e <_vfiprintf_r+0x86>
 800696a:	2a25      	cmp	r2, #37	@ 0x25
 800696c:	d1f9      	bne.n	8006962 <_vfiprintf_r+0x7a>
 800696e:	ebba 0b04 	subs.w	fp, sl, r4
 8006972:	d00b      	beq.n	800698c <_vfiprintf_r+0xa4>
 8006974:	465b      	mov	r3, fp
 8006976:	4622      	mov	r2, r4
 8006978:	4629      	mov	r1, r5
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff ffa2 	bl	80068c4 <__sfputs_r>
 8006980:	3001      	adds	r0, #1
 8006982:	f000 80a7 	beq.w	8006ad4 <_vfiprintf_r+0x1ec>
 8006986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006988:	445a      	add	r2, fp
 800698a:	9209      	str	r2, [sp, #36]	@ 0x24
 800698c:	f89a 3000 	ldrb.w	r3, [sl]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 809f 	beq.w	8006ad4 <_vfiprintf_r+0x1ec>
 8006996:	2300      	movs	r3, #0
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069a0:	f10a 0a01 	add.w	sl, sl, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	9307      	str	r3, [sp, #28]
 80069a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80069ae:	4654      	mov	r4, sl
 80069b0:	2205      	movs	r2, #5
 80069b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b6:	4853      	ldr	r0, [pc, #332]	@ (8006b04 <_vfiprintf_r+0x21c>)
 80069b8:	f7f9 fc12 	bl	80001e0 <memchr>
 80069bc:	9a04      	ldr	r2, [sp, #16]
 80069be:	b9d8      	cbnz	r0, 80069f8 <_vfiprintf_r+0x110>
 80069c0:	06d1      	lsls	r1, r2, #27
 80069c2:	bf44      	itt	mi
 80069c4:	2320      	movmi	r3, #32
 80069c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069ca:	0713      	lsls	r3, r2, #28
 80069cc:	bf44      	itt	mi
 80069ce:	232b      	movmi	r3, #43	@ 0x2b
 80069d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069d4:	f89a 3000 	ldrb.w	r3, [sl]
 80069d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80069da:	d015      	beq.n	8006a08 <_vfiprintf_r+0x120>
 80069dc:	9a07      	ldr	r2, [sp, #28]
 80069de:	4654      	mov	r4, sl
 80069e0:	2000      	movs	r0, #0
 80069e2:	f04f 0c0a 	mov.w	ip, #10
 80069e6:	4621      	mov	r1, r4
 80069e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069ec:	3b30      	subs	r3, #48	@ 0x30
 80069ee:	2b09      	cmp	r3, #9
 80069f0:	d94b      	bls.n	8006a8a <_vfiprintf_r+0x1a2>
 80069f2:	b1b0      	cbz	r0, 8006a22 <_vfiprintf_r+0x13a>
 80069f4:	9207      	str	r2, [sp, #28]
 80069f6:	e014      	b.n	8006a22 <_vfiprintf_r+0x13a>
 80069f8:	eba0 0308 	sub.w	r3, r0, r8
 80069fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006a00:	4313      	orrs	r3, r2
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	46a2      	mov	sl, r4
 8006a06:	e7d2      	b.n	80069ae <_vfiprintf_r+0xc6>
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	1d19      	adds	r1, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	9103      	str	r1, [sp, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bfbb      	ittet	lt
 8006a14:	425b      	neglt	r3, r3
 8006a16:	f042 0202 	orrlt.w	r2, r2, #2
 8006a1a:	9307      	strge	r3, [sp, #28]
 8006a1c:	9307      	strlt	r3, [sp, #28]
 8006a1e:	bfb8      	it	lt
 8006a20:	9204      	strlt	r2, [sp, #16]
 8006a22:	7823      	ldrb	r3, [r4, #0]
 8006a24:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a26:	d10a      	bne.n	8006a3e <_vfiprintf_r+0x156>
 8006a28:	7863      	ldrb	r3, [r4, #1]
 8006a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a2c:	d132      	bne.n	8006a94 <_vfiprintf_r+0x1ac>
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	1d1a      	adds	r2, r3, #4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	9203      	str	r2, [sp, #12]
 8006a36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a3a:	3402      	adds	r4, #2
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b14 <_vfiprintf_r+0x22c>
 8006a42:	7821      	ldrb	r1, [r4, #0]
 8006a44:	2203      	movs	r2, #3
 8006a46:	4650      	mov	r0, sl
 8006a48:	f7f9 fbca 	bl	80001e0 <memchr>
 8006a4c:	b138      	cbz	r0, 8006a5e <_vfiprintf_r+0x176>
 8006a4e:	9b04      	ldr	r3, [sp, #16]
 8006a50:	eba0 000a 	sub.w	r0, r0, sl
 8006a54:	2240      	movs	r2, #64	@ 0x40
 8006a56:	4082      	lsls	r2, r0
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	3401      	adds	r4, #1
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	4829      	ldr	r0, [pc, #164]	@ (8006b08 <_vfiprintf_r+0x220>)
 8006a64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a68:	2206      	movs	r2, #6
 8006a6a:	f7f9 fbb9 	bl	80001e0 <memchr>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d03f      	beq.n	8006af2 <_vfiprintf_r+0x20a>
 8006a72:	4b26      	ldr	r3, [pc, #152]	@ (8006b0c <_vfiprintf_r+0x224>)
 8006a74:	bb1b      	cbnz	r3, 8006abe <_vfiprintf_r+0x1d6>
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	3307      	adds	r3, #7
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	3308      	adds	r3, #8
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a84:	443b      	add	r3, r7
 8006a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a88:	e76a      	b.n	8006960 <_vfiprintf_r+0x78>
 8006a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a8e:	460c      	mov	r4, r1
 8006a90:	2001      	movs	r0, #1
 8006a92:	e7a8      	b.n	80069e6 <_vfiprintf_r+0xfe>
 8006a94:	2300      	movs	r3, #0
 8006a96:	3401      	adds	r4, #1
 8006a98:	9305      	str	r3, [sp, #20]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f04f 0c0a 	mov.w	ip, #10
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aa6:	3a30      	subs	r2, #48	@ 0x30
 8006aa8:	2a09      	cmp	r2, #9
 8006aaa:	d903      	bls.n	8006ab4 <_vfiprintf_r+0x1cc>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0c6      	beq.n	8006a3e <_vfiprintf_r+0x156>
 8006ab0:	9105      	str	r1, [sp, #20]
 8006ab2:	e7c4      	b.n	8006a3e <_vfiprintf_r+0x156>
 8006ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ab8:	4604      	mov	r4, r0
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7f0      	b.n	8006aa0 <_vfiprintf_r+0x1b8>
 8006abe:	ab03      	add	r3, sp, #12
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	462a      	mov	r2, r5
 8006ac4:	4b12      	ldr	r3, [pc, #72]	@ (8006b10 <_vfiprintf_r+0x228>)
 8006ac6:	a904      	add	r1, sp, #16
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f3af 8000 	nop.w
 8006ace:	4607      	mov	r7, r0
 8006ad0:	1c78      	adds	r0, r7, #1
 8006ad2:	d1d6      	bne.n	8006a82 <_vfiprintf_r+0x19a>
 8006ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ad6:	07d9      	lsls	r1, r3, #31
 8006ad8:	d405      	bmi.n	8006ae6 <_vfiprintf_r+0x1fe>
 8006ada:	89ab      	ldrh	r3, [r5, #12]
 8006adc:	059a      	lsls	r2, r3, #22
 8006ade:	d402      	bmi.n	8006ae6 <_vfiprintf_r+0x1fe>
 8006ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ae2:	f7ff f9a7 	bl	8005e34 <__retarget_lock_release_recursive>
 8006ae6:	89ab      	ldrh	r3, [r5, #12]
 8006ae8:	065b      	lsls	r3, r3, #25
 8006aea:	f53f af1f 	bmi.w	800692c <_vfiprintf_r+0x44>
 8006aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006af0:	e71e      	b.n	8006930 <_vfiprintf_r+0x48>
 8006af2:	ab03      	add	r3, sp, #12
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	462a      	mov	r2, r5
 8006af8:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <_vfiprintf_r+0x228>)
 8006afa:	a904      	add	r1, sp, #16
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7ff fc8d 	bl	800641c <_printf_i>
 8006b02:	e7e4      	b.n	8006ace <_vfiprintf_r+0x1e6>
 8006b04:	080071d3 	.word	0x080071d3
 8006b08:	080071dd 	.word	0x080071dd
 8006b0c:	00000000 	.word	0x00000000
 8006b10:	080068c5 	.word	0x080068c5
 8006b14:	080071d9 	.word	0x080071d9

08006b18 <__swbuf_r>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	460e      	mov	r6, r1
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	4605      	mov	r5, r0
 8006b20:	b118      	cbz	r0, 8006b2a <__swbuf_r+0x12>
 8006b22:	6a03      	ldr	r3, [r0, #32]
 8006b24:	b90b      	cbnz	r3, 8006b2a <__swbuf_r+0x12>
 8006b26:	f7ff f84b 	bl	8005bc0 <__sinit>
 8006b2a:	69a3      	ldr	r3, [r4, #24]
 8006b2c:	60a3      	str	r3, [r4, #8]
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	071a      	lsls	r2, r3, #28
 8006b32:	d501      	bpl.n	8006b38 <__swbuf_r+0x20>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	b943      	cbnz	r3, 8006b4a <__swbuf_r+0x32>
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f000 f82a 	bl	8006b94 <__swsetup_r>
 8006b40:	b118      	cbz	r0, 8006b4a <__swbuf_r+0x32>
 8006b42:	f04f 37ff 	mov.w	r7, #4294967295
 8006b46:	4638      	mov	r0, r7
 8006b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	6922      	ldr	r2, [r4, #16]
 8006b4e:	1a98      	subs	r0, r3, r2
 8006b50:	6963      	ldr	r3, [r4, #20]
 8006b52:	b2f6      	uxtb	r6, r6
 8006b54:	4283      	cmp	r3, r0
 8006b56:	4637      	mov	r7, r6
 8006b58:	dc05      	bgt.n	8006b66 <__swbuf_r+0x4e>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f7ff fe01 	bl	8006764 <_fflush_r>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d1ed      	bne.n	8006b42 <__swbuf_r+0x2a>
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	60a3      	str	r3, [r4, #8]
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	701e      	strb	r6, [r3, #0]
 8006b74:	6962      	ldr	r2, [r4, #20]
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d004      	beq.n	8006b86 <__swbuf_r+0x6e>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	07db      	lsls	r3, r3, #31
 8006b80:	d5e1      	bpl.n	8006b46 <__swbuf_r+0x2e>
 8006b82:	2e0a      	cmp	r6, #10
 8006b84:	d1df      	bne.n	8006b46 <__swbuf_r+0x2e>
 8006b86:	4621      	mov	r1, r4
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f7ff fdeb 	bl	8006764 <_fflush_r>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d0d9      	beq.n	8006b46 <__swbuf_r+0x2e>
 8006b92:	e7d6      	b.n	8006b42 <__swbuf_r+0x2a>

08006b94 <__swsetup_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4b29      	ldr	r3, [pc, #164]	@ (8006c3c <__swsetup_r+0xa8>)
 8006b98:	4605      	mov	r5, r0
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	b118      	cbz	r0, 8006ba8 <__swsetup_r+0x14>
 8006ba0:	6a03      	ldr	r3, [r0, #32]
 8006ba2:	b90b      	cbnz	r3, 8006ba8 <__swsetup_r+0x14>
 8006ba4:	f7ff f80c 	bl	8005bc0 <__sinit>
 8006ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bac:	0719      	lsls	r1, r3, #28
 8006bae:	d422      	bmi.n	8006bf6 <__swsetup_r+0x62>
 8006bb0:	06da      	lsls	r2, r3, #27
 8006bb2:	d407      	bmi.n	8006bc4 <__swsetup_r+0x30>
 8006bb4:	2209      	movs	r2, #9
 8006bb6:	602a      	str	r2, [r5, #0]
 8006bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc2:	e033      	b.n	8006c2c <__swsetup_r+0x98>
 8006bc4:	0758      	lsls	r0, r3, #29
 8006bc6:	d512      	bpl.n	8006bee <__swsetup_r+0x5a>
 8006bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bca:	b141      	cbz	r1, 8006bde <__swsetup_r+0x4a>
 8006bcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bd0:	4299      	cmp	r1, r3
 8006bd2:	d002      	beq.n	8006bda <__swsetup_r+0x46>
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f7ff f95b 	bl	8005e90 <_free_r>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	2300      	movs	r3, #0
 8006be8:	6063      	str	r3, [r4, #4]
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f043 0308 	orr.w	r3, r3, #8
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	b94b      	cbnz	r3, 8006c0e <__swsetup_r+0x7a>
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c04:	d003      	beq.n	8006c0e <__swsetup_r+0x7a>
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 f88b 	bl	8006d24 <__smakebuf_r>
 8006c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c12:	f013 0201 	ands.w	r2, r3, #1
 8006c16:	d00a      	beq.n	8006c2e <__swsetup_r+0x9a>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	60a2      	str	r2, [r4, #8]
 8006c1c:	6962      	ldr	r2, [r4, #20]
 8006c1e:	4252      	negs	r2, r2
 8006c20:	61a2      	str	r2, [r4, #24]
 8006c22:	6922      	ldr	r2, [r4, #16]
 8006c24:	b942      	cbnz	r2, 8006c38 <__swsetup_r+0xa4>
 8006c26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c2a:	d1c5      	bne.n	8006bb8 <__swsetup_r+0x24>
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}
 8006c2e:	0799      	lsls	r1, r3, #30
 8006c30:	bf58      	it	pl
 8006c32:	6962      	ldrpl	r2, [r4, #20]
 8006c34:	60a2      	str	r2, [r4, #8]
 8006c36:	e7f4      	b.n	8006c22 <__swsetup_r+0x8e>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	e7f7      	b.n	8006c2c <__swsetup_r+0x98>
 8006c3c:	20000074 	.word	0x20000074

08006c40 <_raise_r>:
 8006c40:	291f      	cmp	r1, #31
 8006c42:	b538      	push	{r3, r4, r5, lr}
 8006c44:	4605      	mov	r5, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	d904      	bls.n	8006c54 <_raise_r+0x14>
 8006c4a:	2316      	movs	r3, #22
 8006c4c:	6003      	str	r3, [r0, #0]
 8006c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c56:	b112      	cbz	r2, 8006c5e <_raise_r+0x1e>
 8006c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c5c:	b94b      	cbnz	r3, 8006c72 <_raise_r+0x32>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f830 	bl	8006cc4 <_getpid_r>
 8006c64:	4622      	mov	r2, r4
 8006c66:	4601      	mov	r1, r0
 8006c68:	4628      	mov	r0, r5
 8006c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c6e:	f000 b817 	b.w	8006ca0 <_kill_r>
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d00a      	beq.n	8006c8c <_raise_r+0x4c>
 8006c76:	1c59      	adds	r1, r3, #1
 8006c78:	d103      	bne.n	8006c82 <_raise_r+0x42>
 8006c7a:	2316      	movs	r3, #22
 8006c7c:	6003      	str	r3, [r0, #0]
 8006c7e:	2001      	movs	r0, #1
 8006c80:	e7e7      	b.n	8006c52 <_raise_r+0x12>
 8006c82:	2100      	movs	r1, #0
 8006c84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	4798      	blx	r3
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7e0      	b.n	8006c52 <_raise_r+0x12>

08006c90 <raise>:
 8006c90:	4b02      	ldr	r3, [pc, #8]	@ (8006c9c <raise+0xc>)
 8006c92:	4601      	mov	r1, r0
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	f7ff bfd3 	b.w	8006c40 <_raise_r>
 8006c9a:	bf00      	nop
 8006c9c:	20000074 	.word	0x20000074

08006ca0 <_kill_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d07      	ldr	r5, [pc, #28]	@ (8006cc0 <_kill_r+0x20>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	602b      	str	r3, [r5, #0]
 8006cae:	f7fb fb2f 	bl	8002310 <_kill>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	d102      	bne.n	8006cbc <_kill_r+0x1c>
 8006cb6:	682b      	ldr	r3, [r5, #0]
 8006cb8:	b103      	cbz	r3, 8006cbc <_kill_r+0x1c>
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	bd38      	pop	{r3, r4, r5, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20002604 	.word	0x20002604

08006cc4 <_getpid_r>:
 8006cc4:	f7fb bb1c 	b.w	8002300 <_getpid>

08006cc8 <_malloc_usable_size_r>:
 8006cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ccc:	1f18      	subs	r0, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bfbc      	itt	lt
 8006cd2:	580b      	ldrlt	r3, [r1, r0]
 8006cd4:	18c0      	addlt	r0, r0, r3
 8006cd6:	4770      	bx	lr

08006cd8 <__swhatbuf_r>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	460c      	mov	r4, r1
 8006cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	b096      	sub	sp, #88	@ 0x58
 8006ce4:	4615      	mov	r5, r2
 8006ce6:	461e      	mov	r6, r3
 8006ce8:	da0d      	bge.n	8006d06 <__swhatbuf_r+0x2e>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cf0:	f04f 0100 	mov.w	r1, #0
 8006cf4:	bf14      	ite	ne
 8006cf6:	2340      	movne	r3, #64	@ 0x40
 8006cf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	6031      	str	r1, [r6, #0]
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	b016      	add	sp, #88	@ 0x58
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	466a      	mov	r2, sp
 8006d08:	f000 f848 	bl	8006d9c <_fstat_r>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	dbec      	blt.n	8006cea <__swhatbuf_r+0x12>
 8006d10:	9901      	ldr	r1, [sp, #4]
 8006d12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d1a:	4259      	negs	r1, r3
 8006d1c:	4159      	adcs	r1, r3
 8006d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d22:	e7eb      	b.n	8006cfc <__swhatbuf_r+0x24>

08006d24 <__smakebuf_r>:
 8006d24:	898b      	ldrh	r3, [r1, #12]
 8006d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d28:	079d      	lsls	r5, r3, #30
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	d507      	bpl.n	8006d40 <__smakebuf_r+0x1c>
 8006d30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	6123      	str	r3, [r4, #16]
 8006d38:	2301      	movs	r3, #1
 8006d3a:	6163      	str	r3, [r4, #20]
 8006d3c:	b003      	add	sp, #12
 8006d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d40:	ab01      	add	r3, sp, #4
 8006d42:	466a      	mov	r2, sp
 8006d44:	f7ff ffc8 	bl	8006cd8 <__swhatbuf_r>
 8006d48:	9f00      	ldr	r7, [sp, #0]
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7ff f912 	bl	8005f78 <_malloc_r>
 8006d54:	b948      	cbnz	r0, 8006d6a <__smakebuf_r+0x46>
 8006d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5a:	059a      	lsls	r2, r3, #22
 8006d5c:	d4ee      	bmi.n	8006d3c <__smakebuf_r+0x18>
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	f043 0302 	orr.w	r3, r3, #2
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	e7e2      	b.n	8006d30 <__smakebuf_r+0xc>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	6020      	str	r0, [r4, #0]
 8006d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d72:	81a3      	strh	r3, [r4, #12]
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d7a:	b15b      	cbz	r3, 8006d94 <__smakebuf_r+0x70>
 8006d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d80:	4630      	mov	r0, r6
 8006d82:	f000 f81d 	bl	8006dc0 <_isatty_r>
 8006d86:	b128      	cbz	r0, 8006d94 <__smakebuf_r+0x70>
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	f023 0303 	bic.w	r3, r3, #3
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	81a3      	strh	r3, [r4, #12]
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	431d      	orrs	r5, r3
 8006d98:	81a5      	strh	r5, [r4, #12]
 8006d9a:	e7cf      	b.n	8006d3c <__smakebuf_r+0x18>

08006d9c <_fstat_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d07      	ldr	r5, [pc, #28]	@ (8006dbc <_fstat_r+0x20>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	4611      	mov	r1, r2
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	f7fb fb11 	bl	80023d0 <_fstat>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d102      	bne.n	8006db8 <_fstat_r+0x1c>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	b103      	cbz	r3, 8006db8 <_fstat_r+0x1c>
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	bd38      	pop	{r3, r4, r5, pc}
 8006dba:	bf00      	nop
 8006dbc:	20002604 	.word	0x20002604

08006dc0 <_isatty_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d06      	ldr	r5, [pc, #24]	@ (8006ddc <_isatty_r+0x1c>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f7fb fb10 	bl	80023f0 <_isatty>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_isatty_r+0x1a>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_isatty_r+0x1a>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	20002604 	.word	0x20002604

08006de0 <_init>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr

08006dec <_fini>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	bf00      	nop
 8006df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df2:	bc08      	pop	{r3}
 8006df4:	469e      	mov	lr, r3
 8006df6:	4770      	bx	lr
